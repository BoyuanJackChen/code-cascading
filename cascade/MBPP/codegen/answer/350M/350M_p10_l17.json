[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = 0\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                shared_elements += 1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    s1=set(test_tup1)\n    s2=set(test_tup2)\n    shared=s1.intersection(s2)\n    return shared\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup_1 = test_tup1\n    tup_2 = test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    x, y = test_tup1\n    z, w = test_tup2\n    return x.intersection(y).intersection(z).intersection(w)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # TODO: Write your code here\n    return\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Access elements\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n    e = []\n    for i in b:\n        if i in c and i not in e:\n            e.append(i)\n    for i in c:\n        if i in a and i not in e:\n            e.append(i)\n    for i in a:\n        if i in d and i not in e:\n            e.append(i)\n    return e\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print(\"Test case 1\", test_tup1)\n    #print(\"Test case 2\", test_tup2)\n    t1 = {}\n    t2 = {}\n    for key in test_tup1:\n        if key not in t1:\n            t1[key] = test_tup1[key]\n    for key in test_tup2:\n        if key not in t2:\n            t2[key] = test_tup2[key]\n    #print(\"\\nShared elements in test_tup1:\", t1)\n    #print(\"\\nShared elements in test_tup2:\", t2)\n    if len(t1) == len(t2):\n        #print(\"\\nSet is equal\")\n        return t1\n    else:\n        #print(\"\\nSet is not equal\")\n        return t2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # copy both lists into a new list\n    new_list1 = test_tup1\n    new_list2 = test_tup2\n    # find unique values\n    # no need to sort but need to do this because the values are stored in different order.\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    # iterate through the sets and append to new_list\n    for x in test_tup1_set:\n        if x in test_tup2_set:\n            new_list1.append(x)\n    for x in test_tup2_set:\n        if x in test_tup1_set:\n            new_list2.append(x)\n    # return two lists\n    return new_list1, new_list2\n    \ndef main():\n    print(similar_elements([0,1,2,3,4,5,6,7,8,9], [2,5,7,9,10,13,16,19,23,26]))\n    print(similar_elements([0,1,2,3,4,5,6,7,8,9], [2,5,7,9,10,13,16,19,23,26], []))\n    print(similar_elements([0,1,2,3,4,5,6,7,8,9], [2,5,7,9,10,13,16,19,23,26], []))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = {}\n    for x in range(len(test_tup1)):\n        if test_tup1[x] in test_tup2:\n            shared_elements[test_tup1[x]] = test_tup2[test_tup1[x]]\n        else:\n            shared_elements[test_tup1[x]] = None\n    return shared_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    s = str(n)\n    count = 0\n    for i in s:\n        if i == '3' or i == '5':\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1: return False\n    if n==2: return True\n    if n==3: return False\n    if n%2==0: return True\n    if n%3==0: return False\n    if n%4==0: return True\n    if n%5==0: return False\n    if n%6==0: return True\n    if n%7==0: return False\n    if n%8==0: return True\n    if n%9==0: return False\n    if n%10==0: return True\n    if n%11==0: return False\n    if n%12==0: return True\n    if n%13==0: return False\n    if n%14==0: return True\n    if n%15==0: return False\n    if n%16==0: return True\n    if n%17==0: return False\n    if n%18==0: return True\n    if n%19==0: return False\n    if n%20==0: return True\n    if n%21==0: return False\n    if n%22==0: return True\n    if n%23==0: return False\n    if n%24==0: return True\n    if n%25==0: return False\n    if n%26==0: return True\n    if n%27==0: return False\n    if n%28==0: return True\n    if n%29==0: return False\n    if n%30==0: return True\n    if n%31==0: return False\n    if n%32==0: return True\n    if n%33==0: return False\n    if n%34==0: return True\n    if n%35==0: return False\n    if n%36==0: return True\n    if n%37==0: return False\n    if n%38==0: return True\n    if n%39==0: return False\n    if n%40==0: return True\n    if n%41==0: return False\n    if n%42==0: return True\n    if n%43==0: return False\n    if n%44==0: return True\n    if n%45==0: return False\n    if n%46==0: return True\n    if n%47==0: return False\n    if n%48==0: return True\n    if n%49==0: return False\n    if n%50==0: return True\n    if n%51==0: return False\n    if n%52==0: return True\n    if n%53==0: return False\n    if n%54==0: return True\n    if n%55==0: return False\n    if n%56==0: return True\n    if n%57==0: return False\n    if n%58==0: return True\n    if n%59==0: return False\n    if n%60==0: return True\n    if n%61==0: return False\n    if n%62==0: return True\n    if n%63==0: return False\n    if n%64==0: return True\n    if n%65==0: return False\n    if n%66==0: return True\n    if n%67==0: return False\n    if n%68==0: return True\n    if n%69==0: return False\n    if n%70==0: return True\n    if n%71==0: return False\n    if n%72==0: return True\n    if n%73==0: return False\n    if n%74==0: return True\n    if n%75==0: return False\n    if n%76==0: return True\n    if n%77==0: return False\n    if n%78==0: return True\n    if n%79==0: return False\n    if n%80==0: return True\n    if n%81==0: return False\n    if n%82==0: return True\n    if n%83==0: return False\n    if n%84==0: return True\n    if n%85==0: return False\n    if n%86==0: return True\n    if n%87==0: return False\n    if n%88==0: return True\n    if n%89==0: return False\n    if n%90==0: return True\n    if n%91==0: return False\n    if n%92==0: return True\n    if n%93==0: return False\n    if n%94==0: return True\n    if n%95==0: return False\n    if n%96==0: return True\n    if n%97==0: return False\n    if n%98==0: return True\n    if n%99==0: return False\n    if n%100==0: return True\n    if n%101==0: return False\n    if n%102==0: return True\n    if n%103==0: return False\n    if n%104==0: return True\n    if n%105==0: return False\n    if n%106==0: return True\n    if n%107==0: return False\n    if n%108==0: return True\n    if n%109==0: return False\n    if n%110==0: return True\n    if n%111==0: return False\n    if n%112==0: return True\n    if n%113==0: return False\n    if n%114==0: return True\n    if n%115==0: return False\n    if n%116==0: return True\n    if n%117==0: return False\n    if n%118==0: return True\n    if n%119==0: return False\n    if n%120==0: return True\n    if n%121==0: return False\n    if n%122==0: return True\n    if n%123==0: return False\n    if n%124==0: return True\n    if n%125==0: return False\n    if n%126==0: return True\n    if n%127==0: return False\n    if n%128==0: return True\n    if n%129==0: return False\n    if n%130==0: return True\n    if n%131==0: return False\n    if n%132==0: return True\n    if n%133==0: return False\n    if n%134==0: return True\n    if n%135==0: return False\n    if n%136==0: return True\n    if n%137==0: return False\n    if n%138==0: return True\n    if n%139==0: return False\n    if n%140==0: return True\n    if n%141==0: return False\n    if n%142==0: return True\n    if n%143==0: return False\n    if n%144==0: return True\n    if n%145==0: return False\n    if n%146==0: return True\n    if n%147==0: return False\n    if n%148==0: return True\n    if n%149==0: return False\n    if n%150==0: return True\n    if n%151==0: return False\n    if n%152==0: return True\n    if n%153==0: return False\n    if n%154==0: return True\n    if n%155==0: return False\n    if n%156==0: return True\n    if n%157==0: return False\n    if n%158==0: return True\n    if n%159==0: return False\n    if n%160==0: return True\n    if n%161==0: return False\n    if n%162==0: return True\n    if n%163==0: return False\n    if n%164==0: return True\n    if n%165==0: return False\n    if n%166==0: return True\n    if n%167==0: return False\n    if n%168==0: return True\n    if n%169==0: return False\n    if n%170==0: return True\n    if n%171==0: return False\n    if n%172==0: return True\n    if n%173==0: return False\n    if n%174==0: return True\n    if n%175==0: return False\n    if n%176==0: return True\n    if n%177==0: return False\n    if n%178==0: return True\n    if n%179==0: return False\n    if n%180==0: return True\n    if n%181==0: return False\n    if n%182=="
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(1, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef prime_list(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_not_prime_list(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef prime_list_list(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef prime_list_list_2(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_2_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_3(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_3(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_3_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_3_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_4(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_4(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_4_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_4_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_5(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_5(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_5_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_5_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_6(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_6(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_6_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_6_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_7(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef non_prime_list_7(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list_7_2(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1 or n == 2:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return False\n    else:\n        if n % 5 == 0:\n            return False\n        else:\n            if n % 7 == 0:\n                return True\n            else:\n                return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    else:\n        if n % 9 == 0:\n            return True\n        else:\n            return False\ndef is_prime_m(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return True\n    else:\n        if n % 9 == 0:\n            return False\n        else:\n            return True\ndef is_prime_n(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    else:\n        if n % 9 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Your code here\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, math.ceil(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 2:\n        return True\n    if n % 2 == 0 or n <= 3:\n        return False\n    if n % 3 == 0:\n        return True\n    if n % 4 == 0:\n        return False\n    if n % 5 == 0:\n        return True\n    if n % 6 == 0:\n        return False\n    if n % 7 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n % 3 == 0:\n        return True\n    if n % 5 == 0:\n        return False\n    if n % 8 == 0:\n        return True\n    if n % 9 == 0:\n        return False\n    if n % 10 == 0:\n        return False\n    if n % 2 == 0 and n % 6 == 0:\n        return False\n    if n % 3 == 0 and n % 5 == 0:\n        return False\n    if n % 9 == 0 and n % 11 == 0:\n        return False\n    if n % 10 == 0 and n % 13 == 0:\n        return False\n    if n % 2 == 0 and n % 15 == 0:\n        return False\n    if n % 5 == 0 and n % 7 == 0:\n        return False\n    if n % 8 == 0 and n % 11 == 0:\n        return False\n    if n % 9 == 0 and n % 13 == 0:\n        return False\n    if n % 10 == 0 and n % 15 == 0:\n        return False\n    if n % 2 == 0 and n % 13 == 0:\n        return False\n    if n % 5 == 0 and n % 7 == 0:\n        return False\n    if n % 8 == 0 and n % 9 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    return True\ndef is_prime(n):\n    '''\n    Return True if n is a prime number.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 13 == 0:\n        return True\n    if n % 9 == 0:\n        return False\n    if n % 13 == 0:\n        return True\n    if n % 13 == 0:\n        return False\n    if n % 11 == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 5 == 0:\n        return True\n    if n % 8 == 0:\n        return True\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return True\n    if n % 13 == 0:\n        return False\n    if n % 9 == 0:\n        return True\n    if n % 13 == 0:\n        return False\n    return True\ndef prime_factor(n):\n    '''\n    Find and print all prime factors of a number.\n    '''\n    factor = 2\n    while factor < n:\n        if n % factor == 0:\n            print(factor, 'is not a prime number')\n        elif n % factor == 0 and n!= 1:\n            print(factor, 'is a prime number')\n        elif n % factor == 1:\n            print(factor, 'is a prime number')\n        else:\n            print(factor, 'is a composite number')\n        factor += 1\n    print('The number ', n,'is a prime number.')\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    def is_prime(n):\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(n) + 1), 6):\n            if n % i == 0:\n                return False\n        return True\n    return not any(is_prime(i) for i in range(n))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #create a heap\n    heap = []\n    #initialize heap\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    #loop through the list\n    for i in range(n-1,-1,-1):\n        #update the heap\n        heapq.heapreplace(heap,-nums[i])\n        #add it to the list\n        heapq.heappush(heap,-nums[i])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    return nums[n]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    final = []\n    for i in range(n,0,-1):\n        final.append(heapq.heappop(heap))\n    return final\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        if len(heap) > 0:\n            heapq.heappush(heap,-heapq.heappop(heap))\n        else:\n            heapq.heappush(heap,-1)\n    return [int(i) for i in list(heap)]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res = []\n    for i in range(n,0,-1):\n        res.append(hq.heappop(nums))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    heap = [(num, i, 0) for i, num in enumerate(nums)]\n    heapq.heapify(heap)\n    res = []\n    for i in range(len(nums)):\n        val, i, index = heapq.heappop(heap)\n        res.append(val)\n        if i == n:\n            break\n        heapq.heappush(heap, (val, i+1, index))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # print(sorted(nums))\n    heap = []\n    \n    # print(nums)\n    # print(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def heapify(nums,heap,n):\n        if n == 1: return heap.pop(0)\n        left = (n//2)-1\n        right = (n//2)+1\n        largest = heap[left]\n        if nums[left]>largest: largest = heap[left]\n        if nums[right]>largest: largest = heap[right]\n        if largest!=0:\n            nums[left],nums[right]=largest,nums[left]\n            heapify(nums,heap,n)\n    heap = []\n    heapq.heapify(nums,n)\n    return heapq.heappop(nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    max_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(max_heap,-nums[i])\n    heapq.heapify(max_heap)\n    return [-1] + heapq.heappop(max_heap) if max_heap else None\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    min_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(min_heap,-nums[i])\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)] + heapq.heappop(min_heap) if min_heap else None\ndef heap_stack_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    max_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(max_heap,-nums[i])\n    heapq.heapify(max_heap)\n    return [-1] + heapq.heappop(max_heap) if max_heap else None\ndef heap_stack_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    min_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(min_heap,-nums[i])\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)] + heapq.heappop(min_heap) if min_heap else None\ndef heap_queue_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    max_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(max_heap,-nums[i])\n    heapq.heapify(max_heap)\n    return [-1] + heapq.heappop(max_heap) if max_heap else None\ndef heap_queue_min(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    min_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(min_heap,-nums[i])\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)] + heapq.heappop(min_heap) if min_heap else None\ndef heap_stack_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    max_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(max_heap,-nums[i])\n    heapq.heapify(max_heap)\n    return [-1] + heapq.heappop(max_heap) if max_heap else None\ndef heap_stack_min(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    min_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(min_heap,-nums[i])\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)] + heapq.heappop(min_heap) if min_heap else None\ndef heap_queue_sorted(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    heapq.heapify(nums)\n    return nums\ndef heap_stack_sorted(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    max_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(max_heap,-nums[i])\n    heapq.heapify(max_heap)\n    return [heapq.heappop(max_heap)] + heapq.heappop(max_heap) if max_heap else None\ndef heap_queue_sorted_desc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    heapq.heapify(nums)\n    return nums\ndef heap_stack_sorted_desc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    max_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(max_heap,-nums[i])\n    heapq.heapify(max_heap)\n    return [-1] + heapq.heappop(max_heap) if max_heap else None\ndef heap_queue_sorted_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    heapq.heapify(nums)\n    return nums\ndef heap_stack_sorted_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    max_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(max_heap,-nums[i])\n    heapq.heapify(max_heap)\n    return [heapq.heappop(max_heap)] + heapq.heappop(max_heap) if max_heap else None\ndef heap_queue_sorted_desc_asc(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    max_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(max_heap,-nums[i])\n    heapq.heapify(max_heap)\n    return [-1] + heapq.heappop(max_heap) if max_heap else None\ndef heap_stack_sorted_desc_asc(nums,n):\n    '''\n    Write a function to find the n smalles"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Hint: You can use the in operator to check if the two numbers differ at one bit position only\n    return x > 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 2:\n        return(True)\n    else:\n        return(False)\n    \ndef is_Divisors (x): \n    '''\n    Write a python function to check whether the number can be divided by any of the positive divisors.\n    '''\n    if x == 1:\n        return(True)\n    if x == 2:\n        return(True)\n    for i in range (2, x):\n        if (x % i) == 0:\n            return(False)\n    return(True)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x,y=x,y\n    if x%2==0 and y%2==0:\n        return True\n    else:\n        return False\ndef main():\n    a=int(input(\"Enter a number: \"))\n    b=int(input(\"Enter a number: \"))\n    print(\"Power of 2 is:\", is_Power_Of_Two(a))\n    print(\"Power of 2 is:\", is_Power_Of_Two(b))\nmain("
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x <= 1): \n        return False\n    elif (x > 1 and x <= 3): \n        return x % 2 == 0\n    elif (x > 3 and x <= 5): \n        return x % 2!= 0\n    else: \n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power = 1\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    else:\n        return x % 2!= 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    l = 0\n    k = 1\n    while k <= x:\n        l = l + k\n        k = k*2\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True \n    elif x > 0: \n        if x % 2 == 0: \n            return False \n        else: \n            return True \n    else: \n        return False \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x%2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    elif x == 1:\n        return True\n    elif x > 1:\n        return is_Power_Of_Two(x//2)\n    else:\n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # init variables\n    long_chars = 0\n    long_words = 0\n    char_list = []\n    word_list = []\n    for i in range(len(text)):\n        # init variable\n        char_list = []\n        word_list = []\n        # init the list for iteration\n        for j in range(len(text)):\n            # test if the word is longer than 1 character\n            if len(text[j]) >= 4:\n                # test if the word is a string\n                if len(text[j]) < len(text[i]):\n                    # test if the word is a word\n                    if text[i] in word_list:\n                        # if this word is a longer word, then append this word to the list\n                        if len(word_list) < 4:\n                            # add this word to the word list\n                            word_list.append(text[i])\n                            # check if this word is a letter\n                            if text[i] in char_list:\n                                # if this is not a letter, add the word to the long_words\n                                long_words += 1\n                            char_list.append(text[i])\n                    # if this word is a letter and is not a longer word\n                    elif text[i] in char_list:\n                        # append this letter to the long_chars\n                        char_list.append(text[i])\n                        # check if this word is a word\n                        if len(word_list) < 4:\n                            # add this word to the word list\n                            word_list.append(text[i])\n                            # check if this word is a letter\n                            if text[i] in char_list:\n                                # if this is not a letter, add the word to the long_words\n                                long_words += 1\n                            char_list.append(text[i])\n                # if this word is a longer word, add this word to the word_list\n                else:\n                    # add this word to the word_list\n                    word_list.append(text[i])\n                    # check if this word is a letter\n                    if text[i] in char_list:\n                        # if this is not a letter, add the word to the long_chars\n                        char_list.append(text[i])\n                        # check if this word is a word\n                        if len(word_list) < 4:\n                            # add this word to the word_list\n                            word_list.append(text[i])\n                            # check if this word is a letter\n                            if text[i] in char_list:\n                                # if this is not a letter, add the word to the long_words\n                                char_list.append(text[i])\n                                # check if this word is a letter\n                                if text[i] in char_list:\n                                    # if this is not a letter, add the word to the long_chars\n                                    char_list.append(text[i])\n                                    # check if this word is a word\n                                    if len(word_list) < 4:\n                                        # add this word to the word_list\n                                        word_list.append(text[i])\n                                        # check if this word is a word\n                                        if text[i] in char_list:\n                                            # if this is not a word, add the word to the long_words\n                                            char_list.append(text[i])\n                                            # check if this word is a letter\n                                            if text[i] in char_list:\n                                                # if this is not a word, add the word to the long_chars\n                                                char_list.append(text[i])\n                                                # check if this word is a letter\n                                                if text[i] in char_list:\n                                                    # if this is not a letter, add the word to the long_chars\n                                                    char_list.append(text[i])\n                                            # if this word is a letter\n                                            if text[i] in char_list:\n                                                # if this is not a word, add the word to the long_words\n                                                char_list.append(text[i])\n                                                # check if this word is a letter\n                                                if text[i] in char_list:\n                                                    # if this is not a word, add the word to the long_chars\n                                                    char_list.append(text[i])\n                                                    # check if this word is a letter\n                                                    if text[i] in char_list:\n                                                        # if this is not a letter, add the word to the long_chars\n                                                        char_list.append(text[i])\n                                                        # check if this word is a letter\n                                                        if text[i] in char_list:\n                                                            # if this is not a letter, add the word to the long_words\n                                                            char_list.append(text[i])\n                                                            # check if this word is a letter\n                                                            if text[i] in char_list:\n                                                                # if this is not a letter, add the word to the long_chars\n                                                                char_list.append(text[i])\n                                                                # check if this word is a letter\n                                                                if text[i] in char_list:\n                                                                    # if this is not a letter, add the word to the long_chars\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_words\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a word\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_chars\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_chars\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_chars\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_chars\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_words\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_chars\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_chars\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_chars\n                                                                    char_list.append(text[i])\n                                                                    # check if this word is a letter\n                                                                    if text[i] in char_list:\n                                                                        # if this is not a letter, add the word to the long_words\n                                                        "
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #returns a list of words and a list of the first character that's at least 4 characters long\n    start_line = 0\n    start_index = 0\n    long_words = []\n    long_words_in_line = []\n    for i, line in enumerate(text):\n        for word in line.split():\n            if len(word) >= 4:\n                long_words_in_line.append(word)\n            if len(word) >= 3:\n                long_words.append(word)\n        if i < len(text) - 1:\n            if text[i+1]!= '\\n':\n                if text[i+1] in 'aeiouAEIOU':\n                    start_line = i\n                    start_index = i + 1\n                    break\n    #print(start_line, start_index)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_chars = 0\n    for word in text:\n        if len(word) >= 4:\n            long_chars = long_chars + 1\n    return long_chars\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    p = re.compile('\\w\\w\\w\\w\\w')\n    match = p.findall(text)\n    long_list = [i for i in match if len(i)>=4]\n    return list(long_list)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    for word in text.split(' '):\n        if len(word) >= 4:\n            characters.append(word)\n    return characters\n    \ndef find_start_words(text):\n    '''\n    Write a function to find all words which start with some text.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    return characters\n    \ndef count_words(text):\n    '''\n    Write a function to count the frequency of each word.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    return len(characters)\n    \ndef count_sentences(text):\n    '''\n    Write a function to count the frequency of each sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    sentences = text.split('.')\n    for sentence in sentences:\n        if sentence[0].isalpha():\n            characters.append(sentence)\n    return len(characters)\n    \ndef count_symbols(text):\n    '''\n    Write a function to count the frequency of each symbol.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    symbols = ['.', '?', '!', '$', '&']\n    for symbol in symbols:\n        characters.append(symbol)\n    return len(characters)\n    \ndef count_count(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    sentences = text.split('.')\n    for sentence in sentences:\n        if sentence[0].isalpha():\n            characters.append(sentence)\n    count_sent = 0\n    count_symbol = 0\n    count_word = 0\n    for word in characters:\n        count_word += 1\n        if word[0].isalpha():\n            count_word += 1\n            count_word += 1\n            count_sent += 1\n        count_sent += 1\n        count_symbol += 1\n        count_symbol += 1\n    return count_word, count_sent, count_symbol\n    \ndef count_most_common(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    sentences = text.split('.')\n    for sentence in sentences:\n        if sentence[0].isalpha():\n            characters.append(sentence)\n    count_sent = 0\n    count_symbol = 0\n    count_word = 0\n    for word in characters:\n        count_word += 1\n        if word[0].isalpha():\n            count_word += 1\n            count_word += 1\n            count_sent += 1\n        count_sent += 1\n        count_symbol += 1\n    count_most_common = len(characters)\n    return count_word, count_sent, count_symbol, count_most_common\n    \ndef count_longest(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    sentences = text.split('.')\n    for sentence in sentences:\n        if sentence[0].isalpha():\n            characters.append(sentence)\n    count_sent = 0\n    count_symbol = 0\n    count_word = 0\n    for word in characters:\n        count_word += 1\n        if word[0].isalpha():\n            count_word += 1\n            count_word += 1\n            count_sent += 1\n        count_sent += 1\n        count_symbol += 1\n    count_longest = len(characters)\n    return count_word, count_sent, count_symbol, count_longest\n    \ndef count_numeric(text):\n    '''\n    Write a function to count the frequency of each word.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    numeric = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    count_numeric = len(characters)\n    return count_numeric\n    \ndef count_w_stop_word(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    numeric = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    for character in characters:\n        if character not in stop_word:\n            numeric.append(character)\n    return len(numeric)\n    \ndef count_numeric_stop_word(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    numeric = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    for character in characters:\n        if character not in stop_word:\n            numeric.append(character)\n    count_numeric = len(numeric)\n    return count_numeric\n    \ndef count_numeric_stop_word_space(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    numeric = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    for character in characters:\n        if character not in stop_word:\n            numeric.append(character)\n    count_numeric = len(numeric)\n    return count_numeric\n    \ndef count_numeric_stop_word_space_word(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    numeric = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    for character in characters:\n        if character not in stop_word:\n            numeric.append(character)\n    count_numeric = len(numeric)\n    return count_numeric\n    \ndef count_numeric_stop_word_space_word_space(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    numeric = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    for character in characters:\n        if character not in stop_word:\n            numeric.append(character)\n    count_numeric = len(numeric)\n    return count_numeric\n    \ndef count_numeric_stop_word_space_numeric(text):\n    '''\n    Write a function to count the frequency of each word and sentence.\n    '''\n    pattern = r'[A-Z]\\w+'\n    characters = []\n    numeric = []\n    for word in text.split(' '):\n        if word[0].isalpha():\n            characters.append(word)\n    for character in characters:\n        if character not in stop_word:\n            numeric.append(character)\n    count_numeric = len(numeric)\n    return count_numeric\n    \ndef count_coun"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'[a-zA-Z0-9_]+')\n    result = pattern.findall(text)\n    return set(result)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    def char_is_long(word):\n        '''\n        Function to check if a word is at least 4 characters long.\n        '''\n        if len(word) > 4:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.replace(\" \",\"\")\n    text = text.replace(\".\",\"\")\n    text = text.replace(\"?\",\"\")\n    text = text.replace(\"!\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\":\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.lower()\n    text = re.sub(r'[^\\w]', '', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\d+', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = text.split()\n    text = [word for word in text if len(word) > 4]\n    return text\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find length of word\n    length = len(text)\n    # create a regex that will match all words which have at least 4 characters long\n    regex = r'\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for i in nums:\n        squared.append(i*i)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares=[]\n    for element in nums:\n        squares.append(element**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [square_num ** 2 for square_num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Your code here\n    squares = []\n    for num in nums:\n        square = num **2\n        squares.append(square)\n    return squares\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    if not nums:\n        return []\n    nums = sorted(nums)\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    letters = list(str)\n    temp = []\n    for i in range(len(letters)):\n        temp.append(letters[i])\n    \n    rotations = 0\n    for i in range(len(temp)-1):\n        for j in range(i+1,len(temp)):\n            if temp[i] == temp[j]:\n                rotations += 1\n    \n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    import re\n    def remove_punctuation(s):\n        return re.sub(\"[^A-Za-z0-9.,!?\\'\\']+\", \"\", s)\n    \n    def find_word(str, word):\n        found = []\n        \n        if len(word) == 0:\n            return\n        \n        for i in range(len(str)):\n            if word[0] in str[i:i+len(word)]:\n                found.append(str[i:i+len(word)])\n        \n        return found\n    \n    def find_count(str):\n        return sum([len(find_word(word, remove_punctuation(word))) for word in str])\n    \n    #return [find_word(word, remove_punctuation(word)) for word in str]\n    \n    return [find_count(word) for word in str]\n    \nprint(find_Rotations(\"GeeksforGeeks\"))\nprint(find_Rotations(\"programminginstructor\"))\nprint(find_Rotations(\"python for\"))\nprint(find_Rotations(\"GeeksforGeeksGeeksforGeeks\"))\nprint(find_Rotations(\"python for\"))\nprint(find_Rotations(\"GeeksforGeeks\")"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Write your code here.\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    rotations = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(0,len(str)-1):\n        for j in range(i+1,len(str)):\n            if(str[i] == str[j]):\n                rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    max_rotations = 0\n    rotations = []\n    for i in range(len(str)):\n        rotations.append(str[i])\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            rotations.append(str[j])\n            if rotations[j] in rotations:\n                max_rotations += 1\n    return max_rotations\n        \ndef find_Swaps(str):\n    '''\n    Write a python function to find the number of swaps required to make the string in the following order.\n    Input : string\n    Output: the number of swaps\n    '''\n    num_swaps = 0\n    for i in range(len(str)):\n        if str[i]!= str[i+1]:\n            num_swaps += 1\n        if i < len(str)-2:\n            if str[i]!= str[i+2]:\n                num_swaps += 1\n    return num_swaps\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    ans = 0\n    c=0\n    for i in range(len(str)-1):\n        if ord(str[i])>=ord(str[i+1]) and ord(str[i])<=ord(str[i+2]):\n            c+=1\n        else:\n            if c>ans:\n                ans=c\n            c=0\n    return ans\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_list = []\n    for i in range(len(str) - 1):\n        str_list.append(str[i])\n    num_rotations = 0\n    for x in range(1, len(str_list)):\n        if str_list[x] == str_list[x - 1]:\n            num_rotations += 1\n        else:\n            break\n    return num_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    length = len(str)\n    for i in range(length):\n        if str[i] == str[length - i - 1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        if str[i] == str[i-1] or str[i] == str[i+1]:\n            rotations+=1\n    return rotations\n    \ndef main():\n    print(find_Rotations(\"eeeeeee\"))\n    print(find_Rotations(\"bbbbbbbbbbbb\"))\n    print(find_Rotations(\"pppppppppppppppppppppppppppppp\"))\n    print(find_Rotations(\"abcdefghijklmnopqrstuvwxyz\"))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.lower()\n    for i, c in enumerate(s):\n        if i == 0:\n            print(c)\n            return c\n        if i == len(s) - 1:\n            print(c)\n            return c\n        if s[i + 1]!= c:\n            print(c)\n            return c\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    str=s.lower()\n    str1=str[:len(str)-1]\n    str2=str[len(str)-1:]\n    if(ch=='a'):\n        str1=str1.lower()\n        str2=str2.lower()\n    if(ch=='e'):\n        str1=str1.lower()\n        str2=str2.lower()\n    if(ch=='i'):\n        str1=str1.lower()\n        str2=str2.lower()\n    if(ch=='o'):\n        str1=str1.lower()\n        str2=str2.lower()\n    if(ch=='u'):\n        str1=str1.lower()\n        str2=str2.lower()\n    return str1+str2\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s.reverse()\n    if len(s) == 0:\n        return 0\n    if s[0] == s[len(s)-1]:\n        return 0\n    return s.pop(0)+s.pop()\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        i = s.find(ch) \n        s = s[:i] + s[i+1:] \n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    n = len(s)\n    while i<n and s[i]==ch:\n        i+=1\n    if i>=n:\n        return(0)\n    else:\n        return(i+1)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    c = s[0:1]\n    if c == ch:\n        s = s[1:]\n        return s\n    else:\n        return \"Invalid character,try again\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(not s):\n        return 'empty string'\n    elif(len(s)==1):\n        return s\n    elif(ch.lower() in s):\n        s = s.replace(ch.lower(), '')\n        s = s[0:-1]\n        return s\n    else:\n        return s\n    \ndef kaprekar_setter(s):\n    '''\n    Write a python function to convert the given string into a sequence of integers for the kaprekar numbers.\n    '''\n    if(s.isnumeric()):\n        return s\n    elif(len(s)==2):\n        return 0\n    elif(s[0]==s[-1]):\n        return s\n    else:\n        return kaprekar_setter(s[1:len(s)-1])+kaprekar_setter(s[0])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    if ch in s: \n        s.remove(ch)\n        s.remove(ch)\n        return s\n    else:\n        return s\n    \n    \ns = 'aabccc'\nch = 'a'\nprint (remove_Occ(s,ch))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch == \" \":\n        s.pop(0)\n        s.pop()\n    else:\n        s[0]=s[0]-1\n        s[-1]=s[-1]-1\n    return s\n    \ndef reverse(s):\n    return \"\".join(reversed(s))\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    S = []\n    S = M\n    for i in range(len(S)):\n        if sum(S[i]) == 0:\n            S[i].append(1)\n        else:\n            S[i].append(0)\n    for i in range(len(S)):\n        S[i].sort()\n    for i in range(len(S)):\n        for j in range(i+1,len(S)):\n            if sum(S[i]) == 0:\n                S[j].append(1)\n            else:\n                S[j].append(0)\n    return S\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M.sort(key=lambda x: sum(x), reverse=False)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = sorted([(sum(x), i) for i,x in enumerate(zip(*M))])\n    s.sort(key=lambda x: x[0])\n    return [row[1] for row in s]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = M[i][j]+sum(M[i])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][j-1]:\n                M[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s=[]\n    for i in range(len(M)):\n        row=0\n        for j in range(len(M[i])):\n            row+=M[i][j]\n        s.append(row)\n    return sorted(s)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def process_row(row):\n        row.sort(key=lambda x: x[0])\n        return row\n    \n    rows = []\n    for j in range(len(M)):\n        row = process_row(M[j])\n        rows.append(row)\n    return rows\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    sum_rows = [0] * rows\n    for row in range(rows):\n        sum_rows[row] = sum(M[row])\n    for row in range(rows):\n        M[row].sort(reverse=True)\n    i = 0\n    for row in range(rows):\n        for col in range(row + 1, rows):\n            if sum_rows[row] + sum_rows[col] == sum_rows[col]:\n                i += 1\n                M[row].append(M[col].pop(0))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # taking array as parameter\n    n = len(M)\n    # declaring a variable to store sum of rows\n    sum_row = 0\n    # declaring a variable to store sum of columns\n    sum_col = 0\n    # declaring a variable to store the sums of row\n    total = 0\n    # declaring a variable to store the sums of columns\n    row = 0\n    # declaration of an empty list\n    sorted = []\n    # iterating through the matrix\n    for i in range(n):\n        # storing sum of rows\n        sum_row += M[i][i]\n        # storing sum of columns\n        sum_col += M[i][n-i-1]\n        # storing sums of rows and columns\n        total += M[i][i]\n        # checking if sum of rows and columns is equal to sum of matrix\n        if(sum_row == total):\n            # iterating through rows\n            for j in range(i,n):\n                # storing sum of rows\n                M[i][j] = M[j][i]\n                # storing sum of columns\n                M[j][i] = M[i][j]\n        # checking if sums of rows and columns are greater than sum of matrix\n        if(sum_col == total):\n            # iterating through columns\n            for j in range(n-i-1, -1, -1):\n                # storing sum of columns\n                M[j][i] = M[j][i]\n                # storing sum of rows\n                M[j][i] = M[i][j]\n        # sorting the matrix according to the sum of rows\n        for j in range(n):\n            if(M[i][j] > sum_row):\n                # iterating through rows\n                for k in range(i,n):\n                    # storing sum of rows\n                    M[k][j] = M[k][j]\n                    # storing sum of columns\n                    M[k][i] = M[i][k]\n        # sorting the matrix according to the sum of columns\n        for j in range(n-i-1, -1, -1):\n            if(M[i][j] > sum_col):\n                # iterating through columns\n                for k in range(n-j-1, i, -1):\n                    # storing sum of columns\n                    M[k][j] = M[k][j]\n                    # storing sum of rows\n                    M[k][i] = M[i][k]\n        # sorting the matrix according to the sums of rows and columns\n        for j in range(n):\n            if(M[i][j] > sum_row and M[i][j] > sum_col):\n                # iterating through rows\n                for k in range(i,n):\n                    # storing sum of rows\n                    M[k][j] = M[k][j]\n                    # storing sum of columns\n                    M[k][i] = M[i][k]\n        # removing duplicates\n        for j in range(i, n):\n            for k in range(j, n):\n                # storing sums of rows\n                M[k][j] = M[k][j]\n                # storing sums of columns\n                M[k][i] = M[i][k]\n        # storing the updated matrix\n        sorted.append(M[i][j:n])\n    # returning the sorted matrix\n    return sorted\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1-i):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((l*l)/(4*h))\n    \n    \ndef main() : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = float(input(\"Enter a side length : \"))\n    b = float(input(\"Enter a height : \"))\n    h = float(input(\"Enter a step size : \"))\n    v = find_Volume(a,b,h)\n    print(\"The volume of the triangle is\",v)\n    \nmain()"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # get the dimensions of the prisms\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    \n    # calculate volume\n    volume = (4.0*math.pi*l*math.pow(b,2)*math.pow(h,3))\n    # print volume\n    print(volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #print('The volume is',l*b*h)\n    return(l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h) * 0.5\n    print('Volume of triangle is : ',volume)\n    \ndef main() :\n    '''\n    Define the size of the boxes.\n    '''\n    l = int(input('Enter the length of the first box : '))\n    b = int(input('Enter the breadth of the first box : '))\n    h = int(input('Enter the height of the first box : '))\n    \n    find_Volume(l,b,h)\n    \nif __name__ == '__main__' :\n    main("
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v=1\n    for i in range(1,b+1,1):\n        for j in range(1,h+1,1):\n            if i==j:\n                v=v+(l**2)*j\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*h\n    volume = volume/4\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    from math import pi, sqrt\n    volume = 0\n    a = l\n    b = b\n    h = h\n    while abs(a-b) >= 2 and h >= (a+b) :\n        volume += ((a**2 + b**2)**0.5)*h\n        a += h\n        b += h\n    volume = sqrt(volume)\n    return volume\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = 0\n    for i in range(l-1,b) :\n        for j in range(h) :\n            v = v + ((i-l)/(h))*(j/2)**2\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (b*h)/2\n    if v<l:\n        print(\"volume of the triangle is too small\")\n    else:\n        print(\"volume of the triangle is \" + str(v*l))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #define volume of a triangle\n    volume = l*h\n    #find volume of a triangle\n    print(\"The volume of the triangle is: \",volume)\n    #calculate the area\n    area = volume*(l+b+h)/2\n    #print the area of the triangle\n    print(\"The area of the triangle is: \",area)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Input: Text to check.\n    # Output: True if input is a string and contains sequences of lowercase letters, and false otherwise.\n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    return any(ord(c) >= 65 and ord(c) <= 90 for c in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # YOUR CODE HERE\n    return len(re.findall('[a-zA-Z]', text))>0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #replace all the underscores with spaces\n    text = text.replace('_',' ')\n    #remove all the puctuation\n    text = re.sub('[^a-zA-Z0-9_]+',' ',text)\n    #remove all the digits\n    text = re.sub('\\d+','',text)\n    #remove all the empty spaces\n    text = re.sub('\\s+',' ',text)\n    #lowercase all the letters and add an underscore in the end\n    text = text.lower()\n    text = re.sub('[a-z]',' ',text)\n    text = re.sub('[A-Z]',' ',text)\n    text = re.sub('[0-9]',' ',text)\n    #separate all the words and run the word through the regex\n    return bool(re.search('[a-zA-Z0-9]',text)) or bool(re.search('[A-Z]',text)) or bool(re.search('[0-9]',text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    return regex.search(text)!= None\ndef get_words_in_string(text, min_len=1, max_len=3):\n    '''\n    Returns a list of strings containing words in the input text.\n    '''\n    if min_len <= 0 or max_len <= 0:\n        raise Exception(\"Min and max length must be positive\")\n    regex = r'[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    return words\ndef convert_to_lowercase(text):\n    '''\n    Converts the input text into lowercase.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    return regex.sub('', text.lower())\ndef write_to_file(path, file, data):\n    '''\n    Writes the data in the file to the path and returns true if the input file is valid, false otherwise.\n    '''\n    if path[len(path) - 1]!= '/':\n        path += '/'\n    path += file\n    try:\n        with open(path, 'w') as file:\n            file.write(data)\n    except Exception as e:\n        print(f'Error while trying to write to file: {e}')\n        return False\n    return True\ndef check_file_and_folder(path, file):\n    '''\n    Checks if the given file exists and is a valid file.\n    '''\n    if not os.path.exists(path):\n        print(f'{path} does not exist')\n        return False\n    if not os.path.isfile(path):\n        print(f'{path} is not a file')\n        return False\n    if not os.access(path, os.R_OK):\n        print(f'{path} does not have right access to write mode')\n        return False\n    if file not in os.listdir(path):\n        print(f'{file} is not a valid file')\n        return False\n    return True\ndef count_invalid_word(words):\n    '''\n    Returns the number of words that are not in the text.\n    '''\n    count = 0\n    for word in words:\n        if word.isalpha():\n            count += 1\n    return count\ndef count_number_words(words):\n    '''\n    Returns the number of words that are of the same type as the input.\n    '''\n    count = 0\n    for word in words:\n        if word.isalpha():\n            count += 1\n    return count\ndef words_in_text(text):\n    '''\n    Returns a list of words that appear in the input text.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    return words\ndef words_in_text_with_letters(text):\n    '''\n    Returns a list of words that appear in the input text.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    return words\ndef count_words_with_letters(text):\n    '''\n    Returns the number of words that appear in the input text with letters.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    return len(words)\ndef find_and_replace_words(text, search_string):\n    '''\n    Returns the number of words that appear in the input text that contain the search string.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    count = 0\n    for word in words:\n        if word.lower().find(search_string.lower())!= -1:\n            count += 1\n    return count\ndef count_words_with_letters_and_replace_words(text, search_string):\n    '''\n    Returns the number of words that appear in the input text that contain the search string, with letters.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    count = 0\n    for word in words:\n        if word.lower().find(search_string.lower())!= -1 and word.lower().find(search_string.lower())!= -1:\n            count += 1\n    return count\ndef remove_duplicates(text):\n    '''\n    Returns the text without duplicates.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    words.sort()\n    return words\ndef remove_duplicates_with_letters(text):\n    '''\n    Returns the text without duplicates, with letters.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    words.sort()\n    return words\ndef remove_duplicates_with_letters_and_replace_words(text, search_string):\n    '''\n    Returns the text without duplicates, with letters, and with letters replaced by a particular word.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    count = 0\n    for word in words:\n        if word.lower().find(search_string.lower())!= -1:\n            count += 1\n    return words\ndef remove_duplicates_with_letters_and_replace_words_and_without_letters(text, search_string):\n    '''\n    Returns the text without duplicates, with letters, and with letters replaced by a particular word, and without letters.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    count = 0\n    for word in words:\n        if word.lower().find(search_string.lower())!= -1:\n            count += 1\n    return words\ndef remove_duplicates_with_letters_and_replace_words_and_without_letters_and_replace_words(text, search_string):\n    '''\n    Returns the text without duplicates, with letters, and with letters replaced by a particular word, and without letters, and replaced words.\n    '''\n    regex = r'[a-zA-Z_0-9]{1,}[a-zA-Z_0-9]{1,}'\n    regex = re.compile(regex)\n    words = regex.findall(text)\n    count = 0\n    for word in words:\n        if word.lower().find(search_string.lower())!= -1:\n            count += 1\n    return words\ndef is_alpha(word):"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[A-Z][a-z]*_[a-zA-Z][a-zA-Z0-9]*', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not isinstance(text, str):\n        raise TypeError(\"The parameter must be a string.\")\n    if not text:\n        raise TypeError(\"The parameter must be a string.\")\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    pattern = r\"[a-zA-Z0-9_]{4,}[a-zA-Z0-9_]{1,}[a-zA-Z0-9_]{1,}[a-zA-Z0-9_]{1,}\"\n    \n    pattern_1 = r\"[a-zA-Z0-9_]{4,}[a-zA-Z0-9_]{1,}[a-zA-Z0-9_]\"\n    pattern_2 = r\"\\d{1,}\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # pattern = re.compile(\"[a-zA-Z0-9_]{1}\")\n    # print(pattern.search(text))\n    # print(text)\n    # r = re.search(\"[a-zA-Z0-9_]+\",text)\n    # print(r.group())\n    return re.search(\"[a-zA-Z0-9_]+\",text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in range(len(text)):\n        if text[i].isalpha():\n            if text[i].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[A-Za-z]+[_][A-Za-z]+[A-Za-z]+',text)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if not a:\n        return 0\n    return (a**2 + 4)**2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if not isinstance(a, int) or a < 0:\n        raise TypeError(f\"'{a}' must be a positive integer.\")\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Your code here\n    return "
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a) + (4 * a) + (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    #pass\n    '''\n    #return a*a + a\n    return a * a\n    '''\n    \n    pass\n    \n    '''\n    pass\n    '''\n    pass\n    '''\n    return\n    '''\n    pass\n    '''\n    return\n    '''\n    pass\n    '''\n    return\n    '''\n    pass\n    '''\n    return\n    '''\n    pass\n    '''\n    pass\n    return\n    '''\n    pass\n    return\n    '''\n    pass\n    return\n    '''\n    pass\n    return\n    '''\n    pass\n    return\n    '''\n    pass\n    return\n    pass\n    return\n    pass\n    return\n    pass\n    return\n    pass\n    pass\n    return\n    pass\n    pass\n    return\n    pass\n    return\n    pass\n    pass\n    pass\n    return\n    pass\n    return\n    pass\n    pass\n    return\n    pass\n    pass\n    return\n    pass\n    pass\n    return\n    pass\n    pass\n    pass\n    pass\n    return\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    return\n    pass\n    pass\n    pass\n    return\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    return\n    pass\n    pass\n    pass\n    pass\n    return\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    from math import sqrt\n    return(sqrt(2 * a * (a + 1)))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    for side in range(1, a+1):\n        perimeter += side\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s = 0\n    for i in range(a):\n        for j in range(i+1):\n            s += a * (j + 1)\n    return s\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # How many times each character is present\n    # how many times character is not present in second string\n    # how many times character is present in first string\n    # if characters present in second string are present in first string and vice versa\n    # i.e. aabbb,abc,abba,bcaab,abbaac\n    # if there are a few characters present in first string and there are many characters in second string\n    # i.e. aba, abc, aca\n    # it will add the first character and the last character\n    # if there are a few characters present in first string and there are many characters in second string\n    # i.e. aba, abc, aca\n    # if there are a few characters present in first string and there are many characters in second string\n    # i.e. aba, abc, aca\n    \n    # there are many letters which are present in first string and they will be removed\n    # then there are few letters which are present in second string\n    # then add last letter\n    # if there are a few letters present in first string and there are many letters in second string\n    # i.e. aabbb, abc, aba, abc\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # i.e. aabbb, abc, aabb, abc\n    # then add last letter and add first character\n    \n    # it will add all the letters\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    \n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    \n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    \n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    \n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    \n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    \n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    \n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    \n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if there are a few letters present in first string and there are many letters in second string\n    # then add last letter and add first character\n    # if ther"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    # your code goes here\n    res = []\n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            res.append(string[i])\n    return res\n    pass\n    \ndef list_to_str(list):\n    '''\n    Write a function that takes a list of strings and returns a string of the same length.\n    '''\n    pass\n    \ndef test_func(string, word):\n    '''\n    Write a function that takes a string, a word and returns a boolean value indicating whether the string is a valid word.\n    '''\n    pass\n    \ndef string_to_list_of_words(string):\n    '''\n    Write a function that takes a string and returns a list of words separated by spaces.\n    '''\n    pass\n    \ndef string_to_list(string):\n    '''\n    Write a function that takes a string and returns a list of the words.\n    '''\n    pass\n    \ndef list_to_string(list):\n    '''\n    Write a function that takes a list of words and returns a string of the same length.\n    '''\n    pass\n    \ndef test_func(string, word):\n    '''\n    Write a function that takes a string, a word and returns a boolean value indicating whether the string is a valid word.\n    '''\n    pass\n    \ndef longest_string(string):\n    '''\n    Write a function that takes a string and returns the longest word.\n    '''\n    pass\n    \ndef number_of_substrings(string, n):\n    '''\n    Write a function that takes a string, a word and returns an integer representing the number of words in the string.\n    '''\n    pass\n    \ndef max_len(s):\n    '''\n    Write a function that takes a string and returns the length of the longest word.\n    '''\n    pass\n    \ndef parse_string(string):\n    '''\n    Write a function that takes a string and returns a list of the words in the string.\n    '''\n    pass\n    \ndef find_longest_word(string):\n    '''\n    Write a function that takes a string and returns a word in the string.\n    '''\n    pass\n    \ndef check_string(string):\n    '''\n    Write a function that takes a string and returns a boolean value indicating whether the string is a palindrome.\n    '''\n    pass\n    \ndef average_letters(string):\n    '''\n    Write a function that takes a string and returns the average length of the letters in the string.\n    '''\n    pass\n    \ndef palindrome_numbers(string):\n    '''\n    Write a function that takes a string and returns a list of the numbers in the string.\n    '''\n    pass\n    \ndef longest_palindrome(string):\n    '''\n    Write a function that takes a string and returns the longest palindrome in the string.\n    '''\n    pass\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function that takes a string and a sub_string and returns the number of occurence of sub_string in the string.\n    '''\n    pass\n    \ndef reverse_string(string):\n    '''\n    Write a function that takes a string and returns the string in reverse order.\n    '''\n    pass\n    \ndef to_base_ten(number, base):\n    '''\n    Write a function that takes a number and a base and returns the binary equivalent of the given number in the given base.\n    '''\n    pass\n    \ndef sort_by_base_ten(string, base):\n    '''\n    Write a function that takes a string and a base and returns the string in base ten.\n    '''\n    pass\n    \ndef count_total_chars(string):\n    '''\n    Write a function that takes a string and returns the number of characters in the string.\n    '''\n    pass\n    \ndef remove_duplicate_characters(string):\n    '''\n    Write a function that takes a string and returns a string where each duplicate character has been removed.\n    '''\n    pass\n    \ndef lowercase_string(string):\n    '''\n    Write a function that takes a string and returns the string in lower case.\n    '''\n    pass\n    \ndef remove_duplicate_letters(string):\n    '''\n    Write a function that takes a string and returns a string where each duplicate letter has been removed.\n    '''\n    pass\n    \ndef remove_duplicate_numbers(string):\n    '''\n    Write a function that takes a string and returns a string where each duplicate number has been removed.\n    '''\n    pass\n    \ndef remove_duplicate_symbols(string):\n    '''\n    Write a function that takes a string and returns a string where each duplicate symbol has been removed.\n    '''\n    pass\n    \ndef convert_to_lowercase(string):\n    '''\n    Write a function that takes a string and returns a string in lower case.\n    '''\n    pass\n    \ndef swap_case(string):\n    '''\n    Write a function that takes a string and returns a string in upper case.\n    '''\n    pass\n    \ndef is_palin(string):\n    '''\n    Write a function that takes a string and returns a boolean value indicating whether the string is a palindrome.\n    '''\n    pass\n    \ndef palindrome_in_base_ten(number, base):\n    '''\n    Write a function that takes a number and a base and returns the binary equivalent of the given number in the given base.\n    '''\n    pass\n    \ndef reverse_string_in_base_ten(string, base):\n    '''\n    Write a function that takes a string and a base and returns the string in base ten.\n    '''\n    pass\n    \ndef is_valid_password(string):\n    '''\n    Write a function that takes a string and returns a boolean value indicating whether the string is valid password.\n    '''\n    pass\n    \ndef is_valid_password_v2(string):\n    '''\n    Write a function that takes a string and returns a boolean value indicating whether the string is valid password.\n    '''\n    pass\n    \ndef to_base_ten_v2(number, base):\n    '''\n    Write a function that takes a number and a base and returns the binary equivalent of the given number in the given base.\n    '''\n    pass\n    \ndef is_palindrome(string):\n    '''\n    Write a function that takes a string and returns a boolean value indicating whether the string is a palindrome.\n    '''\n    pass\n    \ndef count_elements(string):\n    '''\n    Write a function that takes a string and returns the number of elements in the string.\n    '''\n    pass\n    \ndef remove_duplicate_characters(string):\n    '''\n    Write a function that takes a string and returns a string where each duplicate character has been removed.\n    '''\n    pass\n    \ndef remove_duplicate_letters(string):\n    '''\n    Write a function that takes a string and returns a string where each duplicate letter has been removed.\n    '''\n    pass\n    \ndef remove_duplicate_numbers(string):\n    '''\n    Write a function that takes a string and returns a string where each duplicate number has been removed.\n    '''\n    pass\n    \ndef remove_duplicate_symbols(string):\n    '''\n    Write a function that takes a string and returns a string where each duplicate symbol has been removed.\n    '''\n    pass\n    \ndef to_base_ten_v3(number, base):\n    '''\n    Write a function that takes a number and a base and returns the binary equivalent of the given number in the given base.\n    '''\n    pass\n    \ndef to_base_ten_v3_v2(number, base):\n    '''\n    Write a function that takes a number and a base and returns the binary equivalent of the given number in the given base.\n    '''\n    pass\n    \ndef convert_to_base_ten_v3(string, base):\n    '''\n    Write a function that takes a string and a base and returns the binary equivalent of the given number in the given base.\n    '''\n    pass\n    \ndef is_palindrome(string)"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.replace(string[0], \"\").replace(string[0],\"\").replace(string[0],\"\").replace(string[0],\"\").replace(string[0],\"\").replace(string[0],\"\")\ndef list_to_str(list): \n    '''\n    Write a function to return a string from the list.\n    '''\n    return''.join(list)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_to_remove = \"\"\n    for char in string:\n        if char.isalpha():\n            char_to_remove += char\n    return char_to_remove\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    a = list(string)\n    for i in range(len(string)):\n        if string[i] not in a:\n            a[i] = '_'\n    return ''.join(a)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for character in string:\n        if character not in new_string:\n            new_string += character\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string[0] not in list(string[1:]):\n        return string[0]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for char in string: \n        if char in string[:len(string)//2]:\n            output.append(char)\n            output.append(char)\n    return \"\".join(output)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i in string:\n            list.append(i)\n    return list\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums)):\n        if arraynums[i] == arraynums[i-1] and arraynums[i] not in arraynums[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        temp = i\n        for j in arraynums:\n            if temp in j:\n                j.remove(temp)\n                break\n    if len(set(arraynums))!= len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    import math\n    \n    array = arraynums.copy()\n    for i in range(0, len(array) - 1):\n        for j in range(i + 1, len(array)):\n            if math.fabs(array[i] - array[j]) < 1e-4:\n                array.remove(array[j])\n            if math.fabs(array[i] - array[j]) < 1e-4:\n                array.remove(array[i])\n    \n    print(\"Test for duplicate array:\", arraynums)\n    print(\"Check that duplicate array is returned:\", arraynums == arraynums[::-1])\n    print()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # your code goes here\n    dupl = []\n    for i in arraynums:\n        if i in dupl:\n            return True\n        else:\n            dupl.append(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    x = [int(x) for x in arraynums]\n    print(x)\n    array_len = len(x)\n    for i in range(array_len):\n        for j in range(i+1, array_len):\n            if x[i] == x[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    dup = set()\n    for num in array:\n        if num in dup:\n            return True\n        else:\n            dup.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    a=arraynums\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i]==a[j]:\n                return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0 \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(len(x)):\n        if x[i]!= 0:\n            print(\"x[i] =\", x[i])\n            break\n    else:\n        print(\"x[i] = 0\")\n        return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == '1': \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x < 1000 or x > 9999\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if (x % 5) == 0 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x%2==0):\n        print('Your number is woodball')\n    else:\n        print('Your number is not woodball')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 2 and x <=10: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num\n    if num < 0:\n        rev_num = -num\n        rev_num = rev_num*-1\n    if rev_num == 0:\n        return True\n    else:\n        return False\n    \n    \ndef fibonacci(num):\n    '''\n    Write a python function that returns the Fibonacci number that is passed to it.\n    '''\n    if num < 0:\n        fibonacci = -num\n        fibonacci = fibonacci*-1\n        return fibonacci\n    else:\n        fibonacci = 0\n        fibonacci = fibonacci + fibonacci*2\n        return fibonacci\n    \n    \ndef fibonacci_all(num):\n    '''\n    Write a python function that returns the Fibonacci number that is passed to it.\n    '''\n    fibo = 0\n    fibo = fibo + fibonacci(num)\n    return fibo\n    \n    \ndef prime(num):\n    '''\n    Write a python function that checks if a given number is prime or not.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    \ndef isprime(num):\n    '''\n    Write a python function that checks if a given number is prime or not.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    \ndef nthprime(num):\n    '''\n    Write a python function that returns the nth prime number in the range from 2 to the number passed as parameter.\n    '''\n    fibo = 0\n    for i in range(2, num):\n        if num % i == 0:\n            fibo = i\n    return fibo\n    \n    \ndef prime_factor(num):\n    '''\n    Write a python function that returns the prime factors of a given number passed to it.\n    '''\n    factor = []\n    if num == 0:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            factor.append(i)\n            factor.append(num//i)\n    return factor\n    \n    \ndef prime_factors(num):\n    '''\n    Write a python function that returns the prime factors of a given number passed to it.\n    '''\n    factors = []\n    if num == 0:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num//i)\n    return factors\n    \n    \ndef count_digits(num):\n    '''\n    Write a python function that returns the number of digits in a given number passed to it.\n    '''\n    digits = 0\n    for i in range(0, num):\n        if num % i == 0:\n            digits = digits + 1\n    return digits\n    \n    \ndef is_prime(num):\n    '''\n    Write a python function that returns whether a given number is prime or not.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    \ndef is_prime_reversed(num):\n    '''\n    Write a python function that returns whether a given number is prime or not.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    \ndef count_primes(num):\n    '''\n    Write a python function that returns the number of prime numbers in a given range from 2 to the number passed as parameter.\n    '''\n    num_primes = 0\n    for num in range(2, num):\n        if is_prime(num):\n            num_primes = num_primes + 1\n    return num_primes\n    \n    \ndef is_prime_no_reversed(num):\n    '''\n    Write a python function that returns whether a given number is prime or not.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    \ndef is_divisible_by_two_and_greater(num):\n    '''\n    Write a python function that returns whether a given number is divisible by 2 and greater than or equal to a given number passed as parameter.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef nth_prime(num):\n    '''\n    Write a python function that returns the nth prime number in the range from 2 to the number passed as parameter.\n    '''\n    prime_num = 1\n    for i in range(2, num):\n        if prime(i) == True:\n            prime_num = i\n    return prime_num\n    \n    \ndef is_prime_loop(num):\n    '''\n    Write a python function that checks if a given number is prime or not.\n    '''\n    num_primelist = []\n    for i in range(2, num):\n        if is_prime(i) == True:\n            num_primelist.append(i)\n    return num_primelist\n    \n    \ndef is_prime_reversed_loop(num):\n    '''\n    Write a python function that checks if a given number is prime or not.\n    '''\n    num_primelist = []\n    for i in range(2, num):\n        if is_prime_reversed(i) == True:\n            num_primelist.append(i)\n    return num_primelist\n    \n    \ndef is_prime_loop_reversed(num):\n    '''\n    Write a python function that checks if a given number is prime or not.\n    '''\n    num_primelist = []\n    for i in range(2, num):\n        if is_prime_reversed(i) == True:\n            num_primelist.append(i)\n    return num_primelist\n    \n    \ndef count_prime_loop(num):\n    '''\n    Write a python function that returns the number of prime numbers in a given range from 2 to the number passed as parameter.\n    '''\n    prime_list = []\n    for i in range(2, num):\n        if is_prime(i) == True:\n            prime_list.append(i)\n    return prime_list\n    \n    \ndef prime_factor_loop(num):\n    '''\n    Write a python function that returns the prime factors of a given number passed to it.\n    '''\n    factor_list = []\n    for i in range(2, num):\n        if num % i == 0:\n            factor_list.append(i)\n    return factor_list\n    \n    \ndef prime_factors_reversed(num):\n    '''\n    Write a python function that returns the prime factors of a given number passed to it.\n    '''\n    factor_list = []\n    for i in range(2, num):\n        if num % i == 0:\n            factor_list.append(i)\n    return factor_list\n    \n    \ndef prime_factors_loop_reversed(num):\n    '''\n    Write a python function that returns the prime factors of a given number passed to it.\n    '''\n    factor_list = []\n    for i in range(2, num):\n        if num % i == 0:\n            factor_list.append(i)\n    return factor_list\n    \n    \nde"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev_num = \"\"\n    if num < 0:\n        rev_num = \"-\" + rev(abs(num))\n    else:\n        rev_num = str(num)[::-1]\n    return rev_num\ndef factorial(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef rev_factorial(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = rev(num)\n    while rev_num[0] == \"-\" or rev_num[0] == \"-\":\n        rev_num = rev_num[1:]\n    while rev_num[-1] == \"-\" or rev_num[-1] == \"-\":\n        rev_num = rev_num[:-1]\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num*2 - num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    '''\n    Approach:\n    1. Reverse the number\n    2. Check if its in range between 1 and 2 \n    3. If its in range, return True\n    4. Else, return False\n    '''\n    if 1<=num<=2:\n        return num<2\n    elif 2<=num<=3:\n        return num<2\n    elif num>=4:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while num > 0:\n        last = num % 10\n        num = num // 10\n        if last > 0:\n            print(last, end=\" \")\n    return\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_numbers = []\n    for i in range(num + 1):\n        if num < 0:\n            break\n        if num % 10!= 0:\n            num = num * 10 + int(num / 10)\n        else:\n            num = num * 10\n        rev_numbers.append(num)\n    return rev_numbers"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # your code goes here\n    s = str(num)\n    if len(s) == 2:\n        return True\n    return False\n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return -1\n    else:\n        return int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    strnum = str(num)\n    revstrnum = strnum[::-1]\n    if int(revstrnum) == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_index = i\n    return max_index, max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    s = 1\n    i = 0\n    while i < len(arr):\n        while arr[i] % s == 0 :\n            s += 1\n        s += 1\n        i += 1\n    return s\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def find_Max_Num_2(arr) : \n        for i in range(len(arr)) : \n            for j in range(len(arr)-1) : \n                if arr[j] > arr[j+1] : \n                    arr[j],arr[j+1] = arr[j+1],arr[j]\n        return max(arr) \n    \n    if len(arr) <= 2 : \n        return arr[-1] \n    \n    m = find_Max_Num_2(arr) \n    max_num = find_Max_Num(arr) \n    if max_num > m : \n        return m \n    else : \n        for i in range(1, len(arr)) : \n            if arr[i] == arr[i-1] : \n                continue\n            arr[i-1],arr[i] = arr[i],arr[i-1] \n            max_num = find_Max_Num(arr) \n            arr[i-1],arr[i] = arr[i],arr[i-1] \n        return max_num \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxnum = arr[0]\n    for i in arr :\n        if i > maxnum :\n            maxnum = i\n    return maxnum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    i = 0\n    Max_Num = 0\n    for num in arr :\n        i += 1\n        if num > Max_Num :\n            Max_Num = num\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxnum = arr[0]\n    for x in arr:\n        if x > maxnum:\n            maxnum = x\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # we need a list of digits to start with, otherwise the first number is a \"1\"\n    # we need to add the number after the last digit\n    # we need to return the max of the list of digits\n    # we need the max since we need to include the last digit itself \n    def find_Max_Num(arr,i):\n        n = len(arr)\n        j = i+1\n        # find the first number that is not 0, if there's any, we add the number after it\n        if(n==0):\n            return arr[i]\n        if(arr[i]==0):\n            # add the number after the last digit to the return array\n            arr.append(arr[j])\n            # return the max\n            return arr[j]\n        # if we have already found the last digit, just return the last one\n        else:\n            return arr[i]\n    # we need to add the last digit to the return array\n    # because we need to add the first digit to the return array\n    return arr + find_Max_Num(arr,j-1)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = 0\n    for num in arr : \n        if num > largest_num : \n            largest_num = num \n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Your code here\n    max_num = 0\n    index = 0\n    for i in range(len(arr)):\n        if(arr[i] == 9):\n            continue\n        elif(arr[i] > max_num):\n            max_num = arr[i]\n            index = i\n    return max_num, index\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    maxNum = arr[0]\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            num = arr[i] + arr[j]\n            if num > maxNum:\n                maxNum = num\n    return maxNum\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    z=x^y\n    if z>0:\n        return \"true\"\n    elif z<0:\n        return \"false\"\n    else:\n        return \"not_present\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    if x < 0 and y > 0:\n        return False\n    if x > 0 and y < 0:\n        return False\n    if x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0) and (y<0): \n        return True \n    elif (x>0) and (y>0): \n        return False \n    else: \n        return False \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < y:\n        return 1\n    elif x > y:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0):\n        return y < 0 \n    elif (x > 0):\n        return y > 0 \n    else:\n        return y == 0 \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0:\n        if y<0:\n            return True\n        else:\n            return False\n    elif y<0:\n        if x<0:\n            return True\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0) and (y < 0):\n        return \"Negative number\"\n    elif x < 0 and (y > 0):\n        return \"Negative number\"\n    elif x < 0 and (y < 0):\n        return \"Positive number\"\n    else:\n        return \"Even number\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        sign_x=x\n        sign_y=y\n    elif x<y:\n        sign_x=y\n        sign_y=x\n    else:\n        sign_x=x\n        sign_y=y\n    \n    return sign_x==sign_y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > y):\n        return (y > x)\n    elif (x < y):\n        return (y < x)\n    else:\n        return (x < y)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if(n == 1): \n        return 1\n    elif(n == 2): \n        return 5\n    elif(n % 2 == 0): \n        return 3 + 5*(n//2)\n    else: \n        return 3 + 15*(n//2) + 5\n        "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1: \n        return n \n    elif n % 2 == 0: \n        return is_octagonal(n // 2) + is_octagonal(n // 2 + 1) \n    else: \n        return is_octagonal(3 * n + 1) \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n <= 0):\n        return\n    i = 0\n    while(i < n):\n        if (n - i) % 2 == 0:\n            return n - i\n        i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n * (n + 1) // 2\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = n\n    while (x > 1):\n        x = x - 1\n        if (n % x == 0):\n            return False\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 3: \n        return n \n    if n % 3 == 0: \n        return n // 3 \n    if n % 5 == 0: \n        return n // 5 \n    else: \n        return n // 3 + 1 \n        \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i**2 <= n:\n        i += 1\n    return i**2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 10\n    elif n == 8:\n        return 12\n    elif n == 9:\n        return 14\n    elif n == 10:\n        return 16\n    elif n == 11:\n        return 18\n    elif n == 12:\n        return 20\n    elif n == 13:\n        return 22\n    elif n == 14:\n        return 24\n    elif n == 15:\n        return 26\n    elif n == 16:\n        return 28\n    elif n == 17:\n        return 30\n    elif n == 18:\n        return 32\n    elif n == 19:\n        return 34\n    elif n == 20:\n        return 36\n    elif n == 21:\n        return 38\n    elif n == 22:\n        return 40\n    elif n == 23:\n        return 42\n    elif n == 24:\n        return 44\n    elif n == 25:\n        return 46\n    elif n == 26:\n        return 48\n    elif n == 27:\n        return 50\n    elif n == 28:\n        return 52\n    elif n == 29:\n        return 54\n    elif n == 30:\n        return 56\n    elif n == 31:\n        return 58\n    elif n == 32:\n        return 60\n    elif n == 33:\n        return 62\n    elif n == 34:\n        return 64\n    elif n == 35:\n        return 66\n    elif n == 36:\n        return 68\n    elif n == 37:\n        return 70\n    elif n == 38:\n        return 72\n    elif n == 39:\n        return 74\n    elif n == 40:\n        return 76\n    elif n == 41:\n        return 78\n    elif n == 42:\n        return 80\n    elif n == 43:\n        return 82\n    elif n == 44:\n        return 84\n    elif n == 45:\n        return 86\n    elif n == 46:\n        return 88\n    elif n == 47:\n        return 90\n    elif n == 48:\n        return 92\n    elif n == 49:\n        return 94\n    elif n == 50:\n        return 96\n    elif n == 51:\n        return 98\n    elif n == 52:\n        return 100\n    elif n == 53:\n        return 102\n    elif n == 54:\n        return 104\n    elif n == 55:\n        return 106\n    elif n == 56:\n        return 108\n    elif n == 57:\n        return 110\n    elif n == 58:\n        return 112\n    elif n == 59:\n        return 114\n    elif n == 60:\n        return 116\n    elif n == 61:\n        return 118\n    elif n == 62:\n        return 120\n    elif n == 63:\n        return 122\n    elif n == 64:\n        return 124\n    elif n == 65:\n        return 126\n    elif n == 66:\n        return 128\n    elif n == 67:\n        return 130\n    elif n == 68:\n        return 132\n    elif n == 69:\n        return 134\n    elif n == 70:\n        return 136\n    elif n == 71:\n        return 138\n    elif n == 72:\n        return 140\n    elif n == 73:\n        return 142\n    elif n == 74:\n        return 144\n    elif n == 75:\n        return 146\n    elif n == 76:\n        return 148\n    elif n == 77:\n        return 150\n    elif n == 78:\n        return 152\n    elif n == 79:\n        return 154\n    elif n == 80:\n        return 156\n    elif n == 81:\n        return 158\n    elif n == 82:\n        return 160\n    elif n == 83:\n        return 162\n    elif n == 84:\n        return 164\n    elif n == 85:\n        return 166\n    elif n == 86:\n        return 168\n    elif n == 87:\n        return 170\n    elif n == 88:\n        return 172\n    elif n == 89:\n        return 174\n    elif n == 90:\n        return 176\n    elif n == 91:\n        return 178\n    elif n == 92:\n        return 180\n    elif n == 93:\n        return 182\n    elif n == 94:\n        return 184\n    elif n == 95:\n        return 186\n    elif n == 96:\n        return 188\n    elif n == 97:\n        return 190\n    elif n == 98:\n        return 192\n    elif n == 99:\n        return 194\n    elif n == 100:\n        return 196\n    elif n == 101:\n        return 198\n    elif n == 102:\n        return 200\n    elif n == 103:\n        return 202\n    elif n == 104:\n        return 204\n    elif n == 105:\n        return 206\n    elif n == 106:\n        return 208\n    elif n == 107:\n        return 210\n    elif n == 108:\n        return 212\n    elif n == 109:\n        return 214\n    elif n == 110:\n        return 216\n    elif n == 111:\n        return 218\n    elif n == 112:\n        return 220\n    elif n == 113:\n        return 222\n    elif n == 114:\n        return 224\n    elif n == 115:\n        return 226\n    elif n == 116:\n        return 228\n    elif n == 117:\n        return 230\n    elif n == 118:\n        return 232\n    elif n == 119:\n        return 234\n    elif n == 120:\n        return 236\n    elif n == 121:\n        return 238\n    elif n == 122:\n        return 240\n    elif n == 123:\n        return 242\n    elif n == 124:\n        return 244\n    elif n == 125:\n        return 246\n    elif n == 126:\n        return 248\n    elif n == 127:\n        return 250\n    elif n == 128:\n        return 252\n    elif n == 129:\n        return 254\n    elif n == 130:\n        return 256\n    elif n == 131:\n        return 258\n    elif n == 132:\n        return 260\n    elif n == 133:\n        return 262\n    elif n == 134:\n        return 264\n    elif n == 135:\n        return 266\n    elif n == 136:\n        return 268\n    elif n == 137:\n        return 270\n    elif n == 138:\n        return 272\n    elif n == 139:\n        return 274\n    elif n == 140:\n        return 276\n    elif n == 141:\n        return 278\n    elif n == 142:\n        return 280\n    elif n == 143:\n        return 282\n    elif n == 144:\n        return 284\n    elif n == 145:\n        return 286\n    elif n == 146:\n        return 288\n    elif n == 147:\n        return 290\n    elif n == 148:\n        return 292\n    elif n == 149:\n        return 294\n    elif n == 150:\n        return 296\n    elif n == 151:\n        return 298\n    elif n == 152:\n        return 300\n    elif n == 153:\n        return 302\n    elif n == 154:\n        return 304\n    elif n == 155:\n        return 306\n    elif n == 156:\n        return 308\n    elif n == 157:\n        return 310\n    elif n == 158:\n        return 312\n    elif n == 159:\n        return 314\n    elif n == 160:\n        return 316\n    elif n == 161:\n        return 318\n    elif n == 162:\n        return 320\n    elif n == 163:\n        return 322\n    elif n == 164:\n        return 324\n    elif n == 165:\n        return 326\n    elif n == 166:\n        return 328\n    elif n == 167:\n        return 330\n    elif n == 168:\n        return 332\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substrings(s,n):\n        \n        count = 0\n        for i in range(1,len(s)+1):\n            if int(s[i-1:i])>0:\n                count+=1\n                if int(s[i-1:i])==n:\n                    count+=1\n        return count\n    if len(s)<=1:\n        return 0\n    res = count_substrings(s,int(s[0]))\n    for i in range(len(s)-1):\n        if int(s[i:i+2])<int(s[i+1:len(s)]):\n            res+=count_substrings(s,int(s[i:i+2]))\n    return res\ndef count_duplicates(s):\n    '''\n    Write a python function to find the number of unique characters in the string.\n    '''\n    if len(s)<=1:\n        return 0\n    res = 0\n    for i in range(len(s)):\n        if s[i] in s[i+1:]:\n            res+=1\n        else:\n            res+=0\n    return res\ndef count_Substring_sum(s):\n    '''\n    Write a python function to find the sum of the first 4 digits of the given string.\n    '''\n    if len(s)<=1:\n        return 0\n    res = 0\n    for i in range(len(s)-4):\n        res+=int(s[i:i+4])\n    return res\ndef count_Common_Substrings(s):\n    '''\n    Write a python function to find the number of common substrings in the given string.\n    '''\n    if len(s)<=1:\n        return 0\n    res = 0\n    s_d = {s[0]:1}\n    for i in range(1,len(s)):\n        if s[i] in s_d:\n            res+=s_d[s[i]]\n            s_d[s[i]]+=1\n        else:\n            s_d[s[i]]=1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substring(s, l):\n        '''\n        Count the number of substrings with sum of digits equal to the given length.\n        '''\n        n = 1\n        if l==1:\n            return n\n        if s[l-1]==s[l]:\n            n = n+count_substring(s,l-1)\n        return n\n    n=0\n    for i in range(len(s)):\n        if s[i] in str(i):\n            n=n+count_substring(s,i)\n    return n\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    count = 0\n    for i in range(0, len(s)):\n        if int(s[i:i+3]) == int(s[i:i+3])*int(s[i:i+3]):\n            count += 1\n        if s[i] == s[i+1]:\n            count += 1\n    result = count\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    cnt=0\n    sub=set()\n    dic={}\n    for i in s:\n        if i in dic:\n            dic[i]=dic[i]+1\n        else:\n            dic[i]=1\n    for i in dic:\n        if dic[i]==1:\n            for j in range(len(s)-i+1):\n                if s[j:j+i] in sub:\n                    cnt+=1\n            sub.add(s[j:j+i])\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = dict()\n    for i in range(len(s)):\n        d[s[i]] = d.get(s[i], 0) + 1\n    \n    return len(d)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def is_palindrome(s):\n        '''\n        Given a string, check if the string is palindrome.\n        '''\n        return s == s[::-1]\n    def find_Substring(s, t):\n        '''\n        Given a string and a string t, find the index of the substring where the sum of all the digits of t equals to the sum of digits of s.\n        '''\n        index = []\n        for i in range(len(s) - len(t) + 1):\n            sum_digits = sum(int(c) for c in s[i:i+len(t)])\n            if sum_digits == sum(t):\n                index.append(i)\n        return index\n    \n    count = 0\n    for i in range(len(s)):\n        if is_palindrome(s[i:i+len(t)]):\n            count += 1\n            if len(s[i:i+len(t)]) == len(t):\n                for i_ in range(i, len(s)):\n                    if is_palindrome(s[i_:i_+len(t)]) and t[0] not in t[1:len(t)]:\n                        count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        curr = s[i:i+2]\n        # print(\"curr : {}\".format(curr))\n        if int(curr) == len(curr):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub = []\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            num = s[i:j]\n            if len(num)==len(num) and int(num)==int(num) and sum(num) == sum(num):\n                count+=1\n    return count\nprint(count_Substrings(\"abcde\"))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # // Pattern\n    # We will consider the pattern as an integer with the value of ith digit, which is sum of all the digits of the string s[i-1].\n    # Let's also consider the pattern as a string of integer, with the length of the string s[i].\n    # If a pattern with length l is of the form P, then P has length l, P is of form p, then p has l digits.\n    # We will consider all the patterns of length l.\n    # Let's say we have an array [1,3,6,8,9], we can satisfy that if we have a pattern P1, P2, P3, then we can satisfy that P1+P2+P3=l,\n    # so we will count the number of such conditions.\n    # For example, if P1 has digits 1,3,6,8,9 and l=3, then we can count P1 as 3+6+8+9=10, since the length of P1 is 3,\n    # the length of P2 is 6, the length of P3 is 8, and the length of P1+P2+P3=l,\n    # so we will count 10 as 3+6+8+9=10, since the length of P1 is 6, and the length of P2 is 8, and the length of P3 is 9,\n    # and the length of P1+P2+P3=l, so we will count 10 as 3+6+8+9=10, since the length of P1 is 6, and the length of P2 is 8,\n    # and the length of P3 is 9.\n    # Return the number of substrings with the given sum of digits.\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = 0\n    def is_substring(s, e):\n        for i in range(len(s)):\n            if s[i]!= s[e]:\n                return False\n        return True\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if is_substring(s[i:j+1], len(s[i:j+1])):\n                substrings += 1\n    return substrings\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    nums=[]\n    for num in xs:\n        if num not in nums:\n            nums.append(num)\n    nums.sort()\n    return nums[-1]\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = int(min(xs))\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    nums = list(xs)\n    nums.sort()\n    return nums[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = min(xs)\n    xs.remove(min_num)\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls = sorted(xs)\n    ans = ls[0]\n    for i in xs:\n        if i < ans:\n            ans = i\n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n    "
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                continue\n            if i[0] > j[0] and i[0] > i[1]:\n                i[0], i[1] = i[1], i[0]\n            elif j[0] > i[0] and j[0] > j[1]:\n                j[0], j[1] = j[1], j[0]\n            else:\n                pass\n            diff = abs(i[0] - i[1]) + abs(j[0] - j[1])\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_dif = 0\n    max_index = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        available_pairs = set(test_list) - set(test_list[0])\n        return max(list(map(lambda x: abs(x[1] - x[0]), available_pairs)))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for idx in range(len(test_list)-1):\n        temp_difference = abs(test_list[idx+1] - test_list[idx])\n        if temp_difference > max_difference:\n            max_difference = temp_difference\n            index = idx\n    return max_difference, index\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    # Return the maximum difference\n    # of the list\n    # Return None if there are no pairs in the list\n    # Assume that each tuple is hashable\n    return max(set(test_list)-set(range(len(test_list))))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        max_difference = max(test_list[i], test_list[i+1])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    lst = test_list\n    lst = sorted(lst)\n    index = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            index = i\n        else:\n            break\n    \n    index = (lst[index+1] - lst[index])\n    \n    return index\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    a = []\n    b = []\n    for i in test_list:\n        a.append(i[0])\n        b.append(i[1])\n    a.sort()\n    b.sort()\n    total_diff = 0\n    for i in range(0, len(a)):\n        diff = abs(a[i] - b[i])\n        total_diff += diff\n    return total_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in range(0,len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] + test_list[j] > test_list[j]:\n                test_list[i] = test_list[j]\n                test_list[j] = 0\n    test_list.sort()\n    return test_list[-1] - test_list[0]"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        subjectmarks[i][1] = int(subjectmarks[i][1])\n    return sorted(subjectmarks, key=lambda x: x[1]"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples\n    subjectmarks_sorted = [(subjectmarks[i][1], subjectmarks[i][0]) for i in range(len(subjectmarks))]\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = []\n    for i in subjectmarks:\n        subject_marks.append(i[1])\n    subject_marks.sort()\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # YOUR CODE HERE\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    def sort_marks(subjectmarks):\n        '''\n        Sort a list of tuples using the second value of each tuple.\n        '''\n        \n        def sort_marks(subjectmarks):\n            '''\n            Sort a list of tuples using the second value of each tuple.\n            '''\n            \n            subjectmarks.sort(key=lambda x:x[1])\n            return subjectmarks\n        \n        subjectmarks.sort(key=lambda x:x[1])\n        return sort_marks(subjectmarks)\n        \n        \n    return sort_marks(subjectmarks)\n    \n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if subjectmarks:\n        pass\n    else:\n        subjectmarks = []\n    pass\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list_sorted = []\n    for subject in subjectmarks:\n        list_sorted.append(subject[1])\n    list_sorted.sort()\n    subjectmarks = []\n    for subject in list_sorted:\n        for item in subject:\n            subjectmarks.append((subject,item))\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    elif len(data_list) == 2:\n        return data_list[0] + data_list[1]\n    else:\n        new_list = []\n        for element in data_list:\n            new_list.append(element)\n        return recursive_list_sum(new_list)"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Create empty list to store flatten\n    flatten_list = []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for x in data_list:\n        total += x\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for el in data_list:\n        total += el\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # your code goes here\n    if data_list == []:\n        return None\n    else:\n        if len(data_list) == 1:\n            return data_list[0]\n        else:\n            return [data_list[0] + recursive_list_sum(data_list[1:]), data_list[0]]\n    \n    \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for data in data_list:\n        total += data\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    def sum_elements(elem_list):\n        sum = 0\n        for el in elem_list:\n            sum += el\n        return sum\n    for elem in data_list:\n        if type(elem) == list:\n            flattened_list.append(sum_elements(elem))\n        else:\n            flattened_list.append(elem)\n    return flattened_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for num in list:\n        if num > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    print(\"The number of positive numbers in the list is: \",count)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # get the length of the list\n    n = len(list)\n    # initialise the count\n    count = 0\n    # iterate through the list\n    for i in list:\n        # if the element is positive\n        if i > 0:\n            # increment the count\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_num = 0\n    for i in range(len(list)):\n        if list[i] == True:\n            pos_num += 1\n    return pos_num"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    s = 0\n    for item in list:\n        if item > 0:\n            s = s + 1\n    print(s)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #pass\n    #raise NotImplementedError()\n    # If list is empty or only contains single element, return 0\n    # else, find the index of the first positive number in list, subtract it from index 0 and repeat this process\n    # until the last positive number in list is found\n    # and return the count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(\"The number of positive numbers is :\", count)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-1+1)\ndef mini(num):\n    '''\n    Write a function that takes a positive integer and returns the minimal number of\n    subsets with elements in the set.\n    '''\n    if num==0:\n        return 0\n    elif num==1:\n        return 1\n    elif num<1:\n        return 0\n    elif num<2:\n        return mini(num-1)\n    elif num<3:\n        return mini(num-2)\n    elif num<4:\n        return mini(num-3)\n    elif num<5:\n        return mini(num-4)\n    elif num<6:\n        return mini(num-5)\n    elif num<7:\n        return mini(num-6)\n    elif num<8:\n        return mini(num-7)\n    elif num<9:\n        return mini(num-8)\n    elif num<10:\n        return mini(num-9)\n    elif num<11:\n        return mini(num-10)\n    elif num<12:\n        return mini(num-11)\n    elif num<13:\n        return mini(num-12)\n    elif num<14:\n        return mini(num-13)\n    elif num<15:\n        return mini(num-14)\n    elif num<16:\n        return mini(num-15)\n    elif num<17:\n        return mini(num-16)\n    elif num<18:\n        return mini(num-17)\n    elif num<19:\n        return mini(num-18)\n    elif num<20:\n        return mini(num-19)\n    elif num<21:\n        return mini(num-20)\n    elif num<22:\n        return mini(num-21)\n    elif num<23:\n        return mini(num-22)\n    elif num<24:\n        return mini(num-23)\n    elif num<25:\n        return mini(num-24)\n    elif num<26:\n        return mini(num-25)\n    elif num<27:\n        return mini(num-26)\n    elif num<28:\n        return mini(num-27)\n    elif num<29:\n        return mini(num-28)\n    elif num<30:\n        return mini(num-29)\n    elif num<31:\n        return mini(num-30)\n    elif num<32:\n        return mini(num-31)\n    elif num<33:\n        return mini(num-32)\n    elif num<34:\n        return mini(num-33)\n    elif num<35:\n        return mini(num-34)\n    elif num<36:\n        return mini(num-35)\n    elif num<37:\n        return mini(num-36)\n    elif num<38:\n        return mini(num-37)\n    elif num<39:\n        return mini(num-38)\n    elif num<40:\n        return mini(num-39)\n    elif num<41:\n        return mini(num-40)\n    elif num<42:\n        return mini(num-41)\n    elif num<43:\n        return mini(num-42)\n    elif num<44:\n        return mini(num-43)\n    elif num<45:\n        return mini(num-44)\n    elif num<46:\n        return mini(num-45)\n    elif num<47:\n        return mini(num-46)\n    elif num<48:\n        return mini(num-47)\n    elif num<49:\n        return mini(num-48)\n    elif num<50:\n        return mini(num-49)\n    elif num<51:\n        return mini(num-50)\n    elif num<52:\n        return mini(num-51)\n    elif num<53:\n        return mini(num-52)\n    elif num<54:\n        return mini(num-53)\n    elif num<55:\n        return mini(num-54)\n    elif num<56:\n        return mini(num-55)\n    elif num<57:\n        return mini(num-56)\n    elif num<58:\n        return mini(num-57)\n    elif num<59:\n        return mini(num-58)\n    elif num<60:\n        return mini(num-59)\n    elif num<61:\n        return mini(num-60)\n    elif num<62:\n        return mini(num-61)\n    elif num<63:\n        return mini(num-62)\n    elif num<64:\n        return mini(num-63)\n    elif num<65:\n        return mini(num-64)\n    elif num<66:\n        return mini(num-65)\n    elif num<67:\n        return mini(num-66)\n    elif num<68:\n        return mini(num-67)\n    elif num<69:\n        return mini(num-68)\n    elif num<70:\n        return mini(num-69)\n    elif num<71:\n        return mini(num-70)\n    elif num<72:\n        return mini(num-71)\n    elif num<73:\n        return mini(num-72)\n    elif num<74:\n        return mini(num-73)\n    elif num<75:\n        return mini(num-74)\n    elif num<76:\n        return mini(num-75)\n    elif num<77:\n        return mini(num-76)\n    elif num<78:\n        return mini(num-77)\n    elif num<79:\n        return mini(num-78)\n    elif num<80:\n        return mini(num-79)\n    elif num<81:\n        return mini(num-80)\n    elif num<82:\n        return mini(num-81)\n    elif num<83:\n        return mini(num-82)\n    elif num<84:\n        return mini(num-83)\n    elif num<85:\n        return mini(num-84)\n    elif num<86:\n        return mini(num-85)\n    elif num<87:\n        return mini(num-86)\n    elif num<88:\n        return mini(num-87)\n    elif num<89:\n        return mini(num-88)\n    elif num<90:\n        return mini(num-89)\n    elif num<91:\n        return mini(num-90)\n    elif num<92:\n        return mini(num-91)\n    elif num<93:\n        return mini(num-92)\n    elif num<94:\n        return mini(num-93)\n    elif num<95:\n        return mini(num-94)\n    elif num<96:\n        return mini(num-95)\n    elif num<97:\n        return mini(num-96)\n    elif num<98:\n        return mini(num-97)\n    elif num<99:\n        return mini(num-98)\n    elif num<100:\n        return mini(num-99)\n    elif num<101:\n        return mini(num-100)\n    elif num<102:\n        return mini(num-101)\n    elif num<103:\n        return mini(num-102)\n    elif num<104:\n        return mini(num-103)\n    elif num<105:\n        return mini(num-104)\n    elif num<106:\n        return mini(num-105)\n    elif num<107:\n        return mini(num-106)\n    elif num<108:\n        return mini(num-107)\n    elif num<109:\n        return mini(num-108)\n    elif num<110:\n        return mini(num-109)\n    elif num<111:\n        return mini(num-110)\n    elif num<112:\n        return mini(num-111)\n    elif num<113:\n        return mini(nu"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = sorted(n)\n    def count_bell_number(first,last):\n        if last == 0:\n            return 1\n        elif first == last:\n            return 0\n        else:\n            return count_bell_number(first,last-1) + count_bell_number(first+1,last)\n    return count_bell_number(0,n[-1])\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    # if n == 4:\n    #     return 11\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # base case - if n is 1, return 0\n    if n == 1:\n        return 0\n    # if n is 2, we need to split it into 3 and 2, 3 and 2,\n    # hence the number of ways is 3 * 2 * 2 = 36\n    # if n is 3, then we only need to split it into 4, 3, 2, 1,\n    # hence the number of ways is 36\n    # we can't have 1 or 2 as 0\n    # so we keep splitting it into 3, 3, 3, 3, 3, 3, 3, 3, 3\n    # we can split it into 4, 3, 2, 1, 2, 1, 2, 1, 2\n    # then we only have 4*3*2*1*2*1*2 = 36\n    # to get our answer we need to go through 3 and 2 and just keep repeating\n    # since they are equal, we can't have 1 or 2 as 0\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    f = [0 for i in range(n+1)]\n    f[1] = 1\n    for i in range(2,n+1):\n        f[i] = f[i-1] + f[i-2]\n        if i % 2 == 0:\n            f[i] = f[i] + f[i//2]\n    return f[n]\n    \ndef bell_number_finite(n):\n    '''\n    Write a function that takes in an integer and returns the number of ways to divide a set of numbers.\n    '''\n    f = [0 for i in range(n+1)]\n    f[1] = 1\n    for i in range(2,n+1):\n        f[i] = f[i-1] + f[i-2]\n        if i % 2 == 0:\n            f[i] = f[i] + f[i//2]\n    return f[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # NOTE: You must make sure that you use the base case, \"partition\", \n    # which is a recursive function which is the main entry point.\n    # If there is a base case, you will need to modify it here. \n    if n == 0 or n == 1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_ways(n)\n    \ndef bell_ways(n):\n    '''\n    Return the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_ways(n-1) + bell_ways(n-2)\n    \nif __name__ == '__main__':\n    print(bell_number(10))\n    print(bell_number(25))\n    print(bell_number(16))\n    print(bell_number(4))\n    print(bell_number(0))\n    print(bell_number(50))"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = int(n)\n    s = [0] + [0] * (n - 2)\n    s[0] = s[1] = 1\n    for i in range(2, n):\n        s[i] = s[i - 1] + s[i - 2]\n    return s[n - 1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    f = 0\n    g = 1\n    if A[0] < A[1]:\n        f = 1\n        g = 0\n    for i in range(2,n):\n        if A[i] < A[i-1] and A[i] > A[i-2]:\n            f = 1\n        if A[i] > A[i-1] and A[i] < A[i-2]:\n            g = 1\n    if f!= g:\n        return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    x = 0\n    while x < len(A) - 1:\n        if A[x] >= A[x + 1]:\n            return False\n        x += 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] >= A[1]: return False\n    else: return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is sorted\n    if len(A) >= 2:\n        if A[0] >= A[1]:\n            return False\n        else:\n            for i in range(1, len(A)):\n                if A[i] < A[i-1]:\n                    return False\n            return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True \n    else: \n        x = len(A)\n        if A[0] < A[x-1]: \n            return False \n        for i in range(1, x-1): \n            if A[i] > A[i+1]: \n                return False \n        return True \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == [] or len(A) < 2:\n        return False\n    else:\n        # start a stack to keep track of the number of '1' in the given array\n        # stack is used to keep track of the number of '0' in the given array\n        stack = []\n        # initialize the carry\n        for i in range(len(A) - 1):\n            # if the elements are the same\n            if A[i] == A[i + 1]:\n                stack.append(0)\n            else:\n                # if there are two '1's in the stack,\n                # we know that the array is monotonic\n                # we pop the '0' from the stack and add it to the given array\n                if len(stack) > 0:\n                    # if the stack is not empty,\n                    # add the number of '0' from stack to the previous element\n                    # then pop the '0' from stack and add it to the given array\n                    # if the stack is empty,\n                    # we can assume it is a single '0'\n                    # stack is empty,\n                    # or if the stack is not empty,\n                    # we can assume it is a single '0'\n                    if stack[len(stack) - 1] == 0:\n                        # if the '0' is the last element,\n                        # we can assume that the stack is empty\n                        # because it is monotonic\n                        # and if the array is not monotonic,\n                        # we know that it is a single '0'\n                        if len(stack) == 1:\n                            return True\n                        else:\n                            return False\n                    else:\n                        # if the '0' is not the last element,\n                        # we know that the stack is empty\n                        # because it is a single '0'\n                        # and if the array is not monotonic,\n                        # we know that it is a single '0'\n                        return False\n                # we know that the stack is empty\n                # so, the number of '0' in the stack is zero\n                else:\n                    stack.append(0)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # For finding the maximum and minimum values \n    maximum = A[0]\n    minimum = A[0]\n    # For calculating the maximum and minimum values\n    for i in range(1, len(A)):\n        if A[i] > maximum:\n            maximum = A[i]\n        if A[i] < minimum:\n            minimum = A[i]\n    # Now return True if it is monotonic\n    if minimum == maximum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n==1:\n        return True\n    for i in range(n-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True \n    else: \n        x = A[0] \n        for i in range(1, len(A)): \n            if A[i] > x: \n                return False \n            else: \n                x = A[i] \n    return True \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == A[::-1]:\n        return True\n    else:\n        return False\ndef print_matrix(a):\n    '''\n    write a python function to print a given matrix. \n    '''\n    print(\"\\n\")\n    for i in range(len(a)):\n        print(a[i])\n        \n    \ndef main():\n    '''\n    Write a python function to check whether the given matrix is monotonic or not.\n    '''\n    A = []\n    print(\"Enter the entries in the matrix: \")\n    print(\"Enter the matrix: \")\n    for i in range(int(input())):\n        temp = [int(x) for x in input().split()]\n        A.append(temp)\n    \n    if is_Monotonic(A):\n        print(\"The given matrix is monotonic\")\n    else:\n        print(\"The given matrix is not monotonic\")\n    \n    \nif __name__=='__main__':\n    main("
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l or is_sublist(l,s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n    if l_len == s_len:\n        return True\n    for i in range(l_len-s_len):\n        if l[i:i+s_len] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n    '''\n    l = list(set(l)) #if there are duplicate elements in the list, then it will return\n    if len(l)>1:\n        for i in range(len(l)):\n            for j in range(i,len(l)):\n                if l[i] == l[j]:\n                    pass\n                else:\n                    return False\n    else:\n        return False\n    '''"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(any(a <= s for a in l) for s in s_list)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)!= len(s): return False\n    for i in range(len(s)):\n        if l[i]!= s[i]: return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)==0:\n        return True\n    if len(l)==1:\n        return s in l\n    if s in l[0:len(l)-1]:\n        return is_sublist(l[1:len(l)-1],s)\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    start = 0\n    end = len(l) - 1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    l_s = sorted(s)\n    if len(l) == len(l_s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    def tuple_validator(tup):\n        '''\n        tup: (start,end,step,expect)\n        '''\n        try:\n            assert len(tup[0]) == 2 and len(tup[1]) == 2, \"tuple does not have the right length!\"\n            assert type(tup[0]) == int and type(tup[1]) == int, \"tuple does not have integers!\"\n            assert tup[0] >= 0 and tup[1] >= 0, \"tuple has zero or negative values!\"\n            assert tup[0] <= tup[1], \"tuple is not in ascending order!\"\n            assert type(tup[2]) == int and tup[2] > 0, \"tuple does not have positive steps!\"\n            assert tup[2] < tup[2], \"tuple has negative steps!\"\n            assert tup[2] <= tup[3], \"tuple has negative steps!\"\n            assert tup[3] < tup[3], \"tuple has negative steps!\"\n            return True\n        except AssertionError:\n            return False\n        except TypeError:\n            return False\n    \n    '''\n    list:  [(0,1),(1,2),(2,3)]\n    tuple:  (0,1)\n    returns: True\n    '''\n    \n    if tuple_validator(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        for i in Input:\n            if len(i)!= len(Input[0]):\n                return False\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        for i in range(0, len(Input)-1):\n            for j in range(i+1, len(Input)):\n                if Input[i] == Input[j] and Input[i] not in {Input[0], Input[j], Input[-1]}:\n                    return False\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    if len(Input) < 2:\n        return False\n    \n    # if there are duplicate items return true\n    if len(set(map(tuple, Input)))!= len(Input):\n        return False\n    \n    # if all elements in the list are equal return true\n    for i in Input:\n        if tuple(i)!= i:\n            return False\n    \n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tup1 = tuple(Input)\n    tup2 = tuple(Input)\n    return tup1 == tup2\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for x in Input:\n        if len(x)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1] and Input[i][2] == Input[j][2] and Input[i][3] == Input[j][3]:\n                    return True\n    return False\n    # write your code here\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i][j])!= len(Input[j][i]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    if n <= 1:\n        return n == 0\n    for i in range(1, n):\n        if Input[i] == Input[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: create a variable to store the length of the list\n    len = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Build-in function to combine sort of list\n    #print('comb_sort is called')\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(0, n-1):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    temp = []\n    i = 0\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_list(arr):\n        '''\n        Takes the unsorted list and returns it sorted\n        '''\n        n = len(arr)\n        for i in range(n):\n            for j in range(n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n    def sort_lists(arr):\n        '''\n        Takes a list of lists and sorts it\n        '''\n        n = len(arr)\n        for i in range(n):\n            for j in range(n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n    # loop through the unsorted list and return it\n    def sort(arr):\n        '''\n        Takes a unsorted list and returns it sorted\n        '''\n        n = len(arr)\n        for i in range(n):\n            for j in range(n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n    # sort the unsorted list\n    def sort_list_by_merge(arr):\n        '''\n        Takes a list of lists and returns it sorted\n        '''\n        n = len(arr)\n        for i in range(n):\n            for j in range(n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n    # sort the unsorted list in reverse order\n    def sort_reverse_list(arr):\n        '''\n        Takes a list of lists and returns it sorted\n        '''\n        n = len(arr)\n        for i in range(n):\n            for j in range(n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    temp = []\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                temp.append(nums[j])\n    for i in range(len(temp)):\n        nums[i] = temp.pop()\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1,i,-1):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # need to do a small sanity check, since lists must be sorted.\n    # need to make sure that the list is not empty\n    if len(nums) < 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    swap = l - 1\n    # swap = -1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n > 1:\n        if n % 2 == 0:\n            return False\n        else:\n            return n == (n-1)\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = 1\n    for x in range(1,n+1):\n        square *= x\n        print(square, end=' ')\n    print()\n    return \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #base case\n    if n == 1: \n        return True\n    #number is 1\n    elif n == 2: \n        return False\n    #difs is 2\n    elif n%2 == 0:\n        return True\n    #difs is 1\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def dif_Square(n): \n        if n == n*n:\n            return True\n        else:\n            return False\n    if dif_Square(n) == True:\n        return \"Square\"\n    else:\n        return \"Not square\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # init var\n    difference = 0\n    # init square\n    square = 2*n\n    # iterate over every square\n    for row in range(0, square, 1):\n        for col in range(0, square, 1):\n            # init difference\n            difference = abs(row - col)\n            # if square is odd\n            if (row % 2 == 0):\n                # if difference is < 2\n                if (difference < 2):\n                    # return true\n                    return True\n            # if square is even\n            else:\n                # if difference is > 2\n                if (difference > 2):\n                    # return false\n                    return False\n    # return false\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = n\n    if n % 2!= 0:\n        print(s)\n        return \"NO\"\n    for i in range(3, n, 2):\n        s = (s - i)\n        if s == 0:\n            print(s)\n            return \"NO\"\n    print(s)\n    return \"YES\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # your code goes here\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n%2==0:\n        return dif_Square(n//2)\n    elif n%2==1:\n        return dif_Square((n+1)/2)\n    return 0\nprint(dif_Square(1))\nprint(dif_Square(2))\nprint(dif_Square(3))\nprint(dif_Square(4))\nprint(dif_Square(5))\nprint(dif_Square(6))\nprint(dif_Square(7))\nprint(dif_Square(8))\nprint(dif_Square(9))\nprint(dif_Square(10))\nprint(dif_Square(0)"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return False\n    elif n < 0:\n        return False\n    else:\n        return(dif_Square(n-1))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return 0\n    elif n % 2 == 0: \n        return dif_Square(n//2) \n    else: \n        return dif_Square(n//2) + dif_Square(3*n + 1)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    dif = n - (n**2)\n    if dif < 0:\n        return 'Sorry, You cannot solve the problem'\n    else:\n        return 'Yes, You can solve the problem'\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(colors)-1):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepatterns(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns):\n        return True\n    for i in range(len(colors)):\n        for j in range(len(patterns[i])):\n            if colors[i][j]!= patterns[i][j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    # iterate through the patterns array\n    for pattern in patterns:\n        # if the pattern is the same as the current\n        if pattern[0] == colors[i]:\n            # assign i to the next color\n            i += 1\n        # if the pattern is different\n        else:\n            # if it is the last color, i is set to 1\n            i = 1\n            # if it doesn't\n            if i < len(colors):\n                # return False\n                # i is the same as the current\n                if patterns[i][0]!= colors[i]:\n                    return False\n            # if it is not\n            else:\n                # return False\n                # i is the last color\n                return False\n    # if it didn't follow the sequence\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if len(colors)!= len(pattern): return False\n        for idx, colour in enumerate(colors):\n            if colour!= pattern[idx]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_ind = 0\n    for pattern in patterns:\n        if pattern_ind < len(colors):\n            if colors[pattern_ind] == colors[pattern_ind+1]:\n                pattern_ind += 2\n            else:\n                pattern_ind += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if pattern[0]!= 0:\n            for color in colors:\n                if (color[0] == pattern[0] and color[1] == pattern[1] and color[2] == pattern[2]):\n                    return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all([colors[i] == patterns[i][1] for i in range(len(colors))])\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if len(patterns[i])==0:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                print(test_list[i][j])\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for t in test_list:\n        if t[1] % K == 0:\n            yield t\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # find all tuples which have all elements divisible by k from the given list\n    # tuples which are in the list\n    tuples = []\n    for a, b in test_list:\n        if a % K == 0 and b % K == 0:\n            tuples.append((a, b))\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if test_list[i][0]%k == 0 and test_list[j][0]%k == 0 and test_list[k][0]%k == 0:\n                    return (test_list[i], test_list[j], test_list[k])\n    return None\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    K_list = [i[1] for i in test_list]\n    tuples = []\n    for i in test_list:\n        for j in range(i[1]//K):\n            if i[0]%K==0:\n                tuples.append(i)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Fill in this function\n    # input: test_list: a list of tuples of (number, number)\n    # output: an array of tuples of numbers that are divisible by k.\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if all(tup[i] % K == 0 for i in range(len(tup))):\n            return tup\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # TO DO: write a recursive function to find the all tuples that have all elements divisible by k\n    return\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a set\n    all_tuples = set()\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print(\"It is divisible by 11.\")\n        return True\n    else: \n        print(\"It is not divisible by 11.\") \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # your code goes here\n    return n % 10 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Your code here\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    if n % 5 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 2 == 0: \n        return \"the number is even\"\n    else: \n        return \"the number is odd\"\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 10 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = list(s)\n    if len(s)%2==1:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    lst = list(s)\n    odd_word_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            odd_word_lst.append(i)\n    print(odd_word_lst)\n    return len(odd_word_lst)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Write your code here\n    if len(s) % 2!= 0:\n        return \"Not a valid word\"\n    else:\n        return \"Valid word\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        count = count + 1\n        if (count % 2)!= 0:\n            return \"Odd Length!\"\n    return \"Even length!\"\ns = input()\nprint(word_len(s))"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    lst = []\n    lst2 = []\n    len = len(s)\n    for i in range(0, len): \n        if s[i] in 'aeiouAEIOU':\n            lst.append(s[i])\n        if s[i] =='':\n            lst2.append(s[i])\n    if len(lst) == len(lst2):\n        return True\n    else: \n        return False\n    \nprint(word_len(\"abcdefg\")) # True\nprint(word_len(\"A B C D\")) # True\nprint(word_len(\"one\")) # False\nprint(word_len(\"one\")) # False\nprint(word_len(\"We are very happy\")) # False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            tetrahedral_num += 1\n        else:\n            tetrahedral_num += 1\n            if i % 3 == 0:\n                tetrahedral_num += 1\n    return tetrahedral_num\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        raise Exception('Invalid input')\n    elif n == 0:\n        return 1\n    else:\n        lst = list(str(n))\n        for i in range(len(lst)):\n            if lst[i] == '1':\n                lst.remove(lst[i])\n                lst.remove('1')\n        lst = int(''.join(lst))\n        return lst**2"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n ** 0.5)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    while n > 0: \n        n -= 1\n        if n % 2 == 0:\n            n //= 3\n        else: \n            n //= 2\n    return n\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 1\n    if n < 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 6\n    elif n == 5: \n        return 9\n    elif n == 6: \n        return 12\n    elif n == 7: \n        return 15\n    elif n == 8: \n        return 18\n    elif n == 9: \n        return 21\n    elif n == 10: \n        return 24\n    elif n == 11: \n        return 27\n    elif n == 12: \n        return 30\n    elif n == 13: \n        return 35\n    elif n == 14: \n        return 38\n    elif n == 15: \n        return 41\n    elif n == 16: \n        return 44\n    elif n == 17: \n        return 47\n    elif n == 18: \n        return 50\n    elif n == 19: \n        return 55\n    elif n == 20: \n        return 58\n    elif n == 21: \n        return 61\n    elif n == 22: \n        return 64\n    elif n == 23: \n        return 67\n    elif n == 24: \n        return 70\n    elif n == 25: \n        return 75\n    elif n == 26: \n        return 78\n    elif n == 27: \n        return 81\n    elif n == 28: \n        return 84\n    elif n == 29: \n        return 87\n    elif n == 30: \n        return 90\n    elif n == 31: \n        return 95\n    elif n == 32: \n        return 98\n    elif n == 33: \n        return 101\n    elif n == 34: \n        return 104\n    elif n == 35: \n        return 107\n    elif n == 36: \n        return 110\n    elif n == 37: \n        return 115\n    elif n == 38: \n        return 118\n    elif n == 39: \n        return 121\n    elif n == 40: \n        return 124\n    elif n == 41: \n        return 127\n    elif n == 42: \n        return 130\n    elif n == 43: \n        return 135\n    elif n == 44: \n        return 138\n    elif n == 45: \n        return 141\n    elif n == 46: \n        return 144\n    elif n == 47: \n        return 147\n    elif n == 48: \n        return 150\n    elif n == 49: \n        return 155\n    elif n == 50: \n        return 158\n    elif n == 51: \n        return 161\n    elif n == 52: \n        return 164\n    elif n == 53: \n        return 167\n    elif n == 54: \n        return 170\n    elif n == 55: \n        return 175\n    elif n == 56: \n        return 178\n    elif n == 57: \n        return 181\n    elif n == 58: \n        return 184\n    elif n == 59: \n        return 187\n    elif n == 60: \n        return 190\n    elif n == 61: \n        return 195\n    elif n == 62: \n        return 198\n    elif n == 63: \n        return 201\n    elif n == 64: \n        return 204\n    elif n == 65: \n        return 207\n    elif n == 66: \n        return 210\n    elif n == 67: \n        return 215\n    elif n == 68: \n        return 218\n    elif n == 69: \n        return 220\n    elif n == 70: \n        return 225\n    elif n == 71: \n        return 229\n    elif n == 72: \n        return 231\n    elif n == 73: \n        return 234\n    elif n == 74: \n        return 237\n    elif n == 75: \n        return 240\n    elif n == 76: \n        return 245\n    elif n == 77: \n        return 248\n    elif n == 78: \n        return 251\n    elif n == 79: \n        return 254\n    elif n == 80: \n        return 255\n    elif n == 81: \n        return 256\n    elif n == 82: \n        return 257\n    elif n == 83: \n        return 260\n    elif n == 84: \n        return 265\n    elif n == 85: \n        return 268\n    elif n == 86: \n        return 271\n    elif n == 87: \n        return 274\n    elif n == 88: \n        return 275\n    elif n == 89: \n        return 277\n    elif n == 90: \n        return 270\n    elif n == 91: \n        return 275\n    elif n == 92: \n        return 278\n    elif n == 93: \n        return 281\n    elif n == 94: \n        return 284\n    elif n == 95: \n        return 277\n    elif n == 96: \n        return 282\n    elif n == 97: \n        return 285\n    elif n == 98: \n        return 288\n    elif n == 99: \n        return 289\n    elif n == 100: \n        return 290\n    elif n == 101: \n        return 295\n    elif n == 102: \n        return 298\n    elif n == 103: \n        return 301\n    elif n == 104: \n        return 304\n    elif n == 105: \n        return 307\n    elif n == 106: \n        return 302\n    elif n == 107: \n        return 305\n    elif n == 108: \n        return 308\n    elif n == 109: \n        return 311\n    elif n == 110: \n        return 314\n    elif n == 111: \n        return 317\n    elif n == 112: \n        return 320\n    elif n == 113: \n        return 323\n    elif n == 114: \n        return 326\n    elif n == 115: \n        return 327\n    elif n == 116: \n        return 330\n    elif n == 117: \n        return 335\n    elif n == 118: \n        return 338\n    elif n == 119: \n        return 341\n    elif n == 120: \n        return 344\n    elif n == 121: \n        return 347\n    elif n == 122: \n        return 350\n    elif n == 123: \n        return 355\n    elif n == 124: \n        return 348\n    elif n == 125: \n        return 351\n    elif n == 126: \n        return 354\n    elif n == 127: \n        return 357\n    elif n == 128: \n        return 360\n    elif n == 129: \n        return 363\n    elif n == 130: \n        return 366\n    elif n == 131: \n        return 369\n    elif n == 132: \n        return 370\n    elif n == 133: \n        return 375\n    elif n == 134: \n        return 380\n    elif n == 135: \n        return 385\n    elif n == 136: \n        return 388\n    elif n == 137: \n        return 381\n    elif n == 138: \n        return 386\n    elif n == 139: \n        return 389\n    elif n == 140: \n        return 390\n    elif n == 141: \n        return 395\n    elif n == 142: \n        return 398\n    elif n == 143: \n        return 400\n    elif n == 144: \n        return 401\n    elif n == 145: \n        return 404\n    elif n == 146: \n        return 407\n    elif n == 147: \n        return 410\n    elif n == 148: \n        return 411\n    elif n == 149: \n        return 412\n    elif n == 150: \n        return 413\n    elif n == 151: \n        return 415\n    elif n == 152: \n        return 418\n    elif n == 153: \n        return 421"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    p = 1\n    a = n - 1\n    if a <= 0:\n        print('\\nThe nth tetrahedral number is:'+ str(n))\n        return\n    for i in range(p, n):\n        if p % 2 == 0:\n            a = (a ** 3 + a ** 2) % n\n            p = p ** 2\n        else:\n            a = (a ** 3 + a ** 2 + 1) % n\n            p = p ** 2\n    print('\\nThe nth tetrahedral number is:'+ str(n))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 5\n    elif n == 5: \n        return 6\n    elif n == 6: \n        return 7\n    elif n == 7: \n        return 8\n    elif n == 8: \n        return 9\n    elif n == 9: \n        return 10\n    else: \n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3) + tetrahedral_number(n - 4) + tetrahedral_number(n - 5) + tetrahedral_number(n - 6) + tetrahedral_number(n - 7) + tetrahedral_number(n - 8) + tetrahedral_number(n - 9)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    numbers = []\n    for i in range(1, n + 1):\n        a, b, c = a * b * c, a, b, c\n        numbers.append(a + b + c)\n    return numbers[n]\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 6.02*(r**3)\n    return c\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r * 3.1415926535897932384626 * 3.1415926535897932384626 * ((r*r*r))**(1/3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    v = 4 * (r ** 3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = 3.141592653589793238462643383279502884197169399375105820974944592\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    phi= math.pi/6\n    v = pi * r * r\n    return v * (2 * pi * (r**2))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4 * math.pi * (r ** 3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    import os\n    import os.path\n    import time\n    import sys\n    sys.path.append(os.path.join(os.path.dirname(__file__), '..'))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return pi * (r ** 3)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return int(str(strr)[0]) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_dict = {'0':'0', '1':'1', '2':'2', '3':'3', '4':'4', '5':'5', '6':'6', '7':'7', '8':'8', '9':'9', ':':':', '.':'.','':' '}\n    for char in strr:\n        try:\n            return char_dict[char]\n        except KeyError:\n            continue\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    \n    '''\n    find_Char = \"\"\n    for i in strr:\n        if ord(i) % 26 == ord(i):\n            find_Char += i\n    \n    return find_Char\n    '''\n    return get_Char(strr)\n    \ndef get_Keyword(strr):\n    '''\n    Write a python function to find the keyword made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    \n    '''\n    find_Keyword = \"\"\n    for i in strr:\n        if ord(i) % 26 == ord(i):\n            find_Keyword += i\n    \n    return find_Keyword\n    '''\n    return get_Keyword(strr)\n    \ndef print_list(a):\n    '''\n    Write a python function to print a given list of numbers, separated by commas.\n    '''\n    \n    \n    \n    return print_list_manually(a)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # if the string length is less than the minimum character, return the minimum.\n    if len(strr) < 1:\n        return '?'\n    # traverse from the end of the string.\n    for i in range(len(strr)-1,-1,-1):\n        # if the index of the char in the string is within the range of valid ASCII values\n        # then the character will be returned.\n        if ord(strr[i]) in range(65,91):\n            return strr[i]\n    return '?'\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = ''\n    for i in range(len(strr)):\n        char += str(ord(strr[i]))\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    string_int = 0\n    for char in strr:\n        string_int += ord(char)\n    return string_int % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    for i in strr:\n        count += ord(i)\n    return count % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Coded using list comprehension\n    return list(map(ord, strr)) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    alpha = {\n        'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25\n        }\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for i in range(len(strr)):\n        char_list.append(chr(ord(strr[i]) % 26 + 97))\n    return ''.join(char_list)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nth = (n // 3) * 3 + n % 3\n    return nth\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n % 10\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Write your code here\n    x = 0\n    while x < n: \n        x += 1 \n        yield x \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    while i <= n:\n        i = i * 10 + 7\n    return i\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    p = 0\n    c = 1\n    n = 0\n    m = 0\n    while n!= p:\n        p = m + c\n        m = n + c\n        c = 2 * p\n    return m\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==1: \n        return 1\n    elif n==2:\n        return 2\n    else: \n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    res = []\n    for i in range(1, n+1):\n        res.append(i)\n        res.append(i + n)\n        res.append(i - n)\n        res.append(i + (n-1))\n        res.append(i + n - 1)\n        res.append(i + (n-1) + 1)\n        res.append(i + n + 1)\n    return res[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return []\n    n1 = n - 1 \n    n2 = n - 2\n    n3 = n - 3 \n    n4 = n - 4 \n    n5 = n - 5 \n    n6 = n - 6 \n    n7 = n - 7 \n    n8 = n - 8 \n    n9 = n - 9 \n    n10 = n - 10 \n    n11 = n - 11 \n    n12 = n - 12 \n    n13 = n - 13 \n    n14 = n - 14 \n    n15 = n - 15 \n    n16 = n - 16 \n    n17 = n - 17 \n    n18 = n - 18 \n    n19 = n - 19 \n    n20 = n - 20 \n    n21 = n - 21 \n    n22 = n - 22 \n    n23 = n - 23 \n    n24 = n - 24 \n    n25 = n - 25 \n    n26 = n - 26 \n    n27 = n - 27 \n    n28 = n - 28 \n    n29 = n - 29 \n    n30 = n - 30 \n    n31 = n - 31 \n    n32 = n - 32 \n    n33 = n - 33 \n    n34 = n - 34 \n    n35 = n - 35 \n    n36 = n - 36 \n    n37 = n - 37 \n    n38 = n - 38 \n    n39 = n - 39 \n    n40 = n - 40 \n    n41 = n - 41 \n    n42 = n - 42 \n    n43 = n - 43 \n    n44 = n - 44 \n    n45 = n - 45 \n    n46 = n - 46 \n    n47 = n - 47 \n    n48 = n - 48 \n    n49 = n - 49 \n    n50 = n - 50 \n    n51 = n - 51 \n    n52 = n - 52 \n    n53 = n - 53 \n    n54 = n - 54 \n    n55 = n - 55 \n    n56 = n - 56 \n    n57 = n - 57 \n    n58 = n - 58 \n    n59 = n - 59 \n    n60 = n - 60 \n    n61 = n - 61 \n    n62 = n - 62 \n    n63 = n - 63 \n    n64 = n - 64 \n    n65 = n - 65 \n    n66 = n - 66 \n    n67 = n - 67 \n    n68 = n - 68 \n    n69 = n - 69 \n    n70 = n - 70 \n    n71 = n - 71 \n    n72 = n - 72 \n    n73 = n - 73 \n    n74 = n - 74 \n    n75 = n - 75 \n    n76 = n - 76 \n    n77 = n - 77 \n    n78 = n - 78 \n    n79 = n - 79 \n    n80 = n - 80 \n    n81 = n - 81 \n    n82 = n - 82 \n    n83 = n - 83 \n    n84 = n - 84 \n    n85 = n - 85 \n    n86 = n - 86 \n    n87 = n - 87 \n    n88 = n - 88 \n    n89 = n - 89 \n    n90 = n - 90 \n    n91 = n - 91 \n    n92 = n - 92 \n    n93 = n - 93 \n    n94 = n - 94 \n    n95 = n - 95 \n    n96 = n - 96 \n    n97 = n - 97 \n    n98 = n - 98 \n    n99 = n - 99 \n    n100 = n - 100 \n    n101 = n - 101 \n    n102 = n - 102 \n    n103 = n - 103 \n    n104 = n - 104 \n    n105 = n - 105 \n    n106 = n - 106 \n    n107 = n - 107 \n    n108 = n - 108 \n    n109 = n - 109 \n    n110 = n - 110 \n    n111 = n - 111 \n    n112 = n - 112 \n    n113 = n - 113 \n    n114 = n - 114 \n    n115 = n - 115 \n    n116 = n - 116 \n    n117 = n - 117 \n    n118 = n - 118 \n    n119 = n - 119 \n    n120 = n - 120 \n    n121 = n - 121 \n    n122 = n - 122 \n    n123 = n - 123 \n    n124 = n - 124 \n    n125 = n - 125 \n    n126 = n - 126 \n    n127 = n - 127 \n    n128 = n - 128 \n    n129 = n - 129 \n    n130 = n - 130 \n    n131 = n - 131 \n    n132 = n - 132 \n    n133 = n - 133 \n    n134 = n - 134 \n    n135 = n - 135 \n    n136 = n - 136 \n    n137 = n - 137 \n    n138 = n - 138 \n    n139 = n - 139 \n    n140 = n - 140 \n    n141 = n - 141 \n    n142 = n - 142 \n    n143 = n - 143 \n    n144 = n - 144 \n    n145 = n - 145 \n    n146 = n - 146 \n    n147 = n - 147 \n    n148 = n - 148 \n    n149 = n - 149 \n    n150 = n - 150 \n    n151 = n - 151 \n    n152 = n - 152 \n    n153 = n - 153 \n    n154 = n - 154 \n    n155 = n - 155 \n    n156 = n - 156 \n    n157 = n - 157 \n    n158 = n - 158 \n    n159 = n - 159 \n    n160 = n - 160 \n    n161 = n - 161 \n    n162 = n - 162 \n    n163 = n - 163 \n    n164 = n - 164 \n    n165 = n - 165 \n    n166 = n - 166 \n    n167 = n - 167 \n    n168 = n - 168 \n    n169 = n - 169 \n    n170 = n - 170 \n    n171 = n - 171 \n    n172 = n - 172 \n    n173 = n - 173 \n    n174 = n - 174 \n    n175 = n - 175 \n    n176 = n - 176 \n    n177 = n - 177 \n    n178 = n - 178 \n    n179 = n - 179 \n    n180 = n - 180 \n    n181 = n - 181 \n    n182 = n - 182 \n    n183 = n - 183 \n    n184 = n - 184 \n    n185 = n - 185 \n    n186 = n - 186 \n    n187 = n - 187 \n    n188 = n - 188 \n    n189 = n - 189 \n    n190 = n - 190 \n    n191 = n - 191 \n    n192 = n - 192 \n    n193 = n - 193 \n    n194 = n - 194 \n    n195 = n - 195 \n    n196 = n - 196 \n    n197 = n - 197 \n    n198 = n - 198 \n    n199 = n - 199 \n    n200 = n - 200 \n    n201 = n - 201 \n    n202 = n - 202 \n    n203 = n - 203 \n    n204 = n - 204 \n    n205 = n - 205 \n    n206 = n - 206 \n    n207 = n - 207 \n    n208 = n - 208 \n    n209 = n - 209 \n    n210 = n - 210 \n    n211 = n - 211 \n    n212 = n - 212 \n    n213 = n - 213 \n    n214 = n - 214 \n    n215 = n - 215 \n    n216 = n - 216 \n    n217 = n - 217 \n    n218 = n - 218 \n    n219 = n - 219 \n    n220 = n - 220 \n    n221 = n - 221 \n    n222 = n - 222 \n    n223 = "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for x in range(n+1): \n        print(n-x, end=\" \")\n    print(n)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/2) * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = math.pi * (r ** 2)\n    return round(a, 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r > 0:\n        return 3.14 * r * r\n    else:\n        return 0.0\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r > 0:\n        return (4/3) * math.pi * (r**3)\n    else:\n        return 0.0\ndef surface_area_pascal(r):\n    '''\n    Write a function that returns the surface area of a Pascal triangle.\n    The triangle is a rectangle.\n    '''\n    if r > 0:\n        return (3/6) * (r**2)\n    else:\n        return 0.0\ndef surface_area_inverse_pascal(r):\n    '''\n    Write a function that returns the surface area of a Pascal triangle.\n    The triangle is a rectangle.\n    '''\n    if r > 0:\n        return (4/3) * (r**3)\n    else:\n        return 0.0\ndef surface_area_perimeter(r):\n    '''\n    Write a function that returns the surface area of a rectangle.\n    The rectangle is a square.\n    '''\n    if r > 0:\n        return (r**2) * (math.pi)\n    else:\n        return 0.0\ndef surface_area_circle(r):\n    '''\n    Write a function that returns the surface area of a circle.\n    '''\n    if r > 0:\n        return (3/2) * (math.pi * r**2)\n    else:\n        return 0.0\ndef surface_area_rectangle(a, b, c):\n    '''\n    Write a function that returns the surface area of a rectangle.\n    '''\n    if a > 0 and b > 0 and c > 0:\n        return (a*b)*c\n    else:\n        return 0.0\ndef surface_area_triangle(a, b, c):\n    '''\n    Write a function that returns the surface area of a triangle.\n    '''\n    if a > 0 and b > 0 and c > 0:\n        return (a*b*c) / 3\n    else:\n        return 0.0\ndef area_of_circle(r):\n    '''\n    Write a function that returns the area of a circle.\n    '''\n    if r > 0:\n        return (3.14 * r) * (r**2)\n    else:\n        return 0.0\ndef area_of_rectangle(a, b):\n    '''\n    Write a function that returns the area of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef area_of_rectangle(a, b):\n    '''\n    Write a function that returns the area of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef area_of_circle(r):\n    '''\n    Write a function that returns the area of a circle.\n    '''\n    if r > 0:\n        return math.pi * r ** 2\n    else:\n        return 0.0\ndef area_of_circle(r):\n    '''\n    Write a function that returns the area of a circle.\n    '''\n    if r > 0:\n        return math.pi * (r ** 2)\n    else:\n        return 0.0\ndef area_of_rectangle(a, b):\n    '''\n    Write a function that returns the area of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef area_of_rectangle(a, b):\n    '''\n    Write a function that returns the area of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef volume_of_cylinder(r, h):\n    '''\n    Write a function that returns the volume of a cylinder.\n    '''\n    if r > 0 and h > 0:\n        return (3.14 * h) * (r**3)\n    else:\n        return 0.0\ndef volume_of_cylinder(r, h):\n    '''\n    Write a function that returns the volume of a cylinder.\n    '''\n    if r > 0 and h > 0:\n        return (3.14 * h) * (r**3)\n    else:\n        return 0.0\ndef volume_of_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    if r > 0:\n        return 3.14 * (r ** 3)\n    else:\n        return 0.0\ndef volume_of_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    if r > 0:\n        return 3.14 * (r ** 3)\n    else:\n        return 0.0\ndef volume_of_rectangle(a, b):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef volume_of_rectangle(a, b):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef volume_of_circle(r):\n    '''\n    Write a function that returns the volume of a circle.\n    '''\n    if r > 0:\n        return (math.pi * r ** 2)\n    else:\n        return 0.0\ndef volume_of_circle(r):\n    '''\n    Write a function that returns the volume of a circle.\n    '''\n    if r > 0:\n        return math.pi * (r ** 3)\n    else:\n        return 0.0\ndef volume_of_ellipse(a, b, c):\n    '''\n    Write a function that returns the volume of an ellipse.\n    '''\n    if a > 0 and b > 0 and c > 0:\n        return (math.pi * (a ** 2)) * (b ** 2) * (c ** 2)\n    else:\n        return 0.0\ndef volume_of_ellipse(a, b, c):\n    '''\n    Write a function that returns the volume of an ellipse.\n    '''\n    if a > 0 and b > 0 and c > 0:\n        return (math.pi * (a ** 2)) * (b ** 2) * (c ** 2)\n    else:\n        return 0.0\ndef volume_of_rectangle(a, b):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef volume_of_rectangle(a, b):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef volume_of_circle(r):\n    '''\n    Write a function that returns the volume of a circle.\n    '''\n    if r > 0:\n        return math.pi * r ** 2\n    else:\n        return 0.0\ndef volume_of_circle(r):\n    '''\n    Write a function that returns the volume of a circle.\n    '''\n    if r > 0:\n        return math.pi * (r ** 3)\n    else:\n        return 0.0\ndef volume_of_rectangle(a, b):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a * b) / 2\n    else:\n        return 0.0\ndef volume_of_rectangle(a, b):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    if a > 0 and "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 0.5*r*r*math.pi\n    \ndef sphere_volume(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r * r\n    \ndef sphere_perimeter(r):\n    '''\n    Write a function that finds the perimeter of a sphere.\n    '''\n    return 2 * math.pi * r\n    \ndef sphere_circumference(r):\n    '''\n    Write a function that finds the circumference of a sphere.\n    '''\n    return 2 * math.pi * r\n    \ndef sphere_surface_difference(r1, r2):\n    '''\n    Write a function that calculates the surface difference of two spheres.\n    '''\n    return surfacearea_sphere(r1) - surfacearea_sphere(r2)\n    \ndef sphere_distance(r1, r2):\n    '''\n    Write a function that finds the distance between two spheres.\n    '''\n    return sphere_perimeter(r1) - sphere_perimeter(r2)\n    \ndef sphere_semiperimeter(r1, r2):\n    '''\n    Write a function that finds the semiperimeter of two spheres.\n    '''\n    return 2 * math.pi * r1 + 2 * math.pi * r2\n    \ndef sphere_average_radius(r1, r2):\n    '''\n    Write a function that finds the average radius of two spheres.\n    '''\n    return (r1 + r2) / 2\n    \ndef sphere_sector(r):\n    '''\n    Write a function that finds the sector of a sphere.\n    '''\n    return (3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679) / (4*r*math.pi)\n    \ndef sphere_volume_mean_radius(r, r_mean):\n    '''\n    Write a function that finds the volume of a sphere with the mean radius.\n    '''\n    return (4/3) * math.pi * r * r_mean * (4/3) * r\n    \ndef sphere_volume_mean_radius_of_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the mean radius.\n    '''\n    return (4/3) * math.pi * (r ** 3)\n    \ndef sphere_volume_mean_radius_of_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the mean radius.\n    '''\n    return (4/3) * math.pi * ((r ** 3) + (r ** 3) * (r ** 3))\n    \ndef sphere_volume_of_sphere(r, r_mean):\n    '''\n    Write a function that finds the volume of a sphere with the mean radius and the radius of the sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3) * r_mean\n    \ndef sphere_volume_of_sphere_sphere(r, r_mean):\n    '''\n    Write a function that finds the volume of a sphere with the mean radius and the radius of the sphere.\n    '''\n    return (4/3) * math.pi * ((r ** 3) + (r ** 3) * (r ** 3))\n    \ndef sphere_volume_of_sphere_sphere(r, r_mean):\n    '''\n    Write a function that finds the volume of a sphere with the mean radius and the radius of the sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3) * ((r ** 3) + (r ** 3) * (r ** 3))\n    \ndef sphere_volume_of_circle(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given circle.\n    '''\n    return (4/3) * math.pi * r ** 3\n    \ndef sphere_volume_of_circle_circle(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given circle.\n    '''\n    return 4/3 * math.pi * r ** 3\n    \ndef sphere_volume_of_circle_circle_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given circle.\n    '''\n    return (4/3) * math.pi * (r ** 3) ** 2\n    \ndef sphere_volume_of_circle_sphere_circle(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given circle.\n    '''\n    return (4/3) * math.pi * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_circle_sphere_circle_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given circle.\n    '''\n    return (4/3) * math.pi * (r ** 3) * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n    \ndef sphere_volume_of_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3)\n    \ndef sphere_volume_of_sphere_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_sphere_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3) * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_sphere_sphere_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_sphere_sphere_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_sphere_sphere_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_sphere_sphere_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_sphere_sphere_sphere_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere with the radius equal to the given sphere.\n    '''\n    return 4/3 * math.pi * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3) * (r ** 3)\n    \ndef sphere_volume_of_sphere_sphere_sphere_sphere(r)"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 / 3 * math.pi * r **3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = (4 * pi) * (r ** 3)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s=6*r*r\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r*r)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # width, height of the screen\n    print(n, 'HEXAGONAL NUMBER')\n    # find the number of rows and columns\n    # the number of hexagonal numbers = n/6\n    # to get the index of nth hexagonal number, we find the number of rows and columns\n    # to get the center position, we need the nummber of rows, columns and number of hexagonal numbers\n    # the center position is the number of rows divided by 6\n    # for example if we have n = 6, we get the number of rows = 2\n    # if we have n = 10, we get the number of rows = 2\n    # if we have n = 18, we get the number of rows = 5\n    # if we have n = 20, we get the number of rows = 4\n    # if we have n = 36, we get the number of rows = 4\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*n + n*n*n - (n*n + 2*n + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return((n**3)//4)*(2*n+1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def __init__(self, n):\n        '''\n        Initialize a new Square object.\n        '''\n        self.n = n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if(n<=0):\n        return None\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (n + 1) // 2\n    \nprint(centered_hexagonal_number(0))\nprint(centered_hexagonal_number(1))\nprint(centered_hexagonal_number(2))\nprint(centered_hexagonal_number(3))\nprint(centered_hexagonal_number(4))\nprint(centered_hexagonal_number(5))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = None\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = n % 12\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n + 1) / 2) + 1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    dict3 = dict3.copy()\n    dict1.update(dict2)\n    dict1.update(dict3)\n    dict2.update(dict3)\n    return dict1\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    dict3 = dict1.copy()\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\ndef main():\n    print(\"--------------------------------------------------\")\n    print(\"How to merge two dictionaries? :\")\n    print(\"--------------------------------------------------\")\n    print()\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_keys = dict1.keys()\n    dict2_keys = dict2.keys()\n    dict3_keys = dict3.keys()\n    d1 = dict1.values()\n    d2 = dict2.values()\n    d3 = dict3.values()\n    i = 0\n    while i < len(dict1_keys):\n        d1[dict1_keys[i]] = dict1[dict1_keys[i]]\n        i += 1\n    i = 0\n    while i < len(dict2_keys):\n        d2[dict2_keys[i]] = dict2[dict2_keys[i]]\n        i += 1\n    i = 0\n    while i < len(dict3_keys):\n        d3[dict3_keys[i]] = dict3[dict3_keys[i]]\n        i += 1\n    return ct.OrderedDict(sorted(d1.items()+d2.items()+d3.items(), key=lambda item: item[0]))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3}\n    \n    return merged\ndef merge_dictionaries_five(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4}\n    \n    return merged\ndef merge_dictionaries_six(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5}\n    \n    return merged\ndef merge_dictionaries_seven(dict1,dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6}\n    \n    return merged\ndef merge_dictionaries_eight(dict1,dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7}\n    \n    return merged\ndef merge_dictionaries_nine(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8}\n    \n    return merged\ndef merge_dictionaries_ten(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9}\n    \n    return merged\ndef merge_dictionaries_eleven(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10}\n    \n    return merged\ndef merge_dictionaries_twelve(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11}\n    \n    return merged\ndef merge_dictionaries_thirteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12}\n    \n    return merged\ndef merge_dictionaries_fourteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13):\n    '''\n    Write a function to merge fourteen dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13}\n    \n    return merged\ndef merge_dictionaries_fifteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14):\n    '''\n    Write a function to merge fifteen dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14}\n    \n    return merged\ndef merge_dictionaries_sixteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15):\n    '''\n    Write a function to merge sixteen dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15}\n    \n    return merged\ndef merge_dictionaries_seventeen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16):\n    '''\n    Write a function to merge seventeen dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16}\n    \n    return merged\ndef merge_dictionaries_sixteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16, dict17):\n    '''\n    Write a function to merge seventeen dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17}\n    \n    return merged\ndef merge_dictionaries_twentyeight(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16, dict17, dict18):\n    '''\n    Write a function to merge twenty eight dictionaries into a single dictionary.\n    '''\n    \n    # merge key/value into a single dictionary\n    merged = {**dict1"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for k in dict1.keys():\n        if k in dict2.keys():\n            result.update({k:dict1[k]})\n            result.update({k:dict2[k]})\n        else:\n            result.update({k:dict1[k]})\n    for k in dict2.keys():\n        if k not in dict1.keys():\n            result.update({k:dict2[k]})\n    for k in dict3.keys():\n        result.update({k:dict3[k]})\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    '''\n    This function takes two dictionaries and return a single dictionary containing values that are in both dictionaries.\n    '''\n    '''\n    dict1.update(dict2)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for key in dict1.keys():\n        merged.setdefault(key, dict1[key])\n    for key in dict2.keys():\n        merged.setdefault(key, dict2[key])\n    for key in dict3.keys():\n        merged.setdefault(key, dict3[key])\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Declare a dictionary to count the number of occurances of each element in the list\n    dictionary = collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = collections.Counter(list1)\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #create a dictionary to store the frequency of each element\n    dictionary = collections.Counter(list1)\n    \n    #return the dictionary\n    return dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    '''\n    list = [1,1,2,3,5,7,9,6,8,4]\n    dict = collections.Counter(list)\n    print(dict)\n    '''\n    return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dictionary = collections.Counter(list1)\n    return count_dictionary\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Initialize counter\n    counter = collections.Counter(list1)\n    # Return the dictionary\n    return counter\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if list1 == []:\n        return {}\n    else:\n        return collections.Counter(list1).most_common()\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return {element: list1.count(element) for element in list1}\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    minimum = N\n    for i in range(1, N+1):\n        if N > i:\n            return N - i\n        if N - i < minimum:\n            minimum = N - i\n    return minimum\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n=N\n    while(n>0):\n        if(n%2==0):\n            break\n        n=n//2\n    if(n==1):\n        return N\n    if(n==2):\n        return N*2\n    if(n%2==0):\n        return (N//2)+(N%2)\n    return n\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    list_of_numbers = [num for num in range(1, N + 1)]\n    return min(list_of_numbers)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1: return N\n    if N == 2: return 1\n    if N == 3: return 2\n    if N == 4: return 3\n    if N == 5: return 4\n    if N == 6: return 5\n    if N == 7: return 6\n    if N == 8: return 7\n    if N == 9: return 8\n    if N == 10: return 9\n    if N == 11: return 10\n    if N == 12: return 11\n    if N == 13: return 12\n    if N == 14: return 13\n    if N == 15: return 14\n    if N == 16: return 15\n    if N == 17: return 16\n    if N == 18: return 17\n    if N == 19: return 18\n    if N == 20: return 19\n    if N == 21: return 20\n    if N == 22: return 21\n    if N == 23: return 22\n    if N == 24: return 23\n    if N == 25: return 24\n    if N == 26: return 25\n    if N == 27: return 26\n    if N == 28: return 27\n    if N == 29: return 28\n    if N == 30: return 29\n    if N == 31: return 30\n    if N == 32: return 31\n    if N == 33: return 32\n    if N == 34: return 33\n    if N == 35: return 34\n    if N == 36: return 35\n    if N == 37: return 36\n    if N == 38: return 37\n    if N == 39: return 38\n    if N == 40: return 39\n    if N == 41: return 40\n    if N == 42: return 41\n    if N == 43: return 42\n    if N == 44: return 43\n    if N == 45: return 44\n    if N == 46: return 45\n    if N == 47: return 46\n    if N == 48: return 47\n    if N == 49: return 48\n    if N == 50: return 49\n    if N == 51: return 50\n    if N == 52: return 51\n    if N == 53: return 52\n    if N == 54: return 53\n    if N == 55: return 54\n    if N == 56: return 55\n    if N == 57: return 56\n    if N == 58: return 57\n    if N == 59: return 58\n    if N == 60: return 59\n    if N == 61: return 60\n    if N == 62: return 61\n    if N == 63: return 62\n    if N == 64: return 63\n    if N == 65: return 64\n    if N == 66: return 65\n    if N == 67: return 66\n    if N == 68: return 67\n    if N == 69: return 68\n    if N == 70: return 69\n    if N == 71: return 70\n    if N == 72: return 71\n    if N == 73: return 72\n    if N == 74: return 73\n    if N == 75: return 74\n    if N == 76: return 75\n    if N == 77: return 76\n    if N == 78: return 77\n    if N == 79: return 78\n    if N == 80: return 79\n    if N == 81: return 80\n    if N == 82: return 81\n    if N == 83: return 82\n    if N == 84: return 83\n    if N == 85: return 84\n    if N == 86: return 85\n    if N == 87: return 86\n    if N == 88: return 87\n    if N == 89: return 88\n    if N == 90: return 89\n    if N == 91: return 90\n    if N == 92: return 91\n    if N == 93: return 92\n    if N == 94: return 93\n    if N == 95: return 94\n    if N == 96: return 95\n    if N == 97: return 96\n    if N == 98: return 97\n    if N == 99: return 98\n    if N == 100: return 99\n    if N == 101: return 100\n    if N == 102: return 101\n    if N == 103: return 102\n    if N == 104: return 103\n    if N == 105: return 104\n    if N == 106: return 105\n    if N == 107: return 106\n    if N == 108: return 107\n    if N == 109: return 108\n    if N == 110: return 109\n    if N == 111: return 110\n    if N == 112: return 111\n    if N == 113: return 112\n    if N == 114: return 113\n    if N == 115: return 114\n    if N == 116: return 115\n    if N == 117: return 116\n    if N == 118: return 117\n    if N == 119: return 118\n    if N == 120: return 119\n    if N == 121: return 120\n    if N == 122: return 121\n    if N == 123: return 122\n    if N == 124: return 123\n    if N == 125: return 124\n    if N == 126: return 125\n    if N == 127: return 126\n    if N == 128: return 127\n    if N == 129: return 128\n    if N == 130: return 129\n    if N == 131: return 130\n    if N == 132: return 131\n    if N == 133: return 132\n    if N == 134: return 133\n    if N == 135: return 134\n    if N == 136: return 135\n    if N == 137: return 136\n    if N == 138: return 137\n    if N == 139: return 138\n    if N == 140: return 139\n    if N == 141: return 140\n    if N == 142: return 141\n    if N == 143: return 142\n    if N == 144: return 143\n    if N == 145: return 144\n    if N == 146: return 145\n    if N == 147: return 146\n    if N == 148: return 147\n    if N == 149: return 148\n    if N == 150: return 149\n    if N == 151: return 150\n    if N == 152: return 151\n    if N == 153: return 152\n    if N == 154: return 153\n    if N == 155: return 154\n    if N == 156: return 155\n    if N == 157: return 156\n    if N == 158: return 157\n    if N == 159: return 158\n    if N == 160: return 159\n    if N == 161: return 160\n    if N == 162: return 161\n    if N == 163: return 162\n    if N == 164: return 163\n    if N == 165: return 164\n    if N == 166: return 165\n    if N == 167: return 166\n    if N == 168: return 167\n    if N == 169: return 168\n    if N == 170: return 169\n    if N == 171: return 170\n    if N == 172: return 171\n    if N == 173: return 172\n    if N == 174: return 173\n    if N == 175: return 174\n    if N == 176: return 175\n    if N == 177: return 176\n    if N == 178: return 177\n    if N == 179: return 178\n    if N == 180: return 179\n    if N == 181: return 180\n    if N == 182: return 181\n    if N == 183: return 182\n    if N == 184: return 183\n    if N == 185: return 184\n    if N == 186: return 185\n    if N == 187: return 186\n    if N == 188: return 187\n    if N == 189: return 188\n    if N == 190: return 189\n    if N == 191: return 190\n    if N == 192: return 191\n    if N == 193: return 192\n    if N == 194: return 193\n    if N == 195: return 194\n    if N == 196: return 195\n    if N == 197: return 196\n    if N == 198: return 197\n    if N == 199: return 198\n    if N == 200: return 199\n    if N == 201: return 200\n    if N == 202: return 201\n    if N == 203: return 202\n    if N == 204: return 203\n    if N == 205: return 204\n    if N == 206: return 205\n    if N == 207: return 206\n    if N == 208: return 207\n    if N == 209: return 208\n    if N == 210: return 209\n    if N == 211: return 210\n    if N == 212: return 211\n    if N == 213: return 212\n    if N == 214: return 213\n    if N == 215: return 214\n    if N == 216: return 215\n    if N == 217: return 216\n    if N == 218: return 217\n    if N == 219: return 218\n    if N == 220: return 219\n    if N == 221: return 220\n    if N == 222: return 221\n    if N == 223: return 222\n    if N == 224: return 223\n    i"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_val = 100000\n    closest_number = 0\n    for i in range(N):\n        if i < min_val:\n            min_val = i\n    for i in range(N):\n        if i < min_val:\n            min_val = i\n    return min_val\n    \nprint(closest_num(100000)"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i+j == N:\n                closest_num = i\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_closest(n):\n        return abs(n-N) < abs(N-n)\n    closest = N\n    for i in range(2, N+1):\n        if is_closest(i):\n            closest = i\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 10**9:\n        return N\n    if N % 1 > 0:\n        return closest_num(N%1)\n    return N//1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for num in nums:\n        if num > N:\n            return num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # First find the number of smaller numbers\n    smallest_nums = []\n    for i in range(1, N):\n        if N % i == 0:\n            smallest_nums.append(i)\n    if smallest_nums == []:\n        smallest_nums.append(N)\n    # then find the closest number that is smaller than the last smallest number\n    closest_num = smallest_nums[-1]\n    for i in smallest_nums:\n        if N % i == 0:\n            closest_num = N // i\n            break\n    return closest_num\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # the length of the longest word is the number of words in the longest word\n    # list1 = ['apple','orange','pear','banana','apple','lemon','grape','banana']\n    # return len(max(list1,key=len))\n    return max([len(word) for word in list1 if len(word) > 1])\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    \n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] == list1[j]:\n                if max_length < len(list1[i]):\n                    max_length = len(list1[i])\n                return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(len(list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    s =''.join(list1)\n    return len(s.split())\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list_length = []\n    \n    for i in list1:\n        list_length.append(len(i))\n    \n    print('The length of the longest word is', max(list_length))\n    \n    return max(list_length)\n    \ndef new_char(list1, s):\n    '''\n    Write a python function to replace the first character of a word with a new character.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic2(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic3(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic4(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic5(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic6(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic7(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic8(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic9(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic10(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic11(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic12(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic13(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic14(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic15(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic16(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic17(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic18(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic19(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new_dic20(list1, s):\n    '''\n    Write a python function to find the index of the first character of a word.\n    '''\n    list_new = []\n    \n    for i in range(len(s)):\n        list_new.append(list1[i])\n        \n    print(list_new)\n    \n    return list_new\n    \ndef new"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = [word.strip() for word in list1]\n    max_word = \"\"\n    for word in words:\n        if len(word) > len(max_word):\n            max_word = word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    word = \"\"\n    for element in list1:\n        if len(element) > max:\n            word = element\n            max = len(element)\n        elif len(element) == max:\n            word = element\n    return word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(list1, key=len)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    if len(list1) == 0:\n        return longest_word\n    else:\n        for word in list1:\n            if len(word) > len(longest_word):\n                longest_word = word\n        return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for i in range(len(list1)):\n        if len(list1[i]) > len(longest_word):\n            longest_word = list1[i]\n    return longest_word\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #TODO: Replace \"pass\" with your code\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # 1. Create a dictionary with values as keys and as index as value\n    dict = {i: i for i, v in enumerate(str1)}\n    # 2. initialize an empty list\n    result = []\n    # 3. Iterate over string\n    for index, char in enumerate(str1):\n        # 4. if the char is in dict\n        if char in dict:\n            # 5. get index of key\n            result.append(dict[char])\n            # 6. if index is greater than or equal to the length of the string\n            if index >= len(sub_str):\n                # 7. add index to the result\n                result.append(index)\n        # 8. if char is not in dict\n        else:\n            # 9. return result if string is present\n            return result\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # for loop for finding each occurence of substring in a string\n    for i in range(len(sub_str)):\n        # if substring is in the string\n        if sub_str[i:i+len(str1)] in str1:\n            # return true if string is present in string\n            return True\n    # if no string is present return false\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return len(str1.find(sub_str)) > 0\n    \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1), len(sub_str)):\n        if (str1[i:i + len(sub_str)] == sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # iterate through string\n    for i in range(0, len(str1) - len(sub_str)+1):\n        # if string is present\n        if str1[i:i+len(sub_str)] == sub_str:\n            # return boolean\n            return True\n    # return false\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str == \"\":\n        return \"Empty\"\n    if len(sub_str) == 0:\n        return \"Empty\"\n    if len(sub_str) > len(str1):\n        return \"String is too long\"\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return \"Substring found\"\n    return \"No substring\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # s = set(sub_str) # removing duplicates and making a new set\n    # result = []\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i = 0\n    j = 0\n    for i in range(n):\n        for j in range(n):\n            if(n % i == 0):\n                if(n % j == 0):\n                    return True\n                else:\n                    continue\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 10 == 5:\n        return True\n    elif n % 10 == 6:\n        return False\n    elif n % 10 == 7:\n        return False\n    elif n % 10 == 8:\n        return False\n    elif n % 10 == 9:\n        return False\n    elif n % 10 == 0:\n        return False\n    elif n % 10 == 0:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n<0: \n        return 0\n    elif n>0:\n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    else: \n        return not is_undulating(n//2) and not is_undulating(n//3)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True \n    elif n % 2 == 0: \n        return is_undulating(n//2) \n    else: \n        return is_undulating(3*n+1) \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2!= 0: \n        return False\n    if n == 1: \n        return True\n    if n == 3: \n        return False\n    if n == 5: \n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = abs(n) \n    if n < 0: \n        n = -n \n    if n < 1: \n        return False\n    while n > 0: \n        if n % 10 == 0: \n            return True\n        n = n / 10\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_paddle(n):\n        '''\n        Return True if the given number is a paddle (a number that is 1 or 2).\n        '''\n        return n == 0 or n == 2\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    return 1 if n % 2 == 1 else 0 \n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a * power(b,a-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if a == 0:\n        return 0\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n        \ndef mod_pow(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a%b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    min_val = test_list[0][1]\n    for (index, element) in enumerate(test_list):\n        if element[1] < min_val:\n            min_val = element[1]\n            index_index = index\n    return test_list[index_index][0]\n            \ntest_list = [(3, 5), (6, 10), (5, 4)]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def first_value(tup):\n        return tup[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # return sorted(test_list,key=lambda x: (x[1],x[0]))[0][0]\n    return sorted(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i]!= ():\n            if test_list[i][1] < test_list[i][0]:\n                return test_list[i][0]\n    return 0\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second greatest value.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i]!= ():\n            if test_list[i][1] > test_list[i][0]:\n                return test_list[i][0]\n    return 0\ndef index_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average value of the tuple.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total = total + test_list[i][1]\n    return total/len(test_list)\ndef index_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the value that is the median of the tuple.\n    '''\n    length = len(test_list)\n    if length % 2 == 0:\n        index_1 = index_minimum(test_list)\n        index_2 = index_maximum(test_list)\n    else:\n        index_1 = index_maximum(test_list)\n        index_2 = index_minimum(test_list)\n    median = (index_1 + index_2)/2\n    return median\ndef calc_z_score(mean, standard_deviation):\n    z_score = (mean - mean*(standard_deviation/2))/standard_deviation\n    return z_score\ndef calc_corr_coefficient(z_score, z_score_2):\n    correlation_coefficient = (z_score - z_score_2)/(z_score_2)\n    return correlation_coefficient\ndef calc_pearson_correlation(test_list):\n    '''\n    Given a list of tuples, write a function that returns the Pearson correlation coefficient between all the values in the list.\n    '''\n    test_list.sort(key=itemgetter(0))\n    p_corr_coefficient = 1 - (calc_corr_coefficient(calc_z_score(index_average(test_list), calc_z_score(calc_z_score(index_average(test_list)))), calc_z_score(index_average(test_list))))\n    return p_corr_coefficient\ndef calc_spherical_correlation(test_list):\n    '''\n    Given a list of tuples, write a function that returns the correlation coefficient between all the values in the list.\n    '''\n    test_list.sort(key=itemgetter(0))\n    p_corr_coefficient = 1 - (calc_corr_coefficient(calc_z_score(index_average(test_list)), calc_z_score(calc_z_score(index_average(test_list)))))*(1-(calc_corr_coefficient(calc_z_score(index_average(test_list)), calc_z_score(calc_z_score(index_average(test_list)))))/(1-calc_corr_coefficient(calc_z_score(index_average(test_list)), calc_z_score(index_average(test_list)))))/(1-calc_corr_coefficient(calc_z_score(index_average(test_list)), calc_z_score(index_average(test_list))))\n    return p_corr_coefficient\ndef find_correlation_coefficient(test_list):\n    '''\n    Given a list of tuples, write a function that returns the correlation coefficient between all the values in the list.\n    '''\n    test_list.sort(key=itemgetter(0))\n    p_corr_coefficient = 1 - (calc_corr_coefficient(calc_z_score(index_average(test_list)), calc_z_score(index_average(test_list))))\n    return p_corr_coefficient\ndef calc_simple_pearson_correlation(test_list):\n    '''\n    Given a list of tuples, write a function that returns the Pearson correlation coefficient between all the values in the list.\n    '''\n    test_list.sort(key=itemgetter(0))\n    p_corr_coefficient = (calc_corr_coefficient(calc_z_score(index_average(test_list)), calc_z_score(index_average(test_list))))\n    return p_corr_coefficient\ndef calc_standard_deviation(test_list):\n    '''\n    Given a list of tuples, write a function that returns the standard deviation of all the values in the list.\n    '''\n    test_list.sort(key=itemgetter(0))\n    standard_deviation = (calc_z_score(index_average(test_list)))**(1/2)\n    return standard_deviation\ndef calc_p_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the p value of the list.\n    '''\n    p_value = 1 - (calc_pearson_correlation(test_list))\n    return p_value\ndef calc_fisher_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the fisher value of the list.\n    '''\n    fisher_value = (calc_pearson_correlation(test_list))/(calc_z_score(calc_z_score(test_list))**2)\n    return fisher_value\ndef calc_t_statistic(test_list):\n    '''\n    Given a list of tuples, write a function that returns the t statistic of the list.\n    '''\n    t_statistic = (calc_z_score(calc_z_score(test_list))) / (calc_z_score(calc_z_score(test_list))**2)\n    return t_statistic\ndef calc_expected_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the expected value of the list.\n    '''\n    expected_value = (calc_z_score(calc_z_score(test_list)))\n    return expected_value\ndef calc_mean(test_list):\n    '''\n    Given a list of tuples, write a function that returns the mean of all the values in the list.\n    '''\n    mean = (calc_z_score(calc_z_score(test_list)))\n    return mean\ndef calc_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all the values in the list.\n    '''\n    median = (calc_z_score(calc_z_score(test_list)))\n    return median\ndef calc_z_score_with_percentage(test_list):\n    '''\n    Given a list of tuples, write a function that returns the z-score with a percentage value of all the values in the list.\n    '''\n    percentage_list = [x/100 for x in range(len(test_list))]\n    z_score_with_percentage = (calc_z_score(calc_z_score(test_list), percentage_list))\n    return z_score_with_percentage\ndef calc_median_with_percentage(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median with a percentage value of all the values in the list.\n    '''\n    percentage_list = [x/100 for x in range(len(test_list))]\n    median_with_percentage = (calc_z_score(calc_z_score(test_list), percentage_list))\n    return median_with_percentage\ndef calc_p_value_with_percentage(test_list):\n    '''\n    Given a list of tuples, write a function that returns the p value with a percentag"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # YOUR CODE HERE\n    return (test_list[0][1],test_list[0][0])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    return min(test_list,key=lambda x:x[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for index, tup in enumerate(test_list):\n        if tup[1] < tup[0]:\n            return tup[0]\n        if index == len(test_list)-1:\n            return tup[0]\n    return 0\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # initialize the minimum as the smallest value\n    minimum = test_list[0][1]\n    # initialize the minimum as the smallest value \n    for i in range(len(test_list)):\n        if minimum > test_list[i][1]:\n            minimum = test_list[i][1]\n            index = i\n    return index\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Simple if/else\n    if len(lst) == 0:\n        return 0\n    else:\n        return min([len(lst[0]), len(lst[1])])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_length = len(lst)\n    if lst_length == 0:\n        return 0\n    elif lst_length == 1:\n        return lst[0]\n    elif lst_length == 2:\n        if lst[0] > lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    else:\n        smallest = lst[0]\n        for i in range(1, lst_length):\n            if lst[i] < smallest:\n                smallest = lst[i]\n        return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][j] < lst[i][min_len]:\n                min_len = j\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    def min_length(lst):\n        i = 0\n        min_length = float(\"inf\")\n        while (i < len(lst)):\n            j = i\n            while (j < len(lst)):\n                if (lst[i] < lst[j]):\n                    j += 1\n                else:\n                    break\n            i += 1\n            min_length = min(min_length, j - i)\n        return min_length\n    lst = []\n    min_length = min_length(lst)\n    if (min_length == float(\"inf\")):\n        return 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if (lst[i] == lst[j]):\n                break\n        lst.append(lst[j] + 1)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_list = lst[0]\n    for i in range(0, len(lst)):\n        if len(smallest_list) <= len(lst[i]):\n            smallest_list = lst[i]\n    return len(smallest_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst)\n    \n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][j] < lst[i][j + 1]:\n                lst[i][j + 1] = lst[i][j]\n                min_length = i\n                #print(lst)\n            \n            if len(lst[i][j + 1:]) < len(lst[i][j]):\n                lst[i][j + 1:] = lst[i][j + 1:][::-1]\n                min_length = i + 1\n            \n            if len(lst[i][j:]) < len(lst[i][j + 1:]):\n                lst[i][j:][::-1] = lst[i][j:][::-1][:len(lst[i][j:])]\n                min_length = i + 1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0][0]\n    length = 1\n    for i in range(1, len(lst)):\n        if lst[i][0] < min:\n            min = lst[i][0]\n            length = i\n    print(\"The length of the smallest list is\", length)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < len(lst_min):\n            lst_min = lst[i]\n    return lst_min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        print(\"You can't find any length\")\n    else:\n        return len(lst)\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        print(\"You can't find any length\")\n    else:\n        return len(lst)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n//2 + 1 + divisor(n//2)\n    "
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        if n%2!= 0:\n            return divisor(n-1) + 1\n        else:\n            return divisor(n/2) + 1\n        \ndef prime_divisor(n):\n    '''\n    Write a python function to find the number of prime divisors of a given integer.\n    '''\n    divisors = []\n    if n == 1:\n        return 1\n    else:\n        for i in range(1, n+1):\n            if n%i == 0:\n                divisors.append(i)\n        return len(divisors)\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for x in range(1,n):\n        if n%x == 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n//2 + (n//2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1, n+1):\n        if n%i==0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for d in range(1, n + 1):\n        if n % d == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for d in range(1,n):\n        if n % d == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n // i)\n    return divisors\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for l in list1:\n        for elem in l:\n            if elem in freq:\n                freq[elem]+=1\n            else:\n                freq[elem] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in list1:\n        for j in i:\n            if j in dictionary:\n                dictionary[j] += 1\n            else:\n                dictionary[j] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = dict()\n    for lst in list1:\n        for x in lst:\n            if x in dictionary:\n                dictionary[x]+=1\n            else:\n                dictionary[x]=1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for element in list1:\n        if element not in frequency_dictionary:\n            frequency_dictionary[element] = 0\n        frequency_dictionary[element] += 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    dict1 = dict()\n    for i in list1:\n        for j in i:\n            if j in dict1:\n                dict1[j] += 1\n            else:\n                dict1[j] = 1\n                \n    return dict1\n    \ndef frequency_sort(list1, dict1):\n    '''\n    Write a function to sort a list of lists of elements according to frequency in a dictionary.\n    '''\n    \n    for i in list1:\n        for j in i:\n            if j in dict1:\n                if dict1[j]!= 0:\n                    dict1[j] -= 1\n    \n    return dict1\n    \n    \ndef top_five(list1):\n    '''\n    Write a function to return the 5 highest frequencies.\n    '''\n    \n    dict1 = frequency_lists(list1)\n    dict2 = frequency_sort(list1, dict1)\n    dict3 = frequency_sort(list1, dict2)\n    dict4 = frequency_sort(list1, dict3)\n    dict5 = frequency_sort(list1, dict4)\n    \n    print(list1[0:5])\n    for i in dict5:\n        if dict5[i] > 10:\n            print(i, dict5[i])\n    \n    return\n    \n    \nif __name__ == \"__main__\":\n    \n    # Test\n    # test_list1 = [\n    #     [\n    #         [1, 4, 2],\n    #         [9, 5, 8],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ],\n    #     [\n    #         [1, 3, 4],\n    #         [8, 9, 2],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ]\n    # ]\n    # test_dict1 = {\n    #     1: 1,\n    #     2: 1,\n    #     3: 1,\n    #     4: 1,\n    #     5: 1,\n    # }\n    # top_five(test_list1)\n    \n    # Test\n    # test_list1 = [\n    #     [\n    #         [1, 4, 2],\n    #         [9, 5, 8],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ],\n    #     [\n    #         [1, 3, 4],\n    #         [8, 9, 2],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ]\n    # ]\n    # test_dict1 = {\n    #     1: 1,\n    #     2: 1,\n    #     3: 1,\n    #     4: 1,\n    #     5: 1,\n    # }\n    # top_five(test_list1)\n    \n    # Test\n    # test_list1 = [\n    #     [\n    #         [1, 4, 2],\n    #         [9, 5, 8],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ],\n    #     [\n    #         [1, 3, 4],\n    #         [8, 9, 2],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ]\n    # ]\n    # test_dict1 = {\n    #     1: 1,\n    #     2: 1,\n    #     3: 1,\n    #     4: 1,\n    #     5: 1,\n    # }\n    # top_five(test_list1)\n    \n    # Test\n    # test_list1 = [\n    #     [\n    #         [1, 4, 2],\n    #         [9, 5, 8],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ],\n    #     [\n    #         [1, 3, 4],\n    #         [8, 9, 2],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ]\n    # ]\n    # test_dict1 = {\n    #     1: 1,\n    #     2: 1,\n    #     3: 1,\n    #     4: 1,\n    #     5: 1,\n    # }\n    # top_five(test_list1)\n    \n    # Test\n    # test_list1 = [\n    #     [\n    #         [1, 4, 2],\n    #         [9, 5, 8],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ],\n    #     [\n    #         [1, 3, 4],\n    #         [8, 9, 2],\n    #         [7, 6, 4],\n    #         [1, 3, 9],\n    #     ]\n    # ]\n    # test_dict1 = {\n    #     1: 1,\n    #     2: 1,\n    #     3: 1,\n    #     4: 1,\n    #     5: 1,\n    # }\n    # top_five(test_list1)"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    num_freq_dict = {}\n    for row in list1:\n        for i in row:\n            if i in num_freq_dict:\n                num_freq_dict[i] += 1\n            else:\n                num_freq_dict[i] = 1\n    return num_freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    res = dict()\n    for sublist in list1:\n        for e in sublist:\n            if e in res:\n                res[e] += 1\n            else:\n                res[e] = 1\n    return res\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1.sort()\n    frequency = {}\n    for lst in list1:\n        for element in lst:\n            if element in frequency:\n                frequency[element] += 1\n            else:\n                frequency[element] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in dict1.keys():\n                dict1[list1[i][j]] = 1\n            else:\n                dict1[list1[i][j]] += 1\n    return dict1\n    \nlist1 = [[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]]"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    list_length = len(numbers)\n    result = []\n    for i in range(list_length):\n        result.append(numbers[i] * list_length)\n    print(result)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    # If the length of the list is less than 2, then return nothing.\n    if len(numbers) < 2:\n        return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result *= x\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # your code goes here\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    def divide_num(numbers):\n        \n        def multiplier(numbers):\n            \n            def value(numbers):\n                \n                def reduce(numbers):\n                    \n                    def reduction(numbers):\n                        \n                        def get_value(numbers):\n                            \n                            def get_multiplier(numbers):\n                                \n                                def get_reduction(numbers):\n                                    \n                                    def get_multiplier_value(numbers):\n                                        \n                                        def get_multiplier_value(numbers):\n                                            \n                                            return numbers * get_multiplier(numbers)\n                                    \n                                    return get_multiplier_value(numbers)\n                                    \n                                    return get_reduction(numbers)\n                                \n                                def get_reduction_value(numbers):\n                                    \n                                    def get_multiplier_value(numbers):\n                                        \n                                        def get_multiplier_value(numbers):\n                                            \n                                            def get_multiplier_value(numbers):\n                                                \n                                                return numbers / get_multiplier(numbers)\n                                    \n                                        return get_multiplier_value(numbers)\n                                \n                                return get_reduction_value(numbers)\n                            \n                                def get_reduction_value(numbers):\n                                    \n                                    def get_multiplier_value(numbers):\n                                        \n                                        def get_multiplier_value(numbers):\n                                                \n                                                def get_multiplier_value(numbers):\n                                                    \n                                                    def get_multiplier_value(numbers):\n                                                        \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        def get_multiplier_value(numbers):\n                                                            \n                                                        de"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    l = [int(n) for n in numbers]\n    return [l[i]*l[i+1] for i in range(0, len(l)-1, 2)]\n    # print(l)\n    # return [l[i] * l[i+1] for i in range(0, len(l)-1, 2)]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def numbers_multiply(numbers):  \n        multiply_numbers = 1\n        for i in numbers:\n            multiply_numbers *= i\n        return multiply_numbers\n    return numbers_multiply(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for num in numbers:\n        yield num*num\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = [int(i) for i in numbers]\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply_numbers = []\n    number_of_numbers = len(numbers)\n    for i in range(number_of_numbers):\n        number = numbers[i]\n        div = number // number_of_numbers\n        remainder = number % number_of_numbers\n        multiply_numbers.append(div)\n        multiply_numbers.append(remainder)\n    return multiply_numbers\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    m = []\n    \n    for i in range(n//2):\n        m.append(n%2)\n        n = n//2\n    \n    m.reverse()\n    \n    bin_str = \"\"\n    for i in m:\n        bin_str = bin_str + str(i)\n    \n    return bin_str\n    \n    \ndef is_power_of_two(n): \n    '''\n    Write a function to determine if a number is a power of two.\n    '''\n    if n == 1: \n        return True\n    if n == 2: \n        return True\n    \n    if n%2 == 0: \n        return False\n    \n    if n%2 == 1: \n        return is_power_of_two(3*n)\n    \n    return False\n    \n    \ndef power_of_two(n): \n    '''\n    Write a function that returns the product of the numbers 1 through the given number, n.\n    '''\n    if n == 1: \n        return n\n    if n == 2: \n        return 3\n        \n    if n%2 == 0: \n        return power_of_two(n//2) * power_of_two(n//2)\n    \n    if n%2 == 1: \n        return power_of_two(3*n) * power_of_two(n//2)\n    \n    return 0\n    \n    \ndef sum_digits(n): \n    '''\n    Given a non negative integer x, return x with its digits reversed.\n    Except the number 10 is very large, so all its digits should be reversed.\n    '''\n    m = []\n    while n > 0: \n        n, r = divmod(n, 10)\n        m.append(r)\n    \n    m.reverse()\n    \n    return sum(m)\n    \n    \ndef sum_digits_v2(n): \n    '''\n    Given a non negative integer x, return x with its digits sorted in non-decreasing order.\n    '''\n    if n == 1: \n        return n\n    if n == 2: \n        return 3\n    if n % 2 == 0: \n        return sum_digits(n//2) + (n//2)\n    \n    if n % 2 == 1: \n        return (3*n) + (n//2)\n    \n    return 0\n    \n    \ndef sum_digits_v3(n): \n    '''\n    Given a non negative integer x, return x with its digits sorted in non-decreasing order.\n    '''\n    if n == 1: \n        return n\n    if n == 2: \n        return 3\n    \n    if n % 2 == 0: \n        return sum_digits_v2(n//2) + (n//2)\n    \n    if n % 2 == 1: \n        return (3*n) + (n//2)\n    \n    return 0\n    \n    \ndef sum_digits_v4(n): \n    '''\n    Given a non negative integer x, return x with its digits sorted in non-decreasing order.\n    However, the digits never sorted in reverse order.\n    '''\n    if n == 1: \n        return n\n    if n == 2: \n        return 3\n    \n    if n % 2 == 0: \n        return sum_digits_v2(n//2)\n    \n    return sum_digits_v2(n//2) + (n//2)\n    \n    \n    \ndef fib(n): \n    '''\n    Return the nth Fibonacci number.\n    '''\n    a, b = 0, 1\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    \n    for i in range(n): \n        c = a + b\n        a = b\n        b = c\n    \n    return b\n    \n    \ndef fib_iter(n): \n    '''\n    Return the nth Fibonacci number, using an iterator.\n    '''\n    a, b = 0, 1\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    \n    for i in range(n): \n        c = a + b\n        a = b\n        b = c\n    \n    return b\n    \n    \ndef find_prime_factors(n): \n    '''\n    Return the factors of the number n as a list.\n    '''\n    if n < 2: \n        return []\n    \n    lst = []\n    for i in range(2, n):\n        if n % i == 0:\n            lst.append(i)\n    return lst\n    \n    \ndef remove_decimals(n): \n    '''\n    Return the number with all decimals removed.\n    '''\n    return str(n).replace(\".\", \"\")\n    \n    \ndef find_prime_factors_v2(n): \n    '''\n    Return the factors of the number n as a list.\n    '''\n    if n < 2: \n        return []\n    \n    lst = []\n    for i in range(2, n):\n        if n % i == 0:\n            lst.append(i)\n    return lst\n    \n    \ndef find_prime_factors_v3(n): \n    '''\n    Return the factors of the number n as a list.\n    '''\n    if n < 2: \n        return []\n    \n    lst = []\n    for i in range(2, n):\n        if n % i == 0:\n            lst.append(i)\n    return lst\n    \n    \ndef find_prime_factors_v4(n): \n    '''\n    Return the factors of the number n as a list.\n    '''\n    if n < 2: \n        return []\n    \n    lst = []\n    for i in range(2, n):\n        if n % i == 0:\n            lst.append(i)\n    return lst\n    \n    \ndef product_of_primes(lst): \n    '''\n    Return the product of the numbers in the list.\n    '''\n    s = 1\n    for i in lst:\n        s *= i\n    return s\n    \n    \ndef is_prime(n): \n    '''\n    Return True if the number n is prime, else return False.\n    '''\n    if n < 2: \n        return False\n    \n    for i in range(2, n):\n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_v3(n): \n    '''\n    Return True if the number n is prime, else return False.\n    '''\n    if n < 2: \n        return False\n    \n    for i in range(3, n):\n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_v4(n): \n    '''\n    Return True if the number n is prime, else return False.\n    '''\n    if n < 2: \n        return False\n    \n    for i in range(3, n):\n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_v5(n): \n    '''\n    Return True if the number n is prime, else return False.\n    '''\n    if n < 2: \n        return False\n    \n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    \n    if n % 3 == 0: \n        return False\n    \n    for i in range(5, n, 6): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef prime_factors(n): \n    '''\n    Return the prime factors of the number n.\n    '''\n    if n < 2: \n        return []\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0: \n            return [i]\n    return []\n    \n    \nde"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b = ''\n    while n!= 0: \n        b += str(n % 2) \n        n = n // 2 \n    return b\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    x = bin(n)\n    x = x[2:]\n    #print(x)\n    return x\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    import math\n    n = str(n)\n    return bin(int(n)).replace('0b','')\n    \ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    import math\n    n = str(n)\n    return int(n,2)\n    \ndef dec2binary(n):\n    '''\n    Write a function to convert an integer to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    import math\n    n = str(n)\n    return bin(int(n,2)).replace('0b','')\n    \ndef binary_to_decimal(n):\n    '''\n    Write a function to convert an binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    import math\n    n = str(n)\n    return int(n,2)\n    \ndef decimal_to_binary(n): \n    '''\n    Write a function to convert an integer to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    import math\n    n = str(n)\n    return str(int(n,2))\n    \ndef binary_to_decimal(n):\n    '''\n    Write a function to convert a binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    import math\n    n = str(n)\n    return int(n,2)\n    \ndef is_prime(n): \n    '''\n    Write a function to return True if a positive integer n is prime, or False otherwise.\n    '''\n    import math\n    if n == 2: \n        return True\n    if n < 2 or n % 2 == 0: \n        return False\n    if n == 3: \n        return True\n    if n % 3 == 0: \n        return False\n    if n % 5 == 0: \n        return False\n    if n % 2 == 0 and n!= 3: \n        return False\n    i = 6\n    while i*i <= n: \n        if n % i == 0: \n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = int(n)\n    res = ''\n    while n:\n        if n%2 == 1:\n            res = '1'+res\n            n = n//2\n        else:\n            res = '0'+res\n            n = n//2\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    while (n > 0):\n        result += str(n % 2)\n        n //= 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return '{:b}'.format(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin = \"\"\n    while n!= 0: \n        bin += str(n % 2) \n        n //= 2\n    return bin[::-1] \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert type(n) == int, \"Given number is not an integer.\"\n    \n    # base = 2^16\n    # result = str(n)\n    # result = result.replace('0','')\n    # result = result.replace('1', '\\b')\n    # result = result.replace('2', '\\b')\n    # result = result.replace('3', '\\b')\n    # result = result.replace('4', '\\b')\n    # result = result.replace('5', '\\b')\n    # result = result.replace('6', '\\b')\n    # result = result.replace('7', '\\b')\n    # result = result.replace('8', '\\b')\n    # result = result.replace('9', '\\b')\n    # result = result.replace('A', '\\b')\n    # result = result.replace('B', '\\b')\n    # result = result.replace('C', '\\b')\n    # result = result.replace('D', '\\b')\n    # result = result.replace('E', '\\b')\n    # result = result.replace('F', '\\b')\n    \n    # result = f'{n:b}'.replace('0','')\n    # result = result.replace('1', '\\b')\n    # result = result.replace('2', '\\b')\n    # result = result.replace('3', '\\b')\n    # result = result.replace('4', '\\b')\n    # result = result.replace('5', '\\b')\n    # result = result.replace('6', '\\b')\n    # result = result.replace('7', '\\b')\n    # result = result.replace('8', '\\b')\n    # result = result.replace('9', '\\b')\n    # result = result.replace('A', '\\b')\n    # result = result.replace('B', '\\b')\n    # result = result.replace('C', '\\b')\n    # result = result.replace('D', '\\b')\n    # result = result.replace('E', '\\b')\n    # result = result.replace('F', '\\b')\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    dec = str(n)\n    return dec.replace(\"0\", \"\")\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Step 1: find the next smallest palindrome\n    for i in range(int(num/2), 0, -1):\n        if (num - i*i) < (num/2):\n            break\n        elif i*i == num:\n            return i\n    # Step 2:\n    # use two pointer\n    # need to search for the next palindrome\n    mid = int((num + 1) / 2)\n    while True:\n        # mid is odd\n        if mid % 2 == 0:\n            mid = (mid - 1) // 2\n        else:\n            mid = mid // 2\n        # find next palindrome\n        if mid * mid == num:\n            return mid\n        # mid is even, it's a palindrome, return mid\n        if mid * mid == num:\n            return mid\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    end_of_string = num\n    while num > 0:\n        if end_of_string % 2 == 1:\n            end_of_string = end_of_string // 2\n        else:\n            end_of_string = 3 * end_of_string\n    return end_of_string\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while(num > 1):\n        if(num % 2 == 1):\n            num = num / 2\n        else:\n            num = num / 3\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Your code here\n    if num==0:\n        return -1\n    while num%2==0:\n        num=num//2\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Write your code here\n    n = len(str(num))\n    palindrome = str(num)[::-1]\n    idx = 0\n    for i in range(n):\n        if palindrome[i] == '1':\n            idx = i\n            break\n    num = num * 2\n    if num <= 10:\n        return num\n    else:\n        for i in range(n-1, 0, -1):\n            if num < palindrome[i]:\n                return palindrome[i]*2 + num\n        return palindrome[idx]*2 + num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    for i in range(1, n+1):\n        if (num % 10**i == 0) and (num // 10**i in palindrome_dict):\n            return num // 10**i\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 0\n    while True:\n        if num == 0:\n            return num\n        if (num % 10) % 10 == 0 and (num % 10) % 10 < 10:\n            num = num / 10\n            i += 1\n        elif num % 10 < 10:\n            num = num / 10\n        else:\n            num = num * 10\n            i += 1\n        if i > 50:\n            return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #your code goes here\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    count = 0\n    def is_palindrome(num):\n        num = str(num)\n        if len(num) == 1:\n            return True\n        if num[0] == num[-1]:\n            return is_palindrome(num[1:-1])\n        return False\n    if is_palindrome(num):\n        return num\n    else:\n        while num > 1:\n            if num % 10 == 1:\n                count += 1\n                num //= 10\n            else:\n                count += 1\n                num //= 10\n        return count\n    \ndef next_greatest_palindrome(num):\n    '''\n    Write a function to find the next greater palindrome of a specified integer, returned as an integer.\n    '''\n    count = 0\n    def is_palindrome(num):\n        num = str(num)\n        if len(num) == 1:\n            return True\n        if num[0] == num[-1]:\n            return is_palindrome(num[1:-1])\n        return False\n    if is_palindrome(num):\n        return num\n    else:\n        while num > 1:\n            if num % 10 == 1:\n                count += 1\n                num //= 10\n            else:\n                count += 1\n                num //= 10\n        return count\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    return kth_element(arr[1:], k"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if there is only one element in the array, return it\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # create a new array of the given size\n    kth = []\n    for i in range(len(arr)):\n        kth.append(arr[i])\n    return kth[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for index in range(0, len(arr)-1):\n        if arr[index] == k:\n            return index\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k - 1) % len(arr)"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Init first element as head of the array\n    head = 0\n    # Init size of the array\n    size = len(arr)\n    # Init final index to store the answer\n    ans = -1\n    # For every element in the array\n    for i in range(size):\n        # If head equals to current index of the array\n        if head == k-1:\n            # Store the answer\n            ans = arr[head]\n            # Done\n            break\n        # If current element is smaller than the next element\n        elif arr[head] < arr[head+1]:\n            # If not, increase head\n            head += 1\n        # Otherwise, the element is greater than the next element\n        else:\n            head += 1\n            # If it is the answer, save its index and the answer\n            if head == size-1:\n                ans = head-k+1\n                break\n            # If it is not the answer, update head and check\n            else:\n                head += 1\n    # If there is no answer\n    if ans == -1:\n        print(\"No answer\")\n    else:\n        print(ans)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    # Step 1. Create the K-th index array\n    kth_index_arr = [None] * k\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace('-','_').replace('_',' ').title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.lower() == \"snake\":\n        return word.capitalize()\n    else:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n    \n    if word.isupper():\n        return word.lower()\n    \n    word = word.title()\n    \n    return word + '-' + snake_to_camel(word[:-1])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_camel_s(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_camel_s2(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s3(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_camel_s4(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_camel_s5(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s6(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_camel_s7(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s8(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s9(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n    \ndef snake_to_camel_s10(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s11(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s12(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s13(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s14(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s15(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s16(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s17(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s18(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s19(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s20(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s21(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s22(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s23(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s24(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s25(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s26(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s27(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s28(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s29(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s30(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s31(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s32(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('-'))\n    \ndef snake_to_camel_s33(word):\n    '''\n    Write a function to convert a snake case string to camel case string"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # splits the word and converts each character to lowercase\n    split_word = word.split('_')\n    # converts each character to lowercase\n    lower_word = [letter.lower() for letter in split_word]\n    # converts the list back to a string\n    output_word = ''.join(lower_word)\n    return output_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # TODO: Replace this with your code\n    # e.g.\n    # def snake_to_camel(word):\n    #     return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # create a dictionary of letters in a sentence\n    # the keys are lower case letters and the values are the words that correspond to that letter\n    # e.g. a = \"aardvark\"\n    # keys are: uppercase letters, lowercase letters, digits, special symbols\n    # values are: word, word, word, word\n    d = {'a':'aardvark', 'b':'baboon', 'c':'camel', 'd':'dinner', 'e':'evill', 'f':'flapjack', 'g':'gallade',\n        'h':'hello', 'i':'i am', 'j':'jean', 'k':'kim', 'l':'lemon','m':'mango', 'n':'newt',\n        'o':'orange', 'p':'papa', 'q':'queen', 'r':'rose','s':'snake', 't':'titanium', 'u':'upland',\n        'v':'vanilla', 'w':'watermelon', 'x':'coral', 'y':'puppy', 'z':'zebra'}\n    # create an empty string\n    # this is the original string\n    s = ''\n    # iterate through the keys\n    # if the string contains a key\n    for key in d:\n        # if it's a key\n        if d[key]!= '':\n            # add the key to the new string\n            s = s + key.capitalize()\n    return s\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.lower()\n    s1 = []\n    for i in word:\n        if i.isalnum():\n            s1.append(i)\n    return ''.join(i for i in s1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # eulerian_numbers = [[1,1,1],[1,0,1],[0,1,1],[0,0,1]]\n    eulerian_numbers = []\n    for i in range(n):\n        eulerian_numbers.append([1,1,1])\n    \n    # eulerian_numbers = [[0,1],[1,0],[0,1],[1,0],[0,1]]\n    \n    visited = []\n    for i in range(m):\n        eulerian_numbers.append([0,0,0])\n    \n    #print(eulerian_numbers)\n    \n    def dfs(x):\n        visited.append(x)\n        #print(\"visited:\",visited)\n        for i in range(n):\n            if(x==i):\n                continue\n            \n            if(i not in visited):\n                dfs(i)\n                \n    \n    for i in range(1, n+1):\n        dfs(i)\n    \n    return eulerian_numbers\n    \ndef solution(n, m, puddles):\n    return eulerian_num(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # get Eulerian number\n    f = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            f = f + 1\n        else:\n            f = f - 1\n    return f\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    x = n #n is the number of nodes, so you can use it in the problem\n    i = 1\n    j = 1\n    count = 0\n    while(x > 1):\n        count = count + 1\n        while(x % i!= 0):\n            j = j + 1\n            i = i + 1\n        x = x / i\n        i = i + 1\n    if(count == m):\n        print(count, \"Eulian number is\", j)\n    else:\n        print(count, \"Eulian number is not\", j)\n    \ndef find_Eulerian_num():\n    '''\n    Write a function to find the Eulerian number a(n, m)\n    '''\n    n = input(\"Enter number of nodes: \")\n    m = int(input(\"Enter number of edges: \"))\n    if (not n.isnumeric() or not m.isnumeric()):\n        print(\"You have entered a non numeric value!\")\n        print(\"Please enter a non numeric value!\")\n        quit()\n    n = int(n)\n    if (n < 0):\n        print(\"You have entered a non positive value!\")\n        print(\"Please enter a positive value!\")\n        quit()\n    m = int(m)\n    if (m < 0):\n        print(\"You have entered a non positive value!\")\n        print(\"Please enter a positive value!\")\n        quit()\n    eulerian_num(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    visited = [False] * (n+1)\n    inverse = [False] * (n+1)\n    \n    def dfs(n):\n        if n == m:\n            return 1\n        if n < m:\n            return 0\n        \n        if visited[n]:\n            return -1\n        \n        visited[n] = True\n        \n        res = dfs(n) + dfs(n - m)\n        \n        if res!= -1:\n            return res\n        \n        res = -1\n        visited[n] = False\n        inverse[n] = True\n        \n        res = dfs(n) - dfs(n - m)\n        \n        if res!= -1:\n            return res\n        \n        res = -1\n        visited[n] = False\n        inverse[n] = False\n        \n        res = dfs(n) + dfs(n + m)\n        \n        if res!= -1:\n            return res\n        \n        res = -1\n        visited[n] = False\n        inverse[n] = False\n        \n        res = dfs(n) - dfs(n + m)\n        \n        if res!= -1:\n            return res\n        \n        res = -1\n        visited[n] = False\n        inverse[n] = False\n        \n        res = dfs(n) + dfs(n - m)\n        \n        if res!= -1:\n            return res\n        \n        res = -1\n        visited[n] = False\n        inverse[n] = False\n        \n        res = dfs(n) - dfs(n - m)\n        \n        if res!= -1:\n            return res\n        \n        res = -1\n        visited[n] = False\n        inverse[n] = False\n        \n        res = dfs(n) + dfs(n - m)\n        \n        if res!= -1:\n            return res\n        \n        res = -1\n        visited[n] = False\n        inverse[n] = False\n        \n        res = dfs(n) - dfs(n - m)\n        \n        if res!= -1:\n            return res\n        \n        return -1\n    \n    return dfs(n)"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from itertools import permutations \n    return sum(list(permutations(range(1, n + 1), m)))\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    try:\n        a = (n * (n-1)) / 2\n        if n % m == 0:\n            return a\n        else:\n            return eulerian_num(n-1, m)\n    except:\n        pass\n    \n    \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Declare a variable to store the length of the sequences. \n    # Note that a(n, m) is the length of the input sequence.\n    l = 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Determines if the number is a sum of 1 or 0, which is considered a cycle\n    # 2D matrix of all 1s and 0s, corresponding to the number of 1s and 0s in the number.\n    def is_cycle(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 1:\n                    cycle_flag = True\n                    break\n        if cycle_flag == True:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s = []\n    if n == m:\n        return n\n    if n % 2!= m % 2:\n        print (\"The value of n is not an even number\")\n        return -1\n    for i in range(0, n, 2):\n        for j in range(i+1, n, 2):\n            s.append(j)\n            s.append(i)\n    print (s)\n    for i in s:\n        print (i)\n        print(\"================================================\")\n    return eulerian_num(n, m+1)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # get the length of the list\n    list_len = len(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_list_by_string(input_list):\n        '''\n        input_list: a list of strings\n        '''\n        # TODO: your code here\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Modify this code to make it run in time\n    # TODO: Determine if you want to keep track of which element in a list it's element, and sort it's sublists first\n    \n    # TODO: Write a method to do the same thing as sort_sublists() but now it's not very efficient, and it doesn't have to sort\n    #       all the sublists again\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code goes here\n    return sorted(input_list, key=lambda x: x.count(' '))\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda x: str(x[0]))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Get an iterable object containing all the strings from the list\n    sublists = list(itertools.chain(*input_list))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            sublists.append(sublist)\n        else:\n            sublists.append([sublist])\n    return sublists\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty list to append strings to\n    sort_list = []\n    # Process list of sublists into a list of strings\n    for sublist in input_list:\n        # Append each string in each sublist to sort_list\n        sort_list.append(str(sublist))\n    # Sort the string list\n    sort_list.sort()\n    # Create a new list of sublists\n    return [sublist for sublist in input_list]\n    \ndef save_file(input_list):\n    '''\n    Write a function to read and print a list of strings from a given file.\n    '''\n    # Create an empty list to append strings to\n    output_list = []\n    # Process list of sublists into a list of strings\n    for sublist in input_list:\n        # Append each string in each sublist to output_list\n        output_list.append(str(sublist))\n    # Print the output_list\n    print(output_list)\n    \ndef main():\n    '''\n    Write a program to sort a list of lists of integers using the sublists.\n    '''\n    # Create a list of strings\n    input_list = [[\"1\",\"2\",\"3\"],[\"4\",\"5\",\"6\"],[\"7\",\"8\",\"9\"]]\n    # Sort the list of sublists using sort_sublists\n    input_list = sort_sublists(input_list)\n    # Print the list of strings\n    print(input_list)\n    # Save the list of strings to a file\n    save_file(input_list)\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # write your code here\n    if type(input_list)!= list:\n        raise TypeError(\"the list must be a list of lists\")\n    else:\n        for i in range(len(input_list)):\n            input_list[i] = sorted(input_list[i])\n        return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #lst_bool = []\n    #for i in range(len(lst)):\n    #    if lst[i] == True:\n    #        lst_bool.append(True)\n    #    else:\n    #        lst_bool.append(False)\n    #return len(lst_bool)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    num = 0\n    for i in lst:\n        if i == 1:\n            num+=1\n    return num\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i:\n            c += 1\n    return c\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i == True:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == True:\n            lst[i] = lst[i] + 1\n        else:\n            lst[i] = 0\n    return lst\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n    test_list.append(test_tup[2])\n    test_list.append(test_tup[3])\n    test_list.append(test_tup[4])\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    i=0\n    list_append = []\n    for item in test_list:\n        list_append.append(item)\n    while i<len(test_tup):\n        test_tup[i].append(list_append[i])\n        i+=1\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_tup + test_list\n    print(f'Appended list: {new_list}')\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) == len(test_tup):\n        for idx in range(len(test_list)):\n            test_tup[idx] = test_list[idx]\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num1\n    elif num3 == None:\n        return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #Create an empty list to keep track of the index of the first list item\n    first_list = []\n    #Create a heap to keep track of the index of the last list item\n    heap = []\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    output = []\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]<num3[k]:\n            output.append(num1[i])\n            output.append(num2[j])\n            output.append(num3[k])\n            i+=1\n            j+=1\n            k+=1\n        elif num1[i]<num3[k]<num2[j]:\n            output.append(num1[i])\n            output.append(num3[k])\n            i+=1\n        else:\n            output.append(num2[j])\n            output.append(num3[k])\n            j+=1\n            k+=1\n    while i<len(num1):\n        output.append(num1[i])\n        i+=1\n    while j<len(num2):\n        output.append(num2[j])\n        j+=1\n    while k<len(num3):\n        output.append(num3[k])\n        k+=1\n    return output\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == []:\n        return num2\n    elif num2 == []:\n        return num1\n    elif num3 == []:\n        return num1 + num2\n    else:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(num1,num2[0])\n            heapq.heappush(num2,num3[0])\n            heapq.heappush(num3,num1[0])\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(num1,num2[0])\n            heapq.heappush(num2,num3[0])\n            heapq.heappush(num3,num1[0])\n        else:\n            heapq.heappush(num2,num3[0])\n            heapq.heappush(num1,num2[0])\n            heapq.heappush(num3,num1[0])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list\ndef merge_three_lists_rec(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == [] and num2 == [] and num3 == []:\n        return num1 + num2 + num3\n    elif num1 == [] and num2 == []:\n        return num3\n    elif num2 == [] and num3 == []:\n        return num1\n    elif num1 == []:\n        return num2 + num3\n    elif num2 == []:\n        return num1 + num3\n    elif num3 == []:\n        return num1 + num2\n    else:\n        num1.sort()\n        num2.sort()\n        num3.sort()\n        merged_list = merge_three_lists_rec(num1,num2,num3)\n        merged_list.sort()\n        return merged_list\ndef merge_three_lists(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = merge_sorted_list(num1,num2,num3)\n    return merged_list\ndef merge_lists_rec(nums1,nums2,nums3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(nums1) > 0 and len(nums2) > 0 and len(nums3) > 0:\n        n1 = len(nums1)\n        n2 = len(nums2)\n        n3 = len(nums3)\n        for i in range(n1):\n            for j in range(n2):\n                for k in range(n3):\n                    #print(nums1[i],nums2[j],nums3[k])\n                    #print(nums1[i] + nums2[j] + nums3[k])\n                    nums1[i] += nums2[j]\n                    nums2[j] = nums2[j] - nums1[i]\n                    nums3[k] = nums3[k] - nums1[i]\n                    #print(nums1[i],nums2[j],nums3[k])\n        return nums1 + nums2 + nums3\n    elif len(nums1) > 0 and len(nums2) == 0:\n        nums1.append(0)\n        return nums1\n    elif len(nums1) == 0 and len(nums2) > 0:\n        return nums2\n    elif len(nums1) == 0 and len(nums2) == 0:\n        return nums1\n    else:\n        return nums1 + nums2\ndef merge_lists(nums):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        left = merge_lists(nums[:len(nums)//2])\n        right = merge_lists(nums[len(nums)//2:])\n        return merge_lists_rec(left,right)\ndef merge_lists_rec_3(nums1,nums2,nums3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(nums1) > 0 and len(nums2) > 0 and len(nums3) > 0:\n        n1 = len(nums1)\n        n2 = len(nums2)\n        n3 = len(nums3)\n        nums1.sort()\n        nums2.sort()\n        nums3.sort()\n        if n1 < n2:\n            nums1 = merge_three_lists_rec(nums1,nums2,nums3)\n        elif n2 < n3:\n            nums2 = merge_three_lists_rec(nums2,nums1,nums3)\n        else:\n            nums3 = merge_three_lists_rec(nums3,nums1,nums2)\n        return nums1 + nums2 + nums3\n    elif len(nums1) > 0 and len(nums2) == 0:\n        nums1.append(0)\n        return nums1\n    elif len(nums1) == 0 and len(nums2) > 0:\n        return nums2\n    elif len(nums1) == 0 and len(nums2) == 0:\n        return nums1\n    else:\n        return nums1 + nums2\ndef merge_lists_rec_3_1(nums1,nums2,nums3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(nums1) > 0 and len(nums2) > 0 and len(nums3) > 0:\n        n1 = len(nums1)\n        n2 = len(nums2)\n        n3 = len(nums3)\n        nums1.sort()\n        nums2.sort()\n        nums3.sort()\n        #print(nums1)\n        if n1 < n2:\n            nums1 = merge_three_lists_rec_3(nums1,nums2,nums3)\n        elif n2 < n3:\n            nums2 = merge_three_lists_rec_3(nums2,nums1,nums3)\n        else:\n            nums3 = merge_three_lists_rec_3(nums3,nums1,nums2)\n        return nums1 + nums2 + nums3\n    elif len(nums1) > 0 and len(nums2) == 0:\n        nums1.append(0)\n        return nums1\n    elif len(nums1) == 0 and len(nums2) > 0:\n        return nums2\n    elif len(nums1) == 0 and len(nums2) == 0:\n        return nums1\n    else:\n        return nums1 + nums2\ndef merge_lists_rec_2_3(nums1,nums2,nums3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(nums1) > 0 and len(nums2) > 0 and len(nums3) > 0:\n        n1 = len(nums1)\n        n2 = len(nums2)\n        n3 = len(nums3)\n        nums1.sort()\n        nums2.sort()\n        nums3.sort()\n        #print(nums1)\n        if n1 < n2:\n            nums1 = merge_three_lists_rec(nums1,nums2,nums3)\n        elif n2 < n3:\n            nums2 = merge_three_lists_rec(nums2,nums1,nums3)\n        else:\n            nums3 = merge_three_lists_rec(nums3,nums1,nums2)\n        return nums1 + nums2 + nums3\n    elif len(nums1) > 0 and len(nums2) == 0:\n        nums1.append(0)\n        return nums1\n    elif len(nums1) == 0 and len(nums2) > 0:\n        return nums2\n    elif len(nums1) == 0 and len(nums2) == 0:\n        return nums1\n    else:\n        return nums1 + nums2\ndef merge_lists_rec_2(nums1,nums2):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(nums1) > 0 and len(nums2) > 0:\n        n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # code here\n    sorted_list = []\n    sorted_list_ = []\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a=[]\n    b=[]\n    c=[]\n    d=[]\n    x=num1+num2+num3\n    if(len(x)==0):\n        return 0\n    else:\n        if(len(num1)==0):\n            a.append(x)\n        if(len(num2)==0):\n            b.append(x)\n        if(len(num3)==0):\n            c.append(x)\n    for i in a:\n        if(i in b or i in c or i in d):\n            continue\n        else:\n            heapq.heappush(d,i)\n    for i in b:\n        if(i in d or i in c or i in a):\n            continue\n        else:\n            heapq.heappush(d,i)\n    for i in c:\n        if(i in d or i in b or i in a):\n            continue\n        else:\n            heapq.heappush(d,i)\n    for i in a:\n        if(i in d or i in c or i in b):\n            continue\n        else:\n            heapq.heappush(d,i)\n    print(d)\n    return x\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge two lists into a single list\n    if num1 and num2 and num3:\n        l1=[]\n        l2=[]\n        l3=[]\n        \n        l1.extend(num1)\n        l2.extend(num2)\n        l3.extend(num3)\n        \n        num1=l1\n        num2=l2\n        num3=l3\n        \n        heapq.heapify(num1)\n        heapq.heapify(num2)\n        heapq.heapify(num3)\n        \n        # print(num1)\n        # print(num2)\n        # print(num3)\n        # print(l1)\n        # print(l2)\n        # print(l3)\n        \n        num1.extend(l3)\n        num2.extend(l2)\n        num3.extend(l1)\n    \n    return num1,num2,num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    output = []\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code goes here\n    f=n%2\n    if(f==0):\n        return n%2\n    else:\n        return n%2-1\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    # your code goes here\n    f=n%2\n    if(f==0):\n        return n%2\n    else:\n        return n%2+1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if (s[i % n] == '0'):\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (bin(s)[2:].count('1'))*(n+1)\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    return (bin(s)[2:].count('0'))*(n+1)\n    \ndef convert_Binary_to_Decimal(s):\n    '''\n    Write a python function to convert a binary string to decimal.\n    '''\n    return int(s,2)\n    \ndef convert_Decimal_to_Binary(d):\n    '''\n    Write a python function to convert decimal numbers to binary string.\n    '''\n    return bin(d)\n    \ndef Reverse_string(s,n):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return s[::-1]\n    \ndef Rotate_string(s,n):\n    '''\n    Write a python function to rotate a string s by n characters.\n    '''\n    return s[n:]+s[:n]\n    \ndef Quadratic_solution(n):\n    '''\n    Write a python function to find the quadratic solution of a given equation: ax^2 + bx + c = 0\n    '''\n    return (n**2) + (n**2)*(n+1)/2\n    \ndef Quadratic_solution_with_prime(n):\n    '''\n    Write a python function to find the quadratic solution of a given equation: ax^2 + bx + c = 0 with primes\n    '''\n    s = 0\n    for i in range(2,n+1):\n        if n%i == 0:\n            s += i\n            break\n    return s\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotate(str): \n        lst = []\n        for i in str: \n            lst.append(str)\n        return lst[::-1]\n    return n % 2 == 1 and len(str) % 2!= 0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s=='':\n        return 0\n    count=0\n    for i in range(n):\n        if s[i]=='0':\n            count=count+1\n    if count%2==1:\n        return count\n    else:\n        return count+odd_Equivalent(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        temp = int(s[i])\n        count+=s[n-1-i]*temp*(n-1-i)\n        \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    for i in range(n):\n        if s[i % n] == '1':\n            odd += 1\n    return odd\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = int(s)\n    n = int(n)\n    i = 0\n    j = 1\n    if s % 2 == 1:\n        return 0\n    while i<n:\n        if j%2 == 0:\n            s = s +1\n            j = j+1\n        else:\n            s = s - 1\n            j = j - 1\n        i = i+1\n    return s\ndef main():\n    s = input(\"Enter string to rotate: \")\n    n = input(\"Enter the number of times: \")\n    print(\"Odd value of the given string is\",odd_Equivalent(s,n))\n    return\nmain()"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    if n==2: \n        return 0\n    if n%2!=0: \n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,(n//2)+(n%2)) \n    if n%2==0: \n        return odd_Equivalent(s,n//2) \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import itertools\n    if n==0: \n        return 1\n    elif n==1: \n        return 0\n    else:\n        res=0\n        # loop through the binary string, and add each 2's\n        for i in range(0,int(math.log2(n))+1):\n            if(n&1):\n                # if the bit is set, add it to the total\n                res+=i+1\n            n=n>>1\n        return res\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for nested in nestedlist:\n        common.update(nested)\n    return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    from collections import Counter\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #pass\n    return(set(nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for nested in nestedlist:\n        if len(nested) == 1:\n            return nested[0]\n    return \"Not Found\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for nestedlist in nestedlist:\n        for element in nestedlist:\n            for element2 in element:\n                if element2 not in nestedlist:\n                    break\n                else:\n                    if element2 in nestedlist:\n                        pass\n                    else:\n                        nestedlist.remove(element2)\n    return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist) is not list:\n        raise TypeError(\"nestedlist is not list\")\n    if len(nestedlist) == 0:\n        raise ValueError(\"nestedlist is empty\")\n    common_elements = []\n    for i in range(len(nestedlist)):\n        if i == 0:\n            common_elements.extend(nestedlist[i])\n        elif len(nestedlist[i]) == 1:\n            common_elements.extend(nestedlist[i][0])\n        else:\n            common_elements.extend(nestedlist[i][0] for i in range(len(nestedlist[i])))\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist[0]) == list:\n        common_elements = set()\n        for i in range(len(nestedlist)):\n            common_elements.update(nestedlist[i])\n        return common_elements\n    else:\n        return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    s = []\n    for i in nestedlist:\n        if type(i) == list:\n            s.extend(i)\n        else:\n            s.append(i)\n    return s\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    \n    for nestedlist_1 in nestedlist:\n        if nestedlist_1 in result:\n            continue\n        else:\n            result.append(nestedlist_1)\n            \n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #code here\n    mylist=[]\n    for i in nestedlist:\n        for j in i:\n            mylist.append(j)\n    print(mylist)\n    return mylist\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if type(text) == str:\n        if len(text) == 0:\n            return False\n        elif text.isnumeric():\n            return True\n        else:\n            return False\n    else:\n        print(\"That's not a number\")\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for k in i:\n            if k == \"\":\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(len(dict_) == 0 for dict_ in list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(list(item.values())[0]) == 0:\n            print(\"The dictionary is empty\")\n        else:\n            print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i == {}:\n            empty = False\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) == 0:\n            return True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return False\n    else:\n        for i in list1:\n            for j in i.keys():\n                if not i.get(j):\n                    return False\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(dict_) == 0 for dict_ in list1)"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d == {}:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for ele in list1:\n        if ele == {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    print(\"Return:\")\n    for i in list1:\n        print(i)\n        for key, value in i.items():\n            print(f\"{key} : {value}\")\n        print(\"---------------------------------------\")\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    def helper(nums):\n        return sum(map(int, nums))\n    return sum(map(lambda n: n, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for x in nums:\n        res += x\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return tuple(map(tuple_to_int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #print(nums)\n    return 0 if len(nums) == 0 else sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Check if the tuple is empty\n    if len(nums) == 0:\n        return -1\n    # Check if the tuple contains only positive integers\n    elif nums[0] < 0:\n        return -1\n    else:\n        # Convert all values of the given tuple to int\n        i = 0\n        j = len(nums) - 1\n        res = 0\n        # Loop through each element in the tuple\n        while i < j:\n            res = res + nums[i] * 10 ** (j - i - 1)\n            i = i + 1\n            j = j - 1\n        return res\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_tuple = []\n    for i in range(0,len(nums)):\n        int_tuple.append(nums[i])\n    return int_tuple\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = []\n    for i in test_list:\n        for j in i:\n            test_list_float.append(float(j))\n    return test_list_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    num_list = []\n    for test in test_list:\n        if isinstance(test, list):\n            test = [list_to_float(test)]\n        num_list.append(test)\n    return num_list\n    \ndef list_to_percent(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to percentages.\n    '''\n    \n    num_list = []\n    for test in test_list:\n        if isinstance(test, list):\n            test = [list_to_percent(test)]\n        num_list.append(test)\n    return num_list\n    \ndef list_to_float_percent(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats and percentages.\n    '''\n    \n    num_list = []\n    for test in test_list:\n        if isinstance(test, list):\n            test = [list_to_float_percent(test)]\n        num_list.append(test)\n    return num_list\n    \ndef list_to_float_percent_lists(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats and percentages.\n    '''\n    \n    num_list = []\n    for test in test_list:\n        if isinstance(test, list):\n            test = [list_to_float_percent(test)]\n        num_list.append(test)\n    return num_list\n    \ndef print_comparison(test_list, comparison_list):\n    '''\n    Write a function to print a comparison list to a given list of lists.\n    '''\n    \n    num_list = list_to_percent(test_list)\n    comparison_list = list_to_percent(comparison_list)\n    \n    for comparison in comparison_list:\n        for element in num_list:\n            if isinstance(element, list):\n                print(element, end = '\\t')\n            else:\n                print(element, end = '\\t\\t')\n        print()\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if(len(test_list) == 0):\n        return None\n    elif(len(test_list[0]) == 1):\n        return test_list\n    else:\n        return list_to_float(test_list[0]) + list_to_float(test_list[1:])\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list[:]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for el in test_list:\n            for num in el:\n                if num == None:\n                    raise TypeError(\"None is not a valid input.\")\n        return list(map(list, zip(*test_list)))\n    except TypeError as e:\n        print(e)\n        return []\n    except ValueError as e:\n        print(e)\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        for j in i:\n            float_list.append(j)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    temp_list = []\n    for i in test_list:\n        for j in i:\n            if j.count(',') == 1:\n                temp_list.append(j.replace(';',''))\n            elif j.count(';') == 1:\n                temp_list.append(j.replace(';','').replace(';','-').replace(';','_'))\n            elif j.count(';') == 2:\n                temp_list.append(j.replace(';','').replace(';','_').replace(';','-').replace(';','_'))\n            elif j.count(';') == 3:\n                temp_list.append(j.replace(';','').replace(';','_').replace(';','_').replace(';','-').replace(';','_').replace(';','-'))\n    return temp_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Declare the variables and variables to avoid the exception\n    test_list_float = []\n    test_list_convertible = []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    output_list = []\n    for row in test_list:\n        new_row = []\n        for cell in row:\n            if type(cell) == str:\n                new_row.append(float(cell))\n            else:\n                new_row.append(cell)\n        output_list.append(new_row)\n    return output_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # empty list\n    list_1 = []\n    # list contains all the elements in the lists\n    for lst in test_list:\n        for item in lst:\n            # converts the item to a float\n            list_1.append(float(item))\n    return list_1\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split(\" \")\n    return list\n    \ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a string.\n    '''\n    str = \" \".join(list)\n    return str\n    \ndef yes_or_no(question): \n    '''\n    Write a function that returns the user's answer in yes or no.\n    '''\n    while True:\n        user_answer = input(question).lower()\n        if user_answer in ['y', 'yes']:\n            return True\n        elif user_answer in ['n', 'no']:\n            return False\n        else:\n            print(\"Please enter 'y' or 'n'.\")\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # use split to split the string into a list\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split() \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = string.split()\n    return list_of_words\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    counter = dict()\n    for i in arr:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    for i, c in sorted(counter.items(), key=lambda item:item[1]):\n        if c == 1:\n            return i\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in arr:\n        if i == arr[-1]:\n            continue\n        else:\n            l = 0\n            h = len(arr) - 1\n            while l <= h:\n                mid = l + (h - l) // 2\n                if i == arr[mid]:\n                    break\n                elif i > arr[mid]:\n                    l = mid + 1\n                else:\n                    h = mid - 1\n            if l == len(arr) - 1:\n                return arr[l]\n    return 'Not Found'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if arr[i] == arr[count]:\n            count += 1\n            if count == len(arr):\n                count = 0\n        else:\n            count = 0\n    return arr[count]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # your code goes here\n    seen = {}\n    for el in arr:\n        if el in seen:\n            seen[el] = seen[el]+1\n        else:\n            seen[el] = 1\n    print(seen)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    search_key = lambda x: x in arr\n    \n    if not arr:\n        return -1\n    \n    # NOTE: We only want to look at elements that occur only once.\n    # we can assume that we're looking at only one element in the array.\n    return find_unique(arr, search_key)\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start + end)//2\n        if mid == 0:\n            if arr[mid] == arr[mid-1]:\n                end = mid-1\n            else:\n                return arr[mid]\n        elif mid == len(arr)-1:\n            if arr[mid] == arr[mid+1]:\n                start = mid+1\n            else:\n                return arr[mid]\n        elif arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] < arr[mid-1]:\n            if arr[mid] > arr[mid+1]:\n                return arr[mid]\n            else:\n                start = mid+1\n        elif arr[mid] < arr[mid+1]:\n            if arr[mid] < arr[mid-1]:\n                return arr[mid]\n            else:\n                end = mid-1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # You can use two pointer, 1. O(log n), 2. O(n)\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if arr[middle] == arr[middle - 1]:\n            middle -= 1\n        if arr[middle] == arr[middle + 1]:\n            middle += 1\n        if arr[middle] < arr[middle - 1]:\n            left = middle + 1\n        elif arr[middle] > arr[middle + 1]:\n            right = middle - 1\n        else:\n            return arr[middle]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # arr = [1,1,2,2,2,3,3,3,4,4,5,5,5,6]\n    # arr.sort()\n    # print(arr)\n    # count = 0\n    # for i in range(len(arr)):\n    #     for j in range(i + 1, len(arr)):\n    #         if arr[j] == arr[i]:\n    #             count += 1\n    #         elif arr[j] < arr[i]:\n    #             count -= 1\n    #             break\n    # print(count)\n    # return arr[count]\n    print(len(arr))\n    if len(arr) < 2:\n        return arr[0]\n    mid = len(arr) // 2\n    print(mid)\n    for i in range(mid, len(arr)):\n        if arr[i]!= arr[mid]:\n            return arr[i]\n    return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if arr[mid] == arr[mid + 1]:\n            return arr[mid]\n        elif arr[mid] < arr[mid + 1]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return arr[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if list1==[] or list1==None:\n        raise Exception(\"Cannot find a valid value in the list\")\n    elif len(list1)==1:\n        return list1[0][0]\n    elif len(list1)==2:\n        return list1[0][0] * list1[1][0]\n    else:\n        result = 1\n        for i in range(len(list1)-1):\n            if list1[i][0] < list1[i+1][0]:\n                result *= list1[i][0]\n            else:\n                result *= list1[i+1][0]\n        return result\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            prod = list1[i][1] * list1[j][1]\n            if prod > max_product:\n                max_product = prod\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2=list(map(lambda x:x[0]*x[1],list1))\n    return max(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(map(max, zip(*list1)))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = float('-inf')\n    index1 = 0\n    index2 = 0\n    for index in range(len(list1) - 1):\n        temp_prod = list1[index][1] * list1[index + 1][1]\n        if max_prod < temp_prod:\n            max_prod = temp_prod\n            index1 = index\n            index2 = index + 1\n    return (max_prod, index1, index2)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    pairs = []\n    for x in list1:\n        for y in list1:\n            if x[0] + y[0] == x[1] + y[1]:\n                pairs.append([x,y])\n    if len(pairs) == 0:\n        return None\n    return max(pairs, key=lambda x: abs(x[0][0] - x[1][0]))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0][0] * list1[1][0]\n    for i in range(1, len(list1)):\n        max_product = max(max_product, list1[i][0] * list1[i][1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_ = float('-inf')\n    max_i = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] * list1[j] > max_:\n                max_ = list1[i] * list1[j]\n                max_i = i\n    return list1[max_i]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = -float('inf')\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            curr_prod = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if curr_prod > max_prod:\n                max_prod = curr_prod\n    return max_prod\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sums = []\n    sum = 0\n    \n    for number in range(1,limit+1):\n        if is_amicable(number):\n            sum += number\n            if is_amicable(number+1) and is_amicable(number+2):\n                sum += number+2\n            \n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for number in range(1, limit + 1):\n        if is_amicable(number):\n            sum += number\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        # find next divisor\n        num_divisors = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                num_divisors += i\n        # if divisors are equal\n        if num_divisors == 2:\n            return True\n        # else return False\n        return False\n    \n    def check_amicable(n):\n        # find the first divisor\n        first_divisor = 1\n        num = 0\n        while num < n:\n            num += first_divisor\n            first_divisor *= 10\n        # check if it is amicable\n        if num!= n:\n            return False\n        # else return true\n        return True\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    for num in range(1,limit+1):\n        if num == 1:\n            continue\n        if num == 2:\n            continue\n        if num == 3:\n            continue\n        for i in range(num,0,-1):\n            if i!= 1:\n                if num % i == 0:\n                    num = num // i\n                    continue\n            amicable_numbers.append(num)\n    amicable_numbers_sum = sum(amicable_numbers)\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    amicable_numbers_sum += sum(range(1, limit+1))\n    for x in range(1, limit+1):\n        if x == 2 and sum(range(1, limit+1)) == 1:\n            break\n        if x % 2 == 0 and sum(range(1, limit+1)) % 2 == 0:\n            if x % 3 == 0 and sum(range(1, limit+1)) % 3 == 0:\n                amicable_numbers_sum += x\n            else:\n                continue\n        if x % 2 == 0:\n            if sum(range(1, limit+1)) % 2 == 0:\n                amicable_numbers_sum += x\n            else:\n                continue\n        if x % 3 == 0:\n            if sum(range(1, limit+1)) % 3 == 0:\n                amicable_numbers_sum += x\n            else:\n                continue\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit):\n        if is_amicable(num) and is_sum(num):\n            sum += num\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(filter(lambda x: x % 2 == 0, range(1, limit + 1)))\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    num = 1\n    while num <= limit:\n        if num % 2!= 0:\n            amicable_numbers.append(num)\n        num += 1\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_list = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    amicable_numbers = []\n    for i in range(1, limit):\n        if (i == 2) or (i == 3) or (i == 5) or (i == 7) or (i == 11) or (i == 13):\n            continue\n        if i not in amicable_numbers:\n            sum_amicable_numbers += i\n            amicable_numbers.append(i)\n    return sum_amicable_numbers\n    \ndef sum_of_primes(limit):\n    '''\n    Write a function that returns the sum of all primes up to and including\n    the specified number.\n    '''\n    sum_of_primes = 0\n    for i in range(2, limit):\n        if prime_is_prime(i):\n            sum_of_primes += i\n    return sum_of_primes\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 2*math.acos(complex(a.real,b.real).imag)\n    return angle\ndef angle_sqrt(a):\n    '''\n    Write a function to calculate the square root of a complex number.\n    '''\n    return complex(math.sqrt(a.real),math.sqrt(a.imag))\ndef phase_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    phase = 2*math.acos(complex(a.real,b.real).imag)\n    return phase\ndef phase_sqrt(a):\n    '''\n    Write a function to calculate the square root of a complex number.\n    '''\n    return complex(math.sqrt(a.real),math.sqrt(a.imag))\ndef phase_angle(a):\n    '''\n    Write a function to calculate the angle of a complex number.\n    '''\n    angle = 2*math.acos(complex(a.real,b.real).imag)\n    return angle\ndef magnitude(a):\n    '''\n    Write a function to calculate the magnitude of a complex number.\n    '''\n    return a.real**2 + a.imag**2\ndef magnitude_sqrt(a):\n    '''\n    Write a function to calculate the square root of a complex number.\n    '''\n    return complex(a.real**2+a.imag**2,0)\ndef phase_phase(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    return 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\ndef phase_angle_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_angle_sqrt(a):\n    '''\n    Write a function to calculate the square root of a complex number.\n    '''\n    return complex(a.real**2+a.imag**2,0)\ndef phase_angle_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\ndef phase_angle_complex_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_angle_complex_sqrt(a):\n    '''\n    Write a function to calculate the square root of a complex number.\n    '''\n    return complex(a.real**2+a.imag**2,0)\ndef phase_angle_phase(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    return 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\ndef phase_angle_angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_angle_angle_complex_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_angle_phase_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\ndef phase_angle_phase_complex_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_phase(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    return 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\ndef phase_phase_complex_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_complex_complex_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_phase_complex_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_phase_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\ndef phase_phase_angle_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_complex_complex_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_angle_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_complex_complex_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_complex_phase_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef phase_phase_complex_phase_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 2*math.atan2(complex(a.real,b.real).imag,complex(a.real,b.imag).imag)\n    return angle\ndef magnitude_complex(a)"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a < 0:\n        a = -a\n        b = -b\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #p = cmath.sqrt(b**2-4*a*cmath.cos(b))\n    return abs(cmath.acos(a/b))*180/math.pi\n    \ndef angle_complex_tr(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(cmath.acos(a/b))*180/math.pi\n    \ndef angle_complex_div(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    p = cmath.sqrt(b**2-4*a*cmath.cos(b))\n    if p == 0:\n        return 180\n    else:\n        return 180/math.pi*math.asin(p/b)\n    \ndef angle_complex_div_tr(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(cmath.acos(a/b))*180/math.pi*math.asin(a/b)\n    \ndef sin_complex(a):\n    '''\n    Write a function to get the sine of a complex number.\n    '''\n    return cmath.sin(a)\n    \ndef cos_complex(a):\n    '''\n    Write a function to get the cosine of a complex number.\n    '''\n    return cmath.cos(a)\n    \ndef exp_complex(a):\n    '''\n    Write a function to get the exponential of a complex number.\n    '''\n    return cmath.exp(a)\n    \ndef tan_complex(a):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef sqrt_complex(a):\n    '''\n    Write a function to get the square root of a complex number.\n    '''\n    return cmath.sqrt(a)\n    \ndef log_complex(a):\n    '''\n    Write a function to get the logarithm of a complex number.\n    '''\n    return cmath.log(a)\n    \ndef sign_complex(a):\n    '''\n    Write a function to get the sign of a complex number.\n    '''\n    return cmath.sign(a)\n    \ndef factorial_complex(a):\n    '''\n    Write a function to get the factorial of a complex number.\n    '''\n    return cmath.factorial(a)\n    \ndef trig_complex(a):\n    '''\n    Write a function to get the trigonometric value of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef exp_trig_complex(a):\n    '''\n    Write a function to get the exponential of a complex number.\n    '''\n    return cmath.exp(a)\n    \ndef factorial_trig_complex(a):\n    '''\n    Write a function to get the factorial of a complex number.\n    '''\n    return cmath.factorial(a)\n    \ndef tan_trig_complex(a):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef exp_trig_trig_complex(a):\n    '''\n    Write a function to get the exponential of a complex number.\n    '''\n    return cmath.exp(a)\n    \ndef tan_trig_trig_complex(a):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef sin_trig_complex(a):\n    '''\n    Write a function to get the sine of a complex number.\n    '''\n    return cmath.sin(a)\n    \ndef cos_trig_complex(a):\n    '''\n    Write a function to get the cosine of a complex number.\n    '''\n    return cmath.cos(a)\n    \ndef tan_trig_trig_complex(a):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef pow_trig_complex(a,b):\n    '''\n    Write a function to get the pow of a complex number.\n    '''\n    return cmath.pow(a,b)\n    \ndef exp_pow_complex(a,b):\n    '''\n    Write a function to get the exponent of a complex number.\n    '''\n    return cmath.exp(a)\n    \ndef tan_pow_complex(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef exp_pow_trig_complex(a,b):\n    '''\n    Write a function to get the exponent of a complex number.\n    '''\n    return cmath.exp(a)\n    \ndef tan_pow_trig_complex(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef sqrt_pow_complex(a,b):\n    '''\n    Write a function to get the square root of a complex number.\n    '''\n    return cmath.sqrt(a)\n    \ndef log_pow_complex(a,b):\n    '''\n    Write a function to get the logarithm of a complex number.\n    '''\n    return cmath.log(a)\n    \ndef sign_pow_complex(a,b):\n    '''\n    Write a function to get the sign of a complex number.\n    '''\n    return cmath.sign(a)\n    \ndef tan_sqrt_complex(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef exp_sqrt_complex(a,b):\n    '''\n    Write a function to get the exponential of a complex number.\n    '''\n    return cmath.exp(a)\n    \ndef tan_sqrt_complex(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef sin_sqrt_complex(a,b):\n    '''\n    Write a function to get the sine of a complex number.\n    '''\n    return cmath.sin(a)\n    \ndef cos_sqrt_complex(a,b):\n    '''\n    Write a function to get the cosine of a complex number.\n    '''\n    return cmath.cos(a)\n    \ndef tan_sqrt_complex(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef log_sqrt_complex(a,b):\n    '''\n    Write a function to get the logarithm of a complex number.\n    '''\n    return cmath.log(a)\n    \ndef sign_sqrt_complex(a,b):\n    '''\n    Write a function to get the sign of a complex number.\n    '''\n    return cmath.sign(a)\n    \ndef tan_log_complex(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef exp_log_complex(a,b):\n    '''\n    Write a function to get the exponent of a complex number.\n    '''\n    return cmath.exp(a)\n    \ndef tan_log_complex(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef tan_log_trig_complex(a,b):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return cmath.tan(a)\n    \ndef exp_log_trig"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c1 = complex(a,b)\n    deg = cmath.phase(c1)\n    return deg\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    numerator = a[0]*b[1]+a[1]*b[0]\n    denominator = abs(a[0])*abs(b[1])\n    return cmath.acos(numerator/denominator)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag == b.imag:\n        theta = cmath.phase(a.real - b.real)\n        if theta >= 0:\n            return theta\n        else:\n            return 360 + theta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(a,b)\n    return(abs(a.imag**2+b.imag**2))**0.5\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=cmath.phase(a)*cmath.phase(b)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b) - cmath.phase(a)\n    angle = math.degrees(angle)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==b:\n        angle=0\n    elif a.imag!=0 and b.imag!=0:\n        angle = cmath.phase(a.real*b.imag-a.imag*b.real)\n    elif a.imag==0 and b.imag==0:\n        angle = 0\n    elif a.imag==0 and b.imag!=0:\n        angle = cmath.phase(a.real*b.imag-a.imag*b.real)\n    elif a.imag!=0 and b.imag!=0:\n        angle = cmath.phase(a.imag*b.real+a.imag*b.imag-b.imag*a.real)\n    else:\n        angle=2*acos((a.imag*b.imag+b.imag*a.imag-a.imag*b.imag-a.imag*b.imag)\n        /(2*a.real*b.real))\n        if angle>=0:\n            angle=angle+2*pi\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    arr = []\n    for i in string:\n        arr.append(bin(ord(i)).replace('0b',''))\n    print(arr)\n    c = 0\n    for i in arr:\n        for j in range(len(i)):\n            if i[j] == '0':\n                c+=1\n        print('{0} has a length of {1}'.format(i,c))\n        c = 0\n    return c\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    for i in range(len(string)):\n        temp = string[i:].count('0')\n        ans = max(ans, temp)\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    sum = 0\n    for i in range(len(string)):\n        sum += int(string[i])\n    return sum - 1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    c = {'0': 0, '1': 1}\n    ans = 0\n    for i in range(n):\n        if string[i] == '0':\n            ans += c['0']\n            c['0'] = 0\n        if string[i] == '1':\n            ans += c['1']\n            c['1'] = 0\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Start at first index (index 0) \n    # If the index is at the end of the string, return -1\n    # If the index is at the beginning of the string, return 0\n    # Compare the index with the next index (if it is smaller than 0), add 1\n    # If the next index is smaller than 0, return 0\n    # If the next index is greater than 0, return -1\n    \n    max_length = 0\n    prev = 0\n    curr = 0\n    index = 0\n    for i in range(len(string)):\n        # Compare the index with the next index (if it is smaller than 0), add 1\n        # If the next index is smaller than 0, return 0\n        # If the next index is greater than 0, return -1\n        if string[i] == '0':\n            curr += 1\n            # If the previous index is greater than 0, return -1\n            # If the next index is smaller than 0, return 0\n            # If the next index is greater than 0, return -1\n            # Find the length of the longest substring with 0s\n            if prev == 0:\n                max_length = max(max_length, curr)\n            # Find the length of the longest substring with 1s\n            else:\n                max_length = max(max_length, curr)\n            # If the next index is greater than 0, return -1\n            # If the next index is less than 0, return 0\n            # If the next index is greater than 0, return -1\n            # If the next index is less than 0, return 0\n            # Update the previous index\n            prev = curr\n            curr = 0\n        else:\n            # If the next index is greater than 0, return -1\n            # If the next index is less than 0, return 0\n            # Find the length of the longest substring with 1s\n            if prev == 0:\n                max_length = max(max_length, curr)\n            else:\n                max_length = max(max_length, curr)\n            # Find the length of the longest substring with 0s\n            else:\n                max_length = max(max_length, curr)\n            # Update the next index\n            curr = 1\n            prev = 0\n    # If there is a substring with 0s and 1s, return max_length\n    # If there is a substring with 1s and 0s, return -1\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    # print(string)\n    max_diff = 0\n    # print(string[0])\n    for i in range(0, n-1):\n        if string[i] == string[i+1] == '0':\n            # print(string[i], string[i+1])\n            # print(i)\n            # print(string[i+1])\n            # print(i)\n            # print(string[i+1])\n            # print(string[i+2])\n            # print(string[i+3])\n            # print(string[i+4])\n            # print(string[i+5])\n            diff = abs(int(string[i+1]) - int(string[i+2]))\n            # print(diff)\n            # print(string[i])\n            # print(string[i+1])\n            # print(string[i+2])\n            # print(string[i+3])\n            # print(string[i+4])\n            # print(string[i+5])\n            # print(\"\\n\")\n            # print(string[i])\n            # print(string[i+1])\n            # print(string[i+2])\n            # print(string[i+3])\n            # print(string[i+4])\n            # print(string[i+5])\n            # print(\"\\n\")\n            max_diff = max(diff, max_diff)\n            # print(max_diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) <= 0: \n        raise ValueError(\"Binary string is empty.\")\n    elif len(string) == 1:\n        return 0\n    elif string[0] == '0': \n        return 1\n    else:\n        return 1 + find_length(string[1:]) \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    sub = string[::-1]\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(sub)):\n        if sub[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    return count_0 - count_1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    for i in range(len(string)):\n        result = (result + sum([int(x) for x in string[i:i+2]]))\n    return resul"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b: \n        return a \n    if b == 0: \n        return 0\n    if a % b == 0: \n        return b \n    else: \n        return b + sum(a, b - a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return 0\n    return a+b+sum(a,b-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum(a,b) // max(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # init values\n    c = 0\n    d = 0\n    # loop\n    for i in range(0,b):\n        d = a//b\n        c+=d\n        a = a%b\n    return c"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    for i in range(a,b+1):\n        if gcd(a,i) == 1:\n            return i\n        if gcd(b,i) == 1:\n            return i\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a==b):\n        return a\n    else:\n        return int(a/b)\n    \ndef main():\n    print(\"Enter the numbers: \")\n    a = int(input())\n    b = int(input())\n    print(\"Enter the values of common divisors\")\n    for i in range(1,100):\n        print(f\"{i} = {sum(a,b)}\")\n        \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    #Divide the given numbers by a and b.\n    c=b//a\n    #Return c value.\n    return c\n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def sum_div(a, b):\n        # a= int(a)\n        # b=int(b)\n        if a==0:\n            return 0\n        return (a//b)*sum_div(a%b,b)\n    return sum_div(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    assert (type(a)==int and type(b)==int), 'Numbers must be integers'\n    a=a//b\n    if a%b!=0:\n        return a//b\n    return sum(a,b)"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a+b)%2==0:\n        return a+b \n    elif (a%2==0) and (b%2==0):\n        return a+b\n    elif (a%2!=0) and (b%2!=0):\n        return a+(b+(a//2))\n    else:\n        return \"Something went wrong. Try again\"\n        \n        "
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    def multiply(x, y):\n        return x * y\n    return multiply(x,y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x > y:\n        return x * y\n    else:\n        return y * x\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not type(x) == int or not type(y) == int:\n        return \"TypeError\"\n    \n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    assert x >= 0 and y >= 0, 'Arguments must be positive'\n    assert x + y == (x*y), 'Second argument must be an integer'\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x < 0 or y < 0:\n        raise ValueError('Positive integers only.')\n    \n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x < 0 or y < 0:\n        raise ValueError(\"x and y must be non-negative.\")\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return x\n    else:\n        return x * multiply_int(y, x)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    multiply_val = x * y\n    return multiply_val\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # write your code here\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    biggest = 0\n    big_word = \"\"\n    for i in range(n):\n        if len(str[i]) > biggest:\n            biggest = len(str[i])\n            big_word = str[i]\n    return big_word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    long_list = []\n    word_len = []\n    \n    for word in str:\n        if len(word) > n:\n            long_list.append(word)\n            word_len.append(len(word))\n            \n    word_list = sorted(long_list, key = len, reverse = True)\n    \n    for i in range(0,len(word_list)-n):\n        print(word_list[i], word_len[i])\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # All letters in string\n    word_list = str.split()\n    # Create a dictionary for word length\n    word_length_dict = {}\n    # Loop through each word\n    for word in word_list:\n        # Add word length to dictionary\n        word_length_dict[len(word)] = word\n    # Remove the highest length word from dictionary\n    word_length_dict.pop(max(word_length_dict.values()))\n    # Return word list\n    return word_length_dict\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for word in str.split(' '):\n        if len(word) > n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    print('long_words function')\n    if str == None or type(str)!= list or str == '':\n        print('Empty string passed.')\n        return\n    print('\\nstr = {}'.format(str))\n    if n < 2 or n > len(str):\n        print('n > 2 and n < {}'.format(len(str)))\n        return\n    print('n = {}'.format(n))\n    print('len(str) = {}'.format(len(str)))\n    \n    if n == 1:\n        word = str[0]\n        print('\\nword = {}'.format(word))\n        return word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Create a word list\n    words = []\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    my_words = []\n    for word in str.split():\n        if len(word) > n:\n            my_words.append(word)\n    return my_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # create 2d array\n    magic_square = []\n    for i in range(len(my_matrix)):\n        row = []\n        for j in range(len(my_matrix)):\n            row.append(my_matrix[i][j])\n        magic_square.append(row)\n    # check row\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= 1:\n            return False\n    # check column\n    for i in range(len(my_matrix)):\n        if my_matrix[i][len(my_matrix)-1-i]!= 1:\n            return False\n    # check block\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)-1):\n            if my_matrix[i][j]!= my_matrix[i][j+1] or my_matrix[j][len(my_matrix)-1-i]!= my_matrix[j+1][len(my_matrix)-1-i]:\n                return False\n    # check diagonal\n    for i in range(len(my_matrix)-1):\n        if my_matrix[i][i]!= 1:\n            return False\n    for i in range(len(my_matrix)-1, len(my_matrix)):\n        if my_matrix[i][i]!= 1:\n            return False\n    # checks if all the elements are equal\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[i][j+1]:\n                return False\n    # checks if any of the elements in the diagonal are equal\n    for i in range(len(my_matrix)-1):\n        for j in range(i+1, len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[i+1][j] or my_matrix[j][i]!= my_matrix[j+1][i]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if all(my_matrix[i][i] == 0 for i in range(len(my_matrix))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(my_matrix.shape[0]):\n        for j in range(my_matrix.shape[1]):\n            if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n                return False\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n    \ndef magic_square_test_2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_3(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_4(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_5(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_6(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_7(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_8(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    # return True\n    \ndef magic_square_test_9(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_10(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_11(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_12(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_13(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # for i in range(my_matrix.shape[0]):\n    #     for j in range(my_matrix.shape[1]):\n    #         if i == j or i + j == my_matrix.shape[0] - 1 or j + i == my_matrix.shape[1] - 1:\n    #             return False\n    #         if my_matrix[i][j]!= 0:\n    #             return False\n    return True\n    \ndef magic_square_test_14(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    ''"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0,len(my_matrix)):\n        for j in range(0,len(my_matrix[0])):\n            if my_matrix[i][j]!= 0:\n                if (i + j) % 2 == 0:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    #Vertical\n    if my_matrix[0][0]!= 0:\n        return False\n    \n    #Horizontal\n    if my_matrix[0][1]!= 0:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in range(len(my_matrix)):\n        for column in range(len(my_matrix[0])):\n            if my_matrix[row][column]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # create a matrix using numpy\n    my_matrix = np.matrix(my_matrix)\n    # calculate the determinant\n    det = my_matrix.I * my_matrix.T\n    # check for the determinant to be 0\n    if det!= 0:\n        # if it is\n        return True\n    else:\n        # if it is not\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in my_matrix:\n        row.sort()\n        if row[0]!= row[-1]:\n            return False\n        if row[0]!= row[-1]:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix_checker = []\n    if is_magic_square(my_matrix):\n        for row in my_matrix:\n            my_matrix_checker.append(row)\n        return my_matrix_checker\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return all(row[row_index] == row[row_index + 1] for row in my_matrix for row_index in range(len(row) - 1))\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = {}\n    for n in nums:\n        if n in freq:\n            freq[n] += 1\n        else:\n            freq[n] = 1\n    max_freq = -1\n    for n, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_occurr = n\n    return max_occurr\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    for num in nums:\n        if num > max_freq:\n            max_freq = num\n    return max_freq\ndef build_freq_dict(nums):\n    '''\n    Build a frequency dictionary from a list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    return freq\ndef top_n(nums, freq):\n    '''\n    Sort the given list by frequency and return the top n items\n    '''\n    top = []\n    for num in nums:\n        top.append((num, freq[num]))\n    top.sort()\n    return top[-n:]\ndef freq_heap(freq_dict, max_freq):\n    '''\n    Build a heap from the given frequency dictionary and return an array\n    of sorted items.\n    '''\n    freq_heap = []\n    heap_max = max_freq - 1\n    for item in freq_dict:\n        if freq_dict[item] > heap_max:\n            heap_max = freq_dict[item]\n        freq_heap.append(item)\n    heapq.heapify(freq_heap)\n    return heapq.nlargest(n=len(freq_heap), key=lambda x: freq_dict[x])\ndef build_min_freq_dict(nums):\n    '''\n    Build a minimum frequency dictionary from a list.\n    '''\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = 0\n    for num in nums:\n        freq_dict[num] = freq_dict[num] + 1\n    return freq_dict\ndef min_freq_heap(freq_dict, min_freq):\n    '''\n    Sort the given frequency dictionary from the smallest to largest\n    and return the top n items.\n    '''\n    min_heap = []\n    for num in freq_dict:\n        if freq_dict[num] < min_freq:\n            min_freq = freq_dict[num]\n            min_freq_idx = num\n    for num in nums:\n        if freq_dict[num] < min_freq:\n            min_freq = freq_dict[num]\n            min_freq_idx = num\n    heapq.heappush(min_heap, (min_freq, min_freq_idx))\n    return heapq.nsmallest(n=len(min_heap), key=lambda x: freq_dict[x[1]])\ndef merge_sort(nums):\n    '''\n    Sort the given list by size and return the top n items.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums) // 2\n    left = nums[:mid]\n    right = nums[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\ndef merge(left, right):\n    '''\n    Merge two sorted lists and return a new list\n    '''\n    result = []\n    left_idx = 0\n    right_idx = 0\n    while len(left) > left_idx and len(right) > right_idx:\n        if left[left_idx] < right[right_idx]:\n            result.append(left[left_idx])\n            left_idx += 1\n        else:\n            result.append(right[right_idx])\n            right_idx += 1\n    if left_idx < len(left):\n        while len(left) > left_idx:\n            result.append(left[left_idx])\n            left_idx += 1\n    if right_idx < len(right):\n        while len(right) > right_idx:\n            result.append(right[right_idx])\n            right_idx += 1\n    return result\ndef top_k(nums, k):\n    '''\n    Return the top k most frequent elements of a given list.\n    '''\n    top_k_list = []\n    for num in nums:\n        top_k_list.append(num)\n        if len(top_k_list) == k:\n            break\n    return top_k_list\ndef quick_sort(nums):\n    '''\n    Sort the given list in ascending order by frequency and return\n    the top k items.\n    '''\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[0]\n    left = [i for i in nums[1:] if i <= pivot]\n    right = [i for i in nums[1:] if i > pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\ndef quick_sort_2(nums):\n    '''\n    Sort the given list in ascending order by frequency and return\n    the top k items.\n    '''\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[0]\n    left = [i for i in nums[1:] if i <= pivot]\n    right = [i for i in nums[1:] if i > pivot]\n    return quick_sort_2(left) + [pivot] + quick_sort_2(right)\ndef quick_sort_recursive(nums):\n    '''\n    Sort the given list in ascending order by frequency and return\n    the top k items.\n    '''\n    def partition(left, right, k):\n        if left == right:\n            return left\n        pivot = left + (right - left) // 2\n        pivot_idx = pivot\n        for i in range(left, right):\n            if nums[i] < nums[pivot_idx]:\n                pivot_idx += 1\n        return pivot_idx\n    def quick_sort_recursive(left, right, k):\n        if left < right:\n            pivot_idx = partition(left, right, k)\n            quick_sort_recursive(left, pivot_idx - 1, k)\n            quick_sort_recursive(pivot_idx + 1, right, k)\n    return quick_sort_recursive(0, len(nums) - 1, len(nums))\ndef count_sort(nums):\n    '''\n    Sort the given list in ascending order by frequency and return\n    the top n items.\n    '''\n    max_freq = 0\n    for num in nums:\n        if num > max_freq:\n            max_freq = num\n    return max_freq\ndef heap_sort(nums):\n    '''\n    Sort the given list in ascending order by frequency and return\n    the top n items.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    for _ in range(len(heap) - 1, 0, -1):\n        heapq.heappop(heap)\n    return heap\ndef heap_sort_2(nums):\n    '''\n    Sort the given list in ascending order by frequency and return\n    the top n items.\n    '''\n    heap = [0] * len(nums)\n    for i, num in enumerate(nums):\n        heapq.heappush(heap, num)\n        while heap[0] < heap[-1]:\n            heapq.heapreplace(heap, heap[0])\n            heapq.heappop(heap)\n        if heap[0] < heap[-1]:\n            heapq.heapreplace(heap, heap[0])\n    return heap\ndef heap_sort_3(nums):\n    '''\n    Sort the given list in ascending order by frequency and return\n    the top n items.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > 1:\n            heapq.heappush(heap, heapq.heappop"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for num in nums:\n        counter[num] += 1\n    result = 0\n    max_freq = 0\n    for num in counter:\n        if counter[num] > max_freq:\n            max_freq = counter[num]\n            result = num\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    for i in nums:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n    return max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrence = 0\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    for num in nums:\n        if num > max_freq:\n            max_freq = num\n    return max_freq\ndef ncr(n, r):\n    \"\"\"\n    https://www.geeksforgeeks.org/n-cr-n-queen-puzzle-solution-using-python/\n    https://www.youtube.com/watch?v=qXfRJfYv0kI\n    Time complexity: O(n*r)\n    Space complexity: O(r)\n    :param n: Number of rows\n    :param r: Number of columns\n    :return:\n    \"\"\"\n    numerator = 1\n    denominator = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Write your code here\n    dic = {}\n    freq = 0\n    for num in nums:\n        if num not in dic:\n            dic[num] = 1\n        else:\n            dic[num] += 1\n            if dic[num] > freq:\n                freq = dic[num]\n                max_freq = num\n    return max_freq\ndef count_occurrences(nums):\n    '''\n    Given a list of integers, return the number of occurrences.\n    '''\n    # Write your code here\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] in nums:\n            count += 1\n    return count\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    items = defaultdict(list)\n    for i in nums:\n        items[i].append(1)\n    maximum = 0\n    for key, value in items.items():\n        if len(value) > maximum:\n            maximum = len(value)\n            index = value.index(maximum)\n    return nums[index]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # write your code here\n    max_freq = defaultdict(int)\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = str1.split()\n    reverse_s = \"\"\n    for item in s:\n        if item in vowels:\n            reverse_s = reverse_s + item[::-1] + \" \"\n    print(reverse_s)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = list(str1)\n    for i in range(len(l)):\n        if l[i] in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n            temp = l[i]\n            l[i] = l[len(l)-1-i]\n            l[len(l)-1-i] = temp\n    return ''.join(l)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n    reversed_vowels = \"\"\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            reversed_vowels += str1[i].lower()\n            \n    return reversed_vowels\n    "
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = 'aeiouAEIOU'\n    \n    str1 = str1.lower()\n    \n    reversed_str1 = ''\n    \n    for letter in str1:\n        if letter in vowels:\n            reversed_str1 = letter + reversed_str1\n        else:\n            reversed_str1 = reversed_str1 + letter\n    \n    return reversed_str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_dict = {'a':'e', 'i':'o', 'u':'u', 'A':'E', 'I':'O', 'U':'U'}\n    # Keep adding vowels until they are not a vowel\n    for letter in str1:\n        if letter.lower() not in vowel_dict:\n            vowel_dict[letter.lower()] = 'a'\n        else:\n            break\n    return ''.join(vowel_dict.keys())\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_count = 0\n    vowels = \"aeiouAEIOU\"\n    for letter in str1:\n        if letter in vowels:\n            vowel_count += 1\n    vowel_count = vowel_count -1\n    return str1[vowel_count:]+str1[0:vowel_count]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join([str1[i] for i, char in enumerate(str1) if char in VOWELS and char not in VOWELS])\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # your code goes here\n    str1_vowels = []\n    for i in str1:\n        if i in ('a', 'e', 'i', 'o', 'u'):\n            str1_vowels.append(i)\n    str1_vowels.reverse()\n    result = ''.join(str1_vowels)\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = str1[::-1]\n    return str2\n    \ndef is_vowel(char):\n    '''\n    write a python function to determine whether a character is a vowel or consonant.\n    '''\n    return (char in 'aeiou')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1 = str1.lower()\n    new_str = ''\n    for i in str1:\n        if i in vowels:\n            new_str += i\n            continue\n        new_str += i\n    return new_str\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a = []\n    for i in tup1:\n        a.append(str(i))\n    return '(' + ', '.join(a) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join([str(item) for item in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n    \ndef tup_to_list(tup):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tup)\n    \ndef tup_list_to_tup(list1):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(list1)\n    \ndef merge_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    result = dict()\n    for key in dict1:\n        result[key] = dict1[key]\n    for key in dict2:\n        result[key] = dict2[key]\n    return result\n    \ndef merge_dict_rec(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries recursively.\n    '''\n    result = dict()\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key]\n        else:\n            result[key] = dict2[key]\n    return result\n    \ndef get_min(tup1, tup2):\n    '''\n    Write a function to get the minimum value from two sorted tuples.\n    '''\n    min1 = get_min_index(tup1)\n    min2 = get_min_index(tup2)\n    return tup1[min1], tup2[min2]\n    \ndef get_min_index(tup):\n    '''\n    Write a function to get the minimum index from a sorted tuple.\n    '''\n    min = 0\n    for i in range(len(tup)):\n        if tup[i] < tup[min]:\n            min = i\n    return min\n    \ndef min_tuple_list(tup):\n    '''\n    Write a function to get the minimum value from a sorted tuple.\n    '''\n    min = float(\"inf\")\n    for i in range(len(tup)):\n        if tup[i] < min:\n            min = tup[i]\n    return min\n    \ndef get_max(tup1, tup2):\n    '''\n    Write a function to get the maximum value from two sorted tuples.\n    '''\n    max1 = get_max_index(tup1)\n    max2 = get_max_index(tup2)\n    return tup1[max1], tup2[max2]\n    \ndef get_max_index(tup):\n    '''\n    Write a function to get the maximum index from a sorted tuple.\n    '''\n    max = 0\n    for i in range(len(tup)):\n        if tup[i] > max:\n            max = tup[i]\n    return max\n    \ndef max_tuple_list(tup):\n    '''\n    Write a function to get the maximum value from a sorted tuple.\n    '''\n    max = float(\"-inf\")\n    for i in range(len(tup)):\n        if tup[i] > max:\n            max = tup[i]\n    return max\n    \ndef bubble_sort(tup1):\n    '''\n    Write a function to sort a tuple in ascending order.\n    '''\n    for i in range(len(tup1) - 1):\n        for j in range(len(tup1) - 1 - i):\n            if tup1[j] > tup1[j + 1]:\n                tup1[j], tup1[j + 1] = tup1[j + 1], tup1[j]\n    return tup1\n    \ndef compare_lists(list1, list2):\n    '''\n    Write a function to compare two lists.\n    '''\n    result = True\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            result = False\n            break\n    return result\n    \ndef compare_dict(dict1, dict2):\n    '''\n    Write a function to compare two dictionaries.\n    '''\n    result = True\n    for key in dict1:\n        if key in dict2:\n            result = False\n            break\n    return result\n    \ndef compare_dict_rec(dict1, dict2):\n    '''\n    Write a function to compare two dictionaries recursively.\n    '''\n    result = True\n    for key in dict1:\n        if key in dict2:\n            result = False\n            break\n    return result\n    \ndef is_palindrome(tup):\n    '''\n    Write a function to check if a tuple is a palindrome.\n    '''\n    return tup == tup[::-1]\n    \ndef print_list(tup):\n    '''\n    Write a function to print a list.\n    '''\n    print(tup)\n    \ndef is_sorted_list(tup1, tup2):\n    '''\n    Write a function to check if two sorted lists are equal.\n    '''\n    if len(tup1) == len(tup2):\n        return compare_lists(tup1, tup2)\n    return False\n    \ndef is_sorted_dict(dict1, dict2):\n    '''\n    Write a function to check if two sorted dictionaries are equal.\n    '''\n    if len(dict1) == len(dict2):\n        return compare_dict(dict1, dict2)\n    return False\n    \ndef is_sorted_list_rec(tup1, tup2):\n    '''\n    Write a function to check if two sorted lists are equal recursively.\n    '''\n    if len(tup1) == len(tup2):\n        return compare_lists_rec(tup1, tup2)\n    return False\n    \ndef is_sorted_dict_rec(dict1, dict2):\n    '''\n    Write a function to check if two sorted dictionaries are equal recursively.\n    '''\n    if len(dict1) == len(dict2):\n        return compare_dict_rec(dict1, dict2)\n    return False\n    \ndef get_frequency(tup):\n    '''\n    Write a function to get the frequency of the values in a sorted tuple.\n    '''\n    count = dict()\n    for i in range(len(tup)):\n        if tup[i] not in count:\n            count[tup[i]] = 1\n        else:\n            count[tup[i]] += 1\n    return count\n    \ndef check_k_occurrences(dict1, tup, k):\n    '''\n    Write a function to check if there are at least k unique values in a dictionary.\n    '''\n    occurrences = dict()\n    for i in range(len(dict1)):\n        if dict1[i] in occurrences and tup[i] in occurrences[dict1[i]]:\n            occurrences[dict1[i]][tup[i]] += 1\n        else:\n            occurrences[dict1[i]] = {tup[i]: 1}\n            \n    return occurrences\n    \ndef check_frequency(dict1, tup):\n    '''\n    Write a function to check if there are at least k unique values in a dictionary.\n    '''\n    if dict1!= tup:\n        return False\n    else:\n        return True\n    \ndef count_occurences(dict1, tup):\n    '''\n    Write a function to count the occurrences of a value in a dictionary.\n    '''\n    result = dict()\n    for i in range(len(dict1)):\n        if dict1[i] in result:\n            result[dict1[i]] += 1\n        else:\n            result[dict1[i]] = 1\n    return result\n    \ndef build_inverted_dict(dict1):\n    '''\n    Write a function to build a dictionary where every key is a word and its value is its frequency.\n    '''\n    result = dict()\n    for i in range(len(dict1)):\n        result[dict1[i]] = dict1[i]\n    return result\n    \ndef word_frequency(dict1, tup1, tup2):\n    '''\n    Write a function to count the frequenc"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = ''\n    for element in tup1:\n        str = str + str(element) + ','\n    return str\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    strt = '('\n    dots = '\\\\.'\n    for i in range(len(tup1)):\n        strt += str(tup1[i]) + dots\n        if i < len(tup1)-1:\n            strt += ','\n        else:\n            strt += ')'\n    return strt\n    \ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple to an integer.\n    '''\n    strt = '('\n    dots = '\\\\.'\n    for i in range(len(tup1)):\n        strt += str(tup1[i]) + dots\n        if i < len(tup1)-1:\n            strt += ','\n        else:\n            strt += ')'\n    return int(strt)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a=''\n    for tup in tup1:\n        a+=tup[0]+' '\n    return a\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # return str(tup1)\n    return 'tuple:'+ str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"({}, {})\".format(*tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join(tup1) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for i in tup1:\n        s += str(i) + \", \"\n    return s[:-2]\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n        else:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    def add_negatives(nums):\n        sum = 0\n        for num in nums:\n            if num < 0:\n                sum += num\n        return sum\n    return sum(map(add_negatives, nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total -= num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        s += num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(list(map(lambda x: abs(x), nums)))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Time: O(n)\n    # Space: O(1)\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    return sum(negatives)\n    # return sum(nums) - sum(negatives)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num = 0\n    for num in nums:\n        if num < 0:\n            negative_num += num\n    return negative_num\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 4\n    else: \n        return hexagonal_num(n - 1) + hexagonal_num(n - 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 6\n    elif n == 4: \n        return 10\n    elif n == 5: \n        return 15\n    elif n == 6: \n        return 18\n    elif n == 7: \n        return 21\n    elif n == 8: \n        return 24\n    elif n == 9: \n        return 27\n    elif n == 10: \n        return 30\n    elif n == 11: \n        return 35\n    elif n == 12: \n        return 38\n    elif n == 13: \n        return 41\n    elif n == 14: \n        return 44\n    elif n == 15: \n        return 47\n    elif n == 16: \n        return 50\n    elif n == 17: \n        return 55\n    elif n == 18: \n        return 58\n    elif n == 19: \n        return 61\n    elif n == 20: \n        return 64\n    elif n == 21: \n        return 67\n    elif n == 22: \n        return 70\n    elif n == 23: \n        return 75\n    elif n == 24: \n        return 78\n    elif n == 25: \n        return 81\n    elif n == 26: \n        return 84\n    elif n == 27: \n        return 87\n    elif n == 28: \n        return 90\n    elif n == 29: \n        return 95\n    elif n == 30: \n        return 98\n    elif n == 31: \n        return 101\n    elif n == 32: \n        return 104\n    elif n == 33: \n        return 107\n    elif n == 34: \n        return 110\n    elif n == 35: \n        return 115\n    elif n == 36: \n        return 118\n    elif n == 37: \n        return 121\n    elif n == 38: \n        return 126\n    elif n == 39: \n        return 130\n    elif n == 40: \n        return 135\n    elif n == 41: \n        return 138\n    elif n == 42: \n        return 141\n    elif n == 43: \n        return 146\n    elif n == 44: \n        return 150\n    elif n == 45: \n        return 157\n    elif n == 46: \n        return 160\n    elif n == 47: \n        return 165\n    elif n == 48: \n        return 168\n    elif n == 49: \n        return 171\n    elif n == 50: \n        return 174\n    elif n == 51: \n        return 177\n    elif n == 52: \n        return 180\n    elif n == 53: \n        return 185\n    elif n == 54: \n        return 188\n    elif n == 55: \n        return 191\n    elif n == 56: \n        return 194\n    elif n == 57: \n        return 196\n    elif n == 58: \n        return 201\n    elif n == 59: \n        return 204\n    elif n == 60: \n        return 207\n    elif n == 61: \n        return 210\n    elif n == 62: \n        return 215\n    elif n == 63: \n        return 218\n    elif n == 64: \n        return 221\n    elif n == 65: \n        return 224\n    elif n == 66: \n        return 227\n    elif n == 67: \n        return 230\n    elif n == 68: \n        return 233\n    elif n == 69: \n        return 236\n    elif n == 70: \n        return 241\n    elif n == 71: \n        return 244\n    elif n == 72: \n        return 247\n    elif n == 73: \n        return 250\n    elif n == 74: \n        return 252\n    elif n == 75: \n        return 257\n    elif n == 76: \n        return 260\n    elif n == 77: \n        return 264\n    elif n == 78: \n        return 269\n    elif n == 79: \n        return 270\n    elif n == 80: \n        return 274\n    elif n == 81: \n        return 277\n    elif n == 82: \n        return 280\n    elif n == 83: \n        return 285\n    elif n == 84: \n        return 288\n    elif n == 85: \n        return 291\n    elif n == 86: \n        return 294\n    elif n == 87: \n        return 297\n    elif n == 88: \n        return 301\n    elif n == 89: \n        return 304\n    elif n == 90: \n        return 309\n    elif n == 91: \n        return 313\n    elif n == 92: \n        return 318\n    elif n == 93: \n        return 321\n    elif n == 94: \n        return 326\n    elif n == 95: \n        return 329\n    elif n == 96: \n        return 333\n    elif n == 97: \n        return 338\n    elif n == 98: \n        return 341\n    elif n == 99: \n        return 344\n    elif n == 100: \n        return 349\n    elif n == 101: \n        return 352\n    elif n == 102: \n        return 357\n    elif n == 103: \n        return 360\n    elif n == 104: \n        return 364\n    elif n == 105: \n        return 367\n    elif n == 106: \n        return 370\n    elif n == 107: \n        return 374\n    elif n == 108: \n        return 377\n    elif n == 109: \n        return 380\n    elif n == 110: \n        return 385\n    elif n == 111: \n        return 388\n    elif n == 112: \n        return 391\n    elif n == 113: \n        return 394\n    elif n == 114: \n        return 395\n    elif n == 115: \n        return 400\n    elif n == 116: \n        return 401\n    elif n == 117: \n        return 402\n    elif n == 118: \n        return 403\n    elif n == 119: \n        return 404\n    elif n == 120: \n        return 405\n    elif n == 121: \n        return 406\n    elif n == 122: \n        return 409\n    elif n == 123: \n        return 413\n    elif n == 124: \n        return 417\n    elif n == 125: \n        return 420\n    elif n == 126: \n        return 429\n    elif n == 127: \n        return 441\n    elif n == 128: \n        return 444\n    elif n == 129: \n        return 447\n    elif n == 130: \n        return 450\n    elif n == 131: \n        return 451\n    elif n == 132: \n        return 452\n    elif n == 133: \n        return 465\n    elif n == 134: \n        return 468\n    elif n == 135: \n        return 471\n    elif n == 136: \n        return 474\n    elif n == 137: \n        return 477\n    elif n == 138: \n        return 480\n    elif n == 139: \n        return 481\n    elif n == 140: \n        return 484\n    elif n == 141: \n        return 487\n    elif n == 142: \n        return 490\n    elif n == 143: \n        return 491\n    elif n == 144: \n        return 494\n    elif n == 145: \n        return 495\n    elif n == 146: \n        return 498\n    elif n == 147: \n        return 501\n    elif n == 148: \n        return 503\n    elif n == 149: \n        return 505\n    elif n == 150: \n        return 508\n    elif n == 151: \n        return 509\n    elif n == 152: \n        return 511\n    elif n == 153: \n        return 514\n    elif n == 154:"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    return hexagonal_num(n-1) + hexagonal_num(n-2) + hexagonal_num(n-3) \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n<0):\n        n = n*-1\n    x = 1\n    while n>x:\n        n = n//6\n        x = x*6\n    return n\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n > 0):\n        for i in range(n, -1, -1):\n            for j in range(n, -1, -1):\n                if (i*i == n*n + j*j):\n                    return i*i*i*i\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Hint: If the number is odd, it must be odd\n    if n < 1:\n        raise ValueError('n must be greater than 0')\n    return n*(n+1)/2"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return hexagonal_num(n - 1) + (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError('n must be >= 0.')\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n in [0,1]: \n        return n\n    else: \n        return ((n+1)//6)*6 + (n%6)*6\n    \ndef main(): \n    print(\"Hexagonal number is : \",hexagonal_num(7)) \n    print(\"Hexagonal number is : \",hexagonal_num(8)) \n    print(\"Hexagonal number is : \",hexagonal_num(9)) \n    print(\"Hexagonal number is : \",hexagonal_num(10)) \n    print(\"Hexagonal number is : \",hexagonal_num(11)) \n    print(\"Hexagonal number is : \",hexagonal_num(12)) \n    print(\"Hexagonal number is : \",hexagonal_num(13)) \n    print(\"Hexagonal number is : \",hexagonal_num(14)) \n    print(\"Hexagonal number is : \",hexagonal_num(15)) \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagon = 0\n    while(n > 0):\n        hexagon = hexagon + n\n        hexagon = hexagon * (n - 1)\n        n = n - 1\n    return hexagon\nprint(hexagonal_num(4))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros+=1\n        total+=1\n    ratio = zeros/total\n    print(\"Ratio of zeros to nonzeros in array:\", ratio)\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return round(len(nums) / len(set(nums)))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_counts = 0\n    for num in nums:\n        if num == 0:\n            zero_counts += 1\n    \n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    \n    return float(zeroes/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return (zero_count/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = array('i', [0])\n    nonzero = array('i', [0])\n    for i in range(nums.__len__()):\n        if nums[i] == 0:\n            zero.append(i)\n        else:\n            nonzero.append(i)\n    return zero_count_helper(zero, nonzero)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count/len(nums)\ndef is_prime(num):\n    '''\n    Write a function that checks whether a given integer is prime.\n    '''\n    if num==2 or num==3:\n        return True\n    else:\n        if num%2==0 or num%3==0:\n            return False\n        else:\n            for i in range(5,int(num**0.5)+5,2):\n                if num%i==0:\n                    return False\n            return True\ndef is_square_primes(num):\n    '''\n    Write a function that checks whether a given integer is square prime.\n    '''\n    sqrt_n = int(num**0.5)\n    for i in range(2,sqrt_n):\n        if not is_prime(i):\n            return False\n    return True\ndef is_unique_primes(num):\n    '''\n    Write a function that checks whether a given integer is unique prime.\n    '''\n    while True:\n        tmp = num\n        num = 0\n        while tmp!= 0:\n            num = (num*10 + tmp % 10)//10\n            tmp = tmp//10\n        if num == num:\n            return True\ndef prime_factors(num):\n    '''\n    Write a function that returns all the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_prime(i) and not is_square_primes(i):\n            factors.append(i)\n    return factors\ndef factors_array(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_prime(i) and not is_square_primes(i):\n            factors.append(i)\n    return factors\ndef prime_factors_array(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_prime(i) and not is_square_primes(i):\n            factors.append(i)\n    return factors\ndef factors_iter(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_prime(i) and not is_square_primes(i):\n            factors.append(i)\n    return factors\ndef factors_array_iter(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_prime(i) and not is_square_primes(i):\n            factors.append(i)\n    return factors\ndef prime_factors_iter(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_prime(i) and not is_square_primes(i):\n            factors.append(i)\n    return factors\ndef find_factors(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_prime(i) and not is_square_primes(i):\n            factors.append(i)\n    return factors\ndef is_divisible(num, div):\n    '''\n    Write a function that checks whether a given number is divisible by a given div.\n    '''\n    for i in range(1,int(num**0.5) + 1):\n        if num%i==0:\n            if num//i==div:\n                return True\n    return False\ndef is_divisible_iter(num, div):\n    '''\n    Write a function that checks whether a given number is divisible by a given div.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_divisible(i, div):\n            factors.append(i)\n    return factors\ndef prime_factors_iter_div(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_divisible(i, num):\n            factors.append(i)\n    return factors\ndef is_divisible_iter_div(num, div):\n    '''\n    Write a function that checks whether a given number is divisible by a given div.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_divisible(i, div):\n            factors.append(i)\n    return factors\ndef is_perfect_square(num):\n    '''\n    Write a function that checks whether a given integer is perfect square.\n    '''\n    if num==0:\n        return True\n    for i in range(2,int(num**0.5)+1):\n        if num%i==0:\n            return False\n    return True\ndef perfect_square_iter(num):\n    '''\n    Write a function that checks whether a given integer is perfect square.\n    '''\n    factors = []\n    for i in range(2,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    return factors\ndef perfect_square_iter_div(num):\n    '''\n    Write a function that checks whether a given integer is perfect square.\n    '''\n    factors = []\n    for i in range(2,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    return factors\ndef perfect_square_iter_div_div(num):\n    '''\n    Write a function that checks whether a given integer is perfect square.\n    '''\n    factors = []\n    for i in range(2,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    for i in range(2,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    return factors\ndef find_perfect_squares(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    return factors\ndef perfect_square_div_iter(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    for i in range(2,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    return factors\ndef perfect_square_div_iter_div(num):\n    '''\n    Write a function that returns the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    for i in range(2,num):\n        if is_perfect_square(i):\n            factors.append(i)\n    return factors\ndef is_perfect_square_div_iter(num):\n    '''\n    Write a function that checks whether a given integer is perfect square.\n    '''\n    for i in range(2,int(num**0.5)+1):\n        if is_perfect_square(i):\n            return True\n    return False\ndef is_perfect_square_div_iter_div(num):\n    '''\n    Write a function that checks whether a given integer is perfect square.\n    '''\n    for i in range(2,num):\n        if is_perfect_square(i):\n            return True\n    return False\ndef is_perfect_square_iter(num):"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zero_count = 0\n    for i in range(n):\n        if nums[i] == 0:\n            zero_count += 1\n    \n    return zero_count/n\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x!= 0:\n            count += 1\n        else:\n            continue\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n        else:\n            pass\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return n == 2*n\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n in range(2,n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<0): \n        return False\n    sum_ = 0\n    for i in range(1, n+1): \n        sum_ = sum_ + i \n    if sum_ == n: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # if n == 0:\n    #     return False\n    # if n == 1:\n    #     return True\n    \n    # d = dict()\n    # for i in range(2, n+1):\n    #     d[i] = 0\n    #     if n % i == 0:\n    #         d[i] += 1\n    #     if d[i] > 1:\n    #         return False\n    # return True\n    \n    # d = {1: 0, 2: 0}\n    # for i in range(3, n + 1):\n    #     d[i] = 0\n    #     if n % i == 0:\n    #         d[i] += 1\n    #     if d[i] > 1:\n    #         return False\n    # return True\n    \n    # # d = [1, 0]\n    # # for i in range(2, n + 1):\n    # #     d.append(0)\n    # # if n % i == 0:\n    # #     d[i] += 1\n    # # if d[i] > 1:\n    # #     return False\n    # # return True\n    # # d = {1: 1, 2: 0}\n    # # for i in range(3, n + 1):\n    # #     d.append(0)\n    # # if n % i == 0:\n    # #     d[i] += 1\n    # # if d[i] > 1:\n    # #     return False\n    # # return True\n    \n    # # d = [0, 2, 1]\n    # # for i in range(2, n + 1):\n    # #     d.append(0)\n    # # if n % i == 0:\n    # #     d[i] += 1\n    # # if d[i] > 1:\n    # #     return False\n    # # return True\n    \n    # d = [1, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 0]\n    # for i in range(2, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(2, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(2, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     d.append(0)\n    # if n % i == 0:\n    #     d[i] += 1\n    # if d[i] > 1:\n    #     return False\n    # return True\n    \n    # d = [1, 2, 0]\n    # for i in range(3, n + 1):\n    #     "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    l = 1\n    r = 0\n    while(l <= n):\n        if n % l == 0:\n            return False\n        l += 1\n    for i in range(3, n):\n        if n % i == 0:\n            r += 1\n        else:\n            return False\n    return r > 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    power = 2\n    sum = 0\n    while n > 1:\n        sum += power\n        n //= 2\n        power = power * 2\n    if sum == 0:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    x=0\n    while n>1:\n        if n%2==0:\n            n=n/2\n            x=x+1\n        else:\n            n=n*3+1\n            x=x+1\n    if n==x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 1: \n        return False\n    for i in range(1, n+1):\n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    else:\n        f=0\n        t=1\n        for i in range(1,n+1):\n            if f==i:\n                t+=2\n                f=t\n            else:\n                t=t*i\n                f=t\n        return f==n\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circum = 2 * 3.14 * r * r\n    print(circum)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*(r**2)"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #raise NotImplementedError\n    return (2 * math.pi * r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    return 2 * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 * c * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Compute the circumference of a circle\n    circumference = 2 * 3.14 * r\n    # Display the circumference\n    print(\"The circumference of a circle is: \" + str(circumference))\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*pi*r\n    print(c)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    # You can assume that you have built a circle.\n    # You should store the circumference in a variable called 'circumference'.\n    \n    # This is the circumference of a circle\n    circumference = 2 * 3.14 * r\n    \n    # Return the circumference\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        result.extend(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    l = []\n    for element in test_list:\n        if type(element) is list:\n            l.extend(element)\n        else:\n            l.append(element)\n    return l\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #return [item for sublist in test_list for item in sublist]\n    if isinstance(test_list, list):\n        return [item for sublist in test_list for item in sublist]\n    else:\n        raise TypeError(\"test_list must be a list\")\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n    # Write your code here.\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [flatten(item) for item in lst]\n    \n    return flatten(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for item in test_list:\n        num_list.extend(item)\n    return num_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for element in test_list:\n        flattened_list.extend(element)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_of_lists = test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not test_list:\n        return None\n    if not isinstance(test_list, (list, set)):\n        raise TypeError('test_list must be a list')\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    pck = nums[0]\n    nums.remove(pck)\n    \n    pck = nums[-1]\n    nums.remove(pck)\n    \n    index_of_pck = 0\n    \n    for i in range(len(nums)):\n        if i!= 0 and nums[i-1] > pck:\n            nums[i], nums[index_of_pck] = nums[index_of_pck], nums[i]\n            index_of_pck += 1\n        \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    last = len(nums) - 1\n    for i in reversed(range(last)):\n        # move rightmost elem to the last position\n        # check if the elem at this position is less than the last\n        # if it is than move it to the last position\n        if nums[i] < nums[last]:\n            # it is less than last position\n            nums[last], nums[i] = nums[i], nums[last]\n            last -= 1\n        # if it is less than the last position, move it to the last position\n        else:\n            break\n    # now reverse the list and return it\n    return num"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find length of list\n    n = len(nums)\n    # swap first two elements\n    nums[0], nums[1] = nums[1], nums[0]\n    # traverse through list in reverse order\n    p = n-2\n    for i in range(n-1, 0, -1):\n        # find the position in the list where the list must be shifted\n        # to the left\n        while p>=0 and nums[p] > nums[p-1]:\n            p-=1\n        # swap the first and last elements\n        nums[i], nums[p] = nums[p], nums[i]\n    # return new list\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse(nums):\n        nums.reverse()\n    \n    def insert(nums, value):\n        # Reverse the array\n        nums.reverse()\n        # Insert value\n        nums.append(value)\n        # Reverse the reversed array\n        nums.reverse()\n    \n    # First, sort the list in reverse\n    nums.sort(reverse=True)\n    # Now, iterate through the original list and insert the\n    # elements in the reverse order\n    for i in range(len(nums)-1, 0, -1):\n        insert(nums[:i], nums[i])\n    \n    # Now reverse the array again\n    nums.reverse()\n    \n    # Finally, return the sorted array\n    return nums\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums, low, high):\n        if low < high:\n            mid = nums[low + (high - low) // 2]\n            if mid < nums[high]:\n                sort(nums, low, (mid - 1) // 2)\n            else:\n                sort(nums, (mid + 1) // 2, high)\n                nums[low], nums[(mid + 1) // 2] = nums[(mid + 1) // 2], nums[low]\n    sort(nums, 0, len(nums) - 1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        # for each element, select the maximum element in the first half\n        for j in range(0,i):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = []\n    res_index = 0\n    n = len(nums)\n    for i in range(n):\n        if i > 0 and nums[i] > nums[i-1]:\n            temp = nums[i-1]\n            nums[i-1] = nums[i]\n            nums[i] = temp\n        res.append(nums[i])\n        res_index += 1\n    return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    curr_index = 0\n    nums_len = len(nums)\n    while curr_index < nums_len:\n        min_index = curr_index\n        for i in range(curr_index+1, nums_len):\n            if nums[min_index] > nums[i]:\n                min_index = i\n        nums[min_index], nums[curr_index] = nums[curr_index], nums[min_index]\n        curr_index = curr_index+1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # At first, determine the length of the array\n    length = len(nums)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    # iterate through two lists\n    for a in list1:\n        # iterate through three lists\n        for b in list2:\n            # iterate through three lists\n            for c in list3:\n                # if item is in both list\n                if a == b or b == c or a == c:\n                    # increment count\n                    count += 1\n    return count\n    \ndef count_all(list1,list2,list3):\n    '''\n    Write a function to count number of times each item appears in the three given lists.\n    '''\n    counts = []\n    # iterate through three lists\n    for item in list1:\n        # iterate through three lists\n        for a in list2:\n            # iterate through three lists\n            for b in list3:\n                # if item is in both list\n                if item == a or item == b:\n                    # increment count\n                    counts.append(1)\n    return counts\n    \ndef sum_all(list1,list2,list3):\n    '''\n    Write a function that takes in two lists and returns the sum of all values from the first list to the last list.\n    '''\n    sum = 0\n    for item in list1:\n        sum += item\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #Initializing the count of same item\n    s1=0\n    s2=0\n    s3=0\n    #Assigning each item to an empty list\n    list1=[]\n    list2=[]\n    list3=[]\n    #For every item in list1 and list2\n    for i in range(len(list1)):\n        #If item is same\n        if list1[i]==list2[i]:\n            #Increment by 1\n            s1+=1\n            list1.remove(list1[i])\n            list2.remove(list2[i])\n            #For every item in list3\n        elif list1[i]!=list3[i]:\n            #If item is different\n            if list1[i] in list2 and list2[i] in list3:\n                #Increment by 1\n                s1+=1\n                list1.remove(list1[i])\n                list2.remove(list2[i])\n                list3.remove(list3[i])\n            else:\n                #If item not in list3\n                if list1[i] not in list2 and list2[i] not in list3:\n                    #Increment by 1\n                    s2+=1\n                    list1.remove(list1[i])\n                    list2.remove(list2[i])\n                    list3.remove(list3[i])\n    return s1,s2,s3\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if (list1[i]==list2[i])==(list3[i]==list2[i]):\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(3):\n        if(list1[i] == list2[i]):\n            if(list3[i] == list3[i]):\n                count +=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and i!=j:\n                count+=1\n    return count\ndef count_equalpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and i!=j:\n                count+=1\n    return count\ndef count_all(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                count+=1\n    return count\ndef count_total(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                count+=1\n    return count\ndef sort(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2)==len(list3):\n        if count_samepair(list1,list2,list3)==0:\n            return count_equalpair(list1,list2,list3)\n        else:\n            return count_all(list1,list2)\n    else:\n        return 0\ndef main():\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    print(\"Counting number items that are identical in the same position of three given lists.\")\n    list1=[]\n    list2=[]\n    list3=[]\n    list1=input(\"Enter first list: \").split()\n    list2=input(\"Enter second list: \").split()\n    list3=input(\"Enter third list: \").split()\n    print(\"Expected output: \")\n    print(\"Count number items that are identical in the same position of three given lists.\")\n    print(\"List 1:\", list1)\n    print(\"List 2:\", list2)\n    print(\"List 3:\", list3)\n    print(\"Result:\", sort(list1,list2,list3))\nmain()"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_count = 0\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    \n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                same_count += 1\n    \n    return same_count\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c = 0\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(len(list1)):\n        if list1[i] not in l1:\n            l1.append(list1[i])\n    for i in range(len(list2)):\n        if list2[i] not in l2:\n            l2.append(list2[i])\n    for i in range(len(list3)):\n        if list3[i] not in l3:\n            l3.append(list3[i])\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l3[i] not in l3:\n            c += 1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_num=0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            same_num=same_num+1\n        else:\n            pass\n    return same_num\n    \ndef is_anagram(a, b):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '''\n    a1=a.split(' ')\n    b1=b.split(' ')\n    if a1==b1:\n        return True\n    return False\n    \ndef most_common(l):\n    '''\n    Write a function to return the most common word from a given list of words.\n    '''\n    l1=[]\n    for i in l:\n        a=i.split(' ')\n        b=a[0]\n        c=a[1:]\n        l1.append(b)\n    if l1==[]:\n        return\n    else:\n        return l1[0]\n    \ndef most_common_with_remainder(l):\n    '''\n    Write a function to return the most common word from a given list of words.\n    '''\n    l1=[]\n    for i in l:\n        a=i.split(' ')\n        b=a[0]\n        c=a[1:]\n        l1.append(b)\n    if l1==[]:\n        return\n    else:\n        return l1[0]\n    \ndef is_valid_string(string):\n    '''\n    Write a function to return true if the string is a valid email address.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n    \ndef reverse(string):\n    '''\n    Write a function to return a string with all the vowels reversed.\n    '''\n    vowels=['a','e','i','o','u']\n    result = ''\n    for letter in string:\n        if letter in vowels:\n            result = result + letter + '-'\n        else:\n            result = result + letter\n    return result\n    \ndef is_unique(string):\n    '''\n    Write a function to return true if the string has exactly one letter repeated in it.\n    '''\n    return string.count('a')!= string.count('e') and string.count('i')!= string.count('o') and string.count('u')!= string.count('A')\n    \ndef contains_duplicate(l):\n    '''\n    Write a function to return true if any duplicate items in the given list occur in the list.\n    '''\n    return len(l)!= len(set(l))\n    \ndef validate_email(string):\n    '''\n    Write a function to check whether the string is a valid email address or not.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n        \ndef check_if_unique_address(string):\n    '''\n    Write a function to check whether the string is a valid email address or not.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n        \ndef validate_email_address(string):\n    '''\n    Write a function to check whether the string is a valid email address or not.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n        \ndef validate_email_address_last_part(string):\n    '''\n    Write a function to check whether the string is a valid email address or not.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n        \ndef find_email_address(string):\n    '''\n    Write a function to return the email address of the given string.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return string.split('@')[1]\n    else:\n        return string\n    \ndef all_in_one_line(string):\n    '''\n    Write a function to return true if the string is all in one line or not.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n        \ndef first_last(string):\n    '''\n    Write a function to return the first and last character from the given string.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return string.split('@')[0] +'' + string.split('@')[1]\n    else:\n        return string\n        \ndef first_middle_last(string):\n    '''\n    Write a function to return the first and last character from the given string.\n    '''\n    regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if re.search(regex,string):\n        return string.split('@')[0] +'' + string.split('@')[-1]\n    else:\n        return string\n        \ndef contains_duplicate_email(list):\n    '''\n    Write a function to check whether the given list contains duplicate email addresses.\n    '''\n    l=[]\n    for i in list:\n        if i in l:\n            pass\n        else:\n            l.append(i)\n    if l==[]:\n        return True\n    else:\n        return False\n        \ndef find_duplicate_email(list):\n    '''\n    Write a function to find the email address that contains multiple duplicates.\n    '''\n    l=[]\n    for i in list:\n        if i in l:\n            pass\n        else:\n            l.append(i)\n    if l==[]:\n        return None\n    else:\n        return l[0]\n        \ndef contains_duplicate_phone_number(list):\n    '''\n    Write a function to check whether the given list contains duplicate phone numbers.\n    '''\n    l=[]\n    for i in list:\n        if i in l:\n            pass\n        else:\n            l.append(i)\n    if l==[]:\n        return True\n    else:\n        return False\n        \ndef find_duplicate_phone_number(list):\n    '''\n    Write a function to find the phone number that contains multiple duplicates.\n    '''\n    l=[]\n    for i in list:\n        if i in l:\n            pass\n        else:\n            l.append(i)\n    if l==[]:\n        return None\n    else:\n        return l[0]\n        \ndef is_number(string):\n    '''\n    Write a function to check whether the given string is a valid phone number.\n    '''\n    regex = r\"[^0-9]{10}\"\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n        \ndef find_duplicate_number(list):\n    '''\n    Write a function to find the number that contains multiple duplicates.\n    '''\n    l=[]\n    for i in list:\n        if i in l:\n            pass\n        else:\n            l.append(i)\n    if l==[]:\n        return None\n    else:\n        return l[0]\n        \ndef count_unique_entries(list):\n    '''\n    Write a function to count the number of unique entries in the given list.\n    '''\n    return len(set(list))\n    \ndef find_duplicate_entries(list):\n    '''\n    Write a functio"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return list1.count(list2[0])+list1.count(list2[1])+list1.count(list2[2])+list1.count(list2[3])+list1.count(list2[4])+list1.count(list2[5])+list1.count(list2[6])+list1.count(list2[7])\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            samepair += 1\n    for i in range(len(list1)):\n        if list2[i] == list3[i]:\n            samepair += 1\n    return samepair\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    for i in range(0,len(Input)):\n        if(Input[i]!=' '):\n            break\n    if(len(Input)==1):\n        return(1)\n    else:\n        return(0)\n        \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Count=0\n    for i in range(len(Input)):\n        if type(Input[i])==list:\n            Count+=1\n    return Count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Write your code here.\n    res = 0\n    for i in range(len(Input)):\n        res += Input[i].count(True)\n    return res\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # base case \n    if len(Input) == 1:\n        return 1\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for l in Input:\n        if isinstance(l, list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count_list = 0\n    for i in Input:\n        if type(i) == list:\n            count_list += 1\n    return count_list\ndef find_sets(Input): \n    '''\n    Write a function to find number of sets present in the given tuple.\n    '''\n    count_set = 0\n    for i in Input:\n        if type(i) == set:\n            count_set += 1\n    return count_set\ndef remove_duplicates(Input): \n    '''\n    Write a function that returns a new tuple without any duplicate items.\n    '''\n    set_of_tuples = []\n    for i in Input:\n        if type(i) == tuple:\n            set_of_tuples.append(i)\n    return set_of_tuples\ndef to_set(Input): \n    '''\n    Write a function that returns a new tuple without any duplicate items.\n    '''\n    set_of_tuples = []\n    for i in Input:\n        if type(i) == list:\n            set_of_tuples.append(tuple(i))\n    return set_of_tuples\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = 0\n    for i in range(len(Input)):\n        if Input[i][0] == 'L':\n            n += 1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # case 1: tuple = [1,2,3,4,5]\n    if type(Input)!= tuple:\n        raise TypeError('First argument must be tuple')\n    # case 2: tuple = (1,2,3)\n    if len(Input)!= 2:\n        raise ValueError('Number of items must be two')\n    # case 3: tuple = (4,5,6)\n    if type(Input[0])!= int:\n        raise TypeError('First element must be an integer')\n    if type(Input[1])!= int:\n        raise TypeError('Second element must be an integer')\n    # case 4: tuple = (10,20)\n    if len(Input) == 2:\n        raise ValueError('Number of items must be two')\n    # case 5: tuple = (10,100)\n    if len(Input) == 3:\n        raise ValueError('Number of items must be two')\n    # case 6: tuple = (1,1,1)\n    if len(Input) == 4:\n        raise ValueError('Number of items must be two')\n    # case 7: tuple = (1,1,1,1)\n    if len(Input) == 5:\n        raise ValueError('Number of items must be two')\n    # case 8: tuple = (1,2,3,4,5)\n    if len(Input) == 6:\n        raise ValueError('Number of items must be two')\n    # case 9: tuple = (1,2,3,4,5,6)\n    if len(Input) == 7:\n        raise ValueError('Number of items must be two')\n    # case 10: tuple = (1,1,1,1,1,1,1,1,1,1)\n    if len(Input) == 8:\n        raise ValueError('Number of items must be two')\n    # case 11: tuple = (1,2,3,4,5,6,7,8,9)\n    if len(Input) == 9:\n        raise ValueError('Number of items must be two')\n    # case 12: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13)\n    if len(Input) == 10:\n        raise ValueError('Number of items must be two')\n    # case 13: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)\n    if len(Input) == 11:\n        raise ValueError('Number of items must be two')\n    # case 14: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n    if len(Input) == 12:\n        raise ValueError('Number of items must be two')\n    # case 15: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)\n    if len(Input) == 13:\n        raise ValueError('Number of items must be two')\n    # case 16: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51)\n    if len(Input) == 14:\n        raise ValueError('Number of items must be two')\n    # case 17: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51)\n    if len(Input) == 15:\n        raise ValueError('Number of items must be two')\n    # case 18: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51)\n    if len(Input) == 16:\n        raise ValueError('Number of items must be two')\n    # case 19: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)\n    if len(Input) == 17:\n        raise ValueError('Number of items must be two')\n    # case 20: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)\n    if len(Input) == 18:\n        raise ValueError('Number of items must be two')\n    # case 21: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)\n    if len(Input) == 19:\n        raise ValueError('Number of items must be two')\n    # case 22: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)\n    if len(Input) == 20:\n        raise ValueError('Number of items must be two')\n    # case 23: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)\n    if len(Input) == 21:\n        raise ValueError('Number of items must be two')\n    # case 24: tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)\n    if len(Input"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # empty tuple\n    if len(Input) == 0:\n        return 0\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)): \n        max_diff = max(max_diff, arr[i] - arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if arr==[]: \n        return 0\n    \n    max_abs_diff=arr[0] - arr[1] \n    for i in range(1,len(arr)): \n        max_abs_diff=max(abs(arr[i]-arr[i-1]),max_abs_diff) \n    \n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    res=arr[0]\n    for i in range(1,len(arr)): \n        res=max(res-arr[i],arr[i]-res) \n    return res \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Add your code here.\n    if len(arr) == 1:\n        return arr[0] - arr[0]\n    else:\n        return max(arr[0] - arr[1], arr[1] - arr[0])\n    \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n=len(arr)\n    max=0\n    for i in range(n):\n        for j in range(i,n):\n            if (i+j)%2==0:\n                a=abs(arr[i]-arr[j])\n                if max<a:\n                    max=a\n    return max\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #initializing the result \n    result = 0 \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)-2):\n        if arr[i+1] > arr[i]:\n            max_diff = arr[i+1] - arr[i]\n        else:\n            max_diff = arr[i+1] - arr[i]\n    return max_diff\n    \n    "
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        raise ValueError(\"Input array must be of length 2.\")\n    Max_ = arr[0]\n    Min_ = arr[0]\n    for i in range(len(arr)-1):\n        if arr[i+1] < arr[i]:\n            Max_ = arr[i]\n        else:\n            Min_ = arr[i]\n    return abs(Max_ - Min_)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] > arr[j]:\n                max_diff = arr[i] - arr[j]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                max_diff = max(max_diff, abs(arr[i] - arr[j]))\n            else:\n                max_diff = max(max_diff, abs(arr[j] - arr[i]))\n    \n    return max_diff\n        "
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n < 1: return None\n    if a * b == n: return None\n    if a < b: return find_solution(a, n - b, 1)\n    else: return find_solution(n - a, b, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def solve(x, y):\n        if x == y:\n            return x, y\n        if x < 0 or y < 0:\n            return None\n        if x > n:\n            return None\n        if x > y:\n            y, x = x, y\n        return solve(x - a, y - b)\n    if not a % b:\n        return solve(a, b)\n    if not a % b:\n        return solve(a - b, b)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        if n == 0:\n            return None\n        elif n < 0:\n            return None\n        elif a == b:\n            return a, n\n        else:\n            return a, n\n    except:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #if all(i <= 0 for i in a+b):\n    #    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    import numpy as np\n    if n == 0:\n        return None\n    if n < 0:\n        return None\n    else:\n        if a == b:\n            return (a, n)\n        elif a + b < n:\n            return find_solution(a, b, n-a-b)\n        elif a + b > n:\n            return find_solution(a, b, n-a+b)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    if n == 1:\n        return (a, b)\n    else:\n        i = n//2\n        x = find_solution(a, b, i)\n        y = find_solution(a, b, i)\n        if x!= None:\n            return x + (b, n-1-i)\n        else:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solution = ()\n    if b == 0:\n        return solution\n    \n    # x = ((a*x) + (b*y)) // n\n    x = a*(b/n)\n    y = b\n    \n    while y > 0:\n        solution = (x, y)\n        y = y - (x/y)\n        x = x + (x/y)\n    \n    return solution\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #set x and y\n    x = n\n    y = n\n    if (a == n or b == n):\n        return x, y\n    #determine which pythagorean triple to make\n    if (a**2 + b**2 == x**2):\n        #check if x and y can be used to sum a and b\n        if (x + y == n):\n            return x, y\n        #if not, it must be used to add\n        else:\n            return x + y, x + y\n    #if x + y = n, then it must be used to subtract\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Step 1: Determine x, y, and return None if no solution exists\n    if b == 0:\n        return None\n    elif a == 0:\n        return (1, 0)\n    \n    # Step 2: Make x, y a tuple\n    x, y = None, None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    '''\n        Use a for-loop to iterate through a given list.\n        \n        Remove elements in a given list, where the element is found in the given list.\n        If the element doesn't exist in the list, print the index of the last element in the list.\n        \n        If there are no elements in the list, remove the last element from the list and print the index of the last element.\n    '''\n    for index in range(len(list1)):\n        if list1[index] in list2:\n            list1.pop(index)\n            print(index + 1)\n            break\n    if not list1:\n        print('No element to remove from the list')\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_set = set(list1)\n    list2_set = set(list2)\n    common_list = list1_set.intersection(list2_set)\n    for i in common_list:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result_list = []\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for element in list1:\n        for element2 in list2:\n            list3.append(element2)\n    return list3\n    \n    #TODO: Write a function to remove all elements from a given list present in another list.\n    #     The function should return a new list with the elements of list1\n    #     but it should not return a new list\n    #\n    # def remove_elements(list1, list2):\n    #     list3 = []\n    #     for element in list1:\n    #         for element2 in list2:\n    #             list3.append(element2)\n    #     return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    if len(list1) == 0 or len(list2) == 0:\n        return\n    \n    if len(list1) > len(list2):\n        for i in range(len(list1)):\n            list1.pop()\n    elif len(list2) > len(list1):\n        for i in range(len(list2)):\n            list2.pop()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for el in list1:\n        if el in list2:\n            list1.remove(el)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # O(n) time | O(n) space\n    result = []\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list2[:], list2[:]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list2) == 0:\n        return 0\n    elif len(list1) > len(list2):\n        return 0\n    elif len(list2) > len(list1):\n        return 0\n    else:\n        for i in range(0,len(list1)):\n            if list1[i] in list2:\n                list2.remove(list1[i])\n        return list2\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 1\n    sum = 0\n    while i < n // 2:\n        sum += (n-i)\n        i += 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = 1\n    sum = 0\n    while x < n // 2 + 1:\n        sum += x\n        x += 1\n    return su"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # helper function to do for loop\n    def helper(n,i):\n        if n == 0:\n            return 0\n        elif i < n//2:\n            return n - (i + 1)\n        else:\n            return helper(n-i,i-n//2)\n    return helper(n,n)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n, 0, -2):\n        result += i\n        \n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n<=0:\n        return 0\n    else:\n        return n - (n-2)*sum_series(n-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s=0\n    for i in range(1,n,2):\n        s+=i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    while (n >= 2 * i):\n        n -= (n - 2 * i) + (n - 4)\n        i += 1\n    return n + (i-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n<0:\n        return 0\n    else:\n        return n + sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    else:\n        return n - (n-2) + (n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    if s == 0:\n        return 0\n    for i in range(0, s):\n        area = area + (i*(i+1)/2) * (tan(l/2))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = ((l * 2) - s) / 2\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if(type(s) == tuple or type(s) == list):\n        assert type(l) == int, 'l must be an integer'\n        assert type(s) == tuple or type(s) == list,'s must be a tuple or list'\n        assert type(l) == int, 'l must be an integer'\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n    else:\n        assert type(s) == int,'s must be an integer'\n        assert type(l) == int, 'l must be an integer'\n        #\n        #\n        #\n        #\n        #\n        #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for x in range(l):\n        area += (s**2)\n    return (area)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l_s = len(s)\n    area = 0\n    for i in range(0, l_s, 2):\n        area += (i * s[i] + s[i + 1]) * 0.5\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    area = 0\n    for i in range(len(s)):\n        area = area + (s[i]*l[i])\n    return area\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = (pi*r*r)\n    return area\ndef area_regular_polygon(s, n):\n    '''\n    Write a function to calculate the area of a regular polygon given the number of sides and the radius.\n    '''\n    return area_polygon(s, [0]*n)\ndef area_regular_circle(r):\n    '''\n    Write a function to calculate the area of a regular circle given its radius.\n    '''\n    return area_circle(r)\ndef perimeter_circle(r):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius.\n    '''\n    return 2*pi*r\ndef perimeter_regular_polygon(n,s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the number of sides and the radius.\n    '''\n    return perimeter_polygon(s, n)\ndef perimeter_regular_circle(r):\n    '''\n    Write a function to calculate the perimeter of a regular circle given its radius.\n    '''\n    return perimeter_circle(r)\ndef trapezoid_area(s, t):\n    '''\n    Write a function to calculate the area of a trapezoid given its sides.\n    '''\n    return (s[0]*(s[1]+s[2])+s[3]*(s[1]+s[3]+s[2]))/3\ndef trapezoid_area_square(s, t):\n    '''\n    Write a function to calculate the area of a trapezoid given its sides.\n    '''\n    return (s[0]*(s[1]+s[2]+s[3]+s[4]+s[5])+s[6]*(s[1]+s[3]+s[5]+s[6]))/6\ndef trapezoid_area_circle(r):\n    '''\n    Write a function to calculate the area of a trapezoid given its radius.\n    '''\n    return (pi*r*r)/6\ndef trapezoid_perimeter(s, t, n):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its sides and its number of sides.\n    '''\n    return (perimeter_circle(t) + (perimeter_circle(t+s) - 2*perimeter_circle(t+s/2))*n)\ndef trapezoid_perimeter_square(s, t, n):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its sides and its number of sides.\n    '''\n    return (perimeter_square(t) + (perimeter_square(t+s) - 2*perimeter_square(t+s/2))*n)\ndef trapezoid_perimeter_circle(r):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its radius.\n    '''\n    return (perimeter_circle(r) + (perimeter_circle(r+s) - 2*perimeter_circle(r+s/2))*(3/8))\ndef trapezoid_area(s, t, n):\n    '''\n    Write a function to calculate the area of a trapezoid given its sides and its number of sides.\n    '''\n    return (trapezoid_area_square(s, t) + trapezoid_area_circle(r))*(n/6)\ndef trapezoid_area_square(s, t):\n    '''\n    Write a function to calculate the area of a trapezoid given its sides.\n    '''\n    return (perimeter_square(t) + (perimeter_square(t) - 2*perimeter_square(t/2))*s)\ndef trapezoid_area_circle(r):\n    '''\n    Write a function to calculate the area of a trapezoid given its radius.\n    '''\n    return (perimeter_circle(r) + (perimeter_circle(r+s) - 2*perimeter_circle(r+s/2))*s)\ndef trapezoid_perimeter(s, t, n):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its sides and its number of sides.\n    '''\n    return (perimeter_circle(t) + (perimeter_circle(t+s) - 2*perimeter_circle(t+s/2))*n)\ndef trapezoid_perimeter_square(s, t, n):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its sides and its number of sides.\n    '''\n    return (perimeter_square(t) + (perimeter_square(t+s) - 2*perimeter_square(t+s/2))*n)\ndef trapezoid_perimeter_circle(r):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its radius.\n    '''\n    return (perimeter_circle(r) + (perimeter_circle(r+s) - 2*perimeter_circle(r+s/2))*(3/8))\ndef trap_area(s, n, m):\n    '''\n    Write a function to calculate the area of a trapezoid given its sides and its number of sides.\n    '''\n    return (s[0]*(s[1]+s[2])+s[3]*(s[1]+s[3]+s[2]))*n/m\ndef trap_area_square(s, n, m):\n    '''\n    Write a function to calculate the area of a trapezoid given its sides and its number of sides.\n    '''\n    return (s[0]*(s[1]+s[2]+s[3])+s[4]*(s[1]+s[3]+s[2]))*n/m\ndef trap_area_circle(r):\n    '''\n    Write a function to calculate the area of a trapezoid given its radius.\n    '''\n    return (s[0]*(s[1]+s[2]+s[3]+s[4])+s[5]*(s[1]+s[3]+s[5]+s[2]))*r\ndef trap_perimeter(s, n, m):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its sides and its number of sides.\n    '''\n    return (perimeter_square(s) + (perimeter_square(s) - 2*perimeter_square(s/2))*n)\ndef trap_perimeter_square(s, n, m):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its sides and its number of sides.\n    '''\n    return (perimeter_square(s) + (perimeter_square(s) - 2*perimeter_square(s/2))*n)\ndef trap_perimeter_circle(r):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its radius.\n    '''\n    return (perimeter_circle(r) + (perimeter_circle(r+s) - 2*perimeter_circle(r+s/2))*(3/8))\ndef trap_area(s, n, m):\n    '''\n    Write a function to calculate the area of a trapezoid given its sides and its number of sides.\n    '''\n    return (s[0]*(s[1]+s[2])+s[3]*(s[1]+s[3]+s[2]))*n/m\ndef trap_area_square(s, n, m):\n    '''\n    Write a function to calculate the area of a trapezoid given its sides and its number of sides.\n    '''\n    return (s[0]*(s[1]+s[2]+s[3]+s[4])+s[5]*(s[1]+s[3]+s[5]+s[2]))*n/m\ndef trap_area_circle(r):\n    '''\n    Write a function to calculate the area o"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l == 1:\n        return 0\n    s = s / 2\n    return 0.5 * pi * (s**2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = len(s)\n    area = pi * (n * (n + 1) / 2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def area(x,y):\n        return((x*y)/2)\n    s = sorted(s)\n    return (area(s[0],s[1])*l) + (area(s[1],s[2])*l) + (area(s[2],s[3])*l) + (area(s[3],s[0]))\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    i = 0\n    s = n\n    while i < s:\n        if s % i == 0:\n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n1 = n \n    d = []\n    while n1!= 0: \n        d.append(n%10) \n        n = n//10 \n    s = 0\n    for x in d: \n        s += x \n    if s == n: \n        return True\n    else: \n        return False\ndef f(n):\n    '''\n    Write a function that returns the lowest common multiple of two numbers n and n+1.\n    '''\n    def multiply(n1, n2):\n        return n1 * n2\n    def modinv(n):\n        return pow(n, len(str(n)) - 1, len(str(n)))\n    n1 = n\n    n2 = n + 1\n    if n1 > n2:\n        n1, n2 = n2, n1\n    q, r = div_sum(n1), div_sum(n2)\n    if q == 0: \n        return 0\n    if q == r: \n        return 1 \n    if q > r: \n        q, r = r, q\n    x = n1 % q \n    y = n2 % q \n    while r!= 0: \n        q, r = q, modinv(r) \n        x, y = y, x % y \n    if x == 0: \n        return q \n    if x == r: \n        return 1\n    if x > r: \n        x, y = y, x\n    x = n1 % q \n    y = n2 % q \n    return multiply(x, y)\ndef f1(n):\n    '''\n    Write a function that returns the lowest common multiple of two numbers.\n    '''\n    n1 = n \n    n2 = n \n    s = 0\n    if n1 > n2:\n        n1, n2 = n2, n1\n    q, r = div_sum(n1), div_sum(n2)\n    if q == 0: \n        return 0\n    if q == r: \n        return 1 \n    if q > r: \n        q, r = r, q\n    x = n1 % q \n    y = n2 % q \n    while r!= 0: \n        q, r = q, modinv(r) \n        x, y = y, x % y \n    if x == 0: \n        return q \n    if x == r: \n        return 1\n    if x > r: \n        x, y = y, x\n    x = n1 % q \n    y = n2 % q \n    return multiply(x, y)\ndef f2(n):\n    '''\n    Write a function that returns the lowest common multiple of two numbers.\n    '''\n    n1 = n \n    n2 = n \n    s = 0\n    if n1 > n2:\n        n1, n2 = n2, n1\n    q, r = div_sum(n1), div_sum(n2)\n    if q == 0: \n        return 0\n    if q == r: \n        return 1 \n    if q > r: \n        q, r = r, q\n    x = n1 % q \n    y = n2 % q \n    while r!= 0: \n        q, r = q, modinv(r) \n        x, y = y, x % y \n    if x == 0: \n        return q \n    if x == r: \n        return 1\n    if x > r: \n        x, y = y, x\n    x = n1 % q \n    y = n2 % q \n    return multiply(x, y)\ndef fibo(n):\n    '''\n    Return the n-th fibonacci number, using recursion.\n    '''\n    if n <= 1: \n        return n \n    return fibo(n - 1) + fibo(n - 2)\ndef fibo1(n):\n    '''\n    Return the n-th fibonacci number, using recursion.\n    '''\n    if n <= 1: \n        return n \n    if n == 1 or n == 2: \n        return 1\n    return fibo1(n - 1) + fibo1(n - 2)\ndef fibo2(n):\n    '''\n    Return the n-th fibonacci number, using recursion.\n    '''\n    if n <= 1: \n        return n \n    if n == 1 or n == 2: \n        return 1\n    return fibo2(n - 1) + fibo2(n - 2)\ndef fibo3(n):\n    '''\n    Return the n-th fibonacci number, using memoization.\n    '''\n    if n <= 1: \n        return n \n    cache = {}\n    def fibo1(n):\n        if n <= 1: \n            return n\n        if n == 1 or n == 2: \n            return 1\n        key = str(n) + str(n)\n        if key in cache: \n            return cache[key]\n        else: \n            cache[key] = fibo1(n - 1) + fibo1(n - 2)\n            return cache[key]\n    return fibo1(n)\ndef fibo4(n):\n    '''\n    Return the n-th fibonacci number, using recursion.\n    '''\n    if n <= 1: \n        return n \n    if n == 1 or n == 2: \n        return 1\n    return fibo4(n - 1) + fibo4(n - 2)\ndef fibo5(n):\n    '''\n    Return the n-th fibonacci number, using memoization.\n    '''\n    if n <= 1: \n        return n \n    if n == 1 or n == 2: \n        return 1\n    cache = {}\n    def fibo1(n):\n        if n <= 1: \n            return n\n        if n == 1 or n == 2: \n            return 1\n        key = str(n) + str(n)\n        if key in cache: \n            return cache[key]\n        else: \n            cache[key] = fibo1(n - 1) + fibo1(n - 2)\n            return cache[key]\n    return fibo1(n)\ndef fibo6(n):\n    '''\n    Return the n-th fibonacci number, using recursion.\n    '''\n    if n <= 1: \n        return n\n    if n == 1 or n == 2: \n        return 1\n    return fibo6(n - 1) + fibo6(n - 2)\ndef fibo7(n):\n    '''\n    Return the n-th fibonacci number, using memoization.\n    '''\n    if n <= 1: \n        return n\n    cache = {}\n    def fibo1(n):\n        if n <= 1: \n            return n\n        if n == 1 or n == 2: \n            return 1\n        key = str(n) + str(n)\n        if key in cache: \n            return cache[key]\n        else: \n            cache[key] = fibo1(n - 1) + fibo1(n - 2)\n            return cache[key]\n    return fibo1(n)\ndef fibo8(n):\n    '''\n    Return the n-th fibonacci number, using recursion.\n    '''\n    if n <= 1: \n        return n\n    if n == 1 or n == 2: \n        return 1\n    return fibo8(n - 1) + fibo8(n - 2)\ndef fibo9(n):\n    '''\n    Return the n-th fibonacci number, using memoization.\n    '''\n    if n <= 1: \n        return n\n    if n == 1 or n == 2: \n        return 1\n    cache = {}\n    def fibo1(n):\n        if n <= 1: \n            return n\n        if n == 1 or n == 2: \n            return 1\n        key = str(n) + str(n)\n        if key in cache: \n            return cache[key]\n        else: \n            cache[key] = fibo1(n - 1) + fibo1("
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return False\n    \n    else:\n        divisors=[]\n        for i in range(1,int(math.sqrt(n)+1)):\n            if n%i==0:\n                if n//i not in divisors:\n                    divisors.append(n//i)\n        if len(divisors)>1:\n            return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    elif n % 2 == 0: \n        return div_sum(n//2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n <= 2):\n        return n\n    else:\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                return i\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    sum = 0\n    i = 1\n    while i <= n:\n        if n%i == 0:\n            sum += i\n            i+= 1\n        else:\n            i += 1\n    return sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<0: \n        return False \n    elif n==0: \n        return True \n    elif n%2==0: \n        return div_sum(n//2)\n    elif n%2==1: \n        return div_sum(n-1)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    \n    sum = 0\n    for i in range(1, n+1):\n        sum += (i*(i-1))\n    if sum == n:\n        print('True')\n    else:\n        print('False')\n    \ndiv_sum(5)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a,b = n\n    if a%2==0:\n        if b%2==0:\n            return True\n    else:\n        return False\ndef div_sum_test():\n    assert div_sum(2)==True, \"Should be div_sum(2)\"\n    assert div_sum(7)==False, \"Should be div_sum(7)\"\n    assert div_sum(4)==False, \"Should be div_sum(4)\"\n    assert div_sum(6)==True, \"Should be div_sum(6)\"\n    assert div_sum(3)==True, \"Should be div_sum(3)\"\n    assert div_sum(1)==True, \"Should be div_sum(1)\"\ndef check_numbers(a,b):\n    if len(a)!=len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!=b[i]:\n            return False\n    return True\ndef main():\n    sum_div_list = list()\n    i = 0\n    for i in range(1, 10000):\n        if check_numbers(str(i), str(i+1)):\n            sum_div_list.append(i)\n    print(sum_div_list)\n    sum_div_list.sort()\n    print(sum_div_list)\n    print(\"----------------------\")\n    print(div_sum(sum_div_list))\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n % 2 == 0:\n        return n/2\n    else:\n        return n/2 + div_sum(n - 1)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    c=0\n    for i in str1:\n        if i in alphabet:\n            c+=1\n    return c\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Code here\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            count += 1\n        else:\n            count = 0\n        if count == len(str1)-1:\n            return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower() \n    ans = []\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            ans.append(str1[i])\n    for j in ans:\n        if j not in ans:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char = 0\n    str1 = str1.lower()\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = 0\n    for char in str1: \n        if char in alphabet: \n            result += 1\n        else: \n            result -= 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j]:\n                if i == j:\n                    count = count + 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = {}\n    for letter in str1.lower():\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    i=0\n    \n    # loop through the string \n    for a in range(len(str1)): \n        # checking if the string has an even index\n        if(i%2==0):\n            # checking if the string is at the start of the alphabet \n            if(str1[a]=='a'):\n                i+=1\n            else: \n                # checking if the string is at the end of the alphabet \n                if(str1[a]=='z'):\n                    i+=1\n        # checking if the string is at the end of the alphabet \n        if(i%2==1):\n            # checking if the string is at the start of the alphabet \n            if(str1[a]=='A'):\n                i+=1\n            else: \n                # checking if the string is at the end of the alphabet \n                if(str1[a]=='Z'):\n                    i+=1\n    return i\n        \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    count = {}\n    for letter in letters:\n        count[letter] = str1.count(letter)\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    num=0\n    # Loop through the string\n    for char in str1: \n        if char.isalpha(): \n            num+=1\n    return num\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in A: \n        for j in range(i, len(A)):\n            if (i ^ j) % 2 == 0: \n                even += 1\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    A.sort()\n    length = len(A)\n    if length % 2 == 0:\n        for i in range(0, length, 2):\n            if A[i] % 2 == 1:\n                return 2\n    return 1\n    # return 1 if length is even, otherwise print -1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in A:\n        if (i&1):\n            even+=1\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n=len(A)\n    num=0\n    for i in range(0,n-1):\n        if(A[i]^A[i+1]==1):\n            num+=1\n    return num\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # TODO: Your code here\n    count = 0\n    for i in A:\n        if(i % 2 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count_even = 0\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if A[i] == A[j] and A[i] % 2 == 0:\n                count_even += 1\n    return count_even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in A: \n        if i % 2 == 0:\n            even_count += 1\n    \n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i]^A[j]==0:\n                result+=1\n    return result\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2: \n        return 0\n    count = 0\n    xor_value = 0\n    for x in A:\n        xor_value = xor_value ^ x\n        if xor_value % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    a = 0\n    b = 0\n    for i in A:\n        if i % 2 == 0:\n            a += 1\n        else:\n            b += 1\n    return a,b\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0: \n        n //= 2\n    return n \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 2: \n        return n \n    \n    return next_power_of_2(n - 2) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # your code goes here\n    i=2\n    while(i*i<n):\n        if n%i==0:\n            n/=i\n        else:\n            i+=1\n    if n%i==0:\n        return 1\n    else:\n        return 0\n    \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    f = 2 ** 31 # the upper limit of the floor division \n    c = 1 # the power of 2 \n    \n    for i in range(n, 0, -1): # the power of 2 is a power of 2\n        if f % i == 0:\n            c += 1\n            f = i \n    \n    if c >= n: # if the power of 2 is larger than n\n        return n\n    else: # if n is greater than the power of 2 \n        return n\n        \ndef next_power_of_3(n):\n    '''\n    Return the smallest power of 3 greater than or equal to n.\n    '''\n    \n    f = 2 ** 31 # the upper limit of the floor division \n    c = 1 # the power of 3 \n    \n    for i in range(n, 0, -1): # the power of 3 is a power of 3\n        if f % i == 0:\n            c += 1\n            f = i \n    \n    if c >= n: # if the power of 3 is larger than n\n        return n\n    else: # n is greater than the power of 3 \n        return n\n    \ndef next_power_of_4(n):\n    '''\n    Return the smallest power of 4 greater than or equal to n.\n    '''\n    \n    f = 2 ** 31 # the upper limit of the floor division \n    c = 1 # the power of 4 \n    \n    for i in range(n, 0, -1): # the power of 4 is a power of 4\n        if f % i == 0:\n            c += 1\n            f = i \n    \n    if c >= n: # if the power of 4 is larger than n\n        return n\n    else: # n is greater than the power of 4 \n        return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n < 2:\n        return n\n    else:\n        while n > 1:\n            if n & 1 == 1:\n                return n\n            n = n >> 1\n    return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while 2**i <= n:\n        i = i + 1\n    return 2**i - 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Write your code here\n    if n <= 0:\n        return 1\n    while n > 1:\n        if n % 2 == 0:\n            return n\n        n = n // 2\n    return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Declare a variable to store the largest power of 2\n    largest_power_of_2 = 0\n    # Store the largest power of 2\n    largest_power_of_2 = n\n    # Loop through n to find the largest power\n    for i in range(1, n+1):\n        # Find the power of i greater than or equal to the largest_power_of_2\n        if i <= largest_power_of_2:\n            # If i is less than the largest power of 2, then it is not a power of 2\n            if i < largest_power_of_2:\n                # Go to the next power of 2\n                i = i*2\n        # If the largest power of 2 is greater than or equal to the current value of i, then it is a power of 2\n        if i >= largest_power_of_2:\n            return i\n    # Return False if the loop was not terminated because the largest_power_of_2 was not found\n    return False\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    b = n\n    while (b & 0x1) == 0:\n        b = b >> 1\n    while (b & 0x1)!= 0:\n        b = (b >> 1)\n    print(b)\n    \n    if b == 2:\n        return 2**(n-1)\n    else:\n        return n\n    "
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return next_power_of_2(n-1) + next_power_of_2(n-2)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len(set(a))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counts = dict()\n    for i in range(len(a)):\n        if a[i] in counts:\n            counts[a[i]] += 1\n        else:\n            counts[a[i]] = 1\n    return counts\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d = {}\n    for i in range(len(a)): \n        if a[i] in d: \n            d[a[i]] += 1\n        else: \n            d[a[i]] = 1\n    return d \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return x.count(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    cnt = 0\n    for i in a:\n        if i == x:\n            cnt +=1\n    return cnt \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # your code here\n    import math\n    def count(x):\n        s = 0\n        while x!= 1:\n            if x%2==0:\n                x=x//2\n                s+=1\n            else:\n                x=3*x+1\n                s+=1\n        return s\n    counts = 0\n    for i in range(len(a)-1):\n        if a[i]==a[i+1]:\n            counts+=1\n    return counts\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d = dict() \n    for i in a: \n        if i in d.keys(): \n            d[i] += 1\n        else: \n            d[i] = 1\n    return len(d)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==a:\n            count+=1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:                                                                                                                                                                                                                                    \n        return list1[m] + list1[m+1]                                                                                                                                                                                        \n    elif m > n:                                                                                                                                                                                                                                \n        l = list1[m] + list1[m+1]                                                                                                                                                                                        \n        r = list1[n] + list1[n+1]\n        return l + r                                                                                                                                                                                                                        \n    else:\n        l = list1[m] + list1[m+1]                                                                                                                                                                                        \n        r = list1[n] + list1[n+1]\n        l += sum_range_list(list1, m+1, n)                                                                                                                                                                                        \n        r += sum_range_list(list1, m, n+1)\n        return l + r                                                                                                                                                                                                                            \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    def list_sum(l):\n        return sum(l)\n    def sum_range(m, n):\n        if m > n:\n            return None\n        s = 0\n        for i in range(m, n+1):\n            s = s + l[i]\n        return s\n    return list_sum(list1) - list_sum(range(m, n+1))\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return list1[m:n+1]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = 0\n    for i in range(m, n):\n        total = total + list1[i]\n    return total\n    \n    \ndef reverse(string):\n    \"\"\"Reverses the order of characters in a string.\"\"\"\n    \n    return string[::-1]\n    \ndef count_words(sentence):\n    \"\"\"Counts the words in a string.\"\"\"\n    \n    return len(sentence.split())\n    \ndef is_palindrome(sentence):\n    \"\"\"Returns True if sentence is a palindrome, False otherwise.\"\"\"\n    \n    return sentence == reverse(sentence)\n    \ndef is_palindrome2(sentence):\n    \"\"\"Returns True if sentence is a palindrome, False otherwise.\"\"\"\n    \n    return sentence[::-1] == reverse(sentence)\n    \ndef average(numbers):\n    \"\"\"Returns the average of a list of numbers.\"\"\"\n    \n    return sum(numbers) / len(numbers)\n    \ndef a1():\n    \"\"\"Returns the number of strings where the second and the third occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            count += 1\n    return count\n    \ndef a2():\n    \"\"\"Returns the number of strings where the first and the last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 1:\n                count += 1\n    return count\n    \ndef a3():\n    \"\"\"Returns the number of strings where the second and the first occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                count += 1\n    return count\n    \ndef a4():\n    \"\"\"Returns the number of strings where the first and second occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    count += 1\n    return count\n    \ndef a5():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 1:\n                if split_string.count(i) == len(split_string):\n                    count += 1\n    return count\n    \ndef a6():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    count += 1\n    return count\n    \ndef a7():\n    \"\"\"Returns the number of strings where the second and the last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    if split_string.count(i) == 0:\n                        count += 1\n    return count\n    \ndef a8():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    if split_string.count(i) == 0:\n                        count += 1\n    return count\n    \ndef a9():\n    \"\"\"Returns the number of strings where the first and second occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    if split_string.count(i) == 0:\n                        count += 1\n    return count\n    \ndef a10():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    if split_string.count(i) == 0:\n                        count += 1\n    return count\n    \ndef a11():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    if split_string.count(i) == 0:\n                        count += 1\n    return count\n    \ndef a12():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    if split_string.count(i) == 0:\n                        count += 1\n    return count\n    \ndef a13():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    if split_string.count(i) == 0:\n                        count += 1\n    return count\n    \ndef a14():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercase.split()\n    count = 0\n    for i in split_string:\n        if split_string.count(i) > 1:\n            if split_string.count(i) == 2:\n                if split_string.count(i) == 1:\n                    if split_string.count(i) == 0:\n                        count += 1\n    return count\n    \ndef a15():\n    \"\"\"Returns the number of strings where the first and last occur consecutively.\"\"\"\n    \n    string = input()\n    lowercase = string.lower()\n    split_string = lowercas"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for x in range(m, n):\n        s = s + list1[x]\n    print(f\"The sum of {list1} is {s}\")\n        \n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) >= m and len(list1) <= n:\n        return sum(list1[:m]) + sum(list1[m:n])\n    else:\n        return 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == 0 and n == 0:\n        return 0\n    return (list1[n] + list1[n-1] + list1[m-1])\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    x = a / 2\n    y = math.sqrt(1 - (x**2))\n    print(f\"{x}\")\n    print(f\"{y}\")\n    return x, y\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*4*3\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = a[0]\n    for i in range(1, len(a)):\n        sides = sides + a[i]\n    return 2 * sides\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    x = (a ** 0.5)\n    return (a ** 2) - 4 * math.sqrt(3) * (x ** 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = a\n    l = l - math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt(l**2 - math.pow(a, 2))\n    l = l + math.sqrt"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side_a = a\n    side_b = 0\n    side_c = 0\n    side_d = a\n    # Check whether the side lengths are all positive.\n    if side_a < 0:\n        print('A side length is negative')\n        return -1\n    # Check whether the side lengths are all positive.\n    if side_b < 0:\n        print('A side length is negative')\n        return -1\n    if side_c < 0:\n        print('A side length is negative')\n        return -1\n    # Check whether the side lengths are all positive.\n    if side_d < 0:\n        print('A side length is negative')\n        return -1\n    # Determine the normal side by determining the length of the square root of the difference of the sides.\n    side_b = math.sqrt(math.pow(side_a,2) - math.pow(side_b,2))\n    side_c = math.sqrt(math.pow(side_a,2) - math.pow(side_c,2))\n    side_d = math.sqrt(math.pow(side_a,2) - math.pow(side_d,2))\n    side_a = math.sqrt(side_a)\n    # Determine the angle from the input angle.\n    angle = math.acos(side_b/side_c)\n    # Determine the perimeter using the formula that\n    # Perimeter = 2\u03c0r * cos(2\u03c0r*theta/360)\n    perimeter = side_a * math.cos(angle/2)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4 * (math.sin(2 * math.pi * a / 5)**2) - (a * (math.cos(2 * math.pi * a / 5)**2)))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5*math.pi\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3 * (a ** 2))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = a % 5\n    print(\"The perimeter of the pentagon from the sides is \",a,\".\")\n    return a\ndef area_pentagon(a):\n    '''\n    Write a function to compute the area of a regular pentagon from the length of its sides.\n    '''\n    a = a % 5\n    return a*(5**2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the sides of its center.\n    '''\n    a = a % 6\n    print(\"The perimeter of the hexagon from the sides is \",a,\".\")\n    return a\ndef area_hexagon(a):\n    '''\n    Write a function to compute the area of a regular hexagon from the sides of its center.\n    '''\n    a = a % 6\n    return a*(6**2)\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to compute the perimeter of a regular dodecahedron from its vertices.\n    '''\n    a = a % 9\n    print(\"The perimeter of the dodecahedron from the vertices is \",a,\".\")\n    return a\ndef area_dodecahedron(a):\n    '''\n    Write a function to compute the area of a regular dodecahedron from its vertices.\n    '''\n    a = a % 9\n    return a*(9**2)\ndef perimeter_octahedron(a):\n    '''\n    Write a function to compute the perimeter of a regular octahedron from its vertices.\n    '''\n    a = a % 12\n    print(\"The perimeter of the octahedron from the vertices is \",a,\".\")\n    return a\ndef area_octahedron(a):\n    '''\n    Write a function to compute the area of a regular octahedron from its vertices.\n    '''\n    a = a % 12\n    return a*(12**2)\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to compute the perimeter of a regular icosahedron from its vertices.\n    '''\n    a = a % 16\n    print(\"The perimeter of the icosahedron from the vertices is \",a,\".\")\n    return a\ndef area_icosahedron(a):\n    '''\n    Write a function to compute the area of a regular icosahedron from its vertices.\n    '''\n    a = a % 16\n    return a*(16**2)\ndef calculate_circle_radius(r):\n    '''\n    Write a function that computes and returns the radius of a circle given its radius r.\n    '''\n    return math.sqrt(math.pow(r, 2)+math.pow(r, 2))\ndef circumference_circle(r):\n    '''\n    Write a function that computes and returns the circumference of a circle given its radius r.\n    '''\n    return 2*(math.pi)*r\ndef area_circle(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pi*math.pow(r,2)\ndef area_circle_perimeter(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pow(r, 2)\ndef perimeter_circle_perimeter(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*(math.pi)*r\ndef perimeter_circle_area(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef perimeter_circle_circumference(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*(math.pi)*r\ndef perimeter_circle_area_perimeter(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef area_circle_area_perimeter(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return r*math.pi\ndef perimeter_circle_area_circumference(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef perimeter_circle_area_circumference_perimeter(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef circumference_circle_area_perimeter(r):\n    '''\n    Write a function that computes and returns the circumference of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef area_circle_area_circumference(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pi*math.pow(r,2)\ndef area_circle_circumference_perimeter(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pow(r, 2)\ndef circumference_circle_area_circumference(r):\n    '''\n    Write a function that computes and returns the circumference of a circle given its radius r.\n    '''\n    return math.pow(r, 2)\ndef circumference_circle_area_circumference_perimeter(r):\n    '''\n    Write a function that computes and returns the circumference of a circle given its radius r.\n    '''\n    return math.pow(r, 2)\ndef perimeter_circle_circumference(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef area_circle_circumference(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pi*math.pow(r,2)\ndef perimeter_circle_circumference_perimeter(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef area_circle_circumference_area(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pi*math.pow(r,2)\ndef area_circle_circumference_area_perimeter(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pi*math.pow(r,2)\ndef perimeter_circle_area_circumference(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef perimeter_circle_area_circumference_perimeter(r):\n    '''\n    Write a function that computes and returns the perimeter of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef area_circle_area_circumference_area(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pi*math.pow(r,2)\ndef area_circle_area_circumference_area_perimeter(r):\n    '''\n    Write a function that computes and returns the area of a circle given its radius r.\n    '''\n    return math.pi*math.pow(r,2)\ndef circumference_circle_area_circumference(r):\n    '''\n    Write a function that computes and returns the circumference of a circle given its radius r.\n    '''\n    return 2*math.pi*r\ndef circumference_circle_area"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    # count occurence of string'std'\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n        else:\n            count = 0\n            break\n    return count\n    \n    \n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return len([i for i in s if i =='std'])\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    if s[0] =='s':\n        return 1\n    if s[0] == 'd':\n        return 2\n    if s[0] == 'c':\n        return 3\n    return 4\n    \ndef remove_duplicate(s):\n    '''\n    Write a function to remove duplicates from a given string.\n    '''\n    # remove all the double character from the string\n    s = list(s)\n    s.sort()\n    # index of first occurrence of the character in the string\n    index = 0\n    for i in range(len(s)):\n        if s[i]!= s[index]:\n            index = i\n    # remove the duplicate\n    s = s[:index] + s[index + 1:]\n    return \"\".join(s)\n    \ndef replace_double_char(s):\n    '''\n    Write a function to replace the double character of a given string with the character '*'.\n    '''\n    if len(s) == 0:\n        return ''\n    if s[0] == 'd':\n        s = '*' + s[1:]\n        return s\n    if s[0] == 'c':\n        s = '*' + s[1:]\n        return s\n    if s[0] =='s':\n        return '*' + s[1:]\n    return s\n    \ndef rev(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(s) == 0:\n        return ''\n    s = list(s)\n    s.reverse()\n    return \"\".join(s)\n    \ndef pre_process(s):\n    '''\n    Write a function to do some preprocessing of the given string.\n    '''\n    s = s.replace('*', '_')\n    s = s.replace('c', 'C')\n    s = s.replace('c', 'C')\n    s = s.replace('d', 'D')\n    s = s.replace('d', 'D')\n    s = s.replace('s', 'S')\n    s = s.replace('s', 'S')\n    s = s.replace('l', 'L')\n    s = s.replace('l', 'L')\n    s = s.replace('o', 'O')\n    s = s.replace('o', 'O')\n    s = s.replace('s', 'S')\n    s = s.replace('s', 'S')\n    s = s.replace('m', 'M')\n    s = s.replace('m', 'M')\n    s = s.replace('t', 'T')\n    s = s.replace('t', 'T')\n    return s\n    \ndef update_index(s, index):\n    '''\n    Write a function to update the given string in the given index.\n    '''\n    if len(s) == 0:\n        return ''\n    if s[0] == 'd':\n        if index > 0 and index < len(s):\n            s = s[:index - 1] + s[index + 1:]\n        else:\n            s = s[:index] + s[index + 1:]\n    elif s[0] == 'c':\n        if index > 0 and index < len(s):\n            s = s[:index - 1] + s[index + 1:]\n        else:\n            s = s[:index] + s[index + 1:]\n    elif s[0] =='s':\n        if index > 0 and index < len(s):\n            s = s[:index - 1] + s[index + 1:]\n        else:\n            s = s[:index] + s[index + 1:]\n    elif s[0] == 'l':\n        if index > 0 and index < len(s):\n            s = s[:index - 1] + s[index + 1:]\n        else:\n            s = s[:index] + s[index + 1:]\n    elif s[0] == 'o':\n        if index > 0 and index < len(s):\n            s = s[:index - 1] + s[index + 1:]\n        else:\n            s = s[:index] + s[index + 1:]\n    elif s[0] == 't':\n        if index > 0 and index < len(s):\n            s = s[:index - 1] + s[index + 1:]\n        else:\n            s = s[:index] + s[index + 1:]\n    return s\n    \ndef replace_int(s):\n    '''\n    Write a function to replace the integer in a given string.\n    '''\n    if len(s) == 0:\n        return ''\n    if s[0] == 'i':\n        s = '*' + s[1:]\n    if s[0] == 'c':\n        s = '*' + s[1:]\n    if s[0] =='m':\n        s = '*' + s[1:]\n        s = s.replace('*', '*')\n    if s[0] == 'l':\n        s = '*' + s[1:]\n        s = s.replace('*', '*')\n    if s[0] =='s':\n        s = '*' + s[1:]\n        s = s.replace('*', '*')\n    if s[0] == 't':\n        s = '*' + s[1:]\n        s = s.replace('*', '*')\n    return s\n    \ndef has_duplicate(s):\n    '''\n    Write a function to check if a given string has duplicate characters.\n    '''\n    if len(s) == 0:\n        return 0\n    if s[0] == 'd':\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                return 1\n        return 0\n    if s[0] == 'c':\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                return 1\n        return 0\n    if s[0] =='s':\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                return 1\n        return 0\n    if s[0] == 'l':\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                return 1\n        return 0\n    if s[0] == 'o':\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                return 1\n        return 0\n    if s[0] == 't':\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                return 1\n        return 0\n    return 1\n    \ndef is_float(s):\n    '''\n    Write a function to check if a given string is a float.\n    '''\n    if len(s) == 0:\n        return 0\n    if s[0] == '.':\n        return 1\n    if s[0] == 'e':\n        return 2\n    if s[0] == 'E':\n        return 2\n    if s[0] == '-':\n        s = s[1:]\n        if s[0] == '+':\n            s = s[1:]\n            return 2\n        if s[0] == '-':\n            s = s[1:]\n            if s[0] == '.':\n                s = s[1:]\n                return 2\n        if s[0] == '.':\n            s = s[1:]\n            if s[0] == '-':\n                s = s[1:]\n                if s[0] == '.':\n                    s = s[1:]\n                    return 2\n            if s[0] == '.':\n                s = s[1:]\n                if s[0] == '+':\n                    s = s[1:]\n                    return 2\n                if s[0] == '-':\n                    s = s[1:]\n                    if s[0] == '.':\n                        s = s[1:]\n                        return 2\n                    if s[0] == '+':\n                        s = s[1:]\n                        return 2\n                if s[0] == '+':\n                    s = "
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def _count_occurance(s):\n        return sum([1 for i in range(len(s)) if s[i] =='s'])\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    my_dict = {}\n    for char in s:\n        if char not in my_dict:\n            my_dict[char] = 0\n        my_dict[char] += 1\n    print(my_dict)\n    return my_dict\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occ_count=0\n    str1=list(s)\n    for i in range(len(str1)):\n        if str1[i]=='std':\n            occ_count+=1\n    return occ_count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    total = 0\n    for c in s:\n        if c =='std':\n            total += 1\n    return total\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s_len = len(s)\n    occurance = 0\n    for i in range(s_len):\n        occurance += s[i].find(std)\n    return occurance\n    \ndef find_occurance(s,std):\n    '''\n    Write a function to find the number of occurance of the string'std' in a given string.\n    '''\n    s_len = len(s)\n    occurance = 0\n    for i in range(s_len):\n        if s[i] == std:\n            occurance += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    else:\n        d = {}\n        for i in s:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        return len(d)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0])!= tuple:\n        raise TypeError('input tuple must be of type tuple')\n    for elem in test_tuple:\n        if type(elem)!= tuple:\n            raise TypeError('all the elements must be of type tuple')\n    # print(test_tuple)\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return True if all(tuple_element.dtype == test_tuple[1] for tuple_element in test_tuple) else False"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type_list = ['int', 'float','string']\n    test_list = []\n    for i in test_tuple:\n        if type(i) not in data_type_list:\n            return False\n        elif i not in test_list:\n            test_list.append(i)\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"Check Type for tuple : \")\n    for i in test_tuple:\n        print(i)\n    is_type_match = True\n    for i in test_tuple:\n        if type(i)!= type(''):\n            is_type_match = False\n            break\n        else:\n            pass\n    if is_type_match == False:\n        print(\"Type is not matched.\")\n    print(\"Done\")\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #arr = tuple(tuple(i) for i in test_tuple)\n    tuple_data = tuple(i for i in test_tuple)\n    type_of_data = type(tuple_data[0])\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_dict={'int':int, 'float':float}\n    return all(isinstance(i,type_dict[test_tuple[1]]) for i in test_tuple[0])\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    for index, element in enumerate(test_tuple):\n        try:\n            assert isinstance(element, str), f'{element} not a string'\n            if isinstance(element, int):\n                assert isinstance(element, float), f'{element} not a float'\n            if isinstance(element, float):\n                assert element.is_integer(), f'{element} not an int'\n            if isinstance(element, dict):\n                assert isinstance(element, dict), f'{element} not a dict'\n            if isinstance(element, list):\n                assert isinstance(element, list), f'{element} not a list'\n            if isinstance(element, tuple):\n                assert isinstance(element, tuple), f'{element} not a tuple'\n            if isinstance(element, set):\n                assert isinstance(element, set), f'{element} not a set'\n        except AssertionError as e:\n            print(f'ERROR: {e} at index {index}')\n            raise\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = list(test_tuple)\n    check = []\n    for i in test_tuple:\n        if type(i) is not str:\n            check.append(False)\n            break\n        elif type(i) is str:\n            check.append(True)\n            break\n        else:\n            check.append(True)\n            break\n    if check[0] == True:\n        if check[1] == True:\n            if check[2] == True:\n                if check[3] == True:\n                    return True\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def check_data_type(elements):\n        '''\n        Write a function to check if all the elements in tuple have same data type or not.\n        '''\n        data_type = []\n        for i in range(len(elements)):\n            data_type.append(type(elements[i]))\n        if all(data_type == list):\n            return data_type == list\n        return False\n    if len(test_tuple) > 1:\n        raise TypeError('tuple must contain one or more elements of the same type.')\n    if not check_data_type(test_tuple):\n        raise TypeError('tuple must contain one or more elements of the same type.')\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        int(test_tuple[0])\n        bool(test_tuple[0])\n        float(test_tuple[0])\n        string(test_tuple[0])\n        bool(test_tuple[1])\n        float(test_tuple[1])\n        string(test_tuple[1])\n        bool(test_tuple[2])\n        float(test_tuple[2])\n        string(test_tuple[2])\n        bool(test_tuple[3])\n        float(test_tuple[3])\n        string(test_tuple[3])\n    except:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # NOTE: Write a binary search algorithm.\n    #\n    # # Find the smallest positive element.\n    # if arr[0] <= x:\n    #     return arr[0] <= x < arr[1] or arr[0] >= x\n    # # Find the largest positive element.\n    # elif arr[0] > x:\n    #     return arr[0] < x\n    # # Find the greatest positive element.\n    # elif arr[0] >= x:\n    #     return arr[0] >= x < arr[1]\n    # # There are more than one elements with x, return False.\n    # elif arr[0] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    #\n    # # Find the smallest negative element.\n    # if arr[1] >= x:\n    #     return arr[1] < x < arr[2] or arr[1] <= x\n    # # Find the largest negative element.\n    # elif arr[1] < x:\n    #     return arr[1] < x\n    # # Find the greatest negative element.\n    # elif arr[1] <= x:\n    #     return arr[1] > x > arr[2]\n    # # There are more than one elements with x, return False.\n    # elif arr[1] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    \n    # # Find the smallest positive element.\n    # if arr[2] >= x:\n    #     return arr[2] < x < arr[3] or arr[2] <= x\n    # # Find the largest positive element.\n    # elif arr[2] < x:\n    #     return arr[2] < x\n    # # Find the greatest positive element.\n    # elif arr[2] >= x:\n    #     return arr[2] > x > arr[3]\n    # # There are more than one elements with x, return False.\n    # elif arr[2] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    \n    # # Find the smallest negative element.\n    # if arr[3] >= x:\n    #     return arr[3] < x < arr[4] or arr[3] <= x\n    # # Find the largest negative element.\n    # elif arr[3] < x:\n    #     return arr[3] < x\n    # # Find the greatest negative element.\n    # elif arr[3] <= x:\n    #     return arr[3] > x > arr[4]\n    # # There are more than one elements with x, return False.\n    # elif arr[3] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    #\n    # # Find the smallest positive element.\n    # if arr[4] >= x:\n    #     return arr[4] < x < arr[5] or arr[4] <= x\n    # # Find the largest positive element.\n    # elif arr[4] < x:\n    #     return arr[4] < x\n    # # Find the greatest positive element.\n    # elif arr[4] >= x:\n    #     return arr[4] > x > arr[5]\n    # # There are more than one elements with x, return False.\n    # elif arr[4] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    #\n    # # Find the smallest negative element.\n    # if arr[5] >= x:\n    #     return arr[5] < x < arr[6] or arr[5] <= x\n    # # Find the largest negative element.\n    # elif arr[5] < x:\n    #     return arr[5] < x\n    # # Find the greatest negative element.\n    # elif arr[5] <= x:\n    #     return arr[5] > x > arr[6]\n    # # There are more than one elements with x, return False.\n    # elif arr[5] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    #\n    # # Find the smallest positive element.\n    # if arr[6] >= x:\n    #     return arr[6] < x < arr[7] or arr[6] <= x\n    # # Find the largest positive element.\n    # elif arr[6] < x:\n    #     return arr[6] < x\n    # # Find the greatest positive element.\n    # elif arr[6] >= x:\n    #     return arr[6] > x > arr[7]\n    # # There are more than one elements with x, return False.\n    # elif arr[6] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    #\n    # # Find the smallest negative element.\n    # if arr[7] >= x:\n    #     return arr[7] < x < arr[8] or arr[7] <= x\n    # # Find the largest negative element.\n    # elif arr[7] < x:\n    #     return arr[7] < x\n    # # Find the greatest negative element.\n    # elif arr[7] <= x:\n    #     return arr[7] > x > arr[8]\n    # # There are more than one elements with x, return False.\n    # elif arr[7] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    #\n    # # Find the smallest positive element.\n    # if arr[8] >= x:\n    #     return arr[8] < x < arr[9] or arr[8] <= x\n    # # Find the largest positive element.\n    # elif arr[8] < x:\n    #     return arr[8] < x\n    # # Find the greatest positive element.\n    # elif arr[8] <= x:\n    #     return arr[8] > x > arr[9]\n    # # There are more than one elements with x, return False.\n    # elif arr[8] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    #\n    # # Find the smallest negative element.\n    # if arr[9] >= x:\n    #     return arr[9] < x < arr[10] or arr[9] <= x\n    # # Find the largest negative element.\n    # elif arr[9] < x:\n    #     return arr[9] < x\n    # # Find the greatest negative element.\n    # elif arr[9] <= x:\n    #     return arr[9] > x > arr[10]\n    # # There are more than one elements with x, return False.\n    # elif arr[9] == x:\n    #     return True\n    # # If there are no elements with x, return False.\n    # else:\n    #     return False\n    #\n    # # Find the smallest positive element.\n    # if arr[10] >= x:\n    #     return arr[10] < x < arr[11] or arr[10] <= x\n    # # Find the largest positive element.\n    # elif arr[10] < x:\n    #     return arr[10] < x\n    # # Find the greatest positive element.\n    # elif arr[10] <= x:\n    #     return arr[10] > x > arr[11]\n    # # There are more than one elements with x, return False.\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if array is empty, then return false.\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    size = n\n    \n    for i in range(size):\n        if (arr[i] == x):\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(0, n):\n        if arr[i] == x:\n            return arr[i]\n    return arr[n-1]\n    # if arr[n-1] == x:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    x = 0\n    for i in arr:\n        if x < n/2:\n            if i == x:\n                x = i\n            else:\n                x = x\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left, right = 0, n-1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # the value of the two conditions\n    # 1. n/2 = 1/2\n    # 2. n/2 = 1/2\n    # if the element exists, check to see if the value is greater than the element in the given array\n    # if the element exists, check to see if the value is greater than the element in the given array\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # get unique elements in the array\n    list_of_elements = []\n    for item in arr:\n        if item not in list_of_elements:\n            list_of_elements.append(item)\n    \n    # sort the elements in the list_of_elements\n    list_of_elements.sort()\n    \n    # count the number of occurrences of the elements in the list_of_elements\n    number_of_elements = len(list_of_elements)\n    count = 0\n    for item in list_of_elements:\n        if item == x:\n            count += 1\n    \n    # check if the count of occurrences is greater than the number of elements\n    if count >= n//2:\n        return True\n    \n    # return false if count is less than or equal to the number of elements\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr[n//2] == x or x in arr[:n//2]\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #Find the length of array\n    length = len(arr)\n    #Use a binary search to find the element to look for\n    i = 0\n    while i < length:\n        if arr[i] == x:\n            return True\n        else:\n            i += 1\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    while n >= 1:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n): \n        if (n & 1): \n            count += 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res=0\n    for i in range(0,n):\n        res=res+int(n%2)\n        n=n//2\n    return res\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n\n    count = 0\n    while num >= 1:\n        if (num & 1):\n            count += 1\n        num = num >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = set()\n    cnt = 0\n    while n!= 0:\n        r = n % 2\n        n = n // 2\n        s.add(r)\n        cnt += 1\n    return cnt\n    \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    l = []\n    i = 0\n    while(i<len(n)):\n        if(n[i]=='0'):\n            l.append('1')\n        else:\n            l.append('0')\n        i=i+1\n    i=0\n    while(i<len(l)):\n        if(l[i]=='1'):\n            print(i)\n        else:\n            i=i+1\n        i=i+1\n    print(l)\n    i=0\n    while(i<len(l)):\n        if(l[i]=='1'):\n            print(i)\n        else:\n            i=i+1\n        i=i+1\n    \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    for bit in str(n):\n        if bit == '0':\n            set_bits = set_bits + 1\n        else:\n            set_bits = set_bits - 1\n    return set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            ans+=1\n    print(ans)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Check if number is not negative\n    if(n < 0):\n        print('ERROR: Negative number passed to function')\n        return 0\n    # Check if number is negative\n    if(n < 0):\n        print('ERROR: Negative number passed to function')\n        return 0\n    # Convert the number to binary\n    bin_n = bin(n)\n    # Print the binary digits\n    print(bin_n[2:])\n    # Get the number of set bits\n    n_bits = len(bin_n) - 2\n    # Return the number of set bits\n    return n_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = [i for i in range(10)]\n    set_bits.append(1)\n    n_bits = 0\n    for i in range(n):\n        n_bits = n_bits + set_bits[i]\n    return n_bits\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    evens = []\n    nums = []\n    for i in range(0, len(str)):\n        if i % 2 == 0:\n            nums.append(str[i])\n    for i in nums:\n        if i not in evens:\n            evens.append(i)\n    print(evens)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(str[0],'')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = str.replace(' ', '')\n    return result.replace(result[0], '')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_str += str[i]\n    return odd_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # write your code here\n    return str[:-1]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_dict = dict()\n    str_list = []\n    for char in str:\n        if char in str_dict:\n            str_dict[char] += 1\n        else:\n            str_dict[char] = 1\n    \n    for char in str_dict:\n        if str_dict[char] % 2!= 0:\n            str_list.append(char)\n    \n    return str_list"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = \"\"\n    count = 0\n    for i in str:\n        if (i % 2) == 0:\n            count = count + 1\n    if count > 0:\n        for j in range(count):\n            odd_string = odd_string + i\n    return odd_string\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output = []\n    for i in str:\n        if i % 2!= 0:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indexes = []\n    for i in range(len(str)):\n        if str[i] % 2!= 0:\n            odd_indexes.append(i)\n    return odd_indexes\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # code here\n    x = str.split()\n    odd_index_values = []\n    for i in x:\n        if int(i) % 2 == 0:\n            odd_index_values.append(i)\n    return odd_index_values\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # find the minimum value\n    min_value = min(a,b,c)\n    return min_value\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\nprint(min_of_three(4,4,4))"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    if b > c:\n        if b > a:\n            return b\n        else:\n            return a\n    if c > a:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    if c > a and c > b:\n        return c\n    return -1"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a>b and a>c):\n        return a\n    elif (b>a and b>c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return (min(a,b,c))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and b>c:\n        return a\n    elif a>b and c>b:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a>b and a>c):\n        return a\n    elif(b>a and b>c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    Bits_Set = []\n    for i in range(n):\n        Bits_Set.append(0)\n    \n    for i in range(n):\n        Bits_Set[l+i] = 1\n    \n    for i in range(n):\n        Bits_Set[r-i] = 1\n    \n    for i in range(n):\n        if Bits_Set[i] == 0:\n            print(i,end=\" \")\n    print()\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n==0:\n        return \"Unset\"\n    if n==1:\n        return \"Unset\"\n    if n==2:\n        return \"Unset\"\n    if n==3:\n        return \"Unset\"\n    if n==4:\n        return \"Unset\"\n    if n==5:\n        return \"Unset\"\n    if n==6:\n        return \"Unset\"\n    if n==7:\n        return \"Unset\"\n    if n==8:\n        return \"Unset\"\n    if n==9:\n        return \"Unset\"\n    if n==10:\n        return \"Unset\"\n    if n==11:\n        return \"Unset\"\n    if n==12:\n        return \"Unset\"\n    if n==13:\n        return \"Unset\"\n    if n==14:\n        return \"Unset\"\n    if n==15:\n        return \"Unset\"\n    if n==16:\n        return \"Unset\"\n    if n==17:\n        return \"Unset\"\n    if n==18:\n        return \"Unset\"\n    if n==19:\n        return \"Unset\"\n    if n==20:\n        return \"Unset\"\n    if n==21:\n        return \"Unset\"\n    if n==22:\n        return \"Unset\"\n    if n==23:\n        return \"Unset\"\n    if n==24:\n        return \"Unset\"\n    if n==25:\n        return \"Unset\"\n    if n==26:\n        return \"Unset\"\n    if n==27:\n        return \"Unset\"\n    if n==28:\n        return \"Unset\"\n    if n==29:\n        return \"Unset\"\n    if n==30:\n        return \"Unset\"\n    if n==31:\n        return \"Unset\"\n    if n==32:\n        return \"Unset\"\n    if n==33:\n        return \"Unset\"\n    if n==34:\n        return \"Unset\"\n    if n==35:\n        return \"Unset\"\n    if n==36:\n        return \"Unset\"\n    if n==37:\n        return \"Unset\"\n    if n==38:\n        return \"Unset\"\n    if n==39:\n        return \"Unset\"\n    if n==40:\n        return \"Unset\"\n    if n==41:\n        return \"Unset\"\n    if n==42:\n        return \"Unset\"\n    if n==43:\n        return \"Unset\"\n    if n==44:\n        return \"Unset\"\n    if n==45:\n        return \"Unset\"\n    if n==46:\n        return \"Unset\"\n    if n==47:\n        return \"Unset\"\n    if n==48:\n        return \"Unset\"\n    if n==49:\n        return \"Unset\"\n    if n==50:\n        return \"Unset\"\n    if n==51:\n        return \"Unset\"\n    if n==52:\n        return \"Unset\"\n    if n==53:\n        return \"Unset\"\n    if n==54:\n        return \"Unset\"\n    if n==55:\n        return \"Unset\"\n    if n==56:\n        return \"Unset\"\n    if n==57:\n        return \"Unset\"\n    if n==58:\n        return \"Unset\"\n    if n==59:\n        return \"Unset\"\n    if n==60:\n        return \"Unset\"\n    if n==61:\n        return \"Unset\"\n    if n==62:\n        return \"Unset\"\n    if n==63:\n        return \"Unset\"\n    if n==64:\n        return \"Unset\"\n    if n==65:\n        return \"Unset\"\n    if n==66:\n        return \"Unset\"\n    if n==67:\n        return \"Unset\"\n    if n==68:\n        return \"Unset\"\n    if n==69:\n        return \"Unset\"\n    if n==70:\n        return \"Unset\"\n    if n==71:\n        return \"Unset\"\n    if n==72:\n        return \"Unset\"\n    if n==73:\n        return \"Unset\"\n    if n==74:\n        return \"Unset\"\n    if n==75:\n        return \"Unset\"\n    if n==76:\n        return \"Unset\"\n    if n==77:\n        return \"Unset\"\n    if n==78:\n        return \"Unset\"\n    if n==79:\n        return \"Unset\"\n    if n==80:\n        return \"Unset\"\n    if n==81:\n        return \"Unset\"\n    if n==82:\n        return \"Unset\"\n    if n==83:\n        return \"Unset\"\n    if n==84:\n        return \"Unset\"\n    if n==85:\n        return \"Unset\"\n    if n==86:\n        return \"Unset\"\n    if n==87:\n        return \"Unset\"\n    if n==88:\n        return \"Unset\"\n    if n==89:\n        return \"Unset\"\n    if n==90:\n        return \"Unset\"\n    if n==91:\n        return \"Unset\"\n    if n==92:\n        return \"Unset\"\n    if n==93:\n        return \"Unset\"\n    if n==94:\n        return \"Unset\"\n    if n==95:\n        return \"Unset\"\n    if n==96:\n        return \"Unset\"\n    if n==97:\n        return \"Unset\"\n    if n==98:\n        return \"Unset\"\n    if n==99:\n        return \"Unset\"\n    if n==100:\n        return \"Unset\"\n    if n==101:\n        return \"Unset\"\n    if n==102:\n        return \"Unset\"\n    if n==103:\n        return \"Unset\"\n    if n==104:\n        return \"Unset\"\n    if n==105:\n        return \"Unset\"\n    if n==106:\n        return \"Unset\"\n    if n==107:\n        return \"Unset\"\n    if n==108:\n        return \"Unset\"\n    if n==109:\n        return \"Unset\"\n    if n==110:\n        return \"Unset\"\n    if n==111:\n        return \"Unset\"\n    if n==112:\n        return \"Unset\"\n    if n==113:\n        return \"Unset\"\n    if n==114:\n        return \"Unset\"\n    if n==115:\n        return \"Unset\"\n    if n==116:\n        return \"Unset\"\n    if n==117:\n        return \"Unset\"\n    if n==118:\n        return \"Unset\"\n    if n==119:\n        return \"Unset\"\n    if n==120:\n        return \"Unset\"\n    if n==121:\n        return \"Unset\"\n    if n==122:\n        return \"Unset\"\n    if n==123:\n        return \"Unset\"\n    if n==124:\n        return \"Unset\"\n    if n==125:\n        return \"Unset\"\n    if n==126:\n        return \"Unset\"\n    if n==127:\n        return \"Unset\"\n    if n==128:\n        return \"Unset\"\n    if n==129:\n        return \"Unset\"\n    if n==130:\n        return \"Unset\"\n    if n==131:\n        return \"Unset\"\n    if n==132:\n        return \"Unset\"\n    if n==133:\n        return \"Unset\"\n    if n==134:\n        return \"Unset\"\n    if n==135:\n        return \"Unset\"\n    if n==136:\n        return \"Unset\"\n    if n==137:\n        return \"Unset\"\n    if n==138:\n        return \"Unset\"\n    if n==139:\n        return \"Unset\"\n    if n==140:\n        return \"Unset\"\n    if n==141:\n        return \"Unset\"\n    if n==142"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n==0:\n        return 0\n    else:\n        a=n%2\n        if a==0:\n            return 0\n        else:\n            n//=2\n            if r-l<1:\n                return 1\n            else:\n                return all_Bits_Set_In_The_Given_Range(n,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l<=n and r>=l):\n        if (n-l)&(n-r) == (r-l):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    assert(n>=0)\n    if n==0:\n        return False\n    i=0\n    if n>1:\n        while n!=0:\n            n&=n-1\n            i+=1\n            if n==1:\n                return i==r\n            n>>=1\n    else:\n        n&=n-1\n        return n==0\n    \n    \ndef get_bits_in_the_given_range(n,l,r):  \n    '''\n    Write a python function to return the bits of the number n in the given range.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    l=min(n,l)\n    r=max(n,r)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n    \ndef swap_bits(n,l,r):  \n    '''\n    Write a python function to swap two bits of the given number.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    assert(n<=n>>1)\n    if(n>=1):\n        n&=n-1\n        l=min(n,l)\n        r=max(n,r)\n        n>>=1\n        l=min(n,l)\n        r=max(n,r)\n        n<<=1\n        n&=n-1\n    return n\n    \ndef get_bits_in_the_given_range_with_swap(n,l,r):  \n    '''\n    Write a python function to return the bits of the number n in the given range with a swap.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    assert(n<=n>>1)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n        \ndef get_one_bit_in_the_given_range(n,l,r):  \n    '''\n    Write a python function to return the one bit of the number n in the given range.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    assert(n<=n>>1)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return 1\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n    \ndef get_all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to return the all the bits of the given range.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    i=0\n    if n>1:\n        while n!=0:\n            n&=n-1\n            i+=1\n            if n==1:\n                return i==r\n            n>>=1\n    else:\n        n&=n-1\n        return n==0\n    \n    \ndef get_all_Bits_Set_In_The_Given_Range_With_Swap(n,l,r):  \n    '''\n    Write a python function to return the all the bits of the given range with a swap.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n    \ndef get_all_Bits_Set_In_The_Given_Range_With_Swap_Coded(n,l,r):  \n    '''\n    Write a python function to return the all the bits of the given range with a swap with the code.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n        \ndef get_all_Bits_Set_In_The_Given_Range_With_Swap_Coded_Swapped(n,l,r):  \n    '''\n    Write a python function to return the all the bits of the given range with a swap with the code with a swap.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n        \ndef get_all_Bits_Set_In_The_Given_Range_With_Swap_Coded_Swapped_Coded(n,l,r):  \n    '''\n    Write a python function to return the all the bits of the given range with a swap with the code and the code with a swap.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n    \ndef get_all_Bits_Set_In_The_Given_Range_With_Swap_Coded_Swapped_Coded_Swapped(n,l,r):  \n    '''\n    Write a python function to return the all the bits of the given range with a swap with the code and the code with a swap and a swap.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n        \ndef get_all_Bits_Set_In_The_Given_Range_With_Swap_Coded_Swapped_Coded_Swapped(n,l,r):  \n    '''\n    Write a python function to return the all the bits of the given range with a swap with the code and the code with a swap and a swap.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+=1\n    return n>>1\n        \ndef get_all_Bits_Set_In_The_Given_Range_With_Swap_Coded_Swapped_Coded_Swapped(n,l,r):  \n    '''\n    Write a python function to return the all the bits of the given range with a swap with the code and the code with a swap and a swap.\n    '''\n    assert(n>=0)\n    assert(l<=r)\n    count=0\n    while(n>=l):\n        n>>=1\n        count+=1\n    if(count==r):\n        return n\n    while(n<l):\n        n<<=1\n        n&=n-1\n        count+="
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l > r):\n        return \"Error: Only binary numbers can be checked\"\n    if (n > (2**(n-1))):\n        return \"Error: n is greater than the number of bits\"\n    \n    if(n==0):\n        return \"Error: n is zero\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(\"Print the Bits that are unset in the given range\")\n    print(\"Input:\")\n    print(\"n = \",n,\",l = \",l,\",r = \",r)\n    if(l > r):\n        print(\"Error: the range given is not valid\")\n    elif(l == r):\n        print(\"Set the bits at\",l,\"in the given range\")\n    elif(r == l):\n        print(\"Set the bits at\",l,\"in the given range\")\n    elif(l > 0 and r < 8):\n        print(\"The bits at\",l,\"in the given range are unset\")\n    elif(l < 0 and r < 8):\n        print(\"The bits at\",l,\"in the given range are unset\")\n    elif(r > 0 and l < 8):\n        print(\"The bits at\",l,\"in the given range are unset\")\n    elif(r < 0 and l < 8):\n        print(\"The bits at\",l,\"in the given range are unset\")\n    else:\n        print(\"The range is not valid\")\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        c = n % 2\n        n = n//2\n        print(c, n)\n        if c==1:\n            if n==0:\n                return True\n            elif n==1:\n                return False\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<=n and r<=n:\n        mask=2**l-1\n        mask_length=len(bin(mask))\n        bits=n-mask_length\n        if bits>=0:\n            for i in range(0,mask_length):\n                if bin(i)[-1]=='1':\n                    if bits>=i:\n                        return False\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = int(l)\n    r = int(r)\n    if l>r:\n        return False\n    else:\n        for i in range(l,r+1):\n            for j in str(i):\n                if(j!=\"0\"):\n                    return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr)\n    if n < len(arr):\n        arr = arr[:n]\n    else:\n        arr[0] = arr[-1]\n        arr[1:] = arr[:-1]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = np.array(arr)\n    #initialize array with 0's, then update elements in list\n    arr = np.append(arr, np.zeros(n-len(arr)))\n    #set negative elements to positive\n    arr = np.append(arr, np.abs(arr))\n    #get positive elements in reversed order\n    arr = np.flip(np.nonzero(arr), axis=0)\n    #resort elements in same order\n    arr = np.flip(arr)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    output = []\n    for i in range(n):\n        index = arr.index(-i)\n        if index % 2 == 0:\n            output.append(arr[index])\n        else:\n            output.append(arr[index]+1)\n            \n    return output\n    \ndef re_arrange_array_old(arr, n):\n    '''\n    Given an array and an integer n, write a function that re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n    \ndef re_arrange_array_2(arr, n):\n    '''\n    Given an array and an integer n, write a function that re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    output = []\n    for i in range(n):\n        if arr[i] < 0:\n            output.append(arr[i])\n        else:\n            output.append(arr[i]+1)\n            \n    return outpu"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_reorder = []\n    for i in range(n):\n        if arr[i] < 0:\n            arr_reorder.append(arr[i])\n            arr[i] = arr[-1]\n            arr[-1] = -1\n        elif arr[i] > 0:\n            arr_reorder.append(arr[i])\n            arr[i] = arr[0]\n            arr[0] = -1\n    return arr_reorder\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # # Write your code here\n    arr.sort()\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = copy.deepcopy(arr)\n    arr[0:0] = [-i for i in arr[0:0]]\n    arr[0:0] += [0 for i in range(n)]\n    arr[0:0] += [i for i in range(-n,0,-1) if i>0]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        arr[i] *= -1\n    for i in range(n, len(arr)):\n        arr[i] *= -1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort(reverse=True)\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n    \ndef find_min_max(arr):\n    '''\n    Find the minimum and maximum values of the given array, and return it as an array of positive values.\n    '''\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in arr:\n        if i < 0:\n            min_val = min(i, min_val)\n            max_val = max(i, max_val)\n        else:\n            min_val = min(i, min_val)\n            max_val = max(i, max_val)\n    return [min_val, max_val]\n    \ndef sort_array(arr):\n    '''\n    Sort the given array of integers and return it.\n    '''\n    # get the size of the array\n    size = len(arr)\n    # set up the new array\n    new = []\n    # create a copy of the array\n    for i in range(size):\n        new.append(arr[i])\n    # sort the array\n    for i in range(size):\n        for j in range(size-1-i):\n            if new[j] > new[j+1]:\n                temp = new[j]\n                new[j] = new[j+1]\n                new[j+1] = temp\n    return new\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n            new_arr.append(-arr[i])\n            arr[i] = -arr[i]\n        elif arr[i] > 0:\n            new_arr.append(arr[i])\n            arr[i] = -arr[i]\n    arr = arr[:n]\n    return arr, new_arr\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\").replace(\"  \",\"\")\n    str1 = str1.replace(\"   \",\"\").replace(\"  \",\"\")\n    str1 = str1.replace(\"  \",\"\").replace(\"   \",\"\")\n    str1 = str1.replace(\"  \",\"\").replace(\"   \",\"\")\n    str1 = str1.replace(\"  \",\"\").replace(\"   \",\"\")\n    str1 = str1.replace(\"   \",\"\").replace(\"  \",\"\")\n    str1 = str1.replace(\"   \",\"\").replace(\"  \",\"\")\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=''\n    for i in str1:\n        if i == char:\n            str2=str2+char\n        else:\n            str2=str2+i\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",\"\")\n    new_str = new_str.replace(char,\"\")\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\t','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # YOUR CODE HERE\n    str1 = str1.replace(char,\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i] == \" \":\n            str1 = str1.replace(str1[i],char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    string = str1.split()\n    index = string.index(char)\n    string[index] = char\n    return''.join(string)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    answer = []\n    for i in range(n):\n        answer.append(heapq.heappop(heap))\n    return answer\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n<=0:\n        return []\n    if n==1:\n        return list1\n    else:\n        largest_list=[]\n        for i in range(len(list1)):\n            if len(largest_list)<n:\n                heapq.heappush(largest_list,list1[i])\n            else:\n                if len(largest_list)>n:\n                    heapq.heappush(largest_list,list1[i])\n                else:\n                    heapq.heappush(largest_list,list1[i])\n        return largest_list\ndef kth_smallest(list1,k,n):\n    '''\n    Write a function that takes in a list and a number k and returns the kth smallest item of the list.\n    '''\n    if k==1:\n        return list1[k-1]\n    if k==len(list1):\n        return list1[0]\n    if k<len(list1):\n        if len(list1)>k:\n            return kth_smallest(list1[k:],k,n)\n        else:\n            return list1[k-1]\ndef kth_largest(list1,k,n):\n    '''\n    Write a function that takes in a list and a number k and returns the kth largest item of the list.\n    '''\n    if k==1:\n        return list1[k-1]\n    if k==len(list1):\n        return list1[0]\n    if k<len(list1):\n        if len(list1)>k:\n            return kth_largest(list1[k:],k,n)\n        else:\n            return list1[k-1]\ndef print_list(list1,n):\n    '''\n    Write a function that takes in a list and a number n and returns a new list with all the elements of the list.\n    '''\n    if len(list1)<=n:\n        return list1\n    else:\n        for i in range(len(list1)):\n            list1[i]=list1[i]**2\n        heapq.heapify(list1)\n        kth_smallest=heapq.nlargest(n,list1)\n        list1=list1+kth_smallest\n        heapq.heapify(list1)\n        kth_largest=heapq.nlargest(n,list1)\n        list1=list1+kth_largest\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    output = []\n    for i in range(n):\n        output.append(heapq.heappop(list1))\n    return output\ndef qns_cust(list1,n,d):\n    '''\n    Write a function that takes in a list, an integer n and a dictionary d that has a key called \"cust\" and a key called \"value\", and returns the value of the\n    dictionary whose key is the key of \"cust\" and returns that value.\n    '''\n    for i in d:\n        if d[i] == n:\n            if \"cust\" in d:\n                return d[\"cust\"]\n            else:\n                return \"No cust\"\n    return \"No cust\"\ndef nlist(list1,n,d):\n    '''\n    Write a function that takes in a list, an integer n and a dictionary d that has a key called \"cust\" and a key called \"value\", and returns a dictionary whose keys are the\n    keys of \"cust\" and whose values are the values of \"cust\"\n    '''\n    temp=[]\n    for i in d:\n        if d[i] == n:\n            temp.append(d[i])\n    return {i:j for i,j in zip(temp,list1)}\ndef find_smallest(list1):\n    '''\n    Write a function that takes in a list and returns the smallest value in the list.\n    '''\n    for i in list1:\n        if list1[i] < list1[list1.index(i)]:\n            list1[i],list1[list1.index(i)] = list1[list1.index(i)],list1[i]\n    return list1\ndef finding_smallest(list1):\n    '''\n    Write a function that takes in a list and returns the smallest value in the list.\n    '''\n    list1.sort()\n    for i in range(len(list1)-1):\n        if list1[i+1] < list1[i]:\n            list1[i],list1[i+1] = list1[i+1],list1[i]\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,list1.pop(0))\n    return(heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    return heapq.nlargest(n,list1)\ndef nlargest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    return list1[:n]\ndef main():\n    n = 3\n    list1 = [1,5,6,8,7,2,9,4,10]\n    print(larg_nnum(list1,n))\n    print(nlargest(list1,n))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return []\n    else:\n        heapq.heapify(list1)\n        while len(list1) > n:\n            heapq.heappush(list1,heapq.heappop(list1))\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_of_nums = []\n    for x in list1:\n        list_of_nums.append(x)\n    heapq.heapify(list_of_nums)\n    return heapq.nlargest(n, list_of_nums)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l=[]\n    heapq.heapify(l)\n    for i in range(len(list1)):\n        heapq.heappush(l,list1[i])\n    list1.pop(0)\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    lst = []\n    for i in list1:\n        if i not in lst:\n            lst.append(i)\n    return lst[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    l=r*(3/2)\n    u=h*(4/3)\n    return l+u\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r*h/2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r*(np.tan(np.pi*h/2))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Inputs:\n    # r - radius of the cylinder\n    # h - height of the cylinder\n    \n    # Output:\n    # This function should return the surface area of a cylinder with a given radius and height.\n    \n    import math\n    \n    # Calculate the semi-perpendicular distance between two successive points\n    def seperation(x1, y1, x2, y2):\n        d1 = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n        d2 = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n        d1 = d1 * (1 - d1)\n        d2 = d2 * (1 - d2)\n        return math.sqrt((d1 - d2)**2 + (d1 + d2)**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    u = r * np.sin(np.pi / 6)\n    v = r * np.cos(np.pi / 6)\n    return(u * v * h)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from sympy import *\n    import numpy as np\n    import matplotlib.pyplot as plt\n    #From https://stackoverflow.com/questions/3405179/how-to-calculate-lateral-surface-area-of-a-cylinder\n    c = (sqrt(r**2 - 1) + 1)/(2*r)\n    m = (sqrt(r**2 + 1) + 1)/(2*r)\n    L = (m*c)/(2*r)\n    return L\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #if the height of the cylinder is higher than the height of the surface, return the height of the cylinder\n    #as a result of the function\n    if h > h_cylinder:\n        return h\n    else:\n        return (r**2)*h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = 0\n    while theta <= pi:\n        theta = theta + h\n        if theta > 2*pi:\n            theta = theta - 2*pi\n        if theta > 2*pi and theta < pi:\n            s = 1\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    m = r*h\n    a = m**(1/3)\n    return(a)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    w,l,h = r,h,r\n    return (l**2)*np.pi*((w/2)**2)*((h/2)**2)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 1:\n        return 0\n    elif l == 2:\n        return 1\n    elif l == 3:\n        return 3\n    else:\n        return 3*3*3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    def volume(l):\n        volume = (l*3.14)*(l)*(l)*3\n        return volume\n    def volume_per(l):\n        volume = (l*3.14)*(l)*(l)*3/4\n        return volume\n    if l<1:\n        raise ValueError('Input value must be positive')\n    elif l>10:\n        raise ValueError('Input value must be between 1 and 10')\n    else:\n        for i in range(1,5):\n            print(f'{i}\u00b0 side')\n            print(f'Volume of a cube in {i}\u00b0 side: {volume(i)}')\n            print(f'{i}\u00b0 side: {volume_per(i)}')\n        return volume_per(l)\n    return volume(l)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for i in range(3):\n        for j in range(3):\n            volume += l**(3-i)*(l**i)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3*(l*l)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    volume = 0.0\n    for side in l:\n        volume += side*side\n    \n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for r in range(len(l)):\n        for c in range(len(l)):\n            for d in range(len(l)):\n                volume += l[r]*l[c]*l[d]\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def area(a,b,c,d):\n        '''\n        Function to calculate the volume of a cube given its side lengths.\n        '''\n        return (a*b*c*d)\n    print(\"The volume of the cube is:\")\n    print(f\"The area of the cube is: {area(l,l,l,l)}\")\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)*(3/8)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Edge Case\n    if l == 0:\n        return 0\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l*l)\n    return volume\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    temp=n>>4\n    temp=n&0x
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary = bin(n)[2:]\n    sum_binary = 0\n    for bit in binary:\n        sum_binary += int(bit)\n    if sum_binary % 2 == 0:\n        even_bit = True\n    else:\n        even_bit = False\n    return even_bit\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bits = [0] * n \n    for i in range(0,n):\n        bits[i] = (i & 1) \n    return bits \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # if n is even \n    if n % 2 == 0: \n        # print(n, \"is even\")\n        # print(n, \"and\", n & 1)\n        # return\n        # print(n, \"is odd\")\n        # print(n, \"and\", n >> 1)\n        # return\n        even_bit_set_number(n, True)\n        even_bit_set_number(n, False)\n    else: \n        # print(n, \"is odd\")\n        # print(n, \"and\", n >> 1)\n        # return\n        # print(n, \"is even\")\n        even_bit_set_number(n, False)\n        even_bit_set_number(n, True)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0 \n    res = bin(n & 0xff) \n    return int(res, 2) \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return even_bit_set_number(n//2) + even_bit_set_number(n//2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(n): \n        if(i & 1): \n            print(1)\n        else: \n            print(0)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bin_num = bin(n)\n    bin_num = bin_num.replace(\"0b\", \"\")\n    bin_num = bin_num.replace(\"1\", \"\")\n    bin_num = bin_num.replace(\"-\", \"\")\n    bin_num = bin_num.replace(\"0\", \"\")\n    bin_num = bin_num.replace(\"1\", \"\")\n    bin_num = bin_num.replace(\"2\", \"\")\n    bin_num = bin_num.replace(\"3\", \"\")\n    bin_num = bin_num.replace(\"4\", \"\")\n    bin_num = bin_num.replace(\"5\", \"\")\n    bin_num = bin_num.replace(\"6\", \"\")\n    bin_num = bin_num.replace(\"7\", \"\")\n    bin_num = bin_num.replace(\"8\", \"\")\n    bin_num = bin_num.replace(\"9\", \"\")\n    bin_num = bin_num.replace(\"10\", \"\")\n    bin_num = bin_num.replace(\"11\", \"\")\n    bin_num = bin_num.replace(\"12\", \"\")\n    bin_num = bin_num.replace(\"13\", \"\")\n    bin_num = bin_num.replace(\"14\", \"\")\n    bin_num = bin_num.replace(\"15\", \"\")\n    bin_num = bin_num.replace(\"16\", \"\")\n    bin_num = bin_num.replace(\"17\", \"\")\n    bin_num = bin_num.replace(\"18\", \"\")\n    bin_num = bin_num.replace(\"19\", \"\")\n    bin_num = bin_num.replace(\"20\", \"\")\n    bin_num = bin_num.replace(\"21\", \"\")\n    bin_num = bin_num.replace(\"22\", \"\")\n    bin_num = bin_num.replace(\"23\", \"\")\n    bin_num = bin_num.replace(\"24\", \"\")\n    bin_num = bin_num.replace(\"25\", \"\")\n    bin_num = bin_num.replace(\"26\", \"\")\n    bin_num = bin_num.replace(\"27\", \"\")\n    bin_num = bin_num.replace(\"28\", \"\")\n    bin_num = bin_num.replace(\"29\", \"\")\n    bin_num = bin_num.replace(\"30\", \"\")\n    bin_num = bin_num.replace(\"31\", \"\")\n    bin_num = bin_num.replace(\"32\", \"\")\n    bin_num = bin_num.replace(\"33\", \"\")\n    bin_num = bin_num.replace(\"34\", \"\")\n    bin_num = bin_num.replace(\"35\", \"\")\n    bin_num = bin_num.replace(\"36\", \"\")\n    bin_num = bin_num.replace(\"37\", \"\")\n    bin_num = bin_num.replace(\"38\", \"\")\n    bin_num = bin_num.replace(\"39\", \"\")\n    bin_num = bin_num.replace(\"40\", \"\")\n    bin_num = bin_num.replace(\"41\", \"\")\n    bin_num = bin_num.replace(\"42\", \"\")\n    bin_num = bin_num.replace(\"43\", \"\")\n    bin_num = bin_num.replace(\"44\", \"\")\n    bin_num = bin_num.replace(\"45\", \"\")\n    bin_num = bin_num.replace(\"46\", \"\")\n    bin_num = bin_num.replace(\"47\", \"\")\n    bin_num = bin_num.replace(\"48\", \"\")\n    bin_num = bin_num.replace(\"49\", \"\")\n    bin_num = bin_num.replace(\"50\", \"\")\n    bin_num = bin_num.replace(\"51\", \"\")\n    bin_num = bin_num.replace(\"52\", \"\")\n    bin_num = bin_num.replace(\"53\", \"\")\n    bin_num = bin_num.replace(\"54\", \"\")\n    bin_num = bin_num.replace(\"55\", \"\")\n    bin_num = bin_num.replace(\"56\", \"\")\n    bin_num = bin_num.replace(\"57\", \"\")\n    bin_num = bin_num.replace(\"58\", \"\")\n    bin_num = bin_num.replace(\"59\", \"\")\n    bin_num = bin_num.replace(\"60\", \"\")\n    bin_num = bin_num.replace(\"61\", \"\")\n    bin_num = bin_num.replace(\"62\", \"\")\n    bin_num = bin_num.replace(\"63\", \"\")\n    bin_num = bin_num.replace(\"64\", \"\")\n    bin_num = bin_num.replace(\"65\", \"\")\n    bin_num = bin_num.replace(\"66\", \"\")\n    bin_num = bin_num.replace(\"67\", \"\")\n    bin_num = bin_num.replace(\"68\", \"\")\n    bin_num = bin_num.replace(\"69\", \"\")\n    bin_num = bin_num.replace(\"70\", \"\")\n    bin_num = bin_num.replace(\"71\", \"\")\n    bin_num = bin_num.replace(\"72\", \"\")\n    bin_num = bin_num.replace(\"73\", \"\")\n    bin_num = bin_num.replace(\"74\", \"\")\n    bin_num = bin_num.replace(\"75\", \"\")\n    bin_num = bin_num.replace(\"76\", \"\")\n    bin_num = bin_num.replace(\"77\", \"\")\n    bin_num = bin_num.replace(\"78\", \"\")\n    bin_num = bin_num.replace(\"79\", \"\")\n    bin_num = bin_num.replace(\"80\", \"\")\n    bin_num = bin_num.replace(\"81\", \"\")\n    bin_num = bin_num.replace(\"82\", \"\")\n    bin_num = bin_num.replace(\"83\", \"\")\n    bin_num = bin_num.replace(\"84\", \"\")\n    bin_num = bin_num.replace(\"85\", \"\")\n    bin_num = bin_num.replace(\"86\", \"\")\n    bin_num = bin_num.replace(\"87\", \"\")\n    bin_num = bin_num.replace(\"88\", \"\")\n    bin_num = bin_num.replace(\"89\", \"\")\n    bin_num = bin_num.replace(\"90\", \"\")\n    bin_num = bin_num.replace(\"91\", \"\")\n    bin_num = bin_num.replace(\"92\", \"\")\n    bin_num = bin_num.replace(\"93\", \"\")\n    bin_num = bin_num.replace(\"94\", \"\")\n    bin_num = bin_num.replace(\"95\", \"\")\n    bin_num = bin_num.replace(\"96\", \"\")\n    bin_num = bin_num.replace(\"97\", \"\")\n    bin_num = bin_num.replace(\"98\", \"\")\n    bin_num = bin_num.replace(\"99\", \"\")\n    bin_num = bin_num.replace(\"100\", \"\")\n    bin_num = bin_num.replace(\"101\", \"\")\n    bin_num = bin_num.replace(\"102\", \"\")\n    bin_num = bin_num.replace(\"103\", \"\")\n    bin_num = bin_num.replace(\"104\", \"\")\n    bin_num = bin_num.replace(\"105\", \"\")\n    bin_num = bin_num.replace(\"106\", \"\")\n    bin_num = bin_num.replace(\"107\", \"\")\n    bin_num = bin_num.replace(\"108\", \"\")\n    bin_num = bin_num.replace(\"109\", \"\")\n    bin_num = bin_num.replace(\"110\", \"\")\n    bin_num = bin_num.replace(\"111\", \"\")\n    bin_num = bin_num.replace(\"112\", \"\")\n    bin_num = bin_num.replace(\"113\", \"\")\n    bin_num = bin_num.replace(\"114\", \"\")\n    bin_num = bin_num.replace(\"115\", \"\")\n    bin_num = bin_num.replace(\"116\", \"\")\n    bin_num = bin_num.replace(\"117\", \"\")\n    bin_num = bin_num.replace(\"118\", \"\")\n    bin_num = bin_num.replace(\"119\", \"\")\n    bin_num = bin_num.replace(\"120\", \"\")\n    bin_num = bin_num.replace(\"121\", \"\")"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n & 1  #get current bit in the number\n    if even_bits == 0:\n        return n\n    else:\n        n >>= 1 #get the next bit of the number and decrement it by 1\n        n += even_bits #add it to the next bit\n        return n \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_even = 0\n    for i in range(n):\n        if (i%2==0):\n            n_even+=1\n    return n_even\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for i in test_list:\n        key = tuple(i[0])\n        if key not in output:\n            output[key] = 1\n        else:\n            output[key] = output[key] + 1\n    return output\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # write your code here\n    d = {}\n    for tuple in test_list:\n        if tuple[0] in d:\n            d[tuple[0]] += 1\n        else:\n            d[tuple[0]] = 1\n    return d\n    "
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for test in test_list:\n        result[test[0]] = test[1]\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for each_tuple in test_list:\n        count = 0\n        for each in each_tuple:\n            if each in output:\n                output[each] += 1\n            else:\n                output[each] = 1\n    return output\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for element in test_list:\n        result[element[0]] = result.get(element[0],0) + 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output_dict = {}\n    for tup in test_list:\n        if tup[0] in output_dict.keys():\n            output_dict[tup[0]] += 1\n        else:\n            output_dict[tup[0]] = 1\n    return output_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dictionary = dict()\n    for tuple in test_list:\n        occurence_dictionary[tuple[0]] = occurence_dictionary.get(tuple[0], 0) + 1\n    return occurence_dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for each in test_list:\n        if each[0] not in occurences:\n            occurences[each[0]] = 0\n        occurences[each[0]] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    for tup in test_list:\n        if(tup[1] not in test_list):\n            test_list[tup[1]] = 0\n    for k in test_list:\n        test_list[k] += 1\n    return test_list\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    subs = len(str)\n    if subs < 3:\n        return 0\n    for i in range(2, len(str)//2):\n        if str[i]!= str[i-1] and str[i]!= str[i+1]:\n            subs -= 1\n    return subs\nstr = input()\ncount = number_of_substrings(str)\nprint(count"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(len(str)-1):\n        if(str[i:i+2]):\n            counter = counter + 1\n    return counter\n    \ndef reverse(str):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    l = len(str)\n    return str[::-1]\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # O(n) solution\n    count = 0\n    # O(n) time | O(1) space\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if str[i:j] == str[i:j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substr_count = 0\n    substr_string = str.split(\" \")\n    for i in range(len(substr_string)):\n        for j in range(len(substr_string[i])):\n            if len(substr_string[i][j]) > 1:\n                substr_count += 1\n    return substr_count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            continue\n        n += 1\n    return n\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(len(str) - i):\n            if str[j:j + i] == str[j:j + i + 1]:\n                count += 1\n    return count\n    \nprint(number_of_substrings('ababb'))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substr = set()\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i:j] not in substr:\n                substr.add(str[i:j])\n    return len(substr)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = [i for i in range(len(str)) if str[i] == str[i+1]]\n    return len(substrings)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)-1):\n        for j in range(i+1,len(str)):\n            if str[i:j]!=\"\":\n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    s = str\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 0 \n    for i in range(n):\n        if(m >= 2 * (2 ** i)):\n            result += 2 ** (i)\n        else:\n            result += 2 ** i\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m==n:\n        return 1\n    elif m==0:\n        return 0\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Set up the sequence of length n.\n    sequence = ['0' for x in range(n)]\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # TODO: Write your code here\n    return "
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #your code here\n    return 1\n    #raise NotImplementedError\ndef check_sequence(sequence, number_of_sequences): \n    '''\n    This function takes in the sequence and the number of sequences it should return true if it is a valid sequence and false otherwise.\n    '''\n    #raise NotImplementedError\n    return sequence[:number_of_sequences]==sequence[:number_of_sequences]*2\n    #raise NotImplementedError\ndef check_for_duplicate(sequence, number_of_sequences): \n    '''\n    This function takes in the sequence and the number of sequences it should return true if it is a valid sequence and false otherwise.\n    '''\n    #raise NotImplementedError\n    return sequence[number_of_sequences:]==sequence[:number_of_sequences]\n    #raise NotImplementedError\ndef check_for_duplicate_simple(sequence, number_of_sequences): \n    '''\n    This function takes in the sequence and the number of sequences it should return true if it is a valid sequence and false otherwise.\n    '''\n    #raise NotImplementedError\n    return sequence[number_of_sequences:number_of_sequences]==sequence[:number_of_sequences]*2\n    #raise NotImplementedError\ndef is_palindrome(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotImplementedError\n    return string==string[::-1]\n    #raise NotImplementedError\ndef is_palindrome_simple(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotImplementedError\n    return string==string[::-1]\n    #raise NotImplementedError\ndef palindromes_of_sequence(m,n): \n    '''\n    This function takes in positive integers m and n and returns a sequence of palindromes such that each element is a palindrome of length n and that each element is a palindrome of length m.\n    '''\n    #raise NotImplementedError\n    return [str(m) + \" \" + str(n) for m in range(m,0,-1)]\n    #raise NotImplementedError\ndef find_index(sequence,element): \n    '''\n    This function takes in a sequence and an element. It returns the index of the first occurrence of the element in the sequence.\n    '''\n    #raise NotImplementedError\n    return sequence.index(element)\n    #raise NotImplementedError\ndef create_sequence(m,n): \n    '''\n    This function takes in positive integers m and n and returns a sequence of positive integers such that each element is a palindrome of length m and that each element is a palindrome of length n.\n    '''\n    #raise NotImplementedError\n    return [m*2 + i for i in range(n)]\n    #raise NotImplementedError\ndef create_sequence_of_palindromes(m,n): \n    '''\n    This function takes in positive integers m and n and returns a sequence of palindromes such that each element is a palindrome of length m and that each element is a palindrome of length n.\n    '''\n    #raise NotImplementedError\n    return [str(m) + \" \" + str(n) for m in range(m,0,-1)]\n    #raise NotImplementedError\ndef get_occurrence_of_palindrome(string): \n    '''\n    This function takes in a string and returns the index of the first occurrence of the element in the sequence.\n    '''\n    #raise NotImplementedError\n    return string.index(\"t\")\n    #raise NotImplementedError\ndef get_occurrence_of_palindrome_simple(string): \n    '''\n    This function takes in a string and returns the index of the first occurrence of the element in the sequence.\n    '''\n    #raise NotImplementedError\n    return string.index(\"T\")\n    #raise NotImplementedError\ndef is_palindrome_simple_e(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotImplementedError\n    return string==string[::-1]\n    #raise NotImplementedError\ndef is_palindrome_simple_n(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotImplementedError\n    return string==string[::-1]\n    #raise NotImplementedError\ndef is_palindrome_simple_m(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotImplementedError\n    return string==string[::-1]\n    #raise NotImplementedError\ndef find_index_of_palindrome(sequence,element): \n    '''\n    This function takes in a sequence and an element. It returns the index of the first occurrence of the element in the sequence.\n    '''\n    #raise NotImplementedError\n    return sequence.index(element)\n    #raise NotImplementedError\ndef create_sequence_of_palindromes_of_palindrome(m,n): \n    '''\n    This function takes in positive integers m and n and returns a sequence of palindromes such that each element is a palindrome of length m and that each element is a palindrome of length n.\n    '''\n    #raise NotImplementedError\n    return [str(m) + \" \" + str(n) for m in range(m,0,-1)]\n    #raise NotImplementedError\ndef get_occurrence_of_palindrome_e(string): \n    '''\n    This function takes in a string and returns the index of the first occurrence of the element in the sequence.\n    '''\n    #raise NotImplementedError\n    return string.index(\"e\")\n    #raise NotImplementedError\ndef get_occurrence_of_palindrome_n(string): \n    '''\n    This function takes in a string and returns the index of the first occurrence of the element in the sequence.\n    '''\n    #raise NotImplementedError\n    return string.index(\"n\")\n    #raise NotImplementedError\ndef get_occurrence_of_palindrome_m(string): \n    '''\n    This function takes in a string and returns the index of the first occurrence of the element in the sequence.\n    '''\n    #raise NotImplementedError\n    return string.index(\"m\")\n    #raise NotImplementedError\ndef get_occurrence_of_palindrome_s(string): \n    '''\n    This function takes in a string and returns the index of the first occurrence of the element in the sequence.\n    '''\n    #raise NotImplementedError\n    return string.index(\"s\")\n    #raise NotImplementedError\ndef is_palindrome_simple_s(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotImplementedError\n    return string==string[::-1]\n    #raise NotImplementedError\ndef is_palindrome_simple_e(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotImplementedError\n    return string==string[::-1]\n    #raise NotImplementedError\ndef is_palindrome_simple_n(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotImplementedError\n    return string==string[::-1]\n    #raise NotImplementedError\ndef is_palindrome_simple_m(string): \n    '''\n    This function takes in a string and checks if it is a palindrome.\n    '''\n    #raise NotI"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if (m < 2 or n < 2): \n        return 0\n    \n    if (m == 2 and n == 3): \n        return 3\n    \n    if (m == 3 and n == 2): \n        return 2\n    \n    if (m == 3 and n == 2): \n        return 1\n    \n    if (m == 2 and n == 4): \n        return 1\n    \n    if (m == 4 and n == 3): \n        return 1\n    \n    if (m == 4 and n == 2): \n        return 1\n    \n    if (m == 4 and n == 3): \n        return 1\n    \n    if (m == 4 and n == 4): \n        return 1\n    \n    return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_number_of_sequences(m,n):\n        \n        if n<m:\n            return 0\n        if n==m:\n            return 1\n        total_number_of_sequences = 1\n        prev_sequence = 2\n        for i in range(2,n+1):\n            total_number_of_sequences *= i\n        for i in range(2,m+1):\n            total_number_of_sequences *= i\n        return total_number_of_sequences\n    \n    return get_total_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_length = 0\n    \n    while(True):\n        if m < 0 or n < 0:\n            return total_length\n        else:\n            total_length += 1\n            m -= 2\n            n -= 2\n    \n    return total_length\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_sequence_length(m,n):\n        '''\n        Write a function that takes in positive integers m and n and calculates the number of sequences of length n that are greater than or equal to m, then compares them with the second half, and so on until there are no sequences of length less than m.\n        '''\n        total = 0\n        numbers_greater_than_m = 0\n        numbers_less_than_m = 0\n        while numbers_greater_than_m <= n-2:\n            if m * (m-1) <= numbers_greater_than_m:\n                total += 2\n                numbers_greater_than_m += 1\n            elif m * (m-1) <= numbers_less_than_m:\n                total += 1\n                numbers_less_than_m += 1\n            else:\n                break\n        return total\n    \n    def get_number_of_sequences(m,n):\n        '''\n        Write a function that takes in positive integers m and n and calculates the number of possible sequences of length n that are greater than or equal to m, then compares them with the second half, and so on until there are no sequences of length less than m.\n        '''\n        total = 0\n        while total < n:\n            if m * (m-1) <= total:\n                total += 2\n            elif m * (m-1) <= total:\n                total += 1\n            else:\n                break\n        return total\n    \n    return get_total_sequence_length(m,n) * get_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #create a list of integers from 1 to m\n    x = [i for i in range(1, m+1)]\n    #create a list of integers from 1 to n\n    y = [i for i in range(1, n+1)]\n    #loop through the list x and y\n    for i in x:\n        for j in y:\n            #check if current sequence is greater than previous sequence\n            if i > j:\n                #increment the count\n                i+=1\n                #add sequence to list\n                y.append(i)\n    #return the length of the list\n    return len(y)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [list1[0]] + list1[1:] + list2[1:]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    print(list1[-1])\n    print(list2[-1])\n    return list1\n    \n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    for i in range(len(list2)):\n        new_list[i] = list2[i]\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.pop(-1)\n    return list1,list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # pass\n    \n    # TODO: Write your code here\n    # Complete the replacements below\n    return list1\n    \n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Make a new list containing all values from both lists.\n    nested_list = list()\n    # Iterate through both lists.\n    for i in range(len(list1)):\n        # Add each value of the first list into the new list.\n        nested_list.append(list1[i])\n    # Iterate through both lists.\n    for i in range(len(list2)):\n        # Add each value of the second list into the new list.\n        nested_list.append(list2[i])\n    # Return the new list of values.\n    return nested_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2)\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1,list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.reverse()\n    list2.reverse()\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    list1.reverse()\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3=[]\n    for item in list1:\n        list3.append(item)\n    for item in list2:\n        list3.append(item)\n    return list3\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for i in str1:\n        c += 1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]==str1[i].lower():\n            count=count+1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    ch_dict = {}\n    for c in str1:\n        if c in ch_dict:\n            ch_dict[c] += 1\n        else:\n            ch_dict[c] = 1\n    return sum(ch_dict.values())\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str(len(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for i in str1:\n        total_chars += len(i)\n    return total_chars\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for letter in str1:\n        if letter.isalpha():\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char = 0\n    for i in str1:\n        char += 1\n    return char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if type(str1) == str:\n        return len(str1)\n    else:\n        return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        N = N*2\n        while (N < math.sqrt(N)):\n            N = N + 2\n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N,0,-1):\n        if N % i == 0:\n            N = N/i \n            if i**2 > N:\n                return i\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 0): \n        return 1 \n    elif (N == 1): \n        return N \n    elif (N < 1): \n        return -1 \n    elif (N % 2 == 0): \n        if (N % 3 == 0): \n            return int(N ** 0.5) + 1 \n        else: \n            return int(N ** 0.5) \n    else: \n        return int(math.sqrt(N - 1)) + 1\n    "
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        middle_Square = N * math.sqrt(2)\n        middle_square = math.sqrt(middle_Square)\n        if middle_square == N:\n            return 1\n        elif middle_square > N:\n            return next_Perfect_Square(middle_square)\n        else:\n            return next_Perfect_Square(N - middle_square)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #Base Case\n    if (N == 1) or (N == 2):\n        return N\n    elif (N == 3):\n        return 4\n    elif (N == 4):\n        return 5\n    elif (N == 5):\n        return 6\n    elif (N == 6):\n        return 7\n    elif (N == 7):\n        return 8\n    elif (N == 8):\n        return 9\n    elif (N == 9):\n        return 10\n    elif (N == 10):\n        return 11\n    elif (N == 11):\n        return 12\n    elif (N == 12):\n        return 13\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N<=0):\n        return -1\n    elif (N==2):\n        return 2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    print(N)\n    if N==1:\n        return 1\n    elif N==2:\n        return 2\n    elif N==3:\n        return 4\n    elif N==4:\n        return 8\n    elif N==5:\n        return 16\n    elif N==6:\n        return 20\n    elif N==7:\n        return 32\n    elif N==8:\n        return 64\n    elif N==9:\n        return 128\n    elif N==10:\n        return 256\n    elif N==11:\n        return 512\n    elif N==12:\n        return 1024\n    elif N==13:\n        return 2048\n    elif N==14:\n        return 4096\n    elif N==15:\n        return 8192\n    elif N==16:\n        return 16384\n    elif N==17:\n        return 32768\n    elif N==18:\n        return 65536\n    elif N==19:\n        return 131072\n    elif N==20:\n        return 262144\n    elif N==21:\n        return 524288\n    elif N==22:\n        return 1048576\n    elif N==23:\n        return 2097152\n    elif N==24:\n        return 4194304\n    elif N==25:\n        return 8388608\n    elif N==26:\n        return 16777216\n    elif N==27:\n        return 33554432\n    elif N==28:\n        return 67108864\n    elif N==29:\n        return 134217728\n    elif N==30:\n        return 419430400\n    elif N==31:\n        return 8388608\n    elif N==32:\n        return 16777216\n    elif N==33:\n        return 33554432\n    elif N==34:\n        return 67108864\n    elif N==35:\n        return 134217728\n    elif N==36:\n        return 419430400\n    elif N==37:\n        return 8388608\n    elif N==38:\n        return 16777216\n    elif N==39:\n        return 33554432\n    elif N==40:\n        return 67108864\n    elif N==41:\n        return 134217728\n    elif N==42:\n        return 419430400\n    elif N==43:\n        return 8388608\n    elif N==44:\n        return 16777216\n    elif N==45:\n        return 33554432\n    elif N==46:\n        return 67108864\n    elif N==47:\n        return 134217728\n    elif N==48:\n        return 419430400\n    elif N==49:\n        return 8388608\n    elif N==50:\n        return 16777216\n    elif N==51:\n        return 33554432\n    elif N==52:\n        return 67108864\n    elif N==53:\n        return 134217728\n    elif N==54:\n        return 419430400\n    elif N==55:\n        return 8388608\n    elif N==56:\n        return 16777216\n    elif N==57:\n        return 33554432\n    elif N==58:\n        return 67108864\n    elif N==59:\n        return 134217728\n    elif N==60:\n        return 419430400\n    elif N==61:\n        return 8388608\n    elif N==62:\n        return 16777216\n    elif N==63:\n        return 33554432\n    elif N==64:\n        return 67108864\n    elif N==65:\n        return 134217728\n    elif N==66:\n        return 419430400\n    elif N==67:\n        return 8388608\n    elif N==68:\n        return 16777216\n    elif N==69:\n        return 33554432\n    elif N==70:\n        return 67108864\n    elif N==71:\n        return 134217728\n    elif N==72:\n        return 419430400\n    elif N==73:\n        return 8388608\n    elif N==74:\n        return 16777216\n    elif N==75:\n        return 33554432\n    elif N==76:\n        return 67108864\n    elif N==77:\n        return 134217728\n    elif N==78:\n        return 419430400\n    elif N==79:\n        return 8388608\n    elif N==80:\n        return 16777216\n    elif N==81:\n        return 33554432\n    elif N==82:\n        return 67108864\n    elif N==83:\n        return 134217728\n    elif N==84:\n        return 419430400\n    elif N==85:\n        return 8388608\n    elif N==86:\n        return 16777216\n    elif N==87:\n        return 33554432\n    elif N==88:\n        return 67108864\n    elif N==89:\n        return 134217728\n    elif N==90:\n        return 419430400\n    elif N==91:\n        return 8388608\n    elif N==92:\n        return 16777216\n    elif N==93:\n        return 33554432\n    elif N==94:\n        return 67108864\n    elif N==95:\n        return 134217728\n    elif N==96:\n        return 419430400\n    elif N==97:\n        return 8388608\n    elif N==98:\n        return 16777216\n    elif N==99:\n        return 33554432\n    elif N==100:\n        return 67108864\n    elif N==101:\n        return 134217728\n    elif N==102:\n        return 419430400\n    elif N==103:\n        return 8388608\n    elif N==104:\n        return 16777216\n    elif N==105:\n        return 33554432\n    elif N==106:\n        return 67108864\n    elif N==107:\n        return 134217728\n    elif N==108:\n        return 419430400\n    elif N==109:\n        return 8388608\n    elif N==110:\n        return 16777216\n    elif N==111:\n        return 33554432\n    elif N==112:\n        return 67108864\n    elif N==113:\n        return 134217728\n    elif N==114:\n        return 419430400\n    elif N==115:\n        return 8388608\n    elif N==116:\n        return 16777216\n    elif N==117:\n        return 33554432\n    elif N==118:\n        return 67108864\n    elif N==119:\n        return 134217728\n    elif N==120:\n        return 419430400\n    elif N==121:\n        return 8388608\n    elif N==122:\n        return 16777216\n    elif N==123:\n        return 33554432\n    elif N==124:\n        return 67108864\n    elif N==125:\n        return 134217728\n    elif N==126:\n        return 419430400\n    elif N==127:\n        return 8388608\n    elif N==128:\n        return 16777216\n    elif N==129:\n        return 33554432\n    elif N==130:\n        return 67108864\n    elif N==131:\n        return 134217728\n    elif N==132:\n        return 419430400\n    elif N==133:\n        return 8388608\n    elif N==134:\n        return 16777216\n    elif N==135:\n        return 33554432\n    elif N==136:\n        return 67108864\n    elif N==137:\n        return 134217728\n    elif N==138:\n        return 419430400\n    elif N==139:"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input.  N is a number.\n    # As input.  The function returns a perfect square greater than N.\n    # As input. "
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N<0):\n        return -1\n    if(N==0):\n        return 1\n    if(N%2==0):\n        return next_Perfect_Square(N//2)+1\n    else:\n        return next_Perfect_Square(N-1)+2\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize answer array\n    answer = [0, 0]\n    # Find the max sum of bitonic subsequence\n    for num in arr:\n        answer = [max(x, y) for x,y in zip(answer, bitonic_sequence(num, arr))]\n    return max(answer)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            arr[i], arr[i-1], arr[i+1] = arr[i-1], arr[i], arr[i+1]\n            max_sum = max(max_sum, arr[i])\n    arr[n-1], arr[0] = arr[0], arr[n-1]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    dp = [[0 for i in range(len(arr))] for i in range(len(arr))]\n    for j in range(1, len(arr)):\n        dp[j][j] = max(dp[j-1][j-1], arr[j])\n    max_sum = arr[0]\n    for i in range(2, len(arr)):\n        temp_max_sum = arr[i]\n        for j in range(i):\n            if temp_max_sum < dp[j][i-1] + arr[i]:\n                temp_max_sum = dp[j][i-1] + arr[i]\n        max_sum = temp_max_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    length = len(arr)\n    max_sum = 0\n    # to find the sum of all the numbers in the given array\n    for i in range(0,length-1):\n        for j in range(i+1,length):\n            sum = arr[i] + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        return max_sum(arr[1:]) + arr[0]\n    if arr[0] < arr[1]:\n        return max_sum(arr[:-1]) + arr[0]\n    # if we get here, the array is already bitonic, we can find the maximum sum with the 2 steps\n    return max_sum(arr[1:]) + max_sum(arr[:-1])\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # write your code here\n    if len(arr) == 0:\n        return 0\n    else:\n        return max(max_sum(arr[1:]), max_sum(arr[:-1]) + arr[0]"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    l=len(arr)\n    if(l==0):\n        return 0\n    if(l==1):\n        return arr[0]\n    if(l==2):\n        return max(arr[0],arr[1])\n    if(arr[0]>arr[1]):\n        return max_sum(arr[0:2])\n    else:\n        return max_sum(arr[0:2])+arr[1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum_vals = 0\n    max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = 0\n    max_subseq = 0\n    for i in range(len(arr)):\n        subseq = arr[i:] + arr[:i]\n        if len(subseq) > max_subseq:\n            max_subseq = len(subseq)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Forming an array \n    arr = np.array(arr)\n    # Sliding window with i and j to find maximum \n    max = 0\n    j = 0\n    for i in range(1, len(arr)): \n        # If the current bit is increasing \n        if arr[i] > arr[i-1]: \n            # If the maximum sum is less than the current sum \n            if max < arr[i]: \n                # Add the maximum and current sum \n                max = arr[i] + arr[i-1] \n            # Move j to i \n            j = i\n    # Returning the maximum sum \n    return max\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    square_root = number ** 0.5\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt = 0\n    while abs(number)>0.000001:\n        if number>0:\n            sqrt+=1\n            number=number/math.pow(10,sqrt)\n        else:\n            sqrt+=1\n            number=number*10**(sqrt)\n    return sqrt\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    from math import sqrt\n    sqrt_number = sqrt(number)\n    return sqrt_number\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number==0:\n        return 0\n    if number==1:\n        return 1\n    if number<0:\n        print(\"Negative numbers are not allowed\")\n        return\n    if number%2==0:\n        print(number//2, \"is not a babylonian squareroot\")\n        return\n    else:\n        delta = (number*number)//(4*number)\n        square_root = babylonian(delta)\n        print(square_root, \"is a babylonian squareroot\")\n        return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    \n    # The iteration counter is used to solve for the square root\n    iteration = 0\n    \n    # The square root of a number is computed using the Babylonian method\n    square_root = number ** (1/2)\n    \n    # The square root of the number is written to the variable result\n    result = math.sqrt(square_root)\n    \n    # The iteration counter is incremented by one so the square root\n    # is written to the variable iteration\n    iteration += 1\n    \n    # The iteration counter is printed to the terminal\n    print(\"The square root of\", number, \"is\", round(result, 3), \"and is\", iteration, \"iterations.\")\n    \n    # If the iteration counter is greater than the maximum, the function returns\n    # the value of the square root.\n    if iteration >= 10:\n        return result\n    \n    # Else, the function does not return the result\n    else:\n        return None\n    "
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 1\n    \n    # Smallest number\n    smallest_number = abs(number)\n    \n    # Starting at the largest number\n    start = smallest_number\n    end = number\n    \n    # Loop\n    while start <= end:\n        mid = (start + end) // 2\n        square_root = mid * mid\n        \n        if square_root == number:\n            # Return mid\n            return mid\n        \n        if square_root < number:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return None\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return number\n    elif number == 0:\n        return 0\n    elif number < 0:\n        return None\n    else:\n        return babylonian_squareroot(number - 1)**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 1\n    elif number < 0:\n        return None\n    elif number % 2 == 0:\n        return babylonian_squareroot(number // 2) + 1\n    else:\n        return babylonian_squareroot(number * 3 + 1) + 1\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    for i in range(2, int(number**0.5)+1):\n        if number%i==0:\n            return False\n    return True\n    \n    \ndef fibonacci_squareroot(number):\n    '''\n    Write a function for computing square roots using the fibonacci method.\n    '''\n    if number==0:\n        return False\n    if number==1:\n        return True\n    return fibonacci_squareroot(number-1)+fibonacci_squareroot(number-2)\n    \ndef fibonacci_squareroot2(number):\n    '''\n    Write a function for computing square roots using the fibonacci method.\n    '''\n    if number==0:\n        return False\n    if number==1:\n        return True\n    return fibonacci_squareroot2(number-1)+fibonacci_squareroot2(number-2)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 1\n    while abs(number) > 1:\n        root = (number/root)\n        number = root\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #The longest palindromic subsequence is the longest subsequence in which all the letters are same.\n    #So, let's say you have the string abd you have a subsequence s1,s2,s3,s4.\n    #And we have to find the length of s1,s2,s3,s4.\n    #If we use recursion to get the length of the longest palindromic subsequence, then we will get\n    #a length of 8 as a result, and we can simply return the length of the longest palindromic\n    #subsequence.\n    #if the string is very long, then we need to implement another recursion to find the length of\n    #the longest palindromic subsequence.\n    #We can use a recursive solution.\n    #We can also use a stack as a queue.\n    #The queue is a queue of characters. It consists of a queue of characters where characters are\n    #added to it before they are popped from the top of the queue.\n    #So, the code below.\n    #Create an empty stack.\n    #create an empty list of characters.\n    #If the list of characters contains a palindromic subsequence, then it returns the length of the\n    #longest palindromic subsequence.\n    #As we want, we need to make sure that the string is not empty.\n    #So, we have to make sure the string is not empty.\n    #If the string is empty, then return 0.\n    def lps(str):\n        if len(str) == 1:\n            return 0\n        elif str == str[::-1]:\n            return len(str)\n        else:\n            return 1 + lps(str[1:])\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0: \n        return 0\n    \n    if str[0] == str[-1]: \n        return 1 + lps(str[1:-1])\n    \n    return max(lps(str[1:]), lps(str[:-1]))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    \n    max_len = 1\n    idx = 1\n    while idx < len(str):\n        if str[idx] == str[idx-1]:\n            if idx > 0 and str[idx-2] == str[idx-1]:\n                idx -= 2\n            else:\n                idx += 1\n                max_len += 1\n        else:\n            if str[idx-1]!= str[idx-2]:\n                idx += 1\n            else:\n                idx += 1\n                max_len += 1\n                \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    if len(str) == 1:\n        return 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str: return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Pseudo code:\n    # 1. Find the start index of each string\n    # 2. For each string from the index start to the end,\n    #    if the string is a palindrome,\n    #       find the length of the longest palindromic subsequence\n    # 3. Return the length\n    # \n    # Time complexity:\n    # O(n)\n    # Space Complexity:\n    # O(n)\n    \n    # Initialize a result with 0\n    # Return the length of the longest palindromic subsequence\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    string_list = []\n    for char in str:\n        if char == char[::-1]:\n            string_list.append(char)\n    str_length = len(string_list)\n    if str_length > 2:\n        return len(max(string_list, key = len))\n    else:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def expand(s): \n        dp = [[False] * len(s) for _ in range(len(s))]\n        for i in range(len(s) - 1, -1, -1):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = True\n                    continue\n                if j - i + 1 == len(s):\n                    break\n                if s[i] == s[j] and dp[i + 1][j - 1] == True:\n                    dp[i][j] = True\n                    continue\n                dp[i][j] = False\n        return dp\n    def reverse(s):\n        result = []\n        for i in range(len(s)):\n            result.append(s[i][::-1])\n        return result\n    def isPalindrome(s):\n        for i in range(len(s)):\n            if s[i]!= s[-i-1]:\n                return False\n        return True\n    def palindrome(s):\n        '''\n        Write a function to check if a string is a palindrome.\n        '''\n        if len(s) == 1:\n            return True\n        for i in range(len(s)//2):\n            if s[i]!= s[-i-1]:\n                return False\n        return True\n    def lps_dp(s):\n        '''\n        Use DP to compute the length of the longest palindromic subsequence.\n        '''\n        dp = [[0] * len(s) for _ in range(len(s))]\n        for i in range(1, len(s)):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i-1][j] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp\n    def lps(s):\n        '''\n        Use LPS to find the longest palindromic subsequence.\n        '''\n        if len(s) == 1:\n            return 1\n        left = 0\n        right = 0\n        for i in range(len(s)):\n            if s[i] == s[-i-1]:\n                left = i + 1\n            else:\n                right = i + 1\n        if left == right:\n            return 1\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str = str.lower()\n    LPS = ''\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if i < j:\n                break\n            else:\n                if str[i] == str[j] and str[i] in LPS:\n                    break\n                else:\n                    LPS = LPS + str[i]\n    return len(LPS)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lenStr = len(str)\n    if lenStr<=2:\n        return lenStr\n    if str[0]==str[lenStr-1]:\n        return 1+lps(str[1:lenStr-1])\n    else:\n        return 1+lps(str[1:lenStr-1]+str[0]+str[lenStr-2:lenStr-1])"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (1 + n/2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    if n == 1:\n        return n\n    else:\n        return n+harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return n+harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n<=1:\n        return n\n    else:\n        return n/harmonic_sum(n-1)\ndef sum_squares(n):\n    '''\n    Write a function that takes in a positive integer n and returns the sum of the squares of its digits.\n    '''\n    if n<=1:\n        return n\n    else:\n        return n**2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        print('n cannot be negative')\n        return 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harm_sum = 0\n    for i in range(n, 0, -1):\n        harm_sum += i\n    return harmon_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(n):\n        harmonic_sum *= (i+1)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h = 1\n    while n > 1:\n        h += 1\n        n -= 1\n    return h\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i/((1 + i)/2)\n    return s\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1 + 2*n + 2**n\n    return harmonic_sum\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    answer = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                answer.append(num1)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_arr=[]\n    # For two arrays of length 1\n    # Write your code here\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1+num2 in array_nums1+array_nums2:\n                new_arr.append(num1+num2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    l = len(array_nums1)\n    r = len(array_nums2)\n    for i in range(l):\n        for j in range(r):\n            if array_nums1[i] + array_nums2[j] == 0:\n                return array_nums1[i] + array_nums2[j]\n    return None\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a = set(array_nums1)\n    b = set(array_nums2)\n    c = a & b\n    return(list(c))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i,j=0,0\n    #loop through array 1\n    while i<len(array_nums1):\n        #loop through array 2\n        while j<len(array_nums2):\n            #loop through array 2 \n            if array_nums2[j] in array_nums1:\n                #if array 2 contains this value\n                if array_nums2[j]==array_nums1[i]:\n                    #loop through array 2 \n                    j+=1\n            else:\n                #if array 2 does not contain this value\n                j+=1\n        #if i and j is not equal\n        i+=1\n        j+=1\n    #return the intersection\n    return array_nums1[i:j]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    output = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                output.append(num1)\n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    return\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0 \n    for i in tup: \n        if(i == x): \n            x_count += 1\n    return x_count \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for el in tup:\n        if el == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    s=0\n    for i in range(0,len(tup)):\n        if tup[i]==x:\n            s=s+1\n    return s\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for i in tup:\n        if i == x:\n            counter += 1\n    return counter \n    \n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for i in tup:\n        if i == y:\n            counter += 1\n    return counter\n    \ndef get_y_pos(x, y): \n    '''\n    Get the position of a given element.\n    '''\n    return y * cell_size - cell_size / 2 + cell_size / 2\n    \ndef get_x_pos(y, x): \n    '''\n    Get the position of a given element.\n    '''\n    return x * cell_size - cell_size / 2 + cell_size / 2\n    \ndef draw_alien(x, y, color): \n    '''\n    Draw an alien of the given color.\n    '''\n    pygame.draw.rect(screen, color, (x, y, cell_size, cell_size))\n    \ndef draw_enemies(enemy_group): \n    '''\n    Draw the enemies.\n    '''\n    for enemy in enemy_group: \n        enemy.draw() \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a = 0\n    for i in tup:\n        if x == i:\n            a+=1\n    return a\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurences = 0\n    for i in tup:\n        if i == x:\n            occurences += 1\n    return occurences\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    inserted_element = element\n    list.insert(0,inserted_element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    # For this problem, the function will iterate through the list and append the element to the position that it is located in. The append is done using the append function.\n    # You can then iterate through the new list from that position and assign the element to the new position using the.append function.\n    # You should return the new list after the function has been run.\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_copy = list[:] # make a copy of the list for insertion order\n    list_copy.insert(0,element) # insert the element to the start of the list\n    return list_copy\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    try:\n        if type(list)!= list:\n            raise TypeError(\"Argument list must be a list.\")\n        if type(element)!= int:\n            raise TypeError(\"Argument element must be an integer.\")\n        \n        new_list = []\n        for i in list:\n            new_list.append(i)\n        new_list.append(element)\n        return new_list\n    except TypeError as e:\n        return \"Error: {}\".format(e)\n    except IndexError as e:\n        return \"Error: Index out of range.\"\n    \n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    new_list.append(element)\n    for i in range(len(list)):\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not isinstance(list,list):\n        raise TypeError(\"The argument must be a list\")\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return_list = []\n    for i in list:\n        if element == i:\n            return_list.append(element)\n        elif i > element:\n            return_list.append(element)\n    return return_list\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = [int(i) for i in numbers.split()]\n    if (len(a) == 1):\n        x = a[0]\n        y = 0\n    elif (len(a) == 2):\n        x = a[0]\n        y = a[1]\n    elif (len(a) == 3):\n        x = a[0]\n        y = a[1]\n        z = a[2]\n    elif (len(a) == 4):\n        x = a[0]\n        y = a[1]\n        z = a[2]\n        w = a[3]\n    else:\n        return\n    pi = cmath.pi\n    radian = (w * pi) / 180\n    polar_x = (x * cmath.cos(radian)) - (y * cmath.sin(radian))\n    polar_y = (x * cmath.sin(radian)) + (y * cmath.cos(radian))\n    return [polar_x, polar_y]\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.polar(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #CALCULATE THE RADIUS\n    r = numbers[0]\n    #CALCULATE THE X AND Y DIRECTIONS\n    y = numbers[1]\n    x = cmath.polar(r)\n    return x,y\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        c = complex(numbers[0], numbers[1])\n        return c\n    except:\n        print(\"There is no such complex number, please enter a valid complex number.\")\n        exit()\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"\\nEnter the number of terms in your sequence\")\n    print(\"Enter a negative number to designate a base.\")\n    print(\"Enter a positive number to designate a base.\")\n    print(\"Enter a number to designate the angle.\")\n    print(\"\")\n    a = int(input(\"Enter the first term: \"))\n    print(\"\")\n    b = int(input(\"Enter the second term: \"))\n    print(\"\")\n    c = int(input(\"Enter the third term: \"))\n    print(\"\")\n    if (a < 0):\n        b = -b\n        a = -a\n    if (b < 0):\n        c = -c\n        b = -b\n    if (c < 0):\n        a = -a\n        c = -c\n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n    print(\"\")\n    print(\"Polar coordinates for the numbers:\")\n    print(\"\")\n    print(\"   a  =\", a)\n    print(\"   b  =\", b)\n    print(\"   c  =\", c)\n    print(\"\")\n    print(\"\")\n    numbers2 = numbers * a\n    numbers3 = numbers2 * b\n    numbers4 = numbers3 * c\n    print(\"\")\n    print(\"(\", n, \"i) =\", a, \"i^(\", b, \"i) +\", c, \"i^(\", b, \"i)\")\n    print(\"(\", n2, \"i) =\", numbers2, \"i^(\", b, \"i) +\", numbers3, \"i^(\", b, \"i)\")\n    print(\"(\", n3, \"i) =\", numbers3, \"i^(\", b, \"i) +\", numbers4, \"i^(\", b, \"i)\")\n    print(\"(\", n4, \"i) =\", numbers4, \"i^(\", b, \"i) +\", numbers2, \"i^(\", b, \"i)\")\n    print(\"\")\n    print(\"\")\n    print(\"Applying the formula to get the polar coordinates:\")\n    print(\"\")\n    print(\"   (a1 * pi) + (b1 * pi) + (c1) = \", a, \"i^(\", b, \"i) +\", c, \"i^(\", b, \"i)\")\n    print(\"   (a2 * pi) + (b2 * pi) + (c2) = \", a2, \"i^(\", b, \"i) +\", c2, \"i^(\", b, \"i)\")\n    print(\"   (a3 * pi) + (b3 * pi) + (c3) = \", a3, \"i^(\", b, \"i) +\", c3, \"i^(\", b, \"i)\")\n    print(\"   (a4 * pi) + (b4 * pi) + (c4) = \", a4, \"i^(\", b, \"i) +\", c4, \"i^(\", b, \"i)\")\n    print(\"\")\n    print(\"\")\n    print(\"Conversion is as follows:\")\n    print(\"\")\n    print(\"   c = (b ^ 2 + a) * (a^2 - (b ^ 2) + a)\")\n    print(\"   d = b * c ^ 2\")\n    print(\"\")\n    print(\"   i = (a^2 + (b ^ 2) + c) / (a^2 + (b ^ 2) + c)\")\n    print(\"   j = (a^2 + b * c) / (a^2 + (b ^ 2) + c)\")\n    print(\"   k = (((a^2 + b * c) - (a^2 - b * c)) ^ 2) / (a^2 + (b ^ 2) + c)\")\n    print(\"   l = a ^ 2 + b * c\")\n    print(\"\")\n    print(\"   angle = (2 * a) * c\")\n    print(\"   print (angle)\")\n    print(\"\")\n    print(\"The angle is the angle between the terms in the sequence above.\")\n    print(\"\")\n    print(\"\\n\")\ndef read_data(f):\n    '''\n    Read data from a file.\n    '''\n    c = 0\n    f.readline()\n    for line in f:\n        if c == 0:\n            v = float(line)\n        else:\n            yield v\n            c += 1\n    return\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers[0].real == 0.0 and numbers[0].imag == 0.0:\n        return \" \"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    c = numbers.real\n    i = numbers.imag\n    \n    if c > 0:\n        \n        polar_x = abs(cmath.polar(cmath.exp(-1j*i))[0])\n        polar_y = abs(cmath.polar(cmath.exp(-1j*i))[1])\n        \n        return (polar_x, polar_y)\n    else:\n        \n        polar_x = abs(cmath.polar(cmath.exp(1j*i))[0])\n        polar_y = abs(cmath.polar(cmath.exp(1j*i))[1])\n        \n        return (polar_x, polar_y)\n    "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    '''\n    The result of the conversion is the angle of the complex numbers,\n    '''\n    \n    #make sure the numbers are real and complex\n    if type(numbers)!= complex:\n        print('Error: Numbers must be a complex number')\n        return\n    \n    #make sure the angles are between -pi and pi\n    if numbers.real > 0 and numbers.real < 0:\n        numbers.real = -numbers.real\n    if numbers.imag > 0 and numbers.imag < 0:\n        numbers.imag = -numbers.imag\n    \n    #convert to polar coordinates and return\n    return cmath.polar(numbers.real, numbers.imag)\n    \n    \n    \n    \n    "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # define function to convert a complex number into polar coordinates\n    def polar2(z):\n        # convert z to polar coordinates\n        r = cmath.rect(z.real,z.imag)\n        theta = cmath.phase(z.real - z.imag)\n        # return r,theta\n        return r,theta\n    # list of complex numbers\n    l = [numbers]\n    # convert the complex numbers\n    result = list(map(polar2,l))\n    # return the polar coordinates\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(type(numbers))\n    print(numbers)\n    list1 = []\n    c1 = cmath.rect(0,0)\n    for i in range(len(numbers)):\n        list1.append((numbers[i]*c1.real + numbers[i]*c1.imag)/100000000)\n    print(list1)\n    #f = open(\"test.txt\", \"w\")\n    #f.write(str(list1))\n    #f.close()\n    return list1\n    #return''.join(str(i) for i in list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # Initialize count\n    count = 0\n    # Iterate over list\n    for item in list1:\n        # Check if is integer\n        if type(item) == int:\n            # Update count\n            count += 1\n    # Return the count\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # your code here\n    i = 0\n    for i in list1:\n        i += 1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_elem = len(list1)\n    return num_elem\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    #pass\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for el in list1:\n        if type(el) == int:\n            result += 1\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total_elements = 0\n    for num in list1:\n        if num.isnumeric():\n            total_elements += 1\n    return total_elements\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # your code goes here\n    combs = []\n    for i in range(l):\n        for j in range(i+1,l):\n            combs.append((i,j))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(map(tuple, combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    out = []\n    for i in range(l):\n        out += combinations(l, i)\n    return out\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    r = []\n    for i in range(l):\n        for j in combinations_with_replacement(l, i):\n            r.append(tuple(j))\n    return r\ndef find_all_combinations(lst):\n    '''\n    This function takes in a list and returns a list of all possible combination of elements of the list.\n    '''\n    \n    all_combinations = []\n    for i in range(len(lst)):\n        combination = combinations(lst, i)\n        for j in combination:\n            all_combinations.append(j)\n    return all_combinations\ndef combination_permutations(lst):\n    '''\n    This function takes in a list and returns a list of all possible permutation of elements of the list.\n    '''\n    permutations = []\n    for i in range(len(lst)):\n        combination = combinations(lst, i)\n        for j in combination:\n            permutations.append(tuple(j))\n    return permutations\ndef group(lst, r):\n    '''\n    Write a function that takes in a list and the range r, and returns a list of all possible groups of elements in the list.\n    '''\n    \n    return [tuple(i) for i in combinations(lst, r)]\ndef alist(lst):\n    '''\n    This function takes in a list and returns a list of all possible values of the list.\n    '''\n    \n    return [i for i in combinations_with_replacement(lst, len(lst))]\ndef final_permutation(lst):\n    '''\n    This function takes in a list and returns a list of all possible final permutation of elements of the list.\n    '''\n    \n    final_perm = []\n    for i in range(len(lst)-1):\n        final_perm.append(lst[i]+lst[i+1])\n    return final_perm\ndef count(lst):\n    '''\n    This function takes in a list and returns a list of the number of permutations of elements of the list.\n    '''\n    \n    return len([i for i in combinations_with_replacement(lst, len(lst))])\ndef permutation(lst):\n    '''\n    This function takes in a list and returns a list of all possible permutations of elements of the list.\n    '''\n    permutations = []\n    for i in range(len(lst)-1):\n        combination = combinations(lst, i)\n        for j in combination:\n            permutations.append(tuple(j))\n    return permutations\ndef comparison(lst,t):\n    '''\n    This function takes in a list and returns a list of all possible permutations of elements of the list.\n    '''\n    \n    permutations = []\n    for i in range(len(lst)):\n        permutations.append(tuple(lst[i]))\n    permutations.append(tuple(lst[-1]))\n    return permutations\ndef lowest_uniqueness(lst):\n    '''\n    This function takes in a list of elements and returns a list of the smallest elements of the list.\n    '''\n    \n    lowest_unique = []\n    for i in range(len(lst)):\n        lowest_unique.append(min(lst))\n    return lowest_unique\ndef combination_with_replacement(lst, r):\n    '''\n    This function takes in a list of elements and returns a list of all possible combination of elements of the list and the range r.\n    '''\n    \n    combination = combinations_with_replacement(lst, r)\n    return [tuple(i) for i in combination]\ndef sorted_array(lst):\n    '''\n    This function takes in a list and returns a list sorted in ascending order.\n    '''\n    \n    sorted_lst = sorted(lst)\n    return sorted_lst\ndef dfs(root, path, color):\n    '''\n    This function takes in a list of elements and returns the list of all possible combinations of elements of the list and the starting point.\n    '''\n    \n    path = path + [root]\n    if root == []:\n        return path\n    for i in range(len(root)):\n        if color == 'green':\n            new_path = dfs(root[:i]+root[i+1:], path, 'black')\n            if new_path!= None:\n                return new_path\n        else:\n            new_path = dfs(root[:i]+root[i+1:], path,'red')\n            if new_path!= None:\n                return new_path\n    return path\ndef is_valid(lst):\n    '''\n    This function takes in a list of elements and returns a boolean value indicating whether or not the list is valid.\n    '''\n    return len(lst) >= 1\ndef check_valid(lst):\n    '''\n    This function takes in a list and returns a boolean value indicating whether or not the list is valid.\n    '''\n    return is_valid(lst)\ndef is_valid_col(lst):\n    '''\n    This function takes in a list of elements and returns a boolean value indicating whether or not the list is valid.\n    '''\n    return is_valid_col(lst) and len(lst) >= 1\ndef solution(lst):\n    '''\n    This function takes in a list of elements and returns a list of all possible permutations of elements of the list.\n    '''\n    if is_valid(lst):\n        print('is valid')\n        final_lst = []\n        for i in range(len(lst)-1):\n            final_lst.append(lst[i]+lst[i+1])\n        print(final_lst)\n        final_perm = []\n        for i in range(len(final_lst)):\n            permutations = combination_permutations(final_lst)\n            final_perm.append(permutations)\n        print(final_perm)\n        return final_perm\n    else:\n        print('is not valid')\n        return None\ndef solution_2(lst):\n    '''\n    This function takes in a list of elements and returns a list of all possible permutations of elements of the list.\n    '''\n    if is_valid(lst):\n        print('is valid')\n        final_lst = []\n        for i in range(len(lst)-1):\n            final_lst.append(lst[i]+lst[i+1])\n        print(final_lst)\n        permutations = combination_permutations(final_lst)\n        final_perm = []\n        for i in range(len(permutations)):\n            permutations = combination_permutations(permutations[:i]+permutations[i+1:])\n            final_perm.append(permutations)\n        print(permutations)\n        return final_perm\n    else:\n        print('is not valid')\n        return None\ndef solution_3(lst):\n    '''\n    This function takes in a list of elements and returns a list of all possible permutations of elements of the list.\n    '''\n    if is_valid(lst):\n        print('is valid')\n        final_lst = []\n        for i in range(len(lst)-1):\n            final_lst.append(lst[i]+lst[i+1])\n        permutations = combination_permutations(final_lst)\n        final_perm = []\n        for i in range(len(permutations)):\n            permutations = combination_permutations(permutations[:i]+permutations[i+1:])\n            final_perm.append(permutations)\n        print(permutations)\n        return final_perm\n    else:\n        print('is not valid')\n        return None\ndef solution_4(lst):\n    '''\n    This function takes in a list of elements and returns a list of all possible permutations of elements of the list.\n    '''\n    if is_valid(lst):\n        print('is valid')\n        final_lst = []\n        for i in range(len(lst)-1):\n            final_lst.append("
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Create a list of tuples with combinations\n    combos = []\n    \n    # Iterate through each element in the list\n    for i in range(1, len(l) + 1):\n        combs = combinations_with_replacement(l, i)\n        for j in range(len(combs)):\n            combos.append(tuple(combs[j]))\n    \n    # Create a list from the tuple lists\n    combos = list(combos)\n    \n    # Create a list of tuples of the same length and the elements of the same length\n    combos_with_reps = []\n    \n    # Iterate through each combination and append to a tuple\n    for combination in combos:\n        combos_with_reps.append((tuple(combination), l.count(tuple(combination))))\n    \n    return combos_with_reps\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    import itertools\n    comb = itertools.combinations_with_replacement(l, n)\n    return list(comb)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [l]\n    else:\n        combinations = []\n        for i in range(len(l)):\n            for j in combinations_with_replacement(l, n-1):\n                combinations.append(j)\n        return combinations\n    \ndef repeat(s):\n    '''\n    Write a function that returns True if the string s is a permutation of the set {1,2,3}.\n    '''\n    if len(s) == 1:\n        return s == '1'\n    elif len(s) == 2:\n        if s[0] == s[1]:\n            return False\n        else:\n            return s[0] + s[1] + s[0] == s[1] + s[0]\n    else:\n        if s[0] == s[1]:\n            return True\n        else:\n            return repeat(s[1]) or repeat(s[0])\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 0\n        for i in range(2, n):\n            if n % i == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = []\n    i = 2\n    while (i < n):\n        if (n % i == 0):\n            prime_nums.append(i)\n        i += 1\n    return len(prime_nums)\n    \n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Write your code here\n    lst = [2, 3, 5, 7, 11]\n    count = 0\n    for i in lst:\n        if i <= n:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for num in range(1, n):\n        for prime in range(2, num):\n            if num % prime == 0:\n                break\n        else:\n            return num\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #write your code here\n    l = []\n    for i in range(1,n+1):\n        if isPrime(i) == True:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # An array that keeps track of the numbers below the given number\n    nums = [i for i in range(1,n+1)]\n    primes = []\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    sieve = [True] * (n+1)\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            sieve[i*i::i] = [False] * ((n-i*i)//i)+[False]*((n-i*i-1)//i)\n    return sum(sieve)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2,i):\n            if i%j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    return second,first\n    \na = int(input(\"Enter the 1st number: \"))\nb = int(input(\"Enter the 2nd number: \"))\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp_a = a\n    temp_b = b\n    if a > b:\n        a,b = b,a\n    if a < b:\n        a,b = b,a\n    return(a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a[1:len(a)-1]\n    a = int(a)\n    b = b[1:len(b)-1]\n    b = int(b)\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n    \na = input('Input first number: ')\nb = input('Input second number: ')\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    print(\"swapping numbers\")\n    tup=tuple()\n    tup.append(b)\n    tup.append(a)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (len(test_tup1) == 2) and (len(test_tup2) == 2):\n        return max(test_tup1, test_tup2)\n    elif (len(test_tup1) == 2) and (len(test_tup2) < 2):\n        return max(test_tup1, test_tup2)\n    elif (len(test_tup1) < 2) and (len(test_tup2) < 2):\n        return max(test_tup1, test_tup2)\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup_max = max(test_tup1, test_tup2)\n    return tup_max\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    elif test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    elif test_tup1[1] < test_tup2[1]:\n        return test_tup2\n    elif test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup1\n        \n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element = 0\n    for element in test_tup1:\n        if element > max_element:\n            max_element = element\n    for element in test_tup2:\n        if element > max_element:\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    \n    if len(test_tup1) < len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n    \n    # Your code here\n    \n    "
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    (max1, max2) = max(test_tup1, test_tup2)\n    return max1, max2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    s1, s2 = test_tup1, test_tup2\n    s1_max = s1[0]\n    s2_max = s2[0]\n    for i in range(1, len(s1)):\n        if s1[i] > s2_max:\n            s2_max = s1[i]\n            s1_max = s1[0]\n    print(s1_max, s2_max)\n    return s1_max, s2_max\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return (test_tup1, test_tup2)\n    else:\n        return (test_tup2, test_tup1)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] > test_tup2[0]:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # write your code here\n    if test_tup1[0] > test_tup2[0] and test_tup1[0] > test_tup2[1]:\n        return test_tup1\n    elif test_tup2[0] > test_tup1[0] and test_tup2[0] > test_tup1[1]:\n        return test_tup2\n    else:\n        return test_tup1\n    "
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # While loop to solve the problem.\n    while n%2==0: \n        n=n/2\n    # Check for a newman prime number.\n    if (n!=1):\n        for i in range(3,n,2): \n            if n%i==0:\n                return False\n    else:\n        return False\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #find the nth prime\n    prime = [True for x in range(n+1)] \n    prime[0] = False\n    prime[1] = False\n    for i in range(2,n+1):\n        if prime[i]:\n            for j in range(i, n+1, i):\n                prime[j] = False\n    return(prime[n])\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #prime divisors\n    divisors = [2, 3, 5, 7]\n    numbers = []\n    i = 0\n    while i < n:\n        if (n % divisors[i]) == 0:\n            numbers.append(divisors[i])\n        i = i + 1\n    return(numbers[-1])\n    \ndef nth_prime(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    #prime divisors\n    divisors = [2, 3, 5, 7]\n    numbers = []\n    i = 0\n    while i < n:\n        if (n % divisors[i]) == 0:\n            numbers.append(divisors[i])\n        i = i + 1\n    return(numbers[-1])\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Write your code here.\n    # first find prime number\n    if (is_prime(n)): \n        return n\n    \n    # if not prime\n    # then, find the first newman with multiplicity 1 \n    # if this newman is not a factor, then, \n    # all other factors can be found\n    # find the first newman with multiplicty n\n    # if this newman is not a factor, then,\n    # all other factors can be found\n    # now find the multiplicity of each prime number\n    # multiply the newman number by the multipliccation \n    # and so on\n    # if the multipliccation is odd, then, then, \n    # then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman\n    # with multipliccation is the same as the product of any other newman \n    # with multipliccation\n    if (n%2 == 0):\n        return n\n    \n    # divide n into two\n    # if the multipliccation is odd, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is even, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    if (n%2 == 1): \n        return n//2\n    \n    # divide n into two\n    # if the multipliccation is even, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is odd, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    if (n%2 == 0 and n % 2 == 1): \n        return n//2\n    \n    # divide n into two\n    # if the multipliccation is odd, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is even, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    if (n%2 == 0 and n % 2 == 1): \n        return n//2\n    \n    # divide n into two\n    # if the multipliccation is even, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is odd, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    if (n%2 == 0 and n % 2 == 1): \n        return n//2\n    \n    # divide n into two\n    # if the multipliccation is odd, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is even, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is odd, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    if (n%2 == 1 and n % 2 == 0): \n        return n//2\n    \n    # divide n into two\n    # if the multipliccation is even, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is odd, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is even, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    # else, it can't be newman with multipliccation \n    # because multiplication of any newman with multipliccation \n    # is the same as the product of any other newman \n    # with multipliccation\n    # if the multipliccation is odd, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then, \n    # then, then it can't be newman with multipliccation \n    "
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # find the primes with n \n    primes = []\n    for i in range(2, n+1):\n        if prime(i):\n            primes.append(i)\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    x = 2\n    while True:\n        if (n % x == 0):\n            return x\n        else:\n            x += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i+i, n, i):\n                sieve[j] = False\n    return [i for i in range(n) if sieve[i]]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            prime_list.append(i)\n    return prime_list[n//2]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # n is the base case of a series\n    # x is the current nth power of a series\n    # find the next nth power of a series\n    for x in range(n, 1, -1):\n        if x == 1:\n            # base case\n            # if x is the power of a series,\n            # then next nth power is the nth power of the\n            # series's base\n            # and the following is True\n            # if x is 0, then the nth power of the\n            # series is the series's base\n            return x\n        # x is the next nth power of a series\n        # if x is less than or equal to the power of a\n        # series, then next nth power is the nth power\n        # of the series\n        if x >= 1 and x <= n:\n            # compute the next nth power of the series\n            nth_power = x * x\n            # if nth power is less than or equal to the\n            # power of the series, then the nth power of\n            # the series is the nth power of the series\n            # and the following is True\n            # if nth power is greater than or equal to\n            # the power of the series\n            if nth_power <= n:\n                return x * x * n\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_div = [0] * len(test_tup1)\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            test_div[i] += test_tup1[i] / test_tup2[j]\n    return test_div\n    \ndef main():\n    '''\n    Main function of the application.\n    '''\n    tup1 = (1, 2, 3)\n    tup2 = (4, 5, 6)\n    tup_div = division_elements(tup1, tup2)\n    print(tup_div)\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Assign variables to each of the two tuples to do the division operation\n    first = test_tup1[0]\n    second = test_tup2[0]\n    \n    # Check whether the two tuples are of equal length\n    if len(first)!= len(second):\n        return 'Tuples must be of equal length'\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] + test_tup2[i])/2)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def div_elements(tup1, tup2):\n        '''\n        Given two tuples, perform matrix multiplication operation element-wise.\n        '''\n        a = tup1[0]\n        b = tup1[1]\n        c = tup2[0]\n        d = tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    '''\n    Iterate over the tuples to create a list of tuples\n    '''\n    '''\n    Use itertools.product(tup1, tup2)\n    '''\n    '''\n    for element in itertools.product(test_tup1, test_tup2):\n        print(element)\n    '''\n    '''\n    for element in itertools.product(test_tup1, test_tup2):\n        print(element[0])\n        print(element[1])\n    '''\n    '''\n    for i, element in enumerate(itertools.product(test_tup1, test_tup2)):\n        print(i, element)\n    '''\n    '''\n    for i, element in enumerate(itertools.product(test_tup1, test_tup2)):\n        print(element[0])\n        print(element[1])\n        print(element[2])\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = division_elements(test_tup1, test_tup2)\n    print(result)\n    '''\n    ''"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division_elementwise(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        total = 0\n        for i in range(len(test_tup1)):\n            total += test_tup1[i]/test_tup2[i]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple sizes not the same\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                test_tup1[i] = test_tup2[i]\n                test_tup2[i] = test_tup1[i]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # base case\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"tuples must be the same size.\")\n    \n    # check whether all elements of the two tuples are positive integers\n    if all([int(i) >= 0 for i in test_tup1]):\n        if any(i < 0 for i in test_tup1):\n            raise ValueError(\"negative numbers are not allowed.\")\n    if any([int(i) < 0 for i in test_tup2]):\n        raise ValueError(\"negative numbers are not allowed.\")\n    \n    # perform the operation\n    res = 0\n    for i in range(len(test_tup1)):\n        res += test_tup1[i] / test_tup2[i]\n    return res\n    \n    # error message\n    # if any([int(i) < 0 for i in test_tup1]):\n    #     raise ValueError(\"negative numbers are not allowed.\")\n    # if any([int(i) < 0 for i in test_tup2]):\n    #     raise ValueError(\"negative numbers are not allowed.\")\n    \n    # return the result\n    # return res\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tuple_1 = test_tup1\n    tuple_2 = test_tup2\n    def operate(val1, val2):\n        return val1//val2\n    return tuple(map(operate, tuple_1, tuple_2))\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if i % L == 0:\n            res.append(list1[i])\n    return res\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list(split_two_parts(list1[:L], L)) + list(split_two_parts(list1[L:], L))\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_list = []\n    for i in list1:\n        if len(i) <= L:\n            split_list.append(i)\n        else:\n            split_list.append(i[:L])\n            split_list.append(i[L:])\n    return (split_list)\n    \ndef merge(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and returns a list where the first L elements have been appended to the list.\n    '''\n    split_list = split_two_parts(list1, L)\n    for i in split_list:\n        list1.append(i)\n    return list1\n    \ndef check_if_list_is_a_tuple(tuple1):\n    '''\n    Write a function that takes in a tuple and returns True if the tuple is a tuple of tuples, or False if it is a tuple of lists.\n    '''\n    if len(tuple1) % 2 == 1:\n        return True\n    else:\n        return False\n    \ndef check_if_list_is_a_list(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is a list, or False if it is a tuple.\n    '''\n    if len(list1) % 2 == 1:\n        return True\n    else:\n        return False\n    \ndef list_is_empty(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is empty, or False if it is not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n    \ndef check_is_valid_input(tuple1):\n    '''\n    Write a function that takes in a tuple and returns True if the tuple is a tuple and False otherwise.\n    '''\n    if len(tuple1) == 2 and isinstance(tuple1[0], list) and isinstance(tuple1[1], list):\n        return True\n    else:\n        return False\n    \ndef is_valid_input(tuple1):\n    '''\n    Write a function that takes in a tuple and returns True if the tuple is a tuple of tuples and False otherwise.\n    '''\n    if len(tuple1) == 2 and check_is_valid_input(tuple1):\n        return True\n    else:\n        return False\n        \ndef first_index(list1):\n    '''\n    Write a function that takes in a list and returns the index of the first element in the list.\n    '''\n    index = 0\n    if len(list1) > 0:\n        for i in range(len(list1)):\n            if isinstance(list1[i], list):\n                index = index + 1\n            else:\n                pass\n    return index\n    \ndef last_index(list1):\n    '''\n    Write a function that takes in a list and returns the index of the last element in the list.\n    '''\n    index = 0\n    if len(list1) > 0:\n        for i in range(len(list1)):\n            if isinstance(list1[i], list):\n                index = index + 1\n            else:\n                pass\n    return index\n    \ndef find_index_of_element(list1, element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list.\n    '''\n    if element in list1:\n        return list1.index(element)\n    else:\n        return -1\n    \ndef map_list_to_dictionary(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary where each element of the list is a tuple.\n    '''\n    dict1 = dict()\n    for i in list1:\n        if isinstance(i, tuple) or isinstance(i, list):\n            t = []\n            for j in i:\n                t.append(j)\n            dict1[t[0]] = t[1]\n        else:\n            dict1[i] = 'Invalid Input'\n    return dict1\n    \ndef check_map_list_is_a_tuple(tuple1):\n    '''\n    Write a function that takes in a tuple and returns True if the tuple is a tuple of tuples, or False if it is a tuple of lists.\n    '''\n    if len(tuple1) % 2 == 1:\n        return True\n    else:\n        return False\n    \ndef check_map_list_is_a_list(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is a list, or False if it is a tuple.\n    '''\n    if len(list1) % 2 == 1:\n        return True\n    else:\n        return False\n    \ndef is_valid_map_input(tuple1):\n    '''\n    Write a function that takes in a tuple and returns True if the tuple is a tuple and False otherwise.\n    '''\n    if len(tuple1) == 2 and isinstance(tuple1[0], list) and isinstance(tuple1[1], list):\n        return True\n    else:\n        return False\n        \ndef map_dictionary_to_list(dict1):\n    '''\n    Write a function that takes in a dictionary and returns a list where each element of the dictionary is a tuple.\n    '''\n    list1 = []\n    for i in dict1:\n        if isinstance(dict1[i], tuple):\n            for j in dict1[i]:\n                list1.append(j)\n        else:\n            list1.append(dict1[i])\n    return list1\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a list where the first element is removed from the list, and the other elements are added to it.\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        list1_len = len(list1)\n        list1.pop(0)\n        list1.append(list1_len)\n        return list1\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a list with the same elements reversed.\n    '''\n    list1.reverse()\n    return list1\n    \ndef is_valid_input(tuple1):\n    '''\n    Write a function that takes in a tuple and returns True if the tuple is a tuple and False otherwise.\n    '''\n    if len(tuple1) == 2 and check_is_valid_input(tuple1):\n        return True\n    else:\n        return False\n    \ndef is_valid_input(tuple1):\n    '''\n    Write a function that takes in a tuple and returns True if the tuple is a tuple and False otherwise.\n    '''\n    if len(tuple1) == 2 and check_is_valid_input(tuple1):\n        return True\n    else:\n        return False\n    \ndef is_valid_input(tuple1):\n    '''\n    Write a function that takes in a tuple and returns True if the tuple is a tuple and False otherwise.\n    '''\n    if len(tuple1) == 2 and check_is_valid_input(tuple1):\n        return True\n    else:\n        return False\n        \ndef count_list_elements(list1):\n    '''\n    Write a function that takes in a list and returns the count of elements in the list.\n    '''\n    list_len = len(list1)\n    if list_len == 0:\n        return 0\n    else:\n        return list_len\n    \ndef get_element_from_index(list1, index):\n    '''\n    Write a function that takes in a list and an integer index and returns the element at the index in the list.\n    '''\n    if isinstance(list1, list):\n        for i in range(len(list1)):\n            if index == i:\n                return list1[i]\n    else:\n        return 'Invalid Input'\n    \ndef get_element_from_index(list1, index):\n    '''\n    Write a function that takes in a list an"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_list = []\n    for item in list1:\n        if len(split_list) < L:\n            split_list.append(item)\n        elif len(split_list) == L:\n            split_list.append(item)\n    return split_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_list = []\n    l = 0\n    while l <= len(list1):\n        split_list.append(list1[l:l+L])\n        l += L\n    return split_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1\n    if len(list1) % L == 0:\n        result = []\n        i = 0\n        length = len(list1)//L\n        while i < L:\n            result.append(list1[i*length:(i+1)*length])\n            i+=1\n        return result\n    else:\n        print(\"Error\")\n    return None\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part_1_list = []\n    part_2_list = []\n    \n    for element in list1:\n        part_1_list.append(element)\n        \n    return (part_1_list[:L], part_1_list[L:])\n    \ndef is_palindrome(s):\n    '''\n    Write a function that checks if a string has all lowercase letters and all uppercase letters.\n    '''\n    \n    lower_set = set(s.lower())\n    upper_set = set(s.upper())\n    return len(lower_set.intersection(upper_set)) == 0\n    \ndef get_words_from_string(sentence):\n    '''\n    Given a string, it will return a list of words.\n    '''\n    \n    return [word for word in sentence.split() if word.isalpha()]\n    \ndef index_word(words, word):\n    '''\n    Given a list of words and a word, it will return the index of the given word.\n    '''\n    for i, word_i in enumerate(words):\n        if word_i == word:\n            return i\n    return -1\n    \ndef count_words(words, word):\n    '''\n    Given a list of words and a word, it will return a count of how many times that word appears.\n    '''\n    \n    return len(words.count(word))\n    \ndef find_longest_word(words, word):\n    '''\n    Given a list of words and a word, it will return the word that has the longest length.\n    '''\n    \n    max_len = 0\n    for word_i in words:\n        if len(word_i) > max_len:\n            max_len = len(word_i)\n    \n    return max_len\n    \ndef check_empty(s):\n    '''\n    Given a string, it will check if it is empty or not.\n    '''\n    \n    if s == '':\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome(words):\n    '''\n    Test function for is_palindrome.\n    '''\n    \n    for word in words:\n        if is_palindrome(word):\n            print(f'{word} is a palindrome.')\n        else:\n            print(f'{word} is not a palindrome.')\n    \ndef test_get_words_from_string(sentence):\n    '''\n    Test function for get_words_from_string.\n    '''\n    \n    for word in get_words_from_string(sentence):\n        if is_palindrome(word):\n            print(f'{word} is a palindrome.')\n        else:\n            print(f'{word} is not a palindrome.')\n    \ndef test_count_words(words, word):\n    '''\n    Test function for count_words.\n    '''\n    \n    print(f'{words.count(word)}')\n    \ndef test_find_longest_word(words, word):\n    '''\n    Test function for find_longest_word.\n    '''\n    \n    print(f'{find_longest_word(words, word)}')\n    \ndef test_index_word(words, word):\n    '''\n    Test function for index_word.\n    '''\n    \n    print(f'{index_word(words, word)}')\n    \ndef test_check_empty(s):\n    '''\n    Test function for check_empty.\n    '''\n    \n    print(f'{check_empty(s)}')\n    \ndef run_tests():\n    test_is_palindrome(['a', 'b', 'c', 'd', 'e'])\n    test_get_words_from_string('A man, a plan, a canal: Panama')\n    test_count_words(['a', 'b', 'c', 'd', 'e'], 'a')\n    test_find_longest_word(['a', 'b', 'c', 'd', 'e'], 'c')\n    test_index_word(['a', 'b', 'c', 'd', 'e'], 'c')\n    test_check_empty('a')\n    print('Tests passed!')\n    \nrun_tests()"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return (list1, [])\n    return (split_two_parts(list1[0:L], L - 1), split_two_parts(list1[L:], L))\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    res = []\n    prev = -1\n    for i in range(len(list1)):\n        if prev!= -1 and (list1[i] - prev) < L:\n            res.append(list1[prev:i])\n            prev = i\n        else:\n            res.append(list1[prev:i])\n            prev = i\n    return res\n    "
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    for i in range(0, len(list1)):\n        list1[i] = list1[i][0:L]\n    return (list1)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return \"ERROR: age is invalid\"\n    else:\n        return h_age * 365"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 3:\n        return \"Y\"\n    elif h_age <= 6 and h_age >= 3:\n        return \"M\"\n    elif h_age >= 7 and h_age <= 12:\n        return \"F\"\n    else:\n        return \"NA\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n    if h_age >= 0 and h_age <= 2:\n        dog_age = h_age\n    elif h_age >= 3 and h_age <= 6:\n        dog_age = h_age + 2\n    elif h_age >= 7 and h_age <= 12:\n        dog_age = h_age + 3\n    elif h_age >= 13 and h_age <= 17:\n        dog_age = h_age + 4\n    elif h_age >= 18 and h_age <= 23:\n        dog_age = h_age + 5\n    else:\n        dog_age = h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 5:\n        return (\"Youth\")\n    elif h_age < 10:\n        return (\"May\")\n    elif h_age < 20:\n        return (\"Adult\")\n    elif h_age < 65:\n        return (\"Senior\")\n    else:\n        return (\"Error\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age > 1:\n        dog_years = h_age * 365\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    return h_age*1.0*365.25"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 1:\n        print(h_age, 'is less than 1 year old.')\n    elif h_age >= 1 and h_age <= 2:\n        print(h_age, 'is one year old.')\n    elif h_age >= 3 and h_age <= 5:\n        print(h_age, 'is two years old.')\n    elif h_age >= 6 and h_age <= 8:\n        print(h_age, 'is three and over.')\n    elif h_age >= 9 and h_age <= 11:\n        print(h_age, 'is four and over.')\n    else:\n        print(h_age, 'is five and over.')\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age = h_age + 1\n    return h_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n    if h_age >= 70:\n        dog_age = h_age - 60\n    elif 70 <= h_age <= 79:\n        dog_age = 60 - (h_age - 70)\n    else:\n        dog_age = -1\n    return dog_age\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 1:\n        return [[S]]\n    else:\n        if step < 3:\n            return [list_split(S, step-1), list_split(S, step-2)]\n        else:\n            return [list_split(S, step-3), list_split(S, step-4)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Add your code here\n    return [[S[i:i+step]] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return []\n    elif len(S) == 1:\n        return [S]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: return a list of lists\n    return [S[i:i + step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Here is the idea:\n    # Create a list of n lists\n    # For each of the n lists, create a list of the length of the nth element\n    # Then append the rest of the list to the end of the list.\n    # Return the resulting list\n    #\n    # Make sure that you do not forget to add the last element of the last list to the end of the list\n    #\n    # If the last element of the last list is an integer (e.g. 5), then you need to increment the length of the last element to 1\n    #\n    # Then, make sure that you don't forget to append the last element of the last list to the end of the list\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # return [[S[i:i+step]] for i in range(0, len(S), step)]\n    return [[S[i:i+step]] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not S:\n        return []\n    \n    # If the step is non-positive, that means that the last element has been appended to the list.\n    if step < 0:\n        step = -step\n        S = S + [None]\n        return list_split(S, -step)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for x in range(0, len(S), step):\n        L.append(S[x:x+step])\n    return L\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from OpenGL.GL import *\n    import math\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    # Variables\n    width = l\n    height = l\n    depth = l\n    \n    # Addition of the values\n    area = 0\n    \n    # Conditional if-elif statement\n    if width > 0:\n        area = (height * depth) + ((height + 2 * width) * depth * (height + 1)) + (width * depth)\n    if height > 0:\n        area = (width * depth) + ((width + 2 * height) * depth * (width + 1)) + (height * depth)\n    if depth > 0:\n        area = (width * depth) + ((width + 2 * height) * depth * (width + 1)) + (depth * depth)\n    \n    # Return result\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Import the required libraries\n    import numpy as np\n    from matplotlib import pyplot as plt\n    import numpy.linalg as la\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (3*l*(3**0.5))*(4/3)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    L = l[0]\n    lateralSurfaceArea = []\n    for i in range(len(l)):\n        lateralSurfaceArea.append(L * i**3)\n        L *= 10\n    return lateralSurfaceArea\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if len(l)==2:\n        return l[0]*l[1]\n    else:\n        return l[0]*l[1]*l[2]\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def calculate_lateral_area(l):\n        return l*l*l\n    return calculate_lateral_area(l)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**3)/6\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += (i**2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    odds = 0\n    for i in range(1, n+1):\n        if (i % 2 == 0):\n            sum = sum + i\n            odds = odds + i\n        else:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n):\n        s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # Your code goes here\n    sum = 0\n    for i in range(1,n):\n        if (i%2!= 0):\n            sum+=i**2\n    return sum\n    \nn = int(input('Enter a number to find the sum of the squares of the first n odd natural numbers: '))\nprint(square_Sum(n)"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(0,n+1,2):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(i**2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while (i < n):\n        sum += i ** 2\n        i += 1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = 0\n    odd_nums = n % 2\n    for i in range(1,n):\n        if(i % 2 == 0):\n            squares += i**2\n        else:\n            squares += i**2\n    print(squares)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += i * i\n    return ans\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n, 2):\n        total += i**2\n    return total\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x = 2\n    y = 3\n    for i in range(3, n+1):\n        x = x * 2\n        y = y * 3\n    return x + y\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 0\n    while i < n: \n        if (i+2)%3 == 0:\n            return i+2\n        else: \n            i += 1\n    return None\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n<=1:\n        return 1\n    \n    i=2\n    while i<=n:\n        if n%i==0:\n            return n//i\n        i+=1\n    return 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = int(n ** (1 / 2)) + 1\n    while star % 2 == 0: \n        star = star // 2\n    return star\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    temp = n\n    while temp!= 1:\n        temp = int(math.sqrt(temp))\n        if temp > 1:\n            return n // temp\n    return n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n*find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_list = [] \n    for i in range(1, n + 1): \n        if (i % 2 == 0): \n            num_list.append(i) \n    return num_list[n]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    \n    if n % 3 == 0:\n        return find_star_num(n-1) + 2*find_star_num(n-2)\n    else:\n        return find_star_num(n-1) + 3*find_star_num(n-2)\n        \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        return find_star_num(n-1)+find_star_num(n-2)\n    \nprint(find_star_num(5))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return k.encode(\"ascii\")\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(ord(k)+32)\n    except:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Checking if it's a valid character\n    if k >= ord(\"A\") and k <= ord(\"Z\"):\n        # Return the ascii value\n        return chr(k)\n    else:\n        # Return the character\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    print('Using ascii_value')\n    if k not in ASCII_VALUES:\n        raise KeyError(f'{k} not found')\n    return ASCII_VALUES[k]\n    \ndef print_ascii_values(num_chars=20, header=False):\n    '''\n    Print the ASCII values of the characters from the ASCII dictionary.\n    '''\n    print(f'{num_chars} total characters')\n    for k in ASCII_VALUES:\n        v = ascii_value(k)\n        print(f'{v} : {ASCII_VALUES[k]}')\n    if not header:\n        print('Enter a keyword:')\n        print('\\t' + ','.join(ASCII_VALUES))\n    \ndef print_ascii_values_from_file():\n    '''\n    Read the ASCII values from a file and print them.\n    '''\n    print('Using print_ascii_values_from_file()')\n    try:\n        with open('ascii_values.txt', 'r') as file:\n            print_ascii_values(num_chars=file.readline().strip())\n    except FileNotFoundError:\n        print('The file \\'ascii_values.txt\\' does not exist.')\n    \ndef print_char_values(num_chars=20):\n    '''\n    Print the ASCII values of the characters from the ASCII dictionary.\n    '''\n    print(f'{num_chars} total characters')\n    for k in ASCII_VALUES:\n        v = ascii_value(k)\n        print(f'{v} : {ASCII_VALUES[k]}')\n    \ndef print_char_values_from_file():\n    '''\n    Read the ASCII values from a file and print them.\n    '''\n    print('Using print_char_values_from_file()')\n    try:\n        with open('ascii_values.txt', 'r') as file:\n            print_char_values(num_chars=file.readline().strip())\n    except FileNotFoundError:\n        print('The file \\'ascii_values.txt\\' does not exist.')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        # parse ascii value as a string\n        value = str(hex(ord(k)))[2:]\n        # convert into a hex value\n        value = value.replace(\"0x\", \"\").replace(\"0X\", \"\")\n        # convert back to integer\n        value = int(value, 16)\n    except:\n        # try this one and don't convert the value to an int, then back to hex\n        try:\n            value = int(k)\n        except:\n            value = ord(k)\n    return value\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    #return int(k)\n    return (ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef main():\n    '''\n    Program that reads a text file, and prints the character at index 0\n    and so on.\n    '''\n    try:\n        with open(\"demo.txt\", \"r\") as f:\n            for line in f:\n                print(f\"{line.strip()}\", end=\"\")\n        print()\n    except FileNotFoundError as err:\n        print(f\"File does not exist: {err}\")\n    except IOError as err:\n        print(f\"I/O error: {err}\")\n    finally:\n        print()\n        \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for i in range(len(k)):\n        x = ord(k[i])\n        k[i] = chr(x + 65)\n    return k\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n    \n    return sum(even)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    sum = 0\n    while even_index < len(arr):\n        if (even_index % 2) == 0:\n            sum += arr[even_index]\n        even_index += 1\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_even = sum_even + arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = []\n    odds = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            evens.append(arr[i])\n        else:\n            odds.append(arr[i])\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even += arr[i]\n    return even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr)):\n        if(i % 2 == 0):\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code here\n    \n    return(sum(map(lambda x: x**3, range(1, n+1)))"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    summation = 0\n    for i in range(n): \n        summation = summation + (n-i) * i**4\n    return summation\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def generator(n): \n        i = 0 \n        while i < n: \n            yield i * i \n            i += 1 \n    even_power_sum = 0\n    for i in generator(n): \n        if i % 2 == 0: \n            even_power_sum += i \n    return even_power_sum \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        if i%2 == 0:\n            result += i\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+int(pow(i,5))\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    n = n - 1\n    for i in range(1,n):\n        if i%2==0:\n            even_power_sum = even_power_sum + i\n    return even_power_sum\ndef even_Power_Sum2(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum2 = 0\n    n = n - 1\n    for i in range(1,n+1):\n        if i%2==0:\n            even_power_sum2 = even_power_sum2 + i\n    return even_power_sum2\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**(5)\n    print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x = sum([i**5 for i in range(1,n+1) if i%2==0]) \n    return x\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(n+1):\n        if i%3 == 0 and i!= 0:\n            sum += (i**5)\n        elif i % 2 == 0:\n            sum += i\n    return su"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = test_list.copy()\n    test_list = test_list[:3] + test_list[5:]\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    lst = []\n    for item in test_list:\n        lst.append(item[0])\n    return lst\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[0][0]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted_list = []\n    for item in test_list:\n        rear_extracted_list.append(item[1])\n    return rear_extracted_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_rear = []\n    for tupl in test_list:\n        list_rear.append(tupl[2])\n    return list_rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[2])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    print(\"\\n\\n### Rear extraction\")\n    \n    rear = []\n    rear_list = []\n    for i in test_list:\n        rear.append(i[1])\n    \n    rear.sort()\n    \n    for i in rear:\n        rear_list.append(i)\n    \n    return(rear_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract_list = []\n    for i in test_list:\n        rear_extract_list.append(i[0])\n    return rear_extract_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    \n    # Test Cases\n    # Test case 1\n    if len(test_tup1) < 3:\n        return \"Please input a more than 3 element tuple\"\n        \n    elif len(test_tup2) > 2:\n        return \"Please input a less than 2 element tuple\"\n        \n    else:\n        # i = 0\n        # j = 0\n        # while i < len(test_tup1):\n        #     if j < len(test_tup2):\n        #         if test_tup1[i] == test_tup2[j]:\n        #             test_tup1.pop(i)\n        #             test_tup1.pop(j)\n        #             j -= 1\n        #             i -= 1\n        #         else:\n        #             test_tup1.insert(i,test_tup2[j])\n        #             test_tup2.pop(j)\n        #             j -= 1\n        #             i -= 1\n        #     else:\n        #         j -= 1\n        #         i -= 1\n        # return test_tup1, test_tup2\n    \n    return test_tup1, test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    #return test_tup1, test_tup2\n    a = []\n    for i in range(len(test_tup1)):\n        if i not in test_tup2:\n            a.append(test_tup1[i])\n    return a"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # find the index of the first element in the first tuple\n    index_first = test_tup1[0].index(test_tup2[0])\n    # find the index of the second element in the first tuple\n    index_second = test_tup1[1].index(test_tup2[1])\n    # find the index of the first element in the second tuple\n    index_first_second = test_tup2[0].index(test_tup2[0])\n    # find the index of the second element in the second tuple\n    index_second_first = test_tup2[1].index(test_tup2[1])\n    # find the index of the first element in the second tuple\n    index_first_second_second = test_tup2[0].index(test_tup2[0])\n    # find the index of the first element in the second tuple\n    index_second_first_second = test_tup2[1].index(test_tup2[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x-y for x,y in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert test_tup1 == test_tup2, \"tuples must be the same length\"\n    assert len(test_tup1) == len(test_tup2), \"tuples must be the same length\"\n    assert type(test_tup1) == tuple, \"tuples must be tuples\"\n    assert type(test_tup2) == tuple, \"tuples must be tuples\"\n    \n    # create a new tuple to be substracted.\n    subtracted_tup = test_tup1 + test_tup2\n    # check that the tuple is the same length.\n    assert len(subtracted_tup) == len(test_tup1) + len(test_tup2), \"tuples must be the same length\"\n    \n    # convert it to a list.\n    subtracted_tup = list(subtracted_tup)\n    # create an empty list to hold the new subtracted tuples.\n    subtracted_list = []\n    # iterate through each element of the list.\n    for i in range(len(test_tup1)):\n        # set the new index to the element of the list.\n        subtracted_tup[i] = test_tup1[i]\n        # add it to the list of subtracted tuples.\n        subtracted_list.append(subtracted_tup)\n        # delete the element of the list to save memory.\n        test_tup1.pop(i)\n    # return the list of subtracted tuples.\n    return subtracted_list\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # For this problem, you need to write a function that takes in a positive integer n and returns the sum of even index binomial coefficients. \n    # The function should be able to work with any positive integer.\n    #\n    # Hints:\n    #\n    # For an even binomial coefficient, the sum of its digits should be even. For a non-even binomial coefficient, the sum of its digits should be odd.\n    #\n    #\n    # For example,\n    #\n    # even_binomial_Coeff_Sum(2)\n    # should return 2\n    # even_binomial_Coeff_Sum(3)\n    # should return 5\n    # even_binomial_Coeff_Sum(4)\n    # should return 10\n    # even_binomial_Coeff_Sum(5)\n    # should return 15\n    # even_binomial_Coeff_Sum(6)\n    # should return 20\n    # even_binomial_Coeff_Sum(7)\n    # should return 30\n    # even_binomial_Coeff_Sum(8)\n    # should return 42\n    # even_binomial_Coeff_Sum(9)\n    # should return 60\n    # even_binomial_Coeff_Sum(10)\n    # should return 70\n    # even_binomial_Coeff_Sum(11)\n    # should return 80\n    # even_binomial_Coeff_Sum(12)\n    # should return 90\n    # even_binomial_Coeff_Sum(13)\n    # should return 100\n    # even_binomial_Coeff_Sum(14)\n    # should return 110\n    # even_binomial_Coeff_Sum(15)\n    # should return 120\n    # even_binomial_Coeff_Sum(16)\n    # should return 130\n    # even_binomial_Coeff_Sum(17)\n    # should return 140\n    # even_binomial_Coeff_Sum(18)\n    # should return 150\n    # even_binomial_Coeff_Sum(19)\n    # should return 170\n    # even_binomial_Coeff_Sum(20)\n    # should return 200\n    # even_binomial_Coeff_Sum(21)\n    # should return 210\n    # even_binomial_Coeff_Sum(22)\n    # should return 220\n    # even_binomial_Coeff_Sum(23)\n    # should return 230\n    # even_binomial_Coeff_Sum(24)\n    # should return 240\n    # even_binomial_Coeff_Sum(25)\n    # should return 250\n    # even_binomial_Coeff_Sum(26)\n    # should return 270\n    # even_binomial_Coeff_Sum(27)\n    # should return 280\n    # even_binomial_Coeff_Sum(28)\n    # should return 290\n    # even_binomial_Coeff_Sum(29)\n    # should return 300\n    # even_binomial_Coeff_Sum(30)\n    # should return 310\n    # even_binomial_Coeff_Sum(31)\n    # should return 320\n    # even_binomial_Coeff_Sum(32)\n    # should return 330\n    # even_binomial_Coeff_Sum(33)\n    # should return 340\n    # even_binomial_Coeff_Sum(34)\n    # should return 350\n    # even_binomial_Coeff_Sum(35)\n    # should return 360\n    # even_binomial_Coeff_Sum(36)\n    # should return 370\n    # even_binomial_Coeff_Sum(37)\n    # should return 380\n    # even_binomial_Coeff_Sum(38)\n    # should return 390\n    # even_binomial_Coeff_Sum(39)\n    # should return 400\n    # even_binomial_Coeff_Sum(40)\n    # should return 410\n    # even_binomial_Coeff_Sum(41)\n    # should return 420\n    # even_binomial_Coeff_Sum(42)\n    # should return 450\n    # even_binomial_Coeff_Sum(43)\n    # should return 470\n    # even_binomial_Coeff_Sum(44)\n    # should return 490\n    # even_binomial_Coeff_Sum(45)\n    # should return 500\n    # even_binomial_Coeff_Sum(46)\n    # should return 530\n    # even_binomial_Coeff_Sum(47)\n    # should return 540\n    # even_binomial_Coeff_Sum(48)\n    # should return 550\n    # even_binomial_Coeff_Sum(49)\n    # should return 560\n    # even_binomial_Coeff_Sum(50)\n    # should return 580\n    # even_binomial_Coeff_Sum(51)\n    # should return 590\n    # even_binomial_Coeff_Sum(52)\n    # should return 600\n    # even_binomial_Coeff_Sum(53)\n    # should return 610\n    # even_binomial_Coeff_Sum(54)\n    # should return 620\n    # even_binomial_Coeff_Sum(55)\n    # should return 630\n    # even_binomial_Coeff_Sum(56)\n    # should return 660\n    # even_binomial_Coeff_Sum(57)\n    # should return 690\n    # even_binomial_Coeff_Sum(58)\n    # should return 700\n    # even_binomial_Coeff_Sum(59)\n    # should return 710\n    # even_binomial_Coeff_Sum(60)\n    # should return 720\n    # even_binomial_Coeff_Sum(61)\n    # should return 730\n    # even_binomial_Coeff_Sum(62)\n    # should return 740\n    # even_binomial_Coeff_Sum(63)\n    # should return 750\n    # even_binomial_Coeff_Sum(64)\n    # should return 760\n    # even_binomial_Coeff_Sum(65)\n    # should return 770\n    # even_binomial_Coeff_Sum(66)\n    # should return 780\n    # even_binomial_Coeff_Sum(67)\n    # should return 790\n    # even_binomial_Coeff_Sum(68)\n    # should return 800\n    # even_binomial_Coeff_Sum(69)\n    # should return 810\n    # even_binomial_Coeff_Sum(70)\n    # should return 820\n    # even_binomial_Coeff_Sum(71)\n    # should return 830\n    # even_binomial_Coeff_Sum(72)\n    # should return 840\n    # even_binomial_Coeff_Sum(73)\n    # should return 850\n    # even_binomial_Coeff_Sum(74)\n    # should return 860\n    # even_binomial_Coeff_Sum(75)\n    # should return 870\n    # even_binomial_Coeff_Sum(76)\n    # should return 880\n    # even_binomial_Coeff_Sum(77)\n    # should return 890\n    # even_binomial_Coeff_Sum(78)\n    # should return 900\n    # even_binomial_Coeff_Sum(79)\n    # should return 910\n    # even_binomial_Coeff_Sum(80)\n    # should return 920\n    # even_binomial_Coeff_Sum(81)\n    # should return 930\n    # even_binomial_Coeff_Sum(82)\n    # should return 940\n    # even_binomial_Coeff_Sum(83)\n    # should return 950\n    # even_binomial_Coeff_Sum(84)\n    # should return 960\n    # even_binomial_Coeff_Sum(85)\n    # should return 980\n    # even_binomial_Coeff_Sum(86)\n    # shoul"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return math.ceil(math.log(n,2))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # print('n:', n)\n    b = 0\n    for i in range(n,0,-1):\n        b += math.factorial(i)//math.factorial(i-1)\n    return b\ndef even_binomial_Coeff_Sum2( n): \n    '''\n    This function returns the sum of even index binomial coefficients. \n    '''\n    return even_binomial_Coeff_Sum(n)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    i = 0\n    while i < n:\n        if (n & i) == 0:\n            print (i)\n        i = i + 1\n    \n    return i\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += math.factorial(i) / math.factorial(i-2)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n == 0): \n        return 0\n    if (n == 1): \n        return 1\n    if (n % 2) == 0: \n        return even_binomial_Coeff_Sum(n//2)\n    else: \n        return 2 * even_binomial_Coeff_Sum(n//2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        raise Exception('Coeff sum must be positive')\n    total = 0\n    while n > 0:\n        total += math.pow(n, 2)\n        n -= 1\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your code here\n    sum = 0\n    n_list = []\n    for i in range(n):\n        sum += math.pow(2,i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n==0):\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n//2) + even_binomial_Coeff_Sum(n-(n//2))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14159265358979*((2*r**2)+(h**2)))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4.0*3.14*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return(4*pi*r*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = r * h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3*h**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = r*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3 * np.pi * r**3 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # First: Find the volume of the cylinder\n    v = 3.14 * r * r * h\n    print('The volume of the cylinder is', v)\n    return v\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for value in dict:\n        if dict[value] >= n:\n            filtered_dict[value] = dict[value]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if k>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict= {}\n    for key,value in dict.items():\n        if value >=n:\n            new_dict[key] = value\n    return new_dict\n    "
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            filtered_dict[k] = v\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list_of_dict = []\n    for key in dict:\n        if dict[key] >= n:\n            list_of_dict.append(key)\n    \n    return list_of_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    sorted_dictionary = dict.copy()\n    for k in sorted(sorted_dictionary.keys()):\n        if k > n:\n            del sorted_dictionary[k]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    # TODO\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    n_dict = {}\n    for i in dict.keys():\n        if dict[i] > n:\n            n_dict[i] = dict[i]\n    return n_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #If the list is empty return 0\n    if len(test_tup) == 0:\n        return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    dict_tup = {}\n    for i in range(0, len(test_tup)):\n        if test_tup[i] not in dict_tup.keys():\n            dict_tup[test_tup[i]] = 1\n        else:\n            dict_tup[test_tup[i]] += 1\n    sorted_dict = sorted(dict_tup.items(), key=operator.itemgetter(1), reverse=True)\n    return(sorted_dict[0][0])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    from collections import Counter\n    counter = Counter(test_tup)\n    return counter[test_tup[0]]\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res = 0\n    for i in range(0, len(test_tup)):\n        if i == 0:\n            res += 1\n        elif test_tup[i][1] > test_tup[i - 1][1]:\n            res += 1\n        elif test_tup[i][1] == test_tup[i - 1][1]:\n            if test_tup[i][0] < test_tup[i - 1][0]:\n                res += 1\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    first_tuple_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_tuple_element:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = test_tup[0]\n    count_list = []\n    for i in range(len(test_tup)):\n        count_list.append(first_element == test_tup[i])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first = test_tup[0]\n    return len(list(filter(lambda x : x == first, test_tup)))\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # your code here\n    #raise NotImplementedError\n    return n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    p = 1\n    i = 0\n    while i < n: \n        if i % 2 == 0:\n            p = p * n\n        i += 1\n    return p"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    assert n >= 0, 'Negative number. Must be positive.'\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return n\n    \n    return n - 1 - is_num_decagonal(n - 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Write your code here.\n    #@param n (int): \n    #@return (int)\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return n\n    elif n == 3:\n        return 2**(n-2)\n    elif n == 4:\n        return 3**(n-4)\n    else:\n        return n**(n-2) + n**(n-4)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return is_num_decagonal(n-1) and is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_digit(n): \n        '''\n        This function checks whether the input is a valid integer or not. \n        '''\n        try: \n            n = int(n) \n        except ValueError: \n            return False \n        else: \n            return True \n        return True \n    def dec_num_helper(n): \n        '''\n        This function is to be used to check the first\n        part of the decagon numbers. \n        '''\n        if n == 0: \n            return 0\n        else: \n            return dec_num_helper(n - 1) + (n - 1) * n * (n - 1) // 6\n    if is_digit(n): \n        return dec_num_helper(n)\n    else: \n        return False \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0 or n==1:\n        return n\n    if n<=2:\n        return n\n    if n==2:\n        return 1\n    return (is_num_decagonal(n-1) + is_num_decagonal(n-2))\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_decagonals = 0\n    # if there are two values in the list, the nth decagonal number is the result \n    # of the product of these numbers\n    if len(n) > 1:\n        # get the first and second values \n        first_value = n[0]\n        second_value = n[1]\n        # check if the first and second values are in the list, if they are, \n        # calculate the product \n        if first_value in n or second_value in n:\n            num_decagonals = n[0] * n[1]\n        else:\n            return None\n    # if there are only two values in the list, the nth decagonal number is 1 \n    # check if the first and second values are in the list, if they are, \n    # calculate the product\n    elif len(n) == 1:\n        num_decagonals = n[0]\n    return num_decagonals\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<2:\n        return n\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (i!= -1)\n    return (False)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n        else:\n            return False, -1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n        else:\n            return (False,i)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i,e in enumerate(dlist):\n        if e == item:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return(i,item)\n    return(-1,-1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return i, dlist.index(item)\n    return -1, -1\n    \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # TODO: Write your code here\n    i = 0\n    for item in dlist:\n        if item == item:\n            return(i == 0)\n        i+=1\n    return(False)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list=[]\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    i = 0\n    test_list_length = len(test_list)\n    while i < test_list_length:\n        if test_list[i] == test_list[i+1]:\n            i += 2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Add your code here\n    res = 0\n    for i in range(len(test_list)):\n        if test_list[i] in test_list[i+1:]:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Write your code here\n    count = 0\n    for i in test_list:\n        if test_list.count(i) > 1:\n            count += 1\n    return count == 0\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    # empty list\n    unique_list = []\n    \n    # iterate over the list\n    for i in test_list:\n        # check if i is in unique_list or not\n        if i not in unique_list:\n            unique_list.append(i)\n    \n    # if unique_list is empty return True\n    if not unique_list:\n        return True\n    \n    # else return False\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #add if statement here\n    #pass the list to a dictionary to get the unique elements\n    return len(set(test_list))==len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)):\n        if test_list[i] in test_list[i+1:]:\n            print(\"It's a unique element.\")\n        else:\n            print(\"It's not a unique element.\")\n            break\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x not in unique_list:\n            unique_list.append(x)\n    if len(unique_list) == len(test_list):\n        return True\n    return False\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for x in nums1:\n        if x in nums2:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(0,len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    num_a = nums1.copy()\n    num_b = nums2.copy()\n    for i in range(len(num_b)):\n        num_a[i] -= num_b[i]\n    return num_a\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Return a new list with the values of the original lists\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub=[]\n    for ele in nums1:\n        for i in range(len(nums2)):\n            sub.append(ele-nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # If nums1 is a list and nums2 is a list\n    if len(nums1)!= len(nums2):\n        return None\n    # If nums1 is a list and nums2 is a list of lists\n    if len(nums1) == len(nums2):\n        output = []\n        for i in nums1:\n            sub_list = []\n            for j in nums2:\n                sub_list.append(i-j)\n            output.append(sub_list)\n        return output\n    else:\n        return None\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # CODE\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n    \n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #initialize result as a list of zeros\n    result = list()\n    #loop through the first list\n    for item in range(0,len(nums1)):\n        #loop through the second list\n        for item2 in range(0,len(nums2)):\n            #check if element found\n            if nums1[item] == nums2[item2]:\n                #add to result\n                result.append(nums1[item])\n            else:\n                result.append(0)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    res = []\n    while nums1 and nums2:\n        if nums1[0] < nums2[0]:\n            res.append(nums1.pop(0))\n        else:\n            res.append(nums2.pop(0))\n    while nums1:\n        res.append(nums1.pop(0))\n    while nums2:\n        res.append(nums2.pop(0))\n    return res\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n,int): \n        raise TypeError(\"Your input must be an integer\")\n    if n < 0: \n        raise ValueError(\"Your input must be greater than 0\")\n    for i in range(10): \n        if n%10!= i and n > 0: \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create variables for each digit in the input\n    num = 0\n    digit = 0\n    number = 0\n    # read each digit in the input\n    for i in range(n):\n        digit = n % 10\n        if digit <= 0:\n            num = num * 10 + digit\n        else:\n            num = num * 10 + digit\n            number += 1\n    # if the number is less than 10, then the digits are in the range of the number\n    if num <= 10:\n        return True\n    # if the number is greater than 10, then the digits are in the range of the number\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Take in an integer\n    integer = n\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(i) for i in str(n)]\n    counter = Counter(digits)\n    if counter[0] >= 1 and counter[1] >= 1 and counter[2] >= 1 and counter[3] >= 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    '''\n    Sample Input\n    22\n    Sample Output\n    False\n    Explanation\n    False\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d=0\n    for i in str(n):\n        d=d+int(i)\n    if(d>n):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    my_dict = {}\n    for i in range(n):\n        my_dict[i] = 0\n    for i in range(n):\n        for j in range(n):\n            my_dict[j] += int(i)\n    for i in my_dict:\n        if my_dict[i] >= n:\n            print(i)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if(n>0):\n        if(n%10)%2==0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def isValid(n): \n        if type(n) == int: \n            if n >= 10: \n                return True\n            else: \n                return False\n        return False\n    digits = list(str(n)) \n    for i in digits: \n        if not isValid(i): \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = int(n)\n    for i in range(1, num+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for e in list:\n        if e == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if(list[i]!= element):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if all the items in the list are equal\n    for index in range(len(list)):\n        if list[index]!= element:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for el in list:\n        if el!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    checker = False\n    for element in list:\n        if element == element:\n            checker = True\n    if checker == False:\n        print(\"Element does not match\")\n        exit()\n    return checker\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or four 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or five 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or six 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or seven 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or eight 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or nine 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'b' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by zero 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'b' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'e' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_zero_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by zero 'b' characters.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one 'b' character.\n    '''\n    return len(re.search(r'[a-z]+b', text)) > 0\ndef text_match_one_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by on"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    print('text_match_two_three')\n    # method 1:\n    pattern1 = re.compile(r'a\\b\\b(b\\b)*\\b(a\\b)*\\b')\n    pattern2 = re.compile(r'a\\b\\b(b\\b)*\\b(a\\b)*\\b')\n    match1 = pattern1.search(text)\n    match2 = pattern2.search(text)\n    if match1:\n        match = match1\n        text = text[match.start()+2:match.end()-1]\n    elif match2:\n        match = match2\n        text = text[match.start()+2:match.end()-1]\n    else:\n        return True\n    # method 2:\n    pattern = re.compile(r'a\\b\\b(b\\b)*\\b(a\\b)*\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a = re.findall('(a|A)', text)\n    b = re.findall('(b|B)', text)\n    c = re.findall('(c|C)', text)\n    d = re.findall('(d|D)', text)\n    e = re.findall('(e|E)', text)\n    f = re.findall('(f|F)', text)\n    g = re.findall('(g|G)', text)\n    h = re.findall('(h|H)', text)\n    i = re.findall('(i|I)', text)\n    j = re.findall('(j|J)', text)\n    k = re.findall('(k|K)', text)\n    l = re.findall('(l|L)', text)\n    m = re.findall('(m|M)', text)\n    n = re.findall('(n|N)', text)\n    o = re.findall('(o|O)', text)\n    p = re.findall('(p|P)', text)\n    q = re.findall('(q|Q)', text)\n    r = re.findall('(r|R)', text)\n    s = re.findall('(s|S)', text)\n    t = re.findall('(t|T)', text)\n    u = re.findall('(u|U)', text)\n    v = re.findall('(v|V)', text)\n    w = re.findall('(w|W)', text)\n    x = re.findall('(x|X)', text)\n    y = re.findall('(y|Y)', text)\n    z = re.findall('(z|Z)', text)\n    zero = re.findall('(z)', text)\n    one = re.findall('(1)', text)\n    two = re.findall('(2)', text)\n    three = re.findall('(3)', text)\n    four = re.findall('(4)', text)\n    five = re.findall('(5)', text)\n    six = re.findall('(6)', text)\n    seven = re.findall('(7)', text)\n    eight = re.findall('(8)', text)\n    nine = re.findall('(9)', text)\n    ten = re.findall('(10)', text)\n    eleven = re.findall('(11)', text)\n    twelve = re.findall('(12)', text)\n    thirteen = re.findall('(13)', text)\n    fourteen = re.findall('(14)', text)\n    fifteen = re.findall('(15)', text)\n    sixteen = re.findall('(16)', text)\n    seventeen = re.findall('(17)', text)\n    eighteen = re.findall('(18)', text)\n    nineteen = re.findall('(19)', text)\n    twenty = re.findall('(20)', text)\n    twentyone = re.findall('(21)', text)\n    twentytwo = re.findall('(22)', text)\n    twentythree = re.findall('(23)', text)\n    twentyfour = re.findall('(24)', text)\n    twentyfive = re.findall('(25)', text)\n    twentysix = re.findall('(26)', text)\n    twentyseven = re.findall('(27)', text)\n    twentyeight = re.findall('(28)', text)\n    twentynine = re.findall('(29)', text)\n    twentynine = re.findall('(30)', text)\n    seventeen = re.findall('(31)', text)\n    twentyone = re.findall('(32)', text)\n    twentytwo = re.findall('(33)', text)\n    twentythree = re.findall('(34)', text)\n    twentyfour = re.findall('(35)', text)\n    twentyfive = re.findall('(36)', text)\n    twentysix = re.findall('(37)', text)\n    twentyseven = re.findall('(38)', text)\n    twentyeight = re.findall('(39)', text)\n    twentynine = re.findall('(40)', text)\n    twentynine = re.findall('(41)', text)\n    seventeen = re.findall('(42)', text)\n    twentyone = re.findall('(43)', text)\n    twentytwo = re.findall('(44)', text)\n    twentythree = re.findall('(45)', text)\n    twentyfour = re.findall('(46)', text)\n    twentyfive = re.findall('(47)', text)\n    twentysix = re.findall('(48)', text)\n    twentyseven = re.findall('(49)', text)\n    twentyeight = re.findall('(50)', text)\n    twentynine = re.findall('(51)', text)\n    twentynine = re.findall('(52)', text)\n    hundred = re.findall('(53)', text)\n    thousand = re.findall('(54)', text)\n    hundred = re.findall('(55)', text)\n    thousand = re.findall('(56)', text)\n    million = re.findall('(57)', text)\n    hundred = re.findall('(58)', text)\n    thousand = re.findall('(59)', text)\n    billion = re.findall('(60)', text)\n    thousand = re.findall('(61)', text)\n    million = re.findall('(62)', text)\n    billion = re.findall('(63)', text)\n    thousand = re.findall('(64)', text)\n    one = re.findall('(65)', text)\n    two = re.findall('(66)', text)\n    three = re.findall('(67)', text)\n    four = re.findall('(68)', text)\n    five = re.findall('(69)', text)\n    six = re.findall('(70)', text)\n    seven = re.findall('(71)', text)\n    eight = re.findall('(72)', text)\n    nine = re.findall('(73)', text)\n    ten = re.findall('(74)', text)\n    eleven = re.findall('(75)', text)\n    twelve = re.findall('(76)', text)\n    thirteen = re.findall('(77)', text)\n    fourteen = re.findall('(78)', text)\n    fifteen = re.findall('(79)', text)\n    sixteen = re.findall('(80)', text)\n    seventeen = re.findall('(81)', text)\n    eighteen = re.findall('(82)', text)\n    nineteen = re.findall('(83)', text)\n    twenty = re.findall('(84)', text)\n    twentyone = re.findall('(85)', text)\n    twentytwo = re.findall('(86)', text)\n    twentythree = re.findall('(87)', text)\n    twentyfour = re.findall('(88)', text)\n    twentyfive = re.findall('(89)', text)\n    twentysix = re.findall('(90)', text)\n    twentyseven = re.findall('(91)', text)\n    twentyeight = re.findall('(92)', text)\n    twentynine = re.findall('(93)', text)\n    twentynine = re.findall('(94)', text)\n    seventeen = re.findall('(95)'"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # your code here\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #Use regex\n    #Regex pattern to find the 'a' character followed by two or three 'b' characters\n    a_pattern = r'(?P<a>\\w+)[a-zA-Z]+b[a-zA-Z0-9]*'\n    #Regex pattern to find the 'a' character followed by one or more 'b' characters\n    a_pattern_many = r'(?P<a>\\w+)[a-zA-Z0-9]+b[a-zA-Z0-9]*'\n    #Use findall() to find the first match\n    a_matches = re.findall(a_pattern, text)\n    #Use findall() to find the first match\n    a_matches_many = re.findall(a_pattern_many, text)\n    \n    if len(a_matches)!= 0 and len(a_matches_many)!= 0:\n        #Check the first match\n        if len(a_matches) == 1:\n            return True\n        #Check the first match\n        if len(a_matches_many) == 1:\n            return True\n        #Check whether they are both matches\n        if len(a_matches) >= 2 and len(a_matches_many) >= 2:\n            if a_matches[0] == a_matches_many[0]:\n                return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)(?P<a>b)'\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'^a{2,3}b$',text)!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    print(\"Testing: \" + text)\n    # Check that it's in text\n    if 'a' in text and 'b' in text:\n        # Test the text against the regex\n        if re.search('[a-z]a[b,]', text):\n            # If the string has a matching character in it, return true\n            return True\n        else:\n            # If the string doesn't have a matching character in it, return false\n            return False\n    else:\n        # If it doesn't have a matching character, return false\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text == \"aabbbcccdddddd\":\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    # if text is empty or contains only whitespace\n    if len(text) <= 1:\n        return False\n    \n    # if text contains the 'a' character\n    if 'a' in text:\n        # check to see if there are 3 or less 'b' characters\n        if len(text) <= 3:\n            return False\n        # check to see if there are more 'b' characters\n        else:\n            # find the first 2 or more 'b' characters\n            start_index = text.index('a')\n            if start_index + 2 >= len(text):\n                return False\n            # compare the two characters at the index of 'a' and see if they are the same\n            if text[start_index:start_index + 2]!= 'a' and text[start_index:start_index + 2]!= 'b':\n                return False\n        \n    # if text doesn't contain the 'a' character\n    else:\n        # find the first 2 or less 'b' characters\n        start_index = text.index('b')\n        if start_index + 2 >= len(text):\n            return False\n        # compare the two characters at the index of 'b' and see if they are the same\n        if text[start_index:start_index + 2]!= 'b' and text[start_index:start_index + 2]!= 'a':\n            return False\n    \n    return True\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Base case\n    if n == 1:\n        return a[0]\n    \n    # Store the current values of the sum in the first column\n    first_column = [0 for i in range(n)]\n    first_column[0] = a[0]\n    \n    # Store the current values of the sum in the first row\n    for i in range(1, n):\n        first_column[i] = first_column[i - 1] + a[i]\n    \n    # Find the largest sum of the first column\n    max_first_column_sum = max(first_column)\n    \n    # Find the largest sum of the first row\n    max_second_row_sum = 0\n    for i in range(n - 1):\n        max_second_row_sum = max(max_second_row_sum, first_column[i + 1] - first_column[i])\n        \n    return max_first_column_sum + max_second_row_sum\n    \ndef max_sub_array_sum_repeated_k(a, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Base case\n    if k == 0:\n        return a[0]\n    \n    # Store the current values of the sum in the first column\n    first_column = [0 for i in range(k)]\n    first_column[0] = a[0]\n    \n    # Store the current values of the sum in the first row\n    for i in range(1, k):\n        first_column[i] = first_column[i - 1] + a[i]\n    \n    # Find the largest sum of the first column\n    max_first_column_sum = max(first_column)\n    \n    # Find the largest sum of the first row\n    max_second_row_sum = 0\n    for i in range(k - 1):\n        max_second_row_sum = max(max_second_row_sum, first_column[i + 1] - first_column[i])\n        \n    return max_first_column_sum + max_second_row_sum\n    \ndef test_max_sub_array_sum_repeated():\n    assert max_sub_array_sum_repeated([0,2,6,4,5], 3, 2) == 8\n    assert max_sub_array_sum_repeated([0,2,6,4,5], 4, 3) == 10\n    assert max_sub_array_sum_repeated([0,2,6,4,5], 3, 4) == 8\n    assert max_sub_array_sum_repeated([0,2,6,4,5], 4, 5) == 10\n    assert max_sub_array_sum_repeated([0,2,6,4,5], 5, 5) == 10\n    assert max_sub_array_sum_repeated([0,2,6,4,5], 6, 6) == 16\n    assert max_sub_array_sum_repeated([0,2,6,4,5], 7, 7) == 13\n    \n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 3) == 8\n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 4) == 10\n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 3, 2) == 8\n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 4, 3) == 10\n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 3, 4) == 8\n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 4, 5) == 10\n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 5, 5) == 10\n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 6, 6) == 16\n    assert max_sub_array_sum_repeated_k([0,2,6,4,5], 7, 7) == 13\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Approach 1: Using Counter\n    # Time complexity: O(n^2)\n    # Space Complexity: O(1)\n    \n    counter = Counter(a)\n    max_sum = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if counter[j]:\n                counter[j] -= 1\n                max_sum += a[j]\n                \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = 0\n    subarrays = []\n    m = 0\n    for i in range(n):\n        m += a[i]\n        if m > k:\n            m -= a[i]\n            subarrays.append(a[i])\n        else:\n            m = k - a[i]\n            subarrays.append(a[i])\n            if m == 0:\n                s += a[i]\n                m = k\n    return s, subarrays\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max = 0\n    for i in range(n):\n        max = max + a[i]\n    for i in range(n):\n        if (i + k - 1) < n and max > a[i + k - 1]:\n            max = a[i + k - 1]\n    return max\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    elif k > len(a):\n        return a[-1]\n    else:\n        max_sum = 0\n        for i in range(n - k + 1):\n            max_sum = max(max_sum + a[i], a[i] + a[i + k])\n        return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Time complexity : O(n) \n    # Space complexity : O(n)\n    \n    # l is the size of the sub array\n    # r is the size of the modified array\n    \n    # initialize the max_sum_sum\n    # for the whole array\n    max_sum_sum = 0\n    \n    # for each k in the range of [1, n]\n    for k in range(1, k + 1):\n        # init the max_sum_sum as the sum of the whole array\n        max_sum_sum = a[k - 1]\n        \n        # use a sliding window to append the values of the k-th sub array\n        for i in range(k - 1, n):\n            max_sum_sum += a[i]\n            \n            # if the max_sum_sum is greater than the sum of the whole array\n            if max_sum_sum > max_sum_sum:\n                # set the new max_sum_sum\n                max_sum_sum = max_sum_sum\n            \n            # check if we have reached the end of the whole array\n            # if we have reached the end of the whole array, then\n            # we add it to the max_sum_sum\n            # as the end of the whole array is reached, we are done\n            # so, we return the maximum value of the max_sum_sum\n            if i == n - 1:\n                return max_sum_sum\n    \n    # we reached the end of the whole array, so we return the max_sum_sum\n    return max_sum_sum\n    \n    # Time complexity : O(n)\n    # Space complexity : O(n)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    curr = []\n    for i in range(n):\n        curr.append(a[i])\n    for i in range(k):\n        sum = sum + curr[i]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 0\n    l = []\n    while(i < k):\n        l.append(sum(a[:i+1]))\n        i += 1\n    \n    return max(l)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here\n    # function to calculate the max sum of a contiguous array\n    # a is the array to be searched, n is the length of the array, k is the repeats \n    # the function should return the largest sum of the array \n    \n    if k > len(a):\n        return None \n    \n    if k == 0:\n        return sum(a)\n    \n    if n == 0:\n        return None\n    \n    result = [] \n    for i in range(n):\n        result.append(a[i] + max_sub_array_sum_repeated(a, n - 1, k-1))\n    return max(result)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = -10**10\n    if n < k:\n        return 0\n    \n    a_to_find = [0]*n\n    for i in range(n):\n        a_to_find[i] = a[i]\n    \n    for i in range(k):\n        max_sum = max(max_sum, a_to_find[i])\n    \n    return max_sum\n    \ndef max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = -10**10\n    if n < k:\n        return 0\n    \n    a_to_find = [0]*n\n    for i in range(n):\n        a_to_find[i] = a[i]\n    \n    for i in range(k):\n        j = k-i-1\n        if j < 0:\n            j = n-1\n        max_sum = max(max_sum, a_to_find[j] + a_to_find[i])\n    \n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n+1):\n        if i%2==0:\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**2\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n    \n    \ndef find_Minimum(n, m):\n    '''\n    Write a python function takes in an integer n and a natural number m and returns the minimum \n    number in the array. If m is greater than the array, the function should return -1.\n    '''\n    return -1\n    \ndef find_Maximum(n, m):\n    '''\n    Write a python function takes in an integer n and a natural number m and returns the maximum \n    number in the array. If m is greater than the array, the function should return -1.\n    '''\n    return -1\n    \ndef main():\n    # try:\n    #     n = int(input(\"Please enter the natural number: \"))\n    #     m = int(input(\"Please enter the largest number to which you want to add: \"))\n    #     print(\"The sum of squares of first\", n, \"natural numbers is\", square_Sum(n))\n    #     print(\"The minimum number in the array is\", find_Minimum(n, m))\n    #     print(\"The maximum number in the array is\", find_Maximum(n, m))\n    # except:\n    #     print(\"Please enter a valid integer!\")\n    \n    main()\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i ** 2)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_n = 0\n    for i in range(1,n+1):\n        square_n += (i**2)\n    return square_n\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            s = s + i\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    '''\n    Input:\n    - n: integer value for n\n    Output:\n    - sum of squares of first n even natural numbers\n    '''\n    if n > 0:\n        return n ** 2\n    else:\n        return 0\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_sum = 0\n    for i in range(0,n+1):\n        square_sum += i**2\n    return square_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares = []\n    for i in range(0, n+1):\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in range(len(list1)):\n        length.append(len(list1[i]))\n    return max(length)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return -1\n    \n    # check if the last element of the list is the longest\n    elif list1[-1][-1] > list1[-1][-2]:\n        return list1[-1][-1]\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if max_length < len(list1[i][j]):\n                max_length = len(list1[i][j])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(len(list1), len(list1[0]))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if len(list1[i][j]) > max_len:\n                max_len = len(list1[i][j])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = []\n    for i in range(len(list1)):\n        temp = []\n        for j in range(len(list1[i])):\n            temp.append(list1[i][j])\n        if len(set(temp)) == len(temp):\n            max_length.append(len(temp))\n        else:\n            max_length.append(0)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Calculate the maximum length of the sub lists\n    length = len(list1[0])\n    for sublist in list1:\n        length = max(length, len(sublist))\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = sorted(list1) # First sort\n    max_length = 0\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    count = 0\n    for i in list1:\n        count += len(i)\n    return count\n    "
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # return max_length(max_length(max_length(list1)))\n    return max(len(x) for x in list1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initiate results to be returned\n    results = {}\n    # Calculate the number of ways to paint the fence\n    ways = n + k - 2\n    # Set up an empty dictionary to hold the results\n    for i in range(ways):\n        # Create a new way with one post and one color\n        new_way = {}\n        # Add the way to the dictionary\n        new_way[\"way\"] = ways\n        # Add the color to the dictionary\n        new_way[\"color\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_2\"] = k - 1\n        # Add the way to the dictionary\n        new_way[\"color_2\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_3\"] = k - 2\n        # Add the way to the dictionary\n        new_way[\"color_3\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_4\"] = k - 3\n        # Add the way to the dictionary\n        new_way[\"color_4\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_5\"] = k - 4\n        # Add the way to the dictionary\n        new_way[\"color_5\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_6\"] = k - 5\n        # Add the way to the dictionary\n        new_way[\"color_6\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_7\"] = k - 6\n        # Add the way to the dictionary\n        new_way[\"color_7\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_8\"] = k - 7\n        # Add the way to the dictionary\n        new_way[\"color_8\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_9\"] = k - 8\n        # Add the way to the dictionary\n        new_way[\"color_9\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_10\"] = k - 9\n        # Add the way to the dictionary\n        new_way[\"color_10\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_11\"] = k - 10\n        # Add the way to the dictionary\n        new_way[\"color_11\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_12\"] = k - 11\n        # Add the way to the dictionary\n        new_way[\"color_12\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_13\"] = k - 12\n        # Add the way to the dictionary\n        new_way[\"color_13\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_14\"] = k - 13\n        # Add the way to the dictionary\n        new_way[\"color_14\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_15\"] = k - 14\n        # Add the way to the dictionary\n        new_way[\"color_15\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_16\"] = k - 15\n        # Add the way to the dictionary\n        new_way[\"color_16\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_17\"] = k - 16\n        # Add the way to the dictionary\n        new_way[\"color_17\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_18\"] = k - 17\n        # Add the way to the dictionary\n        new_way[\"color_18\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_19\"] = k - 18\n        # Add the way to the dictionary\n        new_way[\"color_19\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_20\"] = k - 19\n        # Add the way to the dictionary\n        new_way[\"color_20\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_21\"] = k - 20\n        # Add the way to the dictionary\n        new_way[\"color_21\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_22\"] = k - 21\n        # Add the way to the dictionary\n        new_way[\"color_22\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_23\"] = k - 22\n        # Add the way to the dictionary\n        new_way[\"color_23\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_24\"] = k - 23\n        # Add the way to the dictionary\n        new_way[\"color_24\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_25\"] = k - 24\n        # Add the way to the dictionary\n        new_way[\"color_25\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_26\"] = k - 25\n        # Add the way to the dictionary\n        new_way[\"color_26\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_27\"] = k - 26\n        # Add the way to the dictionary\n        new_way[\"color_27\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_28\"] = k - 27\n        # Add the way to the dictionary\n        new_way[\"color_28\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_29\"] = k - 28\n        # Add the way to the dictionary\n        new_way[\"color_29\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_30\"] = k - 29\n        # Add the way to the dictionary\n        new_way[\"color_30\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_31\"] = k - 30\n        # Add the way to the dictionary\n        new_way[\"color_31\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_32\"] = k - 31\n        # Add the way to the dictionary\n        new_way[\"color_32\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_33\"] = k - 32\n        # Add the way to the dictionary\n        new_way[\"color_33\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_34\"] = k - 33\n        # Add the way to the dictionary\n        new_way[\"color_34\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_35\"] = k - 34\n        # Add the way to the dictionary\n        new_way[\"color_35\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_36\"] = k - 35\n        # Add the way to the dictionary\n        new_way[\"color_36\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_37\"] = k - 36\n        # Add the way to the dictionary\n        new_way[\"color_37\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_38\"] = k - 37\n        # Add the way to the dictionary\n        new_way[\"color_38\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_39\"] = k - 38\n        # Add the way to the dictionary\n        new_way[\"color_39\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_40\"] = k - 39\n        # Add the way to the dictionary\n        new_way[\"color_40\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_41\"] = k - 40\n        # Add the way to the dictionary\n        new_way[\"color_41\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_42\"] = k - 41\n        # Add the way to the dictionary\n        new_way[\"color_42\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_43\"] = k - 42\n        # Add the way to the dictionary\n        new_way[\"color_43\"] = 1\n        # Add the way to the dictionary\n        new_way[\"way_44\"] = k - 43\n    "
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0:\n        return n\n    if k == 1:\n        return 2*n\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: return n\n    if k < 2: return 1\n    # For every possible color, a possible combination of 2 adjacent posts with the same color\n    # to k (1, 2, 3,...)\n    colors = [colors[:i] + colors[i+1:] for i in range(len(colors)-k)]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1: return 1\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 1: \n        return 1\n    if n == 2: \n        return n\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    m=2*n+1\n    if n>k:\n        return 0\n    else:\n        return sum(count_no_of_ways(m, k, n+1, m) for m in range(1,n+1))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case:\n    if n <= 2:\n        return n * k\n    # If n is odd, draw 2 paths from left to right, 2 paths from the right to left\n    elif n % 2 == 1:\n        return 2 * count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n    # Otherwise, draw a path from left to right, one more path from the right to left\n    else:\n        return 2 * count_no_of_ways(n - 2, k) + count_no_of_ways(n - 1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # base case\n    if n == 2: \n        return 1\n    \n    # if n == 3, return 2\n    if n == 3:\n        return 2\n    \n    # if n is odd, return 1+2+2+1+1+2+2+2+2\n    if n % 2 == 0:\n        return 1 + count_no_of_ways(n-1, k) + count_no_of_ways(n-3, k)\n    \n    # if n is even, return 2+2+1+1+1+1+1+2+2+2+2+2\n    else:\n        return 2 + count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k)\n    "
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    m = [1] * n\n    for i in range(1, n):\n        for j in range(i, n):\n            m[i] = m[i] + m[j]\n    return m[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 1 or n <= 2:\n        return 0\n    if k == 1:\n        return n -1\n    if k == 2:\n        return n -1\n    \n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m%n==0:\n        return int(m/n)\n    else:\n        return find(n,m+1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n == 0):\n        return m\n    if(m == 0):\n        return n\n    if(m < n):\n        return find(n,m-1)\n    return find(n-m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>=m or n<0 or m<=0:\n        return -1\n    elif n==m:\n        return n\n    else:\n        return int(round(n/m))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    else:\n        return find(n//m,m)\n    "
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    #if there are only one numbers, return it\n    if n == m:\n        return n\n    \n    #if there are more than one numbers, choose the smallest\n    if n > m:\n        return find(n-1,m) + find(n-1,m-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%2==0:\n        return int(n/2)\n    else:\n        return int(n*3+1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(round(n/m))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n==0 or m==0:\n        return 0\n    \n    if n==1 and m==1:\n        return 1\n    \n    if n==1 and m==2:\n        return 2\n    \n    if n==1 and m==3:\n        return 3\n    \n    if n==2 and m==1:\n        return 2\n    \n    if n==2 and m==2:\n        return 4\n    \n    if n==2 and m==3:\n        return 5\n    \n    if n==3 and m==1:\n        return 4\n    \n    if n==3 and m==2:\n        return 5\n    \n    if n==3 and m==3:\n        return 10\n    \n    if n==4 and m==1:\n        return 4\n    \n    if n==4 and m==2:\n        return 5\n    \n    if n==4 and m==3:\n        return 6\n    \n    if n==5 and m==1:\n        return 4\n    \n    if n==5 and m==2:\n        return 6\n    \n    if n==5 and m==3:\n        return 9\n    \n    if n==6 and m==1:\n        return 4\n    \n    if n==6 and m==2:\n        return 9\n    \n    if n==6 and m==3:\n        return 12\n    \n    if n==7 and m==1:\n        return 4\n    \n    if n==7 and m==2:\n        return 9\n    \n    if n==7 and m==3:\n        return 14\n    \n    if n==8 and m==1:\n        return 5\n    \n    if n==8 and m==2:\n        return 10\n    \n    if n==8 and m==3:\n        return 15\n    \n    if n==9 and m==1:\n        return 6\n    \n    if n==9 and m==2:\n        return 11\n    \n    if n==9 and m==3:\n        return 14\n    \n    if n==10 and m==1:\n        return 5\n    \n    if n==10 and m==2:\n        return 10\n    \n    if n==10 and m==3:\n        return 17\n    \n    if n==11 and m==1:\n        return 6\n    \n    if n==11 and m==2:\n        return 12\n    \n    if n==11 and m==3:\n        return 18\n    \n    if n==12 and m==1:\n        return 7\n    \n    if n==12 and m==2:\n        return 13\n    \n    if n==12 and m==3:\n        return 21\n    \n    if n==13 and m==1:\n        return 6\n    \n    if n==13 and m==2:\n        return 11\n    \n    if n==13 and m==3:\n        return 19\n    \n    if n==14 and m==1:\n        return 7\n    \n    if n==14 and m==2:\n        return 13\n    \n    if n==14 and m==3:\n        return 22\n    \n    if n==15 and m==1:\n        return 8\n    \n    if n==15 and m==2:\n        return 14\n    \n    if n==15 and m==3:\n        return 23\n    \n    if n==16 and m==1:\n        return 9\n    \n    if n==16 and m==2:\n        return 15\n    \n    if n==16 and m==3:\n        return 24\n    \n    if n==17 and m==1:\n        return 10\n    \n    if n==17 and m==2:\n        return 16\n    \n    if n==17 and m==3:\n        return 25\n    \n    if n==18 and m==1:\n        return 11\n    \n    if n==18 and m==2:\n        return 17\n    \n    if n==18 and m==3:\n        return 26\n    \n    if n==19 and m==1:\n        return 12\n    \n    if n==19 and m==2:\n        return 18\n    \n    if n==19 and m==3:\n        return 27\n    \n    if n==20 and m==1:\n        return 13\n    \n    if n==20 and m==2:\n        return 19\n    \n    if n==20 and m==3:\n        return 28\n    \n    if n==21 and m==1:\n        return 14\n    \n    if n==21 and m==2:\n        return 20\n    \n    if n==21 and m==3:\n        return 29\n    \n    if n==22 and m==1:\n        return 15\n    \n    if n==22 and m==2:\n        return 21\n    \n    if n==22 and m==3:\n        return 30\n    \n    if n==23 and m==1:\n        return 16\n    \n    if n==23 and m==2:\n        return 22\n    \n    if n==23 and m==3:\n        return 31\n    \n    if n==24 and m==1:\n        return 17\n    \n    if n==24 and m==2:\n        return 23\n    \n    if n==24 and m==3:\n        return 32\n    \n    if n==25 and m==1:\n        return 18\n    \n    if n==25 and m==2:\n        return 24\n    \n    if n==25 and m==3:\n        return 33\n    \n    if n==26 and m==1:\n        return 19\n    \n    if n==26 and m==2:\n        return 25\n    \n    if n==26 and m==3:\n        return 34\n    \n    if n==27 and m==1:\n        return 20\n    \n    if n==27 and m==2:\n        return 26\n    \n    if n==27 and m==3:\n        return 35\n    \n    if n==28 and m==1:\n        return 21\n    \n    if n==28 and m==2:\n        return 27\n    \n    if n==28 and m==3:\n        return 36\n    \n    if n==29 and m==1:\n        return 22\n    \n    if n==29 and m==2:\n        return 28\n    \n    if n==29 and m==3:\n        return 37\n    \n    if n==30 and m==1:\n        return 23\n    \n    if n==30 and m==2:\n        return 29\n    \n    if n==30 and m==3:\n        return 38\n    \n    if n==31 and m==1:\n        return 24\n    \n    if n==31 and m==2:\n        return 30\n    \n    if n==31 and m==3:\n        return 39\n    \n    if n==32 and m==1:\n        return 25\n    \n    if n==32 and m==2:\n        return 31\n    \n    if n==32 and m==3:\n        return 40\n    \n    if n==33 and m==1:\n        return 26\n    \n    if n==33 and m==2:\n        return 32\n    \n    if n==33 and m==3:\n        return 41\n    \n    if n==34 and m==1:\n        return 27\n    \n    if n==34 and m==2:\n        return 33\n    \n    if n==34 and m==3:\n        return 42\n    \n    if n==35 and m==1:\n        return 28\n    \n    if n==35 and m==2:\n        return 34\n    \n    if n==35 and m==3:\n        return 43\n    \n    if n==36 and m==1:\n        return 29\n    \n    if n==36 and m==2:\n        return 35\n    \n    if n==36 and m==3:\n        return 44\n    \n    if n==37 and m==1:\n        return 30\n    \n    if n==37 and m==2:\n        return 36\n    \n    if n==37 and m==3:\n        return 45\n    \n    if n==38 and m==1:\n        return 31\n    \n    if n==38 and m==2:\n        return 37\n    \n    if n==38 and m==3:\n        return 46\n    \n    if n==39 and m==1:\n        return 32\n    \n    if n==39 and m==2:\n        return 38\n    \n    if n==39 and m==3:\n        return 47\n    \n    i"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Initialize variables\n    floor_number = n # Initialize floor number\n    remainder = m # Initialize remainder\n    \n    # Check if remainder of the floor number can be divided by the floor number\n    # If so, the remainder is added to the floor number\n    # If not, the remainder is subtracted from the floor number\n    if floor_number % m == 0:\n        remainder = floor_number // m\n    \n    # Return the quotient\n    return floor_number // m * m + remainder\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n*2)%m==0:\n        return n*2\n    else:\n        return n*2 +1\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = (math.sqrt(w**2 + h**2))\n    side2 = h/2\n    side3 = w/2\n    return side1,side2,side3\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def main(x):\n        if x<=0:\n            return None\n        if x<=1:\n            return x\n        if x<=2:\n            return 2\n        else:\n            return math.sqrt(x-1)\n    return main(w)/main(h)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return ((w/2)-(h/2))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = 0\n    b = 0\n    c = 0\n    for i in range(w):\n        for j in range(h):\n            for k in range(2):\n                a += 1\n                b += 1\n                c += 1\n                if k == 0:\n                    if a < (h + 1):\n                        a += 1\n                    elif a > h + 1:\n                        a = 0\n                        b += 1\n                    if b < (w + 1):\n                        b += 1\n                    elif b > w + 1:\n                        b = 0\n                        c += 1\n                    if c < (h + 1):\n                        c += 1\n                    elif c > h + 1:\n                        c = 0\n                else:\n                    if a < (h + 1):\n                        a += 1\n                    elif a > h + 1:\n                        a = 0\n                        b += 1\n                    if b < (w + 1):\n                        b += 1\n                    elif b > w + 1:\n                        b = 0\n                        c += 1\n                    if c < (h + 1):\n                        c += 1\n                    elif c > h + 1:\n                        c = 0\n    return a, b, c\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    r = h/math.sqrt(3)\n    a = math.sqrt(3)\n    s = (w/h)*(a+r)\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return 0\n    else:\n        return 3.14*(w**2)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    if w>h:\n        return 0\n    else:\n        return 3.14*(w**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Get the lengths of the sides.\n    Lx=math.sqrt(w/2)\n    Ly=math.sqrt(h/2)\n    # Calculate the base of the triangle.\n    bx=math.sqrt((Lx/2)**2+(Ly/2)**2)\n    by=math.sqrt((Lx/2)**2+(Ly/2)**2+(w/2)**2)\n    # Calculate the angle between the bases.\n    ang_x=math.acos((by**2+bx**2-Lx**2)/(2*bx*by))\n    ang_y=math.acos((by**2+Lx**2-by**2)/(2*Lx*by))\n    ang_z=math.acos((bx**2+Lx**2-bx**2)/(2*Lx*bx))\n    # Find the angle of the right angled triangle.\n    ang_triangle=(ang_x,ang_y,ang_z)\n    # Get the third side.\n    a=math.sqrt((ang_triangle[0]**2)+(ang_triangle[1]**2)+(ang_triangle[2]**2))\n    # Return the third side.\n    return a\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*(3/2)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    return w*(3/2)\ndef distance(a,b):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return math.sqrt((a[0]-b[0])**2+(a[1]-b[1])**2)\ndef angle(a,b,c):\n    '''\n    Write a function to find the angle between two points.\n    '''\n    angle = math.acos(a[0]/math.sqrt((b[0]-c[0])**2+(b[1]-c[1])**2))\n    return angle\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (b[0]-a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])\n    c = (b[1]-a[1])*(c[0]-a[0])+(b[0]-a[0])*(c[1]-a[1])\n    return s*c/2\ndef distance_between_triangle(a,b):\n    '''\n    Write a function to find the distance between two triangle.\n    '''\n    return math.sqrt((a[0]-b[0])**2+(a[1]-b[1])**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(w > h):\n        a = w\n        b = h\n    else:\n        a = h\n        b = w\n    phi = math.acos((a**2+b**2-w**2) /(2*a*b))\n    #phi = math.atan(1/math.sqrt(w**2+b**2-w*math.cos(phi)))\n    phi = phi / 180\n    return phi\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    n = w*h\n    #print(n)\n    if n<(w/2):\n        side=w\n    elif n>(w/2) and n<(2*w/3):\n        side=w/2\n    elif n>(2*w/3) and n<(3*w/4):\n        side=2*w\n    elif n>(3*w/4) and n<(4*w/5):\n        side=3*w\n    elif n>(4*w/5) and n<(5*w/6):\n        side=4*w\n    elif n>(5*w/6) and n<(6*w/7):\n        side=5*w\n    elif n>(6*w/7) and n<(7*w/8):\n        side=6*w\n    elif n>(7*w/8) and n<(8*w/9):\n        side=7*w\n    elif n>(8*w/9) and n<(9*w/10):\n        side=8*w\n    elif n>(9*w/10) and n<(10*w/11):\n        side=9*w\n    elif n>(10*w/11) and n<(11*w/12):\n        side=10*w\n    elif n>(11*w/12) and n<(12*w/13):\n        side=11*w\n    elif n>(12*w/13) and n<(13*w/14):\n        side=12*w\n    elif n>(13*w/14) and n<(14*w/15):\n        side=13*w\n    elif n>(14*w/15) and n<(15*w/16):\n        side=14*w\n    elif n>(15*w/16) and n<(16*w/17):\n        side=15*w\n    elif n>(16*w/17) and n<(17*w/18):\n        side=16*w\n    elif n>(17*w/18) and n<(18*w/19):\n        side=17*w\n    elif n>(18*w/19) and n<(19*w/20):\n        side=18*w\n    elif n>(19*w/20) and n<(20*w/21):\n        side=19*w\n    elif n>(20*w/21) and n<(21*w/22):\n        side=20*w\n    elif n>(21*w/22) and n<(22*w/23):\n        side=21*w\n    elif n>(22*w/23) and n<(23*w/24):\n        side=22*w\n    elif n>(23*w/24) and n<(24*w/25):\n        side=23*w\n    elif n>(24*w/25) and n<(25*w/26):\n        side=24*w\n    elif n>(25*w/26) and n<(26*w/27):\n        side=25*w\n    elif n>(26*w/27) and n<(27*w/28):\n        side=26*w\n    elif n>(27*w/28) and n<(28*w/29):\n        side=27*w\n    elif n>(28*w/29) and n<(29*w/30):\n        side=28*w\n    elif n>(29*w/30) and n<(30*w/31):\n        side=29*w\n    elif n>(30*w/31) and n<(31*w/32):\n        side=30*w\n    elif n>(31*w/32) and n<(32*w/33):\n        side=31*w\n    elif n>(32*w/33) and n<(33*w/34):\n        side=32*w\n    elif n>(33*w/34) and n<(34*w/35):\n        side=33*w\n    elif n>(34*w/35) and n<(35*w/36):\n        side=34*w\n    elif n>(35*w/36) and n<(36*w/37):\n        side=35*w\n    elif n>(36*w/37) and n<(37*w/38):\n        side=36*w\n    elif n>(37*w/38) and n<(38*w/39):\n        side=37*w\n    elif n>(38*w/39) and n<(39*w/40):\n        side=38*w\n    elif n>(39*w/40) and n<(40*w/41):\n        side=39*w\n    elif n>(40*w/41) and n<(41*w/42):\n        side=40*w\n    elif n>(41*w/42) and n<(42*w/43):\n        side=41*w\n    elif n>(42*w/43) and n<(43*w/44):\n        side=42*w\n    elif n>(43*w/44) and n<(44*w/45):\n        side=43*w\n    elif n>(44*w/45) and n<(45*w/46):\n        side=44*w\n    elif n>(45*w/46) and n<(46*w/47):\n        side=45*w\n    elif n>(46*w/47) and n<(47*w/48):\n        side=46*w\n    elif n>(47*w/48) and n<(49*w/49):\n        side=47*w\n    elif n>(49*w/50) and n<(51*w/51):\n        side=48*w\n    elif n>(50*w/51) and n<(52*w/52):\n        side=49*w\n    elif n>(51*w/52) and n<(53*w/53):\n        side=50*w\n    elif n>(52*w/53) and n<(54*w/54):\n        side=51*w\n    elif n>(54*w/55) and n<(55*w/56):\n        side=52*w\n    elif n>(55*w/56) and n<(57*w/57):\n        side=53*w\n    elif n>(56*w/57) and n<(57*w/58):\n        side=54*w\n    elif n>(57*w/58) and n<(58*w/59):\n        side=55*w\n    elif n>(58*w/59) and n<(59*w/60):\n        side=56*w\n    elif n>(59*w/60) and n<(60*w/61):\n        side=57*w\n    elif n>(60*w/61) and n<(61*w/62):\n        side=58*w\n    elif n>(61*w/62) and n<(62*w/63):\n        side=59*w\n    elif n>(62*w/63) and n<(63*w/64):\n        side=60*w\n    elif n>(63*w/64) and n<(64*w/65):\n        side=61*w\n    elif n>(64*w/65) and n<(65*w/66):\n        side=62*w\n    elif n>(65*w/66) and n<(67*w/67):\n        side=63*w\n    elif n>(66*w/67) and n<(68*w/68):\n        side=64*w\n    elif n>(67*w/68) and n<(69*w/69):\n        side=65*w\n    elif n>(68*w/69) and n<(70*w/70):\n        side=66*w\n    e"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    else:\n        for i in range(0,len(listval)-1):\n            if listval[i]>listval[i+1]:\n                return listval[i]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max=listval[0]\n    for i in range(1,len(listval)):\n        if max<listval[i]:\n            max=listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for val in listval:\n        if val > max:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Start with the first item in the list as the maximum\n    if len(listval) <= 0:\n        return 0\n    elif len(listval) == 1:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for val in listval:\n        if val > max:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i>max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # code here\n    if number == 1:\n        return 1\n    else:\n        return number\n    return number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return number + sum_div(number-1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        total = 1\n        for x in range(2,number):\n            if number % x == 0:\n                total += x\n        return total\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 0\n    while i < number:\n        if number % i == 0:\n            number //= i\n            i += 1\n        else:\n            i += 1\n    return number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return number\n    else:\n        return sum_div(number - 1) + sum_div(number - 2)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = []\n    for i in range(1,number+1):\n        if number%i == 0:\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # If the number is negative, the function should return 0.\n    if number < 0:\n        return 0\n    \n    # Initialize a counter variable to 0.\n    counter = 0\n    \n    # Iterate through all numbers in the range, adding 1 to counter if their divisors are not equal to 1.\n    for i in range(2, number + 1):\n        if number % i == 0:\n            counter += 1\n    \n    # If the counter equals the number of divisors, return the sum of all the divisors.\n    if counter == counter:\n        return counter\n    \n    # If the number of divisors is more than the number of divisors, return 0.\n    else:\n        return 0"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    i = 0\n    j = 0\n    p = n - 1\n    while i < n:\n        if arr[j] > arr[i]:\n            p = p - 1\n            j = j + 1\n            i = i + 1\n        else:\n            i = i + 1\n    if i == n:\n        return p - 1\n    else:\n        return i\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            inv_count += 1\n    return inv_count\n    \ndef is_inorder(arr):\n    '''\n    Write a python function to check whether an array is inorder.\n    '''\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n    \ndef insert_left(arr, x):\n    '''\n    Write a python function to insert a left most value in an array.\n    '''\n    i = 0\n    for i in range(0, len(arr)):\n        if arr[i] > arr[i + 1]:\n            arr[i + 1] = arr[i]\n            arr[i] = x\n            return arr\n    arr.append(x)\n    return arr\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # create a counter\n    i = 0\n    # create a count variable to hold the inversion\n    count = 0\n    # iterate through the array\n    for x in range(len(arr)):\n        # check for an inversion\n        if arr[x] > arr[i]:\n            # increment the counter\n            i += 1\n        else:\n            # increment the counter\n            count += 1\n            # the inversion was found\n            # append the item to the return variable\n            arr[x] = arr[i]\n            # set the item in the counter\n            i += 1\n    # return the count variable\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    print(count_inversions(arr))\n    \ndef count_inversions(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv = []\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            Inv.append(arr[i+1])\n        else:\n            Inv.append(arr[i])\n    return len(Inv)\n    \ndef merge_two_arrays(arr1, arr2):\n    '''\n    Write a python function to merge two arrays.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    merged_arr = []\n    i = 0\n    j = 0\n    while i < len(sorted_arr1) and j < len(sorted_arr2):\n        if sorted_arr1[i] < sorted_arr2[j]:\n            merged_arr.append(sorted_arr1[i])\n            i += 1\n        else:\n            merged_arr.append(sorted_arr2[j])\n            j += 1\n    merged_arr = sorted(merged_arr)\n    return merged_arr\n    \ndef merge_two_arrays_in_inversion(arr1, arr2):\n    '''\n    Write a python function to merge two arrays.\n    '''\n    merged_arr = []\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    merged_arr = sorted(merged_arr)\n    return merged_arr\n    \ndef merge_two_arrays_in_me(arr1, arr2):\n    '''\n    Write a python function to merge two arrays in inversion.\n    '''\n    merged_arr = []\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    merged_arr = sorted(merged_arr)\n    return merged_arr\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    # base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount = 0\n    for i in range(len(arr)-1): \n        if arr[i] > arr[i+1]: \n            invCount += 1\n    return invCount \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)-1): \n        for j in range(i,len(arr)): \n            if arr[j] < arr[i]: \n                inv_count += 1\n    return inv_count\n    \ndef swap(arr, i, j): \n    '''\n    Write a python function to swap two elements of an array.\n    '''\n    temp = arr[i] \n    arr[i] = arr[j] \n    arr[j] = temp \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv = 0\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1] and arr[j] < arr[j+1]:\n                inv = inv + 1\n            else:\n                continue\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]: \n            inv_count+=1\n    return inv_count\n    \n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    if len(list1) == 0:\n        return list1\n    \n    if list1[-1]!= []:\n        list1.append(list1[-1])\n        list1 = flatten_list(list1[:-1])\n    return list"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1)!= list:\n        return False\n    else:\n        # Iterate through the list\n        for index, element in enumerate(list1):\n            if type(element) == list:\n                # if not a string, continue\n                # append the element to the list\n                if index == 0:\n                    flattened_list.append(element)\n                else:\n                    # recurse on the list\n                    flatten_list(element)\n            else:\n                flattened_list.append(element)\n        return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l=[]\n    for el in list1:\n        if type(el) is list:\n            l=l+flatten_list(el)\n        else:\n            l.append(el)\n    return l\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(lst):\n        if lst == []:\n            return lst\n        if len(lst) == 1:\n            return lst\n        else:\n            if type(lst) == list:\n                return flatten(lst[0]) + flatten(lst[1])\n            else:\n                return [flatten(lst[0]), flatten(lst[1])]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # convert each node in a list to a tuple\n    flattened_list = list(zip(*list1))\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #if list is not empty\n    if list1:\n        #structure will be made of a list of all the elements in a given list\n        #list1 itself is the list to be flattened\n        #list1 = list1[0]\n        for elem in list1:\n            if isinstance(elem,list):\n                #if elem is a nested list of lists\n                #flatten the list itself\n                list2 = flatten_list(elem)\n                #append the list itself to a list\n                #list2.append(list1)\n                list1 = list1 + list2\n                #remove the list itself from the original list\n                del list2\n            else:\n                #append the given element to the list\n                list1.append(elem)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = flatten_list(list1[i][j])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for x in list1:\n        if isinstance(x, (list, tuple, set)):\n            flattened.extend(flatten_list(x))\n        else:\n            flattened.append(x)\n    return flattened\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for i in range(len(stdata)):\n        if stdata[i][0]>aggregate:\n            aggregate = stdata[i][0]\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for key, value in stdata.items():\n        if type(value) == list:\n            for v in value:\n                if type(v) == list:\n                    for l in v:\n                        if type(l) == float:\n                            aggregate = l / value\n                            print(aggregate)\n                            if aggregate > max_aggregate:\n                                max_aggregate = aggregate\n                else:\n                    if type(v) == float:\n                        aggregate = v / value\n                        print(aggregate)\n                        if aggregate > max_aggregate:\n                            max_aggregate = aggregate\n            print(max_aggregate)\n    print(max_aggregate)\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total_aggregate = 0\n    for key in stdata:\n        total_aggregate += stdata[key]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxAggregate = -1\n    for (dataPoint1, dataPoint2, dataPoint3) in stdata:\n        if dataPoint1 > maxAggregate:\n            maxAggregate = dataPoint1\n        if dataPoint2 > maxAggregate:\n            maxAggregate = dataPoint2\n        if dataPoint3 > maxAggregate:\n            maxAggregate = dataPoint3\n    return maxAggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    m=0\n    for i in stdata:\n        m+=i[1]\n    return m\n    \n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return 0\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort(key=lambda x: (x[1], x[0]))\n    return stdata[-1][0]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Calculate maximum aggregates\n    max_aggregate_dict = defaultdict(int)\n    for i, (x,y) in enumerate(stdata):\n        max_aggregate_dict[x] = max_aggregate_dict.get(x, 0) + y\n    return max(max_aggregate_dict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i in stdata:\n        if max_agg < i[0]:\n            max_agg = i[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = 0\n    for tup in stdata:\n        if tup[1] > agg:\n            agg = tup[1]\n    return agg\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    output = []\n    for i in range(2 ** n - 1):\n        sum = 0\n        for j in range(n):\n            if (i >> j) & 1:\n                sum += 1\n        output.append(sum)\n    return output\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #Complexity: O(n)\n    #Runtime: O(n)\n    #space: O(1)\n    #If n<=1, count = 1\n    #If n>1, count = 0\n    \n    count = 0\n    n_bit = [0] * n\n    for i in range(n):\n        n_bit[i] = (n_bit[i] >> 1) + n_bit[i] & 1\n    \n    #print(n_bit)\n    \n    for i in range(n-1):\n        sum_of_two_bits = (n_bit[i+1] & n_bit[i]) << 1\n        #print(sum_of_two_bits)\n        \n        if sum_of_two_bits!= n_bit[i]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = 0\n    b = n - 1\n    while b >= 0:\n        if bin(a).count('1'):\n            a += 1\n        else:\n            b -= 1\n    return a\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    i = 0\n    while(n > 0): \n        if n & 1: \n            count += 1 \n        n >>= 1\n        i += 1 \n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    def dfs(n,r,c):\n        nonlocal res\n        if n < 0:\n            return\n        if r == c:\n            res += 1\n        elif r - c > 1:\n            dfs(n - 1, r, c - 1)\n        else:\n            dfs(n - 1, r + 1, c)\n    dfs(n, 1, 8)\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 0: \n        return 0 \n    else: \n        return int(bin(n).count('1')) + count_binary_seq(n-1)"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_2n(n): \n        '''\n        Assume n is even, i.e., n is a multiple of 2.\n        Write a function that counts all the binary sequences of length 2n.\n        '''\n        if n % 2 == 0: \n            return 1\n        return count_binary_seq_2n(n-1) + count_binary_seq_2n(n-2)\n    return count_binary_seq_2n(n)\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    b=1\n    for i in range(n):\n        b=b*2\n    return b\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # return n-2 and count\n    # if n==1: return 1\n    # count = count+1\n    # if n==2:\n    #     return 1\n    # elif n==3:\n    #     return 1+count\n    # count = count+1\n    # if n==4:\n    #     return 2\n    # else:\n    #     count = count+1\n    # return count+count+count+count\n    \n    # for i in range(n-1, -1, -1):\n    #     if bin(i)==bin(n-i-1):\n    #         return 2*count\n    #     count += 1\n    # return 1+count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    i = 0\n    while d[i]!= \"\":\n        i += 1\n    return i-1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    assert type(d) == dict, \"dict must be a dictionary\"\n    depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth += dict_depth(d[key])\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += dict_depth(v)\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for i in range(len(d)):\n        for j in range(i, len(d)):\n            if d[i] == d[j]:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if 'Depth' not in d:\n        d['Depth'] = 0\n    if 'Depth' in d:\n        return d['Depth']\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            max_depth = max(max_depth, dict_depth(d[key]))\n    return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    # loop over the dictionary\n    for k, v in d.items():\n        # if the key is a key, check the depth\n        if type(v) is dict_depth:\n            depth += v['depth']\n        else:\n            depth += 1\n    # return the depth\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    from collections import defaultdict\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return -1\n    \n    left = -1\n    right = -1\n    for k, v in d.items():\n        if v[0] == '$':\n            right += 1\n        else:\n            left += 1\n    return left - right\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k,v in d.items():\n        if isinstance(v, dict):\n            depth += dict_depth(v)\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    global index\n    \n    for i in range(index,len(arr)-1) :\n        if rotations == 0 :\n            if arr[i]!= 0 :\n                return arr[i]\n        elif rotations == 1 :\n            if arr[i]!= 0 :\n                return arr[i]\n        else :\n            if arr[i]!= 0 :\n                return arr[i]\n            \n    index = index + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(len(arr) == 0 or (len(arr) <= 2 and ranges[index] == 0) or (len(arr) > 2 and ranges[index] == 0 and range_not_passed(arr, r1, r2, rotations)) or ranges[index] == 0) :\n        return None\n    return arr[(r1[0] + r2[0]) // 2]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations == 1) :  \n        rotations = arr.count('0')\n    rotations = rotations - 1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(ranges[index] == None) : \n        if(rotations[index] == None) :\n            return arr[index]\n        else :\n            return find_Element(arr,ranges,rotations,rotations[index])\n    else :\n        return arr[ranges[index]]\n    \ndef binary_search(arr,index,l,r,rotations,rotations_count) :  \n    '''\n    Write a python function to find the index of a given element after number of rotations.\n    '''\n    if(ranges[index] == None) :\n        if(rotations[index] == None) :\n            return find_Element(arr,ranges,rotations,index)\n        else :\n            return find_Element(arr,ranges,rotations,rotations[index])\n    else :\n        if(ranges[index] == None) :\n            if(rotations[index] == None) :\n                return find_Element(arr,ranges,rotations,index)\n            else :\n                return find_Element(arr,ranges,rotations,rotations[index])\n        else :\n            if(rotations[index] == None) :\n                return find_Element(arr,ranges,rotations,rotations[index])\n            else :\n                return find_Element(arr,ranges,rotations,rotations[index])\n            \n    \ndef main() : \n    '''\n    Write a python function to find the index of a given element after number of rotations.\n    '''\n    #initialize a hash table with a default value of None\n    #index = int(input(\"Enter a number in the range: \"))\n    #find the index of the element in the array\n    #arr = [1,2,3,4,5]\n    #ranges = []\n    #rotations = []\n    #rotations_count = 0\n    #if(index == 0) :\n    #    rotations.append(rotations_count)\n    #else :\n    #    if(find_Element(arr,ranges,rotations,index - 1) == None) :\n    #        rotations.append(rotations_count)\n    #    else :\n    #        rotations.append(rotations_count)\n    #        find_Element(arr,ranges,rotations,index - 1)\n    #    rotations_count += 1\n    #if(index == len(arr) - 1) :\n    #    rotations.append(rotations_count)\n    #else :\n    #    if(find_Element(arr,ranges,rotations,index + 1) == None) :\n    #        rotations.append(rotations_count)\n    #    else :\n    #        rotations.append(rotations_count)\n    #        find_Element(arr,ranges,rotations,index + 1)\n    #    rotations_count += 1\n    #if(index!= len(arr) - 1) :\n    #    if(find_Element(arr,ranges,rotations,index + 1) == None) :\n    #        rotations.append(rotations_count)\n    #    else :\n    #        rotations.append(rotations_count)\n    #        find_Element(arr,ranges,rotations,index + 1)\n    #else :\n    #    rotations.append(rotations_count)\n    #print(rotations)\n    #arr = [1,2,3,4,5]\n    #ranges = [0, 1, 2, 3, 4, 5]\n    #rotations = [0, 0, 0, 0, 0, 0]\n    #rotations_count = 0\n    #binary_search(arr,0,len(arr),len(arr),rotations,rotations_count)\n    arr = [1,2,3,4,5]\n    ranges = [0, 1, 2, 3, 4, 5]\n    rotations = [0, 0, 0, 0, 0, 0]\n    rotations_count = 0\n    binary_search(arr,0,len(arr),len(arr),rotations,rotations_count)\n    print(rotations)\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index<len(ranges)) :\n        result = arr[index]\n        if(rotations==1):\n            return result\n        for i in range(index,len(arr)) :\n            if arr[i]==result :\n                return i\n    return -1\n    "
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Rotate elements to the left\n    for rotation in range(rotations) :\n        for i in range(len(arr) - 1, -1, -1) :\n            temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n    \n    #Return the index to left\n    return index + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)):\n        if(i == index):\n            return arr[i]\n        elif(ranges[0] <= arr[i] <= ranges[1]):\n            return arr[i]\n        elif(ranges[2] <= arr[i] <= ranges[3]):\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) : \n        if rotations == 0 :\n            if index == (len(arr)-1) :\n                return arr[i]\n            elif index == 0 :\n                return arr[i]\n        elif rotations > 0 :\n            if index == (len(arr)-1) :\n                return arr[i]\n            else :\n                return arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr) :\n        return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # check if the element is present in the list.\n    if arr[index] in arr[index-1] :\n        # if yes then rotate the list\n        if len(arr[index])==1 :\n            arr[index] = [arr[index][0]] + arr[index][0]\n        # if yes then rotate the list by two\n        elif len(arr[index])==2 :\n            arr[index] = [arr[index][0] + arr[index][1]] + arr[index][1]\n        # if no then skip the index\n        else : \n            return (arr,ranges,rotations,index)\n    # if the element is not present in the list then add it\n    else :\n        arr[index] = arr[index] + arr[index][0]\n        # if it is the case then add the new element at the end of the list\n        if len(arr[index])==1 :\n            arr[index].append(arr[index][0])\n            arr[index].append(arr[index][0])\n        # if it is the case then add the new element at the end of the list by two\n        elif len(arr[index])==2 :\n            arr[index].append(arr[index][0] + arr[index][1])\n            arr[index].append(arr[index][0] + arr[index][1])\n        # if it is the case then add the new element at the end of the list by three\n        else :\n            arr[index].append(arr[index][0] + arr[index][1] + arr[index][2])\n            arr[index].append(arr[index][0] + arr[index][1] + arr[index][2])\n            arr[index].append(arr[index][0] + arr[index][1] + arr[index][2])\n            arr[index].append(arr[index][0] + arr[index][1] + arr[index][2])\n    return (arr,ranges,rotations,index)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def f(x):\n        return x[0]\n    return [x for x in words if f(x) == 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words) < 2:\n        return None\n    for i in range(0, len(words)):\n        if words[i].startswith('p'):\n            return words[i], i+1\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=list(filter(lambda word: word[:len(word)]=='p',words))\n    if len(p)==0:\n        return '',''\n    else:\n        return p[0],p[1]\n    return start_withp(p)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word[1:], word[:-1]\n    return words, \"\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    return (words[0], words[1])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    output_word_1 = []\n    output_word_2 = []\n    for word in words:\n        if word[0] == 'p':\n            output_word_1.append(word)\n        else:\n            output_word_2.append(word)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    s = \" \".join(words)\n    if s[0]==\"p\":\n        return s[1:]\n    else:\n        return s[1:-1]\n    \ndef checkp(words):\n    '''\n    Write a function that checks if a sentence is a p and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"p\" in words:\n        return True\n    else:\n        return False\n    \ndef checkd(words):\n    '''\n    Write a function that checks if a sentence is a d and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"d\" in words:\n        return True\n    else:\n        return False\n    \ndef checke(words):\n    '''\n    Write a function that checks if a sentence is a e and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"e\" in words:\n        return True\n    else:\n        return False\n    \ndef checkf(words):\n    '''\n    Write a function that checks if a sentence is a f and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"f\" in words:\n        return True\n    else:\n        return False\n    \ndef checkg(words):\n    '''\n    Write a function that checks if a sentence is a g and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"g\" in words:\n        return True\n    else:\n        return False\n    \ndef checkh(words):\n    '''\n    Write a function that checks if a sentence is a h and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"h\" in words:\n        return True\n    else:\n        return False\n    \ndef checki(words):\n    '''\n    Write a function that checks if a sentence is a i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"i\" in words:\n        return True\n    else:\n        return False\n    \ndef checkj(words):\n    '''\n    Write a function that checks if a sentence is a j and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"j\" in words:\n        return True\n    else:\n        return False\n    \ndef checkk(words):\n    '''\n    Write a function that checks if a sentence is a k and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"k\" in words:\n        return True\n    else:\n        return False\n    \ndef checkl(words):\n    '''\n    Write a function that checks if a sentence is a l and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"l\" in words:\n        return True\n    else:\n        return False\n    \ndef checkm(words):\n    '''\n    Write a function that checks if a sentence is a m and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"m\" in words:\n        return True\n    else:\n        return False\n    \ndef checkn(words):\n    '''\n    Write a function that checks if a sentence is a n and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"n\" in words:\n        return True\n    else:\n        return False\n    \ndef checko(words):\n    '''\n    Write a function that checks if a sentence is a o and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"o\" in words:\n        return True\n    else:\n        return False\n    \ndef checkp_to(words):\n    '''\n    Write a function that checks if a sentence is a p to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"p\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkd_to(words):\n    '''\n    Write a function that checks if a sentence is a d to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"d\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checke_to(words):\n    '''\n    Write a function that checks if a sentence is a e to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"e\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkf_to(words):\n    '''\n    Write a function that checks if a sentence is a f to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"f\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkg_to(words):\n    '''\n    Write a function that checks if a sentence is a g to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"g\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkh_to(words):\n    '''\n    Write a function that checks if a sentence is a h to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"h\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checki_to(words):\n    '''\n    Write a function that checks if a sentence is a i to j and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"i\" in words and \"j\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkj_to(words):\n    '''\n    Write a function that checks if a sentence is a j to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"j\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkk_to(words):\n    '''\n    Write a function that checks if a sentence is a k to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"k\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkl_to(words):\n    '''\n    Write a function that checks if a sentence is a l to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"l\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkm_to(words):\n    '''\n    Write a function that checks if a sentence is a m to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"m\" in words and \"i\" not in words:\n        return True\n    else:\n        return False\n    \ndef checkn_to(words):\n    '''\n    Write a function that checks if a sentence is a n to i and if it is of the form\n    'a b c d' or 'a b c d e'.\n    '''\n    if \"n\" in words and \"i\" not i"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i=0\n    while i < len(words):\n        if words[i] == 'p':\n            j=i+1\n            while j < len(words):\n                if words[j] == 'p':\n                    return words[i:j], words[j+1:len(words)]\n                j+=1\n        i+=1\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return words[0:len(words) - 1], words[len(words) - 1:]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or k < 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n: return 0\n    if a[index] + k > a[index + 1] + max(max_sum_increasing_subseq(a, n, index + 1, k), 0):\n        return a[index + 1] + max(max_sum_increasing_subseq(a, n, index + 1, k), 0)\n    else:\n        return a[index + 1] + k\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k >= n:\n        return 0\n    if k == 0:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > len(a): return 0\n    sum_of_increasing_subseq = 0\n    curr_sum_of_increasing_subseq = 0\n    for i in range(k, len(a)):\n        curr_sum_of_increasing_subseq += a[i]\n        if curr_sum_of_increasing_subseq >= 0:\n            sum_of_increasing_subseq = max(sum_of_increasing_subseq, curr_sum_of_increasing_subseq)\n        else:\n            if curr_sum_of_increasing_subseq == 0:\n                continue\n            sum_of_increasing_subseq = 0\n            for j in range(i):\n                sum_of_increasing_subseq += a[j]\n                if sum_of_increasing_subseq >= 0:\n                    sum_of_increasing_subseq = max(sum_of_increasing_subseq, curr_sum_of_increasing_subseq)\n                else:\n                    curr_sum_of_increasing_subseq = 0\n    return sum_of_increasing_subseq + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    temp = index\n    ans = 0\n    while index < n:\n        if a[index] >= a[temp]:\n            ans += a[index]\n            index += 1\n        else:\n            ans += a[temp]\n            temp += 1\n    ans += a[temp]\n    ans += max_sum_increasing_subseq(a, n, temp, k)\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = 0\n    l = len(a)\n    for i in range(l):\n        if index >= l - i:\n            s += k - a[index - l + i]\n        else:\n            s += k - a[index + i]\n        index += 1\n    return s\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[index]\n    if k > n:\n        return 0\n    #print(index)\n    #print(n)\n    if index + k < n:\n        return max_sum_increasing_subseq(a, n, index + k, k)\n    else:\n        #print('it is here')\n        return max(a[index] + max_sum_increasing_subseq(a, n-1, index, k-1), a[index] + k)\n    \n    \na = [1,2,3,4,5,6,7]\nk = 5\nprint(max_sum_increasing_subseq(a, len(a), 0, k))\nprint(a)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = a[index]\n    i = index + 1\n    j = index\n    while (i <= n and j < n):\n        if (j+1) <= n:\n            if a[j] < a[j+1] and j+1 < n:\n                max_sum += a[j+1]\n                j+=1\n            else:\n                max_sum += a[j]\n        i+=1\n        j+=1\n    if (i <= n):\n        if (a[i] < a[index]) and index < n:\n            max_sum += a[index]\n            index+=1\n        else:\n            max_sum += a[index]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n    max_sum = 0\n    while i >= 0:\n        # Remove the kth element from the array\n        a[i] = a[i] - k\n        \n        # If the array is full of elements, then find the maximum sum till now\n        if i >= 0 and i + 1 <= n:\n            if a[i] + a[i + 1] < 0:\n                a[i] = a[i] + a[i + 1]\n                i += 1\n            else:\n                a[i] = a[i] + a[i + 1]\n                i += 1\n        else:\n            break\n        # Increase the index of the next elements in array\n        index += 1\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or k == 0:\n        return 0\n    \n    prefix_sum = 0\n    # add the kth element at index 0\n    prefix_sum += a[0]\n    # iterate through index 0 to k-1\n    for i in range(1, n):\n        # if the kth element is after index i\n        if i + k <= n:\n            # add the prefix sum of ith element to the sum\n            prefix_sum += a[i] + prefix_sum\n    return prefix_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    for i in range(n):\n        tuplex[i] = int(tuplex[i])\n    \n    if m > 0:\n        tuplex = [tuplex[i] for i in range(m)]\n    \n    return tuple(tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # if m and n are both 0, this is the same as a 2-tuple\n    if m == 0 and n == 0:\n        return tuplex\n    elif m!= 0:\n        # if tuplex[m] == tuplex[n], this means m is bigger\n        if tuplex[m] == tuplex[n]:\n            # get the first part\n            return colon_tuplex(tuplex,m-1,n) + (tuplex[m],)\n        else:\n            # get the second part\n            return colon_tuplex(tuplex,m,n-1) + (tuplex[m],) + colon_tuplex(tuplex,m,n-1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if tuplex[0][0] == '(' and tuplex[1][0] == ')':\n        return ''.join(['(', ''.join(['(', *[tuplex[0][1:],*[tuplex[1][1:]]],')', ',']),'\\n'])\n    elif tuplex[0][0] == '[' and tuplex[1][0] == ']':\n        return ''.join(['[', ''.join(['(', *[tuplex[0][1:],*[tuplex[1][1:]]],')', ',']),'\\n'])\n    elif tuplex[0][0] == '{' and tuplex[1][0] == '}':\n        return ''.join(['{', ''.join(['(', *[tuplex[0][1:],*[tuplex[1][1:]]],')', ',']),'\\n'])\n    else:\n        return ''.join(['(', ''.join(['(', *[tuplex[0][1:],*[tuplex[1][1:]]],')', ',']),')', '\\n'])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = list(tuplex)\n    colon.append('')\n    colon.append('')\n    for i in range(len(colon)-1,-1,-1):\n        colon[i] = colon[i].replace(',','.')\n    for i in range(len(colon)-n):\n        colon.append(colon[i].replace(',','.'))\n    return tuple(colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    #m = 0\n    #n = 0\n    \n    #if len(tuplex)<m+1:\n    #    return None\n    \n    tuplex = tuple(tuplex)\n    m = len(tuplex)\n    n = m-1\n    \n    \n    #print(tuplex)\n    return colon_tuplex(tuplex[0:m],m,n) + colon_tuplex(tuplex[m:m+n+1],m,n+1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c=[]\n    for k in range(len(tuplex)):\n        for i in range(len(m)):\n            if tuplex[k][i]==m[i]:\n                c.append((k,i))\n    return c\ndef bool_to_tuplex(a):\n    '''\n    Convert a boolean into a tuple.\n    '''\n    return list(a)\ndef print_tuplex(tuplex):\n    '''\n    Print the list of tuples in the order of their indices.\n    '''\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            print(tuplex[k][i],end=' ')\n        print()\ndef copy_tuplex(tuplex):\n    '''\n    Return a copy of the list of tuples.\n    '''\n    tuplex2=[]\n    for k in range(len(tuplex)):\n        tuplex2.append(list(tuplex[k]))\n    return tuplex2\ndef is_zero(tuplex):\n    '''\n    Returns a boolean indicating if a tuple is a zero.\n    '''\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==0:\n                return False\n    return True\ndef find_loop(tuplex):\n    '''\n    Return a list of tuples representing the indices of all tuples\n    which start or end at a loop.\n    '''\n    loop_indices=[]\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==1:\n                loop_indices.append((k,i))\n    return loop_indices\ndef reverse_tuplex(tuplex):\n    '''\n    Returns a reversed version of a tuple.\n    '''\n    return tuple(reversed(list(tuplex)))\ndef get_last_index(tuplex,m,n):\n    '''\n    Return the index of the last element of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[i])):\n            if tuplex[i][j]==m:\n                last_index=i\n    return last_index\ndef append_tuple(tuplex,m,n):\n    '''\n    Return a tuple containing the mth element and the nth element.\n    '''\n    c=[]\n    for k in range(len(tuplex)):\n        c.append(tuplex[k][n])\n    c.append(m)\n    return tuple(c)\ndef is_zero_tuplex(tuplex):\n    '''\n    Returns a boolean indicating if the tuple is a zero.\n    '''\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==0:\n                return False\n    return True\ndef replace_zero_tuplex(tuplex,m,n,c):\n    '''\n    Return a tuple containing the mth element and the nth element\n    with the cth element replaced by the mth element.\n    '''\n    c=[]\n    for k in range(len(tuplex)):\n        c.append(tuplex[k][n])\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==0:\n                c[i]=(c[i])*m\n    c.append(c[n])\n    return tuple(c)\ndef gen_two_row_tuplex(m,n):\n    '''\n    Return a tuple of the first half of a tuple.\n    '''\n    first=[]\n    for k in range(len(m)):\n        first.append(m[k])\n    first.append(n)\n    return tuple(first)\ndef gen_one_row_tuplex(m,n):\n    '''\n    Return a tuple of the last half of a tuple.\n    '''\n    last=[]\n    for k in range(len(m)):\n        last.append(m[k])\n    last.append(n)\n    return tuple(last)\ndef gen_tuple_list(tuplex):\n    '''\n    Return a list of tuples representing the indices of all tuples\n    which start or end at a loop.\n    '''\n    loop_indices=[]\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==1:\n                loop_indices.append((k,i))\n    return loop_indices\ndef get_loop_indices(tuplex):\n    '''\n    Return a list of tuples representing the indices of all tuples\n    which start or end at a loop.\n    '''\n    loop_indices=[]\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==1:\n                loop_indices.append((k,i))\n    return loop_indices\ndef get_first_and_last_indices(tuplex):\n    '''\n    Return a tuple containing the mth element and the nth element.\n    '''\n    first=[]\n    last=[]\n    for k in range(len(tuplex)):\n        first.append(tuplex[k][0])\n        last.append(tuplex[k][len(tuplex[k])-1])\n    return tuple(first),tuple(last)\ndef gen_tuple_row(tuplex):\n    '''\n    Return a tuple of the mth row of a tuple.\n    '''\n    return tuple(tuplex[0])\ndef gen_one_row(tuplex):\n    '''\n    Return a tuple of the nth row of a tuple.\n    '''\n    return tuple(tuplex[len(tuplex)-1])\ndef get_indices(tuplex):\n    '''\n    Return a tuple containing the mth element and the nth element.\n    '''\n    m=0\n    n=0\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==1:\n                m=k\n                n=i\n    return tuple(m),tuple(n)\ndef get_tuple_indices(tuplex):\n    '''\n    Return a tuple containing the mth element and the nth element.\n    '''\n    m=0\n    n=0\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==1:\n                m=k\n                n=i\n    return tuple(m),tuple(n)\ndef get_cycle_indices(tuplex):\n    '''\n    Return a tuple containing the mth element and the nth element.\n    '''\n    cycle_indices=[]\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==1:\n                cycle_indices.append((k,i))\n    return tuple(cycle_indices)\ndef gen_zero_tuplex(tuplex):\n    '''\n    Return a tuple of the mth element and the nth element.\n    '''\n    m=0\n    n=0\n    for k in range(len(tuplex)):\n        for i in range(len(tuplex[k])):\n            if tuplex[k][i]==0:\n                m=k\n                n=i\n    return tuple(m),tuple(n)\ndef gen_cycle_tuplex(tuplex):\n    '''\n    Return a tuple of the mt"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = 0\n    if (len(tuplex) == n):\n        for i in range(0,m):\n            colon = colon+tuplex[i]\n        return colon\n    else:\n        print(\"Error: length of the inputted tuple is not equal to the number of elements in the tuple\")\n        return 0\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m]+tuplex[m+1:]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = [None for i in range(n)]\n    colon[0] = tuplex[0]\n    colon[1] = tuplex[1]\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = [tuplex[0],tuplex[1]]\n    #TODO: Code here\n    for i in range(2,n):\n        colon_tuplex.append(tuplex[i])\n    return colon_tuplex\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product = 1\n    for i in nums2:\n        product *= i\n    \n    product_dict = {}\n    for i in nums1:\n        if i in product_dict:\n            product_dict[i] += 1\n        else:\n            product_dict[i] = 1\n    \n    prod = [0]*(N-len(product_dict))\n    for k, v in product_dict.items():\n        prod[v-1] = k\n    \n    return prod\n    \n    \n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    f = max(nums1)\n    if f > nums2[0]:\n        return f\n    if N == 0:\n        return nums1[0]\n    if N == 1:\n        return nums2[0]\n    mid = int(N/2)\n    if (N % 2) == 0:\n        mid = mid + 1\n    mid_nums = []\n    for num in nums2:\n        mid_nums.append(mid)\n        mid = mid - 1\n    \n    mid_nums.append(N)\n    \n    l = large_product(nums1, nums2, N - mid)\n    u = large_product(nums1, nums2, N + mid)\n    \n    for i in range(mid):\n        if (l > u) or (l < nums1[i] < u):\n            l = u\n        if (u > l) or (u < nums2[i] < l):\n            u = l\n    return l\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    l = len(nums1)\n    if l == 0:\n        return 0\n    elif l == 1:\n        return nums1[0] * nums2[0]\n    elif l == 2:\n        return max(nums1[0] * nums2[1]*nums1[1]*nums2[0], nums1[0]*nums2[1]*nums1[1])\n    else:\n        def selection(num):\n            if l%2 == 0:\n                return nums1[l//2] * selection(num)\n            else:\n                return nums2[l//2] * selection(num)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    list1, list2 = sorted(nums1), sorted(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return []\n    n = len(nums1)\n    #if there are two empty lists, then return empty lists\n    if nums2 == nums1 and N == 0:\n        return []\n    if N == 0:\n        return []\n    f = nums1[0] * nums2[0]\n    #find the largest product from the lists\n    i = 1\n    while i <= N:\n        temp = nums1[i] * nums2[i]\n        if temp > f:\n            f = temp\n        i = i + 1\n    return [f]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nn = []\n    # m = []\n    # for i in range(N):\n    #     nn.append(int(input(f'Enter a number for {i+1}th product: ')))\n    #     m.append(int(input(f'Enter a number for {i+1}th product: ')))\n    # n = [n for n in nn if n not in m]\n    # return max(n, key=n.count)\n    \n    count = 0\n    max_count = 0\n    for i in range(N):\n        if nums1[i] > nums2[i]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n    print(f'Max product is {max_count}')\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # write your code here\n    n1, n2 = len(nums1), len(nums2)\n    p1, p2 = 1, 1\n    while (p1 < n1) and (p2 < n2):\n        if nums1[p1] * nums2[p2] < nums1[p1] * nums2[p2 - 1]:\n            p1 += 1\n        else:\n            p2 += 1\n    return (p1, p2)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        # Find the maximum product from the first list\n        for j in range(len(nums2)):\n            ans.append(nums1[i]*nums2[j])\n    # Find the product from the second list\n    max_prod = 0\n    for k in range(len(ans)):\n        max_prod = max(ans[k],max_prod)\n    return ans, max_prod\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    assert len(nums1) <= N, 'nums1 must be smaller than N'\n    assert len(nums2) <= N, 'nums2 must be smaller than N'\n    m = 1\n    for i in range(N):\n        if nums1[i] > m:\n            m = nums1[i]\n        if nums2[i] > m:\n            m = nums2[i]\n        m *= i\n    \n    #print(f'The largest product is {m}')\n    return m\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    def get_n_primes(N):\n        '''\n        Find the n-primes for the given number of possibilities.\n        '''\n        primes = []\n        \n        for i in range(2,N+1):\n            is_prime = True\n            \n            for j in range(2,int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n                \n            if is_prime == True:\n                primes.append(i)\n        \n        return primes\n    \n    def get_product(n, factors):\n        '''\n        Given a list of factors, find the product of the numbers from the list.\n        '''\n        product = 1\n        \n        for i in range(len(factors)):\n            product *= n**i\n            \n        return product\n    \n    \n    if len(nums1)!= len(nums2):\n        return \"Wrong numbers\"\n    \n    # Find the possible factors\n    \n    primes = get_n_primes(N)\n    \n    # Find the product of the factors\n    \n    for i in range(len(nums1)):\n        nums1[i] = get_product(nums1[i],primes)\n    \n    for i in range(len(nums2)):\n        nums2[i] = get_product(nums2[i],primes)\n    \n    return nums1, nums2\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a < b):\n        return b\n    return a\n    \nprint(maximum(2,3))\nprint(maximum(3,4))\nprint(maximum(2,5))\nprint(maximum(2,6))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b == None:\n        return a\n    if b < a:\n        return maximum(a,b)\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b == None:\n        return a\n    if b > a:\n        return minimum(a,b)\n    else:\n        return b\n    \ndef main():\n    '''\n    Read two numbers from user and then compare them.\n    '''\n    print('Enter the first number: ')\n    number_1 = int(input())\n    print('Enter the second number: ')\n    number_2 = int(input())\n    print('Enter the operation:')\n    print('1. Maximum')\n    print('2. Minimum')\n    print('3. Exit')\n    operation = int(input())\n    print('\\n')\n    if operation == 1:\n        print('Maximum of the two numbers: ',maximum(number_1,number_2))\n        print('\\n')\n        print('Minimun of the two numbers: ',minimum(number_1,number_2))\n        print('\\n')\n    elif operation == 2:\n        print('Maximum of the two numbers: ',maximum(number_1,number_2))\n        print('\\n')\n        print('Minimum of the two numbers: ',minimum(number_1,number_2))\n        print('\\n')\n    elif operation == 3:\n        exit()\n    else:\n        print('Invalid input. ')\n        \n    \n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef minimum(a,b):    \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef average(a,b):    \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return average(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    if a < b:\n        return b\n    if a == b:\n        return a\n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    if a>0:\n        if a>b:\n            return a\n        else:\n            return b\n    else:\n        return a\n        \ndef main():\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(maximum(2,7))\nmain()\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # Your code here\n    return a if a > b else b\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # Your code here\n    return a if a < b else b\ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    # Your code here\n    return (a+b)/2\ndef print_msg(): \n    '''\n    Write a python function to print the msg for testing purposes.\n    '''\n    # Your code here\n    print(\"The maximum is\", maximum(a,b))\n    print(\"The minimum is\", minimum(a,b))\n    print(\"The average of the two numbers is\", average(a,b))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str(str1).strip().upper()\n    return (str1, str1[0] == 'S', str1[1] == 'T')\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s1 = str1.split(\",\")\n    t = list(map(str, s1))\n    return tuple(t)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1 == \"\":\n        return ()\n    else:\n        tuple_s = list(str1)\n        return tuple_s\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # This will convert the string into a tuple of characters\n    # Make this the same as the create_tuple function\n    # It will create a tuple of strings from the given input string\n    # So it will convert the input string to a tuple of strings\n    # And it will return the result of the tuple\n    \n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    try:\n        # Create a tuple from the string\n        tuple1 = tuple(str1)\n        # Return the tuple\n        return tuple1\n    except ValueError:\n        # if string is not a string or a tuple of characters\n        # Return an empty tuple\n        return tuple()\n        \ndef main():\n    # Initialize a list\n    list1 = []\n    # Write a loop that adds each element in the list\n    for i in range(5):\n        # Append the next element\n        list1.append(int(input('Enter element {}: '.format(i+1))))\n    # Print the list\n    print(list1)\n    # Call the function\n    result = string_to_tuple(list1)\n    # Print the result\n    print(result)\n    # Call the function\n    result = tuple_to_string(result)\n    # Print the result\n    print(result)\n    # Call the function\n    result = list_to_tuple(result)\n    # Print the result\n    print(result)\n    \nmain()"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for char in str1:\n        lst.append(char)\n    return tuple(lst)\n    \ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple to a string.\n    '''\n    str1 = \"\"\n    for i in range(len(tuple1)):\n        str1 = str1 + str(tuple1[i])\n    return str1\n    \ndef tuple_to_list(tuple1):\n    '''\n    Write a function to convert a given tuple to a list of tuples.\n    '''\n    lst = []\n    for i in range(len(tuple1)):\n        lst.append(tuple(tuple1[i]))\n    return lst\n    \ndef dict_to_tuple(dict1):\n    '''\n    Write a function to convert a given dictionary to a tuple of dictionary keys.\n    '''\n    lst = []\n    for key in dict1:\n        lst.append(dict1[key])\n    return tuple(lst)\n    \ndef dict_to_list(dict1):\n    '''\n    Write a function to convert a given dictionary to a list of dictionaries.\n    '''\n    lst = []\n    for key in dict1:\n        lst.append(dict1[key])\n    return lst\n    \ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of strings.\n    '''\n    lst = []\n    for char in str1:\n        lst.append(char)\n    return lst\n    \ndef list_to_string(lst):\n    '''\n    Write a function to convert a given list of strings to a string.\n    '''\n    str1 = \"\"\n    for i in range(len(lst)):\n        str1 = str1 + str(lst[i])\n    return str1\n    \ndef list_to_tuple(lst):\n    '''\n    Write a function to convert a given list of strings to a tuple of strings.\n    '''\n    tuple1 = ()\n    for i in range(len(lst)):\n        tuple1 = tuple1 + (lst[i],)\n    return tuple1\n    \ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of strings.\n    '''\n    lst = []\n    for char in str1:\n        lst.append(char)\n    return lst\n    \ndef list_to_string(lst):\n    '''\n    Write a function to convert a given list of strings to a string.\n    '''\n    str1 = \"\"\n    for i in range(len(lst)):\n        str1 = str1 + str(lst[i])\n    return str"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    tuple_ = []\n    \n    #convert string to tuple\n    for char in str1:\n        tuple_ += char\n        \n    return tuple_\n    "
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_ = ()\n    for char in str1:\n        tuple_ += (char,)\n    return tuple_\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    string = str1.lower().split()\n    return tuple(string)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    if n == 0: return 0\n    \n    val = n & (~1) # Get value of current bit\n    \n    if val == 1: return 2 # Assume bit is set.\n    else: \n        val |= 1 # Assume bit is unset.\n        val = val & 1 # and 1\n        if val == 1: return 2\n        else: return 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #Your Code here\n    # create a binary number as a string\n    binary_string = bin(n)\n    # remove the leading 0s\n    binary_string = binary_string.replace(\"0b\", \"\")\n    # replace all the set bit\n    binary_string = binary_string.replace(\"1\", \"0\")\n    binary_string = binary_string.replace(\"2\", \"0\")\n    binary_string = binary_string.replace(\"3\", \"0\")\n    binary_string = binary_string.replace(\"4\", \"0\")\n    binary_string = binary_string.replace(\"5\", \"0\")\n    binary_string = binary_string.replace(\"6\", \"0\")\n    binary_string = binary_string.replace(\"7\", \"0\")\n    binary_string = binary_string.replace(\"8\", \"0\")\n    binary_string = binary_string.replace(\"9\", \"0\")\n    # Now check if the number is odd\n    n_str = int(binary_string, 2)\n    # check if the number is odd\n    if n_str % 2!= 0:\n        # you know it is a set bit\n        # it is set\n        n_str_set = set(bin(n))\n        # and you want to set the rightmost bit of the set bit\n        if n_str_set == set([0]):\n            # set the rightmost bit to be the set bit\n            n_str_set.add(\"1\")\n        else:\n            # set the rightmost bit to be the set bit\n            n_str_set.remove(\"1\")\n        # set the unset bit to be the set bit\n        n_str_set.add(\"0\")\n    # else it is not set bit\n    else:\n        # set the unset bit to be the set bit\n        n_str_set = set(bin(n))\n        # set the unset bit to be the set bit\n        n_str_set.add(\"0\")\n    # return the binary string\n    return(binary_string)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n is None:\n        return\n    if n == 0:\n        return\n    n &= ~1\n    n |= 0\n    n = n & 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # this bit is always set.\n    # leftmost unset bit = 0x00\n    leftmost_unset_bit = 0x00\n    \n    # get the first two bits (1-2) from the n = 0, 1, 2\n    first_two_bits = n & 0x0F\n    # update it with the first two bits\n    n = n >> 12\n    # write it to the leftmost unset bit\n    leftmost_unset_bit = first_two_bits | n\n    return leftmost_unset_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Read the input from the user\n    inp = input(\"Enter the value of the number you want to set the left most unset bit for: \")\n    inp = int(inp)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = n & 0x80\n    n >>= 7\n    return set_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n ^ (1 << n.bit_length() - 1))\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return (n ^ (1 << n.bit_length() - 1))\n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    return (n ^ (1 << (n.bit_length() - 1)))\n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return (n ^ (1 << (n.bit_length() - 1)))\n    \ndef set_left_most_unset_bit_bounds(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n - (1 << n.bit_length() - 1))\n    \ndef set_right_most_unset_bit_bounds(n): \n    '''\n    Write a python function to set the right most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_set_bit_bounds(n): \n    '''\n    Write a python function to set the right most set bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_left_most_unset_bit_bounds(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_set_bit_bounds(n): \n    '''\n    Write a python function to set the right most set bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_left_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n - (1 << n.bit_length() - 1))\n    \ndef set_right_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_set_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most set bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_left_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most unset bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_left_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most unset bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_right_most_set_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most set bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_left_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_right_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_set_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most set bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_left_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most unset bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_left_most_set_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most set bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_set_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most set bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_left_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_right_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most unset bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_right_most_set_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most set bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_left_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_right_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most unset bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_left_most_set_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most set bit bounds.\n    '''\n    return (n - (1 << n.bit_length() - 1))\n    \ndef set_right_most_set_bit_bounds_d(n): \n    '''\n    Write a python function to set the right most set bit bounds.\n    '''\n    return (n + (1 << n.bit_length() - 1))\n    \ndef set_left_most_unset_bit_bounds_d(n): \n    '''\n    Write a python function to set the left most unset bit bounds.\n    '''\n    return (n - (1 << (n.bit_length() - 1)))\n    \ndef set_right_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #logging.info(\"set_left_most_unset_bit(%d) %s\", n, bin(n))\n    if n <= 0: return\n    if n & (n-1) == 0: return\n    if n & 1 == 0: return\n    set_left_most_unset_bit(n >> 1)\n    set_left_most_unset_bit(n >> 0)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n in (0, 1):\n        return n\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    else:\n        return 7\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=r*h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    return 4 * math.pi * (r**2)*(h**2)*(math.cos(2*math.pi*r/h))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4 * math.pi * (math.pow(r,3) * math.pow(h,3) * math.pow(math.pow(r,2) - math.pow(r,3) * math.pow(h,2),2))\ndef volume_quadrilateral(r,h):\n    '''\n    Write a function to find the volume of a quadrilateral.\n    '''\n    return 4 * math.pi * (math.pow(r,2) * math.pow(h,2) * math.pow(r,2) * math.pow(h,2))\ndef volume_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return 4 * math.pi * (math.pow(x1,2) * math.pow(y1,2) * math.pow(x2,2) * math.pow(y2,2))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * (math.pow(r,3))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 4 * math.pi * (math.pow(r,3) * math.pow(h,3))\ndef volume_sphere_with_volume_by_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the cylinder\n    '''\n    return 4 * math.pi * (math.pow(r,3) * math.pow(h,3))\ndef volume_sphere_with_volume_by_cylinder_and_quadrilateral(r,h):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the cylinder and\n    the volume of the quadrilateral\n    '''\n    return 4 * math.pi * (math.pow(r,3) * math.pow(h,3))\ndef volume_sphere_with_volume_by_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the rectangle\n    '''\n    return 4 * math.pi * (math.pow(x1,2) * math.pow(y1,2) * math.pow(x2,2) * math.pow(y2,2))\ndef volume_triangle(a,b):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 4 * math.pi * (math.pow(a,2) * math.pow(b,2))\ndef volume_cube(x):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return 4 * math.pi * (math.pow(x,3))\ndef volume_cube_with_volume_by_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to find the volume of a cube, with the volume of the rectangle and the volume of the cube\n    '''\n    return 4 * math.pi * (math.pow(x1,2) * math.pow(y1,2) * math.pow(x2,2) * math.pow(y2,2))\ndef volume_sphere_with_volume_by_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the cylinder\n    '''\n    return 4 * math.pi * (math.pow(r,3))\ndef volume_cylinder_with_volume_by_quadrilateral(r,h):\n    '''\n    Write a function to find the volume of a cylinder, with the volume of the cylinder and the volume of the quadrilateral\n    '''\n    return 4 * math.pi * (math.pow(r,3) * math.pow(h,3))\ndef volume_sphere_with_volume_by_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the rectangle\n    '''\n    return 4 * math.pi * (math.pow(x1,2) * math.pow(y1,2) * math.pow(x2,2) * math.pow(y2,2))\ndef volume_sphere_with_volume_by_rectangle_and_quadrilateral(x1,y1,x2,y2):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the rectangle, the volume of the quadrilateral and the volume of the rectangle\n    '''\n    return 4 * math.pi * (math.pow(x1,2) * math.pow(y1,2) * math.pow(x2,2) * math.pow(y2,2))\ndef volume_sphere_with_volume_by_rectangle_and_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the rectangle and the volume of the cylinder\n    '''\n    return 4 * math.pi * (math.pow(r,3) * math.pow(h,3))\ndef volume_sphere_with_volume_by_rectangle_and_cylinder_and_quadrilateral(r,h):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the rectangle, the volume of the cylinder, the volume of the quadrilateral and the volume of the rectangle\n    '''\n    return 4 * math.pi * (math.pow(r,3) * math.pow(h,3))\ndef volume_sphere_with_volume_by_rectangle_and_cylinder_and_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to find the volume of a sphere, with the volume of the rectangle, the volume of the cylinder, the volume of the quadrilateral and the volume of the rectangle\n    '''\n    return 4 * math.pi * (math.pow(x1,2) * math.pow(y1,2) * math.pow(x2,2) * math.pow(y2,2))\ndef volume_cylinder_with_volume_by_quadrilateral(r):\n    '''\n    Write a function to find the volume of a cylinder, with the volume of the cylinder and the volume of the quadrilateral\n    '''\n    return 4 * math.pi * (math.pow(r,3))\ndef volume_rectangle_with_volume_by_quadrilateral(x,y,r):\n    '''\n    Write a function to find the volume of a rectangle, with the volume of the rectangle and the volume of the quadrilateral\n    '''\n    return 4 * math.pi * (math.pow(x,2) * math.pow(y,2) * math.pow(r,2))\ndef volume_rectangle_with_volume_by_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to find the volume of a rectangle, with the volume of the rectangle and the volume of the rectangle\n    '''\n    return 4 * math.pi * (math.pow(x1,2) * math.pow(y1,2) * math.pow(x2,2) * math.pow(y2,2))\ndef volume_rectangle_with_volume_by_rectangle_and_quadrilateral(x1,y1,x2,y2):\n    '''\n    Write a function to find the volume of a rectangle, with the volume of the rectangle and the volume of the quadrilateral\n    '''\n    return 4 * math.pi * (math.pow(x1,2) * math.pow(y1,2) * math.pow(x2,2) * math.pow(y2,2))\ndef volume_rectangle_with_volume_by_rectangle_and_cylinder(r,h):\n    '''\n    Write a function to find the volume of a rectangl"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 4*(math.pi)*h**3*math.pi*r**3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r**2) * h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a = math.pi*(r*r)\n    b = 2*(r*r)\n    c = math.pi*(r*(r+h))\n    volume = (math.pi*r**3)*((a**2)*(b**2))\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    # your code goes here\n    return 2*math.pi*math.pow(r,2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    Vc=0\n    p=1\n    V=2\n    h0=1/2\n    v=math.sqrt(1-h*h)\n    while(p<=v):\n        if(math.pow(r,p)*p<=r):\n            Vc+=math.pow(r,p)\n            V=Vc\n            h=h0\n            p+=1\n        else:\n            h=(2*h0*math.pow(r,p)-r)**(-1)\n            h0=h0*p/math.pow(r,p)\n            Vc=math.pow(r,p)*math.pow(r,p)\n            V=Vc\n            p+=1\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # your code here\n    if r>h:\n        return 0\n    else:\n        return (r*h)/math.pi\n    #raise NotImplementedError\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high_power_2 = []\n    for i in range(2,n+1):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            high_power_2.append(i)\n    return high_power_2[-1]\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x*y if (x & y) else x + y, range(1, n))\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    i = 1\n    while n/i <= i:\n        i+=1\n    \n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 8\n    else:\n        return n**2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    for i in range(3, n):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return n * highest_Power_of_2(n // 2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n < 2): \n        return n\n    else: \n        return highest_Power_of_2(n - 2) \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    while n >= i:\n        if n%i == 0:\n            return i\n        i = i+1\n    return None\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def highestPower2(n):\n        for i in range(2, n):\n            if n % i == 0:\n                return n\n        return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 2:\n        return n\n    else:\n        return highest_Power_of_2(n//2) + highest_Power_of_2(n//2)\n        \ndef highest_Power_of_3(n): \n    '''\n    Write a python function to find the highest power of 3 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 3:\n        return n\n    else:\n        return highest_Power_of_3(n//3) + highest_Power_of_3(n//3) + highest_Power_of_3(n//3)\n        \ndef highest_Power_of_4(n): \n    '''\n    Write a python function to find the highest power of 4 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 4:\n        return n\n    else:\n        return highest_Power_of_4(n//4) + highest_Power_of_4(n//4) + highest_Power_of_4(n//4)\n        \ndef highest_Power_of_5(n): \n    '''\n    Write a python function to find the highest power of 5 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 5:\n        return n\n    else:\n        return highest_Power_of_5(n//5) + highest_Power_of_5(n//5) + highest_Power_of_5(n//5)\n        \ndef highest_Power_of_6(n): \n    '''\n    Write a python function to find the highest power of 6 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 6:\n        return n\n    else:\n        return highest_Power_of_6(n//6) + highest_Power_of_6(n//6) + highest_Power_of_6(n//6)\n        \ndef highest_Power_of_7(n): \n    '''\n    Write a python function to find the highest power of 7 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 7:\n        return n\n    else:\n        return highest_Power_of_7(n//7) + highest_Power_of_7(n//7) + highest_Power_of_7(n//7)\n        \ndef highest_Power_of_8(n): \n    '''\n    Write a python function to find the highest power of 8 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 8:\n        return n\n    else:\n        return highest_Power_of_8(n//8) + highest_Power_of_8(n//8) + highest_Power_of_8(n//8)\n        \ndef highest_Power_of_9(n): \n    '''\n    Write a python function to find the highest power of 9 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 9:\n        return n\n    else:\n        return highest_Power_of_9(n//9) + highest_Power_of_9(n//9) + highest_Power_of_9(n//9)\n        \ndef highest_Power_of_10(n): \n    '''\n    Write a python function to find the highest power of 10 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    else:\n        return highest_Power_of_10(n//10) + highest_Power_of_10(n//10) + highest_Power_of_10(n//10)\n        \ndef highest_Power_of_11(n): \n    '''\n    Write a python function to find the highest power of 11 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 11:\n        return n\n    else:\n        return highest_Power_of_11(n//11) + highest_Power_of_11(n//11) + highest_Power_of_11(n//11)\n        \ndef highest_Power_of_12(n): \n    '''\n    Write a python function to find the highest power of 12 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 12:\n        return n\n    else:\n        return highest_Power_of_12(n//12) + highest_Power_of_12(n//12) + highest_Power_of_12(n//12)\n        \ndef highest_Power_of_13(n): \n    '''\n    Write a python function to find the highest power of 13 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 13:\n        return n\n    else:\n        return highest_Power_of_13(n//13) + highest_Power_of_13(n//13) + highest_Power_of_13(n//13)\n        \ndef highest_Power_of_14(n): \n    '''\n    Write a python function to find the highest power of 14 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 14:\n        return n\n    else:\n        return highest_Power_of_14(n//14) + highest_Power_of_14(n//14) + highest_Power_of_14(n//14)\n        \ndef highest_Power_of_15(n): \n    '''\n    Write a python function to find the highest power of 15 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 15:\n        return n\n    else:\n        return highest_Power_of_15(n//15) + highest_Power_of_15(n//15) + highest_Power_of_15(n//15)\n        \ndef highest_Power_of_16(n): \n    '''\n    Write a python function to find the highest power of 16 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 16:\n        return n\n    else:\n        return highest_Power_of_16(n//16) + highest_Power_of_16(n//16) + highest_Power_of_16(n//16)\n        \ndef highest_Power_of_17(n): \n    '''\n    Write a python function to find the highest power of 17 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 17:\n        return n\n    else:\n        return highest_Power_of_17(n//17) + highest_Power_of_17(n//17) + highest_Power_of_17(n//17)\n        \ndef highest_Power_of_18(n): \n    '''\n    Write a python function to find the highest power of 18 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 18:\n        return n\n    else:\n        return highest_Power_of_18(n//18) + highest_Power_of_18(n//18) + highest_Power_of_18(n//18)\n        \ndef highest_Power_of_19(n): \n    '''\n    Write a python function to find the highest power of 19 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n < 19:\n        return n\n    else:\n        return highest_Power_of_19(n//19) + highest_Power_of_19(n//19) + highest_Power_of_19(n//19)\n        \ndef highest_Power_of_20(n): \n    '''\n    Write a python function to find the highest power of 20 that is less than or equal to n.\n    '''\n    i"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = 0\n    \n    for i in range(1,n+1):\n        if i == 1:\n            x = 1\n        else:\n            x = i + 2*x\n            if x >= n:\n                break\n    \n    return x\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 6\n    if n == 5:\n        return 15\n    if n == 6:\n        return 30\n    if n == 7:\n        return 60\n    if n == 8:\n        return 90\n    if n == 9:\n        return 120\n    if n == 10:\n        return 150\n    if n == 11:\n        return 210\n    if n == 12:\n        return 240\n    if n == 13:\n        return 300\n    if n == 14:\n        return 360\n    if n == 15:\n        return 400\n    if n == 16:\n        return 450\n    if n == 17:\n        return 500\n    if n == 18:\n        return 550\n    if n == 19:\n        return 600\n    if n == 20:\n        return 650\n    if n == 21:\n        return 700\n    if n == 22:\n        return 750\n    if n == 23:\n        return 800\n    if n == 24:\n        return 850\n    if n == 25:\n        return 900\n    if n == 26:\n        return 1000\n    if n == 27:\n        return 1050\n    if n == 28:\n        return 1100\n    if n == 29:\n        return 1150\n    if n == 30:\n        return 1200\n    if n == 31:\n        return 1250\n    if n == 32:\n        return 1300\n    if n == 33:\n        return 1350\n    if n == 34:\n        return 1400\n    if n == 35:\n        return 1500\n    if n == 36:\n        return 1500\n    if n == 37:\n        return 1600\n    if n == 38:\n        return 1650\n    if n == 39:\n        return 1700\n    if n == 40:\n        return 1750\n    if n == 41:\n        return 1800\n    if n == 42:\n        return 1850\n    if n == 43:\n        return 1900\n    if n == 44:\n        return 1950\n    if n == 45:\n        return 2000\n    if n == 46:\n        return 2050\n    if n == 47:\n        return 2100\n    if n == 48:\n        return 2200\n    if n == 49:\n        return 2300\n    if n == 50:\n        return 2400\n    if n == 51:\n        return 2500\n    if n == 52:\n        return 2600\n    if n == 53:\n        return 2700\n    if n == 54:\n        return 2800\n    if n == 55:\n        return 2900\n    if n == 56:\n        return 3000\n    if n == 57:\n        return 3100\n    if n == 58:\n        return 3200\n    if n == 59:\n        return 3300\n    if n == 60:\n        return 3400\n    if n == 61:\n        return 3500\n    if n == 62:\n        return 3600\n    if n == 63:\n        return 3700\n    if n == 64:\n        return 3800\n    if n == 65:\n        return 3900\n    if n == 66:\n        return 4000\n    if n == 67:\n        return 4100\n    if n == 68:\n        return 4200\n    if n == 69:\n        return 4300\n    if n == 70:\n        return 4400\n    if n == 71:\n        return 4600\n    if n == 72:\n        return 4800\n    if n == 73:\n        return 4900\n    if n == 74:\n        return 5000\n    if n == 75:\n        return 5050\n    if n == 76:\n        return 5100\n    if n == 77:\n        return 5200\n    if n == 78:\n        return 5400\n    if n == 79:\n        return 5600\n    if n == 80:\n        return 5700\n    if n == 81:\n        return 5800\n    if n == 82:\n        return 5900\n    if n == 83:\n        return 6000\n    if n == 84:\n        return 6050\n    if n == 85:\n        return 6100\n    if n == 86:\n        return 6200\n    if n == 87:\n        return 6300\n    if n == 88:\n        return 6400\n    if n == 89:\n        return 6500\n    if n == 90:\n        return 7000\n    if n == 91:\n        return 7100\n    if n == 92:\n        return 7200\n    if n == 93:\n        return 7300\n    if n == 94:\n        return 7400\n    if n == 95:\n        return 7450\n    if n == 96:\n        return 7500\n    if n == 97:\n        return 7550\n    if n == 98:\n        return 7600\n    if n == 99:\n        return 7600\n    if n == 100:\n        return 7750\n    if n == 101:\n        return 7800\n    if n == 102:\n        return 7800\n    if n == 103:\n        return 7950\n    if n == 104:\n        return 8000\n    if n == 105:\n        return 8050\n    if n == 106:\n        return 8100\n    if n == 107:\n        return 8200\n    if n == 108:\n        return 8300\n    if n == 109:\n        return 8350\n    if n == 110:\n        return 8400\n    if n == 111:\n        return 8450\n    if n == 112:\n        return 8550\n    if n == 113:\n        return 8650\n    if n == 114:\n        return 8750\n    if n == 115:\n        return 8800\n    if n == 116:\n        return 8850\n    if n == 117:\n        return 8950\n    if n == 118:\n        return 9000\n    if n == 119:\n        return 9100\n    if n == 120:\n        return 9200\n    if n == 121:\n        return 9300\n    if n == 122:\n        return 9400\n    if n == 123:\n        return 9500\n    if n == 124:\n        return 9600\n    if n == 125:\n        return 9650\n    if n == 126:\n        return 9750\n    if n == 127:\n        return 9850\n    if n == 128:\n        return 9950\n    if n == 129:\n        return 10050\n    if n == 130:\n        return 10200\n    if n == 131:\n        return 10300\n    if n == 132:\n        return 10400\n    if n == 133:\n        return 10500\n    if n == 134:\n        return 10600\n    if n == 135:\n        return 10750\n    if n == 136:\n        return 10750\n    if n == 137:\n        return 10850\n    if n == 138:\n        return 10950\n    if n == 139:\n        return 11000\n    if n == 140:\n        return 11100\n    if n == 141:\n        return 11100\n    if n == 142:\n        return 11250\n    if n == 143:\n        return 11350\n    if n == 144:\n        return 11500\n    if n == 145:\n        return 11750\n    if n == 146:\n        return 11850\n    if n == 147:\n        return 11900\n    if n == 148:\n        return 11950\n    if n == 149:\n        return 12050\n    if n == 150:\n        return 12100\n    if n == 151:\n        return 12200\n    if n == 152:\n        return 12300\n    if n == 153:\n        return 12350\n    if n == 154:\n        return 12450\n    if n == 155:\n        return 12550\n    if n == 156:\n        return 12650\n    if n == 157:\n        return 12750\n    if n == 158:\n        return 12850\n    if n == 159:\n        return 12950\n    if n == 160:\n        return 13050\n    if n == 161:\n        return 13100\n    if n == 162:\n        return 13200\n    if n == 163:\n        return 13300\n    if n == 164:\n        return 13350\n    if n == 165:\n        return 13450\n    if n == 166:\n        return 13550\n    if n == 167:\n        return 13650\n    if n == 168:\n        return 13750\n    if n == 169:\n        return 13850\n    if n == 170:\n        return 13950\n    if n == 171:\n        return 14050\n    if n == 172:\n        return 14200\n    i"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_number = (1 + (2*n)) % 27\n    return lucas_number\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #a = [0,1,2,3,4,5,6]\n    # b = [0,2,4,6,8,10,12]\n    # c = [1,3,5,7,9,11]\n    # d = [2,4,6,8,10,12,14]\n    #\n    # result = 0\n    # for i in range(1, n+1):\n    #     for j in range(1, n+1):\n    #         result += a[i-1] * b[i-1] * c[i-1] * d[i-1]\n    # return result\n    \n    '''\n    [0, 1, 2, 3, 4, 5, 6]\n    [0, 2, 4, 6, 8, 10, 12]\n    [1, 3, 5, 7, 9, 11]\n    [2, 4, 6, 8, 10, 12, 14]\n    '''\n    \n    a = [0, 1, 2, 3, 4, 5, 6]\n    b = [0, 2, 4, 6, 8, 10, 12]\n    c = [1, 3, 5, 7, 9, 11]\n    d = [2, 4, 6, 8, 10, 12, 14]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    print(n)\n    if n == 1: \n        return 1 \n    if n == 2: \n        return 3 \n    if n == 3: \n        return 5 \n    else:\n        return find_lucas(n - 2) + find_lucas(n - 3) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 2 or n == 3:\n        return 2\n    elif n == 1:\n        return 0\n    elif n == 0:\n        return 1\n    elif n < 0:\n        return -1\n    else:\n        lucas = find_lucas(n-1)\n        if n >= lucas:\n            return n\n        else:\n            return lucas + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string.replace(\"{\", \"\").replace(\"}\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"(\", \"\").replace(\",\", \"\").replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\")\n    print(\"{}\".format(string))\n    for element in list_:\n        element.append(string)\n        "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    # convert string to list\n    list_ = list(string.split())\n    \n    # concatinate each string with '''\n    #     '''\n    #     ''.join()\n    #     '''\n    #     for element in list_:\n    #         element = string.join(element)\n    #         list_.append(element)\n    #     \n    #     # remove whitespace from list\n    #     list_ = list(map(lambda x: x.strip(), list_))\n    #     \n    #     # convert string back to list\n    #     list_ = list(map(lambda x: x.split(), list_))\n    \n    #     return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for elem in list_:\n        if type(elem) == str:\n            list_[list_.index(elem)] = string.format(elem)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    def transform(s):\n        if s == '{':\n            return '{'\n        elif s == '}':\n            return '}'\n        elif s == ',':\n            return ','\n        elif s =='':\n            return''\n        elif s == '\\n':\n            return '\\n'\n        else:\n            return s\n    for i in list_:\n        print(i, transform(i))\n    \n    \n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(string)\n    for index, item in enumerate(list_):\n        list_[index] = list_(item)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print(item)\n        list_[list_.index(item)] = string % item\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        if type(element) == str:\n            new_list.append(element.format(string))\n        else:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        item.replace(string, '')\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(list_)\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    try:\n        result = []\n        for el in list_:\n            result.append(el.format(string))\n        return result\n    except TypeError:\n        print(f'Error: Format string {string} does not match list type')\n    except AttributeError:\n        print(f'Error: Format string {string} does not match list type')\n    except IndexError:\n        print(f'Error: Format string {string} does not match list type')\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in l1:\n        result[i] = []\n        for j in l2:\n            result[i].append(j)\n    for i in l3:\n        result[i] = {}\n        for j in l2:\n            result[i][j] = []\n            for k in l3:\n                result[i][j].append(k)\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # -------------------------------\n    # NOTE: If you make a dictionary and want it to be nested as\n    #       a tuple, you can use the\n    #       collections.namedtuple function\n    # -------------------------------\n    d1 = {}\n    for l in range(len(l1)):\n        d1[l1[l]] = l2[l]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in l3:\n        if type(i) is dict:\n            l3[i] = dict(convert_list_dictionary(i['l1'], i['l2'], i['l3']))\n        else:\n            l3[i] = l3[i]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Write your code here.\n    d1 = {}\n    if len(l1) == len(l2):\n        for i in range(len(l1)):\n            d1[l1[i]] = l2[i]\n    elif len(l1) == len(l3):\n        for i in range(len(l2)):\n            d1[l3[i]] = l1[i]\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    if len(l1) == len(l2):\n        for i in range(len(l1)):\n            if l1[i] not in result.keys():\n                result[l1[i]] = []\n            for j in range(len(l2)):\n                if l2[j] not in result[l1[i]].keys():\n                    result[l1[i]][l2[j]] = []\n                for k in range(len(l3)):\n                    if l3[k] not in result[l1[i]][l2[j]].keys():\n                        result[l1[i]][l2[j]][l3[k]] = []\n                    result[l1[i]][l2[j]][l3[k]].append(l1[i][j][k])\n        return result\n    else:\n        raise ValueError(\"Error! \\nEach list contains different elements\")\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    print(l1)\n    d1 = {}\n    for item in l1:\n        if(type(item) is list):\n            d1[item[0]] = convert_list_dictionary(item[1], l2, l3)\n        else:\n            d1[item[0]] = item\n    return d1\n    \n    \n    \n    \ndef convert_list_dictionary_2(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    print(l1)\n    d1 = {}\n    for item in l1:\n        if(type(item) is list):\n            d1[item[0]] = convert_list_dictionary_2(item[1], l2, l3)\n        else:\n            d1[item[0]] = item\n    return d1\n    \n    \n    \n    \n    \ndef main():\n    l1 = [1, 2, 3, 4, 5]\n    l2 = ['a', 'b', 'c']\n    l3 = ['d', 'e']\n    print(convert_list_dictionary(l1, l2, l3))\n    print(convert_list_dictionary_2(l1, l2, l3))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in l1:\n        my_dict[i] = convert_list_dictionary(l2, l3, l1)\n    return my_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1[i] = convert_list_dictionary(l2, l3, i)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sum_ = 0\n    for i in range(1, n + 1):\n        sum_ += (f(i) + f(n - i) + f(n - i - 2))\n    return sum_\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    MAX = 0\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            MAX = max(MAX, f(i) + n/i)\n    return MAX\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n<=1:\n        return n\n    else:\n        return get_max_sum(n/3) + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n <= 0):\n        print ('Invalid input')\n    elif n == 1:\n        return n\n    elif n == 2:\n        return n * (n + 1)\n    elif n == 3:\n        return n * (n * (n + 1) + 1)\n    else:\n        return n * (n * (n * (n + 1) + 1) + 1) + n * (n * (n * (n * (n + 1) + 1) + 1) + 1)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 2\n    elif n == 6:\n        return 4\n    elif n == 7:\n        return 4\n    else:\n        return 5\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = 0\n    b = 0\n    for i in range (1, n+1):\n        a += i\n        b += i * i\n    if (b > a):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n    "
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return f(n/2) + n\n        elif n % 3 == 0:\n            return f(n/3) + f(n/3) + f(n/3) + n\n        elif n % 4 == 0:\n            return f(n/4) + f(n/4) + f(n/4) + f(n/4) + n\n        else:\n            return f(n/5) + f(n/5) + f(n/5) + f(n/5) + f(n/5) + n\n    \n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    s = 0\n    for i in range (0, n):\n        s = s + f(i)\n    return s\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    print(\"Enter the upper limit of the square:\")\n    n = int(input())\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(list(map(len, input_list)))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for i in input_list:\n        length_list.append(len(i))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for value in input_list:\n        if len(value) > max_length:\n            max_length = len(value)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for i in input_list:\n        if i > max_length:\n            max_length = i\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) <= 0:\n        return None\n    return max(input_list, key = len)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set object\n    distinct = set()\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    output = []\n    if not test_tup:\n        return False\n    elif len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = list(test_tup)\n    for i in test_tup:\n        if test_tup.count(i)>1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    temp = [tuple(set(tup)) for tup in test_tup]\n    return len(set(temp)) == len(temp)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i)!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # your code here\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        test_tup_num = test_tup[i][0]\n        if test_tup_num == test_tup[i][0] and test_tup[i][1]!= test_tup[i][2]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0] in test_tup[1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # your code goes here\n    return ''.join(sorted(set(str1), key=str.lower))\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    res = ''\n    for i in str1:\n        if i!= res:\n            res = i\n    return res\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    else:\n        lst = []\n        for i in range(len(str1)):\n            if str1[i] not in lst:\n                lst.append(str1[i])\n        return lst[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_counter = {}\n    for i in range(len(str1)):\n        if str1[i] in char_counter:\n            char_counter[str1[i]] += 1\n        else:\n            char_counter[str1[i]] = 1\n    return char_counter[max(char_counter, key=char_counter.get)]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1.split(maxsplit=1)[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Let's create a counter dict for the string\n    counter = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # add your code here\n    lst = []\n    for i in range(len(str1)):\n        if str1[i] not in lst:\n            lst.append(str1[i])\n    print(lst)\n    return(str1[0])\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # empty list of characters\n    char_list = []\n    for char in str1:\n        if char not in char_list:\n            char_list.append(char)\n    # print(char_list)\n    # iterate through the list to check for the first non-repeating character\n    for char in char_list:\n        if char_list.count(char) > 1:\n            return char\n    # if there is no duplicate characters return the first one\n    return char_list[0]"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0 or len(string) > 3:\n        return False\n    else:\n        if not (string[0] in string[1]):\n            return False\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string, re.MULTILINE)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return False\n    for i in range(len(string)):\n        if string[i] not in string[i:]:\n            return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = re.compile(regex)\n    match = regex.search(string)\n    if match is not None:\n        return match.group()\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string:\n        return False\n    \n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n    \ndef check_name(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same first and last name or not.\n    '''\n    if not string:\n        return False\n    \n    name = re.search(r'[a-z]{3}[a-z]{3}', string)\n    if not name:\n        return False\n    \n    return True\n    \ndef check_email(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same first and last email or not.\n    '''\n    if not string:\n        return False\n    \n    email = re.search(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', string)\n    if not email:\n        return False\n    \n    return True\n    \ndef check_digit(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same number or not.\n    '''\n    if not string:\n        return False\n    \n    digit = re.search(r'[0-9]', string)\n    if not digit:\n        return False\n    \n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 1: \n        return False\n    if len(string) > 64:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\ndef check_digits(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same number or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string): \n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    string_reverse = ''\n    for i in range(len(string)):\n        string_reverse = string_reverse + string[i]\n    return string_reverse == string\ndef contains_punctuation(string):\n    '''\n    Write a function to check whether the given string contains any punctuation marks.\n    '''\n    return re.match(regex, string)!= None\ndef is_number(string):\n    '''\n    Write a function to check whether the given string is a number or not.\n    '''\n    return re.match(regex, string)!= None\ndef is_word(string):\n    '''\n    Write a function to check whether the given string is a word or not.\n    '''\n    return re.match(regex, string)!= None\ndef is_letter(string):\n    '''\n    Write a function to check whether the given string is a letter or not.\n    '''\n    return re.match(regex, string)!= None\ndef is_symbol(string):\n    '''\n    Write a function to check whether the given string is a symbol or not.\n    '''\n    return re.match(regex, string)!= None\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check whether the given strings are anagrams or not.\n    '''\n    return sorted(string1) == sorted(string2)\ndef is_valid_transcription(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        if not is_word(word) and not is_symbol(word):\n            return False\n    return True\ndef is_valid_transcription_lowcase(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        # if word is a symbol\n        if is_symbol(word):\n            # get all the upper and lower cases of the word\n            word_upper = word.upper()\n            # check the characters are not repeating\n            for char in word:\n                if not char.isupper():\n                    return False\n            return True\n        # if word is a word\n        elif is_word(word):\n            # if the word is not a capital letter\n            if not word.isupper():\n                return False\n            # check each upper and lower case word\n            for i in range(len(word)):\n                # get the characters of the word\n                char = word[i]\n                # if the upper and lower case characters are not the same\n                if not check_char(word_upper[i]) and not check_char(char):\n                    return False\n            return True\n        # if word is a digit\n        elif is_digit(word):\n            if not check_digits(word):\n                return False\n    return True\ndef is_valid_transcription_uppercase(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        # if word is a symbol\n        if is_symbol(word):\n            # get all the upper and lower case of the word\n            word_uppercase = word.upper()\n            # check the characters are not repeating\n            for char in word:\n                if not char.isupper():\n                    return False\n            return True\n        # if word is a word\n        elif is_word(word):\n            # if the word is not a capital letter\n            if not word.isupper():\n                return False\n            # check each upper and lower case word\n            for i in range(len(word)):\n                # get the characters of the word\n                char = word[i]\n                # if the upper and lower case characters are not the same\n                if not check_char(word_uppercase[i]) and not check_char(char):\n                    return False\n            return True\n        # if word is a digit\n        elif is_digit(word):\n            if not check_digits(word):\n                return False\n    return True\ndef is_valid_transcription_vowel(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        # if the word is not a vowel\n        if not word.isupper():\n            return False\n    return True\ndef is_valid_transcription_consonant(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        # if the word is not a vowel\n        if not word.isupper():\n            return False\n    return True\ndef is_valid_transcription_consonant_vowel(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        # if the word is a vowel\n        if word.isupper():\n            # if the word is not a consonant\n            if not word.lower() in ['a', 'e', 'i', 'o', 'u']:\n                return False\n    return True\ndef is_valid_transcription_consonant_vowel_vowel(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        # if the word is a consonant\n        if word.isupper():\n            # if the word is not a vowel\n            if not word.lower() in ['a', 'e', 'i', 'o', 'u']:\n                return False\n        # if the word is a vowel\n        elif word.isupper():\n            # if the word is not a consonant\n            if not word.lower() in ['a', 'e', 'i', 'o', 'u']:\n                return False\n    return True\ndef is_valid_transcription_vowel_vowel(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        # if the word is a vowel\n        if word.isupper():\n            # if the word is not a vowel\n            if not word.lower() in ['a', 'e', 'i', 'o', 'u']:\n                return False\n        # if the word is a consonant\n        elif word.isupper():\n            # if the word is not a vowel\n            if not word.lower() in ['a', 'e', 'i', 'o', 'u']:\n                return False\n    return True\ndef is_valid_transcription_consonant_vowel_vowel(transcription):\n    '''\n    Write a function to check whether the given transcription is valid or not.\n    '''\n    # split transcription into words\n    words = transcription.split(' ')\n    # check each word\n    for word in words:\n        # if the word is a vowel\n        if word.isupper():\n            "
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1] and string[0]!= string[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median_num = (a+b+c)//3\n    return median_num\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) < 3 or len(b) < 3 or len(c) < 3:\n        return None\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)>=3:\n        if len(b)>=3:\n            if len(c)>=3:\n                median = (a+b+c)/3\n                return(median)\n            else:\n                median = (a+b+c)/3\n                return(median)\n        else:\n            return(a)\n    else:\n        return(a)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b and b < c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        median = a\n    elif b>a and b>c:\n        median = b\n    else:\n        median = c\n    \n    #print(\"Median is: {}\".format(median))\n    \n    return median\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        a,b,c = b,a,c\n    s = a+b+c\n    if s%2 == 0:\n        return (a+b+c)//2\n    else:\n        return a+b+c//2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Find the middle element\n    m = len(a) // 2\n    # Find the low and high index\n    l = m - 1\n    h = m + 1\n    # Initialize the median values\n    low = a[0]\n    high = a[m]\n    mid = b[0]\n    # Compare the low and high index\n    while l >= 0 and h <= len(b):\n        # If current value is smaller than the median, update\n        if a[l] < high and b[h] < mid:\n            low = a[l]\n            l -= 1\n        # If current value is greater than the median, update\n        elif a[l] > high and b[h] > mid:\n            high = a[h]\n            h -= 1\n        # If current value is same as the median, save the middle value\n        elif a[l] == high and b[h] == mid:\n            mid = a[l]\n            l -= 1\n    # Return the median value\n    return [mid,low,high]"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (b - a) % 2 == 0:\n        # print(a, b, c)\n        return (a + b + c) / 3\n    else:\n        return ((a + b + c) + a) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif b > a and b > c:\n        return b\n    elif c > a and c > b:\n        return c\n    else:\n        return a+b+c\n    \ndef mean_numbers(a,b,c):\n    '''\n    Write a function to find the mean of three numbers.\n    '''\n    return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==1 or len(b)==1 or len(c)==1:\n        return (a[0]+b[0]+c[0])/3\n    else:\n        arr = []\n        for i in range(len(a)):\n            arr.append(a[i]+b[i]+c[i])\n        arr.sort()\n        return arr[len(arr)//2]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for number in nums:\n        result += int(number)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for x in nums:\n        sum += x\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(sum(nums))]"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Here we create a dictionary with each number as its key.\n    # Each number in the list contains the sum of its digits.\n    # The function will return the sum of digits of each number.\n    # If the sum of digits of a number is less than the sum of digits of the number in the list, we will return the number itself.\n    # Here we use a map function to put each number into a list\n    # and we call the function to compute the sum of digits of the number in the list.\n    # We return the sum of digits of the number.\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for x in nums:\n        total += x\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += int(num)\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result\n    "
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = {}\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError('The length of test_tup1 and test_tup2 must be the same.')\n    for key in test_tup1:\n        result[key] = (test_tup1[key] ^ test_tup2[key])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += test_tup1[i] ^ test_tup2[i]\n    return result_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1], test_tup1[2] ^ test_tup2[2], test_tup1[3] ^ test_tup2[3]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        raise TypeError(\"Test1 must be a tuple\")\n    if type(test_tup2)!= tuple:\n        raise TypeError(\"Test2 must be a tuple\")\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The lenghts of the test tuples must match\")\n    if type(test_tup1[0])!= int or type(test_tup2[0])!= int:\n        raise ValueError(\"The first element of the test tuple must be an integer\")\n    if not ((1 <= test_tup1[0] <= 2 ** 32 - 1 and 1 <= test_tup2[0] <= 2 ** 32 - 1):\n        raise ValueError(\"Test 1 out of bounds\")\n    if not ((type(test_tup1[1]) == list) or (type(test_tup2[1]) == list)):\n        raise ValueError(\"Test2 must be a list\")\n    if not ((type(test_tup1[2]) == int) or (type(test_tup2[2]) == int)):\n        raise ValueError(\"Test2 must be an integer\")\n    if test_tup1[2] > test_tup2[2]:\n        raise ValueError(\"Test2 must be less than or equal to the first number\")\n    if test_tup2[2] > test_tup1[2]:\n        raise ValueError(\"Test2 must be less than or equal to the second number\")\n    if test_tup1[2] <= test_tup2[2]:\n        raise ValueError(\"Test2 must be greater than or equal to the second number\")\n    if test_tup2[1][0] > test_tup1[1][0]:\n        raise ValueError(\"Test 1 must be less than or equal to the first number\")\n    if test_tup1[1][0] > test_tup2[1][0]:\n        raise ValueError(\"Test 1 must be less than or equal to the second number\")\n    if test_tup1[1][0] <= test_tup2[1][0]:\n        raise ValueError(\"Test 1 must be greater than or equal to the first number\")\n    if test_tup2[1][1] > test_tup1[1][1]:\n        raise ValueError(\"Test 2 must be less than or equal to the second number\")\n    if test_tup1[1][1] > test_tup2[1][1]:\n        raise ValueError(\"Test 1 must be less than or equal to the second number\")\n    if test_tup1[1][1] <= test_tup2[1][1]:\n        raise ValueError(\"Test 1 must be greater than or equal to the second number\")\n    if test_tup2[1][0] <= test_tup1[1][0]:\n        raise ValueError(\"Test 1 must be less than or equal to the first number\")\n    if test_tup1[1][0] <= test_tup2[1][0]:\n        raise ValueError(\"Test 1 must be less than or equal to the second number\")\n    if test_tup2[1][0] >= test_tup1[1][0]:\n        raise ValueError(\"Test 1 must be greater than or equal to the first number\")\n    if test_tup1[1][1] >= test_tup2[1][1]:\n        raise ValueError(\"Test 2 must be less than or equal to the second number\")\n    if test_tup1[1][1] >= test_tup2[1][1]:\n        raise ValueError(\"Test 1 must be greater than or equal to the second number\")\n    if test_tup1[1][1] <= test_tup2[1][1]:\n        raise ValueError(\"Test 1 must be greater than or equal to the second number\")\n    if test_tup2[0] > test_tup1[0]:\n        raise ValueError(\"Test 1 must be less than or equal to the first number\")\n    if test_tup2[0] > test_tup1[0]:\n        raise ValueError(\"Test 1 must be less than or equal to the second number\")\n    if test_tup1[0] > test_tup2[0]:\n        raise ValueError(\"Test 1 must be less than or equal to the first number\")\n    if test_tup1[0] <= test_tup2[0]:\n        raise ValueError(\"Test 1 must be greater than or equal to the first number\")\n    if test_tup2[0] <= test_tup1[0]:\n        raise ValueError(\"Test 1 must be greater than or equal to the second number\")\n    if test_tup1[0] >= test_tup2[0]:\n        raise ValueError(\"Test 1 must be greater than or equal to the first number\")\n    if test_tup2[0] >= test_tup1[0]:\n        raise ValueError(\"Test 1 must be greater than or equal to the second number\")\n    if test_tup1[1][0] > test_tup2[1][0]:\n        raise ValueError(\"Test 2 must be less than or equal to the first number\")\n    if test_tup1[1][0] > test_tup2[1][0]:\n        raise ValueError(\"Test 2 must be less than or equal to the second number\")\n    if test_tup1[1][0] <= test_tup2[1][0]:\n        raise ValueError(\"Test 2 must be greater than or equal to the first number\")\n    if test_tup1[1][0] <= test_tup2[1][0]:\n        raise ValueError(\"Test 2 must be greater than or equal to the second number\")\n    if test_tup1[1][1] > test_tup2[1][1]:\n        raise ValueError(\"Test 3 must be less than or equal to the first number\")\n    if test_tup1[1][1] > test_tup2[1][1]:\n        raise ValueError(\"Test 3 must be less than or equal to the second number\")\n    if test_tup1[1][1] <= test_tup2[1][1]:\n        raise ValueError(\"Test 3 must be greater than or equal to the second number\")\n    if test_tup2[1][0] <= test_tup1[1][0]:\n        raise ValueError(\"Test 3 must be less than or equal to the first number\")\n    if test_tup1[1][0] <= test_tup2[1][0]:\n        raise ValueError(\"Test 3 must be less than or equal to the second number\")\n    if test_tup1[1][0] >= test_tup2[1][0]:\n        raise ValueError(\"Test 3 must be greater than or equal to the first number\")\n    if test_tup1[1][1] >= test_tup2[1][1]:\n        raise ValueError(\"Test 3 must be less than or equal to the second number\")\n    if test_tup1[1][1] >= test_tup2[1][1]:\n        raise ValueError(\"Test 3 must be less than or equal to the second number\")\n    if test_tup2[0] > test_tup1[0]:\n        raise ValueError(\"Test 3 must be less than or equal to the first number\")\n    if test_tup2[0] > test_tup1[0]:\n        raise ValueError(\"Test 3 must be less than or equal to the second number\")\n    if test_tup1[0] > test_tup2[0]:\n        raise ValueError(\"Test 3 must be less than or equal to the first number\")\n    if test_tup1[0] >= test_tup2[0]:\n        raise ValueError(\"Test 3 must be greater than or equal to the first number\")\n    if test_tup2[0] >= test_tup1[0]:\n        raise ValueError(\"Test 3 must be greater than or equal to the second number\")\n    if test_tup1[1][0] < test_tup2[1][0]:\n        raise ValueError(\"Test 4 must be less than or equal to the first number\")\n    if test_tup1[1][0] < test_tup2[1][0]:\n        raise ValueError(\"Test 4 must be less than or equal to the second number\")\n    if test_tup1[1][0] <"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tuple = ()\n    for i in range(len(test_tup1)):\n        bitwise_xor_tuple = bitwise_xor_tuple + (test_tup1[i] ^ test_tup2[i])\n    return bitwise_xor_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for index in range(len(test_tup1)):\n        if test_tup1[index] == test_tup2[index]:\n            xor_result = xor_result ^ 1\n        else:\n            xor_result = xor_result ^ 0\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return tuple(list(map(lambda x: x ^ test_tup2[0] ^ test_tup1[0], test_tup2)))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    freq = 0\n    while i < len(test_list):\n        if test_list[i] == test_list[j]:\n            j += 1\n            i += 1\n            freq += 1\n        else:\n            i += 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # you may use itertools.groupby to get the tuples in a group.\n    return sum(1 for x in test_list if x)\n    # you may use itertools.groupby to get the tuples in a group.\n    # you should use itertools.groupby()\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = Counter(test_list)\n    return unique_tuple[0]\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for t in test_list:\n        count = 0\n        for x in t:\n            if x == 1:\n                count += 1\n        freq_dict[t[0]] = count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    count = 0\n    for items in test_list:\n        if items in freq:\n            freq[items] += 1\n        else:\n            freq[items] = 1\n        count += 1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count=0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][1]==test_list[j][1]:\n                count+=1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(test_list))\n    return test_list.count(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    test_list.sort()\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    freq = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in freq:\n                freq[test_list[i]] += 1\n            else:\n                freq[test_list[i]] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Write your code here.\n    count = 0\n    for i in range(len(test_list)):\n        if(len(set(test_list[i])) == len(test_list[i])):\n            count += 1\n    return count\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create a tuple to store the tuples\n    a = ()\n    # create a tuple to store the tuples\n    b = ()\n    # create a counter\n    i = 0\n    # iterate through the numbers in test_tup1\n    for n in test_tup1:\n        # iterate through the numbers in test_tup2\n        for m in test_tup2[i]:\n            # add the tuple to a tuple\n            a = a + (n, m)\n        # increment the counter\n        i += 1\n    return a\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def __add__(self, other):\n        return self.tuple_list + other.tuple_list\n    return self.__add__\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = []\n    for x in test_tup1:\n        for y in test_tup2:\n            test_tup3.append((x,y))\n    return tuple(test_tup3)\n    \ndef test_add_nested_tuples():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_tuple():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6)\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_list():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = [1,2,3]\n    test_tup2 = [4,5,6]\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_dict():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_set():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_frozenset():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_set_frozenset():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_frozenset_frozenset():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_frozenset_frozenset():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_frozenset_set():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_frozenset_set_frozenset():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_frozenset_set_set():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2)\n    print(result)\n    print(type(result))\n    \ndef test_add_nested_tuples_frozenset_set_frozenset():\n    '''\n    Test that the add_nested_tuples function works as intended. \n    '''\n    test_tup1 = {'one': 1,'two': 2}\n    test_tup2 = {'three': 3,'four': 4,'five': 5}\n    result = add_nested_tuples(test_tup1, test_tup2"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Your code here\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert len(test_tup1)==len(test_tup2), \"Length of both tuples must be same\"\n    for i in range(0, len(test_tup1)):\n        if type(test_tup1[i])!= tuple and type(test_tup2[i])!= tuple:\n            raise TypeError(\"Type of tuple can only be tupples and not lists\")\n        elif type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            test_tup1[i] = tuple(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            raise TypeError(\"Type of tuple can only be tupples and not lists\")\n    return test_tup1\n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Take two tuples from user\n    # Extract index of the tuple\n    # Add tuple elements to a new tuple and return the new tuple\n    # Elements should be in tuples\n    # Tuple should be a tuple and not a list\n    # Index of the tuple is an int and not a tuple\n    # Index of the tuple is an int and not a list\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    \n    # Dictionaries for storing values\n    value1 = {}\n    value2 = {}\n    \n    # Define the for loop to iterate through each element of the given tuples\n    # If the tuple is not a loop then add it to value1 dict (key value)\n    # If it is a loop then add it to value2 dict (key value)\n    # Else both value dicts are equivalent\n    for i in test_tup1:\n        if type(i) == type(1):\n            value1[i] = test_tup1[i]\n        elif type(i) == type(2):\n            value2[i] = test_tup2[i]\n        else:\n            print(type(i))\n    # Return both dictionaries\n    return (value1, value2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    index = 0\n    result = 0\n    for index, value in enumerate(test_tup1):\n        if index == 0:\n            result += value\n        else:\n            result += value * test_tup2[index - 1]\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup1.insert(0,0)\n    test_tup2 = list(test_tup2)\n    test_tup2.insert(0,0)\n    return tuple(test_tup1 + test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if test_tup1 is None:\n        test_tup1 = []\n    if test_tup2 is None:\n        test_tup2 = []\n    tup_list = test_tup1 + test_tup2\n    return tup_list"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=0\n    for i in range(len(a)-1):\n        for j in range(len(b)-1):\n            if(a[i]<b[j]):\n                minimum=a[i]\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        smaller = a\n    else:\n        smaller = b\n    \n    for i in range(1,smaller+1):\n        if a%i == 0 and b%i == 0:\n            if a > b:\n                smaller = i\n            else:\n                break\n    return smaller\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    while(a>0):\n        r=a%10\n        a=a//10\n        if r==b:\n            return r\n    return 0\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        small = a\n        big = b\n    else:\n        small = b\n        big = a\n    for i in range(0,big+1):\n        if a>i:\n            print(i,end=' ')\n    print(small)\n    for i in range(0,big+1):\n        if b>i:\n            print(i,end=' ')\n    print(small)\n    \nminimum(3,7)\nminimum(5,2)\nminimum(11,10)"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return a\n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a > b:\n        return b\n    elif a < b:\n        return a\n    else:\n        return a\n    \n    \ndef main():\n    print(\"Select operation.\")\n    print(\"1.Add\")\n    print(\"2.Subtract\")\n    print(\"3.Multiply\")\n    print(\"4.Divide\")\n    \n    choice = input(\"Enter choice(1/2/3/4): \")\n    if choice == '1':\n        num1 = int(input(\"Enter first number: \"))\n        num2 = int(input(\"Enter second number: \"))\n        answer = add(num1,num2)\n        print(\"Addition of\",num1,\"and\",num2,\"is\",answer)\n    elif choice == '2':\n        num1 = int(input(\"Enter first number: \"))\n        num2 = int(input(\"Enter second number: \"))\n        answer = subtract(num1,num2)\n        print(\"Subtraction of\",num1,\"and\",num2,\"is\",answer)\n    elif choice == '3':\n        num1 = int(input(\"Enter first number: \"))\n        num2 = int(input(\"Enter second number: \"))\n        answer = multiply(num1,num2)\n        print(\"Multiplication of\",num1,\"and\",num2,\"is\",answer)\n    elif choice == '4':\n        num1 = int(input(\"Enter first number: \"))\n        num2 = int(input(\"Enter second number: \"))\n        answer = divide(num1,num2)\n        print(\"Division of\",num1,\"and\",num2,\"is\",answer)\n    else:\n        print(\"Invalid input\")\n        \n        \ndef add(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    \n    c = a + b\n    print(\"The sum is\",c)\n    return c\n    \n    \ndef subtract(a,b):\n    '''\n    Write a python function to find the difference of two numbers.\n    '''\n    \n    d = a - b\n    print(\"The difference is\",d)\n    return d\n    \n    \ndef multiply(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    \n    e = a * b\n    print(\"The product is\",e)\n    return e\n    \n    \ndef divide(a,b):\n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    \n    f = a / b\n    print(\"The quotient is\",f)\n    return f\n    \n    \nmain("
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # YOUR CODE HERE\n    min = a if a<b else b\n    return min\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 2:\n        return True\n    else:\n        for i in tuplex:\n            if i == tuple1:\n                return True\n    return False\ndef read_data():\n    '''\n    Read the data from the user from the user input.\n    '''\n    tuplex = []\n    while True:\n        try:\n            name = input(\"Enter your name: \")\n            age = int(input(\"Enter your age: \"))\n            pin = int(input(\"Enter your pin: \"))\n            pincode = int(input(\"Enter your pincode: \"))\n            p_zip = int(input(\"Enter your zipcode: \"))\n            tuplex.append([name,age,pin,pincode,p_zip])\n            break\n        except:\n            print(\"Please enter numbers only!\")\n    return tuplex\ndef main():\n    '''\n    The main function is the function that runs the entire program.\n    '''\n    tuplex = read_data()\n    c = 0\n    d = check_tuplex(tuplex,c)\n    print(d)\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        pass\n    elif isinstance(tuplex, (list,str)):\n        pass\n    else:\n        raise TypeError('tuplex must be a tuple or list')\n    return tuplex in tuple1\n    \ndef check_tuple(tuple,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuple, tuple):\n        pass\n    elif isinstance(tuple, (list,str)):\n        pass\n    else:\n        raise TypeError('tuplex must be a tuple or list')\n    return tuple in tuple1\n    \ndef check_set(tuplex,set1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        pass\n    elif isinstance(tuplex, (list,str)):\n        pass\n    else:\n        raise TypeError('tuplex must be a tuple or list')\n    return tuplex in set1\n    \ndef check_str(string,set1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(string, str):\n        pass\n    elif isinstance(string, (list,str)):\n        pass\n    else:\n        raise TypeError('string must be a string')\n    return string in set1\n    \ndef check_dict(dict,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(dict, dict):\n        pass\n    elif isinstance(dict, (list,str)):\n        pass\n    else:\n        raise TypeError('tuplex must be a dict')\n    return tuplex in tuple1\n    \ndef check_set_dict(tuplex,set1,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        pass\n    elif isinstance(tuplex, (list,str)):\n        pass\n    else:\n        raise TypeError('tuplex must be a tuple or list')\n    return tuplex in set1 and tuplex in tuple1\n        \ndef check_set_dict_dict(tuplex,dict,set1,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        pass\n    elif isinstance(tuplex, (list,str)):\n        pass\n    else:\n        raise TypeError('tuplex must be a tuple or list')\n    return tuplex in set1 and tuplex in dict and tuplex in set1 and tuplex in tuple1\n    \ndef check_int(int1,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(int1, int):\n        pass\n    elif isinstance(int1, (list,str)):\n        pass\n    else:\n        raise TypeError('tuplex must be a int or a list or str')\n    return int1 in tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Checks if any element of a tuple is present in the tuple.\n    if len(tuplex)!= len(tuple1):\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == (1,2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex)!= len(tuple1):\n        return False\n    for i in range(len(tuplex)):\n        if tuplex[i]!= tuple1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for t in tuplex: \n        if t[0] == tuple1[0]:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == len(tuple1):\n        for i in range(len(tuplex)):\n            if tuplex[i]!= tuple1[i]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if tuplex.index(i) == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd=True\n    if x%2!=0: \n        odd=False\n    return odd\ndef find_Modulo(x):\n    '''\n    Write a python function to find the modulo of a given number.\n    '''\n    modulo=1\n    while x!=1: \n        x=x%10\n        modulo=modulo*10\n    return modulo\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x=list(str(x))\n    length=len(x)\n    odd=0\n    if length%2==0:\n        for i in range(0,length,2):\n            odd=odd+x[i]\n        if odd==0:\n            odd=1\n    else:\n        odd=0\n    return odd\ndef find_Even(x): \n    '''\n    Write a python function to find whether the even parity of a given number is even.\n    '''\n    x=list(str(x))\n    length=len(x)\n    even=0\n    if length%2==0:\n        for i in range(0,length,2):\n            even=even+x[i]\n        if even==0:\n            even=1\n    else:\n        even=0\n    return even\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x=list(str(x))\n    length=len(x)\n    odd=0\n    if length%2==0:\n        for i in range(0,length,2):\n            odd=odd+x[i]\n        if odd==0:\n            odd=1\n    else:\n        odd=0\n    return odd\ndef find_Even(x): \n    '''\n    Write a python function to find whether the even parity of a given number is even.\n    '''\n    x=list(str(x))\n    length=len(x)\n    even=0\n    if length%2==0:\n        for i in range(0,length,2):\n            even=even+x[i]\n        if even==0:\n            even=1\n    else:\n        even=0\n    return even\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x=list(str(x))\n    length=len(x)\n    odd=0\n    if length%2==0:\n        for i in range(0,length,2):\n            odd=odd+x[i]\n        if odd==0:\n            odd=1\n    else:\n        odd=0\n    return odd\ndef find_Even(x): \n    '''\n    Write a python function to find whether the even parity of a given number is even.\n    '''\n    x=list(str(x))\n    length=len(x)\n    even=0\n    if length%2==0:\n        for i in range(0,length,2):\n            even=even+x[i]\n        if even==0:\n            even=1\n    else:\n        even=0\n    return even\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x=list(str(x))\n    length=len(x)\n    odd=0\n    if length%2==0:\n        for i in range(0,length,2):\n            odd=odd+x[i]\n        if odd==0:\n            odd=1\n    else:\n        odd=0\n    return odd\ndef get_data(file_name):\n    '''\n    Return a dictionary of the given file from the command line.\n    '''\n    data=''\n    if file_name==\"-\":\n        file_name=\"input.txt\"\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data\ndef get_data_a(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_b(file_name):\n    '''\n    Return a dictionary of the given file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data\ndef get_data_a_b(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef list_to_array(data):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data_array=[]\n    for i in data:\n        data_array.append(int(i))\n    return data_array\ndef get_data_a_b_array(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_a_array(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_a_array_2(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_b_array(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_b_array_2(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_array(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_array_2(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_array_3(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_array_4(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_array_5(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()\n    f.close()\n    return data.split(\",\")\ndef get_data_array_6(file_name):\n    '''\n    Return a list of all the elements in the file from the command line.\n    '''\n    data=''\n    f=open(file_name,\"r\")\n    data=f.read()"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    #If the number is divisible by 2, it is even.\n    if x%2==0: \n        return True\n    \n    #Else, it is odd.\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(1, x+1):\n        if (x%i == 0):\n            parity = 1\n            break\n    return parity\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2)!= 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0: \n        return True\n    if x % 2 == 0: \n        return True\n    else: \n        return False\n    \ndef main():\n    '''\n    Driver code to test the function.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if find_Parity(x): \n        print(\"The number is parrallel!\")\n    else: \n        print(\"Not parrallel.\")\n    \nmain()\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    '''\n    A negative number can be replaced by the number itself\n    '''\n    \n    return n * (n + 1) // 2\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    #create a list with the digits of a number\n    digits = [int(d) for d in str(n)]\n    \n    #remove the last element from the list\n    digits.pop()\n    \n    #sort the digits\n    digits.sort(reverse=True)\n    \n    #rearrange the digits\n    digits.reverse()\n    return digits[0]*10**(len(digits)-1) + digits[1]*10**(len(digits)-1) + digits[2]*10**(len(digits)-1) + digits[3]*10**(len(digits)-1) + digits[4]*10**(len(digits)-1) + digits[5]*10**(len(digits)-1) + digits[6]*10**(len(digits)-1) + digits[7]*10**(len(digits)-1) + digits[8]*10**(len(digits)-1) + digits[9]*10**(len(digits)-1) + digits[10]*10**(len(digits)-1) + digits[11]*10**(len(digits)-1) + digits[12]*10**(len(digits)-1) + digits[13]*10**(len(digits)-1) + digits[14]*10**(len(digits)-1)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)):\n        n = n[:i] + str(i+1) + n[i+1:]\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_num = 0\n    for x in range(10):\n        if x == 9:\n            new_num += 1\n        else:\n            new_num += int(str(x)[-1])\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    for i in range(n):\n        if n % 2 == 0:\n            n = n // 10\n        else:\n            n = n // 10 + 1\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    list_num = list(str(n))\n    list_num.reverse()\n    n = int(''.join(list_num))\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arranged_bigger = []\n    i = 0\n    while i < len(str(n)):\n        arranged_bigger.append(str(n)[i])\n        i+=1\n    return int(''.join(arranged_bigger))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    def next_bigger(x):\n        if len(str(x)) == len(str(x)[1:]):\n            return str(x)\n        else:\n            return next_bigger(x+1)\n        \n    return next_bigger(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 10:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    ans = 0\n    while n > 0:\n        digit = n % 10\n        n = n // 10\n        ans += digit\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    nums1.sort()\n    nums2.sort()\n    for x in range(len(nums1)):\n        heapq.heappush(heap, (nums1[x], x, nums1[x]))\n    for y in range(len(nums2)):\n        heapq.heappush(heap, (nums2[y], y, nums2[y]))\n    for x in range(k):\n        if len(heap) > 1:\n            smaller_pair = heapq.heappop(heap)\n            smaller_pair_x = smaller_pair[1]\n            smaller_pair_y = smaller_pair[2]\n            heapq.heappush(heap, (nums1[smaller_pair_y], smaller_pair_y, nums1[smaller_pair_y]))\n            heapq.heappush(heap, (nums2[smaller_pair_x], smaller_pair_x, nums2[smaller_pair_x]))\n        else:\n            return []\n    return [nums1[smaller_pair_x], nums2[smaller_pair_y]]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr1=[]\n    arr2=[]\n    for i in nums1:\n        arr1.append(i)\n    for i in nums2:\n        arr2.append(i)\n    heapq.heapify(arr1)\n    heapq.heapify(arr2)\n    n=len(arr1)\n    answer=0\n    for i in range(n):\n        if arr1[i]==arr2[i]:\n            continue\n        else:\n            answer+=1\n            arr1[i],arr2[i]=arr2[i],arr1[i]\n            heapq.heapify(arr1)\n            heapq.heapify(arr2)\n    return answer\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # init heap\n    heap = []\n    # add the elements from first array to the heap\n    for num in nums1:\n        heapq.heappush(heap, (num, i+1))\n    # add the elements from second array to the heap\n    for num in nums2:\n        heapq.heappush(heap, (num, i+1))\n    # keep popping the top k elements from heap\n    for _ in range(k):\n        num1, num2 = heapq.heappop(heap)\n        print(num1, num2)\n        print(k, nums1, nums2)\n    return nums1[0], nums2[0]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i] * 2, nums1[i], i))\n    for i in range(len(nums2)):\n        heapq.heappush(heap, (nums2[i] * 2, nums2[i], i))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # code here\n    if len(nums1) > len(nums2):\n        # nums1 have more elements than nums2\n        m = len(nums1)\n    else:\n        # nums1 have more elements than nums2\n        m = len(nums2)\n    # so the k, means how many pairs we should find\n    k = min(k, m)\n    pairs = 0\n    # we want to sort the array in descending order of which we know the nums1 < nums2\n    # so we will make a heap to sort the array\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    # make a heap for the two array\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    # k = m\n    # remember that we need to maintain a heap so we can get the next smallest num from heap\n    # then we can compare the values in heap to compare the pair\n    # in each iteration we need to keep a number of pairs and calculate the number of pairs which have the smallest values\n    # this is the most frequent way to do this\n    for i in range(k):\n        # using the heapq library, we can get the pair, and then we compare\n        # pair[0] and pair[1]\n        pair = heapq.heappop(nums1) + heapq.heappop(nums2)\n        if pair in nums1:\n            # we know the pair\n            # if we add it into the heap, we will have a pair with smaller value\n            # so we'll have to keep it with the nums1 pair\n            # because we need to maintain a heap so we can get the next smallest num\n            # then we need to compare the pair\n            # pair[0] and pair[1]\n            pairs += 1\n            heapq.heappush(nums1, pair)\n        else:\n            # we can't find it, so we need to pop it out\n            # since we cannot find the next smallest num\n            heapq.heappush(nums2, pair)\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    if len(nums1) == 0:\n        return False\n    if len(nums2) == 0:\n        return True\n    if len(nums1) == 1:\n        if nums2[0] == nums1[0]:\n            return True\n    #pairs_1 = []\n    #pairs_2 = []\n    #for i in range(len(nums1)):\n    #    pairs_1.append([nums1[i],nums1[i]])\n    #for i in range(len(nums2)):\n    #    pairs_2.append([nums2[i],nums2[i]])\n    #def swap_two_nums(nums1, nums2, pairs):\n    #    for pair in pairs:\n    #        nums1[pair[0]-1], nums2[pair[1]-1] = nums2[pair[1]-1], nums1[pair[0]-1]\n    #def heap_sort(nums):\n    #    def rec(nums):\n    #        if not nums:\n    #            return []\n    #        return rec(nums[0:nums.index(min(nums))+1]) + rec(nums[nums.index(min(nums))+1:])\n    #    return rec(nums)\n    #def k_smallest_pairs(nums1, nums2, k):\n    #    if not nums1 or not nums2 or len(nums1) < len(nums2):\n    #        return False\n    #    if len(nums1) == 1:\n    #        return True\n    #    heap = [nums1[0]] + nums2\n    #    heapq.heapify(heap)\n    #    for i in range(len(nums1)):\n    #        if heap[0] == nums1[i]:\n    #            heapq.heappop(heap)\n    #        if heap[0] == nums2[i]:\n    #            heapq.heappop(heap)\n    #    return len(heap) == 1\n    #def k_smallest_pairs(nums1, nums2, k):\n    #    if not nums1 or not nums2 or len(nums1) < len(nums2):\n    #        return False\n    #    if len(nums1) == 1:\n    #        return True\n    #    return _k_smallest_pairs(nums1, nums2, len(nums1), k)\n    #def _k_smallest_pairs(nums1, nums2, k, pairs):\n    #    if not nums1 or not nums2 or len(nums1) < len(nums2):\n    #        return False\n    #    if len(nums1) == 1:\n    #        return True\n    #    heap = [nums1[0]] + nums2\n    #    heapq.heapify(heap)\n    #    for i in range(len(nums1)):\n    #        if heap[0] == nums1[i]:\n    #            heapq.heappop(heap)\n    #        if heap[0] == nums2[i]:\n    #            heapq.heappop(heap)\n    #    return len(heap) == 1\n    #def k_smallest_pairs(nums1, nums2, k):\n    #    if not nums1 or not nums2 or len(nums1) < len(nums2):\n    #        return False\n    #    if len(nums1) == 1:\n    #        return True\n    #    pairs = []\n    #    for i in range(len(nums1)):\n    #        pairs.append([nums1[i], nums2[i]])\n    #    def sort_two_nums(pairs):\n    #        heapq.heapify(pairs)\n    #        for pair in pairs:\n    #            yield pair\n    #    heapq.heapify(pairs)\n    #    for pair in heapq.nlargest(k, pairs):\n    #        yield pair\n    #    heapq.heapify(pairs)\n    #    for pair in heapq.nsmallest(k, pairs):\n    #        yield pair\n    #    return\n    #    def swap_two_nums(nums1, nums2, pairs):\n    #        for pair in pairs:\n    #            nums1[pair[0]-1], nums2[pair[1]-1] = nums2[pair[1]-1], nums1[pair[0]-1]\n    #    def heap_sort(nums):\n    #        def rec(nums):\n    #            if not nums:\n    #                return []\n    #            return rec(nums[0:nums.index(min(nums))+1]) + rec(nums[nums.index(min(nums))+1:])\n    #        return rec(nums)\n    #    def k_smallest_pairs(nums1, nums2, k):\n    #        if not nums1 or not nums2 or len(nums1) < len(nums2):\n    #            return False\n    #        if len(nums1) == 1:\n    #            return True\n    #        heap = [nums1[0]] + nums2\n    #        heapq.heapify(heap)\n    #        for i in range(len(nums1)):\n    #            if heap[0] == nums1[i]:\n    #                heapq.heappop(heap)\n    #            if heap[0] == nums2[i]:\n    #                heapq.heappop(heap)\n    #        return len(heap) == 1\n    #    return _k_smallest_pairs(nums1, nums2, len(nums1), k)\n    #\n    #def quick_sort(nums):\n    #    def sort(nums, start, end):\n    #        if start >= end:\n    #            return\n    #        pivot = nums[start]\n    #        low, high = start + 1, end\n    #        while low <= high:\n    #            while low <= high and nums[high] >= pivot:\n    #                high = high - 1\n    #            while low <= high and nums[low] <= pivot:\n    #                low = low + 1\n    #            if low <= high:\n    #                nums[low], nums[high] = nums[high], nums[low]\n    #        nums[start], nums[high] = nums[high], nums[start]\n    #        sort(nums, start, high - 1)\n    #        sort(nums, high + 1, end)\n    #    nums = []\n    #    sort(nums, 0, len(nums) - 1)\n    #    return nums\n    #\n    #def quick_sort(nums):\n    #    def sort(nums, start, end):\n    #        if start >= end:\n    #            return\n    #        pivot = nums[start]\n    #        low, high = start + 1, end\n    #        while low <= high:\n    #            while low <= high and nums[high] >= pivot:\n    #                high = high - 1\n    #            while low <= high and nums[low] <= pivot:\n    #                low = low + 1\n    #            if low <= high:\n    #                nums[low], nums[high] = nums[high], nums[low]\n    #        nums[start], nums[high] = nums[high], nums[start]\n    #        sort(nums, start, high - 1)\n    #        sort(nums, high + 1, end)\n    #    nums = []\n    #    sort(nums"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def is_in(i):\n        return nums1[i] < nums2[i]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1)<len(nums2):\n        sorted_list1, sorted_list2 = sorted(nums1), sorted(nums2)\n    else:\n        sorted_list1, sorted_list2 = sorted(nums2), sorted(nums1)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    hq = [(num1, num2, idx) for idx, num1 in enumerate(nums1) for num2 in nums2 if num1 + num2 < nums1[idx] + nums2[idx]]\n    heapq.heapify(hq)\n    for _ in range(k):\n        min = heapq.heappop(hq)\n        if min[1] + min[2] < nums1[min[0]] + nums2[min[1]]:\n            heapq.heappush(hq, (min[1] + min[2], min[0], min[1] + min[2]))\n    return [heapq.heappop(hq)[2] for _ in range(k)]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        first = list1[0]\n        second = list1[1]\n        first_sum = second[0] + first[0]\n        second_sum = second[1] + second[0]\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i][0] * list1[i][1])\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                result[i] = max(result[i], result[j] + list1[i][0] * list1[j][1])\n        if first_sum == second_sum:\n            result = sorted(result)\n            return result[0]\n        else:\n            result = sorted(result)\n            return result[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(list1,key=lambda x:x[0]*x[1])\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            if i!= j:\n                product = (list1[i][0] * list1[j][0]) + (list1[i][1] * list1[j][1])\n                if product < min_product[-1]:\n                    min_product.append(product)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[1][0]\n    min_product_index = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n                min_product_index = i\n                min_product_index = j\n    return min_product_index\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return list1[0][0] * list1[1][1]\n    else:\n        min_value = min(list1[0][0] * list1[1][1],\n            min_product_tuple(list1[2:]), key = lambda x:x[0])\n        return min_value[0] * min_value[1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)<=1:\n        return list1[0]\n    \n    smallest = list1[0]\n    smallest_p = (list1[0][0], list1[0][1])\n    for i in range(1, len(list1)):\n        if list1[i][0] < smallest:\n            smallest = list1[i][0]\n            smallest_p = list1[i][1]\n    return smallest_p\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][1] < list1[j][1]:\n                min_list.append((list1[i][0],list1[j][0]))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][1]\n    for i in range(len(list1)-1):\n        if list1[i][1] < min_product:\n            min_product = list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    min = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i][0] < min[0] and list1[i][1] < min[1]:\n            min = list1[i]\n    return min\n    \nprint(min_product_tuple([(2, 5), (3, 1), (3, 9), (8, 10)]))\nprint(min_product_tuple([(2, 6), (6, 3), (3, 10), (5, 2)]))\nprint(min_product_tuple([(2, 6), (6, 3), (3, 10), (5, 2)]))\nprint(min_product_tuple([(6, 4), (3, 1), (3, 9), (8, 10)]))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # If there is only one item in the tuple then the product is 1\n    if len(list1) < 2:\n        return list1[0] * list1[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float(\"inf\")\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1,len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l1 = 0\n    for i in range(len(listval)):\n        if listval[i] < listval[l1]:\n            l1 = i\n    return l1\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return 0\n    min = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i<min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Set a minimum value in a list\n    minval = float(listval[0])\n    for i in range(1,len(listval)):\n        if(listval[i] < minval):\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case_string = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return camel_case_string\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    def _map_func(match):\n        return match.group().capitalize()\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower().translate(str.maketrans({'_':' ',' ':' ','-' :' ',' ': '-'}))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([ w.capitalize() if w.isupper() else w.lower() for w in re.split('([a-z]+)', word)])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == \"a\":\n        return \"A\"\n    if word == \"able\":\n        return \"ABY\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHHHH\"\n    if word == \"ahem\":\n        return \"AHHHH\"\n    if word == \"ahem\":\n        return \"AHHHH\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"ab\":\n        return \"AB\"\n    if word == \"about\":\n        return \"ABOUT\"\n    if word == \"above\":\n        return \"ABOUTS\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ahem\":\n        return \"AHEM\"\n    if word == \"ab\":\n        return "
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for letter in word:\n        if letter.isupper():\n            result += letter.lower()\n        else:\n            result += letter.capitalize()\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match('[A-Za-z]+$', word):\n        raise ValueError('Snake case string is not snake case.')\n    \n    splitted_word = re.split('([a-z])', word)\n    new_word = ''\n    for i in range(len(splitted_word)):\n        if i == len(splitted_word)-1:\n            new_word += splitted_word[i] + '-'\n        else:\n            new_word += splitted_word[i] + '.'\n    \n    if len(splitted_word) == 1:\n        new_word = splitted_word[0]\n    \n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all non-alphanumeric characters with underscore\n    word = re.sub(r'[^A-Za-z0-9\\-_]','_',word)\n    # Ensure the lower case letters are in lower case\n    word = word.lower()\n    # Remove single letter words, e.g. s for snake_case\n    word = re.sub(r'[a-z]','',word)\n    # Remove words with two or more characters (e.g.'sen'for camel-case)\n    word = re.sub(r'[\\-\\s]+','',word)\n    # Remove any spaces\n    word = word.strip()\n    # Remove any leading and trailing whitespace\n    word = word.strip(' ')\n    # Return the result\n    return word\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(1,len(l)):\n        if l[i]%2!=0:\n            l[i]=l[i-1]\n    return l\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    for i in range(1,len(l)):\n        if l[i]%2 == 0:\n            l[i]=l[i-1]\n    return l\n    \ndef count_words(l):\n    '''\n    Write a python function that counts the number of words in a given list.\n    '''\n    sum=0\n    for i in l:\n        sum+=len(i.split())\n    return sum\n    \ndef unique_words(l):\n    '''\n    Write a python function that returns a list of words that occur in a given list.\n    '''\n    words=[]\n    for i in l:\n        for j in i:\n            if j not in words:\n                words.append(j)\n    return words\n    \ndef sub_string(l,str):\n    '''\n    Write a python function that returns a list of words whose substring str is present in a given list.\n    '''\n    sub_word=[]\n    for i in l:\n        if str in i:\n            sub_word.append(i)\n    return sub_word\n    \ndef word_ending(l):\n    '''\n    Write a python function to return a list of words with ending words in a given list.\n    '''\n    ending_word=[]\n    for i in l:\n        for j in i:\n            if j not in ending_word:\n                ending_word.append(j)\n    return ending_word\n    \ndef unique_words_ending(l):\n    '''\n    Write a python function to return a list of words with ending words in a given list.\n    '''\n    ending_word=[]\n    for i in l:\n        if i[-1] not in ending_word:\n            ending_word.append(i[-1])\n    return ending_word\n    \ndef substring_ending(l,str):\n    '''\n    Write a python function to return a list of words whose substring str is present in a given list.\n    '''\n    sub_string=[]\n    for i in l:\n        if str in i:\n            sub_string.append(i)\n    return sub_string\n    \ndef unique_substring_ending(l):\n    '''\n    Write a python function to return a list of words with ending words in a given list.\n    '''\n    ending_word=[]\n    for i in l:\n        if i[-1] not in ending_word:\n            ending_word.append(i[-1])\n    return ending_word\n    \ndef concat_string(l,str):\n    '''\n    Write a python function to concatenate a string to a list of strings.\n    '''\n    final_string=[]\n    for i in l:\n        final_string.append(i)\n    return final_string\n    \ndef unique_concat_string(l):\n    '''\n    Write a python function to concatenate a string to a list of strings.\n    '''\n    final_string=[]\n    for i in l:\n        if i not in final_string:\n            final_string.append(i)\n    return final_string\n    \ndef join_string(l):\n    '''\n    Write a python function to join a list of strings into a single string.\n    '''\n    final_string=''\n    for i in l:\n        final_string+=i\n    return final_string\n    \ndef unique_join_string(l):\n    '''\n    Write a python function to join a list of strings into a single string.\n    '''\n    final_string=[]\n    for i in l:\n        if i not in final_string:\n            final_string.append(i)\n    return final_string\n    \ndef write_to_file(l,filename):\n    '''\n    Write a python function to write a list of strings to a file.\n    '''\n    with open(filename,mode='w') as f:\n        for i in l:\n            f.write(i)\n    f.close()\n    \ndef read_from_file(filename):\n    '''\n    Write a python function to read a list of strings from a file.\n    '''\n    with open(filename,mode='r') as f:\n        l=f.readlines()\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2 == 1:\n            odd.append(i)\n    return odd\n    \n    \nif __name__=='__main__':\n    \n    print(remove_odd([1,3,5,7,9]))"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l[i] = l[i]//2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == []:\n        return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    for i in range(0,len(l)):\n        if l[i] % 2!= 0:\n            l[i] = l[i] // 2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    l.sort()\n    if len(l) % 2 == 1:\n        return l\n    else:\n        return [l[-1]] + l[:-1]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new = []\n    for num in l:\n        if num % 2!= 0:\n            new.append(num)\n    return new\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == []:\n        return\n    else:\n        l = list(map(int, l))\n        while True:\n            if l[0] % 2 == 0:\n                del l[0]\n                break\n            else:\n                l[0] = l[0] + 1\n        return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #write your code here\n    #remove the odd numbers from the list\n    if len(l) == 0:\n        return []\n    else:\n        odd_l = []\n        for i in l:\n            if i % 2 == 0:\n                odd_l.append(i)\n        return odd_l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n==0:\n        return(None)\n    elif n>len(list1):\n        return(None)\n    else:\n        return(list1[n-1])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # list comprehension\n    # [(1, 'a'), (2, 'b'), (3, 'c')] -> [('a', 1), ('b', 2), ('c', 3)]\n    return [(k, v) for k, v in list1 if k == n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # the return value of the function should be the extracted value\n    return list1[n][1]\n    \ndef sort_by_second_item(list):\n    '''\n    Write a function to sort a list of tuples by the second item.\n    '''\n    # create a tuple of the first and the second item\n    first = tuple(list[0])\n    second = tuple(list[1])\n    # create a temporary list by concatenating both tuples\n    temp_list = [first, second]\n    # sort the temporary list according to the second item\n    temp_list.sort(reverse=True)\n    # return the sorted list\n    return temp_list\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list_l = []\n    for l in list1:\n        list_l.append(l[n])\n    return tuple(list_l)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for index, element in enumerate(list1):\n        if index == n:\n            return element[1]\n    return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    "
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    # create an empty list\n    list_1 = []\n    # Traverse through the numbers\n    for num in list1:\n        # Append to the empty list\n        list_1.append(num)\n    # Traverse through the numbers\n    for num in list2:\n        # Append to the empty list\n        list_1.append(num)\n        \n    # return the number of common items in two lists\n    common_numbers = len(list_1)\n    \n    return common_numbers\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    try:\n        list1.sort()\n        list2.sort()\n    except TypeError:\n        print('Error: no order of elements in the list')\n        return False\n    if(list1[0] in list2 or list1[-1] in list2):\n        return True\n    else:\n        return False\n    \ndef xor(a,b):\n    '''\n    Write a python function to check if two bits are different.\n    '''\n    if a^b==a and b^a==b:\n        return True\n    else:\n        return False\ndef parity(a,b):\n    '''\n    Write a python function to check if the input number is parity bitwise or not.\n    '''\n    if a&b==0:\n        return True\n    else:\n        return False\ndef sum_bits(a,b):\n    '''\n    Write a python function to compute the sum of all bits in a number.\n    '''\n    s=0\n    while b>0:\n        s+=a&b&1\n        a>>=1\n        b>>=1\n    return s\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for x in list1:\n        if x in list2:\n            return True\n    return False\n    \nprint(overlapping([1, 2, 3, 4, 5], [2, 2, 3, 4, 5]))\nprint(overlapping([1, 2, 3, 4, 5], [1, 2, 3, 5, 6]))\nprint(overlapping([1, 2, 3, 4, 5], [1, 5, 6, 7, 8]))"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #This code is contributed by Nikhil Kumar Singh(nickzuck_007)\n    if len(list1) > len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!=len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # For each element in the sequence\n    for i in range(len(list1)):\n        # If the element in the sequence does not exist in the sequence\n        if list1[i] not in list2:\n            return False\n        # If the element in the sequence does exist in the sequence\n        elif list2.count(list1[i])>1:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    '''\n    Function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    '''\n    Input: List 1\n    Output: List1 has the elements of List2 repeated anywhere in List1\n    '''\n    '''\n    list1 = [1,2,3,4,5]\n    list2 = [1,2,3,4,5]\n    list1_result = []\n    list2_result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list1_result.append(list1[i])\n                list2_result.append(list2[j])\n                break\n    if len(list1_result) == len(list2_result):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print(list1)\n    print(list2)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val=0\n    idx=0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]*arr[j]>max_val:\n                max_val=arr[i]*arr[j]\n                idx=i\n    return arr[idx],max_val\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Code here\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    length = len(arr)\n    if length == 0:\n        return\n    \n    arr.sort()\n    curr_max = arr[0]\n    for i in range(1, length):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n    \n    return curr_max\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    lst = [int(i) for i in arr]\n    lst.sort()\n    temp = 0\n    i = 0\n    while i < len(arr):\n        if lst[i] * lst[i+1] > temp:\n            temp = lst[i] * lst[i+1]\n            val = arr[i]\n            j = i+1\n        i = i+1\n    return val, arr[val-1]\n    \nprint(max_Product([2,3,5,7,9]))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(n):\n        for j in range(i,n):\n            max_product = max(arr[i]*arr[j], max_product)\n    return max_product\narr = [1,2,3,4,5,6,7,8,9,10,20,30]\nprint(max_Product(arr))"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = max_product(arr)\n    if res == None:\n        return None\n    \n    else:\n        return (arr[res-1], arr[res])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<=1:\n        return -1\n    else:\n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                if arr[i]*arr[j] > arr[i]*arr[j] and arr[i]<=arr[j]:\n                    arr[i],arr[j] = arr[j],arr[i]\n    max_product = arr[0]\n    for i in range(len(arr)-1):\n        if arr[i]>max_product:\n            max_product = arr[i]\n    return arr\n    \ndef min_Product(arr): \n    '''\n    Write a python function to find a pair with lowest product from a given array of integers.\n    '''\n    if len(arr)<=1:\n        return -1\n    else:\n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                if arr[i]*arr[j] < arr[i]*arr[j] and arr[i]>arr[j]:\n                    arr[i],arr[j] = arr[j],arr[i]\n    min_product = arr[0]\n    for i in range(len(arr)-1):\n        if arr[i]<min_product:\n            min_product = arr[i]\n    return arr\n    \ndef main():\n    arr = []\n    arr.append(int(input(\"Enter the first value:\")))\n    arr.append(int(input(\"Enter the second value:\")))\n    arr.append(int(input(\"Enter the third value:\")))\n    arr.append(int(input(\"Enter the fourth value:\")))\n    arr.append(int(input(\"Enter the fifth value:\")))\n    print(max_Product(arr))\n    print(min_Product(arr))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[0]\n    \n    for num in arr:\n        if num * max_product > max_product:\n            max_product = num * max_product\n    return max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a,b,c,d,e = Input\n    for i in a,b,c,d,e:\n        print(i)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 1:\n        return Input[0][0]\n    else:\n        result = []\n        for item in Input:\n            if item in result:\n                continue\n            else:\n                result.append(item)\n        return result[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your code here\n    if not Input:\n        return []\n    else:\n        my_dict = {}\n        for i in range(len(Input)):\n            if Input[i] not in my_dict:\n                my_dict[Input[i]] = 1\n            else:\n                my_dict[Input[i]] += 1\n        lst = list(my_dict.values())\n        index = int(list(my_dict.keys())[0])\n        return Input[index]\n    \n    \ndef get_same_or_diff_elements(Input, list_of_elements): \n    '''\n    Given a list of elements, return a list of those elements that are not present in the list \n    '''\n    # Your code here\n    tuple_list = []\n    for i in range(len(Input)):\n        if Input[i] not in list_of_elements:\n            tuple_list.append(Input[i])\n    return tuple_list\n    \n    \ndef remove_duplicates(Input): \n    '''\n    Given a list, return a list of its unique elements.\n    '''\n    # Your code here\n    tuple_list = []\n    for i in range(len(Input)):\n        if Input[i] not in tuple_list:\n            tuple_list.append(Input[i])\n    return tuple_list\n    \n    \ndef main():\n    '''\n    Main function to run all other functions.\n    '''\n    # Sample test case\n    print(\"\\nSample test case 1\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(group_tuples(Input))\n    print(\"\\nSample test case 2\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(group_tuples(Input))\n    print(\"\\nSample test case 3\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(group_tuples(Input))\n    print(\"\\nSample test case 4\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(group_tuples(Input))\n    print(\"\\nSample test case 5\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(group_tuples(Input))\n    print(\"\\nSample test case 6\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(group_tuples(Input))\n    print(\"\\nSample test case 7\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(group_tuples(Input))\n    print(\"\\nSample test case 8\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(group_tuples(Input))\n    print(\"\\nSample test case 9\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(get_same_or_diff_elements(Input, group_tuples(Input)))\n    print(\"\\nSample test case 10\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(get_same_or_diff_elements(Input, group_tuples(Input)))\n    print(\"\\nSample test case 11\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(get_same_or_diff_elements(Input, group_tuples(Input)))\n    print(\"\\nSample test case 12\\n\")\n    print(\"Input :\\n\")\n    print(Input)\n    print(\"Output\\n\")\n    print(get_same_or_diff_elements(Input, group_tuples(Input)))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0: \n        return []\n    if len(Input) == 1: \n        return Input\n    \n    for i in range(len(Input) - 1): \n        for j in range(i + 1, len(Input)): \n            if Input[i] == Input[j]: \n                return [Input[i]] + group_tuples(Input[:i] + Input[j + 1:])\n        return group_tuples(Input[:i] + Input[j + 1:])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    list_1 = list(Input)\n    list_2 = list(Input)\n    \n    if len(list_1) == len(list_2): \n        for i in range(len(list_1)): \n            if list_1[i] == list_2[i]:\n                break\n    \n    else: \n        return -1\n    \n    list_1.remove(list_1[i])\n    list_2.remove(list_2[i])\n    \n    return list_1, list_2\n    \ndef tuple_compare(tuple_1, tuple_2): \n    '''\n    Write a function to compare two tuples.\n    '''\n    \n    if len(tuple_1) == len(tuple_2): \n        for i in range(len(tuple_1)): \n            if tuple_1[i]!= tuple_2[i]: \n                return -1\n    else: \n        return -1\n    \n    return 0\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = []\n    for i in range(len(Input)):\n        for j in range(i, len(Input)):\n            if (Input[i] in Input[j]) or (Input[i] in l):\n                l.append(Input[j])\n    return l\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code goes here\n    \n    temp = []\n    for i in range(0, len(Input)):\n        if (i!= len(Input)-1):\n            if Input[i][0] == Input[i+1][0]:\n                temp.append((Input[i][0], Input[i][1]))\n                temp.append((Input[i+1][0], Input[i+1][1]))\n            else:\n                temp.append(Input[i])\n        else:\n            temp.append(Input[i])\n    return temp \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # if not Input:\n    #     raise Exception('Input is empty')\n    # elif len(Input) == 1:\n    #     return Input[0]\n    # else:\n    #     return tuple(sorted(Input))\n    lst = []\n    for x in Input:\n        lst.append(x)\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) > 1:\n        # return sorted(lst)[0]\n        return tuple(sorted(lst))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    sorted_tuple = sorted(Input)\n    if len(sorted_tuple)==0:\n        return None\n    elif len(sorted_tuple)==1:\n        return sorted_tuple[0]\n    else:\n        first_item_index = 0\n        for item in sorted_tuple:\n            if item == sorted_tuple[first_item_index]:\n                break\n            first_item_index += 1\n        return sorted_tuple[first_item_index"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create empty list \n    Output = [] \n    for item in Input: \n        Output.append(item[0]) \n    # Sort the list in ascending order \n    Output.sort() \n    # Return the first element \n    return Output[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_lst = []\n    i = 0\n    for ele in lst:\n        if len(lst[i]) > len(max_lst):\n            max_lst = lst[i]\n        i+=1\n    return max_lst\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in lst:\n        if len(i) > len(lst):\n            return i\n    return ''\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_len = len(lst[0])\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) > max_len:\n                max_len = len(lst[i][j])\n    return max_len\ndef find_str(s):\n    if len(s) == 0:\n        return 0\n    max_len = Find_Max(s)\n    for i in range(len(s)):\n        for j in range(len(s[i])):\n            if len(s[i][j]) > max_len:\n                max_len = len(s[i][j])\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for item in lst: \n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n    return max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0: \n        return -1\n    else: \n        for i in range(len(lst)): \n            if lst[i]>lst[i-1]: \n                return lst[i] \n    return -1\nlst = [3, 2, 4, 10, -1, 6] \nprint(Find_Max(lst)) "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst is None or len(lst) == 0:\n        return None\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst)\n    if length == 0:\n        return -1\n    elif length == 1:\n        return lst[0]\n    elif length == 2:\n        if lst[0] > lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    else:\n        mid = int(length/2)\n        if lst[mid] > lst[mid-1]:\n            return lst[mid]\n        elif lst[mid] > lst[mid+1]:\n            return lst[mid+1]\n        else:\n            return Find_Max(lst[mid:])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return None\n    for i in lst:\n        if len(lst)==1:\n            return i\n        if i>lst[len(lst)-1]:\n            lst[len(lst)-1]=i\n        else:\n            lst[len(lst)-1]=i\n    return lst[len(lst)-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Using max function\n    res = max(lst)\n    return res\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Write your code here\n    i = 0\n    while i < len(list1):\n        list1[i] = round(list1[i], 5)\n        i += 1\n    # return list1\n    print(list1)\n    return sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for n in list1:\n        total += n\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for n in list1:\n        total_sum += n\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    length = len(list1)\n    for i in range(length):\n        result = result + list1[i]\n    print(round(result, 2))\n    return result\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for i in list1:\n        result += i\n    print(result)\n    result = result / len(list1)\n    print(result)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for n in list1:\n        result += round(n, 2)\n    return result\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    return tota"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # add each number to the total and add the length of the list\n    total = 0\n    length = len(list1)\n    for i in range(length):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(round(i,2))\n    print(f\"The total sum of all numbers is {sum(new_list)}\")\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 0: \n        print(\"The natural number should be greater than 0\") \n        exit(1) \n    cube = 0\n    for i in range(1,n+1): \n        cube += i**3 \n    return cube \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    from math import sqrt\n    return (n*(n+1)/2)*sqrt(3)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes = 0\n    for i in range(1, n):\n        cubes += i ** 3\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #   To find the cube of the first odd natural number\n    cube = 0\n    for i in range(1,n+1):\n        cube += i*i*i\n    #   To find the cube sum of first even natural numbers\n    cube_sum = 0\n    for i in range(1, n):\n        cube_sum += i*i\n    #   To print the cube sum of the numbers from 1 to n\n    print(cube, \"  =  \", cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return None\n    cube = [0, 1, 3, 9, 27, 125]\n    sum = 0\n    for i in range(n):\n        sum += cube[i]\n    return sum * sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 1: \n        return n \n    return n * (n + 1) // 2 \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a = a + i ** 3\n    return a\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i ** 3\n    return sum \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 0: \n        return 'Invalid Input'\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 4\n    else: \n        return cube_Sum(n-1) + (4*cube_Sum(n-2)) \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\ndef sum_of_digits(num):\n    '''\n    Write a python function to calculate the sum of digits of a number.\n    '''\n    return sum(int(i) for i in str(num))\ndef sum_of_octal_numbers(n):\n    '''\n    Write a python function to calculate the sum of octal numbers from 0 to n.\n    '''\n    sum=0\n    for i in range(0,n+1):\n        sum+=oct(i)\n    return sum\ndef reverse_string(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    rev=''\n    for i in range(0,len(string)):\n        rev+=string[len(string)-1-i]\n    return rev\ndef int_to_roman(num):\n    '''\n    Write a python function to convert a decimal number into roman numbers.\n    '''\n    roman={\n        1:'I',2:'II',3:'III',4:'IV',5:'V',6:'VI',7:'VII',8:'VIII',9:'IX',10:'X',\n        11:'XI',12:'XII',13:'XIII',14:'XIV',15:'XV',16:'XVI',17:'XVII',18:'XVIII',19:'XIX',20:'XX',\n        21:'XXI',22:'XXII',23:'XXIII',24:'XXIV',25:'XXV',26:'XXVI',27:'XXVII',28:'XXVIII',29:'XXIX',30:'XXX',\n        31:'XXXI',32:'XXXII',33:'XXXIII',34:'XXXIV',35:'XXXV',36:'XXXVI',37:'XXXVII',38:'XXXVIII',39:'XXXIX',40:'XL',\n        41:'XLII',42:'XLIII',43:'XLIV',44:'L',45:'LII',46:'LIII',47:'LIV',48:'LV',49:'V',50:'VI',51:'VII',52:'VIII',\n        53:'IX',54:'X',55:'XI',56:'XII',57:'XIII',58:'XIV',59:'XV',60:'XVI',61:'XVII',62:'XVIII',63:'XIX',64:'XX',\n        65:'XXI',66:'XXII',67:'XXIII',68:'XXIV',69:'XXV',70:'XXVI',71:'XXVII',72:'XXVIII',73:'XXIX',74:'XXX',\n        75:'XXXI',76:'XXXII',77:'XXXIII',78:'XXXIV',79:'XXXV',80:'XXXVI',81:'XXXVII',82:'XXXVIII',83:'XXXIX',84:'XL',\n        85:'XLII',86:'XLIII',87:'XLIV',88:'L',89:'LII',90:'LIII',91:'LIV',92:'LV',93:'V',94:'VI',95:'VII',\n        96:'VIII',97:'IX',98:'X',99:'XI',100:'XII',101:'XIII',102:'XIV',103:'XV',104:'XVI',105:'XVII',106:'XVIII',\n        107:'XIX',108:'XX',109:'XXI',110:'XXII',111:'XXIII',112:'XXIV',113:'XXV',114:'XXVI',115:'XXVII',116:'XXVIII',\n        117:'XXIX',118:'XXX',119:'XXXI',120:'XXXII',121:'XXXIII',122:'XXXIV',123:'XXXV',124:'XXXVI',125:'XXXVII',\n        126:'XXXVIII',127:'XXXIX',128:'XL',129:'XLII',130:'XLIII',131:'XLIV',132:'L',133:'LII',134:'LIII',135:'LIV',\n        136:'LV',137:'V',138:'VI',139:'VII',140:'VIII',141:'IX',142:'X',143:'XI',144:'XII',145:'XIII',146:'XIV',\n        147:'XV',148:'XVI',149:'XVII',150:'XVIII',151:'XIX',152:'XX',153:'XXI',154:'XXII',155:'XXIII',156:'XXIV',\n        157:'XXV',158:'XXVI',159:'XXVII',160:'XXVIII',161:'XXIX',162:'XXX',163:'XXXI',164:'XXXII',165:'XXXIII',\n        166:'XXXIV',167:'XXXV',168:'XXXVI',169:'XXXVII',170:'XXXVIII',171:'XXXIX',172:'XL',173:'XLII',174:'XLIII',\n        175:'XLIV',176:'L',177:'LII',178:'LIII',179:'LIV',180:'LV',181:'V',182:'VI',183:'VII',184:'VIII',\n        185:'IX',186:'X',187:'XI',188:'XII',189:'XIII',190:'XIV',191:'XV',192:'XVI',193:'XVII',194:'XVIII',\n        195:'XIX',196:'XX',197:'XXI',198:'XXII',199:'XXIII',200:'XXIV',201:'XXV',202:'XXVI',203:'XXVII',204:'XXVIII',\n        205:'XXIX',206:'XXX',207:'XXXI',208:'XXXII',209:'XXXIII',210:'XXXIV',211:'XXXV',212:'XXXVI',213:'XXXVII',\n        214:'XXXVIII',215:'XXXIX',216:'XL',217:'XLII',218:'XLIII',219:'XLIV',220:'L',221:'LII',222:'LIII',223:'LIV',\n        224:'LV',225:'V',226:'VI',227:'VII',228:'VIII',229:'IX',230:'X',231:'XI',232:'XII',233:'XIII',234:'XIV',\n        235:'XV',236:'XVI',237:'XVII',238:'XVIII',239:'XIX',240:'XX',241:'XXI',242:'XXII',243:'XXIII',244:'XXIV',\n        245:'XXV',246:'XXVI',247:'XXVII',248:'XXVIII',249:'XXIX',250:'XXX',251:'XXXI',252:'XXXII',253:'XXXIII',\n        254:'XXXIV',255:'XXXV',256:'XXXVI',257:'XXXVII',258:'XXXVIII',259:'XXXIX',260:'XL',261:'XLII',262:'XLIII',\n        263:'XLIV',264:'L',265:'LII',266:'LIII',267:'LIV',268:'LV',269:'V',270:'VI',271:'VII',272:'VIII',\n        273:'IX',274:'X',275:'XI',276:'XII',277:'XIII',278:'XIV',279:'XV',280:'XVI',281:'XVII',282:'XVIII',\n        283:'XIX',284:'XX',285:'XXI',286:'XXII',287:'XXIII',288:'XXIV',289:'XXV',290:'XXVI',291:'XXVII',\n        292:'XXVIII',293:'XXIX',294:'XXX',295:'XXXI',296:'XXXII',297:'XXXIII',298:'XXXIV',299:'XXXV',\n        300:'XXXVI',301:'XXXVII',302:'XXXVIII',303:'XXXIX',304:'XL',305:'XLII',306:'XLIII',307:'XLIV',308:'L',\n        309:'LII',310:'LIII',311:'LIV',312:'LV',313:'V',314:'VI',315:'VII',316:'VIII',317:'IX',318:'X',\n        319:'XI',320:'XII',321:'XIII',322:'XIV',323:'XV',324:'XVI',325:'XVII',326:'XVIII',327:'XIX',\n        328:'XX',329:'XXI',330:'XXII',331:'XXIII',332:'XXIV',333:'XXV',334:'XXVI',335:'XXVII',336:'XXVIII',\n        337:'XXIX',338:'XXX',339:'XXXI',340:'XXXII',341:'XXXIII',342:'XXXIV',343:'XXXV',344:'XXXVI',345:'XXXVII',\n        346:'XXXVIII',347:'XXXIX',348:'XL',349:'XLII',350:"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # TODO: Implement this function!\n    # E.g.: tup = (1, 2, 3)\n    #     return tuple(map(lambda x: x + 1, tup))\n    return tuple(map(lambda x: x + 1, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \" \".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup[0]) + tuple(test_tup[1])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join([str(x) for x in test_tup])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in test_tup:\n        yield i\n    "
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    list_of_list = []\n    list_of_list.append(test_tup[0])\n    for i in range(1,len(test_tup)):\n        list_of_list.append(test_tup[i])\n    return tuple(list_of_list)\n    \n    \ndef calculate_price(price_value):\n    '''\n    Write a function to calculate the amount of that value using the basic math:\n    '''\n    return price_value * 0.30\n    \n    \ndef order_check(order, type):\n    '''\n    Write a function that gets a list of lists of strings and checks if the order is valid.\n    '''\n    return order[0][2] == type\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    lst = []\n    for item in test_tup:\n        lst.append(item)\n    return tuple(lst)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # TODO: Implement this method\n    if test_tup is None or len(test_tup) < 2:\n        return test_tup\n    # TODO: Add your code here\n    elif isinstance(test_tup[0], tuple) and isinstance(test_tup[1], tuple):\n        # first tuple is the first element, second tuple is the second element\n        # hence the element that will be concatenated is first element in the tuple\n        return tuple(test_tup[0] + test_tup[1])\n    else:\n        # if both tuples are not of same length\n        return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n    \ndef compare_tuple(t1, t2):\n    '''\n    Write a function to compare the tuple of two tuples.\n    '''\n    for key, value in t1.items():\n        if key not in t2:\n            return False\n        if not compare_tuple(value, t2[key]):\n            return False\n    return True\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    summ = 0\n    count = 0\n    for i in range(1, n+1):\n        summ = summ + i**3\n        count += 1\n    return summ/count\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum = sum + i\n        return sum / (n**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(n):\n        cubes.append(i**3)\n    return sum(cubes) / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    lst = []\n    for i in range(1,n):\n        lst.append(i**3)\n    return sum(lst)//len(lst)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    def get_average(n):\n        if n==0:\n            return 0\n        else:\n            return n*n*n\n    \n    result=0\n    for i in range(1,n+1):\n        result=result+get_average(i)\n    return result/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += (i**3)\n    return sum_of_cubes/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += i\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum(range(1, n + 1)) / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 3)\n    return sum/pow(n, 3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Your code here\n    return sum([x**3 for x in range(n)])/n\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for item in test_tuple:\n        if item[0]!= 'Rear':\n            rear_index_list.append(item)\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    n = len(test_tuple)\n    if n <= 1:\n        return test_tuple[0]\n    \n    output_tuple = []\n    for i in range(n-1):\n        output_tuple.append(test_tuple[i])\n    return extract_rear(output_tuple)\n    \ndef remove_rear(test_tuple):\n    '''\n    Write a function to remove the first and last element of each string in the given tuple.\n    '''\n    if test_tuple[0] == '0':\n        return (test_tuple[1:],)\n    else:\n        return (test_tuple[:-1],)\n    \ndef remove_rear_1(test_tuple):\n    '''\n    Write a function to remove the first and last element of each string in the given tuple.\n    '''\n    if test_tuple[0] == '0':\n        return ('1',) + test_tuple[1:]\n    else:\n        return ('1',) + test_tuple[:-1]\n    \ndef remove_rear_2(test_tuple):\n    '''\n    Write a function to remove the first and last element of each string in the given tuple.\n    '''\n    if test_tuple[0] == '0':\n        return ('0',) + test_tuple[1:]\n    else:\n        return ('0',) + test_tuple[:-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # get the length of the string\n    length = len(test_tuple[0])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0][3]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list=[]\n    for index,value in enumerate(test_tuple[0]):\n        rear_list.append(value)\n    return tuple(rear_list)\n    \ntest_tuple = (\"Apple\",\"Banana\",\"Carrot\")\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test = test_tuple[0]\n    test = test.split(' ')\n    test = list(filter(None, test))\n    return tuple(test)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    i=0\n    rear_list=[]\n    while i<len(test_tuple):\n        if test_tuple[i]=='R' and test_tuple[i+1]=='E':\n            i+=1\n            rear_list.append(i)\n        elif test_tuple[i]=='E' and test_tuple[i+1]=='E':\n            i+=1\n            rear_list.append(i)\n        else:\n            i+=1\n    return(rear_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = tuple([i.split('-')[1] for i in test_tuple[1]])\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for element in test_tuple:\n        rear_index.append(element.index(1))\n    return rear_index\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([x for x in list1 if x == x[::-1]])\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n    \ndef print_list(list1):\n    '''\n    Write a function that prints the list.\n    '''\n    print(list1)\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n=0\n    for i in range(0,len(list1)): \n        if list1[i]==x: \n            n=n+1\n    return n\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        count += len(i)\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if (list1[i]==x):\n            count=count+1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) <= 0: \n        return 0\n    for i in range(0, len(list1)): \n        if x == list1[i][-1]: \n            return len(list1[i]) \n    return 0\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # d = dict()\n    # for num in nums:\n    #     if num % 2!= 0:\n    #         d[num] = nums.count(num)\n    # return d\n    d = {}\n    for num in nums:\n        if num % 2 == 0:\n            d[num] = nums.count(num)\n    return d\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 1:\n            nums.remove(nums[i])\n        else:\n            i = i + 1\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n    #return filter(lambda n: n%2!= 0, nums)\n    #return list(filter(lambda n: n%2!= 0, nums))\n    #return filter(lambda n: n%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for x in nums:\n        if x % 2 == 0:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums_odd = [x for x in nums if x%2!= 0]\n    return nums_od"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            nums[i] = 0\n        else:\n            nums[i] = 1\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.search(r'([^-]+)', dt).group(1)\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    result = dt.split('-')\n    if len(result) == 3:\n        result = result[1].split('.')\n        result[1] = str(int(result[1]) + 1)\n        result = '-'.join(result)\n    else:\n        result = dt\n    return result\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('/', '-')\n    dt = dt.replace(':', '-')\n    dt = dt.replace(' ', '-')\n    dt = dt.replace('.', '-')\n    dt = dt.replace('-', '-')\n    dt = dt.replace(' ', '-')\n    dt = dt.replace('-', '-')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #import re\n    regex = r'^(0?[1-9]\\d|1[0-2]|[12][0-9][0-9]|3[01])-(0?[1-9]\\d|1[0-2]|[12][0-9][0-9]|3[01])-(0?[1-9]\\d|1[0-2]|[12][0-9][0-9]|3[01])$'\n    #dt = '01-01-1990'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = dt.replace('-', '')\n    new_dt = new_dt.split(' ')\n    new_dt = new_dt[0]\n    new_dt = new_dt[1:]\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace('/', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace('-', '-')\n    new_dt = new_dt.replace('-', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace('/', '-')\n    new_dt = new_dt.replace('/', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace('-', '-')\n    new_dt = new_dt.replace('-', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_dt = new_dt.replace(' ', '-')\n    new_d"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    pattern = re.compile(r'(\\d{1,2})-(\\d{1,2})-(\\d{4})')\n    date = pattern.search(dt).group(1)\n    month = pattern.search(dt).group(2)\n    day = pattern.search(dt).group(3)\n    return '%s-%s-%s' % (day, month, date)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #convert it to yyyy-mm-dd format\n    dt = dt.strftime('%Y-%m-%d')\n    #convert it to dd-mm-yyyy format\n    dt = dt.split('-')\n    dt[0] = dt[0] + '-'\n    dt[1] = dt[1] + '-'\n    dt[2] = dt[2] + '-'\n    dt = ''.join(dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #Taking input\n    date = dt\n    #Formatting\n    date = re.sub(r'^([1-2][0-9])\\-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9])\\-(0[1-9]|[12][0-9])$', '-01-02-03', date)\n    date = re.sub(r'^[1-2][0-9]\\-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9])\\-(0[1-9]|[12][0-9])$', '-01-02-03', date)\n    date = re.sub(r'^\\d\\d\\d\\d\\d\\d$', '-01-02-03', date)\n    date = re.sub(r'^\\d\\d\\d\\d$', '-01-02-03', date)\n    date = re.sub(r'^\\d\\d\\d\\d$', '-01-02-03', date)\n    date = re.sub(r'^\\d\\d\\d\\d\\d$', '-01-02-03', date)\n    # return date.replace(' ', '-')\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('-','.')\n    if len(dt)==0:\n        return dt\n    else:\n        t = dt.split('-')\n        t = t[0]\n        t = t.replace('.','-')\n        if len(t)==0:\n            return t\n        else:\n            y = int(t[0:4])\n            m = int(t[4:6])\n            d = int(t[6:8])\n            return '%s-%s-%s'%(y,m,d)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = dt.split('-')\n    if len(date_list) > 2:\n        date_list = date_list[:2] + date_list[2:]\n    date_format = \"-\".join(date_list)\n    return date_format\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_wrapper(array):\n        if len(array) < 2:\n            return array\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_insertion(my_list):\n        '''\n        Write a method to implement a shell sort.\n        '''\n        for i in range(1, len(my_list)):\n            current_index = i\n            while current_index > 0:\n                if my_list[current_index] > my_list[current_index - 1]:\n                    temp = my_list[current_index]\n                    my_list[current_index] = my_list[current_index - 1]\n                    my_list[current_index - 1] = temp\n                current_index -= 1\n        return my_list\n    for j in range(len(my_list) - 1, 0, -1):\n        for i in range(j - 1):\n            if my_list[i] > my_list[i + 1]:\n                temp = my_list[i]\n                my_list[i] = my_list[i + 1]\n                my_list[i + 1] = temp\n    return my_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Write your code here\n    for i in range(len(my_list)):\n        for j in range(len(my_list)-i-1):\n            if my_list[j] > my_list[j+1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j+1]\n                my_list[j+1] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    length = len(my_list)\n    \n    def half_sort(list):\n        '''\n        Function to half the given list.\n        '''\n        \n        half = length // 2\n        \n        for i in range(half, -1, -1):\n            for j in range(i+1, length):\n                if list[j] < list[i]:\n                    list[i], list[j] = list[j], list[i]\n        \n        return list\n        \n    def quick_sort(list):\n        '''\n        Function to sort the given list by using quick sort.\n        '''\n        \n        if len(list) <= 1:\n            return list\n        \n        pivot = list[0]\n        smaller = [i for i in list[1:] if i <= pivot]\n        bigger = [i for i in list[1:] if i > pivot]\n        \n        return quick_sort(smaller) + [pivot] + quick_sort(bigger)\n    \n    return half_sort(my_list) + quick_sort(my_list)\n    "
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass # remove pass statement\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # write your code here\n    length = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Create a running tally of the number of elements we need to sort\n    total_numbers_to_sort = n * 3\n    running_total = total_numbers_to_sort\n    running_total_filtered = 0\n    \n    # Set the size of the running tally to be the number of elements\n    # we need to sort\n    while running_total > 0:\n        # Get the number of elements left in the running tally\n        num_of_elements_left = running_total - 1\n        \n        # Do the sort while the number of elements left is greater than 1\n        # Set the running tally to be the number of elements we need to sort\n        while num_of_elements_left > 0:\n            # Get the current number of elements left\n            current_number_left = num_of_elements_left\n            # Calculate the index of the current number left\n            index_left = current_number_left - 1\n            \n            # Shift the current index down one position\n            while index_left > 0 and my_list[index_left] < my_list[index_left-1]:\n                # If the shift takes place, then move index_left down one position\n                index_left -= 1\n                \n            # If the index left is less than or equal to zero, then move up one position\n            if index_left < 0:\n                # If the index left is less than zero, then move up one position\n                index_left = index_left + 1\n            \n            # Insert the current number left into the running tally\n            my_list[index_left] = my_list[current_number_left]\n            \n            # Shift the index left down one position\n            num_of_elements_left -= 1\n        \n        # Get the final running tally\n        running_total_filtered = my_list[0] + running_total_filtered\n        \n        # Decrement running tally by removing the number of elements that have been filtered\n        running_total = running_total - running_total_filtered\n        \n        # Print the running tally to a file\n        print(my_list[0:running_total_filtered:], file=open(\"sort.txt\", \"w\"))\n        \n    # Output the sort\n    print(my_list[0:running_total_filtered:], file=open(\"sort.txt\", \"w\"))\n    \n    # Return the sorted list\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return ((test_tup1[0], test_tup1[1]), (test_tup2[0], test_tup2[1]))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(list.__getitem__, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Cant Evaluate\")\n        return False\n    \n    for item in test_tup1:\n        if type(item) is tuple:\n            test_tup1.remove(item)\n            test_tup2.remove(item)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(test_tup1) + list(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    t_l1, t_l2 = test_tup1\n    t_r1, t_r2 = test_tup2\n    l1 = list(t_l1)\n    l2 = list(t_l2)\n    r1 = list(t_r1)\n    r2 = list(t_r2)\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    r1 = sorted(r1)\n    r2 = sorted(r2)\n    return l1, l2, r1, r2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 & test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1.__and__(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) > 0 and len(test_tup2) > 0:\n        if len(test_tup1) < len(test_tup2):\n            return test_tup2[:len(test_tup1)]\n        elif len(test_tup2) < len(test_tup1):\n            return test_tup1[:len(test_tup2)]\n        else:\n            return test_tup1[:len(test_tup2)] + test_tup2[:len(test_tup1)]\n    else:\n        return [test_tup1]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return and_tuples_from_tuples(test_tup1, test_tup2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print('Enter the coordinates of a parabola:')\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print('Enter the coordinates of a perpendicular line from'+ str(a) +'to'+ str(b) + ':')\n    d = int(input())\n    print('Enter the coordinates of the other point in the plane from'+ str(b) +'to'+ str(c) + ':')\n    e = int(input())\n    return [a,b,c,d,e]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    try:\n        a = float(a)\n        b = float(b)\n        c = float(c)\n        if (a == 0):\n            print(\"Value should not be 0\")\n        else:\n            x = (b*b) - (4*a*c)\n            y = (b*a) - (3*b*c)\n            print(\"Ax=\", x,\"Ay=\", y)\n    except ValueError as ve:\n        print(\"Error: {}\".format(ve))\n    \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = ((b**2) - (4*a*c))**(1/2)\n    if (delta<0):\n        return None\n    else:\n        return (4*a*c)/(b**2 + delta**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = [a, b, c]\n    y = [1, 1, 1]\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4 * a * c\n    x1 = (-b + delta**(1/2))/(2 * a)\n    x2 = (-b - delta**(1/2))/(2 * a)\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(a,b,c)\n    y = 0\n    for i in range(1,len(x)):\n        y = y + (x[i]**2)\n    return y\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (c < 0): \n        raise ValueError('C must be positive') \n    elif (c == 0): \n        return 0\n    elif (c < 0): \n        return -1 * parabola_directrix(a, b, c) \n    elif (b < 0): \n        return parabola_directrix(a, b, c) \n    else: \n        return 1 + parabola_directrix(a, b, c) \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a * (1/b)\n    y = (a * b * (1 - (a**2 - b**2))) / (1 - (a**2 - b**2)**2)\n    z = (1/2) * a * (1 - y * (a**2 - b**2))\n    return x, y, z\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # create an array\n    parabola = [[a,b], [c,0]]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    d = ((b**2) - (4*a*c)) / (2*a) \n    return d\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = set(list1) & set(list2)\n    if len(common) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common_elements.append(i)\n    return len(common_elements) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_index = 0\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            for j in range(len(list2)):\n                if list2[j] in list1[i]:\n                    common_index += 1\n    return common_index >= len(list1)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    temp = list1[0]\n    element = list1[0]\n    \n    for i in range(len(list2)):\n        if temp == list2[i]:\n            if list1[i] not in list2:\n                list1.remove(temp)\n                return True\n            else:\n                list1.remove(temp)\n                return False\n        \n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    list1_length = len(list1)\n    list2_length = len(list2)\n    \n    common_element = 0\n    \n    for i in range(list1_length):\n        if (list1[i] in list2):\n            common_element += 1\n    \n    return common_element >= 1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \n    \ndef common_elements(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements2(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements3(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements4(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements5(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements6(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements7(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements8(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements9(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements10(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements11(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements12(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements13(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements14(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements15(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements16(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements17(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements18(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements19(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return Tru"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    intersection = []\n    for i in list1:\n        if i in list2:\n            intersection.append(i)\n    return len(intersection) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # TODO: Write the code for this function\n    #HINT: You might want to make use of the `set` function from collections\n    return len(list1.intersection(list2)) > 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height == 0:\n        return 0\n    elif height < 0:\n        return median_trapezium(base1,base2,height*(-1))\n    elif height > 0:\n        if base1[0] <= base2[0]:\n            return median_trapezium(base1,base2,height)\n        else:\n            return median_trapezium(base2,base1,height)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * (height/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    L1,L2 = 0,0\n    if base1 > base2:\n        L1,L2 = base1,base2\n    else:\n        L1,L2 = base2,base1\n    if L1 < L2:\n        L1,L2 = L2,L1\n    if L1%2 == 0:\n        mid = int(L1/2)\n    else:\n        mid = int((L1+L2)/2)\n    return mid\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height_array = np.linspace(0,height,num=len(base1))\n    area = 0\n    for i in range(len(height_array)):\n        area+=height_array[i]**2\n    area = area/4\n    return np.sqrt(area)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<height:\n        if base2>height:\n            return (base1+base2)/2\n        else:\n            return (base1+base2)/2\n    else:\n        if base2>height:\n            return base1\n        else:\n            return base2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2+height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if(height<=base1):\n        return (base1+base2)/2\n    if(height>base2):\n        return base2\n    return base2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # For all odd integers from base 1 to base 2\n    # (inclusively)\n    # For all even integers from base 2 to base 2\n    # (inclusively)\n    # Evaluate the median\n    # Return the median as the length\n    return (round(base2+(height/2),2))\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Base cases\n    if base1 == base2:\n        return (base1 + base2) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    import math\n    height = abs(height)\n    n = len(base1)\n    p = height / 2.0\n    q = (base1[n] + base2[n]) / 2.0\n    return (p, q)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    i=0\n    while i<len(arr):\n        if arr[i]<number:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) <= 1:\n        return False\n    elif arr[0] > arr[1]:\n        return True\n    elif arr[1] > arr[0]:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    if arr[0] > number:\n        return True\n    return check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return (arr[number] >= arr[number - 1])\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    def greater_than(arr, number, index):\n        if number > arr[index]:\n            return True\n        return False\n    \n    for index, value in enumerate(arr):\n        if greater_than(arr, number, index):\n            print(f'{number} is greater than {arr[index]}')\n            return\n    print(f'{number} is not greater than any element')\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > arr[1]:\n        return True\n    elif arr[0] < arr[1]:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr.count(number) > 0:\n        return True\n    else:\n        return False\n    \ndef check_lesser(arr, number):\n    '''\n    Write a function to check whether the entered number is less than the elements of the given array.\n    '''\n    if arr.count(number) > 0:\n        return True\n    else:\n        return False\n    \ndef count_slots(arr):\n    '''\n    Write a function to count the number of unique elements in an array.\n    '''\n    return len(set(arr))\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\x0b','')\n    text = text.replace('\\x0c','')\n    text = text.replace('\\x0d','')\n    text = text.replace('\\x0e','')\n    text = text.replace('\\x0f','')\n    text = text.replace('\\x10','')\n    text = text.replace('\\x11','')\n    text = text.replace('\\x12','')\n    text = text.replace('\\x13','')\n    text = text.replace('\\x14','')\n    text = text.replace('\\x15','')\n    text = text.replace('\\x16','')\n    text = text.replace('\\x17','')\n    text = text.replace('\\x18','')\n    text = text.replace('\\x19','')\n    text = text.replace('\\x1a','')\n    text = text.replace('\\x1b','')\n    text = text.replace('\\x1c','')\n    text = text.replace('\\x1d','')\n    text = text.replace('\\x1e','')\n    text = text.replace('\\x1f','')\n    text = text.replace('\\x20','')\n    text = text.replace('\\x21','')\n    text = text.replace('\\x22','')\n    text = text.replace('\\x23','')\n    text = text.replace('\\x24','')\n    text = text.replace('\\x25','')\n    text = text.replace('\\x26','')\n    text = text.replace('\\x27','')\n    text = text.replace('\\x28','')\n    text = text.replace('\\x29','')\n    text = text.replace('\\x2a','')\n    text = text.replace('\\x2b','')\n    text = text.replace('\\x2c','')\n    text = text.replace('\\x2d','')\n    text = text.replace('\\x2e','')\n    text = text.replace('\\x2f','')\n    text = text.replace('\\x30','')\n    text = text.replace('\\x31','')\n    text = text.replace('\\x32','')\n    text = text.replace('\\x33','')\n    text = text.replace('\\x34','')\n    text = text.replace('\\x35','')\n    text = text.replace('\\x36','')\n    text = text.replace('\\x37','')\n    text = text.replace('\\x38','')\n    text = text.replace('\\x39','')\n    text = text.replace('\\x3a','')\n    text = text.replace('\\x3b','')\n    text = text.replace('\\x3c','')\n    text = text.replace('\\x3d','')\n    text = text.replace('\\x3e','')\n    text = text.replace('\\x3f','')\n    text = text.replace('\\x40','')\n    text = text.replace('\\x41','')\n    text = text.replace('\\x42','')\n    text = text.replace('\\x43','')\n    text = text.replace('\\x44','')\n    text = text.replace('\\x45','')\n    text = text.replace('\\x46','')\n    text = text.replace('\\x47','')\n    text = text.replace('\\x48','')\n    text = text.replace('\\x49','')\n    text = text.replace('\\x4a','')\n    text = text.replace('\\x4b','')\n    text = text.replace('\\x4c','')\n    text = text.replace('\\x4d','')\n    text = text.replace('\\x4e','')\n    text = text.replace('\\x4f','')\n    text = text.replace('\\x50','')\n    text = text.replace('\\x51','')\n    text = text.replace('\\x52','')\n    text = text.replace('\\x53','')\n    text = text.replace('\\x54','')\n    text = text.replace('\\x55','')\n    text = text.replace('\\x56','')\n    text = text.replace('\\x57','')\n    text = text.replace('\\x58','')\n    text = text.replace('\\x59','')\n    text = text.replace('\\x5a','')\n    text = text.replace('\\x5b','')\n    text = text.replace('\\x5c','')\n    text = text.replace('\\x5d','')\n    text = text.replace('\\x5e','')\n    text = text.replace('\\x5f','')\n    text = text.replace('\\x60','')\n    text = text.replace('\\x61','')\n    text = text.replace('\\x62','')\n    text = text.replace('\\x63','')\n    text = text.replace('\\x64','')\n    text = text.replace('\\x65','')\n    text = text.replace('\\x66','')\n    text = text.replace('\\x67','')\n    text = text.replace('\\x68','')\n    text = text.replace('\\x69','')\n    text = text.replace('\\x6a','')\n    text = text.replace('\\x6b','')\n    text = text.replace('\\x6c','')\n    text = text.replace('\\x6d','')\n    text = text.replace('\\x6e','')\n    text = text.replace('\\x6f','')\n    text = text.replace('\\x70','')\n    text = text.replace('\\x71','')\n    text = text.replace('\\x72','')\n    text = text.replace('\\x73','')\n    text = text.replace('\\x74','')\n    text = text.replace('\\x75','')\n    text = text.replace('\\x76','')\n    text = text.replace('\\x77','')\n    text = text.replace('\\x78','')\n    text = text.replace('\\x79','')\n    text = text.replace('\\x7a','')\n    text = text.replace('\\x7b','')\n    text = text.replace('\\x7c','')\n    text = text.replace('\\x7d','')\n    text = text.replace('\\x7e','')\n    text = text.replace('\\x7f','')\n    text = text.replace('\\x80','')\n    text = text.replace('\\x81','')\n    text = text.replace('\\x82','')\n    text = text.replace('\\x83','')\n    text = text.replace('\\x84','')\n    text = text.replace('\\x85','')\n    text = text.replace('\\x86','')\n    text = text.replace('\\x87','')\n    text = text.replace('\\x88','')\n    text = text.replace('\\x89','')\n    text = text.replace('\\x8a','')\n    text = text.replace('\\x8b','')\n    text = text.replace('\\x8c','')\n    text = text.replace('\\x8d','')\n    text = text.replace('\\x8e','')\n    text = text.replace('\\x8f','')\n    text = text.replace('\\x90','')\n    text = text.replace('\\x91','')\n    text = text.replace('\\x92',''"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a'\n    \n    \n    pattern = r'(?:(?<=b)\\w+)(?=\\w+)'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n    \n    # Return the string\n    return new_string\n    \n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten or more b's.\n    '''\n    # This is a very basic regex patter\n    # Replace 'b' with 'a'\n    # Put it in a variable\n    # Iterate through each character of the string\n    # If the character has an a in it, then it's part of an opening b\n    # If it doesn't, then the part is a closing b\n    # Return the new string with the matched 'a' and the matched 'b'\n    \n    pattern = r'(?:(?<=b)\\w+)(?:(?<=a)\\w+)?'\n    regex = re.compile(pattern)\n    new_string = regex.findall(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[2:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[1:3]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[3:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[5:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[6:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[7:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[8:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[9:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[10:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[11:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    #a_match = re.match(r'a(?:[^b]b)?(?:[^b]b)?', text)\n    if a_match is not None:\n        match = a_match.group(1)\n        match = match[12:]\n        return match\n    else:\n        return 'No matches found'\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one o"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = \"a[a-z]*b?\"\n    return re.search(pattern,text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\b'\n    if not re.search(pattern, text):\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'(?P<a>a)b(?=\\s|\\w|.)', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #check if a is a letter in text, if not, return false.\n    if(not re.search('^[a-zA-Z]*$',text)):\n        return False\n    #if a is a letter, iterate through the letters, if a = b, return true.\n    else:\n        for i in text:\n            if i == 'a':\n                if re.search('^[a-zA-Z]*$',text):\n                    return True\n            if i == 'b':\n                if re.search('^[a-zA-Z]*$',text):\n                    return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_no_b = re.sub('[b]','',text)\n    return re.match('([a-zA-Z0-9_]{1,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]{0,}[a-zA-Z0-9_]"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    l = len(text)\n    #print(l)\n    pattern = 'a'*l\n    #print(pattern)\n    #print(type(pattern))\n    text = re.sub(pattern, 'B', text)\n    #print(text)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall('a[b]', text)\n    result.append(text)\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = n\n    while x >= 10:\n        x = x // 10\n    x = x % 10\n    return x\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 1\n    elif n == 3 :\n        return 2\n    elif n == 4 :\n        return 3\n    elif n == 5 :\n        return 4\n    elif n == 6 :\n        return 5\n    elif n == 7 :\n        return 6\n    elif n == 8 :\n        return 7\n    elif n == 9 :\n        return 8\n    elif n == 10 :\n        return 9\n    elif n == 11 :\n        return 10\n    elif n == 12 :\n        return 11\n    elif n == 13 :\n        return 12\n    elif n == 14 :\n        return 13\n    elif n == 15 :\n        return 14\n    elif n == 16 :\n        return 15\n    elif n == 17 :\n        return 16\n    elif n == 18 :\n        return 17\n    elif n == 19 :\n        return 18\n    elif n == 20 :\n        return 19\n    elif n == 21 :\n        return 20\n    elif n == 22 :\n        return 21\n    elif n == 23 :\n        return 22\n    elif n == 24 :\n        return 23\n    elif n == 25 :\n        return 24\n    elif n == 26 :\n        return 25\n    elif n == 27 :\n        return 26\n    elif n == 28 :\n        return 27\n    elif n == 29 :\n        return 28\n    elif n == 30 :\n        return 29\n    elif n == 31 :\n        return 30\n    elif n == 32 :\n        return 31\n    elif n == 33 :\n        return 32\n    elif n == 34 :\n        return 33\n    elif n == 35 :\n        return 34\n    elif n == 36 :\n        return 35\n    elif n == 37 :\n        return 36\n    elif n == 38 :\n        return 37\n    elif n == 39 :\n        return 38\n    elif n == 40 :\n        return 39\n    elif n == 41 :\n        return 40\n    elif n == 42 :\n        return 41\n    elif n == 43 :\n        return 42\n    elif n == 44 :\n        return 43\n    elif n == 45 :\n        return 44\n    elif n == 46 :\n        return 45\n    elif n == 47 :\n        return 46\n    elif n == 48 :\n        return 47\n    elif n == 49 :\n        return 48\n    elif n == 50 :\n        return 49\n    elif n == 51 :\n        return 50\n    elif n == 52 :\n        return 51\n    elif n == 53 :\n        return 52\n    elif n == 54 :\n        return 53\n    elif n == 55 :\n        return 54\n    elif n == 56 :\n        return 55\n    elif n == 57 :\n        return 56\n    elif n == 58 :\n        return 57\n    elif n == 59 :\n        return 58\n    elif n == 60 :\n        return 59\n    elif n == 61 :\n        return 60\n    elif n == 62 :\n        return 61\n    elif n == 63 :\n        return 62\n    elif n == 64 :\n        return 63\n    elif n == 65 :\n        return 64\n    elif n == 66 :\n        return 65\n    elif n == 67 :\n        return 66\n    elif n == 68 :\n        return 67\n    elif n == 69 :\n        return 68\n    elif n == 70 :\n        return 69\n    elif n == 71 :\n        return 70\n    elif n == 72 :\n        return 71\n    elif n == 73 :\n        return 72\n    elif n == 74 :\n        return 73\n    elif n == 75 :\n        return 74\n    elif n == 76 :\n        return 75\n    elif n == 77 :\n        return 76\n    elif n == 78 :\n        return 77\n    elif n == 79 :\n        return 78\n    elif n == 80 :\n        return 79\n    elif n == 81 :\n        return 80\n    elif n == 82 :\n        return 81\n    elif n == 83 :\n        return 82\n    elif n == 84 :\n        return 83\n    elif n == 85 :\n        return 84\n    elif n == 86 :\n        return 85\n    elif n == 87 :\n        return 86\n    elif n == 88 :\n        return 87\n    elif n == 89 :\n        return 88\n    elif n == 90 :\n        return 89\n    elif n == 91 :\n        return 90\n    elif n == 92 :\n        return 91\n    elif n == 93 :\n        return 92\n    elif n == 94 :\n        return 93\n    elif n == 95 :\n        return 94\n    elif n == 96 :\n        return 95\n    elif n == 97 :\n        return 96\n    elif n == 98 :\n        return 97\n    elif n == 99 :\n        return 98\n    elif n == 100 :\n        return 99\n    elif n == 101 :\n        return 100\n    elif n == 102 :\n        return 101\n    elif n == 103 :\n        return 102\n    elif n == 104 :\n        return 103\n    elif n == 105 :\n        return 104\n    elif n == 106 :\n        return 105\n    elif n == 107 :\n        return 106\n    elif n == 108 :\n        return 107\n    elif n == 109 :\n        return 108\n    elif n == 110 :\n        return 109\n    elif n == 111 :\n        return 110\n    elif n == 112 :\n        return 111\n    elif n == 113 :\n        return 112\n    elif n == 114 :\n        return 113\n    elif n == 115 :\n        return 114\n    elif n == 116 :\n        return 115\n    elif n == 117 :\n        return 116\n    elif n == 118 :\n        return 117\n    elif n == 119 :\n        return 118\n    elif n == 120 :\n        return 119\n    elif n == 121 :\n        return 120\n    elif n == 122 :\n        return 121\n    elif n == 123 :\n        return 122\n    elif n == 124 :\n        return 123\n    elif n == 125 :\n        return 124\n    elif n == 126 :\n        return 125\n    elif n == 127 :\n        return 126\n    elif n == 128 :\n        return 127\n    elif n == 129 :\n        return 128\n    elif n == 130 :\n        return 129\n    elif n == 131 :\n        return 130\n    elif n == 132 :\n        return 131\n    elif n == 133 :\n        return 132\n    elif n == 134 :\n        return 133\n    elif n == 135 :\n        return 134\n    elif n == 136 :\n        return 135\n    elif n == 137 :\n        return 136\n    elif n == 138 :\n        return 137\n    elif n == 139 :\n        return 138\n    elif n == 140 :\n        return 139\n    elif n == 141 :\n        return 140\n    elif n == 142 :\n        return 141\n    elif n == 143 :\n        return 142\n    elif n == 144 :\n        return 143\n    elif n == 145 :\n        return 144\n    elif n == 146 :\n        return 145\n    elif n == 147 :\n        return 146\n    elif n == 148 :\n        return 147\n    elif n == 149 :\n        return 148\n    elif n == 150 :\n        return 149\n    elif n == 151 :\n        return 150\n    elif n == 152 :\n        return 151\n    elif n == 153 :\n        return 152\n    elif n == 154 :\n        return 153\n    elif n == 155 :\n        return 154\n    elif n == 156 :\n        return 155\n    elif n == 157 :\n        return 156\n    elif n == 158 :\n        return 157\n    elif n == 159 :\n        return 158\n    elif n == 160 :\n        return 159\n    elif n == 161 :\n        return 160\n    elif n == 162 :\n        return 161\n    elif n == 163 :\n        return 162\n    elif n == 164 :\n        return 163\n    elif n == 165 :\n        return 164\n    elif n == 166 :\n        return 165\n    elif n == 167 :\n    "
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        last = int(str(n)[-1])\n        if last == 0 :\n            return 0\n        else :\n            return last\n    else :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    '''\n    You can assume the given number is non-negative.\n    '''\n    '''\n    Example:\n    >>> last_Digit(12)\n    5\n    '''\n    '''\n    Given an integer, print its last digit.\n    '''\n    '''\n    Example:\n    >>> last_Digit(0)\n    ''\n    '''\n    if n < 0 :\n        print('error')\n    else :\n        print(n%10)\n        return n//10\n    \n    return\n    \n    \n    '''\n    N = int(input())\n    print(last_Digit(N))\n    return N\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    import math\n    return math.floor(math.log(n, 10))\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # TODO: Replace pass with your code here\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    if n%10==0 :\n        return n//10\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n > 0:\n        return n % 10\n    else:\n        return n // 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0 :\n        raise ValueError('The number must be positive')\n    \n    result = 0\n    # print(n)\n    while n > 0 :\n        result = n % 10\n        # print(result)\n        n = n // 10\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n >= 1 :\n        remainder = n % 10\n        n //= 10\n        if remainder == 0 :\n            return f'{remainder}'\n    return '0'\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for x in list1:\n        if x < 0:\n            list1.remove(x)\n    print(list1)\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #print(list1)\n    list2=[]\n    for i in range(0,len(list1)):\n        list2.append(-list1[i])\n    #print(list2)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            return i\n        return 0\n    return 0\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for num in list1:\n        if num < 0:\n            negative.append(num)\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for item in list1:\n        if item < 0:\n            neg_nos.append(item)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # TODO: Write your code here\n    neg_nos = list1[:]\n    neg_nos.sort(reverse = True)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list = []\n    for number in list1:\n        if number < 0:\n            neg_nos_list.append(-number)\n        else:\n            neg_nos_list.append(number)\n    return neg_nos_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for x in list1:\n        if x < 0:\n            neg_nos.append(x)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1)==0:\n        return 0\n    # print(str1)\n    odd_str = ''\n    for char in str1:\n        if char % 2!= 0:\n            odd_str += char\n    # print(odd_str)\n    # print(str1)\n    return odd_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] % 2!= 0:\n            str1 = str1[:i] + str1[i+1:]\n            print(str1)\n        if str1[i] % 2!= 0:\n            break\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #make a new string, with the characters removed\n    new_str=''\n    for i in str1:\n        if i%2==0:\n            new_str+=i\n    #print(new_str)\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = []\n    for char in str1:\n        if char % 2 == 0:\n            result.append(char)\n    return ''.join(result)\n    \ndef even(str1):\n    '''\n    Write a function that takes a string as a parameter\n    and returns a new string with all even characters.\n    '''\n    result = []\n    for char in str1:\n        if char % 2 == 0:\n            result.append(char)\n    return ''.join(result)\n    \ndef odd(str1):\n    '''\n    Write a function that takes a string as a parameter\n    and returns a new string with all odd characters.\n    '''\n    result = []\n    for char in str1:\n        if char % 2 == 1:\n            result.append(char)\n    return ''.join(result)\n    \ndef remove_even(str1):\n    '''\n    Write a function that takes a string as a parameter\n    and returns a new string with all even characters.\n    '''\n    result = []\n    for char in str1:\n        if char % 2 == 0:\n            result.append(char)\n    return ''.join(result)\n    \ndef make_palindrome(str1):\n    '''\n    Write a function that takes a string as a parameter\n    and returns a string with the first and last character of the input string reversed.\n    '''\n    result = str1[::-1]\n    return result\n    \ndef remove_palindrome(str1):\n    '''\n    Write a function that takes a string as a parameter\n    and returns a string with the first and last character of the input string without any other characters.\n    '''\n    result = str1[1:-1]\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    index = 0\n    if str1 is None or str1 == \"\":\n        return None\n    if str1.isalnum() == False:\n        return \"Invalid string\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # set initial condition\n    odd = 0\n    \n    # for loop to iterate over the string\n    for char in str1:\n        # if the character is odd then increment the odd value\n        if char % 2 == 1:\n            # add 1 to the odd value\n            odd = odd + 1\n    \n    # remove the odd value from the string\n    return str1.replace(str(odd) +'','')\n        "
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # store the count of odd characters\n    count = 0\n    # for all letters in the string\n    for x in str1:\n        # if the char is odd\n        if x == 'Odd':\n            # increment count\n            count = count + 1\n    # if count is odd\n    if count % 2 == 1:\n        # remove the even characters\n        str1 = str1[:-count]\n    # if count is even\n    else:\n        # remove the odd characters\n        str1 = str1[:-count + 1]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    l = len(str1)\n    \n    def odd(str):\n        '''\n        This function is to remove odd characters from a string.\n        '''\n        for i in range(len(str)):\n            if str[i] % 2 == 1:\n                str = str[:i] + str[i+1:]\n        return str\n    \n    i = 0\n    while i < l:\n        if i % 2 == 0:\n            str = odd(str1)\n            i += 1\n        else:\n            str = str1[:i] + str1[i+1:]\n        i += 1\n    return str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2=''\n    for i in str1:\n        if i%2==1:\n            str2+=i\n    print(str2)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # TODO: Count the number of bidirectional tuples in the test_list.\n    # HINT: Call the len() function to get the length of the test_list.\n    # HINT: Call the sum() function to get the total number of elements in the test_list.\n    # HINT: Call the max() function to get the largest element in the test_list.\n    # HINT: Call the min() function to get the smallest element in the test_list.\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    count = 0\n    \n    for el in test_list:\n        \n        if isinstance(el, tuple):\n            \n            if el[0] is el[1]:\n                \n                count += 1\n            \n    return count\n    \n    \n    \n    \ndef count_dbl_tuple_pairs(test_list):\n    '''\n    Write a function to count double tuple pairs.\n    '''\n    \n    count = 0\n    \n    for el in test_list:\n        \n        if isinstance(el, tuple):\n            \n            if el[0] is el[1]:\n                \n                count += 1\n            \n    return count\n    \n    \n    \ndef count_tuple_pair_counts(test_list):\n    '''\n    Write a function to count tuple pair counts.\n    '''\n    \n    count = 0\n    \n    for el in test_list:\n        \n        if isinstance(el, tuple):\n            \n            count += 1\n            \n    return count\n    \n    \n    \ndef count_sort_numbers_ordered(test_list):\n    '''\n    Write a function to count sorted numbers.\n    '''\n    \n    count = 0\n    \n    for el in test_list:\n        \n        if isinstance(el, list):\n            \n            count += len(el)\n    \n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i + 1] < test_list[i]:\n            total_count += 1\n    return total_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    temp_list = test_list[:]\n    temp_list.sort()\n    for i in range(len(temp_list)-1):\n        if temp_list[i] > temp_list[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for elem in test_list:\n        count += elem[0] * elem[1]\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for line in test_list:\n        bidirectional_pairs += line\n    return bidirectional_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    def count_bidirectional_tuple(pair):\n        '''\n        Write a function to count bidirectional tuple pairs.\n        '''\n        \n        bidirectional = []\n        \n        # print(pair)\n        \n        for i in pair:\n            \n            # print(i)\n            \n            if i[0] == i[1]:\n                \n                # print(i[0],i[1])\n                \n                bidirectional.append(i[0])\n                \n                # print(bidirectional)\n                \n                bidirectional.append(i[1])\n                \n                # print(bidirectional)\n                \n                # print(bidirectional)\n                \n                return bidirectional\n        \n        return bidirectional\n    \n    bidirectional = count_bidirectional(test_list)\n    \n    return bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        count += i[0] + i[1]\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    sorted_list = []\n    for i in range(len(test_list)):\n        sorted_list.append((test_list[i][0], test_list[i][1]))\n    sorted_list.sort(key=lambda x: (x[1], x[0]))\n    sorted_list = [x for (x, y) in sorted_list]\n    return sorted_list\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # Define the function\n    def join(L):\n        result = ''\n        for i in L:\n            result += i\n        return result\n    \n    # Create a list of integers from a list of integers\n    L = [int(x) for x in L]\n    \n    # Make a list of integers\n    result = L\n    \n    # Join the list of integers back into a single integer\n    result = join(result)\n    \n    # Return the final result\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L=sorted(L)\n    if len(L)<2:\n        return L[0]\n    if len(L)==2:\n        return L[1]\n    else:\n        s=L[0]+L[1]\n        return s\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L_sum = sum(L)\n    if L_sum == 0:\n        return 0\n    else:\n        return L_sum\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in L:\n        if type(i)!= int:\n            raise Exception('List has to be a list of integers')\n    for j in range(len(L)-1):\n        if type(L[j])!= int:\n            raise Exception('List has to be a list of integers')\n    \n    return L[0]\n    \n    \ndef main():\n    '''\n    Test the main function.\n    '''\n    L1 = [1, 2, 3]\n    L2 = [4, 5, 6]\n    L3 = [7, 8, 9]\n    \n    print(\"L1:\", L1)\n    print(\"L2:\", L2)\n    print(\"L3:\", L3)\n    print(\"Single to multiple:\", multiple_to_single(L1))\n    print(\"Single to multiple:\", multiple_to_single(L2))\n    print(\"Single to multiple:\", multiple_to_single(L3))\n    print(\"Split:\", split(L1))\n    print(\"Split:\", split(L2))\n    print(\"Split:\", split(L3))\n    print(\"Join:\", join(L1))\n    print(\"Join:\", join(L2))\n    print(\"Join:\", join(L3))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    '''\n    You can assume that the lengths of the lists are identical.\n    \n    Examples:\n    \n    >>> multi_to_single([1, 2, 3])\n    3\n    \n    >>> multi_to_single([10, 20, 30])\n    30\n    \n    >>> multi_to_single([15, 100, 100, 0])\n    15\n    '''\n    '''\n    You must validate the lengths of the lists.\n    '''\n    '''\n    Try the following:\n    \n    >>> multi_to_single([1,2,3,4,5,6,7,8])\n    64\n    \n    >>> multi_to_single([10,20,30,40,50,60,70,80])\n    60\n    \n    >>> multi_to_single([15, 100, 100, 0, 100, 100, 100, 0])\n    100\n    '''\n    '''\n    Write your solution in the format \"hi <number_of_people_to_join> <number_of_int_to_create>\".\n    '''\n    '''\n    Ask the user how many people to join.\n    '''\n    '''\n    Generate an integer for the number of people to join.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Once the user has selected the number of people to join, \n    write your solution in the format\n    \"hi <number_of_people_to_join> <number_of_int_to_create>\".\n    '''\n    '''\n    Write your solution in the format \"hi <number_of_people_to_join> <number_of_int_to_create>\".\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Write your solution in the format \"hi <number_of_people_to_join> <number_of_int_to_create>\".\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Create an array with an appropriate length.\n    '''\n    '''\n    Use a new variable to hold the correct length of the array.\n    '''\n    '''\n    Loop through and add the numbers that are closer to the correct length.\n    '''\n    '''\n    Print out the new array.\n    '''\n    '''\n    Use a new variable to hol"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # iterate through each list element\n    for x in L:\n        # append the element to the end of the string\n        yield int(x)\n    # return the result as a single integer\n    return int('')\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = '{}'\n    return s.format(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L.sort()\n    return int(''.join(str(L[i]) for i in range(len(L))))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) > 1:\n        return int(''.join(map(str, L)))\n    else:\n        return L[0]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower().replace('.', '')\n    adverb = re.findall(r'[A-Za-z]+\\s*(?:\\s+?)(\\w*)(?:\\s*)(?:(?!\\s*\\.))(?:\\s*)(\\w*)', text)\n    adverb_pos = []\n    for item in adverb:\n        first, last, word = item.split(',')\n        adverb_pos.append(first +'' + last +'' + word +'' + first)\n    return adverb_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    adverbs = re.findall(r'a\\w+', text)\n    adverb_position = 0\n    adverb = ''\n    for adverb in adverbs:\n        if adverb[-1]!= '.':\n            adverb = adverb + '.'\n        for position in range(0,len(adverb)):\n            if adverb[position] == '.':\n                adverb_position = adverb_position + position\n    return adverb_position, adverb\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence_to_find = text.lower()\n    # Create the regular expression\n    regex = '.*e.*o.*'\n    # Find the first occurence of the adverb in the sentence\n    first_adverb_positions = []\n    for i in range(0,len(sentence_to_find)):\n        if(re.search(regex,sentence_to_find[i])):\n            first_adverb_positions.append(i)\n    # Find the first occurence of the adverb in the sentence\n    last_adverb_positions = []\n    for i in range(0,len(sentence_to_find)):\n        if(re.search('^[AEIOU]+',sentence_to_find[i])):\n            last_adverb_positions.append(i)\n    # Find the first occurence of the adverb in the sentence\n    adverb_position = -1\n    for i in range(0,len(first_adverb_positions)):\n        if(first_adverb_positions[i] < last_adverb_positions[i]):\n            adverb_position = first_adverb_positions[i]\n        else:\n            adverb_position = last_adverb_positions[i]\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    text = re.findall('([^\\s]+)', text)\n    result = [(position, word) for position, word in enumerate(text) if word.endswith('ing')]\n    result.sort(key = lambda x: x[0])\n    adverb_position = result[0][0]\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'(adverb)([a-zA-Z])'\n    adverbs = re.findall(regex, text)\n    adverb_position_table = {}\n    for adverb in adverbs:\n        adverb_position = text.find(adverb[0].lower() +'s')\n        adverb_position_table[adverb[0].lower() +'s'] = adverb_position\n    return adverb_position_table\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    r = re.compile('\\w+\\?\\w+')\n    regex = r.findall(text)\n    return regex[0][0], regex[0][1]\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # start = re.search('\\w+',text)\n    # print(start)\n    # end = re.search('\\w+',text)\n    # print(end)\n    # result = re.search('^'+text+'\\.',text)\n    # print(result)\n    # print(result.start())\n    # print(result.end())\n    # print(result.start()+1)\n    # print(result.end()-1)\n    # print(result.start()-1)\n    # print(result.end()+1)\n    result = re.search('^'+text+'\\.',text)\n    if result!= None:\n        pos_adverb = result.start()\n        pos_adverb_end = result.end()\n        adverb = text[pos_adverb:pos_adverb_end]\n        return (pos_adverb, adverb)\n    else:\n        return (0, '')\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    for i in range(0, len(text)):\n        if text[i] == \"ADV\" or text[i] == \"ADV-\":\n            return (i, i+1)\n    return (-1, -1)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'^(ADV)')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Initialize empty list\n    positions = []\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def area_of_cube(l):\n        '''\n        Calculate the area of a cube with the given size.\n        '''\n        return (4*l**3)\n    area_of_cube = area_of_cube(l)\n    return area_of_cube\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Start writing your code here\n    surfacearea = l**3\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 4*(l**3)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Check if the entered size is valid\n    if l <= 0:\n        print('Error: Invalid input!')\n        return 0\n    # If the entered size is valid\n    elif l > 200:\n        print('Error: Large size!')\n        return 0\n    else:\n        # Return the surface area of the cube\n        return (4 * l * l)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l):\n        for j in range(l):\n            area += 2*(l-i)*(l-j)*1.0\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l * 4\n    print(\"\\nsurface area of cube is\", s)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                s += (i + j + k) * l\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(0, l):\n        for j in range(0, l):\n            for k in range(0, l):\n                area += (3 * i * j * k)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**3)*0.5\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 0.0\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    s=sum(nums)\n    return (s)/nums.count(positive)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    def is_positive(num):\n        '''\n        This function checks whether the integer is positive or not.\n        '''\n        if num == 0:\n            return False\n        return num > 0\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    def count_positive(nums):\n        count = 0\n        for i in range(0, len(nums)):\n            if nums[i] > 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Your code here\n    count_positives = 0\n    for i in nums:\n        if i > 0:\n            count_positives += 1\n    return (count_positives/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total_count=0\n    for num in nums:\n        if num>0:\n            total_count+=1\n    return total_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_sum = 0\n    for i in nums:\n        if i > 0:\n            pos_sum += 1\n    return pos_sum / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    max = -1\n    min = -1\n    for i in nums:\n        if i>0:\n            if i>max:\n                max = i\n            elif i<=max:\n                if max/i < min:\n                    min = max/i\n                    min = min\n            else:\n                if max/i < min:\n                    min = max/i\n                    min = min\n    return max-min+1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    N = len(nums)\n    return int(N/2)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    def findLargestNegative(list1): \n        \n        for i in range(len(list1)):\n            if (list1[i] < 0):\n                return list1[i]\n            else:\n                continue\n        return 0\n    return findLargestNegative(list1)\nlist1 = [2, -3, -5, 6, -6, 7, -8, -5, 6, -2, 3, -6, -7, 2, -5, 3, -2, -5, 3, -2, 5, -7, -8, 6, -2, -3, -5, -8, 3, -6, -2, 5, 2, -3, -5, 3, -7, 2, 6, -3, -4, 6, -5, 2, 4, -1, -5, 2, -1, -8, 2, -2, -7, -2, -3, -3, -2, -1, -7, -4, -5, -2, -8, -3, -4, -8, -5, -5, 7, 6, -2, -4, -7, -3, -1, -7, 7, -3, -8, -4, -5, 6, -5, 4, 6, 7, 8, 3, 2, -7, -8, -1, -2, -1, 1, 1, -8, 4, -4, 4, 6, 3, -2, 4, 1, -5, 5, 5, -5, -2, -3, -8, -3, -2, -2, -6, -2, -1, -5, -6, -2, 5, -5, -3, 4, 6, 4, -4, -2, -8, -1, -6, -3, -4, -6, 5, -4, -2, -4, -1, -3, -7, -1, -3, -4, -5, -2, -4, -8, 2, -1, -6, -8, -3, -6, 2, 5, -1, -2, -3, -5, -2, -2, -4, -6, 3, -1, -4, -5, -8, 5, -2, -8, -3, -5, 5, 4, -8, -2, -1, -5, -5, -5, -2, -4, -6, -7, -2, -3, -7, -3, -7, -4, -5, -3, -8, -1, -4, -6, -3, -4, -5, -5, -2, -8, 3, 6, -8, -6, -7, -5, -3, -6, -2, -8, -4, -5, -2, -8, -8, -8, -6, -4, -7, -4, -5, -6, -3, -4, -8, -1, -2, -5, -7, -8, -8, -3, -7, -2, -6, -5, -6, -5, -3, -8, -2, -2, -2, -3, -4, -5, -3, -1, -8, -4, -5, -1, -8, -8, -2, -8, -8, -7, -4, -6, -4, -2, -5, -5, -8, -3, -5, -5, -2, -3, -4, -3, -5, -3, -7, -7, -2, -4, -5, -2, -3, -8, -1, -6, -2, -3, -2, -8, -7, -4, -4, -2, -4, -2, -1, -2, -7, -5, -8, -8, -6, -3, -8, -4, -4, -1, -1, -7, -4, -5, -8, -2, -5, -6, -2, -6, -2, -8, -5, -3, -6, -7, -7, -3, -4, -2, -8, -1, -6, -3, -2, -5, -4, -2, -8, -5, -3, -3, -5, -8, -5, -5, -7, -8, -1, -7, -8, -8, -3, -3, -4, -4, -2, -3, -1, -2, -2, -5, -7, -6, -7, -7, -8, -3, -5, -3, -8, -2, -2, -7, -6, -4, -6, -2, -7, -3, -5, -8, -5, -5, -8, -2, -8, -2, -8, -1, -5, -3, -7, -3, -2, -6, -5, -6, -4, -5, -4, -4, -1, -3, -2, -8, -7, -4, -8, -8, -2, -3, -5, -8, -7, -6, -2, -5, -3, -6, -8, -3, -6, -1, -2, -3, -3, -5, -8, -4, -2, -3, -4, -8, -6, -3, -5, -4, -5, -3, -6, -3, -8, -7, -6, -5, -6, -5, -8, -1, -5, -3, -2, -7, -4, -7, -7, -2, -8, -1, -6, -5, -2, -3, -8, -7, -2, -6, -2, -6, -5, -5, -5, -2, -2, -1, -5, -3, -4, -2, -8, -2, -6, -3, -3, -7, -5, -8, -8, -6, -4, -3, -8, -2, -5, -3, -5, -2, -7, -4, -5, -3, -8, -8, -3, -3, -4, -5, -2, -8, -2, -3, -2, -8, -7, -4, -7, -4, -5, -8, -3, -3, -6, -5, -5, -8, -1, -7, -5, -7, -5, -7, -7, -2, -7, -4, -4, -6, -3, -3, -6, -5, -7, -2, -4, -7, -8, -1, -7, -8, -3, -6, -4, -3, -8, -4, -7, -5, -3, -2, -1, -2, -3, -2, -2, -4, -2, -6, -7, -8, -2, -4, -2, -4, -2, -3, -2, -2, -3, -5, -7, -7, -2, -4, -6, -2, -3, -5, -5, -8, -8, -2, -2, -2, -4, -4, -3, -3, -8, -2, -7, -4, -5, -5, -2, -3, -7, -3, -4, -2, -6, -3, -1, -3, -5, -5, -7, -3, -4, -6, -1, -2, -4, -6, -3, -2, -5, -8, -5, -8, -5, -3, -7, -6, -3, -8, -2, -4, -7, -2, -6, -4, -4, -3, -5, -3, -6, -4, -5, -8, -2, -6, -5, -3, -4, -2, -4, -5, -3, -2, "
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in list1:\n        if i < 0:\n            return i\n    return i\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = float('-inf')\n    for i in list1:\n        if i< 0 :\n            max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sorted_list = sorted(list1)\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    if len(list1) == 2:\n        return max(list1)\n    if sorted_list[-2] < sorted_list[-1]:\n        return largest_neg(list1[1:])\n    else:\n        return largest_neg(list1[1:]) + sorted_list[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize a new array of all negatives, with 0\n    new_array = [0]*len(list1)\n    # Initialize a new array with the largest negative number\n    largest_neg_index = 0\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            new_array[i] = -list1[i]\n            new_array[i] *= -1\n    for i in range(0, len(new_array)):\n        if new_array[i] > largest_neg_index:\n            largest_neg_index = new_array[i]\n    return largest_neg_index\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = 0\n    for num in list1:\n        if num < 0:\n            largest_negative = num\n            break\n    return largest_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1, key=abs)\ndef delete_first(list1): \n    '''\n    This function will delete first element from the given list.\n    '''\n    list1.pop(0)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0: \n        return 0\n    else: \n        if list1[0] < 0: \n            return list1[0] \n        else: \n            return largest_neg(list1[1:]) \n \ndef smallest_pos(list1):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    if len(list1) == 0: \n        return 0\n    else: \n        if list1[0] > 0: \n            return list1[0] \n        else: \n            return smallest_pos(list1[1:]) \n \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    if len(list1) == 0: \n        return 0\n    else: \n        if list1[0] < 0: \n            return list1[0] \n        else: \n            return smallest_neg(list1[1:]) \n \ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    if len(list1) == 0: \n        return 0\n    else: \n        if list1[0] > 0: \n            return list1[0] \n        else: \n            return largest_pos(list1[1:]) \n \ndef largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0: \n        return 0\n    else: \n        if list1[0] < 0: \n            return list1[0] \n        else: \n            return largest_neg(list1[1:]) \n \ndef most_pos(list1):\n    '''\n    Write a python function to find the most positive number from the given list.\n    '''\n    if len(list1) == 0: \n        return 0\n    else: \n        if list1[0] > 0: \n            return list1[0] \n        else: \n            return most_pos(list1[1:]) \n \ndef most_neg(list1):\n    '''\n    Write a python function to find the most negative number from the given list.\n    '''\n    if len(list1) == 0: \n        return 0\n    else: \n        if list1[0] < 0: \n            return list1[0] \n        else: \n            return most_neg(list1[1:]) \n \ndef divisors(n): \n    '''\n    Write a python function to find all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n // i: \n                divisors.append(n//i) \n    return divisors\n \ndef coprime(n, d): \n    '''\n    Write a python function to check whether given number n is coprime with given divisors.\n    '''\n    if n <= d: \n        return True\n    else: \n        for i in range(1, d + 1): \n            if n % i == 0: \n                if coprime(n // i, d) == True: \n                    return True\n                else: \n                    return False\n \ndef prime(n): \n    '''\n    Write a python function to check whether given number n is prime.\n    '''\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n \ndef is_prime(n): \n    '''\n    Write a python function to check whether given number n is prime.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    else: \n        divisors = divisors(n) \n        for i in range(0, len(divisors)): \n            if n % divisors[i] == 0: \n                return False\n        return True\n \ndef count_prime_factors(n): \n    '''\n    Write a python function to count all prime factors of a given number.\n    '''\n    i = 1\n    while n > 1: \n        if is_prime(n) == True: \n            i += 1\n            n = n // i\n        else: \n            return False\n    return i \n \ndef divisors_prime(n): \n    '''\n    Write a python function to check whether given number n is divisor with given divisors.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i)\n            if n // i!= i: \n                divisors.append(n//i)\n    return divisors\n \ndef sqrt_n(n): \n    '''\n    Write a python function to calculate square roots of a given number.\n    '''\n    divisors = divisors_prime(n)\n    sqrt_divisors = []\n    for i in range(len(divisors)): \n        if divisors[i] == 2: \n            sqrt_divisors.append(divisors[i])\n    return sqrt_divisors\n \ndef sqrt_prime(n): \n    '''\n    Write a python function to calculate square roots of a given number.\n    '''\n    if prime(n) == True: \n        divisors = divisors_prime(n)\n        for i in range(len(divisors)): \n            if divisors[i] == 2: \n                return divisors[i]\n \ndef factorial_of_n(n): \n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n + 1): \n        factorial *= i\n    return factorial\n \ndef fib(n): \n    '''\n    Write a python function to calculate a fibonacci sequence.\n    '''\n    if n == 0 or n == 1: \n        return n\n    else: \n        return fib(n - 1) + fib(n - 2)\n \ndef fib_prime(n): \n    '''\n    Write a python function to calculate a fibonacci sequence.\n    '''\n    if n == 0 or n == 1: \n        return n\n    else: \n        return fib_prime(n - 1) + fib_prime(n - 2)\n \ndef factorial_prime(n): \n    '''\n    Write a python function to calculate a factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return factorial_prime(n - 1) + factorial_prime(n - 2)\n \ndef factorial(n): \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return factorial(n - 1) + factorial(n - 2)\n \ndef factorial_prime_prime(n): \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return factorial_prime_prime(n - 1) + factorial_prime_prime(n - 2)\n \ndef factorial_multiples(n): \n    '''\n    Write a python function to calculate the factorial of multiple numbers.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return factoria"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] < 0:\n                list1[i] = -list1[i]\n            else:\n                list1[i] = -list1[i]\n        elif list1[i] > largest:\n            largest = list1[i]\n    return largest\nlist1 = [-5, 2, 0, -1, 7, -4]\nprint(\"New List : \",list1)\nprint(\"Largest negative number : \",largest_neg(list1))"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sorted_list = sorted(list1, reverse = True)\n    return sorted_list[0]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K > len(test_list):\n        return test_list\n    else:\n        return test_list[0:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for el in test_list:\n        if len(el)!= K:\n            break\n        else:\n            result.append(el[0:K])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for element in test_list:\n        if type(element) is not tuple:\n            result.append(element)\n        else:\n            element = element[:K]\n            result.append(tuple(element))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Write your code here.\n    # Return the trimmed version of the list.\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(K, len(test_list)):\n        test_list[i] = test_list[i][:-1]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    t = 0\n    k = K\n    while (t < len(test_list)):\n        if len(test_list[t]) < k:\n            del test_list[t]\n        elif len(test_list[t]) >= k:\n            while len(test_list[t]) >= k:\n                test_list[t].pop(0)\n        t += 1\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    temp = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == '':\n                temp.append(test_list[i])\n                temp.append(test_list[j])\n    for i in range(K):\n        temp.remove(test_list[i])\n    return temp\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def _trim(tuple_list, K):\n        '''\n        Perform the operation K times in the given tuple list.\n        '''\n        for _ in range(K):\n            yield tuple(tuple_list.pop(0))\n    return _trim(tuple(test_list), K)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    trimmed_tuple_list = []\n    for item in test_list:\n        if len(item) == K:\n            trimmed_tuple_list.append(item[:K-1])\n        else:\n            trimmed_tuple_list.append(item)\n    return trimmed_tuple_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (a, b) for a, b in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #Define a variable to store sum of each element\n    sum_of_elements = 0\n    #Create a for loop to iterate through each element in the two tuples\n    for i in range(len(test_tup1)):\n        #Store element in sum of element\n        sum_of_elements += test_tup1[i]*test_tup2[i]\n    #Return sum of element\n    return sum_of_elements\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 1\n    for i in range(len(test_tup1)):\n        result *= test_tup1[i]\n    for j in range(len(test_tup2)):\n        result *= test_tup2[j]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(map(lambda x: x * test_tup2[0], test_tup1[0]))\n    print(\"\\nIndex wise multiplication of\", test_tup1, \"and\", test_tup2, \":\")\n    for i in result:\n        print(i, end=\" \")\n    print()\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #Your code here\n    index1 = 0\n    index2 = 0\n    #loop through tuple\n    while index1 < len(test_tup1):\n        #loop through tuple\n        while index2 < len(test_tup2):\n            #check if index1 equal index2\n            if index1 == index2:\n                #print index1, index2, test_tup1[index1], test_tup2[index2]\n                return (test_tup1[index1] * test_tup2[index2])\n            index2+=1\n        #if index1 not equal index2\n        index1+=1\n    #if index1 and index2 are not equal\n    return None\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup_1 = (1,2,3)\n    test_tup_2 = (4,5,6)\n    print(\"-----------------------------------------------\")\n    print(\"Tuple A and B - Tuple A - Tuple B -\",test_tup1,\"\\n\",test_tup2)\n    print(\"-----------------------------------------------\")\n    test_tup_1_result = 0\n    test_tup_2_result = 0\n    for i in range(len(test_tup1)):\n        test_tup_1_result += test_tup1[i] * test_tup2[i]\n    for j in range(len(test_tup2)):\n        test_tup_2_result += test_tup2[j] * test_tup1[j]\n    print(\"\\n\", test_tup_1_result,\" * \",test_tup_2_result,\" = \", test_tup_1_result * test_tup_2_result)\n    print(\"-----------------------------------------------\")\n    print(\"\\n\",test_tup_1, \"\\n\", test_tup_2)\n    print(\"-----------------------------------------------\")\n    return test_tup_1_result, test_tup_2_result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup_len = len(test_tup1)\n    temp_tup = tuple(test_tup1)\n    multiplied_tup = tuple(map(lambda x: (x * temp_tup[i]) for i in range(tup_len)))\n    return multiplied_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    '''\n    Method to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    '''\n    Assign variable temp1 and temp2 to each of the element of each tuple.\n    '''\n    temp1 = test_tup1[0]\n    temp2 = test_tup2[0]\n    result = 1\n    for i in range(1, len(test_tup1)):\n        temp1 *= test_tup1[i]\n        temp2 *= test_tup2[i]\n        result *= temp1\n        result *= temp2\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ_dict = Counter(lst)\n    occ_dict = {k: occ_dict[k] for k in occ_dict.keys() if k in tup}\n    return occ_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ_count = 0\n    for element in tup: \n        if element in lst: \n            occ_count += 1\n    return occ_count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # your code goes here\n    occurrences = dict.fromkeys(lst, 0)\n    for i in tup:\n        occurrences[i] += 1\n    # for i in range(len(occurrences)):\n        # occurrences[i] = (occurrences[i])/len(tup)\n    return occurrences\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(lst)\n    return res.update(tup)\n    "
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence_dict = Counter(lst)\n    tup_occurrence = occurence_dict.most_common()\n    return tup_occurrence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = Counter(lst)\n    occurence = occurence.most_common()\n    return occurence\n    \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = 0\n    for i in lst: \n        occ = occ + tup.count(i) \n    return occ \ndef get_longest_elements(lst): \n    '''\n    Write a python function to return the length of the longest element in the list. \n    '''\n    longest_element = max(lst, key=len)\n    return len(longest_element)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = {}\n    for item in lst:\n        occurence[item] = occurence.get(item, 0) + 1\n    return occurence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ=0\n    for e in lst:\n        occ+=tup.count(e)\n    print(occ)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(tup)-Counter(lst).most_common()[0][1]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    lst = []\n    for i in nums:\n        if type(i) is int:\n            lst.append(i**3)\n        else:\n            raise TypeError('Unable to convert'+ i +'to int')\n    return lst\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in range(len(nums)):\n        cube_list.append(nums[i]*3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for n in nums:\n        cubes.append(n**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        output.append(nums[i]*nums[i]*nums[i])\n    return output\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums if num**3>=1]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube(nums):\n        for i in range(len(nums)):\n            nums[i]**=3\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = 0\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = 1*num**3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [0]*len(nums)\n    for i in range(len(nums)):\n        cubes[i] = nums[i]**3\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [cube_element ** 3 for cube_element in nums]\n    print(cube)\n    return cube\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #set up a variable to hold the sum\n    sum = 0\n    #add each of the numbers and update the sum\n    for i in range(0, n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    list_numbers = []\n    for x in range(1, n + 1):\n        if x % 10 == 0:\n            list_numbers.append(x)\n    return sum(list_numbers)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #Code here\n    if n < 2:\n        return n\n    else:\n        return n + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    for x in range(1, n + 1):\n        res += x\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1): \n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num_list = []\n    for i in range(n):\n        num = int(input('Enter a number: '))\n        num_list.append(num)\n    return sum(num_list)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1,n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += i\n    return ans\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    while start < len(str):\n        i = start\n        while i < len(str) and str[i]!='':\n            i += 1\n        if i < len(str):\n            start = i\n        else:\n            yield str[start:i]\n            start = i\n    yield str[start:]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return ''\n    else:\n        if l[-1] =='':\n            l = l[:-1]\n        if len(l) == 0:\n            return str\n        else:\n            l = l[:-1]\n            return str[l.find(str):]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    out = \"\"\n    for s in l:\n        if len(out) + len(s) > 10:\n            break\n        else:\n            out += s\n    return out\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_str = \"\"\n    count = 0\n    for i in range(len(str)):\n        if str[i] == \" \":\n            count += 1\n        else:\n            if count!= 0:\n                new_str += str[i]\n                count = 0\n            else:\n                new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        if str[:l] == str[l:]:\n            return str[l:]\n        else:\n            for i in range(l, len(str)):\n                if str[i:i+l] == str[i:i+l:]:\n                    return str[i+l:i+l+l]\n                else:\n                    continue\n    else:\n        return None\n    return None\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_str = \"\"\n    for i in range(0, len(str)):\n        if i%2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l is None or len(l) == 0:\n        return None\n    l_split = len(l[0])\n    if l_split!= len(str):\n        return None\n    for i in range(len(l[0])):\n        if l_split == 1:\n            if i < len(str):\n                if str[i]!= l[0][i]:\n                    return None\n            return str\n        if l[0][i] == '\"' and l[1][i] == '\"':\n            if i < len(str):\n                if str[i]!= l[0][i]:\n                    return None\n            return str[i+1: len(str)-1]\n        if l[0][i] == '\"' and l[1][i]!= '\"':\n            return None\n        if i < len(str):\n            if l[0][i] == '\"' and l[1][i] == '\"':\n                return None\n            str = str[i+1:]\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    j = 0\n    while i < len(str):\n        if str[i] == '{':\n            j = i\n        i = i + 1\n    i = j + 1\n    j = i\n    k = 0\n    while j < len(str):\n        if str[j] == '}':\n            k = j\n        j = j + 1\n    s = str[k+1:j]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not str:\n        return ''\n    \n    try:\n        str_len = len(str)\n    except TypeError:\n        return ''\n    \n    if str_len >= l:\n        return str[:l]\n    \n    return str[:l - 1] + extract_string(str[l:], l + 1)\n    \ndef main():\n    l = [3, 5, 4]\n    s = '12345'\n    s = 'abcde'\n    s = 'abcde'\n    s = 'a'\n    s = ''\n    s = 'a'\n    s =''\n    s =''\n    \n    print(extract_string(s, l))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('[ ]+','', text1)\n    text3 = re.sub('[^a-zA-Z]','', text2)\n    return text3\ndef remove_all_numbers(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text2 = re.sub('\\d+','', text1)\n    text3 = re.sub('[^0-9]','', text2)\n    return text3\ndef remove_all_special_characters(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_]','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    return text3\ndef remove_all_special_characters_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    text4 = re.sub('[^a-zA-Z0-9]','', text3)\n    text5 = re.sub('[^a-zA-Z0-9_]','', text4)\n    return text5\ndef remove_all_capital_letters(text1):\n    '''\n    Write a function to remove all capital letters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9]','', text1)\n    text3 = re.sub('[^a-zA-Z0-9]','', text2)\n    return text3\ndef remove_all_special_characters_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    text4 = re.sub('[^a-zA-Z0-9]','', text3)\n    text5 = re.sub('[^a-zA-Z0-9]','', text4)\n    return text5\ndef remove_all_special_characters_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    text4 = re.sub('[^a-zA-Z0-9]','', text3)\n    text5 = re.sub('[^a-zA-Z0-9_]','', text4)\n    return text5\ndef remove_all_special_characters_sentences_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    text4 = re.sub('[^a-zA-Z0-9_\\.\\']','', text3)\n    text5 = re.sub('[^a-zA-Z0-9]','', text4)\n    text6 = re.sub('[^a-zA-Z0-9_]','', text5)\n    return text6\ndef remove_special_characters_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    text4 = re.sub('[^a-zA-Z0-9_\\.\\']','', text3)\n    text5 = re.sub('[^a-zA-Z0-9]','', text4)\n    text6 = re.sub('[^a-zA-Z0-9_]','', text5)\n    return text6\ndef remove_all_capital_letters_sentences(text1):\n    '''\n    Write a function to remove all capital letters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9]','', text1)\n    text3 = re.sub('[^a-zA-Z0-9]','', text2)\n    return text3\ndef remove_special_characters_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    text4 = re.sub('[^a-zA-Z0-9]','', text3)\n    text5 = re.sub('[^a-zA-Z0-9]','', text4)\n    text6 = re.sub('[^a-zA-Z0-9]','', text5)\n    return text6\ndef remove_special_characters_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    text4 = re.sub('[^a-zA-Z0-9_\\.\\']','', text3)\n    text5 = re.sub('[^a-zA-Z0-9]','', text4)\n    text6 = re.sub('[^a-zA-Z0-9_]','', text5)\n    return text6\ndef remove_all_capital_letters_sentences(text1):\n    '''\n    Write a function to remove all capital letters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9]','', text1)\n    text3 = re.sub('[^a-zA-Z0-9]','', text2)\n    return text3\ndef remove_special_characters_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^a-zA-Z0-9_\\.\\']','', text2)\n    text4 = re.sub('[^a-zA-Z0-9]','', text3)\n    text5 = re.sub('[^a-zA-Z0-9]','', text4)\n    text6 = re.sub('[^a-zA-Z0-9]','', text5)\n    return text6\ndef remove_special_characters_sentences(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text2 = re.sub('[^a-zA-Z0-9_\\.\\']','', text1)\n    text3 = re.sub('[^"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Write your code here.\n    text = text1.strip()\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\ndef to_dictionary(text, key_name):\n    '''\n    Write a function that takes a string as an argument, and returns a dictionary,\n    whose keys are strings and whose values are a list of words,\n    representing the words in the string.\n    '''\n    dict_list = []\n    for i in text.split():\n        dict_list.append(i)\n    for i in dict_list:\n        if(i!= ''):\n            dict_list.append(remove_whitespaces(i))\n    return dict_list\ndef to_numerical(text):\n    '''\n    Convert a string of text to a number.\n    '''\n    t_num = re.compile(r'\\d+')\n    text_num = t_num.findall(text)\n    for i in text_num:\n        if(i[0]!= ''):\n            text_num[text_num.index(i)] = float(i[0])\n    return text_num\ndef to_list(text):\n    '''\n    Convert a string of text to a list of words.\n    '''\n    text_list = text.split()\n    return text_list\ndef to_set(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    text_set = set(text.split())\n    return text_set\ndef calculate(t_num, t_set, num):\n    '''\n    The formula used here is:\n    num_t = num_t - 1\n    num_t = num_t / t_num + 1\n    num_t = num_t * (t_num / t_num)\n    '''\n    num_t = num - 1\n    num_t = num_t / t_num\n    num_t = num_t * (t_num / t_num)\n    return num_t\ndef calculate_set(t_num, t_set, num):\n    '''\n    The formula used here is:\n    num_t = num_t - 1\n    num_t = num_t / t_num + 1\n    num_t = num_t * (t_num / t_num)\n    '''\n    num_t = num - 1\n    num_t = num_t / t_num\n    num_t = num_t * (t_num / t_num)\n    return num_t\ndef calculate_numerical(t_num, t_set, num):\n    '''\n    The formula used here is:\n    num_t = num_t - 1\n    num_t = num_t / t_num + 1\n    num_t = num_t * (t_num / t_num)\n    '''\n    num_t = num - 1\n    num_t = num_t / t_num\n    num_t = num_t * (t_num / t_num)\n    return num_t\ndef to_set_numerical(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    text_set = set(text.split())\n    return text_set\ndef to_list_numerical(text):\n    '''\n    Convert a string of text to a list of words.\n    '''\n    text_list = text.split()\n    return text_list\ndef to_word(text):\n    '''\n    Convert a string of text to a single word.\n    '''\n    return remove_whitespaces(text)\ndef to_word_set(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    text_set = set(text.split())\n    return text_set\ndef to_word_list(text):\n    '''\n    Convert a string of text to a list of words.\n    '''\n    text_list = text.split()\n    return text_list\ndef calculate_set_numerical(t_set, num):\n    '''\n    The formula used here is:\n    num_t = num_t - 1\n    num_t = num_t / t_num + 1\n    num_t = num_t * (t_num / t_num)\n    '''\n    num_t = num - 1\n    num_t = num_t / t_num\n    num_t = num_t * (t_num / t_num)\n    return num_t\ndef calculate_set_numerical_numerical(t_set, num, t_num):\n    '''\n    The formula used here is:\n    num_t = num_t - 1\n    num_t = num_t / t_num + 1\n    num_t = num_t * (t_num / t_num)\n    '''\n    num_t = num - 1\n    num_t = num_t / t_num\n    num_t = num_t * (t_num / t_num)\n    return num_t\ndef to_word_set_numerical(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    text_set = set(text.split())\n    return text_set\ndef to_word_list_numerical(text):\n    '''\n    Convert a string of text to a list of words.\n    '''\n    text_list = text.split()\n    return text_list\ndef to_word_set_numerical_numerical(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    text_set = set(text.split())\n    return text_set\ndef to_numerical(text):\n    '''\n    Convert a string of text to a number.\n    '''\n    return to_numerical_numerical(text)\ndef to_numerical_numerical(text):\n    '''\n    Convert a string of text to a number.\n    '''\n    return to_numerical_numerical_numerical(text)\ndef to_set(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    return to_set_numerical(text)\ndef to_set_numerical(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    return to_set_numerical_numerical(text)\ndef to_set_numerical_numerical(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    return to_set_numerical_numerical_numerical(text)\ndef to_set_numerical_numerical_numerical(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    text_set = set(text.split())\n    return text_set\ndef get_keys(dic):\n    '''\n    Return a list of all keys of a dictionary.\n    '''\n    return dic.keys()\ndef get_values(dic):\n    '''\n    Return a list of all values of a dictionary.\n    '''\n    return dic.values()\ndef get_key(dic, key):\n    '''\n    Return the value of a dictionary's key named key.\n    '''\n    return dic[key]\ndef to_dict(text, key):\n    '''\n    Convert a string of text to a dictionary.\n    '''\n    text_dict = to_dictionary(text, key)\n    return text_dict\ndef to_dictionary(text, key):\n    '''\n    Convert a string of text to a dictionary.\n    '''\n    text_set = to_set(text)\n    text_dict = {}\n    for word in text_set:\n        if(word in text_dict):\n            text_dict[word] += 1\n        else:\n            text_dict[word] = 1\n    return text_dict\ndef to_set(text):\n    '''\n    Convert a string of text to a set of words.\n    '''\n    text_set = set(text.split())\n    return text_set\ndef to_set_"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # variable declaration\n    # remove all whitespaces from the given string\n    return re.sub('\\s+','', text1)\n    # set the value of the function\n    # pass the string argument to the function\n    # return the function value\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    clean_text = re.sub(r'\\s+', '', text1)\n    return clean_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.strip().split('\\n')\n    return '\\n'.join(text2)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\").strip()\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n    \ndef discount_amount(actual_cost,sale_amount,discount_rate): \n    '''\n    Write a function that discoutces a sale if the given amount of cost has discount else return 0.\n    '''\n    return sale_amount*discount_rate\n    \ndef discount_price(actual_cost,sale_amount,discount_rate,discount_amount):\n    '''\n    Write a function that discoutces a sale if the given amount of cost has discount else return 0.\n    '''\n    return sale_amount*discount_rate*discount_amount\n    \ndef discount_amount(actual_cost,sale_amount,discount_rate,discount_amount):\n    '''\n    Write a function that discoutces a sale if the given amount of cost has discount else return 0.\n    '''\n    return sale_amount*discount_rate*discount_amount\n    \ndef discount_price(actual_cost,sale_amount,discount_rate,discount_amount):\n    '''\n    Write a function that discoutces a sale if the given amount of cost has discount else return 0.\n    '''\n    return sale_amount*discount_rate*discount_amount\n    \ndef discount_amount(actual_cost,sale_amount,discount_rate,discount_amount):\n    '''\n    Write a function that discoutces a sale if the given amount of cost has discount else return 0.\n    '''\n    return sale_amount*discount_rate*discount_amount\n    \ndef discount_price(actual_cost,sale_amount,discount_rate,discount_amount):\n    '''\n    Write a function that discoutces a sale if the given amount of cost has discount else return 0.\n    '''\n    return sale_amount*discount_rate*discount_amount\n    \ndef discount_amount(actual_cost,sale_amount,discount_rate,discount_amount):\n    '''\n    Write a function that discoutces a sale if the given amount of cost has discount else return 0.\n    '''\n    return sale_amount*discount_rate*discount_amount\n    \ndef sale_price(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives sale price on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef sale_price_without_discount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives sale price on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef sale_amount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price,discount_amount_without_discount):\n    '''\n    Write a function that gives sale amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount*discount_amount_without_discount\n    \ndef total_sale_amount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives sale amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_sale_amount_without_discount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives sale amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_sale_amount_without_discount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price,discount_amount_without_discount):\n    '''\n    Write a function that gives sale amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_amount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_price(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_amount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_price(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_amount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_price(actual_cost,sale_amount,discount_rate,discount_amount,discount_price):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_amount_with_discount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price,discount_amount_with_discount):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_price_with_discount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price,discount_amount_with_discount):\n    '''\n    Write a function that gives discount amount on a sale if the given amount of cost has sale else return 0.\n    '''\n    return actual_cost*sale_amount*discount_rate*discount_amount\n    \ndef total_discount_price_with_discount(actual_cost,sale_amount,discount_rate,discount_amount,discount_price,discount_amount_with_discount):\n    '''\n    Write "
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # Initialize empty list for losses\n    losses = []\n    # Find the position of sale amount\n    i = -1\n    while actual_cost > sale_amount:\n        i += 1\n        # Calculate loss amount and add it to the list\n        losses.append((actual_cost-(sale_amount*(i+1)))/sale_amount)\n        actual_cost = actual_cost-sale_amount\n        if actual_cost < sale_amount:\n            break\n    # Return the losses list\n    return losses"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost == 0:\n        return sale_amount\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == actual_cost:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return math.factorial(n) // math.factorial(n - 2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n==1 or n==2) : return 1\n    elif n%2==0 : \n        return sumofFactors(n//2)\n    else : \n        return sumofFactors(n-1) + sumofFactors(n//2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # c = n//2\n    # print(c)\n    sum = 0\n    while (n % 2 == 0) : \n        sum = sum + 2\n        n = n // 2\n    sum = sum * 2 + 1\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        #  print(n)\n        #  print(n % 2)\n        return sumofFactors(n // 2) + n % 2\n    \ndef sumOfFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n            return n \n        else:\n            return sumOfFactors(n // 2) + n % 2\n    \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n==0) : \n        return 0\n    elif (n==1) : \n        return 1 \n    else : \n        x = int(n/2)\n        if (n%2==0) : \n            return sumofFactors(x) \n        else : \n            return (1+sumofFactors(x))\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n):\n        if (n%i==0):\n            sum+=i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            if (n % i == 0):\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    a = 2\n    b = 2\n    sumofFactors = 0\n    while a < n :\n        if n%a == 0 : \n            n //= a\n            sumofFactors += a\n        else : \n            a += 1\n    return sumofFactors\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n <= 1) : \n        return n \n    else : \n        return sumofFactors(n//2) + (n % 2) \n    \ndef listofFactors(n) : \n    '''\n    Write a python function to find the list of even factors of a number.\n    '''\n    factors = [] \n    for i in range(1, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            factors.append(i) \n            factors.append(n//i) \n    return factors\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'z', text))\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = str(text)\n    z_regex = r\"\\w+z\"\n    return re.match(z_regex, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?:(?<=\\w)(\\w)(?=\\w))'\n    # Step 1 - Get the string of words\n    words = re.findall(pattern, text)\n    # Step 2 - For each word get the match to the last word\n    for word in words:\n        if word[-1] == \"z\":\n            return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'(z|Z).*?(z|Z)')\n    match = re.search(pattern,text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    for word in text.split():\n        if word[0].isalpha():\n            if (word[1] == 'z' or word[1] == 'Z'):\n                return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.find('z') == -1\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^\\w]', '', text)\n    words = text.split(' ')\n    result = []\n    for word in words:\n        if word in [\"z\", \"zy\", \"zzz\"]:\n            result.append(word)\n        else:\n            return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for word in text:\n        if re.search('[zZ]', word):\n            print('is a word'+ word)\n        else:\n            print('not a word')\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #Create a regex\n    regex = re.compile(r'\\bz\\b')\n    #Check if there's any word matches\n    if regex.search(text):\n        #Find the number of words in the text, and make a list of all of the words\n        num_words = text.count(\"z\")\n        #Return the number of words\n        return num_words\n    else:\n        #Else return 0\n        return 0\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.compile('[z]')\n    matches = wordz.findall(text)\n    return matches\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 31:\n        return True\n    elif monthnum2 == 30:\n        return False\n    elif monthnum2 == 29:\n        return False\n    elif monthnum2 == 28:\n        return False\n    elif monthnum2 == 27:\n        return False\n    elif monthnum2 == 26:\n        return False\n    elif monthnum2 == 25:\n        return False\n    elif monthnum2 == 24:\n        return False\n    elif monthnum2 == 23:\n        return False\n    elif monthnum2 == 22:\n        return False\n    elif monthnum2 == 21:\n        return False\n    elif monthnum2 == 20:\n        return False\n    elif monthnum2 == 19:\n        return False\n    elif monthnum2 == 18:\n        return False\n    elif monthnum2 == 17:\n        return False\n    elif monthnum2 == 16:\n        return False\n    elif monthnum2 == 15:\n        return False\n    elif monthnum2 == 14:\n        return False\n    elif monthnum2 == 13:\n        return False\n    elif monthnum2 == 12:\n        return False\n    elif monthnum2 == 11:\n        return False\n    elif monthnum2 == 10:\n        return False\n    elif monthnum2 == 9:\n        return False\n    elif monthnum2 == 8:\n        return False\n    elif monthnum2 == 7:\n        return False\n    elif monthnum2 == 6:\n        return False\n    elif monthnum2 == 5:\n        return False\n    elif monthnum2 == 4:\n        return False\n    elif monthnum2 == 3:\n        return False\n    elif monthnum2 == 2:\n        return False\n    elif monthnum2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 < 1 or monthnum2 > 12):\n        return \"Your month number is not valid\"\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = str(monthnum2)\n    if len(monthnum2) == 1:\n        return True\n    else:\n        if len(monthnum2) == 2:\n            if int(monthnum2[0]) == 31 and int(monthnum2[1]) == 31:\n                return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if not type(monthnum2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if monthnum2 > 12 or monthnum2 < 1:\n        print(\"Invalid input, input must be a number between 1 and 12\")\n        return False\n    \n    return True\n    \n    \ndef check_monthnumb_number_to_string(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if not type(monthnum2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if monthnum2 > 12 or monthnum2 < 1:\n        print(\"Invalid input, input must be a number between 1 and 12\")\n        return False\n    \n    return str(monthnum2)\n    \n    \ndef check_dayofmonth_number_to_string(monthnum2):\n    '''\n    Write a function to check whether the given day number contains 31 days or not.\n    '''\n    \n    if not type(monthnum2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if monthnum2 > 31 or monthnum2 < 1:\n        print(\"Invalid input, input must be a number between 1 and 31\")\n        return False\n        \n    return str(monthnum2)\n    \n    \ndef check_dayofmonth_number_to_string(monthnum2):\n    '''\n    Write a function to check whether the given day number contains 31 days or not.\n    '''\n    \n    if not type(monthnum2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if monthnum2 > 31 or monthnum2 < 1:\n        print(\"Invalid input, input must be a number between 1 and 31\")\n        return False\n        \n    return str(monthnum2)\n    \n    \ndef check_dayofmonth_number_to_string(monthnum2):\n    '''\n    Write a function to check whether the given day number contains 31 days or not.\n    '''\n    \n    if not type(monthnum2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if monthnum2 > 31 or monthnum2 < 1:\n        print(\"Invalid input, input must be a number between 1 and 31\")\n        return False\n        \n    return str(monthnum2)\n    \n    \ndef check_date_to_string(date2):\n    '''\n    Write a function to check whether the given date is a valid date or not.\n    '''\n    \n    if not type(date2) == str:\n        print(\"Invalid input, input must be a string\")\n        return False\n        \n    if not date2:\n        print(\"Invalid input, input must not be an empty string\")\n        return False\n        \n    return True\n    \n    \ndef check_date_to_string_to_string(date2):\n    '''\n    Write a function to check whether the given date is a valid date or not.\n    '''\n    \n    if not type(date2) == str:\n        print(\"Invalid input, input must be a string\")\n        return False\n        \n    if not date2:\n        print(\"Invalid input, input must not be an empty string\")\n        return False\n        \n    return True\n    \n    \ndef check_dayofmonth_to_string(date2):\n    '''\n    Write a function to check whether the given day number is a valid date or not.\n    '''\n    \n    if not type(date2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if date2 < 1 or date2 > 31:\n        print(\"Invalid input, input must be a number between 1 and 31\")\n        return False\n        \n    return str(date2)\n    \n    \ndef check_dayofmonth_to_string(date2):\n    '''\n    Write a function to check whether the given day number is a valid date or not.\n    '''\n    \n    if not type(date2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if date2 < 1 or date2 > 31:\n        print(\"Invalid input, input must be a number between 1 and 31\")\n        return False\n        \n    return str(date2)\n    \n    \ndef check_monthnumb_to_string(date2):\n    '''\n    Write a function to check whether the given month number is a valid date or not.\n    '''\n    \n    if not type(date2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if date2 < 1 or date2 > 12:\n        print(\"Invalid input, input must be a number between 1 and 12\")\n        return False\n        \n    return str(date2)\n    \n    \ndef check_monthnumb_to_string_to_string(date2):\n    '''\n    Write a function to check whether the given month number is a valid date or not.\n    '''\n    \n    if not type(date2) == str:\n        print(\"Invalid input, input must be a string\")\n        return False\n        \n    if date2 < 1 or date2 > 12:\n        print(\"Invalid input, input must be a number between 1 and 12\")\n        return False\n        \n    return str(date2)\n    \n    \ndef check_monthnumb_to_string_to_string(date2):\n    '''\n    Write a function to check whether the given month number is a valid date or not.\n    '''\n    \n    if not type(date2) == str:\n        print(\"Invalid input, input must be a string\")\n        return False\n        \n    if date2 < 1 or date2 > 12:\n        print(\"Invalid input, input must be a number between 1 and 12\")\n        return False\n        \n    return str(date2)\n    \n    \ndef check_date_for_string(date2):\n    '''\n    Write a function to check whether the given date is a valid date or not.\n    '''\n    \n    if not type(date2) == str:\n        print(\"Invalid input, input must be a string\")\n        return False\n        \n    if not date2:\n        print(\"Invalid input, input must not be an empty string\")\n        return False\n        \n    return True\n    \n    \ndef check_date_for_string_to_string(date2):\n    '''\n    Write a function to check whether the given date is a valid date or not.\n    '''\n    \n    if not type(date2) == str:\n        print(\"Invalid input, input must be a string\")\n        return False\n        \n    if not date2:\n        print(\"Invalid input, input must not be an empty string\")\n        return False\n        \n    return True\n    \n    \ndef check_dayofmonth_for_string(date2):\n    '''\n    Write a function to check whether the given day number is a valid date or not.\n    '''\n    \n    if not type(date2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if date2 < 1 or date2 > 31:\n        print(\"Invalid input, input must be a number between 1 and 31\")\n        return False\n        \n    return str(date2)\n    \n    \ndef check_dayofmonth_for_string(date2):\n    '''\n    Write a function to check whether the given day number is a valid date or not.\n    '''\n    \n    if not type(date2) == int:\n        print(\"Invalid input, input must be a number\")\n        return False\n        \n    if date2 < 1 or date2 > 31:\n        print(\"Invalid input, input must be a number between 1 and 31\")\n        return False\n        \n    return str(date2)\n    \n    \ndef check_dayofmonth_for_string_to_string(date2):\n    '''\n    Write a function to check whether the given day number is a valid date or not.\n    '''\n    \n    if not type(date2) == str:\n        print(\"Invalid input, input must be a string\")\n        return False\n        \n    if date2 < 1 or date2 > 31:\n        print(\"Invalid input, input must be a numbe"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if int(monthnum2)>12 or int(monthnum2)<1:\n        return \"Invalid Month number\"\n    elif int(monthnum2)==1:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==2:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==3:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==4:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==5:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==6:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==7:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==8:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==9:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==10:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==11:\n        return \"Not a valid month number\"\n    elif int(monthnum2)==12:\n        return \"Not a valid month number\"\n    else:\n        return \"Not a valid month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 == 1 or monthnum2 == 2:\n        return True\n    if monthnum2 == 3 or monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 11:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 31:\n        print('Please enter a valid month number')\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if (monthnum2 > 31 or monthnum2 < 1):\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        print('month number exceeds the limits of days')\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # I'll implement a month number in a function as a variable\n    # and then convert it to an integer\n    monthnum = int(monthnum2)\n    # I'll use the 'is' operator to check whether the month number is within the range\n    if monthnum >= 1 and monthnum <= 12:\n        # If the month number is within the range, return True\n        return True\n    else:\n        # If the month number is outside the range, return False\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for s in stringlist:\n        result.insert(0,s)\n    return result\n    \n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # your code goes here\n    \n    if len(stringlist) < 1:\n        return stringlist\n    elif len(stringlist) == 1:\n        return stringlist[-1] + stringlist[0]\n    else:\n        return stringlist[-1] + stringlist[0] + reverse_string_list(stringlist[1:])\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print(stringlist)\n    stringlist.reverse()\n    print(stringlist)\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string_list_helper(stringlist, [])\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for index, string in enumerate(stringlist):\n        stringlist[index] = stringlist[index][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return []\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not stringlist:\n        return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return_string = []\n    for string in stringlist:\n        return_string.append(string[::-1])\n    return return_string\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    smallest = lst[0] \n    smallest_index = 0\n    for i in range(1, len(lst)): \n        if lst[i] < smallest: \n            smallest = lst[i] \n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # code here\n    return None\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    \n    min=lst[0]\n    for i in range(1, len(lst)):\n        if lst[i]<min:\n            min=lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    if n == 0: \n        return 0\n    elif n == 1: \n        return lst[0]\n    \n    start = 0\n    end = n-1\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    minlength = []\n    for i in lst:\n        minlength.append(i)\n    for i in range(len(minlength)):\n        if(len(minlength[i]) < len(minlength[i-1])):\n            minlength[i] = minlength[i-1]\n    return minlength\ndef Find_Longest(lst): \n    '''\n    Write a python function to find the longest sublist.\n    '''\n    lst.sort()\n    longest = []\n    for i in lst:\n        longest.append(i)\n    for i in range(len(longest)):\n        if(len(longest[i]) > len(longest[i+1])):\n            longest[i] = longest[i+1]\n    return longest\ndef Find_Difference(lst): \n    '''\n    Write a python function to find the difference between two lists.\n    '''\n    lst.sort()\n    difference = []\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            difference.append(lst[i])\n    return difference\ndef Find_Sum(lst): \n    '''\n    Write a python function to find the sum of the elements of a list.\n    '''\n    lst.sort()\n    sum = 0\n    for i in range(len(lst)):\n        sum = sum + lst[i]\n    return sum\ndef Sort_2D_Array(lst, key): \n    '''\n    Write a python function to sort a 2D list using a given key.\n    '''\n    newarray = []\n    for i in range(len(lst)):\n        newarray.append([])\n        for j in range(len(lst[i])):\n            newarray[i].append(lst[i][j])\n    newarray = sorted(newarray, key = key)\n    return newarray\ndef Sort_3D_Array(lst, key): \n    '''\n    Write a python function to sort a 3D list using a given key.\n    '''\n    newarray = []\n    for i in range(len(lst)):\n        newarray.append([])\n        for j in range(len(lst[i])):\n            newarray[i].append([])\n            for k in range(len(lst[i][j])):\n                newarray[i][j].append(lst[i][j][k])\n    newarray = sorted(newarray, key = key)\n    return newarray\ndef Remove_Duplicates(lst): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    lst.sort()\n    i = 0\n    j = 0\n    while i < len(lst):\n        if lst[i] == lst[j]:\n            del lst[i]\n            i = i - 1\n            j = j + 1\n        else:\n            i = i + 1\n    return lst\ndef Merge_Sort(lst, key): \n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    lst = lst.split(',')\n    i = len(lst)-1\n    if(len(lst) > 1):\n        while(i >= 0):\n            if(key(lst[i]) < key(lst[i+1])):\n                lst[i],lst[i+1] = lst[i+1],lst[i]\n                i = i - 1\n            else:\n                i = i - 1\n    return lst\ndef QuickSort(lst, key): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if (len(lst) < 2):\n        return lst\n    else:\n        # Find the midpoint of the list\n        i = len(lst)//2\n        # Partition the list\n        #lst[i],lst[len(lst)-i-1] = lst[len(lst)-i-1],lst[i]\n        lst1 = QuickSort(lst[i+1:], key)\n        lst2 = QuickSort(lst[:i], key)\n        return lst1 + lst2\ndef Binary_Search(lst, value): \n    '''\n    Write a python function to check if the element\n    is present in a sorted list.\n    '''\n    lst.sort()\n    first = 0\n    last = len(lst) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if value == lst[mid]:\n            return True\n        elif value > lst[mid]:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return False\ndef Binary_Search_2D_Array(lst, value): \n    '''\n    Write a python function to check if the element\n    is present in a sorted 2D list.\n    '''\n    lst.sort()\n    first = 0\n    last = len(lst) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if value == lst[mid]:\n            return True\n        elif value > lst[mid]:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return False\ndef Binary_Search_3D_Array(lst, value): \n    '''\n    Write a python function to check if the element\n    is present in a sorted 3D list.\n    '''\n    lst.sort()\n    first = 0\n    last = len(lst) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if value == lst[mid][0]:\n            return True\n        elif value > lst[mid][0]:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return False\ndef List_Statistics(lst): \n    '''\n    Write a python function to count and print statistics of a sorted list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        count = count + 1\n        if(lst[i] < 10):\n            print(lst[i])\n    print(f'There are {count} elements')\ndef List_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    lst.sort()\n    return lst\ndef List_Copy(lst): \n    '''\n    Write a python function to copy a sorted list.\n    '''\n    lst.sort()\n    lst_copy = []\n    for i in range(len(lst)):\n        lst_copy.append(lst[i])\n    return lst_copy\ndef Random_List(lst): \n    '''\n    Write a python function to generate a random list.\n    '''\n    lst.sort()\n    return lst\ndef Random_List_2D(lst): \n    '''\n    Write a python function to generate a random 2D list.\n    '''\n    lst.sort()\n    return lst\ndef Random_List_3D(lst): \n    '''\n    Write a python function to generate a random 3D list.\n    '''\n    lst.sort()\n    return lst\ndef Check_List(lst): \n    '''\n    Write a python function to check if a given list is sorted.\n    '''\n    lst.sort()\n    if(len(lst) > 1):\n        for i in range(len(lst)):\n            if(lst[i]!= lst[i-1]):\n                return False\n        return True\n    return True\ndef Remove_Duplicates_2D(lst): \n    '''\n    Write a python function to remove duplicate elements from a sorted list.\n    '''\n    lst = lst.split(',')\n    i = len(lst) - 1\n    if(len(lst) > 1):\n        while(i >= 0):\n            if(lst[i] == lst[i+1]):\n                del lst[i]\n                "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    for i in range(len(lst)): \n        for j in range(len(lst)):\n            if len(lst[i:j+1]) < len(sublist): \n                sublist = lst[i:j+1] \n    return sublist\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = lst[:] \n    for i in range(0,len(lst)): \n        for j in range(0, len(lst)-i-1): \n            if lst[j] < lst[j+1]: \n                temp = lst[j] \n                lst[j] = lst[j+1] \n                lst[j+1] = temp \n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    #for loop to find the length of the sublist \n    for i in range(0, len(lst)):\n        #sublist is lst[i][0]\n        #value is lst[i][1]\n        #elements are sublist[0], sublist[1], sublist[2],...\n        #elements are elements[0], elements[1], elements[2],...\n        #elements are elements[3], elements[4], elements[5],...\n        \n        #if lst[i][0] > lst[i][1] then lst[i] is min element \n        if lst[i][0] > lst[i][1]:\n            #find minimum element \n            min = lst[i][0] \n            #find index of the minimum element \n            min_index = i \n    \n    #return the minimum element and its index \n    return min, min_index \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0]\n    minimum_index = 0\n    for i in range(len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n            minimum_index = i\n    return minimum_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # use for loop\n    min_index = lst[0]\n    min_count = 1\n    for x in range(1, len(lst)):\n        if len(lst[x]) < len(min_index):\n            min_index = lst[x]\n            min_count = 1\n        elif len(lst[x]) == len(min_index):\n            if min_count > 1:\n                min_index = lst[x]\n                min_count = 1\n        else:\n            min_count += 1\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l<=0 or b<=0:\n        print(\"Rectangle Area Error\")\n    else:\n        return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=l*b\n    return a\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)/2\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef triangle_area(b):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return b*b\ndef cube_area(b):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return b*b*b\ndef cylinder_area(b):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return b*b*b*b\ndef sphere_area(b):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b*b\ndef sphere_volume(b):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return b*b*b*"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return 0.5 * l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2 * l + 2 * b\ndef rectangle_diagonal(l,b):\n    '''\n    Write a function that finds the diagonal of a rectangle.\n    '''\n    return l + b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l * b)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(str1.upper(), \"\")\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[^A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # use regex to find the uppercase\n    str_re = re.compile('[a-zA-Z]+')\n    # return the string without any uppercase characters\n    return str_re.sub('', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    l = list(str1)\n    \n    for i in range(len(l)):\n        if (l[i].isupper() == True):\n            l.pop(i)\n    return ''.join(l)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    l1 = list(str1)\n    l2 = []\n    for i in range(len(l1)):\n        if l1[i].isupper():\n            l2.append(l1[i].lower())\n        else:\n            l2.append(l1[i])\n    \n    return ''.join(l2)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]+\", \"\", str1)\n    # re.sub(r'\\d+','', str1)\n    # re.sub(r'[^A-Za-z]+','', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings.\n    str2 = str1.lower()\n    # Replace each uppercase character with a single lowercase character.\n    for char in str2:\n        if char.isupper():\n            str2 = str2.replace(char, '@')\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = \"\"\n    num = 0\n    for letter in str1:\n        if letter.isupper():\n            result += letter.lower()\n        else:\n            result += letter\n        num+=1\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if lst is None:\n        return None\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    '''\n    Using for loops, I can do this using the first element as the first value for each element in the list\n    '''\n    # first_element = lst[0][0]\n    # print(first_element)\n    '''\n    If you have a list, you can do this like this:\n    '''\n    '''\n    for i in range(len(lst)):\n        first_element = lst[i][0]\n        print(first_element)\n    '''\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Get the first element \n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def get_first(lst):\n        i = 0\n        while i < len(lst):\n            yield lst[i]\n            i += 1\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # First element is always the first element in the list\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum = sum + lst[i][0]\n    return sum\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    try:\n        x = lst[0]\n    except:\n        x = None\n    for i in range(1, len(lst)): \n        if lst[i]!= x: \n            return False\n    return True"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0][0]\n    \ndef Extract2(lst):\n    '''\n    Write a python function to get the second element of each sublist.\n    '''\n    return lst[1][0]\n    \ndef Extract3(lst):\n    '''\n    Write a python function to get the third element of each sublist.\n    '''\n    return lst[2][0]\n    \ndef Extract4(lst):\n    '''\n    Write a python function to get the fourth element of each sublist.\n    '''\n    return lst[3][0]\n    \ndef Extract5(lst):\n    '''\n    Write a python function to get the fifth element of each sublist.\n    '''\n    return lst[4][0]\n    \ndef Extract6(lst):\n    '''\n    Write a python function to get the sixth element of each sublist.\n    '''\n    return lst[5][0]\n    \ndef Extract7(lst):\n    '''\n    Write a python function to get the seventh element of each sublist.\n    '''\n    return lst[6][0]\n    \ndef Extract8(lst):\n    '''\n    Write a python function to get the eighth element of each sublist.\n    '''\n    return lst[7][0]\n    \ndef Extract9(lst):\n    '''\n    Write a python function to get the ninth element of each sublist.\n    '''\n    return lst[8][0]\n    \ndef Extract10(lst):\n    '''\n    Write a python function to get the tenth element of each sublist.\n    '''\n    return lst[9][0]\n    \ndef Extract11(lst):\n    '''\n    Write a python function to get the eleventh element of each sublist.\n    '''\n    return lst[10][0]\n    \ndef Extract12(lst):\n    '''\n    Write a python function to get the twelfth element of each sublist.\n    '''\n    return lst[11][0]\n    \ndef Extract13(lst):\n    '''\n    Write a python function to get the thirteenth element of each sublist.\n    '''\n    return lst[12][0]\n    \ndef Extract14(lst):\n    '''\n    Write a python function to get the fourteenth element of each sublist.\n    '''\n    return lst[13][0]\n    \ndef Extract15(lst):\n    '''\n    Write a python function to get the fifteenth element of each sublist.\n    '''\n    return lst[14][0]\n    \ndef Extract16(lst):\n    '''\n    Write a python function to get the eleventh element of each sublist.\n    '''\n    return lst[15][0]\n    \ndef Extract17(lst):\n    '''\n    Write a python function to get the twelfth element of each sublist.\n    '''\n    return lst[16][0]\n    \ndef Extract18(lst):\n    '''\n    Write a python function to get the thirteenth element of each sublist.\n    '''\n    return lst[17][0]\n    \ndef Extract19(lst):\n    '''\n    Write a python function to get the fourteenth element of each sublist.\n    '''\n    return lst[18][0]\n    \ndef Extract20(lst):\n    '''\n    Write a python function to get the fifteenth element of each sublist.\n    '''\n    return lst[19][0]\n    \ndef Extract21(lst):\n    '''\n    Write a python function to get the thirteenth element of each sublist.\n    '''\n    return lst[20][0]\n    \ndef Extract22(lst):\n    '''\n    Write a python function to get the fourteenth element of each sublist.\n    '''\n    return lst[21][0]\n    \ndef Extract23(lst):\n    '''\n    Write a python function to get the fifteenth element of each sublist.\n    '''\n    return lst[22][0]\n    \ndef Extract24(lst):\n    '''\n    Write a python function to get the fifth element of each sublist.\n    '''\n    return lst[23][0]\n    \ndef Extract25(lst):\n    '''\n    Write a python function to get the sixth element of each sublist.\n    '''\n    return lst[24][0]\n    \ndef Extract26(lst):\n    '''\n    Write a python function to get the seven element of each sublist.\n    '''\n    return lst[25][0]\n    \ndef Extract27(lst):\n    '''\n    Write a python function to get the eighth element of each sublist.\n    '''\n    return lst[26][0]\n    \ndef Extract28(lst):\n    '''\n    Write a python function to get the ninth element of each sublist.\n    '''\n    return lst[27][0]\n    \ndef Extract29(lst):\n    '''\n    Write a python function to get the tenth element of each sublist.\n    '''\n    return lst[28][0]\n    \ndef Extract30(lst):\n    '''\n    Write a python function to get the eleventh element of each sublist.\n    '''\n    return lst[29][0]\n    \ndef Extract31(lst):\n    '''\n    Write a python function to get the twelfth element of each sublist.\n    '''\n    return lst[30][0]\n    \ndef Extract32(lst):\n    '''\n    Write a python function to get the thirteenth element of each sublist.\n    '''\n    return lst[31][0]\n    \ndef Extract33(lst):\n    '''\n    Write a python function to get the fourteenth element of each sublist.\n    '''\n    return lst[32][0]\n    \ndef Extract34(lst):\n    '''\n    Write a python function to get the fifteenth element of each sublist.\n    '''\n    return lst[33][0]\n    \ndef Extract35(lst):\n    '''\n    Write a python function to get the fifth element of each sublist.\n    '''\n    return lst[34][0]\n    \ndef Extract36(lst):\n    '''\n    Write a python function to get the sixth element of each sublist.\n    '''\n    return lst[35][0]\n    \ndef Extract37(lst):\n    '''\n    Write a python function to get the seven element of each sublist.\n    '''\n    return lst[36][0]\n    \ndef Extract38(lst):\n    '''\n    Write a python function to get the eighth element of each sublist.\n    '''\n    return lst[37][0]\n    \ndef Extract39(lst):\n    '''\n    Write a python function to get the ninth element of each sublist.\n    '''\n    return lst[38][0]\n    \ndef Extract40(lst):\n    '''\n    Write a python function to get the tenth element of each sublist.\n    '''\n    return lst[39][0]\n    \ndef Extract41(lst):\n    '''\n    Write a python function to get the eleventh element of each sublist.\n    '''\n    return lst[40][0]\n    \ndef Extract42(lst):\n    '''\n    Write a python function to get the twelfth element of each sublist.\n    '''\n    return lst[41][0]\n    \ndef Extract43(lst):\n    '''\n    Write a python function to get the thirteenth element of each sublist.\n    '''\n    return lst[42][0]\n    \ndef Extract44(lst):\n    '''\n    Write a python function to get the fourteenth element of each sublist.\n    '''\n    return lst[43][0]\n    \ndef Extract45(lst):\n    '''\n    Write a python function to get the fifteenth element of each sublist.\n    '''\n    return lst[44][0]\n    \ndef Extract46(lst):\n    '''\n    Write a python function to get the fifth element of each sublist.\n    '''\n    return lst[45]["
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def Print(lst): \n        for i in lst: \n            print(i[0])\n    Print(lst)\ndef Print(lst): \n    for i in lst: \n        print(i[0])"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        return i[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    print(\"Number of upper case character is\",ctr)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr=0\n    str.upper()\n    for i in str:\n        if i.isupper():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lst = []\n    count = 0\n    for i in range(0, len(str)):\n        if str[i].isupper():\n            count = count + 1\n            lst.append(str[i].upper())\n    return count, lst\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for ch in str:\n        if ch.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].islower():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    elif list1[0] == list1[-1]:\n        return [list1]\n    elif list1[0] not in list1[1:]:\n        return combinations_list([list1[:1]] + list1[1:]) + combinations_list(list1[1:])\n    else:\n        return combinations_list([list1[:1]] + list(combinations_list(list1[1:]) + [list1[0]]))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        result = []\n        \n        for i in range(len(list1)):\n            for j in combinations_list(list1[i+1:]):\n                result.append(list1[i] + j)\n        return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = list(set(list1))\n    n = len(list1)\n    \n    if n == 1:\n        return list1\n    else:\n        for i in range(0,n):\n            for j in range(i+1,n):\n                temp = list1[i]+list1[j]\n                if temp in list1:\n                    list1.remove(temp)\n                    list1.append(temp)\n        return list1"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = []\n    for el in list1:\n        l.append(str(el))\n    return l\n    \ndef print_list(list):\n    '''\n    Print all elements in a given list.\n    '''\n    for el in list:\n        print(el, end=' ')\n    print()\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    list1.sort()\n    if len(list1) == 1:\n        return [list1]\n    for i in range(len(list1)):\n        for j in combinations_list(list1[i+1:]):\n            res.append([list1[i]]+j)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,len(list1)))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,2))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for x in range(1, len(list1)):\n        for y in range(x):\n            if (list1[x] == list1[y]):\n                continue\n            elif (list1[x] < list1[y]):\n                break\n            elif (list1[x] > list1[y]):\n                break\n            else:\n                continue\n            break\n    else:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        return [list1]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_val = 0\n    curr_max_val = 0\n    prod_arr = 1\n    # Do a for loop through the array\n    for i in range(len(arr)):\n        # Find the maximum value in the current array. \n        # This is to ensure that the product is the same\n        curr_max_val = max(arr[i], curr_max_val)\n        # If the value is greater than the current value,\n        # then set the current value to the new maximum value.\n        if curr_max_val > max_val:\n            max_val = curr_max_val\n            # Calculate the product of the current value with the previous value.\n        prod_arr *= arr[i]\n        # Update the current value\n        curr_max_val = max(arr[i], curr_max_val)\n    # Return the maximum product.\n    return prod_arr, max_val\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_product_index = 0\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            max_product_index = i\n    return max_product_index\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def subarray_product(a, k, n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return a[0]\n        \n        \n        dp = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n        \n        for i in range(1, n + 1):\n            dp[0][i] = a[0]\n            for j in range(1, i):\n                dp[j][i] = a[j] + dp[j - 1][i - j]\n        \n        return max(dp[k][n] for k in range(k, n))\n    \n    max_product = 0\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product, subarray_product(arr, i, len(arr)))\n    \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    soln = [0 for _ in range(len(arr))]\n    result = -float(\"inf\")\n    index = 0\n    i = 0\n    j = 0\n    for k in range(len(arr)):\n        while i < len(arr) and arr[i] < arr[k]:\n            i += 1\n        if i < len(arr):\n            while j < len(arr) and arr[j] < arr[k]:\n                j += 1\n            if j < len(arr):\n                soln[index] = arr[i] * arr[j]\n                i += 1\n                j += 1\n                index += 1\n        elif arr[k] > arr[-1]:\n            soln[index] = arr[k] * arr[-1]\n            index += 1\n        else:\n            result = max(result, arr[k])\n    return result, index, soln\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = []\n    product_sum = []\n    for i in range(len(arr)):\n        product_sum.append(0)\n        for j in range(i,len(arr)):\n            product_sum[i] += arr[j]\n        if product_sum[i] > 0:\n            max_product.append(product_sum[i])\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_max_product_part = []\n        max_max_product_part.append(arr[0])\n        for index in range(1, len(arr)):\n            max_max_product_part.append(max(max_max_product_part[index-1] * arr[index], arr[index]))\n        return max(max_max_product_part)\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #Write your code here.\n    max_prod = arr[0]\n    max_length = len(arr)\n    for i in range(1,max_length):\n        max_prod = max(arr[i],arr[i-1]*max_prod)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    # In this case, we just want the first element of the subarray\n    subarray = arr[0]\n    for i in range(1,n):\n        subarray = max(subarray * arr[i], arr[i])\n    return subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_len = 0\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        temp_prod = arr[i] * max_prod\n        max_len = max(max_len, temp_prod)\n    return max_len\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    curr_product = 1\n    max_product = 0\n    \n    for num in arr:\n        curr_product *= num\n        \n        if curr_product > max_product:\n            max_product = curr_product\n        \n        elif curr_product == max_product:\n            curr_product = 1\n    \n    return max_product\n    \n    "
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if(key!=n):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == len(dict):\n        return True\n    if not dict.get(n):\n        return False\n    return check_value(dict[n], n+1)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if key not in dict.values():\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    lst = []\n    for i in range(len(dict)):\n        lst.append(dict[i][n])\n    if not all(lst):\n        print('True')\n        return True\n    else:\n        print('False')\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    for key, value in dict.items():\n        if key!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_values = dict.values()\n    for item in dict_values:\n        if type(item)!= type(dict[item]):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k in dict.keys():\n        if k!= n:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        for j in range(i + 1, len(dict)):\n            if dict[i]!= dict[j]:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict:\n        if value not in n:\n            return False\n        if dict[value]!= n[value]:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    newdict = {}\n    for key in dict1:\n        if dict1[key] == '' or type(dict1[key]) == str:\n            pass\n        elif type(dict1[key]) == dict:\n            newdict.update(dict1[key])\n        else:\n            newdict.update({key: dict1[key]})\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Code here\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if len(dict1[i]) == 0:\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == '':\n            del dict1[i]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if len(i) == 0:\n            del(dict1[i])\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: dict1[key] for key in dict1 if len(dict1[key]) > 0}\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i,j in dict1.items():\n        if len(j) == 0:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == []:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == '':\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    try:\n        dict1.clear()\n    except:\n        pass\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    for i in range(1, len(arr)):\n        product = product * arr[i]\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n=len(arr)\n    k=1\n    for i in range(1,n):\n        if arr[i]>arr[i-1]:\n            k+=1\n        else:\n            break\n    return k*arr[n-k]\narr=[4,3,5,8,2]\nprint(max_product(arr))"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    for i in range(len(arr)-1):\n        temp_max = arr[i]*arr[i+1]\n        if max_product < temp_max:\n            max_product = temp_max\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # return max(list(map(max_product, arr)))\n    length = len(arr)\n    if length <= 1:\n        return arr[0]\n    return max(arr[0], max_product(arr[1:]) * arr[0])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    for n in arr:\n        product = product * n\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = arr[0]\n    for i in range(1,len(arr)):\n        product = max(product*arr[i],arr[i])\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return max([n*m for n,m in zip(arr[1:],arr[:-1])])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr == []:\n        return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO: Implement me\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add_tup = tuple()\n    for i in range(len(test_tup) - 1):\n        for j in range(i + 1, len(test_tup)):\n            add_tup += test_tup[i] + test_tup[j]\n    return add_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(lambda a,b: a + b, test_tup, test_tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def get_neighbors(a, b):\n        '''\n        Find the indices of the two elements, in the tuple, which are in the same place.\n        '''\n        return (a[0] + b[0], a[1] + b[1])\n    def get_common_value(a, b):\n        '''\n        Return the value that appears in both the tuples, and the value that appears in both the tuples.\n        '''\n        return a[0] == b[0] and a[1] == b[1]\n    def get_complement(a, b):\n        '''\n        Return the complement of the given tuple, a, in the same order as it appears in both the tuples.\n        '''\n        return (b[1] - a[1])\n    def get_negative_val(a, b):\n        '''\n        Return the negative of the given value.\n        '''\n        return -a[0] - b[0]\n    def get_positive_val(a, b):\n        '''\n        Return the positive value of the given value.\n        '''\n        return a[0] + b[0]\n    def get_neg_i(a, b):\n        '''\n        Return the index of the negative value.\n        '''\n        return a[1]\n    def get_pos_i(a, b):\n        '''\n        Return the index of the positive value.\n        '''\n        return b[1]\n    neighbors = []\n    for a, b in zip(test_tup[:-1], test_tup[1:]):\n        neighbors.append(get_neighbors(a, b))\n    neighbors.sort(key=lambda a: a[0])\n    neighbors.sort(key=lambda a: a[1])\n    return neighbors\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    i = 0\n    while i < len(test_tup) - 1:\n        if test_tup[i] < test_tup[i + 1]:\n            temp = test_tup[i + 1]\n            test_tup[i + 1] = test_tup[i]\n            test_tup[i] = temp\n        else:\n            i += 1\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise Exception(\"The tuple must have at least two elements\")\n    summ = 0\n    for i in range(len(test_tup) - 1):\n        summ = summ + test_tup[i] + test_tup[i + 1]\n    return summ\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def add_pairwise2(a, b):\n        '''\n        Return a tuple of the same size as the input a and b, with the\n        elements of a and b being the sum of all the elements of the input\n        tuple a and b.\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO: Write your code here\n    a = test_tup[0]\n    b = test_tup[1]\n    add = (a + b)\n    add_tup = (a, b, add)\n    return add_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l = len(test_tup)\n    n = len(test_tup[0])\n    for i in range(l-2):\n        for j in range(i+2,l):\n            # print(l-1)\n            # print(i,j)\n            s = test_tup[i] + test_tup[j]\n            # print(s)\n            if s == 0:\n                if (n%2 == 0):\n                    return (test_tup[i],test_tup[j])\n                else:\n                    return (test_tup[i],test_tup[j])\n            else:\n                continue\n        return False\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Declare empty list\n    neighbor_list = []\n    \n    # Iterate through the given tuple\n    for i in range(len(test_tup) - 1):\n        # Iterate through the next tuple\n        for j in range(len(test_tup) - 1):\n            # Add the tuple element of the i and jth neighbor\n            neighbor_list.append((test_tup[i][0] + test_tup[j][0], test_tup[i][1] + test_tup[j][1]))\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for x in arr:\n        product *= x\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code here\n    ans = 1\n    while n > 1:\n        ans = ans * arr[n-1]\n        n = n - 1\n    return ans\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n==1: \n        return arr[0] \n    if n==2: \n        return arr[0]*arr[1] \n    for i in range(1, n): \n        arr[i] = (arr[i]*arr[i-1]) % n \n    return arr[0] \n    \ndef convert_num_to_string(num): \n    '''\n    Write a python function to convert a number to its corresponding string representation.\n    '''\n    if num == 0: \n        return '0'\n    return str(num % 10) \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr) - 1):\n        product *= arr[i]\n    product %= n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr) - 1, -1, -1): \n        product = product * arr[i] \n    return product % "
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(len(arr)):\n        arr[i] = arr[i]%n\n    return arr\n    \ndef solution(arr):\n    def get_remainder(n, arr):\n        remainder = 0\n        for i in range(len(arr)):\n            remainder += arr[i]*n**i\n        return remainder\n    \n    arr = find_remainder(arr, len(arr))\n    return get_remainder(len(arr), arr)"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 0\n    for i in range(n):\n        remainder += arr[i] * (n-i)\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # 1. Using Recursion\n    # 2. Set reminder to 1 (no reminder)\n    # 3. Store remainder\n    # 4. Find remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = arr[n]\n    for i in range(n, -1, -1):\n        remainder = (remainder * arr[i]) % n\n    return remainder\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if (l.count(l[0])>1):\n        return False\n    \n    # For each number in the list\n    for i in range(len(l)):\n        if l[i]>l[i+1]:\n            return False\n    \n    return True\n        \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    print(\"Check Consecutive\\n\")\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1] and l[i]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # Create an empty array to store the consecutive numbers in the given list\n    Consecutive_num = []\n    \n    # loop through the given list\n    for i in l:\n        # if the current element is not a number, continue \n        if (i % 10)!= 0: \n            continue\n        \n        # if the element is a number, append it to the list\n        elif i % 10 == 0: \n            Consecutive_num.append(i)\n    \n    # if the list is not empty, then return True \n    if len(Consecutive_num) > 0: \n        return True\n    \n    # if the list is empty return False \n    else: \n        return False"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (l[0] == l[1] and l[1]!= l[2]) or (l[1] == l[2] and l[1]!= l[0])\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # your code here\n    for i in range(0, len(l)):\n        if (l[i] == l[i-1]):\n            return False\n    return True\n    \n    \nif __name__ == '__main__':\n    l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if check_Consecutive(l):\n        print('Yes')\n    else:\n        print('No'"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    count = 0\n    while i < len(l): \n        if l[i] == l[i + 1] and l[i] == l[i - 1]:\n            count = count + 1\n        i = i + 1\n    print(count)\n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return 0\n    elif l[0] == l[1]:\n        return 1\n    else:\n        return 0\nl = [1,2,3,4,5,6,7,8,9,10,11]\nprint(check_Consecutive(l)"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) % 2!= 0: # if the number of elements is odd, the list has to have even length\n        return False\n    for i in range(0, len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)):\n        if l[i] % 10 == 0 and l[i] > l[i-1] and l[i] > l[i+1]:\n            count += 1\n        elif l[i] == l[i-1] and l[i] > l[i+1]:\n            count += 1\n    return count == 2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Remove duplicate elements and sort the list\n    test_list = list(set(test_list1) | set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                tuple_list.append(test_list1[i])\n    return tuple_list\n    \n    \n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pas"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple([x for x in test_list1 if x in test_list2])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        if i in test_list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] not in temp_list:\n            temp_list.append(test_list1[i])\n    return temp_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            l1.append(test_list1[i])\n        else:\n            l2.append(test_list1[i])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set()\n    test_list1_ = []\n    for item in test_list1:\n        if item in test_list2:\n            test_list1_.append(item)\n    return test_list1_\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple((x for x in test_list1 if x in test_list2))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if type(newch)!= str:\n        raise TypeError('Must be a string.')\n    #print(type(str1))\n    #print(type(newch))\n    #print(str1)\n    for i,c in enumerate(str1):\n        if c==newch:\n            #print(i)\n            #print(str1[i])\n            #print(newch)\n            str1=str1.replace(c,newch)\n            break\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    newstr2 = ''\n    \n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr = newstr + newch\n        else:\n            newstr = newstr + str1[i]\n    \n    for j in range(len(newstr)-1,0,-1):\n        if newstr[j] == newstr[j-1]:\n            newstr = newstr[0:j]\n            newstr = newstr + newch\n            newstr = newstr + newstr[-1]\n        else:\n            newstr = newstr[0:j]\n            newstr = newstr + newch\n            newstr = newstr + newstr[-1]\n            \n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #create a copy of the string\n    str1_copy = str1[:]\n    #loop through the string and replace each character\n    for char in str1_copy:\n        if char == ch:\n            str1_copy = str1_copy.replace(char, newch)\n    return str1_copy\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=''\n    for i in range(len(str1)):\n        if ch==str1[i]:\n            new_str+=newch\n        else:\n            new_str+=(str1[i])\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1) == len(ch):\n        for i,j in enumerate(ch):\n            str1 = str1.replace(j,newch[i])\n        return str1\n    else:\n        print(\"The given string does not have the given character\")\n        return False\n    \n    \n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if not ch:\n        return str1\n    elif not newch:\n        return str1\n    else:\n        if ch == \" \":\n            return str1.replace(str1.split(ch)[0],\" \", 1) + str1.replace(str1.split(ch)[0],\" \", newch.count(ch))\n        else:\n            return str1.replace(str1.split(ch)[0],\" \", newch.count(ch)) + str1.replace(str1.split(ch)[0],\" \", newch.count(ch))\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict1.copy()\n    dict2 = sorted(dict2.items(),key=lambda x:x[1],reverse=True)\n    print(dict2)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key, value in dict1.items():\n        dict1[key] = dict1[key]/len(dict1)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    d = dict1.copy()\n    d = sorted(d.items(), key=lambda x:x[1], reverse=True)\n    return d\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=operator.itemgetter(1))\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = []\n    for key, val in dict1.items():\n        list1.append(val)\n    list1.sort()\n    dict1 = {}\n    for val in list1:\n        dict1[val] = 1\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = {}\n    for key in dict1.keys():\n        if dict1[key] not in dict2.keys():\n            dict2[dict1[key]] = []\n        dict2[dict1[key]].append(key)\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    dict_sorted = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict_sorted\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return 0\n    \n    sum = nums[0]\n    for i in nums[1:]:\n        sum = max(sum, i + sum)\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    temp = 0\n    for i in nums:\n        if i <= temp:\n            temp = i\n        elif i > temp:\n            temp = i\n    return temp\n    \nprint(big_sum([10, 20, 7, 8, 9, 3, 5, 6, 4]))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    \n    for i in range(len(nums)):\n        if i == 0 or nums[i-1] < nums[i]:\n            s += nums[i]\n        else:\n            s = max(s, nums[i])\n            s -= nums[i]\n    return s\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest=max(nums)\n    smallest=min(nums)\n    largest=max(largest,smallest)\n    smallest=min(smallest,largest)\n    return largest-smallest\n    \nnums=[]\nn=int(input())\nfor i in range(n):\n    nums.append(int(input()))\nprint(big_sum(nums)"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    '''\n    # Problem Statement\n    # Given an array, return the sum of the array's elements. \n    # Example 1:\n    #\n    # Input: [3, 2, 1, 5, 8, 6]\n    # Output: 21\n    # Explanation: The sum that would be required is 3 + 2 + 1 + 5 + 8 + 6 = 21.\n    # Example 2:\n    #\n    # Input: [2, 2, 3, 1, 2, 2]\n    # Output: 10\n    # Explanation: There are two elements with the sum 2.\n    # Example 3:\n    #\n    # Input: [2, 5, 9, 11, 12, 5, 6, 7, 9, 10, 12]\n    # Output: 23\n    # Explanation: The total sum of the array is 23 = 10 + 5 + 9 + 5 + 9 + 5 + 11 + 11 + 12 + 6 + 6 + 7 + 9 + 9 + 10 + 12.\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = sum(nums)\n    smallest = min(nums)\n    return (largest + smallest)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    biggest = 0\n    smallest = 0\n    for num in nums:\n        if biggest < num:\n            biggest = num\n        elif smallest > num:\n            smallest = num\n    print(f\"The smallest value in the array is: {smallest}\")\n    print(f\"The largest value in the array is: {biggest}\")\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    \n    # find the largest and smallest values\n    n = len(nums)\n    i = n - 1\n    \n    largest = [0] * n\n    smallest = [0] * n\n    \n    # process all the elements and find the largest value\n    for x in nums:\n        largest[i] = x\n        i -= 1\n        \n    # process the smallest values\n    for x in range(n):\n        smallest[i] = x\n        i -= 1\n    \n    # find the average of all the values\n    sum = 0\n    for x in range(n):\n        sum += largest[x]\n        sum -= smallest[x]\n        \n    sum /= (n - 1)\n    \n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = None\n    smallest = None\n    for num in nums:\n        if smallest is None or num < smallest:\n            smallest = num\n        elif largest is None or num > largest:\n            largest = num\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if len(string) == 0:\n        return 0\n    if string[0].islower():\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # FILL IN YOUR CODE HERE...\n    if isinstance(string, str):\n        return string.lower()\n    else:\n        raise TypeError('Input must be string')\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_string = string.lower()\n    lower_case_string = lower_case_string.replace('-','')\n    lower_case_string = lower_case_string.replace('.','')\n    lower_case_string = lower_case_string.replace(',','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace('!','')\n    lower_case_string = lower_case_string.replace('?','')\n    lower_case_string = lower_case_string.replace('/','')\n    lower_case_string = lower_case_string.replace('+','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('*','')\n    lower_case_string = lower_case_string.replace(' ','')\n    lower_case_string = lower_case_string.replace('  ','')\n    lower_case_string = lower_case_string.replace('\"','')\n    lower_case_string = lower_case_string.replace(\"'\",'')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('!','')\n    lower_case_string = lower_case_string.replace('?','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('&','')\n    lower_case_string = lower_case_string.replace('$','')\n    lower_case_string = lower_case_string.replace('$','')\n    lower_case_string = lower_case_string.replace('!','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('=','')\n    lower_case_string = lower_case_string.replace('','')\n    lower_case_string = lower_case_string.replace(',','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace(':','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace('!','')\n    lower_case_string = lower_case_string.replace('?','')\n    lower_case_string = lower_case_string.replace('/','')\n    lower_case_string = lower_case_string.replace('+','')\n    lower_case_string = lower_case_string.replace('%','')\n    lower_case_string = lower_case_string.replace('&','')\n    lower_case_string = lower_case_string.replace('$','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('!','')\n    lower_case_string = lower_case_string.replace('?','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('+','')\n    lower_case_string = lower_case_string.replace('%','')\n    lower_case_string = lower_case_string.replace('&','')\n    lower_case_string = lower_case_string.replace('$','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace('-','')\n    lower_case_string = lower_case_string.replace('.','')\n    lower_case_string = lower_case_string.replace(',','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace('!','')\n    lower_case_string = lower_case_string.replace('?','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('*','')\n    lower_case_string = lower_case_string.replace(' ','')\n    lower_case_string = lower_case_string.replace('  ','')\n    lower_case_string = lower_case_string.replace('\"','')\n    lower_case_string = lower_case_string.replace(\"'\",'')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('!','')\n    lower_case_string = lower_case_string.replace('?','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('+','')\n    lower_case_string = lower_case_string.replace('%','')\n    lower_case_string = lower_case_string.replace('&','')\n    lower_case_string = lower_case_string.replace('$','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace('-','')\n    lower_case_string = lower_case_string.replace('.','')\n    lower_case_string = lower_case_string.replace(',','')\n    lower_case_string = lower_case_string.replace(';','')\n    lower_case_string = lower_case_string.replace('!','')\n    lower_case_string = lower_case_string.replace('?','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replace(')','')\n    lower_case_string = lower_case_string.replace('*','')\n    lower_case_string = lower_case_string.replace(' ','')\n    lower_case_string = lower_case_string.replace('  ','')\n    lower_case_string = lower_case_string.replace('\"','')\n    lower_case_string = lower_case_string.replace(\"'\",'')\n    lower_case_string = lower_case_string.replace('(','')\n    lower_case_string = lower_case_string.replac"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = re.sub('[a-z]', '', str1)\n    res = re.sub('[0-9]', '', res)\n    return res\ndef get_column(path, start, end, str1):\n    \"\"\"\n    Return the first char of a given string in a given column range.\n    \"\"\"\n    if start > end:\n        return None\n    \n    while start < end:\n        if path[start]!= str1[start]:\n            break\n        start += 1\n    \n    if start >= end:\n        return None\n    \n    while start < end:\n        if path[end]!= str1[end]:\n            break\n        end -= 1\n    \n    return end\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(0, len(str1)-1):\n        if str1[i].islower():\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace('A','a').replace('B','b').replace('C','c').replace('D','d').replace('E','e').replace('F','f').replace('G','g').replace('H','h').replace('I','i').replace('J','j').replace('K','k').replace('L','l').replace('M','m').replace('N','n').replace('O','o').replace('P','p').replace('Q','q').replace('R','r').replace('S','s').replace('T','t').replace('U','u').replace('V','v').replace('W','w').replace('X','x').replace('Y','y').replace('Z','z')\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.replace('0','0').replace('1','1').replace('2','2').replace('3','3').replace('4','4').replace('5','5').replace('6','6').replace('7','7').replace('8','8').replace('9','9')\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ').replace('\\xa0',' ').replace('\\xa1',' ').replace('-',' ').replace('_',' ').replace('#',' ').replace('$',' ').replace('.',' ').replace('=',' ').replace('!',' ').replace('|',' ').replace('&',' ').replace('*',' ').replace('+',' ').replace('/',' ').replace('_',' ').replace('%',' ').replace('[',' ').replace(']',' ').replace('{',' ').replace('}',' ').replace('~',' ').replace('`',' ').replace('`',' ').replace('\\\\',' ').replace('<',' ').replace('>',' ').replace('@',' ').replace(']',' ').replace(']',' ').replace('&',' ').replace('.',' ').replace('_',' ').replace('+',' ').replace('+',' ').replace('',' ').replace('!',' ').replace('|',' ').replace('&',' ').replace('*',' ').replace('_',' ').replace('/',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' ').replace('_',' "
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1', str1).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str_new=''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str_new+=str1[i].lower()\n        else:\n            str_new+=str1[i]\n    return str_new\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) < 2:\n        return str1\n    elif str1.startswith('_'):\n        return str1\n    else:\n        result = ''\n        for i in range(0, len(str1)):\n            if str1[i].isupper():\n                result += str1[i].lower()\n            elif str1[i].islower():\n                result += str1[i].lower()\n        result = re.sub('(?!_[A-Z])', '', result)\n        return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1.replace(' ', '')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r\"[a-z]{2,}\", \"\", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]')\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 : return 0\n    if n < 0 : return -1\n    while n > 0 :\n        n /= 10\n        c = n\n        d = c\n        while c >= 10 : c /= 10\n        while c > 0 :\n            if c < 10 : d = d + c\n            else : d = d - 10 * c\n            c = c / 10\n    return d\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        if n < 100 :\n            return (n // 10) + (n % 10)\n        else :\n            if n < 1000 :\n                return (n // 100) + (n % 100)\n            else :\n                if n < 1000000 :\n                    return (n // 1000) + (n % 1000)\n                else :\n                    return (n // 1000000) + (n % 1000000)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = 0\n    while n > 0 :\n        last = n % 10\n        n = n//10\n        first = last\n    return first\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # remove leading zeros\n    strnum = str(n)\n    lstnum = list(strnum)\n    for i in range(len(lstnum)) :\n        if(lstnum[i] == '0') :\n            lstnum.pop(i)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    def firstDigit(n) :  \n        '''\n        Write a python function to find the first digit of a given number.\n        '''\n        if n == 0 :  \n            return 'zero'  \n        elif n == 1 :  \n            return 'one'  \n        elif n == 2 :  \n            return 'two'  \n        elif n == 3 :  \n            return 'three'  \n        elif n == 4 :  \n            return 'four'  \n        elif n == 5 :  \n            return 'five'  \n        elif n == 6 :  \n            return'six'  \n        elif n == 7 :  \n            return'seven'  \n        elif n == 8 :  \n            return 'eight'  \n        elif n == 9 :  \n            return 'nine'  \n        elif n == 10 :  \n            return 'ten'  \n        elif n == 11 :  \n            return 'eleven'  \n        elif n == 12 :  \n            return 'twelve'  \n        elif n == 13 :  \n            return 'thirteen'  \n        elif n == 14 :  \n            return 'fourteen'  \n        elif n == 15 :  \n            return 'fifteen'  \n        elif n == 16 :  \n            return'sixteen'  \n        elif n == 17 :  \n            return'seventeen'  \n        elif n == 18 :  \n            return 'eighteen'  \n        elif n == 19 :  \n            return 'nineteen'  \n        elif n == 20 :  \n            return 'twenty'  \n        elif n == 21 :  \n            return 'twenty-one'  \n        elif n == 22 :  \n            return 'twenty-two'  \n        elif n == 23 :  \n            return 'twenty-three'  \n        elif n == 24 :  \n            return 'twenty-four'  \n        elif n == 25 :  \n            return 'twenty-five'  \n        elif n == 26 :  \n            return 'twenty-six'  \n        elif n == 27 :  \n            return 'twenty-seven'  \n        elif n == 28 :  \n            return 'twenty-eight'  \n        elif n == 29 :  \n            return 'twenty-nine'  \n        elif n == 30 :  \n            return 'twenty-ten'  \n        elif n == 31 :  \n            return 'thirty-one'  \n        elif n == 32 :  \n            return 'thirty-two'  \n        elif n == 33 :  \n            return 'thirty-three'  \n        elif n == 34 :  \n            return 'thirty-four'  \n        elif n == 35 :  \n            return 'thirty-five'  \n        elif n == 36 :  \n            return 'thirty-six'  \n        elif n == 37 :  \n            return 'thirty-seven'  \n        elif n == 38 :  \n            return 'thirty-eight'  \n        elif n == 39 :  \n            return 'thirty-nine'  \n        elif n == 40 :  \n            return 'forty-one'  \n        elif n == 41 :  \n            return 'forty-two'  \n        elif n == 42 :  \n            return 'forty-three'  \n        elif n == 43 :  \n            return 'forty-four'  \n        elif n == 44 :  \n            return 'forty-five'  \n        elif n == 45 :  \n            return 'forty-six'  \n        elif n == 46 :  \n            return 'forty-seven'  \n        elif n == 47 :  \n            return 'forty-eight'  \n        elif n == 48 :  \n            return 'forty-nine'  \n        elif n == 49 :  \n            return 'fifty-one'  \n        elif n == 50 :  \n            return 'fifty-two'  \n        elif n == 51 :  \n            return 'fifty-three'  \n        elif n == 52 :  \n            return 'fifty-four'  \n        elif n == 53 :  \n            return 'fifty-five'  \n        elif n == 54 :  \n            return 'fifty-six'  \n        elif n == 55 :  \n            return 'fifty-seven'  \n        elif n == 56 :  \n            return 'fifty-eight'  \n        elif n == 57 :  \n            return 'fifty-nine'  \n        elif n == 58 :  \n            return'sixty-one'  \n        elif n == 59 :  \n            return'sixty-two'  \n        elif n == 60 :  \n            return'sixty-three'  \n        elif n == 61 :  \n            return'sixty-four'  \n        elif n == 62 :  \n            return'sixty-five'  \n        elif n == 63 :  \n            return'sixty-six'  \n        elif n == 64 :  \n            return'sixty-seven'  \n        elif n == 65 :  \n            return'sixty-eight'  \n        elif n == 66 :  \n            return'sixty-nine'  \n        elif n == 67 :  \n            return'seventy-one'  \n        elif n == 68 :  \n            return'seventy-two'  \n        elif n == 69 :  \n            return'seventy-three'  \n        elif n == 70 :  \n            return'seventy-four'  \n        elif n == 71 :  \n            return'seventy-five'  \n        elif n == 72 :  \n            return'seventy-six'  \n        elif n == 73 :  \n            return'seventy-seven'  \n        elif n == 74 :  \n            return'seventy-eight'  \n        elif n == 75 :  \n            return'seventy-nine'  \n        elif n == 76 :  \n            return 'eighty-one'  \n        elif n == 77 :  \n            return 'eighty-two'  \n        elif n == 78 :  \n            return 'eighty-three'  \n        elif n == 79 :  \n            return 'eighty-four'  \n        elif n == 80 :  \n            return 'eighty-five'  \n        elif n == 81 :  \n            return 'eighty-six'  \n        elif n == 82 :  \n            return 'eighty-seven'  \n        elif n == 83 :  \n            return 'eighty-eight'  \n        elif n == 84 :  \n            return 'eighty-nine'  \n        elif n == 85 :  \n            return 'ninety-one'  \n        elif n == 86 :  \n            return 'ninety-two'  \n        elif n == 87 :  \n            return 'ninety-three'  \n        elif n == 88 :  \n            return 'ninety-four'  \n        elif n == 89 :  \n            return 'ninety-five'  \n        elif n == 90 :  \n            return 'ninety-six'  \n        elif n == 91 :  \n            return 'ninety-seven'  \n        elif n == 92 :  \n            return 'ninety-eight'  \n        elif n == 93 :  \n            return 'ninety-nine'  \n    \n    print(f\"{firstDigit(n)}\",end=\" \")\n    if firstDigit(n) == 'zero' :\n        print(firstDigit(n) +'='+ 'zero')\n        n -= 1\n    if firstDigit(n) == 'one' :\n        print(firstDigit(n) +'='+ 'one')\n        n -= 1\n    if firstDigit(n) == 'two' :\n        print(firstDigit(n) +'='+ 'two')\n        n -= 1\n    if firstDigit(n) == 'three' :\n        print(firstDigit(n) +'='+ 'three')\n        n -= 1\n    if firstDigit(n) == 'four' :\n        print(firstDigit(n) +'='+ 'four')\n        n -= 1\n    if firstDigit(n) == 'five' :\n        print(firstDigit(n) +'='+ 'five'"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 'No digits in this number'\n    if n < 10 :\n        return n\n    else :\n        return first_Digit(n//10) + str(n%10)\n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # your code goes here\n    return n[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in range(n) : \n        if n%10 == n%10%10 : \n            return n%10 \n        else : \n            continue\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n<10):\n        return n\n    else:\n        return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in range(len(list)):\n        if(list[i]%2==0):\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if (i % 2) == 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in range(len(list)):\n        if (list[i]%2==1):\n            odd.append(list[i])\n    print(odd)\ndef odd(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if (i%2==1):\n            odd.append(i)\n    print(odd)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    count=0\n    odd=[]\n    for i in list: \n        if i%2==1:\n            odd.append(i)\n        else:\n            count+=1\n    return odd[:count] \n    "
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if i % 2 == 0:\n            odd.append(list[i])\n    return odd\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_odd = []\n    for i in list:\n        if i % 2!= 0:\n            list_odd.append(i)\n    return list_odd \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    out = []\n    for i in list: \n        if i % 2 == 0: \n            out.append(i) \n    return out\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    temp = []\n    odd = []\n    for i in range(len(list)): \n        if list[i] % 2 == 0: \n            temp.append(list[i])\n    for i in range(len(temp)): \n        if i % 2!= 0: \n            odd.append(temp[i])\n    return odd\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 3\n    elif n==3:\n        return 6\n    else:\n        return n*(n-1)*(n-2)*(n-3)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    n = int(input('Enter the number of elements to be counted: '))\n    def sum(n) :\n        '''\n        Write a python function that calculates the sum of the first n natural numbers using the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1,n+1) :\n            sum += i ** 3\n        print(\"The sum of cubes of the first\", n, \"natural numbers is: \", sum)\n    \n    def cube(n) :\n        '''\n        Write a python function that calculates the sum of the cubes of the first n natural numbers using the first n natural numbers.\n        '''\n        cubes = 1\n        for i in range(1,n+1) :\n            cubes = cubes * i ** 3\n        print(\"The sum of cubes of the first\", n, \"natural numbers is: \", cubes)\n    \n    if n > 0 :\n        sum(n)\n        cube(n)\n    elif n < 0 :\n        difference(n)\n    else :\n        print(\"the sum of cubes of the first\", n, \"natural numbers is: \", 0)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return n*difference(n-1)\n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n :\n        sum = sum + i**3\n        i = i + 1\n    return sum - sum**3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n < 0 :  \n        return 'Error: negative value entered'\n        \n    elif n < 0 :  \n        return 'Error: negative value entered'\n        \n    else : \n        total_cube = 0\n        for i in range(1, n + 1) : \n            total_cube += (i ** 3)\n        return total_cube\n            \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    elif n == 2 :\n        return 5\n    elif n == 3 :\n        return 10\n    elif n == 4 :\n        return 25\n    elif n == 5 :\n        return 50\n    elif n == 6 :\n        return 100\n    elif n == 7 :\n        return 250\n    elif n == 8 :\n        return 500\n    elif n == 9 :\n        return 1000\n    elif n == 10 :\n        return 2500\n    elif n == 11 :\n        return 5000\n    elif n == 12 :\n        return 10000\n    elif n == 13 :\n        return 20000\n    elif n == 14 :\n        return 30000\n    elif n == 15 :\n        return 40000\n    elif n == 16 :\n        return 50000\n    elif n == 17 :\n        return 60000\n    elif n == 18 :\n        return 70000\n    elif n == 19 :\n        return 80000\n    elif n == 20 :\n        return 90000\n    elif n == 21 :\n        return 100000\n    elif n == 22 :\n        return 2500000\n    elif n == 23 :\n        return 5000000\n    elif n == 24 :\n        return 6000000\n    elif n == 25 :\n        return 7000000\n    elif n == 26 :\n        return 8000000\n    elif n == 27 :\n        return 9000000\n    elif n == 28 :\n        return 1000000\n    elif n == 29 :\n        return 2500000\n    elif n == 30 :\n        return 5000000\n    elif n == 31 :\n        return 6000000\n    elif n == 32 :\n        return 7000000\n    elif n == 33 :\n        return 8000000\n    elif n == 34 :\n        return 9000000\n    elif n == 35 :\n        return 1000000\n    elif n == 36 :\n        return 2500000\n    elif n == 37 :\n        return 5000000\n    elif n == 38 :\n        return 6000000\n    elif n == 39 :\n        return 7000000\n    elif n == 40 :\n        return 8000000\n    elif n == 41 :\n        return 9000000\n    elif n == 42 :\n        return 1000000\n    elif n == 43 :\n        return 2500000\n    elif n == 44 :\n        return 5000000\n    elif n == 45 :\n        return 6000000\n    elif n == 46 :\n        return 7000000\n    elif n == 47 :\n        return 8000000\n    elif n == 48 :\n        return 9000000\n    elif n == 49 :\n        return 1000000\n    elif n == 50 :\n        return 2500000\n    elif n == 51 :\n        return 5000000\n    elif n == 52 :\n        return 6000000\n    elif n == 53 :\n        return 7000000\n    elif n == 54 :\n        return 8000000\n    elif n == 55 :\n        return 9000000\n    elif n == 56 :\n        return 1000000\n    elif n == 57 :\n        return 2500000\n    elif n == 58 :\n        return 5000000\n    elif n == 59 :\n        return 6000000\n    elif n == 60 :\n        return 7000000\n    elif n == 61 :\n        return 8000000\n    elif n == 62 :\n        return 9000000\n    elif n == 63 :\n        return 1000000\n    elif n == 64 :\n        return 2500000\n    elif n == 65 :\n        return 5000000\n    elif n == 66 :\n        return 6000000\n    elif n == 67 :\n        return 7000000\n    elif n == 68 :\n        return 8000000\n    elif n == 69 :\n        return 9000000\n    elif n == 70 :\n        return 1000000\n    elif n == 71 :\n        return 2500000\n    elif n == 72 :\n        return 5000000\n    elif n == 73 :\n        return 6000000\n    elif n == 74 :\n        return 7000000\n    elif n == 75 :\n        return 8000000\n    elif n == 76 :\n        return 9000000\n    elif n == 77 :\n        return 1000000\n    elif n == 78 :\n        return 2500000\n    elif n == 79 :\n        return 5000000\n    elif n == 80 :\n        return 6000000\n    elif n == 81 :\n        return 7000000\n    elif n == 82 :\n        return 8000000\n    elif n == 83 :\n        return 9000000\n    elif n == 84 :\n        return 1000000\n    elif n == 85 :\n        return 2500000\n    elif n == 86 :\n        return 5000000\n    elif n == 87 :\n        return 6000000\n    elif n == 88 :\n        return 7000000\n    elif n == 89 :\n        return 8000000\n    elif n == 90 :\n        return 9000000\n    elif n == 91 :\n        return 1000000\n    elif n == 92 :\n        return 2500000\n    elif n == 93 :\n        return 5000000\n    elif n == 94 :\n        return 6000000\n    elif n == 95 :\n        return 7000000\n    elif n == 96 :\n        return 8000000\n    elif n == 97 :\n        return 9000000\n    elif n == 98 :\n        return 1000000\n    elif n == 99 :\n        return 2500000\n    elif n == 100 :\n        return 5000000\n    elif n == 101 :\n        return 6000000\n    elif n == 102 :\n        return 7000000\n    elif n == 103 :\n        return 8000000\n    elif n == 104 :\n        return 9000000\n    elif n == 105 :\n        return 1000000\n    elif n == 106 :\n        return 2500000\n    elif n == 107 :\n        return 5000000\n    elif n == 108 :\n        return 6000000\n    elif n == 109 :\n        return 7000000\n    elif n == 110 :\n        return 8000000\n    elif n == 111 :\n        return 9000000\n    elif n == 112 :\n        return 1000000\n    elif n == 113 :\n        return 2500000\n    elif n == 114 :\n        return 5000000\n    elif n == 115 :\n        return 6000000\n    elif n == 116 :\n        return 7000000\n    elif n == 117 :\n        return 8000000\n    elif n == 118 :\n        return 9000000\n    elif n == 119 :\n        return 1000000\n    elif n == 120 :\n        return 2500000\n    elif n == 121 :\n        return 5000000\n    elif n == 122 :\n        return 6000000\n    elif n == 123 :\n        return 7000000\n    elif n == 124 :\n        return 8000000\n    elif n == 125 :\n        return 9000000\n    elif n == 126 :\n        return 1000000\n    elif n == 127 :\n        return 2500000\n    elif n == 128 :\n        return 5000000\n    elif n == 129 :\n        return 6000000\n    elif n == 130 :\n        return 7000000\n    elif n == 131 :\n        return 8000000\n    elif n == 132 :\n        return 9000000\n    elif n == 133 :\n        return 1000000\n    elif n == 134 :\n        return 2500000\n    elif n == 135 :\n        return 5000000\n    elif n == 136 :\n        return 6000000\n    elif n == 137 :\n        return 7000000\n    elif n == 138 :\n        return 8000000\n    elif n == 139 :\n        return 9000000\n    elif n == 140 :\n        return 1000000\n    elif n == 141 :\n        return 2500000\n    elif n == 142 :\n        return 5000000\n    elif n == 143 :\n        return 6000000\n    elif n == 144 :\n        return 7000000\n    elif n == 145 :\n        return 8000000\n    elif n == 146 :\n        return 9000000\n    elif n == 147 :\n        return 1000000\n    elif n == 148 :\n        return 2500000\n    elif n == 149 :\n        return 5000000\n    elif n == 150 :\n        return 6000000\n    elif n == 151 :\n        return 7000000\n    elif n == 152 :\n        return 8000000\n    elif n == 153 :\n        return 9000000\n    elif n == 154 :\n        return 1000000\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x=sum(n)\n    n1=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            n1.append(i)\n    return x-sum(n1)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #let us write a python function\n    def factorial(n) :\n        '''\n        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n        '''\n        #let us write a python function\n        def factorial2(n) :\n            '''\n            Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n            '''\n            #let us write a python function\n            def factorial3(n) :\n                '''\n                Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                '''\n                #let us write a python function\n                def factorial4(n) :\n                    '''\n                    Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                    '''\n                    #let us write a python function\n                    def factorial5(n) :\n                        '''\n                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                        '''\n                        #let us write a python function\n                        def factorial6(n) :\n                            '''\n                            Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                            '''\n                            #let us write a python function\n                            def factorial7(n) :\n                                '''\n                                Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                '''\n                                #let us write a python function\n                                def factorial8(n) :\n                                    '''\n                                    Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                    '''\n                                    #let us write a python function\n                                    def factorial9(n) :\n                                        '''\n                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                        '''\n                                        #let us write a python function\n                                        def factorial10(n) :\n                                            '''\n                                            Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                            '''\n                                            #let us write a python function\n                                            def factorial11(n) :\n                                                '''\n                                                Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                '''\n                                                #let us write a python function\n                                                def factorial12(n) :\n                                                    '''\n                                                    Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                    '''\n                                                    #let us write a python function\n                                                    def factorial13(n) :\n                                                        '''\n                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                        '''\n                                                        #let us write a python function\n                                                        def factorial14(n) :\n                                                            '''\n                                                            Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                            '''\n                                                            #let us write a python function\n                                                            def factorial15(n) :\n                                                                '''\n                                                                Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                '''\n                                                                #let us write a python function\n                                                                def factorial16(n) :\n                                                                    '''\n                                                                    Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                    #let us write a python function\n                                                                    def factorial17(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial18(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial19(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial20(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial21(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial22(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial23(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial24(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial25(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial26(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial27(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial28(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial29(n) :\n                                                                        '''\n                                                                        Write a python function that accepts a natural number n and returns the product of all the cubes of the numbers from 1 to n.\n                                                                    '''\n                                                                        #let us write a python function\n                                                                    def factorial30(n) :\n                                                            "
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    occ = 0\n    for i in range(N) :\n        for j in range(i+1, N) :\n            if (A[i] ^ A[j] ) == 1 :\n                occ = occ + 1\n    return occ\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i] == A[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd=0\n    for i in range(len(A)) : \n        for j in range(i,len(A)): \n            xor=A[i]^A[j] \n            if (xor)%2==0: \n                odd+=1 \n    return odd \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(0,N) :\n            if (A[i] ^ A[j]!= 0) :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_cnt = 0\n    for i in range(N) :\n        if (A[i] ^ i) % 2!= 0 :\n            odd_cnt += 1\n    return odd_cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = len(A)\n    Pair_Count = 0\n    if (l % 2!= 0) :\n        Pair_Count = Pair_Count + 1\n    for i in range(0,l) :\n        if (A[i] ^ A[i+1]) % 2 == 1 :\n            Pair_Count = Pair_Count + 1\n    return(Pair_Count)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd=0\n    for i in range(N-1):\n        for j in range(N):\n            if A[i]^A[j]!=A[i]^A[j+1]:\n                odd+=1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odds=0\n    xor=0\n    #Write your code here\n    return odds\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if A[i] == A[j] :\n                count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(N):\n        for j in range(i,N):\n            if (A[i] & A[j] == 0) :\n                if A[i] ^ A[j]!= 0 :\n                    if A[i] ^ A[j] == 1 :\n                        odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    wordlist = []\n    for char in string:\n        wordlist.append(char.lower())\n    for char in wordlist:\n        wordlist.remove(char)\n    return \"\".join(wordlist)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for char in string:\n        if char.islower():\n            string = string.replace(char, 'a')\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return \"\".join([ch if ch.isupper() else ch.lower() for ch in string.upper()])\n    \nprint(toggle_string(\"Hello World!\")"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    if string == '':\n        return string\n    else:\n        return string[0].upper() + string[1:]\n    \n    \n    \n    "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    for char in string:\n        if char == \" \":\n            string = string.replace(char, \"\")\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(string.lower())\n    print(string.upper())\n    print(string.capitalize())\n    print(string.swapcase())\n    print(string.expandtabs())\n    print(string.istitle())\n    print(string.isupper())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    print(string.isnumeric())\n    print(string.isalnum())\n    print(string.isalpha())\n    print(string.isdigit())\n    print(string.isprintable())\n    print(string.islower())\n    print(string.isupper())\n    print(string.istitle())\n    prin"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    # make a copy of string\n    string = string.lower()\n    # loop through the string\n    for char in string:\n        # if the char is a number\n        if char.isdigit():\n            result += \" \"\n        # if the char is not a number\n        else:\n            result += char\n    # return result\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return string\n    else:\n        return string[0].upper() + string[1:].lower()\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    str=string\n    print(str.lower())\n    str=str.upper()\n    print(str.lower())\n    str=str.title()\n    print(str.lower())\n    str=str.capitalize()\n    print(str.lower())\n    str=str.swapcase()\n    print(str.lower())\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 >= 10 and n1 <= 99:\n        return sum_digits(n1) - sum_digits(n2)\n    elif n2 >= 10 and n2 <= 99:\n        return sum_digits(n2) - sum_digits(n1)\n    else:\n        return -1\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    dif = [abs(n1-n2), abs(n1-n2), abs(n1-n2)]\n    return sum(dif[i] for i in range(3))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(n1):\n        l1.append(i)\n    for i in range(n2):\n        l2.append(i)\n    s = 0\n    for i in range(n1-1):\n        s += abs(l1[i] - l2[i])\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # sum of the digits are the difference between the numbers\n    # digits are the array of digits\n    s = []\n    for i in range(n1+1):\n        s.append(0)\n    for i in range(n2+1):\n        s[i] = i\n    # add first digit of n1 to the end of the digits array\n    s.append(n1)\n    # add the remaining digits to the end of the digits array\n    for i in range(n2, len(s)):\n        s[i] = s[i-1] + s[i]\n    # return the sum of the digits\n    return s[-1]\n    # add one to the index value\n    # since the sum of the digits array is -1, the index value is the index +1\n    # so we add one to the index value\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = 0\n    for n in range(n1 - 1, n2):\n        digit_diff += (n1 - n) * (n2 - n)\n    return digit_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = 0\n    for d1 in range(10):\n        if n1%10 == d1 or n2%10 == d1:\n            pass\n        else:\n            d += abs(n1 - n2)\n            n1 = n2\n            n2 = n1 // 10\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > 10 or n2 > 10:\n        return 0\n    return 10 ** (n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(n1-n2) for n in range(10)])\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    total_sublist_sum = 0\n    current_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = 0\n    for i in range(0, len(a)):\n        s = s + a[i]\n        if s < size:\n            s = s + max_sub_array_sum(a, size - a[i])\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        return max_sub_array_sum(a, size - 1) + a[size - 1]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Calculate the maximum sublist and find the sublist length\n    maxSublistLength = 0\n    for i in range(len(a) - size + 1):\n        length = 1\n        for j in range(size):\n            if i + j < len(a):\n                length = max(length, len(a[i:i+j+1]))\n        maxSublistLength = max(length, maxSublistLength)\n    return maxSublistLength * sum(a[i:i+size])\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # write your code here\n    max_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_list = []\n    for i in range(size):\n        if len(sub_list) == 0:\n            sub_list.append(a[i])\n        else:\n            sub_list[-1] = max(sub_list[-1], a[i])\n    return max(sub_list)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #\n    # Write your code here.\n    #\n    if size == 0:\n        return 0\n    elif size == 1:\n        return a[0]\n    else:\n        result = 0\n        for i in range(0, size - 1):\n            for j in range(i + 1, size):\n                if a[j] > a[i] + result:\n                    result = a[j]\n        return result\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #write your code here\n    sub_sum = []\n    for i in range(0, len(a) - size + 1):\n        if len(a[i:i+size]) > len(sub_sum):\n            sub_sum = a[i:i+size]\n    return sum(sub_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = [0] * size\n    max_sub[0] = a[0]\n    for i in range(1, size):\n        max_sub[i] = max_sub[i-1] + a[i]\n    for i in range(1, size-1):\n        max_sub[i] = max(max_sub[i], max_sub[i-1] + a[i])\n    return max_sub[size-1]\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    output = []\n    i, j = 0, len(test_tup1) - 1\n    while i < len(test_tup1) and j >= len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            output.append(test_tup1[i])\n            i += 1\n        else:\n            output.append(test_tup2[j])\n            j -= 1\n    while i < len(test_tup1):\n        output.append(test_tup1[i])\n        i += 1\n    while j >= len(test_tup2):\n        output.append(test_tup2[j])\n        j -= 1\n    return output\n    \ndef minimum_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the minimum element of two given tuples and output them in sorted order.\n    '''\n    output = []\n    i, j = 0, len(test_tup1) - 1\n    while i < len(test_tup1) and j >= len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            output.append(test_tup1[i])\n            i += 1\n        else:\n            output.append(test_tup2[j])\n            j -= 1\n    while i < len(test_tup1):\n        output.append(test_tup1[i])\n        i += 1\n    while j >= len(test_tup2):\n        output.append(test_tup2[j])\n        j -= 1\n    return output\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_list = []\n    a = set(test_tup1)\n    b = set(test_tup2)\n    a.update(b)\n    b = list(a)\n    result_list = sorted(result_list+b)\n    return result_list\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return union_elements(test_tup2, test_tup1)\n    else:\n        return test_tup1 + test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    try:\n        if not test_tup1:\n            raise TypeError\n        elif not test_tup2:\n            raise TypeError\n        elif len(test_tup1) == 1 and len(test_tup2) == 1:\n            return test_tup1[0]\n        else:\n            intersection = []\n            for i in range(0, len(test_tup1)):\n                for j in range(0, len(test_tup2)):\n                    if test_tup1[i] == test_tup2[j]:\n                        intersection.append(test_tup1[i])\n            intersection.sort()\n            return intersection\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    u_tup1 = []\n    u_tup2 = []\n    if len(test_tup1) > 0:\n        u_tup1 = test_tup1 + test_tup1\n    else:\n        u_tup1 = test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    a = []\n    b = []\n    for i in range(0, len(test_tup1)):\n        a.append(test_tup1[i])\n    for j in range(0, len(test_tup2)):\n        b.append(test_tup2[j])\n    a = sorted(a)\n    b = sorted(b)\n    return a + b\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    def uniq(tup):\n        '''\n        Count the number of unique elements in a tuple.\n        '''\n        count = 0\n        for el in tup:\n            if el not in tup:\n                count += 1\n        return count\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    uniq1 = uniq(test_tup1)\n    uniq2 = uniq(test_tup2)\n    if uniq1 > uniq2:\n        return sorted(test_tup1 + test_tup2)\n    elif uniq1 < uniq2:\n        return sorted(test_tup2 + test_tup1)\n    else:\n        return sorted(test_tup1 + test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    ele = list(test_tup1) + list(test_tup2)\n    ele = sorted(ele)\n    return ele\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # make a tuple to hold element of the union\n    tup = tuple()\n    # iterate through the given tuples\n    for i in range(len(test_tup1)):\n        # if this is not the end of a tuple\n        if i!= len(test_tup1):\n            # append this element to the tuple and put it in a sorted order\n            tup += (test_tup1[i],)\n    # sort the tuple\n    tup = tuple(sorted(tup))\n    # return the sorted tuple\n    return tup\n    "
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(test_tup1 + test_tup2))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return max(len(x) for x in lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    MaxLength = 0\n    list = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i])>len(lst[j]):\n                MaxLength = len(lst[i])\n    return MaxLength\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    cnt=0\n    temp=[]\n    for i in range(len(lst)):\n        if lst[i] not in temp:\n            temp.append(lst[i])\n        else:\n            if len(temp)>cnt:\n                cnt=len(temp)\n                temp=[]\n            temp.append(lst[i])\n    if len(temp)>cnt:\n        cnt=len(temp)\n        temp=[]\n    return cnt\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    else:\n        lst.sort()\n        max_length = 1\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i - 1] + 1:\n                max_length = i\n                break\n        return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in range(len(lst)):\n        length = 0\n        for j in range(len(lst[i])):\n            length = max(length, len(lst[i][j]))\n        result = max(length, result)\n    return result\n    \ndef Count_Sublists(lst):\n    '''\n    Write a python function to count the number of sublists of length 'n' in the given list.\n    '''\n    sublst = len(lst)\n    result = 0\n    for i in range(sublst):\n        result += 1\n        if len(lst[i])!= sublst - i:\n            result += len(lst[i]) - sublst - 1\n    return result\n    \ndef Count_Sublists_2(lst):\n    '''\n    Write a python function to count the number of sublists of length 'n' in the given list.\n    '''\n    sublst = len(lst)\n    result = 0\n    for i in range(sublst):\n        if len(lst[i])!= sublst - i:\n            result += 1\n            if len(lst[i]) - sublst - 1 == 0:\n                result += 1\n            else:\n                result += len(lst[i]) - sublst - 1\n    return result\n    \ndef Count_Sublists_3(lst):\n    '''\n    Write a python function to count the number of sublists of length 'n' in the given list.\n    '''\n    sublst = len(lst)\n    result = 0\n    for i in range(sublst):\n        for j in range(i + 1, sublst):\n            if len(lst[i])!= sublst - i - 1:\n                result += 1\n                if len(lst[i]) - sublst - 1 == 0:\n                    result += 1\n                else:\n                    result += len(lst[i]) - sublst - 1\n    return result\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            current_length += 1\n        else:\n            current_length = 1\n        if current_length > max_length:\n            max_length = current_length\n        current_length = 1\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    curr_max_len = 0\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst) - i):\n            if lst[j:j+i] == lst[j+i:j+i+1]:\n                curr_max_len += 1\n    return curr_max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Initialize a counter to keep track of which indexes are '0'\n    count = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    list_len = len(lst)\n    if list_len == 0:\n        return 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    max_len = 0\n    \n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            count = 1\n        else:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'[^\"\\']+', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # TODO: Complete this function!\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\"\u201c\", \"\\\"\").replace(\"\u201d\", \"\\\"\")\n    text = re.sub(\"(\\w+)\\\"(\\w+)\\s*(,|\\n|\\t)\", r'\\1\\2\\3', text)\n    text = re.sub(\"(\\w+)\\s*(,|\\n|\\t)\", r'\\1\\2', text)\n    text = re.sub('\\n\\s+', '\\n', text)\n    text = re.sub('\\s+','', text)\n    text = text.split('\\n')\n    text = [i for i in text if i!= '']\n    text = [i for i in text if i!='']\n    text = [i.replace('\\n', '') for i in text]\n    text = [i for i in text if i!='']\n    text = [i.split(' ') for i in text]\n    text = [i for i in text if i!= '']\n    text = [i for i in text if i!='']\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('\\w+', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #print(text)\n    if '\"' not in text:\n        return []\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # def g(s):\n    #     if s[-1] == '\"':\n    #         s = s[:-1]\n    #     return s\n    # return ''.join([g(x) for x in text.split('\"')])\n    return [x for x in text.split('\"')]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a quotation mark, add it to the end of the string\n        if text[i] == '\"':\n            end = i\n            break\n    # if the end index is reached, throw out the quotation mark\n    if end < len(text):\n        text = text[:end]\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a quotation mark, add it to the start of the string\n        if text[i] == '\"':\n            start = i\n            break\n    # if the start index is reached, throw out the quotation mark\n    if start < len(text):\n        text = text[:start]\n    # return the values\n    return text\ndef clean_paragraph(text):\n    '''\n    Write a function to clean a paragraph in quotes.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a quotation mark, add it to the end of the string\n        if text[i] == '\"':\n            end = i\n            break\n    # if the end index is reached, throw out the quotation mark\n    if end < len(text):\n        text = text[:end]\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a quotation mark, add it to the start of the string\n        if text[i] == '\"':\n            start = i\n            break\n    # if the start index is reached, throw out the quotation mark\n    if start < len(text):\n        text = text[:start]\n    # return the values\n    return text\ndef extract_numeric_values(text):\n    '''\n    Write a function to extract numeric values from a string.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the end of the string\n        if text[i] == '.':\n            end = i\n            break\n    # if the end index is reached, throw out the number\n    if end < len(text):\n        text = text[:end]\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the start of the string\n        if text[i] == '.':\n            start = i\n            break\n    # if the start index is reached, throw out the number\n    if start < len(text):\n        text = text[:start]\n    # return the values\n    return text\ndef clean_paragraphs(text):\n    '''\n    Write a function to clean a paragraph in quotes.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the end of the string\n        if text[i] == '.':\n            end = i\n            break\n    # if the end index is reached, throw out the number\n    if end < len(text):\n        text = text[:end]\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the start of the string\n        if text[i] == '.':\n            start = i\n            break\n    # if the start index is reached, throw out the number\n    if start < len(text):\n        text = text[:start]\n    # return the values\n    return text\ndef check_if_number(text):\n    '''\n    Write a function to check whether a string is a number.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the end of the string\n        if text[i] == '.':\n            end = i\n            break\n    # if the end index is reached, throw out the number\n    if end < len(text):\n        text = text[:end]\n    # if the string is not a number, throw out the number\n    if not text.isalpha():\n        return False\n    # return the values\n    return True\ndef extract_boolean_values(text):\n    '''\n    Write a function to extract boolean values from a string.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the end of the string\n        if text[i] == '1':\n            end = i\n            break\n    # if the end index is reached, throw out the number\n    if end < len(text):\n        text = text[:end]\n    # if the string is not a number, throw out the number\n    if not text.isalpha():\n        return False\n    # return the values\n    return text\ndef extract_date_values(text):\n    '''\n    Write a function to extract date values from a string.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the end of the string\n        if text[i] == '-':\n            end = i\n            break\n    # if the end index is reached, throw out the number\n    if end < len(text):\n        text = text[:end]\n    # if the string is not a number, throw out the number\n    if not text.isalpha():\n        return False\n    # return the values\n    return text\ndef clean_paragraphs(text):\n    '''\n    Write a function to clean a paragraph in quotes.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the end of the string\n        if text[i] == '-':\n            end = i\n            break\n    # if the end index is reached, throw out the number\n    if end < len(text):\n        text = text[:end]\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the start of the string\n        if text[i] == '-':\n            start = i\n            break\n    # if the start index is reached, throw out the number\n    if start < len(text):\n        text = text[:start]\n    # return the values\n    return text\ndef check_if_date(text):\n    '''\n    Write a function to check whether a string is a date.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the end of the string\n        if text[i] == '-':\n            end = i\n            break\n    # if the end index is reached, throw out the number\n    if end < len(text):\n        text = text[:end]\n    # if the string is not a date, throw out the number\n    if not text.isalpha():\n        return False\n    # return the values\n    return True\ndef extract_date_values(text):\n    '''\n    Write a function to extract date values from a string.\n    '''\n    # define start and end index for values\n    start = 0\n    end = 0\n    # loop through the string\n    for i in range(len(text)):\n        # if the current char is a number, add it to the end of the string\n        if text[i] == '-':\n            end = i\n            break\n    # if the end index is reached, throw out the number\n    if end < len(text):\n        tex"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list_values = []\n    tokens = re.findall(r'\"(.*?)\"', text)\n    for token in tokens:\n        list_values.append(token)\n    return list_values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Check if the string is a string, if not it throws a TypeError.\n    if isinstance(text, str):\n        # If the string is not a string then it throws an error.\n        if not text.isalpha():\n            raise TypeError('String argument not a string.')\n        # Replace the spaces with _\n        text = text.replace(' ', '_')\n        # Remove special characters\n        text = re.sub('[^\\w_\\-\\s]', '', text)\n        # Convert everything to lower case.\n        text = text.lower()\n        # Split the string into a list\n        return list(text)\n    else:\n        raise TypeError('String argument not a string.')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\S+?(?=[(])'\n    values = re.findall(pattern, text)\n    values = [v.replace('\\n','') for v in values]\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Write your code here\n    count=0\n    if len(arr)==1:\n        return count\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j] and arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                total += 1\n    return total\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    temp = {}\n    for i in arr:\n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    counter = 0\n    for i in temp:\n        for j in temp:\n            if i == j:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) <= 1:\n        return 0\n    #Calculating the number of pairs of consecutive elements\n    #(approx)\n    count_pairs = 0\n    i = 0\n    while (i < len(arr)-1):\n        if (arr[i]==arr[i+1]):\n            count_pairs += 1\n        i+=1\n    #Calculating the number of pairs of consecutive elements\n    count_pairs = count_pairs + (len(arr)-2)-count_pairs\n    #print(count_pairs)\n    return count_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #loop through the list\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            #if the list is greater than two then we do not want to consider pair with equal element, also just consider every element\n            if (arr[i]+arr[j]) == (arr[j]+arr[i]):\n                continue\n            else:\n                #if the first element is equal to the second element then we will have a pair with equal element\n                if arr[i] == arr[j]:\n                    return 2\n    #if the above conditions are not met we return 1\n    return 1\n    "
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count = 0\n    \n    for i in range(n-1):\n        j = i + 1\n        while (j < n):\n            if (arr[i]!= arr[j]):\n                break\n            j += 1\n        if (j == n):\n            count += 1\n    return count\ndef count_No_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    arr.sort()\n    count = 0\n    for i in range(n-1):\n        j = i + 1\n        while (j < n):\n            if (arr[i]!= arr[j]):\n                break\n            j += 1\n        if (j == n):\n            count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    Counter=0 \n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]==arr[j]:\n                Counter += 1\n    return Counter\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1): \n        for j in range(i+1, n): \n            if (arr[i] == arr[j]): \n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return int(pow(n,2)*arr[0]*arr[n-1]*arr[n])\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\ndef oddEven(word): \n    '''\n    Write a python function to print odd even number.\n    '''\n    words = split(word)\n    for i in words: \n        if int(i) % 2 == 0: \n            print(\"Even\", end=\" \") \n        else: \n            print(\"Odd\", end=\" \") \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    characters = [] \n    for letter in word: \n        characters.append(letter) \n    return characters \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    chars=list(word)\n    return chars\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    a =''\n    b = word.lower()\n    if b[0:1] =='':\n        a =''\n    if b[-1:] =='':\n        a = word[-1:]\n    return a\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    temp = []\n    for letter in word:\n        temp.append(letter)\n    return temp\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    temp = []\n    chars = []\n    for letter in word:\n        if letter in temp:\n            temp.append(letter)\n        else:\n            chars.append(letter)\n            temp.append(letter)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n!= 0:\n        remainder = n % 10\n        total = total + remainder\n        n = n//10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    '''\n    Output\n    ---\n    Returns the sum of the digits of the input number.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. You are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. Return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of the digits in the nth position in a power of 2.\n    3. return the sum of the digits in the integer.\n    '''\n    '''\n    >>> num = 14\n    >>> sum_digits(num)\n    15\n    '''\n    '''\n    Concept\n    ---\n    1. you are given an integer, n.\n    2. The sum of the digits of n is the sum of th"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    '''\n    Bug: If the input is 0, you will get 0, which is represented as the string '0'.\n    '''\n    if n == 0:\n        return 0\n    return n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # your code goes here\n    if n == 0:\n        return 0\n    return n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    \n    sum = 0\n    i = 1\n    while n >= 10**i:\n        sum = sum + n % 10\n        n = n // 10\n        i += 1\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while(n > 0):\n        sum = sum + n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    sum = 0\n    while n!= 0:\n        sum += n%10\n        n = n//10\n    return sum\n    \ndef test():\n    assert sum_digits(7) == 0\n    assert sum_digits(42) == 1\n    assert sum_digits(3+6+1) == 4\n    assert sum_digits(12) == 0\n    assert sum_digits(89) == 9\n    assert sum_digits(9) == 9\n    assert sum_digits(0) == 0\n    assert sum_digits(8+7) == 2\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n <= 0:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] >= list1[1]:\n            return True\n        else:\n            return False\n        \n    \ndef printList(list1):\n    '''\n    Write a function to print a specified list.\n    '''\n    print('-------------------------------------')\n    print('|',list1[0],list1[1],list1[2],list1[3],list1[4],list1[5],list1[6],list1[7],list1[8],list1[9],list1[10],list1[11],list1[12],list1[13],list1[14],list1[15],list1[16],list1[17],list1[18],list1[19],list1[20],list1[21],list1[22],list1[23],list1[24],list1[25],list1[26],list1[27],list1[28],list1[29],list1[30],list1[31],list1[32],list1[33],list1[34],list1[35],list1[36],list1[37],list1[38],list1[39],list1[40],list1[41],list1[42],list1[43],list1[44],list1[45],list1[46],list1[47],list1[48],list1[49],list1[50],list1[51],list1[52],list1[53],list1[54],list1[55],list1[56],list1[57],list1[58],list1[59],list1[60],list1[61],list1[62],list1[63],list1[64],list1[65],list1[66],list1[67],list1[68],list1[69],list1[70],list1[71],list1[72],list1[73],list1[74],list1[75],list1[76],list1[77],list1[78],list1[79],list1[80],list1[81],list1[82],list1[83],list1[84],list1[85],list1[86],list1[87],list1[88],list1[89],list1[90],list1[91],list1[92],list1[93],list1[94],list1[95],list1[96],list1[97],list1[98],list1[99],list1[100],list1[101],list1[102],list1[103],list1[104],list1[105],list1[106],list1[107],list1[108],list1[109],list1[110],list1[111],list1[112],list1[113],list1[114],list1[115],list1[116],list1[117],list1[118],list1[119],list1[120],list1[121],list1[122],list1[123],list1[124],list1[125],list1[126],list1[127],list1[128],list1[129],list1[130],list1[131],list1[132],list1[133],list1[134],list1[135],list1[136],list1[137],list1[138],list1[139],list1[140],list1[141],list1[142],list1[143],list1[144],list1[145],list1[146],list1[147],list1[148],list1[149],list1[150],list1[151],list1[152],list1[153],list1[154],list1[155],list1[156],list1[157],list1[158],list1[159],list1[160],list1[161],list1[162],list1[163],list1[164],list1[165],list1[166],list1[167],list1[168],list1[169],list1[170],list1[171],list1[172],list1[173],list1[174],list1[175],list1[176],list1[177],list1[178],list1[179],list1[180],list1[181],list1[182],list1[183],list1[184],list1[185],list1[186],list1[187],list1[188],list1[189],list1[190],list1[191],list1[192],list1[193],list1[194],list1[195],list1[196],list1[197],list1[198],list1[199],list1[200],list1[201],list1[202],list1[203],list1[204],list1[205],list1[206],list1[207],list1[208],list1[209],list1[210],list1[211],list1[212],list1[213],list1[214],list1[215],list1[216],list1[217],list1[218],list1[219],list1[220],list1[221],list1[222],list1[223],list1[224],list1[225],list1[226],list1[227],list1[228],list1[229],list1[230],list1[231],list1[232],list1[233],list1[234],list1[235],list1[236],list1[237],list1[238],list1[239],list1[240],list1[241],list1[242],list1[243],list1[244],list1[245],list1[246],list1[247],list1[248],list1[249],list1[250],list1[251],list1[252],list1[253],list1[254],list1[255],list1[256],list1[257],list1[258],list1[259],list1[260],list1[261],list1[262],list1[263],list1[264],list1[265],list1[266],list1[267],list1[268],list1[269],list1[270],list1[271],list1[272],list1[273],list1[274],list1[275],list1[276],list1[277],list1[278],list1[279],list1[280],list1[281],list1[282],list1[283],list1[284],list1[285],list1[286],list1[287],list1[288],list1[289],list1[290],list1[291],list1[292],list1[293],list1[294],list1[295],list1[296],list1[297],list1[298],list1[299],list1[300],list1[301],list1[302],list1[303],list1[304],list1[305],list1[306],list1[307],list1[308],list1[309],list1[310],list1[311],list1[312],list1[313],list1[314],list1[315],list1[316],list1[317],list1[318],list1[319],list1[320],list1[321],list1[322],list1[323],list1[324],list1[325],list1[326],list1[327],list1[328],list1[329],list1[330],list1[331],list1[332],list1[333],list1[334],list1[335],list1[336],list1[337],list1[338],list1[339],list1[340],list1[341],list1[342],list1[343],list1[344],list1[345],list1[346],list1[347],list1[348],list1[349],list1[350],list1[351],list1[352],list1[353],list1[354],list1[355],list1[356],list1[357],list1[358],list1[359],list1[360],list1[361],list1[362],list1[363],list1[364],list1[365],list1[366],list1[367],list1[368],list1[369],list1[370],list1[371],list1[372],list1[373],list1[374],list1[375],list1[376],list1[377],list1[378],list1[379],list1[380],list1[381],list1[382],list1[383],list1[384],lis"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    while i < len(list1):\n        j = i + 1\n        while j < len(list1):\n            if list1[i] > list1[j]:\n                return False\n            j += 1\n        i += 1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    try:\n        alist = list1.copy()\n        alist.sort()\n    except AttributeError:\n        print(\"Please input a list\")\n    else:\n        if len(alist) == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i + 1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    try:\n        list1.sort()\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    if len(list) == length:\n        print('The list is empty')\n    else:\n        for i in range(length):\n            list.append({})\n    return list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    for i in range(length):\n        return {\n            \"key\": \"value\",\n            \"key2\": \"value2\",\n            \"key3\": \"value3\",\n            \"key4\": \"value4\",\n            \"key5\": \"value5\",\n            \"key6\": \"value6\",\n            \"key7\": \"value7\"\n            }\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # empty_list = []\n    # for i in range(length):\n    #     empty_list.append({})\n    # return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    for i in range(0, length):\n        dictionaries.append({})\n    return dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 0:\n        return []\n    elif length < 0:\n        return [{}]\n    else:\n        return [{} for x in range(0, length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(0, length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code goes here\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(list1)\n    for item in range(len(list1)):\n        for i in range(len(list1[item])):\n            if list1[item][i] == 'a':\n                list1[item][i] = 'z'\n            elif list1[item][i] == 'c':\n                list1[item][i] = 'z'\n            else:\n                list1[item][i] = 'a'\n    print(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = str(list1[l][i][j])\n    return list1\n    \ndef remove_blank_spaces(list1):\n    '''\n    Write a function to remove spaces from strings in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef remove_whitespaces(list1):\n    '''\n    Write a function to remove whitespaces from strings in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef remove_symbols(list1):\n    '''\n    Write a function to remove all the symbols from strings in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef sort_letters(list1):\n    '''\n    Write a function to sort each sublist of letters in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef remove_punctuation(list1):\n    '''\n    Write a function to remove all the punctuation from strings in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef combine_words(list1):\n    '''\n    Write a function to combine all strings in a given list of lists into one string.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef sort_numbers(list1):\n    '''\n    Write a function to sort all the numbers in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = int(list1[l][i][j])\n    return list1\n    \ndef select_words(list1):\n    '''\n    Write a function to remove all the words from a given list of lists that are not in the given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef create_dictionaries(list1):\n    '''\n    Write a function to create a dictionary of all words in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef sort_words_by_char(list1):\n    '''\n    Write a function to sort all the words in a given list of lists by their char.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef remove_stop_words(list1):\n    '''\n    Write a function to remove all the stop words from a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef words_from_text(list1):\n    '''\n    Write a function to extract all the words from a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef find_numbers(list1):\n    '''\n    Write a function to find all the numbers in a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef create_order_dict(list1):\n    '''\n    Write a function to create an order dictionary from a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef remove_from_order(list1):\n    '''\n    Write a function to remove all the words from a given list of lists that are not in the given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef sentence_to_words(list1):\n    '''\n    Write a function to create a list of words from a given sentence.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef sentence_to_words_from_text(list1):\n    '''\n    Write a function to extract all the words from a given list of lists.\n    '''\n    for l in range(len(list1)):\n        for i in range(len(list1[l])):\n            for j in range(len(list1[l][i])):\n                list1[l][i][j] = list1[l][i][j].strip()\n    return list1\n    \ndef create_clean_text(list1):\n    '''\n    Writ"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l1 = []\n    for l in list1:\n        for item in l:\n            l1.append(item)\n    return sorted(l1)\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list=[]\n    for x in list1:\n        if type(x)==list:\n            new_list.append(x)\n        else:\n            new_list.append(x[0])\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index in range(len(list1)):\n        for item in list1[index]:\n            list1[index].append(item)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    for i in list1:\n        if i == []:\n            pass\n        elif isinstance(i, list):\n            sublist.append(i)\n        else:\n            sublist.append(str(i))\n    sublist.sort()\n    return sublist\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = []\n    for element in list1:\n        for each in element:\n            list_of_lists.append(each)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    for i in range(len(nums)):\n        \n        for j in range(len(nums)):\n            if nums[i] == nums[j]:\n                \n                nums.pop(j)\n                break\n            else:\n                \n                continue\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dict = {}\n    for num in nums:\n        if num not in dict:\n            dict[num] = 1\n        else:\n            dict[num] += 1\n    for value in dict.values():\n        if value > 1:\n            return False\n    return True\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    hash_table = {}\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    hash = {}\n    res = []\n    for i in range(len(nums)):\n        if nums[i] not in hash:\n            hash[nums[i]] = 1\n        else:\n            hash[nums[i]] += 1\n    for i in hash.keys():\n        if hash[i]!= 1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    result = []\n    for i in range(len(nums)):\n        if nums[i] not in result:\n            result.append(nums[i])\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(dict.fromkeys(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    duplicate = []\n    for n in nums:\n        if n in nums:\n            duplicate.append(n)\n    return duplicate\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    lst = []\n    seen = set()\n    for num in nums:\n        if num in seen:\n            lst.append(num)\n        else:\n            seen.add(num)\n    return lst\n    \ndef main():\n    '''\n    Run your own python code\n    '''\n    # list of numbers to test\n    nums = [1,1,1,2,3,4,5,6,7,8,9,10]\n    print(two_unique_nums(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    l1=[]\n    l2=[]\n    for i in range(len(nums)):\n        if nums[i] not in l1:\n            l1.append(nums[i])\n    for j in range(len(nums)):\n        if nums[j] not in l2:\n            l2.append(nums[j])\n    return l1,l2\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for i in range(len(list_data)):\n        if list_data[i] not in list_data[0:i]:\n            list_data[i] = list_data[i] * i\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create empty dict\n    unique_product = {}\n    # Loop through the list to create unique keys for each key\n    for i in list_data:\n        # Use key to compare each key value pair\n        if i in unique_product:\n            # Increment the key count\n            unique_product[i] = unique_product[i] + 1\n        else:\n            # Set the key count to 1\n            unique_product[i] = 1\n    # Sort the dict\n    for key, value in sorted(unique_product.items()):\n        # Print the key and value\n        print(key, value)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create empty list for storing unique numbers\n    unique_numbers = []\n    # Iterate through given list to find the unique numbers\n    for i in range(0, len(list_data)):\n        # If it is not the first number in the list, add it to the list\n        if i!= 0:\n            unique_numbers.append(list_data[i])\n    # Calculate the product of the unique numbers\n    product = 1\n    for item in unique_numbers:\n        product *= item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for element in list_data:\n        product=product*element\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data_unique = []\n    unique_product = 0\n    for i in list_data:\n        if i not in list_data_unique:\n            list_data_unique.append(i)\n            unique_product += i\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # write your code here\n    product = 1\n    for element in list_data:\n        product *= element\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=[]\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    return sum(unique_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return sum(map(int, list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    final_list = []\n    for each in list_data:\n        for i in each:\n            if i not in final_list:\n                final_list.append(i)\n    return final_list"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #passing the list to the function\n    \n    #returning the product\n    \n    def product(list_data):\n        '''\n        Write a python function to calculate the product of the unique numbers in a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the product\n        \n        product = 1\n        for i in list_data:\n            product *= i\n        return product\n    \n    #returning the product\n    \n    #passing the list to the function\n    \n    #returning the product\n    \n    def sum(list_data):\n        '''\n        Write a python function to calculate the sum of the unique numbers in a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the sum\n        \n        product = 1\n        for i in list_data:\n            product *= i\n        return product\n    \n    #returning the sum\n    \n    #passing the list to the function\n    \n    #returning the sum\n    \n    def max(list_data):\n        '''\n        Write a python function to calculate the maximum number in a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the maximum\n        \n        max_num = 0\n        for i in list_data:\n            if i > max_num:\n                max_num = i\n        return max_num\n    \n    #returning the maximum\n    \n    #passing the list to the function\n    \n    #returning the maximum\n    \n    def min(list_data):\n        '''\n        Write a python function to calculate the minimum number in a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the minimum\n        \n        min_num = 99999\n        for i in list_data:\n            if i < min_num:\n                min_num = i\n        return min_num\n    \n    #returning the minimum\n    \n    #passing the list to the function\n    \n    #returning the minimum\n    \n    def average(list_data):\n        '''\n        Write a python function to calculate the average number in a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the average\n        \n        count = 0\n        sum = 0\n        for i in list_data:\n            sum += i\n            count += 1\n        return sum / count\n    \n    #returning the average\n    \n    #passing the list to the function\n    \n    #returning the average\n    \n    def interval(list_data):\n        '''\n        Write a python function to calculate the range of the numbers in a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the range\n        \n        result = []\n        min_num = min(list_data)\n        max_num = max(list_data)\n        for i in list_data:\n            if i >= min_num and i <= max_num:\n                result.append(i)\n        return result\n    \n    #returning the interval\n    \n    #passing the list to the function\n    \n    #returning the interval\n    \n    #passing the list to the function\n    \n    #returning the interval\n    \n    def factorial(n):\n        '''\n        Write a python function to calculate the factorial of a given number.\n        '''\n        #passing the number\n        \n        #returning the factorial\n        \n        if n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    #returning the factorial\n    \n    #passing the number\n    \n    #returning the factorial\n    \n    def squaring(n):\n        '''\n        Write a python function to calculate the square of a given number.\n        '''\n        #passing the number\n        \n        #returning the square\n        \n        if n == 1:\n            return 1\n        else:\n            return n * squaring(n-1)\n    \n    #returning the square\n    \n    #passing the number\n    \n    #returning the square\n    \n    def max_index(list_data):\n        '''\n        Write a python function to calculate the index of the maximum number in a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the index\n        \n        max_num = list_data[0]\n        for i in range(len(list_data)):\n            if max_num < list_data[i]:\n                max_num = list_data[i]\n        return max_num\n    \n    #returning the index\n    \n    #passing the list to the function\n    \n    #returning the index\n    \n    def min_index(list_data):\n        '''\n        Write a python function to calculate the index of the minimum number in a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the index\n        \n        min_num = list_data[0]\n        for i in range(len(list_data)):\n            if min_num > list_data[i]:\n                min_num = list_data[i]\n        return min_num\n    \n    #returning the index\n    \n    #passing the list to the function\n    \n    #returning the index\n    \n    def mean(list_data):\n        '''\n        Write a python function to calculate the mean of a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the mean\n        \n        total = 0\n        count = 0\n        for i in list_data:\n            total += i\n            count += 1\n        return total / count\n    \n    #returning the mean\n    \n    #passing the list to the function\n    \n    #returning the mean\n    \n    def median(list_data):\n        '''\n        Write a python function to calculate the median of a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the median\n        \n        if len(list_data) % 2 == 0:\n            median = (list_data[int(len(list_data)/2)] + list_data[int(len(list_data)/2) - 1]) / 2\n            count = 0\n            for i in list_data:\n                if i < median:\n                    count += 1\n            return median\n        else:\n            median = list_data[int(len(list_data)/2)]\n            for i in list_data:\n                if i < median:\n                    median = i\n            return median\n    \n    #returning the median\n    \n    #passing the list to the function\n    \n    #returning the median\n    \n    def mode(list_data):\n        '''\n        Write a python function to calculate the mode of a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the mode\n        \n        mode = 0\n        count = 0\n        for i in list_data:\n            if i % 2 == 0:\n                count += 1\n        if count > 0:\n            mode = list_data[0]\n            for i in list_data:\n                if i % 2 == 0:\n                    mode = i\n            return mode\n        else:\n            return list_data[0]\n    \n    #returning the mode\n    \n    #passing the list to the function\n    \n    #returning the mode\n    \n    def median_distribution(list_data):\n        '''\n        Write a python function to calculate the median distribution of a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the median\n        \n        median_list = list_data[0]\n        count = 0\n        for i in list_data:\n            if i == median_list:\n                count += 1\n        return count / len(list_data)\n    \n    #returning the median\n    \n    #passing the list to the function\n    \n    #returning the median\n    \n    def mode_distribution(list_data):\n        '''\n        Write a python function to calculate the mode distribution of a given list.\n        '''\n        #passing the list to the function\n        \n        #returning the mode\n    "
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*np.pi*h*r\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A=4/3*(1-h**3)\n    return A*3.141592653589793\n    "
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = r * 4.0 * math.pi * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=3.14*((2*r*h)/2)\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=4*h*r**2\n    print(a)\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Write your code here\n    import math\n    a=math.pi*(r*r)\n    b=h/2*math.pi\n    return a*b\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=r**2*h\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S=4*r**2*h\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.1416 * (r * h)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(x in B for x in A)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    else:\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    \n    sublist = []\n    for i in range(0,len(A)):\n        if B[i] in A:\n            sublist.append(A[i])\n    if sublist == A:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #Write your code here\n    if B in A:\n        return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A=A[1:]\n    B=B[1:]\n    return list(zip(A,B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return(len(A)==len(B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # traverse the list\n    for i in range(0,len(A)):\n        # Check whether the first element in A is present in B\n        if A[i] in B:\n            # if yes then return true\n            return True\n    # return false if not present\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(A)\n    for i in range(n-1):\n        if (A[i]==B[i]):\n            print(A[i],B[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n > 1:\n        fact = fact * n\n        n -= 1\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = ''\n    while n > 0:\n        result = str(n % 10) + result\n        n = n // 10\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # looping through the numbers till the input is 5 \n    for num in range(5, n + 1): \n        # printing the factorial of that number \n        print(num, 'x', num, '=', num * num) \n        \n    return n "
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n*last_Digit_Factorial(n - 1) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = abs(int(n))\n    \n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError('number must be >= 0')\n    elif n == 0:\n        return 0\n    else:\n        return last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        print(\"Error: Invalid input. Must be a positive integer.\\n\")\n    else:\n        factorial = 1\n        while n>0:\n            factorial = factorial*n\n            n = n-1\n        return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print('The number has to be positive!')\n    elif n == 0:\n        print('The number has to be zero')\n    elif n == 1:\n        print('The number has only one digit')\n    else:\n        fact = 1\n        for i in range(1,n):\n            fact = fact * i\n        print(fact)\n    return fact"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if n == 1:\n        return 1\n    return last_Digit_Factorial(n-1) * n\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1=list(list1)\n    list2=list(list2)\n    list3=list(list3)\n    list1.extend(list2)\n    list1.extend(list3)\n    list1=list(list1)\n    return list1\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #define the length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise Exception('lists must be the same size')\n    \n    result = []\n    \n    #loop through all elements of the lists\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        \n    return result\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    '''\n    If list1 is not a list, then return \"Input is not a list.\"\n    If list2 is not a list, then return \"Input is not a list.\"\n    If list3 is not a list, then return \"Input is not a list.\"\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    temp_list = []\n    i=0\n    while(i<len(list1)):\n        temp_list.append(list1[i])\n        i+=1\n    j=0\n    while(j<len(list2)):\n        temp_list.append(list2[j])\n        j+=1\n    k=0\n    while(k<len(list3)):\n        temp_list.append(list3[k])\n        k+=1\n    return(temp_list)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(map(lambda a:a+list(map(lambda b:b*3,a[1:])), zip(list1,list2,list3))"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(len(list1)):\n        list4.append(list1[i])\n        list4.append(list2[i])\n        list4.append(list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #create empty list for interleaving\n    interleaved_list=[]\n    #iterate through all of the lists\n    for item in list1+list2+list3:\n        #check if list is already empty\n        if not item:\n            #append to interleaved list if not\n            interleaved_list.append(item)\n        #otherwise append it to the end of the empty list\n        else:\n            #append to interleaved list if not\n            interleaved_list.append(item)\n    #return interleaved list\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n    \n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    while len(list1) > 0 or len(list2) > 0 or len(list3) > 0:\n        if len(list1) > 0:\n            result.append(list1.pop())\n        elif len(list2) > 0:\n            result.append(list2.pop())\n        elif len(list3) > 0:\n            result.append(list3.pop())\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[0] not in test_tup2:\n        return test_tup1[0]\n    elif test_tup2[0] not in test_tup1:\n        return test_tup2[0]\n    else:\n        test_tup1, test_tup2 = test_tup1[:], test_tup2[:]\n        for i in range(len(test_tup1)):\n            for j in range(i+1, len(test_tup2)):\n                if test_tup1[i] == test_tup2[j]:\n                    test_tup1[i], test_tup2[j] = test_tup2[j], test_tup1[i]\n                    break\n    return test_tup1[0]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup1 = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_tup1.append(element)\n    return dissimilar_tup1\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup3 = test_tup1 + test_tup2\n    test_tup4 = test_tup1 * test_tup2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                dissimilar_tup.append(test_tup1[i])\n    return dissimilar_tup\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) - set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            dissimilar.append(test_tup1[i])\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res_dict = {}\n    for i in test_tup1:\n        if i not in test_tup2:\n            res_dict[i] = 0\n        else:\n            res_dict[i] = 1\n    return res_dict\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #get the smallest of tuples\n    smallest = min(test_tup1, test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1.sort()\n    test_tup2.sort()\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[-1] > test_tup2[0]:\n        return test_tup2\n    elif test_tup1[-1] > test_tup2[-1]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # pass\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if not even_fnc(i):\n            return False\n    return True\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = [tuple[1] for tuple in test_tuple]\n    even_list_without_odds = [item for item in even_list if item % 2!= 0]\n    return tuple(even_list_without_odds)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for ele in test_tuple:\n        if ele % 2 == 0:\n            even_list.append(ele)\n    even_list.sort()\n    even_tuple = tuple(even_list)\n    even_fnc(even_tuple, even_fnc)\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove odd elements in the nested mixed tuple.\n    '''\n    odd_list = []\n    for ele in test_tuple:\n        if ele % 2!= 0:\n            odd_list.append(ele)\n    odd_list.sort()\n    odd_tuple = tuple(odd_list)\n    odd_fnc(odd_tuple, odd_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for element in test_tuple:\n        if even_fnc(element):\n            even_list.append(element)\n    \n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele_tuple = []\n    for el in test_tuple:\n        if el % 2 == 0:\n            even_ele_tuple.append(el)\n    even_fnc(even_ele_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    for tuple in test_tuple[1:]:\n        if even_fnc(tuple):\n            even_tuple = even_tuple[0] + tuple\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd = [list(t) for t in zip(*test_tuple)]\n    odd_len = [len(t) for t in odd]\n    even_len = [len(t) for t in even_fnc]\n    indices = [x for x in range(len(odd)) if odd_len[x] % 2 == 0 and even_len[x] % 2 == 0]\n    even_fnc = [even_fnc[x] for x in indices]\n    odd_fnc = [odd_fnc[x] for x in indices]\n    return tuple([tuple(odd_fnc), tuple(even_fnc)])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    even_lst = list(test_tuple)\n    even_lst = list(map(even_fnc,even_lst))\n    test_tuple = tuple(even_lst)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tuple_list = test_tuple[0]\n    for i in range(1,len(test_tuple)):\n        if tuple_list[i-1] == tuple_list[i]:\n            tuple_list[i] = even_fnc(tuple_list[i], tuple_list[i-1])\n    return tuple_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple) == False:\n        raise TypeError(\"The test tuple must be a tuple!\")\n    \n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple) == True:\n            if item[0]%2 == 0:\n                even_list.append(item)\n            elif item[0]%2 == 1:\n                pass\n        elif isinstance(item, list) == True:\n            even_list.append(item)\n    \n    even_list.reverse()\n    \n    even_tuple = even_fnc(even_list)\n    \n    return even_tuple\n    \n    \ndef replace_item_in_tuple(tuple, index, val):\n    '''\n    Replace the specified value in the tuple at the specified index.\n    '''\n    if isinstance(tuple, tuple) == False:\n        raise TypeError(\"The test tuple must be a tuple!\")\n    \n    new_tuple = []\n    for item in tuple:\n        if isinstance(item, tuple) == True:\n            if index == len(item):\n                new_tuple.append(val)\n            elif index < len(item):\n                new_tuple.append(item[index])\n        elif isinstance(item, list) == True:\n            new_tuple.append(item[index])\n        else:\n            raise TypeError(\"The index must be a number!\")\n    \n    return new_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=[]\n    n=int(s)\n    for i in range(n):\n        a.append(b*2*i)\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Write your code here\n    area = (b/2)*(s/2)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"\\nInside the function to compute the surface area of a square pyramid with a given base edge and height.\\n\")\n    \n    #Base edge\n    a = int(b) \n    \n    #Height of pyramid\n    h = int(s) \n    \n    #Count the length of the pyramid\n    l = a+h\n    \n    #Check to see if the pyramid is square\n    if l % 2 == 0:\n        \n        #height of the square\n        h_sq = int(h/2)\n        \n        #height of the square by adding the base edge\n        h_sq_plus_base = h_sq+a \n        \n        #sum the area of the square\n        h_sq_area = l*h_sq\n        \n        #sum the area of the square by adding the base edge\n        h_sq_plus_base_area = h_sq_area + a \n        \n        #calculate the area of the pyramid\n        h_sq_area_in_sq = h_sq_plus_base_area*l\n        \n        #calculate the area of the pyramid by adding base edge\n        h_sq_area_in_sq_plus_base = h_sq_area_in_sq+h_sq_plus_base\n        \n        #printing the result\n        print(\"\\nThe surface area of the pyramid is:\",h_sq_area_in_sq,\"\\n\")\n        \n        #printing the result\n        print(\"The surface area of the pyramid is:\",h_sq_area_in_sq_plus_base,\"\\n\")\n    \n    #Check to see if the pyramid is square\n    else:\n        \n        #height of the square\n        h_sq = int(h/2)\n        \n        #height of the square by adding the base edge\n        h_sq_plus_base = h_sq+a \n        \n        #sum the area of the square\n        h_sq_area = l*h_sq\n        \n        #sum the area of the square by adding the base edge\n        h_sq_plus_base_area = h_sq_area+a\n        \n        #calculate the area of the pyramid\n        h_sq_area_in_sq = h_sq_area_in_sq + h_sq_plus_base_area*l\n        \n        #calculate the area of the pyramid by adding base edge\n        h_sq_area_in_sq_plus_base = h_sq_area_in_sq + h_sq_plus_base\n        \n        #printing the result\n        print(\"\\nThe surface area of the pyramid is:\",h_sq_area_in_sq_plus_base,\"\\n\")\n        \n    #calculate the surface area of the pyramid\n    h_sq_area_in_sq = h_sq_area_in_sq + h_sq_plus_base_area*l\n    \n    #printing the result\n    print(\"\\nThe surface area of the pyramid is:\",h_sq_area_in_sq,\"\\n\")\n    \n    #printing the result\n    print(\"\\nThe surface area of the pyramid is:\",h_sq_area_in_sq_plus_base,\"\\n\")\n    \n    return(h_sq_area_in_sq)\n    "
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sqA = 0\n    for i in range(s,b+1):\n        sqA += i**2\n    return sqA\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    b=int(b)\n    s=int(s)\n    if(b==0 or s==0):\n        return 0\n    elif(b>0 and s>0):\n        return int(1.0*(b*(b-1)**.5))\n    elif(b>0 and s==0):\n        return (int(1.0*(b-1)*(b+1)*b**.5))\n    elif(b==0 and s==0):\n        return (int(1.0*(b+1)*b**.5))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    assert type(b) is int and type(s) is int, \"Base and height must be integers\"\n    assert b >= 0 and s >= 0, \"Base and height must be positive\"\n    assert b*b == s*s, \"Invalid base edge and height\"\n    def h_of_pyramid(b,s):\n        '''\n        Write a python function to find the base edge and height of a square pyramid with a given base edge and height.\n        '''\n        assert type(b) is int and type(s) is int, \"Base and height must be integers\"\n        assert b >= 0 and s >= 0, \"Base and height must be positive\"\n        assert b*b == s*s, \"Invalid base edge and height\"\n        return h_of_pyramid_bis(b,s)\n    return h_of_pyramid(b,s)\n    \n    # write a python function to find the base edge and height of a square pyramid with a given base edge and height. \n    # the input is height and base edge\n    # the output is the base edge and height\n    # you can use Python 3.7\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #First create a python function that will compute the area of a sqaure with base edge of 3 and height of 5\n    def area_of_a_square(base,height):\n        return base*height\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # write your code here\n    return b*s*(b-1)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    x, y = s\n    n = int((y - b) / (2 * s) + 1)\n    for i in range(n):\n        area += (x + b) * i\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*(s*s - b*b)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return \"Empty\"\n    else:\n        return dict1\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 is {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('It is not a dictionary')\n        return\n    else:\n        print('It is a dictionary')\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 is {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # add your code here\n    return dict1=={}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num==0:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    cnt = 0\n    for i in range(1, num+1):\n        cnt += sum(catalan_sequence[i])\n    return cnt\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # code:\n    # n = 0\n    # while n < num:\n    #     n += 1\n    #     n -= 1\n    #     print(n)\n    #     catalan_number = (((n+1)*(n-1))//2)\n    #     print(catalan_number)\n    #     return(catalan_number)\n    # return(catalan_number)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num > 0:\n        return catalan(num)\n    else:\n        return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 1\n    for i in range(1, num + 1):\n        catalan *= i\n    return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        raise ValueError('The argument must be a positive integer')\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        return (catalan_number(num - 1) + catalan_number(num - 2))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    a = 1\n    b = 1\n    for i in range(2, num + 1):\n        a, b = b, a + b\n    print(a)\n    return a\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    # first the number of the catalan numbers\n    count = 0\n    for i in range(0, num+1):\n        count = count + 1\n    print(count)\n    \n    # loop through the number of the catalan numbers\n    for i in range(1, count+1):\n        print(i, end = \" \")\n        \n    # loop through the number of the catalan numbers\n    for i in range(1, num):\n        print(i, end = \" \")\n    print()\n    \n    return coun"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    return math.catalan(num)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['i','me','my', 'your', 'our','myself']\n    adverb_positions = []\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    search_pattern = r'ly'\n    pos_pattern = r'\\d+\\.\\d+'\n    search = re.search(search_pattern, text)\n    if search:\n        ly_positions = search.start()\n        ly_end = re.search(pos_pattern, text[ly_positions:]).start()\n        ly_end = text[ly_end:ly_positions]\n        ly_end = ly_end.replace(',', '')\n        ly_end = ly_end.replace('.', '')\n        ly_end = ly_end.replace(' ', '')\n        ly_end = ly_end.replace('/', '')\n        ly_end = ly_end.replace('-', '')\n        ly_end = ly_end.replace('+', '')\n        ly_end = ly_end.replace('=', '')\n        ly_end = ly_end.replace('(', '')\n        ly_end = ly_end.replace(')', '')\n        ly_end = ly_end.replace(':', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = ly_end.replace(';', '')\n        ly_end = l"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    '''\n    This is a solution to finding the ending adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [\"and\", \"about\", \"am\", \"are\", \"as\", \"at\", \"be\", \"because\", \"been\", \"being\", \"by\",\n        \"could\", \"did\", \"do\", \"does\", \"doing\", \"each\", \"either\", \"during\", \"every\", \"for\", \"from\",\n        \"further\", \"had\", \"has\", \"hasn\", \"have\", \"haven\", \"having\", \"he\", \"her\", \"hers\", \"him\", \"his\",\n        \"how\", \"however\", \"i\", \"if\", \"in\", \"into\", \"is\", \"isn\", \"it\", \"itself\", \"let\", \"like\", \"may\",\n        \"might\", \"mightn\", \"mustn\", \"must've\", \"my\", \"myself\", \"need\", \"needn\", \"need't\", \"need've\",\n        \"o\", \"ought\", \"our\", \"ourselves\", \"out\", \"over\", \"own\", \"she\", \"should\", \"shouldn\", \"some\",\n        \"somehow\", \"such\", \"that\", \"that's\", \"the\", \"their\", \"them\", \"they\", \"they're\", \"this\", \"that's\",\n        \"these\", \"they've\", \"thisve\", \"thats\", \"their\", \"theirself\", \"they'll\", \"theyre\", \"they've\",\n        \"to\", \"too\", \"took\", \"tookover\", \"tookoverly\", \"tookoverness\", \"tookovers\", \"u\", \"was\", \"wasn\",\n        \"wasn't\", \"we\", \"we've\", \"were\", \"weren\", \"we'll\", \"we're\", \"we've\", \"we'll've\", \"what\", \"what's\",\n        \"what've\", \"when\", \"when's\", \"when've\", \"where\", \"where's\", \"where've\", \"which\", \"which's\",\n        \"which've\", \"who\", \"who's\", \"who've\", \"whom\", \"who've\", \"whose\", \"why\", \"why's\", \"with\", \"with's\",\n        \"within\", \"without\", \"who'll\", \"who'd\", \"who'll've\", \"who'd'\", \"who'd've\", \"who'd've'\", \"won't\",\n        \"won't've\", \"won't've'\", \"would\", \"would've\", \"would've'\", \"would'ven't\", \"would'ven't've\", \"would'ven't've\"]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pat = r\"[ly]'(\\w+)'\\s\\w+:\\s\\w+\\n\"\n    text = re.sub(pat, r\"\\1 \\2\", text)\n    return text.split(\"\\n\")[-1]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    l = len(text)\n    i = 0\n    while i < l:\n        if text[i] == \"ly\":\n            if text[i + 1] == \"ly\":\n                i = i + 1\n                break\n        i = i + 1\n    if i < l:\n        return None\n    else:\n        adverb = \"\"\n        while i < l:\n            adverb += text[i]\n            i = i + 1\n        adverb = re.sub(r'ly$', 'ly', adverb)\n        return adverb\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    # find the last token containing a ly\n    for i in range(len(text) - 1):\n        if text[i] == 'ly' and text[i + 1]!= 'e' and text[i + 1]!= 'a':\n            adverbs.append(text[i + 1])\n    adverbs = adverbs[::-1]\n    # find the position after the end of the ly and ignore the rest of the text\n    for i in range(len(text) - 1):\n        if text[i] == 'ly' and text[i + 1] == 'e' and text[i + 2]!= 'a':\n            adverbs.append(text[i + 2])\n    adverbs = adverbs[::-1]\n    # get rid of the duplicate adverbs\n    adverbs = [adverbs[i] for i in range(len(adverbs)) if adverbs[i]!= adverbs[i - 1]]\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    y_stop = text.find('ly')\n    i = 0\n    while i < y_stop:\n        y_start = text.find('ly', i)\n        if y_start == -1:\n            return None\n        i += y_start + 1\n    adverbs = []\n    start = 0\n    for i in range(len(text)):\n        if i < y_stop:\n            adverbs.append(text[i])\n        if text[i] == 'ly':\n            if start == i:\n                start = start + y_start + 1\n            else:\n                start = start + y_start\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_verb(text):\n    '''\n    Write a function to find the first noun ending with ly and its first and second letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_phrase(text):\n    '''\n    Write a function to find the first noun ending with ly and its first and second letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_noun(text):\n    '''\n    Write a function to find the first noun ending with ly and its first and second letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronouns(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its positions in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_phrase(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first and second letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_noun(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first and second letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_verb(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first and second letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_noun_verb(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first and second letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_determiners(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_determiners_phrase(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_determiners_noun(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_determiners_verb(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_determiners(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_verb_determiners(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_determiners_phrase(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_verb_determiners_noun(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_noun_determiners(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_noun_pronoun(text):\n    '''\n    Write a function to find the first noun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_verb_pronoun(text):\n    '''\n    Write a function to find the first noun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_noun_verb_pronoun(text):\n    '''\n    Write a function to find the first noun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_determiners_noun_pronoun(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_determiners_verb_noun_pronoun(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_determiners_noun_verb_pronoun(text):\n    '''\n    Write a function to find the first determiner ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_noun_pronoun_verb_noun(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_verb_noun_pronoun_verb(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_noun_pronoun_verb_noun(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_noun_verb_noun_verb(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_noun_noun_pronoun_verb(text):\n    '''\n    Write a function to find the first noun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_noun_verb_noun_verb(text):\n    '''\n    Write a function to find the first noun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_noun_verb_noun_verb(text):\n    '''\n    Write a function to find the first noun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_noun_verb_noun_noun_verb(text):\n    '''\n    Write a function to find the first noun ending with ly and its first letter of each word in a given string.\n    '''\n    return re.findall('ly',text)\ndef find_pronoun_noun_noun_verb_noun_verb(text):\n    '''\n    Write a function to find the first pronoun ending with ly and its first letter of each word in a given string.\n    '''\n    retur"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] =='':\n            adverbs.append(text[i:i+3])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    start = 0\n    while True:\n        end = text.find(\"ly\",start,len(text))\n        if end == -1:\n            break\n        for i in range(start, end):\n            if text[i] == \"y\":\n                start = i+1\n        if len(text) > start:\n            print(\"\\tFound 'ly' at\", start)\n            print(\"\\t\", text[start:end])\n            start = end\n        else:\n            print(\"\\tFound 'ly' in\", start)\n            print(\"\\t\", text[start:end])\n            break\n    print(\"\\t\\tFound first adverb ending with ly\")\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Find the n most expensive items\n    result = heapq.nlargest(n,items)\n    # Create a dictionary of the most expensive items.\n    dict = {}\n    for item in result:\n        dict[item] = dict.get(item, 0) + 1\n    # Convert the dictionary into a list of tuples.\n    # Convert the dictionary to a list of tuples.\n    tuples = [(k, dict[k]) for k in dict]\n    # Convert tuples back into a list of items.\n    tuples = [t for t in tuples if t[1] > 0]\n    # Return the most expensive items.\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    hq = []\n    for item in items:\n        heapq.heappush(hq,item)\n    heapq.heapify(hq)\n    result = []\n    while hq:\n        top = heapq.heappop(hq)\n        if len(result) < n:\n            result.append(top)\n        else:\n            return top\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    if items == []:\n        return []\n    elif len(items) == 1:\n        return items\n    \n    heap = []\n    heapq.heapify(heap)\n    \n    for i in range(len(items)):\n        heapq.heappush(heap,items[i])\n        \n        if len(heap) == n:\n            heapq.heappop(heap)\n    \n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[0])\n    \n    for _ in range(n):\n        heapq.heappop(heap)\n    \n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,[items[i][1],items[i][0]])\n    \n    l = []\n    for i in range(n):\n        if heap[0][0] == heap[0][1]:\n            heapq.heappop(heap)[1]\n            l.append(heapq.heappop(heap)[1])\n            continue\n        else:\n            heapq.heappop(heap)[1]\n            heapq.heappush(heap,[heapq.heappop(heap)[1],items[i][0]])\n            l.append(heapq.heappop(heap)[1])\n    return l\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item[0]])\n        \n    expensive = []\n    while len(heap)!= n:\n        expensive.append(heapq.heappop(heap)[1])\n    return expensive\n    \n    "
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[1])\n    \n    result = heapq.nlargest(n,heap)\n    return(result)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==1:\n        return sorted(items, key=lambda x:x[1])\n    else:\n        n=int(n)\n        heap=[]\n        for i in range(n):\n            heapq.heappush(heap,(items[i][1],items[i][0]))\n        res=[]\n        for i in range(n):\n            print(\"n=\",n,\"i=\",i,\"items[i] =\",items[i])\n            if len(heap)<n:\n                while len(heap)>0:\n                    t=heapq.heappop(heap)\n                    print(\"n=\",n,\"t=\",t)\n                    if t[0]<items[i][1]:\n                        print(\"n=\",n,\"t[0]=\",t[0])\n                        print(\"n=\",n,\"t[1]=\",t[1])\n                        print(\"n=\",n,\"t[2]=\",t[2])\n                        print(\"t[0]=\",t[0])\n                        print(\"t[1]=\",t[1])\n                        print(\"t[2]=\",t[2])\n                        print(\"n=\",n,\"t[0]=\",t[0])\n                        print(\"n=\",n,\"t[1]=\",t[1])\n                        print(\"n=\",n,\"t[2]=\",t[2])\n                        print(\"t[0]=\",t[0])\n                        print(\"t[1]=\",t[1])\n                        print(\"t[2]=\",t[2])\n                        print(\"n=\",n,\"t[0]=\",t[0])\n                        print(\"n=\",n,\"t[1]=\",t[1])\n                        print(\"n=\",n,\"t[2]=\",t[2])\n                        print(\"n=\",n,\"t[0]=\",t[0])\n                        print(\"n=\",n,\"t[1]=\",t[1])\n                        print(\"n=\",n,\"t[2]=\",t[2])\n                        break\n            else:\n                print(\"n=\",n,\"i=\",i,\"heap[0] =\",heap[0])\n                print(\"n=\",n,\"t[0]=\",heap[0][0])\n                print(\"n=\",n,\"t[1]=\",heap[0][1])\n                print(\"n=\",n,\"t[2]=\",heap[0][2])\n                print(\"n=\",n,\"t[0]=\",heap[0][0])\n                print(\"n=\",n,\"t[1]=\",heap[0][1])\n                print(\"n=\",n,\"t[2]=\",heap[0][2])\n                print(\"n=\",n,\"t[0]=\",heap[0][0])\n                print(\"n=\",n,\"t[1]=\",heap[0][1])\n                print(\"n=\",n,\"t[2]=\",heap[0][2])\n                print(\"n=\",n,\"t[0]=\",heap[0][0])\n                print(\"n=\",n,\"t[1]=\",heap[0][1])\n                print(\"n=\",n,\"t[2]=\",heap[0][2])\n                break\n        return res\n    \ndef expensive_items_2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==1:\n        return sorted(items, key=lambda x:x[1])\n    else:\n        n=int(n)\n        heap=[]\n        for i in range(n):\n            heapq.heappush(heap,(items[i][1],items[i][0]))\n        res=[]\n        for i in range(n):\n            print(\"n=\",n,\"i=\",i,\"items[i] =\",items[i])\n            if len(heap)<n:\n                while len(heap)>0:\n                    t=heapq.heappop(heap)\n                    print(\"n=\",n,\"t=\",t)\n                    if t[0]<items[i][1]:\n                        print(\"n=\",n,\"t[0]=\",t[0])\n                        print(\"n=\",n,\"t[1]=\",t[1])\n                        print(\"n=\",n,\"t[2]=\",t[2])\n                        print(\"t[0]=\",t[0])\n                        print(\"t[1]=\",t[1])\n                        print(\"t[2]=\",t[2])\n                        print(\"n=\",n,\"t[0]=\",t[0])\n                        print(\"n=\",n,\"t[1]=\",t[1])\n                        print(\"n=\",n,\"t[2]=\",t[2])\n                        print(\"n=\",n,\"t[0]=\",t[0])\n                        print(\"n=\",n,\"t[1]=\",t[1])\n                        print(\"n=\",n,\"t[2]=\",t[2])\n                        print(\"t[0]=\",t[0])\n                        print(\"t[1]=\",t[1])\n                        print(\"t[2]=\",t[2])\n                        print(\"n=\",n,\"t[0]=\",t[0])\n                        print(\"n=\",n,\"t[1]=\",t[1])\n                        print(\"n=\",n,\"t[2]=\",t[2])\n                        break\n            else:\n                print(\"n=\",n,\"i=\",i,\"heap[0] =\",heap[0])\n                print(\"n=\",n,\"t[0]=\",heap[0][0])\n                print(\"n=\",n,\"t[1]=\",heap[0][1])\n                print(\"n=\",n,\"t[2]=\",heap[0][2])\n                print(\"n=\",n,\"t[0]=\",heap[0][0])\n                print(\"n=\",n,\"t[1]=\",heap[0][1])\n                print(\"n=\",n,\"t[2]=\",heap[0][2])\n                print(\"n=\",n,\"t[0]=\",heap[0][0])\n                print(\"n=\",n,\"t[1]=\",heap[0][1])\n                print(\"n=\",n,\"t[2]=\",heap[0][2])\n                break\n        return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # Create a heap of n items\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[1])\n    \n    # Keep heapifying down until the heap is empty\n    while heap:\n        # Take the top item from the heap and delete it\n        item = heapq.heappop(heap)\n        \n        # If the heap is empty, then we have a top item\n        if len(heap)==0:\n            break\n        # If the top item has more than n items, update it's heap\n        elif len(heap)>n:\n            heapq.heappush(heap,heapq.heappop(heap)+item)\n        \n    # Return the n most expensive items\n    return heap\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_l = []\n    for i in range(len(l)):\n        new_l.append(l[i])\n    new_l.append(l[:i+1])\n    return new_l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[x:x+n] for x in range(0,len(l),n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.insert(0, l[0])\n    l.pop()\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    return a, b\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.append(l[0])\n    return l[1:len(l)+1]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.append(l[0])\n    return l,n\n    \ndef nth_arr(l,n):\n    '''\n    Write a python function to nth_arr(), which takes an arbitrary number and returns the nth element of a list.\n    '''\n    return l[-n]\n    \ndef remove_dots(string):\n    '''\n    Write a python function to remove the double dots from a string.\n    '''\n    return string.replace('.', '')\n    \ndef remove_dots_arr(l):\n    '''\n    Write a python function to remove the double dots from a list of strings.\n    '''\n    return [word.replace('.', '') for word in l]\n    \ndef merge_lists(l1, l2):\n    '''\n    Write a python function to merge two sorted lists into one, preserving the order of the original list.\n    '''\n    l3 = []\n    l3.extend(l1)\n    l3.extend(l2)\n    return l3\n    \ndef merge_arr(l1, l2):\n    '''\n    Write a python function to merge two sorted lists into one, preserving the order of the original list.\n    '''\n    l3 = []\n    l3.extend(l1)\n    l3.extend(l2)\n    return l3\n    \ndef remove_empty(l):\n    '''\n    Write a python function to remove any empty elements of a list.\n    '''\n    return [word for word in l if word]\n    \ndef remove_empty_arr(l):\n    '''\n    Write a python function to remove any empty elements of a list.\n    '''\n    return [word.replace('.', '') for word in l if word]\n    \ndef add_word(l, word):\n    '''\n    Write a python function to add a word to a list.\n    '''\n    l.append(word)\n    return l\n    \ndef remove_first(l):\n    '''\n    Write a python function to remove the first element of a list.\n    '''\n    return l.pop(0)\n    \ndef remove_last(l):\n    '''\n    Write a python function to remove the last element of a list.\n    '''\n    return l.pop()\n    \ndef reverse_list(l):\n    '''\n    Write a python function to reverse a list, in-place.\n    '''\n    i = len(l) - 1\n    while i >= 0:\n        l[i], l[i-1] = l[i-1], l[i]\n        i -= 1\n    return l\n    \ndef count_sub_arr(l):\n    '''\n    Write a python function to count all the sub-arrays of a list.\n    '''\n    return sum(1 for i in range(0, len(l) - 1) if l[i] == l[i+1])\n    \ndef count_sub_arr_arr(l):\n    '''\n    Write a python function to count all the sub-arrays of a list.\n    '''\n    return sum(1 for i in range(0, len(l)) if l[i] == l[i+1])\n    \ndef reverse_array(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(len(l) - 1, -1, -1):\n        l[i], l[i+1] = l[i+1], l[i]\n    return l\n    \ndef reverse_list_arr(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(len(l) - 1, -1, -1):\n        l[i], l[i+1] = l[i+1], l[i]\n    return l\n    \ndef merge_two_arrs(arr1, arr2):\n    '''\n    Write a python function to merge two sorted lists into one, preserving the order of the original list.\n    '''\n    return merge_arr(arr1, arr2)\n    \ndef merge_two_arrs_arr(arr1, arr2):\n    '''\n    Write a python function to merge two sorted lists into one, preserving the order of the original list.\n    '''\n    return merge_arr(arr1, arr2)\n    \ndef count_sub_arr_arr(arr1, arr2):\n    '''\n    Write a python function to count all the sub-arrays of a list.\n    '''\n    return sum(1 for i in range(0, len(arr1) - 1) if arr1[i] == arr1[i+1])\n    \ndef count_sub_arr_arr_arr(arr1, arr2):\n    '''\n    Write a python function to count all the sub-arrays of a list.\n    '''\n    return sum(1 for i in range(0, len(arr1)) if arr1[i] == arr1[i+1])\n    \ndef count_div_arr(arr1):\n    '''\n    Write a python function to count all the division of a list.\n    '''\n    return sum(1 for i in range(0, len(arr1)) if arr1[i] == arr1[i+1])\n    \ndef count_div_arr_arr(arr1):\n    '''\n    Write a python function to count all the division of a list.\n    '''\n    return sum(1 for i in range(0, len(arr1)) if arr1[i] == arr1[i+1])\n    \ndef reverse_array_arr(arr):\n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(len(arr) - 1, -1, -1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n    \ndef reverse_list_arr_arr(arr):\n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(len(arr) - 1, -1, -1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n    \ndef sort_arr(arr):\n    '''\n    Write a python function to sort a list.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    return arr\n    \ndef reverse_list(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(0, len(l)):\n        l[i] = l[len(l) - 1 - i]\n        l[len(l) - 1 - i] = l[i]\n    return l\n    \ndef remove_all_words(str1, str2):\n    '''\n    Write a python function to remove all the words from the string str1 and the string str2.\n    '''\n    return''.join(str1.split(' ')) -''''''\n    \ndef remove_word(str1, str2):\n    '''\n    Write a python function to remove one word from the string str1 and the string str2.\n    '''\n    return''.join(str2.split(' ')) -''''''''\n    \ndef remove_all_words_arr(str1, str2):\n    '''\n    Write a python function to remove all the words from the string str1 and the string str2.\n    '''\n    return''.join(str1.split()) -'''''''''''''' '\n    \ndef remove_word_arr(str1, str2):\n    '''\n    Write a python function to remove one word from the string str1 and the string str2.\n    '''\n    return''.join(str2.split(' ')) -'''''''''''''' '\n    \ndef print_string_arr(l):\n    '''\n    Write a python function to print the list of strings.\n    '''\n    for wor"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx)==0:\n        return ()\n    elif len(listx)==1:\n        return listx[0]\n    else:\n        return tuple(listx[:2])\n    \n    \ndef is_numeric(s):\n    '''\n    Write a function to check if a string is a numeric string.\n    '''\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n    \ndef is_letter(s):\n    '''\n    Write a function to check if a string is a letter string.\n    '''\n    if len(s)==0:\n        return True\n    elif len(s)==1:\n        return False\n    else:\n        return s[0].isupper()\n    \ndef is_word(s):\n    '''\n    Write a function to check if a string is a word string.\n    '''\n    return s.isalpha()\n    \ndef is_digits(s):\n    '''\n    Write a function to check if a string is a digits string.\n    '''\n    return s.isdigit()\n    \ndef is_valid(s):\n    '''\n    Write a function to check if a string is a valid word.\n    '''\n    if not is_word(s):\n        return False\n    \n    if not is_digits(s):\n        return False\n    \n    for c in s:\n        if not is_letter(c):\n            return False\n    \n    return True\n    \ndef is_valid_tuple(tuple):\n    '''\n    Write a function to check if a string is a valid tuple.\n    '''\n    if not len(tuple)==2 or not is_numeric(tuple[0]) or not is_numeric(tuple[1]):\n        return False\n    \n    for i in range(2,len(tuple)):\n        if not is_numeric(tuple[i]):\n            return False\n    \n    return True\n    \ndef is_valid_list(list):\n    '''\n    Write a function to check if a string is a valid list.\n    '''\n    if not len(list)==2 or not is_numeric(list[0]) or not is_numeric(list[1]):\n        return False\n    \n    for i in range(2,len(list)):\n        if not is_numeric(list[i]):\n            return False\n    \n    return True\n    \ndef word_checker(word):\n    '''\n    Write a function that checks if a given word is a valid word.\n    '''\n    if not word:\n        return False\n    else:\n        if is_valid_tuple(list(word)) or is_valid_list(list(word)) or is_valid_word(word):\n            return True\n        else:\n            return False\n    \ndef checker(string):\n    '''\n    Write a function that checks if a given string is a valid word.\n    '''\n    if not word_checker(string):\n        return False\n    else:\n        return True\n    \ndef is_valid_tuple(tuple):\n    '''\n    Write a function that checks if a given tuple is a valid tuple.\n    '''\n    if not len(tuple)==2 or not is_numeric(tuple[0]) or not is_numeric(tuple[1]):\n        return False\n    \n    for i in range(2,len(tuple)):\n        if not is_numeric(tuple[i]):\n            return False\n    \n    return True\n    \ndef is_valid_list(list):\n    '''\n    Write a function that checks if a given list is a valid list.\n    '''\n    if not len(list)==2 or not is_numeric(list[0]) or not is_numeric(list[1]):\n        return False\n    \n    for i in range(2,len(list)):\n        if not is_numeric(list[i]):\n            return False\n    \n    return True\n    \ndef is_valid_word(word):\n    '''\n    Write a function that checks if a given word is a valid word.\n    '''\n    if not word:\n        return False\n    else:\n        if is_valid_tuple(list(word)) or is_valid_list(list(word)) or is_valid_word(word):\n            return True\n        else:\n            return False\n    \ndef is_valid_short_word(word):\n    '''\n    Write a function that checks if a given word is a valid short word.\n    '''\n    if not word:\n        return False\n    else:\n        return not is_valid_word(word[:-1])\n    \ndef word_checker(word):\n    '''\n    Write a function that checks if a given word is a valid word.\n    '''\n    if not word:\n        return False\n    else:\n        if is_valid_short_word(word):\n            return True\n        else:\n            return False\n    \ndef checker(string):\n    '''\n    Write a function that checks if a given string is a valid word.\n    '''\n    if not word_checker(string):\n        return False\n    else:\n        return True\n    \ndef is_valid_word(word):\n    '''\n    Write a function that checks if a given word is a valid word.\n    '''\n    if not word:\n        return False\n    else:\n        if is_valid_word(word[:-1]):\n            return True\n        else:\n            return False\n    \ndef is_valid_list(list):\n    '''\n    Write a function that checks if a given list is a valid list.\n    '''\n    if not len(list)==2 or not is_numeric(list[0]) or not is_numeric(list[1]):\n        return False\n    \n    for i in range(2,len(list)):\n        if not is_numeric(list[i]):\n            return False\n    \n    return True\n    \ndef is_valid_tuple(tuple):\n    '''\n    Write a function that checks if a given tuple is a valid tuple.\n    '''\n    if not len(tuple)==2 or not is_numeric(tuple[0]) or not is_numeric(tuple[1]):\n        return False\n    \n    for i in range(2,len(tuple)):\n        if not is_numeric(tuple[i]):\n            return False\n    \n    return True\n    \ndef is_valid_tuple_short(tuple):\n    '''\n    Write a function that checks if a given tuple is a valid tuple.\n    '''\n    if not len(tuple)==2 or not is_numeric(tuple[0]) or not is_numeric(tuple[1]):\n        return False\n    \n    for i in range(2,len(tuple)):\n        if not is_numeric(tuple[i]):\n            return False\n    \n    return True\n    \ndef is_valid_tuple_long(tuple):\n    '''\n    Write a function that checks if a given tuple is a valid tuple.\n    '''\n    if not len(tuple)==2 or not is_numeric(tuple[0]) or not is_numeric(tuple[1]):\n        return False\n    \n    for i in range(2,len(tuple)):\n        if not is_numeric(tuple[i]):\n            return False\n    \n    return True\n    \ndef is_valid_word_long(word):\n    '''\n    Write a function that checks if a given word is a valid word.\n    '''\n    if not word:\n        return False\n    else:\n        if is_valid_word_long(word[:-1]):\n            return True\n        else:\n            return False\n    \ndef is_valid_word_short(word):\n    '''\n    Write a function that checks if a given word is a valid word.\n    '''\n    if not word:\n        return False\n    else:\n        if is_valid_word_short(word[:-1]):\n            return True\n        else:\n            return False\n    \ndef is_valid_word_long_short(word):\n    '''\n    Write a function that checks if a give"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # this method will return a tuple.\n    # When called, it takes two arguments.\n    # The first argument is the list.\n    # The second argument is the type of the list.\n    # Return a tuple.\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    def tuple_conversion(list_x):\n        '''\n        Convert list to tuple.\n        '''\n        \n        tuple_x = tuple(list_x)\n        \n        return tuple_x\n    \n    return tuple_conversion(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7]\n    nums.sort()\n    print(nums[-1])\n    print(nums[0])\n    print(nums[1])\n    print(nums[-2])\n    print(nums[-3])\n    print(nums[-4])\n    print(nums[-5])\n    print(nums[-6])\n    print(nums[-7])\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7]\n    print(max(nums))\n    print(min(nums))\n    print(len(nums))\n    print(sum(nums))\n    print(sum(nums[1:4]))\n    print(sum(nums[5:-2]))\n    print(sum(nums[1:-3]))\n    '''\n    \n    #Example 2:\n    '''\n    nums = [10,30,60,40,20,50]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    '''\n    '''\n    nums = [0,0,0,0,0,0]\n    print(sum(nums))\n    '''\n    '''\n    nums = [0,2,1,3,2,1,4,2]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:4]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:7]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:7]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:7]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:7]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:7]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum(nums))\n    print(sum(nums[1:6]))\n    '''\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(max(nums))\n    print(min(nums))\n    print(sum("
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return\n    a = nums.sort()\n    print(a)\n    print(nums)\n    if a[-1] > a[-2]:\n        print('lvalue')\n    else:\n        print('lvalue')\n    return nums\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        lst.append(nums[i])\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                lst.append(nums[i])\n                break\n    return lst\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    num_list = []\n    for i in range(0,len(nums)):\n        num_list.append(nums[i])\n    sorted_list = sorted(num_list)\n    print(sorted_list)\n    index_list = []\n    for i in range(0,len(sorted_list)):\n        index_list.append(i)\n    print(index_list)\n    print(sorted_list[-1], sorted_list[0])\n    sorted_list.pop(0)\n    sorted_list.pop(0)\n    print(sorted_list)\n    print(index_list)\n    index_list[-1] = index_list[-1] - index_list[0]\n    print(index_list)\n    return sorted_list[index_list[0]]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(nums)\n    biggest_num = max(nums)\n    smallest_num = min(nums)\n    print(biggest_num)\n    print(smallest_num)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return min(set(nums)) - max(set(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest - largest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)<=2:\n        return nums[0]-nums[1]\n    diff=nums[0]+nums[1]-nums[2]\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    return abs(max_val - min_val)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print(f\"Perfect Squares: { perfect_squares(a, b)}\")\n    return \n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a == b):\n        return 'perfect square'\n    if (b == 0):\n        return 'no perfect square'\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Write your code here.\n    if(a < 0):\n        a = -a\n    if(b < 0):\n        b = -b\n    # print(a, b)\n    if(b == 0):\n        return a\n    if(a == 0):\n        return b\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return True\n    \n    if b == 1:\n        return a == 1\n    if b == 2:\n        return a == 1 and a == 2\n    \n    if a % b == 0:\n        return perfect_squares(b, a//b)\n    else:\n        return False"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a < 0 or a > b):\n        return\n    if (b == 0):\n        return\n    if ((b**2)-(a**2)==0):\n        return \n    if (b**2>a**2):\n        return\n    if (b**2<a**2):\n        return\n    if (a**2==b**2):\n        return\n    if ((b**2-a**2)!=(b**2+a**2)):\n        return\n    if (a**2<=b**2):\n        return\n    if (a**2<=b**2):\n        return\n    if (a**2<b**2):\n        return\n    if (a**2<=b**2):\n        return\n    return\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    '''\n    Here a and b are the values to be compared\n    '''\n    \n    def perfect_sq(a,b):\n        if a == b:\n            return a\n        elif a % b == 0:\n            return perfect_sq(b, a // b)\n        else:\n            return perfect_sq(a, b + 1)\n    \n    return perfect_sq(a, b)\n    \n    \n    "
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if(is_prime(a)):\n        if(is_prime(b)):\n            if(a==b):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return [a]\n    if b == 1:\n        return [a]\n    return [a, a**2] + perfect_squares(a, b//2) + perfect_squares(a, b*2)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 1:\n        return [a]\n    if b == 0:\n        return []\n    if b < 0:\n        return []\n    if a < b:\n        return []\n    return perfect_squares(a-1, b-2) + perfect_squares(a-2, b-1)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if(b==0):\n        return a==0\n    elif (a==0):\n        return b==0\n    else:\n        if(a<b):\n            p=a\n            a=b\n            b=p\n        else:\n            p=b\n            b=a\n        if(a>b):\n            p=a\n            a=b\n            b=p\n        return a==b\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    def convert(p):\n        (r, theta) = p\n        return [r*math.cos(theta), r*math.sin(theta)]\n    return [convert(xi) for xi in [x,y]]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(x)\n    phi = cmath.phase(y)\n    a = (x - y)/(cmath.cos(phi))\n    b = (y - x)/(cmath.sin(phi))\n    rectangle = [a,b,phi,theta]\n    return rectangle\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = cmath.phase(x)\n    theta = cmath.phase(y)\n    polar_rect = math.sqrt(pow(x,2) + pow(y,2))\n    return math.atan2(math.sin(phi), math.cos(phi))*(180/3.14) + theta\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_2(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_3(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_4(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_5(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_6(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_7(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_8(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_9(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_10(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_11(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_12(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_13(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_14(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_15(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_16(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_17(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_18(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_19(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_20(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_21(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    print(p[0]/p[2]*180/pi)\n    return r\ndef polar_rect_22(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(p[0],p[1])\n    p = cmath.polar(r)\n    print(p)\n    print(r)\n    prin"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (cmath.sqrt(2*y) + cmath.sqrt(1-2*y))/2\n    theta = 2 * cmath.acos(r)\n    phi = cmath.phase(y) + cmath.pi\n    return theta, phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z=complex(x,y)\n    x2,y2=z.real,z.imag\n    return (x2,y2)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # The polar coordinates are in the form of polar coordinates\n    # {rho, theta} in polar coordinates\n    x, y = x/180*math.pi, y/180*math.pi\n    # The polar coordinates are in the form of rectangular coordinates\n    # {x, y} in rectangular coordinates\n    x, y = x * math.cos(y), y * math.sin(y)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    ang_x = x\n    ang_y = y\n    r_x = 1\n    r_y = 1\n    l_x = 1\n    l_y = 1\n    if ang_x < 0:\n        ang_x *= -1\n        r_x *= -1\n        l_x *= -1\n    if ang_y < 0:\n        ang_y *= -1\n        r_y *= -1\n        l_y *= -1\n    if ang_x >= 0:\n        ang_x *= -1\n        r_x *= -1\n        l_x *= -1\n    if ang_y >= 0:\n        ang_y *= -1\n        r_y *= -1\n        l_y *= -1\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = 2*cmath.pi*x\n    b = 2*cmath.pi*y\n    c = cmath.rect(a,b)\n    return c\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    return round(math.sqrt(x*x + y*y),3),round(math.sqrt(x**2 + y**2),3)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n1 = newList[0]\n    n2 = newList[-1]\n    newList[0] = n2\n    newList[-1] = n1\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)-1): \n        temp = newList[i] \n        newList[i] = newList[i+1] \n        newList[i+1] = temp \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList)>1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.insert(0, newList[len(newList)-1])\n    newList.pop()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse() \n    newList.sort() \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[1], newList[-1] = newList[-1], newList[1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.append(newList.pop(0))\n    newList.append(newList.pop())\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # code goes here\n    newList.reverse()\n    newList.sort()\n    print(newList)\n    newList.reverse()\n    print(newList)\n    # code goes here\n    newList.sort()\n    print(newList)\n    print(newList[::-1])\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    x = 1\n    while k > 0:\n        k -= 1\n        x *= n\n    return x\n    \ndef binomial_Coeff_cache(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n,k) in binomial_Coeff_cache_dic:\n        return binomial_Coeff_cache_dic[(n,k)]\n    x = binomial_Coeff(n,k)\n    binomial_Coeff_cache_dic[(n,k)] = x\n    return x\n    \ndef binomial_Coeff_cache_dic(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    dic = {}\n    for i in range(1,n):\n        dic[(i,1)] = 1\n    for i in range(2,k+1):\n        dic[(i,2)] = binomial_Coeff_cache(i,k)\n    return dic\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum=0\n    for i in range(n+1):\n        sum=sum+i*((i+1)**k)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    prod = 1\n    for i in range(n):\n        prod = prod * (k ** i)\n    return prod \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0: \n        return binomial_Coeff(-n,k)\n    if k < 1: \n        return 0\n    if n == 0: \n        return 1\n    if k == 1: \n        return n\n    return binomial_Coeff(n-1,k-1)*binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0 or j == 0:\n                continue\n            else:\n                result += (n-i+1)**j\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_Coeff(n,k):\n        for i in range(1,k+1):\n            n*=i\n        return n\n    \n    if n<=0 or k<=0:\n        return 0\n    else:\n        return binomial_Coeff(n,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Create a list of the binomial coefficients.\n    binomial = [1]\n    for i in range(1,k+1):\n        binomial.append(binomial[i-1]*(n-1)+binomial[i-1])\n    # Return the product of the list of binomial coefficients.\n    return binomial[-1]\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return(math.factorial(n)/(math.factorial(k)*math.factorial(n-k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for i in range(k+1):\n        total += (n-i)**i * binomial_Coeff(n,i)\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (n * k) // binomial_Coeff(n - 1, k - 1)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_pattern = re.compile('^\\d+\\.')\n    new_ip = zero_pattern.sub('', ip)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Find all alphabets except numbers\n    for i in range(len(ip)):\n        if ip[i].isalpha():\n            continue\n        else:\n            ip = ip.replace(ip[i],'')\n    # Remove leading zeros\n    for i in range(0,len(ip)):\n        if ip[i] == '0':\n            ip = ip.replace(ip[i],'',1)\n    # Return ip address\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.findall(r'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # find all the non zero characters\n    nonzero = re.findall(r'\\d+',ip)\n    # strip non zero characters from the beginning\n    for i in range(len(nonzero)):\n        nonzero[i] = nonzero[i].strip('0')\n    # if there are non zero characters in the string, create an empty string and return it\n    if len(nonzero) > 0:\n        return '0'+''.join(nonzero)\n    else:\n        return ''\ndef rmzero_ip_port(ip_port):\n    '''\n    Return a string in the format of \"IP:PORT\".\n    '''\n    return ip_port.replace(':','')\ndef get_country_code(ip):\n    '''\n    Return the country code of an ip address.\n    '''\n    ip = ip.strip('.')\n    try:\n        return re.search(r'\\w{3}',ip).group()\n    except:\n        return 'INVALID'\ndef remove_punctuation(text):\n    '''\n    Remove punctuation from the text.\n    '''\n    return re.sub('[!@#$%^&*()_+-]+', '', text)\ndef remove_symbols(text):\n    '''\n    Remove all the symbols from the text.\n    '''\n    return re.sub(r'[!@#$%^&*()_+-]+', '', text)\ndef remove_stop_words(text):\n    '''\n    Remove all the words from the text that are not in the stop word list.\n    '''\n    return text.split()\ndef to_lowercase(text):\n    '''\n    Return a text in the format of \"TEXT.lower\"\n    '''\n    text = text.lower()\n    return text\ndef remove_digits(text):\n    '''\n    Remove all the digits from the text.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef remove_spaces(text):\n    '''\n    Remove all the spaces from the text.\n    '''\n    return re.sub(' +','', text)\ndef remove_zero_domain(text):\n    '''\n    Remove all the zeros from the text.\n    '''\n    return text.replace('.','')\ndef remove_digit_caps(text):\n    '''\n    Remove all the digits from the text.\n    '''\n    return re.sub(r'[!@#$%^&*()_+-]+', '', text)\ndef remove_lowercase(text):\n    '''\n    Remove all the lowercase letters from the text.\n    '''\n    return text.lower()\ndef remove_punctuation(text):\n    '''\n    Remove all the punctuation from the text.\n    '''\n    return re.sub('[!@#$%^&*()_+-]+', '', text)\ndef remove_symbols(text):\n    '''\n    Remove all the symbols from the text.\n    '''\n    return re.sub(r'[!@#$%^&*()_+-]+', '', text)\ndef remove_stop_words(text):\n    '''\n    Remove all the words from the text that are not in the stop word list.\n    '''\n    return text.split()\ndef to_int(text):\n    '''\n    Return an integer value from the text.\n    '''\n    return int(text)\ndef to_float(text):\n    '''\n    Return a float value from the text.\n    '''\n    return float(text)\ndef to_int_list(text):\n    '''\n    Return a list of integers from the text.\n    '''\n    return [int(i) for i in text.split() if i.isdigit()]\ndef to_float_list(text):\n    '''\n    Return a list of floats from the text.\n    '''\n    return [float(i) for i in text.split() if i.isdigit()]\ndef to_date(text):\n    '''\n    Return a date value from the text.\n    '''\n    return datetime.strptime(text, '%Y-%m-%d').date()\ndef to_date_str(text):\n    '''\n    Return a date value from the text.\n    '''\n    return datetime.strptime(text, '%Y-%m-%d').strftime('%Y%m%d')\ndef extract_ip(url):\n    '''\n    Extract an ip from a url.\n    '''\n    # parse the url\n    result = extract_url(url).split()\n    # extract the ip\n    ip = ''\n    for i in range(len(result)):\n        if i == 0:\n            ip = result[i]\n        else:\n            if re.search(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', result[i]):\n                ip += result[i]\n    # clean up the ip\n    ip = removezero_ip(ip)\n    # return the ip\n    return ip\ndef extract_url(url):\n    '''\n    Extract the url from a url.\n    '''\n    # convert the url to lowercase\n    url = remove_lowercase(url)\n    # remove all the punctuation from the url\n    url = remove_punctuation(url)\n    # remove all the numbers from the url\n    url = remove_digits(url)\n    # remove all the spaces from the url\n    url = remove_spaces(url)\n    # remove all the stopwords from the url\n    url = remove_stop_words(url)\n    # remove all the symbols from the url\n    url = remove_symbols(url)\n    # remove all the symbols from the url\n    url = remove_symbols(url)\n    # remove all the punctuation from the url\n    url = remove_punctuation(url)\n    # remove all the special characters from the url\n    url = remove_digits(url)\n    # convert the url to an int\n    url = to_int(url)\n    # convert the url to a float\n    url = to_float(url)\n    # return the url\n    return url\ndef remove_url_urls(urls):\n    '''\n    Return a new list of urls without the url urls.\n    '''\n    return [x for x in urls if not x.startswith(urls)]\ndef remove_url_punct(urls):\n    '''\n    Return a new list of urls without the url urls.\n    '''\n    return [x for x in urls if not x.startswith('http://')]\ndef remove_url_special(urls):\n    '''\n    Return a new list of urls without the url urls.\n    '''\n    return [x for x in urls if not x.startswith('www.facebook.com')]\ndef extract_date(url):\n    '''\n    Extract the date from a url.\n    '''\n    # parse the url\n    result = extract_url(url).split()\n    # extract the date\n    date = ''\n    for i in range(len(result)):\n        if i == 0:\n            date = result[i]\n        else:\n            if re.search(r'\\d{4}-\\d{2}-\\d{2}', result[i]):\n                date += result[i]\n    # clean up the date\n    date = removezero_ip(date)\n    # return the date\n    return date\ndef extract_url_date(url):\n    '''\n    Extract the url from a url.\n    '''\n    # parse the url\n    result = extract_url(url).split()\n    # extract the date\n    date = ''\n    for i in range(len(result)):\n        if i == 0:\n            date = result[i]\n        else:\n            if re.search(r'\\d{4}-\\d{2}-\\d{2}', result[i]):\n                date += result[i]\n    # clean up the date\n    date = removezero_ip(date)\n    # return the date\n    return date\ndef extract_id_from_url(url)"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = \"\"\n    new_ip = str(ip)\n    return new_ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_count = 0\n    for i in range(len(ip)):\n        if ip[i] == '0':\n            zero_count += 1\n        else:\n            break\n    if zero_count == 0:\n        return ip\n    else:\n        return ip.replace(ip[zero_count:],'',1)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # count leading zeroes\n    count = 0\n    while '0' in ip[0:len(ip)-1]:\n        count += 1\n    # return an ip with leading zeroes removed\n    return ip[count:]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == \"\":\n        return ip\n    else:\n        regex = re.compile(r'^(?!\\d)(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d).{1,3}$')\n        return re.sub(regex, '', ip)\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    if port == \"\":\n        return port\n    else:\n        regex = re.compile(r'^(?!\\d)(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d).{1,3}$')\n        return re.sub(regex, '', port)\ndef removezero_protocol(protocol):\n    '''\n    Write a function to remove leading zeroes from an ipv6 protocol.\n    '''\n    if protocol == \"\":\n        return protocol\n    else:\n        regex = re.compile(r'^(?!\\d)(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n        \ndef removezero_ip_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_after(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_after_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after_back_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after_back_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after_back_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after_back_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after_back_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after_back_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=ip.strip()\n    l=[]\n    z=0\n    #for i in range(len(ip)-1):\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            l.append(ip[:i]+ip[i+1:])\n            z+=1\n        else:\n            l.append(ip[:i]+ip[i+1:])\n    if z>0:\n        l=l[1:]\n    return ''.join(l)\n    \ndef removezero_ip_back_after_back_back(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip=i"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0\\.\\d+','',ip)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    if len(list1) % 2 == 0:\n        for i in range(0, len(list1), 2):\n            if list1[i] % 2!= 0:\n                even += list1[i]\n            else:\n                odd += list1[i]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd=[]\n    even_odd_count=0\n    even_odd_index=0\n    odd_count=0\n    odd_index=0\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n            even_odd_count+=1\n        else:\n            odd_count+=1\n        \n    if even_odd_count==0:\n        return None\n    else:\n        for i in even_odd:\n            if i % 2 == 0:\n                even_odd_index+=1\n                even_odd.append(i)\n                even_odd_count-=1\n                \n        return even_odd\n    \n    \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    list2 = []\n    for i in list1:\n        if i % 2 == 0:\n            list2.append(i)\n        else:\n            list2.append(i)\n    print(f\"The Difference Between Even and Odd Number in the List: {list2}\")\n    \n    \ndef repeat_element(list1):\n    '''\n    Write a function to find the list of repeated elements\n    '''\n    \n    list2 = []\n    for i in list1:\n        if i in list2:\n            list2.append(i)\n        else:\n            list2.append(i)\n    print(f\"The List of Repeated Elements in the List: {list2}\")\n    \n    \n    \ndef tuple_tuple_to_string(list1):\n    '''\n    Write a function to convert a tuple to a string\n    '''\n    \n    list2 = \"\"\n    for i in range(len(list1)):\n        list2 += str(list1[i])\n        if i!= len(list1)-1:\n            list2 += \",\"\n    print(f\"The String of the Tuple is: {list2}\")\n    \n    \n    \ndef main():\n    '''\n    The main function\n    '''\n    \n    #create lists\n    list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    print(f\"The List of the elements in the list: {list1}\")\n    \n    #find the odd number\n    diff_odd_num = diff_even_odd(list1)\n    print(f\"The odd number is: {diff_odd_num}\")\n    \n    #find the even number\n    diff_even_num = diff_even_odd(list1)\n    print(f\"The even number is: {diff_even_num}\")\n    \n    #find the list of odd numbers\n    list2 = repeat_element(list1)\n    print(f\"The List of the odd numbers in the list: {list2}\")\n    \n    #find the list of even numbers\n    list3 = tuple_tuple_to_string(list1)\n    print(f\"The String of the Tuple is: {list3}\")\n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    for number in list1:\n        if number % 2 == 0:\n            even_odd.append(number)\n        else:\n            even_odd.append(number)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # for loop for every item in the list\n    for item in list1:\n        # if item is even\n        if item % 2 == 0:\n            # add item to the end of the list\n            list1.append(item)\n            # print the new list\n            print(f'The new list is {list1}')\n        # if item is odd\n        else:\n            # add item to the end of the list\n            list1.insert(0,item)\n            # print the new list\n            print(f'The new list is {list1}')\n    print('After loop')\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first = 0\n    last = len(list1)-1\n    while first < last:\n        if list1[first] % 2 == 0:\n            first = first + 1\n        else:\n            first = first + 1\n            last = last - 1\n    return list1[first], list1[last]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return (list1[0] - list1[1])\n    #raise NotImplementedError\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    print(f\"the list: {list1}\")\n    odd_list = []\n    even_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    print(\"list 1 is\", even_list)\n    print(\"list 2 is\", odd_list)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)%2 == 0:\n        print(\"Lis is even\")\n        print(list1[::2])\n        return list1[::2]\n    else:\n        print(\"Lis is odd\")\n        print(list1[1::2])\n        return list1[1::2]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    tot = 0\n    s1 = [int(x) for x in str1]\n    s2 = [int(x) for x in str2]\n    #Loop through each character in str1 and str2 and check if they are different\n    for x in s1:\n        for y in s2:\n            if x!= y:\n                tot += 1\n    return tot\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c = {}\n    for i in range(len(str1)):\n        c[str1[i]] = i\n    for j in range(len(str2)):\n        c[str2[j]] = j\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2 : \n        return 0\n    elif len(str1)!= len(str2) : \n        return -1\n    elif str1[0] == str2[0] : \n        return 1 + min_Swaps(str1[1:],str2[1:])\n    else : \n        return 1 + min_Swaps(str1,str2[1:])\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError(\"str1 must be a string\")\n    if not isinstance(str2,str):\n        raise TypeError(\"str2 must be a string\")\n    if len(str1)!= len(str2):\n        raise ValueError(\"str1 and str2 must have the same length\")\n    matrix = []\n    for char in str1:\n        matrix.append(ord(char)-ord('0'))\n    for char in str2:\n        matrix.append(ord(char)-ord('0'))\n    \n    rows = len(matrix)\n    columns = len(matrix[0])\n    minSwaps = rows*columns\n    matrix = matrix*rows\n    for row in range(rows):\n        for col in range(columns):\n            if matrix[row][col]!= 0:\n                minSwaps -= 1\n    return minSwaps\n    \n    \ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError(\"str1 must be a string\")\n    if not isinstance(str2,str):\n        raise TypeError(\"str2 must be a string\")\n    if len(str1)!= len(str2):\n        raise ValueError(\"str1 and str2 must have the same length\")\n    matrix = []\n    for char in str1:\n        matrix.append(ord(char)-ord('0'))\n    for char in str2:\n        matrix.append(ord(char)-ord('0'))\n    \n    rows = len(matrix)\n    columns = len(matrix[0])\n    maxSwaps = rows*columns\n    matrix = matrix*rows\n    for row in range(rows):\n        for col in range(columns):\n            if matrix[row][col]!= 0:\n                maxSwaps -= 1\n    return maxSwaps\n    \n    \ndef swap(str1,str2) : \n    '''\n    Write a python function to swap two binary numbers represented as strings.\n    '''\n    if not isinstance(str1,str):\n        raise TypeError(\"str1 must be a string\")\n    if not isinstance(str2,str):\n        raise TypeError(\"str2 must be a string\")\n    if len(str1)!= len(str2):\n        raise ValueError(\"str1 and str2 must have the same length\")\n    matrix = []\n    for char in str1:\n        matrix.append(ord(char)-ord('0'))\n    for char in str2:\n        matrix.append(ord(char)-ord('0'))\n    \n    rows = len(matrix)\n    columns = len(matrix[0])\n    for row in range(rows):\n        for col in range(columns):\n            matrix[row][col] = matrix[row][col] + ord('1')\n    \n    return matrix\n    \n    \ndef main() : \n    print(\"*** Binary to Integer ***\")\n    print(\"{:^20}\".format(\"Binary to Integer\"))\n    print(\"{:^20}\".format(\"Input\"))\n    input = input()\n    print(\"{:^20}\".format(\"Output\"))\n    print(binary_to_int(input))\n    print(\"{:^20}\".format(\"Min Swaps\"))\n    print(min_Swaps(input,input))\n    print(\"{:^20}\".format(\"Max Swaps\"))\n    print(max_Swaps(input,input))\n    print(\"{:^20}\".format(\"Swap\"))\n    print(swap(input,input))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    length1,length2= len(str1),len(str2)\n    if length1<length2:\n        str2 = str2+str1\n    elif length2<length1:\n        str1 = str1+str2\n    swaps = 0\n    for i in range(length1):\n        for j in range(length2):\n            if str1[i]!= str2[j]:\n                break\n            if str1[i] == str2[j]:\n                swaps += 1\n                break\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    count = 0\n    for i in range(n):\n        if (str1[i]!= str2[i]):\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    counter = 0\n    \n    def get_swaps(str):\n        '''\n        Count the number of times the character 'X' has been swapped with the previous character '0'\n        '''\n        numbers = [1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=str1.replace('1','0')\n    str2=str2.replace('1','0')\n    n=len(str1)\n    min_swaps=0\n    for i in range(n):\n        if str1[i]!=str2[i]:\n            min_swaps+=1\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1[0] == '0':\n        str1 = str1[1:]\n    else:\n        str1 = str1[1:]\n        \n    if str2[0] == '0':\n        str2 = str2[1:]\n    else:\n        str2 = str2[1:]\n        \n    min = 0\n    for i in range(0,len(str1)):\n        if str1[i] == '1' and str2[i] == '0':\n            str1 = str1[:i] + '1' + str1[i+1:]\n        elif str2[i] == '1' and str1[i] == '0':\n            str2 = str2[:i] + '1' + str2[i+1:]\n    for i in range(0,len(str2)):\n        if str2[i] == '1' and str1[i] == '0':\n            str2 = str2[:i] + '1' + str2[i+1:]\n        elif str1[i] == '1' and str2[i] == '0':\n            str1 = str1[:i] + '1' + str1[i+1:]\n    \n    if len(str1) > len(str2):\n        min = len(str2) - len(str1)\n    else:\n        min = len(str1) - len(str2)\n        \n    return min\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #C:\\Users\\Vadim\\OneDrive\\Desktop\\Projects\\data-science-learning\\HW3\\venv\\Scripts\\python.exe\n    s = 0\n    for i in tuple_list:\n        s += len(i)\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    bytes_tuple_list = (len(tuple_list[0]) * len(tuple_list[1]))\n    return bytes_tuple_list\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    count_bytes = 0\n    for item in tuple_list:\n        count_bytes += sys.getsizeof(item)\n    return count_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list_len = len(tuple_list)\n    return tuple_list_len * 8\ndef read_as_bytes(file, byte_num):\n    '''\n    Read a given byte as a file and return it as bytes.\n    '''\n    return file.read(byte_num)\ndef file_contents(filename):\n    '''\n    Read and return the file's contents.\n    '''\n    with open(filename, 'r') as file:\n        return file.read()\ndef get_seg_num(filename):\n    '''\n    Read a given segment file and return the number of segments.\n    '''\n    seg_num = 0\n    with open(filename, 'r') as file:\n        for i, line in enumerate(file):\n            if i % 2 == 0:\n                seg_num += 1\n    return seg_num\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum([len(x) for x in tuple_list])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_count = 0\n    for element in tuple_list:\n        tuple_count += len(element)\n    return tuple_count\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) == 1:\n        return sys.getsizeof(tuple_list[0])\n    else:\n        return sum([tuple_size(tuple_list[i:i + 1]) for i in range(0, len(tuple_list), 1)])\n        \ndef vector_size(vector):\n    '''\n    Write a function to find the size in bytes of a given vector.\n    '''\n    return sys.getsizeof(tuple(vector))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += len(tup)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count_list = [0 for x in range(len(tuple_list))]\n    for item in tuple_list:\n        count_list[tuple_list.index(item)] += 1\n    return count_list\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = len(arr2)-1\n    while i < len(arr1) and j > 0:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j -= 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == arr2:\n        return arr1[k-1]\n    \n    if k == 0:\n        return None\n    \n    if k == 1:\n        return arr1[0]\n    \n    mid = (len(arr1) + len(arr2))//2\n    \n    if k > mid:\n        return find_kth(arr2, arr1, k - mid)\n    \n    else:\n        return find_kth(arr1, arr2, k - mid)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Write your code here.\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if k > n1 or k > n2:\n        return -1\n    \n    left = 0\n    right = n1 - 1\n    \n    while left <= right:\n        \n        mid = (left + right) // 2\n        \n        if arr1[mid] > arr2[mid]:\n            left = mid + 1\n        elif arr1[mid] < arr2[mid]:\n            right = mid - 1\n        else:\n            return arr1[mid]\n    \n    return -"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    if n == 0:\n        return -1\n    if k >= n:\n        return arr1[k-1]\n    if k > n:\n        return arr2[k-n]\n    i = 0\n    j = n-1\n    while i < n and j >= 0 and arr1[i] < arr2[j]:\n        i += 1\n    if i == n:\n        return arr2[j]\n    elif j == n:\n        return arr1[i]\n    else:\n        return find_kth(arr1[i:i+k], arr2[j:j+k], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    i = 0\n    j = len(arr1) - 1\n    k -= 1\n    \n    while i <= j:\n        mid = i + (j - i) // 2\n        \n        if arr1[mid] < arr2[mid + 1]:\n            i = mid + 1\n        else:\n            j = mid\n    \n    return arr1[i]\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1) - 1\n    i, j = 0, len(arr2) - 1\n    while (left < right):\n        if arr1[i] <= arr2[j]:\n            left += 1\n            i += 1\n        else:\n            right -= 1\n            j -= 1\n    return arr1[i+1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = len(arr1)-1\n    while(i < j):\n        m = (i+j)//2\n        if arr1[m] < arr2[k-1]:\n            i = m + 1\n        else:\n            j = m\n    return arr1[i"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def partition(arr, start, end):\n        # Store the index to compare with\n        pivot = start\n        pivot_element = arr[pivot]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # use Binary Search to find the kth element\n    n = len(arr1)\n    mid = n//2\n    def binarySearch(arr, target):\n        # base case\n        if target < arr[mid]:\n            return binarySearch(arr[:mid], target)\n        elif target > arr[mid]:\n            return binarySearch(arr[mid+1:], target)\n        return arr[mid]\n    return binarySearch(arr1, arr2, k)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    remainder = number % 10\n    if remainder == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if type(number) == int:\n        if number < 0:\n            return False\n        if number == 0:\n            return True\n        for n in range(1, number + 1):\n            if number % n == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # Initialize the first num as 1\n    first_num = 1\n    \n    # Initialize the second num as 0\n    second_num = 0\n    \n    # Initialize the carry as 0\n    carry = 0\n    \n    # Initialize the length of the string\n    length = 0\n    \n    # Iterate for the number\n    for i in str(number):\n        \n        # Add the current number to the second num\n        second_num += int(i)\n        \n        # If the number is the same as the previous num\n        if int(i) == second_num:\n            # And update the first num\n            first_num = second_num\n            \n        # If the number is armstrong\n        if int(i) > second_num:\n            # Add the carry to the first num\n            first_num = first_num + carry\n            \n        # Add the carry to the second num\n        second_num = second_num + carry\n        \n        # If the number is greater than the carry\n        if second_num > second_num:\n            # Calculate the length of the string\n            length = len(str(second_num))\n            \n            # Check if the length is same as the number\n            if length == number:\n                return True\n            else:\n                return False\n        \n        # If the number is less than the carry\n        elif second_num < second_num:\n            # Calculate the length of the string\n            length = len(str(second_num))\n            \n            # Check if the length is same as the number\n            if length == number:\n                return True\n            else:\n                return False\n        \n        # If the number is equal to the carry\n        elif second_num == second_num:\n            # Calculate the length of the string\n            length = len(str(second_num))\n            \n            # Check if the length is same as the number\n            if length == number:\n                return True\n            else:\n                return False\n            \n    # If the length of the string is not equal to the number\n    return False\n    \n    \nprint(armstrong_number(1))\nprint(armstrong_number(2))\nprint(armstrong_number(3))\nprint(armstrong_number(9))\nprint(armstrong_number(10))\nprint(armstrong_number(11))\nprint(armstrong_number(17))\nprint(armstrong_number(19))\nprint(armstrong_number(24))\nprint(armstrong_number(32))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_number(9))\nprint(armstrong_numbe"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return len(str(number)) == len(str(number)[::-1])\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    i = 0\n    while i < len(number):\n        remainder = number[i] % 10\n        sum += remainder * (10**i)\n        i += 1\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        count += 1\n        num = int(str(num) / 10)\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    count = 0\n    for char in num:\n        count += 1\n        if count % 2!= 0:\n            num = num.replace(char, '')\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = 0\n    for i in str(number):\n        temp += int(i)\n    temp_sum = sum(map(int, str(temp)))\n    if temp_sum == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number):\n        if (number % i == 0):\n            sum = sum + i\n    if (sum == number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    i = 0\n    while i < len(str(number)):\n        digit = int(number[i])\n        sum += digit ** 3\n        i += 1\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(number) / len(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 2:\n        return 0\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    sum_n_average = 0\n    for i in range(number):\n        sum_n = sum_n + i\n        sum_n_average = sum_n_average + i\n    return sum_n_average/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < number:\n        sum += i\n        i += 1\n    average = sum/number\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n    for j in range(1, number + 1):\n        average += j\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    sum += number\n    sum += number\n    sum += number\n    sum = sum / (1 + number)\n    return sum\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # TODO: Your code goes here\n    # create a function to calculate sum and average\n    # change the function to add two numbers.\n    # return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, number + 1):\n        s += i\n    return s/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0,number):\n        sum = sum + i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for n in range(1, number+1):\n        sum += n\n    avg = sum/number\n    return sum, avg\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : return True\n    else : return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : return True\n    else : return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == '':\n        return None\n    else:\n        for i in range(0, len(str1)):\n            if str1[i] == str1[i+1]:\n                return str1[i]\n        return None"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #Dictionary of the characters\n    char_dict = {'0':'a', '1':'b', '2':'c', '3':'d', '4':'e', '5':'f', '6':'g', '7':'h', '8':'i', '9':'j', 'A':'k', 'B':'l', 'C':'m', 'D':'n', 'E':'o', 'F':'p', 'G':'q', 'H':'r', 'I':'s', 'J':'t', 'K':'u', 'L':'v', 'M':'w', 'N':'x', 'O':'y', 'P':'z'}\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str_list = []\n    for i in range(len(str1)):\n        if str1[i] in str_list:\n            return str_list[str_list.index(str1[i])]\n        str_list.append(str1[i])\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char_counter = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[repeated_char_counter]:\n            repeated_char_counter += 1\n        else:\n            repeated_char_counter = 0\n    return repeated_char_counter\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    my_dict = dict()\n    for i in str1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    for i in my_dict:\n        if my_dict[i] == 1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result = 0\n    list = []\n    for i in str1:\n        if i not in list:\n            list.append(i)\n            if i not in result:\n                result += 1\n    return list[result]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    str1_count = {}\n    for char in str1:\n        if char in str1_count:\n            str1_count[char] += 1\n        else:\n            str1_count[char] = 1\n    \n    repeated_char = ''\n    for key in str1_count:\n        if str1_count[key]!= 1:\n            repeated_char += key\n    \n    return repeated_char\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = '123123'\n    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            dict1[char]+=1\n        else:\n            dict1[char]=1\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        if i < 10:\n            ludic_list.append(i)\n        elif i % 10 == 0:\n            ludic_list.append(i//10)\n        else:\n            ludic_list.append(i//10 + i%10)\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Write your code here\n    # get all the list\n    ludic_list = []\n    for i in range(1, n+1):\n        if i <= n:\n            ludic_list.append(i)\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    while n >= 1:\n        if n % 5 == 0:\n            print(n, 'Lucid numbers are: ', end='')\n            for i in range(1,n-1,2):\n                print(i, end=',')\n            print('which is a prime number!', sep='')\n            print(end='\\n')\n        n = n - 1\n        \n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        lud = i\n        for j in range(i, n + 1):\n            if lud % j == 0:\n                lud = lud // j\n            else:\n                continue\n        ludic.append(lud)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i < 100:\n            ludic.append(i)\n        else:\n            break\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if i % 3 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        return []\n    \n    result = []\n    \n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j == 1:\n                result.append(i)\n            elif j == i:\n                result.append(j)\n            else:\n                pass\n    return result\n    \nlucida = get_ludic(1000000000)\nprint(lucida)"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    d = {}\n    ludic = []\n    for i in range(n+1):\n        d[i] = 0\n    for i in range(1, n+1):\n        d[i] = i\n    for i in range(2, n+1):\n        d[i] = i*(i-1)//2\n    for i in range(3, n+1):\n        d[i] = i*(i-2)//3\n    for i in range(4, n+1):\n        d[i] = i*(i-4)//6\n    for i in range(5, n+1):\n        d[i] = i*(i-5)//9\n    for i in range(6, n+1):\n        d[i] = i*(i-6)//12\n    for i in range(7, n+1):\n        d[i] = i*(i-7)//15\n    for i in range(8, n+1):\n        d[i] = i*(i-8)//20\n    for i in range(9, n+1):\n        d[i] = i*(i-9)//30\n    for i in range(10, n+1):\n        d[i] = i*(i-10)//40\n    for i in range(11, n+1):\n        d[i] = i*(i-11)//50\n    for i in range(12, n+1):\n        d[i] = i*(i-12)//60\n    for i in range(13, n+1):\n        d[i] = i*(i-13)//70\n    for i in range(14, n+1):\n        d[i] = i*(i-14)//80\n    for i in range(15, n+1):\n        d[i] = i*(i-15)//90\n    for i in range(16, n+1):\n        d[i] = i*(i-16)//100\n    for i in range(17, n+1):\n        d[i] = i*(i-17)//10\n    for i in range(18, n+1):\n        d[i] = i*(i-18)//20\n    for i in range(19, n+1):\n        d[i] = i*(i-19)//30\n    for i in range(20, n+1):\n        d[i] = i*(i-20)//40\n    for i in range(21, n+1):\n        d[i] = i*(i-21)//50\n    for i in range(22, n+1):\n        d[i] = i*(i-22)//60\n    for i in range(23, n+1):\n        d[i] = i*(i-23)//70\n    for i in range(24, n+1):\n        d[i] = i*(i-24)//80\n    for i in range(25, n+1):\n        d[i] = i*(i-25)//90\n    for i in range(26, n+1):\n        d[i] = i*(i-26)//100\n    for i in range(27, n+1):\n        d[i] = i*(i-27)//10\n    for i in range(28, n+1):\n        d[i] = i*(i-28)//20\n    for i in range(29, n+1):\n        d[i] = i*(i-29)//30\n    for i in range(30, n+1):\n        d[i] = i*(i-30)//40\n    for i in range(31, n+1):\n        d[i] = i*(i-31)//50\n    for i in range(32, n+1):\n        d[i] = i*(i-32)//60\n    for i in range(33, n+1):\n        d[i] = i*(i-33)//70\n    for i in range(34, n+1):\n        d[i] = i*(i-34)//80\n    for i in range(35, n+1):\n        d[i] = i*(i-35)//90\n    for i in range(36, n+1):\n        d[i] = i*(i-36)//100\n    for i in range(37, n+1):\n        d[i] = i*(i-37)//10\n    for i in range(38, n+1):\n        d[i] = i*(i-38)//20\n    for i in range(39, n+1):\n        d[i] = i*(i-39)//30\n    for i in range(40, n+1):\n        d[i] = i*(i-40)//40\n    for i in range(41, n+1):\n        d[i] = i*(i-41)//50\n    for i in range(42, n+1):\n        d[i] = i*(i-42)//60\n    for i in range(43, n+1):\n        d[i] = i*(i-43)//70\n    for i in range(44, n+1):\n        d[i] = i*(i-44)//80\n    for i in range(45, n+1):\n        d[i] = i*(i-45)//90\n    for i in range(46, n+1):\n        d[i] = i*(i-46)//100\n    for i in range(47, n+1):\n        d[i] = i*(i-47)//10\n    for i in range(48, n+1):\n        d[i] = i*(i-48)//20\n    for i in range(49, n+1):\n        d[i] = i*(i-49)//30\n    for i in range(50, n+1):\n        d[i] = i*(i-50)//40\n    for i in range(51, n+1):\n        d[i] = i*(i-51)//50\n    for i in range(52, n+1):\n        d[i] = i*(i-52)//60\n    for i in range(53, n+1):\n        d[i] = i*(i-53)//70\n    for i in range(54, n+1):\n        d[i] = i*(i-54)//80\n    for i in range(55, n+1):\n        d[i] = i*(i-55)//90\n    for i in range(56, n+1):\n        d[i] = i*(i-56)//100\n    for i in range(57, n+1):\n        d[i] = i*(i-57)//10\n    for i in range(58, n+1):\n        d[i] = i*(i-58)//20\n    for i in range(59, n+1):\n        d[i] = i*(i-59)//30\n    for i in range(60, n+1):\n        d[i] = i*(i-60)//40\n    for i in range(61, n+1):\n        d[i] = i*(i-61)//50\n    for i in range(62, n+1):\n        d[i] = i*(i-62)//60\n    for i in range(63, n+1):\n        d[i] = i*(i-63)//70\n    for i in range(64, n+1):\n        d[i] = i*(i-64)//80\n    for i in range(65, n+1):\n        d[i] = i*(i-65)//90\n    for i in range(66, n+1):\n        d[i] = i*(i-66)//100\n    for i in range(67, n+1):\n        d[i] = i*(i-67)//10\n    for i in range(68, n+1):\n        d[i] = i*(i-68)//20\n    for i in range(69, n+1):\n        d[i"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    a = []\n    for i in range(1, n+1):\n        if i < 100:\n            a.append(i)\n        else:\n            s = int(str(i)[0])\n            for j in range(2, s+1):\n                if i%j == 0:\n                    break\n            else:\n                a.append(i)\n    return a\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 2:\n        return [n]\n    else:\n        n_list = get_ludic(n-1)\n        for i in n_list:\n            if i % 10 <= n:\n                n_list.append(i)\n        return n_list\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.replace(\" \",\"\")\n    s = s.replace(\"\\n\",\"\")\n    s = s.replace(\"\\t\",\"\")\n    s = s.split()\n    print(s)\n    for i in range(len(s)-1, -1, -1):\n        print(s[i])\n        s[i] = s[i][::-1]\n    return \"\".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Initialize empty string\n    str_list = []\n    # Loop through the string and add word to string\n    for word in s.split():\n        str_list.append(word)\n    # Join the string list and return it\n    str_list =''.join(str_list)\n    return str_list\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # count the number of words\n    count = len(s.split())\n    # create a list of words with spaces, then remove spaces from list\n    rv = [s[i:i+count] for i in range(0, len(s), count)]\n    # return the list\n    return rv\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    my_string = s.split()\n    print(my_string)\n    for i in range(len(my_string)):\n        my_string[i] = my_string[i][::-1]\n    return \" \".join(my_string)"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_word(word):\n        if len(word) > 1:\n            return word[len(word) - 1:] + word[0:len(word) - 1]\n        else:\n            return word\n    \n    \n    def reverse_all(s):\n        if len(s) > 0:\n            return''.join(reversed(s.split()))\n        else:\n            return ''\n    \n    \n    def reverse_all_with_join(s):\n        return''.join(reversed(s.split()))\n    \n    if type(s) == str:\n        return reverse_word(s)\n    \n    elif type(s) == list:\n        return reverse_all_with_join(s)\n    \n    else:\n        return 'Invalid string type'\n    \n    \ndef reverse_lst(s):\n    '''\n    Write a function to reverse a list of strings seperated by spaces.\n    '''\n    def reverse_lst_seperator(s):\n        if len(s) > 0:\n            return''.join(s.split())\n        else:\n            return ''\n    \n    \n    if type(s) == str:\n        return reverse_lst_seperator(s)\n    \n    elif type(s) == list:\n        return reverse_lst_seperator(s)\n    \n    else:\n        return 'Invalid string type'\n    \n    \ndef get_rand_string(length):\n    '''\n    Write a function to randomly generate a random string of given length.\n    '''\n    def get_rand_string_in_list(s, length):\n        return s * random.randint(1, length)\n    \n    \n    if type(s) == str:\n        return get_rand_string_in_list(s, random.randint(1, len(s)))\n    \n    elif type(s) == list:\n        return get_rand_string_in_list(s, random.randint(1, len(s)))\n    \n    else:\n        return 'Invalid string type'\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split(' ')\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # For example, if the input string is \"I live in  Washington\"\n    # the output should be\n    # \"Washington I  \"\n    # \"lives in  Washington \"\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_words.append(word[::-1])\n    return''.join(new_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s = list(s)\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime_list = []\n    for i in range(2, num):\n        if num % i == 0:\n            prime_list.append(False)\n        else:\n            prime_list.append(True)\n    if prime_list.count(False):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num < 2 or num % 2 == 0:\n        return False\n    elif num == 3:\n        return True\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3 or num == 5:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1 or num == 2:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i ** 2 <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # We need to generate a set of all numbers that we can divide num into.\n    # Number is divided into primes, 1, 2, 3, 5, 7, 11, 13, 17, 19\n    # For example, 13, 17 and 19 are prime.\n    # Each time, we check if num is divisible by any of these primes\n    # Therefore, num can be divided into primes.\n    # In other words, there are at least 2 primes, that are a divisor of num.\n    # It is a prime number.\n    # Returns True if num is prime, False if it isn't.\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def prime_checker(num):\n        '''\n        Check if the given integer is a prime number.\n        '''\n        if num == 0 or num == 1:\n            return False\n        if num == 2 or num == 3:\n            return True\n        if num > 2 and num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    return prime_checker(num)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0:\n        return 0\n    else:\n        return degree*math.pi/180\ndef degree_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef angle_dif(a, b):\n    '''\n    Find the angle between two points\n    '''\n    return ((a - b) * radian_degree(a - b)) + (a * radian_degree(b - a))\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    radian = degree * math.pi / 180\n    return round(radian, 1)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    rad = math.radians(degree)\n    return(rad)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi) / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Create the start and end indexes of the pattern\n    i = 0\n    j = len(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        text = text[start:end]\n        index = text.find(pattern)\n        return index, start, end\n    return -1, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    return match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_search = re.search(pattern, text, flags=re.IGNORECASE)\n    if pattern_search!= None:\n        return pattern_search.group(), pattern_search.start(), pattern_search.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    start_index = match.start() if match else None\n    end_index = match.end() if match else None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text, re.MULTILINE)\n    if len(result) > 1:\n        print(result)\n    elif len(result) == 1:\n        start, end = result[0]\n        print(text[start:end+1])\n        print(f\"Searching for the substring {start} in string {end+1}\")\n    else:\n        print(f\"No matches found\")\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.finditer(pattern, text, re.MULTILINE)\n    #print(m)\n    #print(type(m))\n    \n    for match in m:\n        #print(\"Match: \" + match.group())\n        #print(\"Matched: \" + match.start() + \":\" + str(match.end()))\n        #print(\"Start: \" + str(match.start()) + \":\" + str(match.end()))\n        #print(\"End: \" + str(match.end()))\n        #print(\"Start: \" + str(match.start()))\n        #print(\"End: \" + str(match.end()))\n        #print(\"Value: \" + str(match.group()))\n        return match.start(), match.end(), match.group()\n        \ndef search_text(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.finditer(pattern, text, re.MULTILINE)\n    #print(m)\n    #print(type(m))\n    \n    for match in m:\n        #print(\"Match: \" + match.group())\n        #print(\"Matched: \" + match.start() + \":\" + str(match.end()))\n        #print(\"Start: \" + str(match.start()))\n        #print(\"End: \" + str(match.end()))\n        #print(\"Value: \" + str(match.group()))\n        return match.start(), match.end(), match.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    end = 0\n    index = 0\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        yield text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = 0\n    for i in range(len(pattern)):\n        if pattern[i] == '(':\n            start_index += 1\n            end_index = i\n        else:\n            if pattern[i] == ')':\n                if start_index < end_index:\n                    start_index += 1\n                    end_index = i\n    return start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    start, end = 0, len(text)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    arr = [0,0,0,0,1,1,1,1,2] \n    for i in range(1,n+1): \n        arr[i] = arr[i-1] + arr[i-2] \n    return arr[n] \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # create array to store nth number\n    a = [0]*n\n    # find number of elements in array\n    for i in range(n):\n        a[i] = i+1\n    # nth value is the sum of previous number\n    # and the current value\n    # given nth value\n    for i in range(n-1):\n        a[i] = (a[i]+a[i+1])\n    # returns sum of nth value\n    return a[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] * n\n    for i in range(1, n):\n        if bell[i] == 1:\n            for j in range(i, 0, -1):\n                bell[j] = bell[j - 1] + bell[j]\n        else:\n            bell[i] = bell[i - 1] + bell[i]\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1 \n    elif n == 1: \n        return 0\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) \n    \n    \ndef main(): \n    \"\"\" Main Function \"\"\"\n    n = 5\n    print(\"The value of nth-bell number is\", bell_Number(n))\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return round(4 * math.pi * n**2)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # n is the input number \n    # nth number is the count of subarray \n    # where the sum of number of subarray is equal to n \n    # n is a positive integer \n    \n    \n    # Counting the number of subarray\n    count_subArray = 0\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + n\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        return bell_Number(n - 1) + bell_Number(n - 2) + bell_Number(n - 3)"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (n % 7 + 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    c=0\n    for i in range(1,n+1):\n        c+=i\n    return c\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    res=[]\n    for i in list1:\n        if i>L:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    kth_element_list = []\n    for i in range(len(list1)):\n        if i >= L:\n            kth_element_list.append(list1[i])\n            break\n        elif i == len(list1)-1:\n            kth_element_list.append(list1[i])\n    return kth_element_list\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    elif L[0] == 1:\n        if L[1:] == []:\n            return [L[0]]\n        else:\n            return [L[0]] + remove_kth_element(L[1:], L[1:])\n    else:\n        return remove_kth_element(list1, L[:L.index(1)]) + remove_kth_element(list1, L[L.index(1)+1:])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L[L.index(min(list1))]\n    if L.index(k) < L.index(min(list1)):\n        l = list(range(L.index(k), L.index(min(list1))+1))\n    else:\n        l = list(range(L.index(min(list1)), L.index(min(list1))+1))\n    list1.pop(l.index(min(list1)))\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #remove kth element\n    #time complexity: O(n)\n    #space complexity: O(1)\n    \n    k = L[L.index(max(list1))]\n    list1 = list1[:list1.index(k)]+list1[list1.index(k)+1:]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    else:\n        l = []\n        l.append(list1.pop(L))\n        l.append(list1.pop(L))\n        return l\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [x for x in list1 if x!= list1[L]]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Binary Search\n    #start = 0\n    #end = len(list1) - 1\n    #while start <= end:\n    #    mid = start + (end - start) // 2\n    #    if list1[mid] == L:\n    #        break\n    #    elif list1[mid] > L:\n    #        end = mid - 1\n    #    else:\n    #        start = mid + 1\n    #if list1[mid] == L:\n    #    return list1[:mid]\n    #else:\n    #    return list1\n    #Auxiliary indexing\n    start = 0\n    end = len(list1) - 1\n    mid = (start + end) // 2\n    while start <= mid:\n        if list1[mid] == L:\n            break\n        elif list1[mid] > L:\n            end = mid - 1\n        else:\n            start = mid + 1\n    if list1[mid] == L:\n        return list1[:mid]\n    else:\n        return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[-1][N-1:])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i]))\n    return max_list[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda x: x[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    def find(arr, n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return arr[0][n-1]\n        else:\n            return max(find(arr, n-1), find(arr, n-2))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth_col = max_of_nth_row(test_list, N, 0, 0)\n    return max_of_nth_col\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        raise ValueError('Wrong input.')\n    elif N == 0:\n        return test_list[0]\n    elif N == 1:\n        return test_list[0][N-1]\n    else:\n        return test_list[N-1][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    if n < N:\n        raise Exception('n should be greater than or equal to len(test_list)')\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) < N:\n        raise ValueError(\"The matrix should be at least NxN sized list.\")\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_number = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_number:\n            max_number = test_list[i][N]\n    return max_number\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # your code here\n    a = []\n    max = []\n    for i in test_list:\n        a.append(i[0:N])\n        a.append(i[N:])\n    for i in a:\n        max.append(max(i))\n    return max[N-1]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0]] + merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    temp = []\n    for i in range(0, len(lst)):\n        temp.append(lst[i][0])\n    return temp\n    \ndef merge_sort(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) <= 1:\n        return lst\n    temp = []\n    for i in range(len(lst)):\n        if i == len(lst)-1:\n            temp.append(lst[i][0])\n            break\n        else:\n            temp.append(lst[i][0])\n            temp.append(lst[i+1][0])\n    temp = merge(temp)\n    return temp\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return None\n    \n    # if the list is empty, just return it\n    if len(lst) == 1:\n        return lst[0]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = []\n    for i in lst:\n        lst.append(list(i))\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(item) for item in zip(*lst)]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j])!= 1:\n                lst[i][j] = lst[i][j][0]\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_lists(a,b):\n        '''\n        a = [1,2,3]\n        b = [4,5,6]\n        return a+b\n        '''\n        return a+b\n    return merge(lst[0])+merge(lst[1])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    # initialize an empty list\n    for i in range(len(lst)):\n        result.append(lst[i][0])\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    for e in test_list:\n        summ += e\n    return summ\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    final_list = []\n    for x in range(len(test_list)):\n        final_list.append(sum(test_list[:x]))\n    return final_list\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = []\n    for value in test_list:\n        cummulative_sum.append(value)\n    return cummulative_sum\n    \ndef cumulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = []\n    for value in test_list:\n        cummulative_sum.append(sum(value))\n    return cummulative_sum\n    \ndef product_of_all(test_list):\n    '''\n    Write a function to find the product of all the values that are present in the given tuple list.\n    '''\n    product = 1\n    for value in test_list:\n        product *= value\n    return product\n    \ndef product_of_all(test_list):\n    '''\n    Write a function to find the product of all the values that are present in the given tuple list.\n    '''\n    product = 1\n    for value in test_list:\n        product = product * value\n    return product\n    \ndef length_of_longest_sequence(test_list):\n    '''\n    Write a function to find the length of the longest sequence in the given list.\n    '''\n    length = 0\n    for i in range(1, len(test_list)):\n        if test_list[i - 1] < test_list[i]:\n            length += 1\n    return length\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        raise TypeError(\"Invalid input\")\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    i=0\n    cum=0\n    while i<len(test_list):\n        cum+=test_list[i]\n        i+=1\n    return cum\ndef percent_of_list_in_tuple(test_list):\n    '''\n    Write a function that takes a tuple and prints the percentage of each element in the tuple.\n    '''\n    len_tuple=len(test_list)\n    percent_of_tuple=0\n    i=0\n    while i<len_tuple:\n        percent_of_tuple+=test_list[i]/len_tuple*100\n        i+=1\n    return percent_of_tuple\ndef remove_duplicates_from_list(test_list):\n    '''\n    Write a function that removes duplicate elements from a list.\n    '''\n    i=0\n    while i<len(test_list):\n        if test_list[i]==test_list[i]:\n            test_list.remove(test_list[i])\n        i+=1\n    return test_list\ndef is_palindrome(test_list):\n    '''\n    Write a function that checks if a given list is a palindrome.\n    '''\n    i=0\n    while i<len(test_list):\n        if test_list[i]!=test_list[len(test_list)-1-i]:\n            return False\n        i+=1\n    return True\ndef is_power_of_two(num):\n    '''\n    Write a function that checks if a given number is a power of two.\n    '''\n    i=1\n    while i<=num:\n        if num%i==0:\n            return False\n        i+=1\n    return True\ndef convert_to_binary(num):\n    '''\n    Write a function that converts a number into a binary format.\n    '''\n    if num==0:\n        return '0'\n    if num==1:\n        return '1'\n    res=''\n    while num>0:\n        res=str(num%2)+res\n        num=num//2\n    return res\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum = cummulative_sum + test_list[i]\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    i = 0\n    cum_sum = 0\n    while i < len(test_list):\n        cum_sum = cum_sum + test_list[i]\n        i = i + 1\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for element in test_list:\n        cummulative_sum += element\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda tup: sum(tup), nums))\n    "
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # YOUR CODE HERE\n    return list(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # my_list = []\n    # for i in nums:\n    #     for j in i:\n    #         my_list.append(j)\n    # return my_list\n    return [sum(i) / len(i) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        total = 0\n        for x in num:\n            total += x\n        avg = total / len(num)\n        avg_list.append(avg)\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(tuple) / len(tuple) for tuple in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = []\n    for tuple in nums:\n        sum.append(sum(tuple))\n    average = []\n    for item in sum:\n        average.append(item/len(nums))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [tuple(sum(nums[i:i+3])/3 for i in range(len(nums)-2)) for i in range(0,len(nums),3)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for nums_tuple in nums:\n        nums_sum = 0\n        for num in nums_tuple:\n            nums_sum += num\n        result.append(nums_sum/len(nums_tuple))\n    return result\n    \ndef write_list_to_file(list_to_write, file_name):\n    '''\n    Write the given list to a file in a.txt format.\n    '''\n    with open(file_name, 'w') as f:\n        for item in list_to_write:\n            f.write('{} {} {}\\n'.format(item[0], item[1], item[2]))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    if len(nums) == 0:\n        raise ValueError('tuple must not be empty')\n    \n    avg = []\n    \n    for num in nums:\n        if type(num)!= tuple:\n            raise TypeError('tuple must contain tuples')\n        \n        if len(num)!= 2:\n            raise ValueError('tuple must contain 2 tuples')\n        \n        first_num, second_num = num\n        \n        if type(first_num)!= int:\n            raise TypeError('first_num must be an integer')\n        \n        if type(second_num)!= int:\n            raise TypeError('second_num must be an integer')\n        \n        avg.append((first_num + second_num) / 2)\n    \n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for tup in nums:\n        num_list.append(tuple(tup))\n    return num_list\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # your code goes here\n    modulo = []\n    for i in range(len(test_tup1)):\n        modulo.append((test_tup1[i]%test_tup2[i]) if test_tup1[i]%test_tup2[i] else 0)\n    return tuple(modulo)\n    \ntest_tup1 = (20,25)\ntest_tup2 = (25,20)\ntest_tup3 = (20,20)\nprint(tuple_modulo(test_tup1, test_tup2))\nprint(tuple_modulo(test_tup2, test_tup3))\nprint(tuple_modulo(test_tup3, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tuple_modulo = 0\n    for i in test_tup1:\n        tuple_modulo = tuple_modulo * i\n    for i in test_tup2:\n        tuple_modulo = tuple_modulo * i\n    return tuple_modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #your code goes here\n    mod=1\n    for i in range(len(test_tup1)):\n        mod=mod*test_tup1[i]\n    for i in range(len(test_tup2)):\n        mod=mod%test_tup2[i]\n    return mod\ntest_tup1=(2,5,9)\ntest_tup2=(10,4,2)\nprint(tuple_modulo(test_tup1,test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return f\"Error: the lengths of the tuples must be the same.\"\n    \n    tup_mod = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            tup_mod.append(test_tup1[i])\n        else:\n            tup_mod.append(0)\n    \n    return tup_mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # It works as a tuple of tuples but more efficient to access the first element.\n    # The element that gets lost is the last element, we are just changing that element.\n    mod_tup = test_tup1 + test_tup2\n    return mod_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            result_list.append(0)\n        else:\n            result_list.append(1)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"The tuples are not of the same size\")\n    for element in test_tup2:\n        test_tup2[test_tup2.index(element)] %= element\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = (test_tup1[0] % test_tup1[1], test_tup2[0] % test_tup2[1])\n    return new_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize minJumps variable as 0\n    minJumps = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0:\n        return 0\n    elif d == 0:\n        return 1\n    elif d == 1:\n        return steps\n    elif d > 1:\n        return max(steps - min_Jumps(steps, steps // 2), steps // 2)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #creating a list of the steps with all steps <= d\n    steps = sorted(steps, reverse = True)\n    steps = list(reversed(steps))\n    length = len(steps)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    x_step = np.arange(d[0]-1, d[0], d[0]/steps)\n    y_step = np.arange(d[1]-1, d[1], d[1]/steps)\n    \n    # Step 1: Find the value of minimum in x and y direction\n    # Swap the z values with the values of values of y and x directions\n    min_x = np.min(x_step)\n    min_y = np.min(y_step)\n    \n    max_x = np.max(x_step)\n    max_y = np.max(y_step)\n    \n    # Step 2: Get the x and y values of indexes\n    # Get the indexes of points of the triangle where the sum of the x and y values is greater than the maximum value\n    # The indices of those points are stored in the array 'index'\n    index = np.where((x_step > max_x) & (y_step > max_y))[0]\n    \n    # Step 3: Check that the number of jumps is at least as defined by'steps'\n    # If it is, return -1 because it is impossible to reach point of form (d, 0)\n    return -1 if (len(index) < steps) else index\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    steps_list = []\n    jumps = 0\n    num_jumps = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return steps * d\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    x_min = d[0][0]\n    x_max = d[0][-1]\n    y_min = d[-1][0]\n    y_max = d[-1][-1]\n    # Get the number of rows and columns and row and column\n    num_rows = y_max - y_min + 1\n    num_cols = x_max - x_min + 1\n    \n    # Fill rows with new values\n    for y in range(y_min, y_max):\n        if y < y_min:\n            continue\n        row = []\n        for x in range(x_min, x_max):\n            if x < x_min:\n                continue\n            if y - x == d[y][x]:\n                row.append(1)\n            else:\n                row.append(0)\n        if row == [0]:\n            continue\n        jumps += row.count(1)\n    \n    # Fill columns with new values\n    for x in range(x_min, x_max):\n        if x < x_min:\n            continue\n        col = []\n        for y in range(y_min, y_max):\n            if y < y_min:\n                continue\n            if x - y == d[y][x]:\n                col.append(1)\n            else:\n                col.append(0)\n        if col == [0]:\n            continue\n        jumps += col.count(1)\n    \n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Write your code here\n    min_J = 0\n    for i in range(steps):\n        if (d, 0) in steps[i] or i == len(steps) - 1:\n            if (d, 0) in steps[i]:\n                min_J += 1\n    return min_J\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    #Jumps on the horizontal direction are 0 steps\n    #Jumps on the vertical direction are increasing direction in the plane\n    #If we can reach the point of origin, we have reached the point of origin.\n    #Else we have to jump 1 step in the direction we are moving.\n    #Check if the number of jumps is the desired one, in case we have reached the origin.\n    \n    #Heuristics:\n    #Use the counter to check if the number of jumps is the desired one\n    #If we reach the origin, the number of jumps is the desired one\n    #If the number of jumps is not the desired one, then we need to check if the number of jumps is larger than 1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def check(steps, d, parent): \n        # base case \n        if steps == d: \n            return True \n        \n        # check all possible jumps from current point \n        for i in range(parent, steps + 1): \n            if visited[i]: \n                return False\n        \n        # check all possible jumps from current point \n        for i in range(steps, d + 1): \n            visited[i] = True\n            if checked[i]: \n                return False \n        \n        # check all possible jumps from current point \n        for i in range(steps, d + 1): \n            visited[i] = True\n            if checked[i]: \n                return False \n        \n        return True \n    \n    # initialize visited array \n    visited = [False for i in range(steps + 1)] \n    checked = [False for i in range(steps + 1)] \n    \n    # check the number of jumps \n    for i in range(1, steps + 1): \n        if not visited[i]: \n            if check(i, 0, 1): \n                return i \n    \n    return -1 \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [item for item in nums1 if item in nums2]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(len(nums1)):\n        l1.append(nums1[i])\n    for i in range(len(nums2)):\n        l2.append(nums2[i])\n    return l1,l2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    newlist = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                newlist.append(nums1[i])\n            else:\n                newlist.append(\"-\")\n        newlist.append(nums1[i])\n    print(newlist)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print(nums1)\n    print(nums2)\n    return (nums1[0]/nums2[0])\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        if nums1[i] > nums2[i]:\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n            nums1[i] %= nums1[i]\n    return nums1\n    \ndef set_zeros(nums):\n    '''\n    Write a function to remove the zeros from an array.\n    '''\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums.remove(0)\n    return nums\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num1=0\n    num2=0\n    for x in nums1:\n        num1+=x\n    for x in nums2:\n        num2+=x\n    return num1/num2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num_1 = nums1.split(\",\")\n    num_2 = nums2.split(\",\")\n    return num_1,num_2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l = []\n    for i in range(0,len(nums1)):\n        l.append(nums1[i]/nums2[i])\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    if len(nums1)!=len(nums2):\n        print('Lists must have the same size')\n    else:\n        for i in range(len(nums1)):\n            if nums1[i]==nums2[i]:\n                nums1[i] = 0\n                nums2[i] = 0\n            else:\n                print('List has no data')\n                break\n        \n    for i in range(len(nums1)):\n        if nums1[i]==0:\n            nums1[i]=nums2[i]\n        else:\n            print('List has data')\n            break\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n    new_str += ''.join([i for i in new_str if not i.isdigit()])\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Write your code here.\n    lst = []\n    for i in range(0, len(test_str)):\n        lst.append(test_str[i])\n    return str.join(',', lst)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # return''.join(map(str, [int(i) for i in test_str.split()]))\n    return''.join([i for i in test_str.split()])\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = str(test_str)\n    i = 0\n    while(i < len(test_str)):\n        if(test_str[i].isdigit()):\n            if(test_str[i+1].isdigit()):\n                test_str = test_str[:i] + str(int(test_str[i+1:]) + 1) + test_str[i+1:]\n            else:\n                test_str = test_str[:i] + test_str[i+1:]\n        i+=1\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for i in test_str:\n        if i.isdigit():\n            result += i\n        else:\n            result += str(int(i) + 1)\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in test_str:\n        if i.isdigit():\n            test_str = test_str[:test_str.index(i)+1] + i + test_str[test_str.index(i)+2:]\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            pass\n        elif test_str[i] == ',':\n            test_str = test_str[:i] + '0' + test_str[i+1:]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n    num_str = num_str[::-1]\n    return num_str\n    "
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(' ','')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    list_str = test_str.split(\" \")\n    list_str.sort()\n    list_str = \"\".join(list_str)\n    list_str = list_str.split(\" \")\n    list_str.sort()\n    test_str = \" \".join(list_str)\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # convert the list into a set\n    subsets = set(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a counter to count the number of each element\n    count = [0 for _ in range(len(a))]\n    # increment the count each time the number of elements is added to the counter\n    for i in range(len(a)):\n        count[i] = count[i] + 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Edge cases\n    if len(a) == 1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset_count = 0\n    max_count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if a[i] % a[j] == 0 and a[j] % a[k] == 0 and a[i] // a[j] == a[k] // a[i]:\n                    if a[i] > max_count:\n                        max_count = a[i]\n                        subset_count = 1\n                    elif a[i] == max_count and subset_count > 1:\n                        max_count = a[i]\n                        subset_count = 1\n                    elif a[i] > max_count and subset_count == 1:\n                        max_count = a[i]\n                        subset_count = 1\n    return max_count\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Find a subset of a and find their length\n    size = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if sum(a[i:j]) % a[i] == 0:\n                size = max(size, j-i+1)\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return _largest_subset_helper(a, a[0], {})\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    b = 1\n    for i in range(len(a)-1):\n        if a[i] % a[i+1]!= 0:\n            b += 1\n    return b\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # convert list into set to eliminate duplicates and sort out indices\n    sorted_set = set(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create an empty dictionary\n    # Result is a dictionary that contains a, b, c,...\n    # If a, b, c,... is a subset of b, c, d,..., then create it with a, b, d\n    a = list(a)\n    dict = {}\n    # Iterate through a\n    for i in a:\n        # If it doesn't exist in dictionary\n        if i not in dict:\n            # Create a new dictionary with element as key\n            dict[i] = 1\n        # Increment count for each key\n        else:\n            dict[i] += 1\n    # Iterate through all possible combinations of keys\n    for i in dict:\n        # If it's not a subset of the keys, then get the largest subset\n        if dict[i] % 2 == 1:\n            # Return the largest subset\n            return largest_subset(dict)\n    # Else return the largest subset of keys\n    return max(dict.values())\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    def find_median(arr):\n        if len(arr) % 2 == 0:\n            if len(arr) % 2 == 1:\n                return (sum(arr)/len(arr))\n            else:\n                return (sum(arr[int(len(arr)/2)])/len(arr))\n        else:\n            return (sum(arr[int(len(arr)/2)])/len(arr))\n    \n    if len(arr1) < len(arr2):\n        return find_median(arr2)\n    elif len(arr1) > len(arr2):\n        return find_median(arr1)\n    else:\n        median = (arr1[int(len(arr1)/2)] + arr2[int(len(arr2)/2)])/2\n        return find_median([median, median])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    # find the middle point of the array\n    mid = int(len(arr1) / 2)\n    # return the median value of both the array\n    return (arr1[mid] + arr2[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) == 0:\n        arr1 = arr2\n    if len(arr2) == 0:\n        arr2 = arr1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if n % 2 == 1:\n        return (arr1[int(n/2) - 1] + arr2[int(n/2)]) / 2\n    else:\n        return (arr1[int(n/2)] + arr2[int(n/2)]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 1:\n        return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # To find the median of list1 and list2\n    arr1_length = len(arr1)\n    arr2_length = len(arr2)\n    if arr1_length == 0:\n        return arr2[0]\n    if arr2_length == 0:\n        return arr1[0]\n    if arr1_length > arr2_length:\n        arr1, arr2 = arr2, arr1\n        arr1_length, arr2_length = arr2_length, arr1_length\n    \n    # To find the middle element of two lists\n    mid = (arr1_length + arr2_length) // 2\n    \n    # To find the median of left and right half\n    left = arr1[:mid]\n    right = arr2[:mid]\n    \n    # To check if the middle element is same\n    if len(left) > 0 and len(right) > 0:\n        return (left[0] + right[0]) / 2\n    \n    # If not the case\n    return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 2:\n        raise Exception('Median is not defined for lists of size '+str(n))\n    # set first and second lists to empty lists\n    first = [0] * n\n    second = [0] * n\n    # loop through the arrays\n    for i in range(n):\n        first[i] = arr1[i]\n        second[i] = arr2[i]\n    # find the median\n    mid = n//2\n    if n % 2 == 0:\n        median = (first[mid] + second[mid])/2\n    else:\n        median = first[mid]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 2:\n        return arr1[n // 2]\n    if n % 2 == 0:\n        return (arr1[n // 2 - 1] + arr1[n // 2]) / 2\n    else:\n        return arr1[n // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 0:\n        raise ValueError('Invalid size of the arrays')\n    if n == 1:\n        return arr1[0]\n    mid = int(n / 2)\n    if mid > n - mid:\n        return get_median(arr1, arr2, n)\n    else:\n        return (arr1[mid] + arr2[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    mid = int(n / 2)\n    median = get_median(arr1[:mid], arr2[:mid], n - mid)\n    if n % 2 == 1:\n        return median\n    return get_median(arr1[mid:], arr2[mid:], n - mid - 1)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for i in nums:\n        power = power * i\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for i in range(n):\n        power = power*nums[i]\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for i in range(len(nums)):\n        power = power * nums[i] ** n\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def _nth_power(n):\n        r = 1\n        for i in range(0,n):\n            r = r*n\n        return r\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    n = len(nums)\n    \n    def cal_power(i):\n        if n < i:\n            return 0\n        if n == 1:\n            return nums[i]\n        return nums[i] ** cal_power(i - 1)\n    \n    return cal_power(n - 1)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1 or n==2:\n        return [1]\n    if n==3:\n        return [2, 3]\n    if n==4:\n        return [4, 5, 6]\n    for i in range(n-1):\n        new_nums = nums[i+1:]+nums[:i]+[nums[0]]\n        return [pow(a,n) for a in new_nums]"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for i in nums:\n        power *= i\n    return powe"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n < 0: raise ValueError\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def func(n, n2):\n        if n < 0:\n            return \"ERROR\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return n\n        return n * func(n - 1, n2)\n    return func(n,n2)\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n    \nprint(is_upper('Do you like python?'))\nprint(is_upper('are you learning python?'))\nprint(is_upper('I like python?'))\nprint(is_upper('Here is a very long string.\\n\\n') == True)\nprint(is_upper('A' * 100))\nprint(is_upper('a' * 1000))\nprint(is_upper('A' * 10000)"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Create a function to check if the given string is uppercase.\n    # Return the function.\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase_list = []\n    for character in string:\n        if character.isupper():\n            uppercase_list.append(character.upper())\n        else:\n            uppercase_list.append(character)\n    return uppercase_list\n    \ndef is_number(string):\n    '''\n    Write a python function to check if a string is a number.\n    '''\n    return any(char.isdigit() for char in string)\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(newList)\n    a = len(newList)\n    b = a - 1\n    for i in range(0,a):\n        newList[i], newList[b] = newList[b], newList[i]\n    print(newList)\n    return newList\n    \ndef merge_Lists(List1, List2):\n    '''\n    Write a python function to merge two lists.\n    '''\n    print(List1)\n    print(List2)\n    if len(List1) < len(List2):\n        a = List1\n        b = List2\n        a.extend(b)\n    elif len(List2) < len(List1):\n        a = List2\n        b = List1\n        a.extend(b)\n    else:\n        a = List1\n        b = List2\n    return a\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    if len(newList) > 1:\n        return newList[0:len(newList)//2] + newList[len(newList)//2:]\n    else:\n        return newList\n    \n    \n    # YOUR CODE HERE\n    \n    #raise NotImplementedError\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n    \n    \n    "
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return [newList[1], newList[0]]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(0, len(newList)):\n        newList[i], newList[len(newList)-1] = newList[len(newList)-1], newList[i]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    print(newList)\n    \nnewList = [5, 3, 2, 1]\nswap_List(newList)"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * pi * r**2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a=[]\n    for i in range(1,r+1) :\n        a.append(i*i)\n    return max(a)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #input\n    r = float(input(\"enter radius of triangle\"))\n    print(\"triangle area is\", triangle_area(r))\n    \n    #process\n    def triangle_area(r):\n        if r < 0 or r > 1:\n            print(\"radius not within the range of 0 to 1\")\n            return\n        return (1/2)*(r**2)\n    \n    print(f\"triangle area is {triangle_area(r)}\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r>0:\n        return (r**2)*(3/2)\n    else:\n        return -1\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(0, r, 1):\n        for j in range(0, r, 1):\n            area += abs(i*j)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2) * math.pi\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #     if r<=0:\n    #         return False\n    #     else:\n    #         if r==0:\n    #             return 0.5 * 3.14 * r\n    #         else:\n    #             if r<0.5*3.14:\n    #                 print(\"Are you sure you are in the right function?\\n\")\n    #                 print(\"Press 'Y' for Yes and 'N' for No.\")\n    #                 answer = input()\n    #                 if answer == \"Y\":\n    #                     return triangle_area(r-0.5)\n    #                     return (r-0.5) * 3.14 * r\n    #                 elif answer == \"N\":\n    #                     return 0.5 * 3.14 * r\n    #                 else:\n    #                     return \"Unknown\"\n    #             else:\n    #                 print(\"Are you sure you are in the right function?\\n\")\n    #                 print(\"Press 'Y' for Yes and 'N' for No.\")\n    #                 answer = input()\n    #                 if answer == \"Y\":\n    #                     return triangle_area(r+0.5)\n    #                     return (r+0.5) * 3.14 * r\n    #                 elif answer == \"N\":\n    #                     return 0.5 * 3.14 * r\n    #                 else:\n    #                     return \"Unknown\"\n    #     return False\n    \n    def triangle_area(r) :  \n        #     if r<=0:\n        #         return False\n        #     else:\n        #         if r==0:\n        #             return 0.5 * 3.14 * r\n        #         else:\n        #             if r<0.5*3.14:\n        #                 print(\"Are you sure you are in the right function?\\n\")\n        #                 print(\"Press 'Y' for Yes and 'N' for No.\")\n        #                 answer = input()\n        #                 if answer == \"Y\":\n        #                     return triangle_area(r-0.5)\n        #                     return (r-0.5) * 3.14 * r\n        #                 elif answer == \"N\":\n        #                     return 0.5 * 3.14 * r\n        #                 else:\n        #                     return \"Unknown\"\n        #             else:\n        #                 print(\"Are you sure you are in the right function?\\n\")\n        #                 print(\"Press 'Y' for Yes and 'N' for No.\")\n        #                 answer = input()\n        #                 if answer == \"Y\":\n        #                     return triangle_area(r+0.5)\n        #                     return (r+0.5) * 3.14 * r\n        #                 elif answer == \"N\":\n        #                     return 0.5 * 3.14 * r\n        #                 else:\n        #                     return \"Unknown\"\n        #         return False\n        \n        # r=float(input(\"Enter the radius of your triangle: \"))\n        # if r<=0:\n        #     return False\n        # elif r<0.5:\n        #     print(\"Are you sure you are in the right function?\\n\")\n        #     print(\"Press 'Y' for Yes and 'N' for No.\")\n        #     answer = input()\n        #     if answer == \"Y\":\n        #         return triangle_area(r-0.5)\n        #         return (r-0.5) * 3.14 * r\n        #     elif answer == \"N\":\n        #         return 0.5 * 3.14 * r\n        #     else:\n        #         return \"Unknown\"\n        # else:\n        #     print(\"Are you sure you are in the right function?\\n\")\n        #     print(\"Press 'Y' for Yes and 'N' for No.\")\n        #     answer = input()\n        #     if answer == \"Y\":\n        #         return triangle_area(r+0.5)\n        #         return (r+0.5) * 3.14 * r\n        #     elif answer == \"N\":\n        #         return 0.5 * 3.14 * r\n        #     else:\n        #         return \"Unknown\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = ((3.14)*r**2)*sin(r)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r * 3.14)**2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math \n    def area(r):\n        if r == 0:\n            return 0\n        elif r < 0:\n            return math.inf\n        else:\n            return (r**2 * math.pi) / 2\n    return area(r)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    \n    if start==end:\n        return None\n    \n    if start==0:\n        return end\n    \n    mid=start\n    small=end\n    \n    for i in range(start,end):\n        if array[i]>array[mid]:\n            small=i\n    \n    if array[small]==array[start]:\n        return find_First_Missing(array,start,small-1)\n    else:\n        return find_First_Missing(array,small+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start == end:\n        return None\n    \n    mid = (start+end)//2\n    if array[mid]!= mid+1:\n        return find_First_Missing(array,start,mid)\n    else:\n        if array[mid] == array[mid-1] and array[mid] == array[mid+1]:\n            return array[mid]\n        elif array[mid] == array[mid-1]:\n            return array[mid] + 1\n        elif array[mid] == array[mid+1]:\n            return array[mid] -1\n        else:\n            return array[mid]\n        \n        \narray = [5, 2, 3, 4, 6]\nprint(find_First_Missing(array))\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start >= end:\n        return array[start]\n    if array[start] == array[end]:\n        return array[start]\n    pivot = array[start]\n    left = start + 1\n    right = end\n    \n    while(left < right):\n        while(array[left] < pivot and left < right):\n            left+=1\n        while(array[right] > pivot and left<right):\n            right-=1\n        if array[left] == array[right]:\n            return array[left]\n        if array[left] > array[right]:\n            array[right],array[left] = array[left],array[right]\n    array[right],array[start] = array[start],array[right]\n    return find_First_Missing(array,start=start+1,end=end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # base case\n    if end == None:\n        end = len(array)\n    if end < start:\n        return -1\n    # base case\n    if end == start:\n        return start\n    # simple case\n    if array[start] <= array[end]:\n        return end\n    # find the first missing number\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array,start=mid+1,end=end)\n    else:\n        return find_First_Missing(array,start=start,mid=mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    #print(array)\n    if start >= end:\n        return 0\n    #print(start)\n    mid = (start + end) // 2\n    #print(mid)\n    #print(array)\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    l = []\n    for i in range(start,end):\n        if array[i] not in l:\n            l.append(array[i])\n    return min(l)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start >= end:\n        return start\n    m = (start+end)//2\n    print(\"m = \",m)\n    if array[m] == end:\n        return find_First_Missing(array,start,m-1)\n    elif array[m] < array[end]:\n        return find_First_Missing(array,m+1,end)\n    else:\n        return find_First_Missing(array,start,m)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    min = array[start]\n    \n    for i in range(start,end):\n        if array[i] < min:\n            min = array[i]\n            \n    return min\n    \n    \nif __name__==\"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU WIN!!\\n\""
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    if end == start:\n        return start\n    \n    mid = (start + end)//2\n    \n    if array[mid] == mid:\n        return find_First_Missing(array,mid + 1,end)\n    \n    if array[mid] < mid:\n        return find_First_Missing(array,mid + 1,end)\n    \n    if array[mid] > mid:\n        return find_First_Missing(array,start,mid - 1)\n    \n    return find_First_Missing(array,start,mid - 1)\n    \nprint(find_First_Missing([4,2,5,1,6,9,8,10,2,3,7,5,6,8,9,10,4,5,6,7]))\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>=end:\n        return -1\n    middle=int((start+end)/2)\n    if array[middle]<=middle:\n        return find_First_Missing(array,start=middle+1,end=end)\n    else:\n        return find_First_Missing(array,start=start,end=middle-1)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # find all alphabets\n    alphabets = []\n    for char in string:\n        if char.isalpha():\n            alphabets.append(char)\n    # create the new string\n    new_string = \"\"\n    for char in alphabets:\n        new_string = new_string + char + \"%20\"\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20'"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join([x.replace(' ', '%20') if x.isalnum() else x for x in string]"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string_with_spaces = string\n    for char in string:\n        if char == \" \":\n            string_with_spaces = string_with_spaces.replace(\" \",\"%20\")\n        else:\n            string_with_spaces = string_with_spaces.replace(char,\"%20\")\n    return string_with_spaces\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    output = ''\n    for ch in string:\n        if ch =='':\n            output += '%20'\n        else:\n            output += ch\n    return output\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if len(string) < 2:\n        return string\n    else:\n        string = string.replace(' ','%20')\n        return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in range(len(string)):\n        string[i] = string[i].replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string=string.replace(' ','%20')\n    string=string.replace('\\t','%20')\n    string=string.replace('\\n','%20')\n    string=string.replace('\\r','%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \",\"%20\")\n    return string\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # create empty array to store even numbers\n    even = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Variables\n    even_number = []\n    odd_number = []\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(0, len(list)): \n        if list[i] % 2 == 0: \n            even.append(list[i]) \n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for value in list: \n        if value % 2 == 0: \n            even_list.append(value) \n    print(\"Even numbers are : \" + str(even_list)) \n    return even_list \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list=[]\n    for number in list:\n        if number%2==0:\n            even_list.append(number)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for item in list: \n        if item % 2 == 0: \n            even_list.append(item)\n        else: \n            odd_list.append(item)\n    return even_list, odd_list\n    \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if (i % 2) == 0:\n            even_numbers.append(i)\n    print(even_numbers)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for item in list:\n        if item%2==0:\n            even.append(item)\n        else:\n            odd.append(item)\n    return even,odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub: \n        sub.append(ele) \n    adjac = [] \n    adjac.append((ele[0] - 1, ele[1])) \n    adjac.append((ele[0] + 1, ele[1])) \n    adjac.append((ele[0], ele[1] - 1)) \n    adjac.append((ele[0], ele[1] + 1)) \n    return adjac\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n    \ndef read_matrix(filename): \n    '''\n    Read a matrix from a file as a n by n matrix. \n    '''\n    matrix = []\n    f = open(filename, 'r')\n    for line in f:\n        matrix.append([int(x) for x in line.split()])\n    return matrix\n    \ndef print_matrix(matrix):\n    '''\n    Print the matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            print(matrix[i][j], end ='')\n        print()\n    print()\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    a = ele[1]\n    b = ele[0]\n    return([a, b, a+1, b+1, a*2+1, b*2+1, a+1+1, b+1+1, a+1+1+1, b+1+1+1, a+1+1+1+1, b+1+1+1+1+1, a+1+1+1+1+1+1, b+1+1+1+1+1+1+1+1, a+1+1+1+1+1+1+1+1+1+1+1+1+1+1, b+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1])\n    \n    \n    \ndef adjac_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple.\n    '''\n    if ele[0] == ele[1]:\n        return([(ele[0], ele[1]), ele])\n    else:\n        return([(ele[1], ele[0]), ele])\n    \n    \n    \ndef adjac_p(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([(ele[1], ele[0])] + sub)\n    \n    \n    \ndef adjac_p_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_p(ele, sub))\n    \n    \n    \ndef adjac_col(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([ele] + sub)\n    \n    \n    \ndef adjac_col_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_col(ele, sub))\n    \n    \n    \ndef adjac_row(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([ele] + sub)\n    \n    \n    \ndef adjac_row_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_row(ele, sub))\n    \n    \n    \ndef adjac_rot(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([(ele[1], ele[0])] + sub)\n    \n    \n    \ndef adjac_rot_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_rot(ele, sub))\n    \n    \n    \ndef adjac_line(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([ele] + sub)\n    \n    \n    \ndef adjac_line_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_line(ele, sub))\n    \n    \n    \ndef adjac_triangle(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([(ele[1], ele[0])] + sub)\n    \n    \n    \ndef adjac_triangle_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_triangle(ele, sub))\n    \n    \n    \ndef adjac_tetra(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([ele] + sub)\n    \n    \n    \ndef adjac_tetra_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_tetra(ele, sub))\n    \n    \n    \ndef adjac_hepta(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([(ele[1], ele[0])] + sub)\n    \n    \n    \ndef adjac_hepta_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_hepta(ele, sub))\n    \n    \n    \ndef adjac_plane(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([ele] + sub)\n    \n    \n    \ndef adjac_plane_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_plane(ele, sub))\n    \n    \n    \ndef adjac_sphere(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([ele] + sub)\n    \n    \n    \ndef adjac_sphere_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_sphere(ele, sub))\n    \n    \n    \ndef adjac_cuboid(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([ele] + sub)\n    \n    \n    \ndef adjac_cuboid_list(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return(adjac_cuboid(ele, sub))\n    \n    \n    \ndef adjac_sphere_cuboid(ele, sub = []):\n    '''\n    Write a function that returns the list of adjacent coordinate tuples of the given coordinate tuple, \n    where each coordinate tuple corresponds to a vertex.\n    '''\n    return([ele] + sub)\n    \n    \n    \ndef adjac_sphere_cuboid_list(ele, sub = []):\n    '''\n    Write a function that return"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i = ele[0]\n    j = ele[1]\n    if i < 2 and j < 2:\n        return ele\n    if i == 2 and j == 2:\n        return sub\n    sub.append([i-1, j-1])\n    sub.append([i-1, j])\n    sub.append([i, j-1])\n    sub.append([i, j+1])\n    sub.append([i+1, j-1])\n    sub.append([i+1, j])\n    sub.append([i+1, j+1])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele)!= 2:\n        print(\"Coordinates must be tuples of length 2.\")\n        return\n    else:\n        coord = ele[0]\n        for i in range(1, len(sub)):\n            coord = coord[0] + sub[i][0]\n            coord = coord[1] + sub[i][1]\n        return coord\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #adjacent coordinates of the given coordinate tuple\n    a = ele[0] \n    b = ele[1]\n    #dictionary for storing all the coordinate tuples\n    for i in range(2,len(ele)):\n        #if coordinate tuple is already in dictionary\n        if ele[i] in sub:\n            #print('cant go there')\n            return -1\n        else:\n            sub.append(ele[i])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n    \ndef find(a, b):\n    '''\n    Given two coordinates return their index of their coordinates.\n    '''\n    if a == b: \n        return a\n    else: \n        return find(a[1], b[1])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        return ele\n    else:\n        if ele[0]!= ele[1] and ele[1]!= ele[2] and ele[0]!= ele[2]:\n            sub.append((ele[0], ele[1], ele[2]))\n            return adjac(ele[1], sub)\n        else:\n            return adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [tuple(reversed(ele))]\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n',' ').replace('\\t',' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return''.join(x.replace(' ', '_') for x in text.split())\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # word = text.lower()\n    # word = word.replace(' ','_')\n    # word = word.replace('-','_')\n    # word = word.replace('.','_')\n    # return word\n    \n    return text.replace(' ','_').replace('-','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_final = \"\"\n    text_final = text.replace(' ', '_')\n    text_final = text_final.replace('.', '_')\n    text_final = text_final.replace('!', '_')\n    text_final = text_final.replace('?', '_')\n    text_final = text_final.replace('$', '_')\n    text_final = text_final.replace('%', '_')\n    text_final = text_final.replace('&', '_')\n    text_final = text_final.replace('-', '_')\n    text_final = text_final.replace('_', '_')\n    return text_final\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char =='':\n            result += '_'\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char.isspace():\n            result += \"_\"\n        else:\n            result += char\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n','')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \"\".join(map(lambda x:x.replace(\" \", \"_\"), text.split()))\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\")\n    text = text.replace(\".\",\"_\")\n    text = text.replace(\"-\",\"_\")\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for x in range(0,len(num_list)):\n        if num_list[x] == 0:\n            num_list.insert(x,0)\n        else:\n            print(\"Index: \" + str(x))\n            print(\"Value: \" + str(num_list[x]))\n            print(\"Index: \" + str(x))\n            print(\"Value: \" + str(num_list[x]))\n            #num_list.pop()\n            #num_list.pop(len(num_list)-1)\n            #print(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # your code here\n    zeroes = []\n    for index, value in enumerate(num_list):\n        if value!= 0:\n            zeroes.append(value)\n    num_list = zeroes\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            num_list.pop(index)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n    # num_list = [0]\n    # num_list = [1, 0]\n    # num_list = [0, 0]\n    # num_list = [0, 1]\n    # num_list = [0, 0, 0]\n    # num_list = [0, 0, 1]\n    # num_list = [0, 0, 0, 0]\n    # num_list = [0, 0, 0, 1, 0, 0]\n    # num_list = [0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(i+1, 0)\n            num_list.pop(i)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    copy_list = num_list.copy()\n    copy_list.append(0)\n    \n    for i in range(len(copy_list)):\n        if copy_list[i] == 0:\n            copy_list[i] = None\n    \n    return copy_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.append(0)\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            del num_list[i]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # write your code here\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # initialize pair dictionary with key = xor, value = pair \n    pair={}\n    \n    # iterate over all elements of the list\n    for x in arr : \n        for y in arr : \n            # check if xor of the two numbers \n            if x^y in pair : \n                # add pair to dictionary\n                pair[x^y].append(arr.index(x))\n                pair[x^y].append(arr.index(y))\n                break\n    \n    # return the sum of the pairs \n    return sum(pair[x^y] for x,y in pair.items())\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    l = []\n    for i in range(n-1):\n        for j in range(i+1,n):\n            l.append(arr[i]^arr[j])\n    sum = 0\n    for i in l:\n        sum+=i\n    return sum\ndef is_prime(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Find the prime factors of a number n.\n    '''\n    if is_prime(n):\n        return [n]\n    if n == 1:\n        return []\n    # Find the factors of 2 smaller numbers\n    p = 2\n    while p * p <= n:\n        if n%p == 0:\n            n //= p\n            factors.append(p)\n        else:\n            p += 1\n    # This only runs if n is a perfect square\n    if n > 1:\n        while n % p == 0:\n            n //= p\n            factors.append(p)\n    return factors\ndef primes_up_to(n):\n    '''\n    Return the numbers up to n.\n    '''\n    p = 2\n    factors = []\n    while p * p <= n:\n        if n % p == 0:\n            n //= p\n            factors.append(p)\n        else:\n            p += 1\n    return factors\ndef binary_search(arr,n,target):\n    '''\n    Use binary search to find the index of target.\n    '''\n    # First check if the given index is valid.\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if target == arr[mid]:\n            return mid\n        if target < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\ndef is_prime_in_range(n,low,high):\n    '''\n    Check whether n is a prime number in the given range.\n    '''\n    if n <= 1:\n        return False\n    if n in primes_up_to(2) or n in primes_up_to(3):\n        return True\n    for i in range(low, high):\n        if is_prime_in_range(n-1,low,i):\n            return True\n    return False\ndef divisible_by(n, low, high):\n    '''\n    Find the number divisible by n in the given range.\n    '''\n    if high <= low:\n        return False\n    if n == 1:\n        return False\n    if n < 1:\n        return False\n    if is_prime_in_range(n, low, high):\n        return True\n    for i in range(low, high):\n        if n % i == 0:\n            return False\n    return True\ndef prime_factors_in_range(n):\n    '''\n    Find the prime factors of a number n in the given range.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if is_prime_in_range(n, 2, n):\n        return [2,3]\n    for i in range(2, n):\n        if n % i == 0:\n            return []\n    return [i] + prime_factors_in_range(n-1)\ndef prime_factors_summation(n):\n    '''\n    Find the prime factors of a number n.\n    '''\n    if n < 1:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2,3]\n    if is_prime_in_range(n, 2, n):\n        return [2,3]\n    for i in range(3, n):\n        if n % i == 0:\n            return []\n    return [i] + prime_factors_summation(n-1)\ndef is_prime_in_range_summation(n,low,high):\n    '''\n    Check whether n is a prime number in the given range.\n    '''\n    if high <= low:\n        return False\n    if n == 1:\n        return False\n    if n < 1:\n        return False\n    if is_prime_in_range(n, low, high):\n        return True\n    for i in range(low, high):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_in_range_summation2(n):\n    '''\n    Find the prime factors of a number n.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return [2]\n    if is_prime_in_range(n, 2, n):\n        return [2,3]\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_in_range_summation3(n):\n    '''\n    Find the prime factors of a number n.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return [2,3]\n    if is_prime_in_range(n, 2, n):\n        return [2,3]\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\ndef even_number_in_range(n):\n    '''\n    Find the even numbers in the given range.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return [2]\n    if is_prime_in_range(n, 2, n):\n        return [2,3]\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\ndef prime_factors_for_the_given_range(n):\n    '''\n    Find the prime factors of a number n in the given range.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if is_prime_in_range(n, 2, n):\n        return [2,3]\n    for i in range(3, n):\n        if n % i == 0:\n            return []\n    return [i] + prime_factors_for_the_given_range(n-1)\ndef odd_number_in_range(n):\n    '''\n    Find the odd numbers in the given range.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if is_prime_in_range(n, 2, n):\n        return [2,3]\n    for i in range(3, n):\n        if n % i == 0:\n            return []\n    return [i] + odd_number_in_range(n-1)\ndef is_prime_in_range_for_the_given_range(n,low,high):\n    '''\n    Check whether n is a prime number in the given range.\n    '''\n    if high <= low:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    if is_prime_in_range(n, low, high):\n        return True\n    for i in range(low, high):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_in_range_for_the_given_range(n,low,high):\n    '''\n    Check whether n is a prime number in the given range.\n    '''\n    if high <= low:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    if is_prime_in_range(n, low, high):\n        return True\n    for i in range(low, high):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_in_range_for_the_given_rang"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x=0\n    y=0\n    for i in range(0,n,2) : \n        x+=arr[i]\n    for j in range(1,n,2) : \n        y+=arr[j]\n    return x+y\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in arr :\n        x ^= i\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # dictionary of the values\n    d = {0 : [0,1,2,3], 1: [1,2,3,0], 2: [0,1,3,2], 3: [1,2,3,0], 4: [0,1,2,3], 5: [1,2,3,0], 6: [0,1,2,3], 7: [1,2,3,0], 8: [0,1,2,3], 9: [1,2,3,0], 10: [0,1,2,3], 11: [1,2,3,0], 12: [0,1,2,3], 13: [1,2,3,0], 14: [0,1,2,3], 15: [1,2,3,0], 16: [0,1,2,3], 17: [1,2,3,0], 18: [0,1,2,3], 19: [1,2,3,0], 20: [0,1,2,3], 21: [1,2,3,0], 22: [0,1,2,3], 23: [1,2,3,0], 24: [0,1,2,3], 25: [1,2,3,0], 26: [0,1,2,3], 27: [1,2,3,0], 28: [0,1,2,3], 29: [1,2,3,0], 30: [0,1,2,3], 31: [1,2,3,0], 32: [0,1,2,3], 33: [1,2,3,0], 34: [0,1,2,3], 35: [1,2,3,0], 36: [0,1,2,3], 37: [1,2,3,0], 38: [0,1,2,3], 39: [1,2,3,0], 40: [0,1,2,3], 41: [1,2,3,0], 42: [0,1,2,3], 43: [1,2,3,0], 44: [0,1,2,3], 45: [1,2,3,0], 46: [0,1,2,3], 47: [1,2,3,0], 48: [0,1,2,3], 49: [1,2,3,0], 50: [0,1,2,3], 51: [1,2,3,0], 52: [0,1,2,3], 53: [1,2,3,0], 54: [0,1,2,3], 55: [1,2,3,0], 56: [0,1,2,3], 57: [1,2,3,0], 58: [0,1,2,3], 59: [1,2,3,0], 60: [0,1,2,3], 61: [1,2,3,0], 62: [0,1,2,3], 63: [1,2,3,0], 64: [0,1,2,3], 65: [1,2,3,0], 66: [0,1,2,3], 67: [1,2,3,0], 68: [0,1,2,3], 69: [1,2,3,0], 70: [0,1,2,3], 71: [1,2,3,0], 72: [0,1,2,3], 73: [1,2,3,0], 74: [0,1,2,3], 75: [1,2,3,0], 76: [0,1,2,3], 77: [1,2,3,0], 78: [0,1,2,3], 79: [1,2,3,0], 80: [0,1,2,3], 81: [1,2,3,0], 82: [0,1,2,3], 83: [1,2,3,0], 84: [0,1,2,3], 85: [1,2,3,0], 86: [0,1,2,3], 87: [1,2,3,0], 88: [0,1,2,3], 89: [1,2,3,0], 90: [0,1,2,3], 91: [1,2,3,0], 92: [0,1,2,3], 93: [1,2,3,0], 94: [0,1,2,3], 95: [1,2,3,0], 96: [0,1,2,3], 97: [1,2,3,0], 98: [0,1,2,3], 99: [1,2,3,0], 100: [0,1,2,3], 101: [1,2,3,0], 102: [0,1,2,3], 103: [1,2,3,0], 104: [0,1,2,3], 105: [1,2,3,0], 106: [0,1,2,3], 107: [1,2,3,0], 108: [0,1,2,3], 109: [1,2,3,0], 110: [0,1,2,3], 111: [1,2,3,0], 112: [0,1,2,3], 113: [1,2,3,0], 114: [0,1,2,3], 115: [1,2,3,0], 116: [0,1,2,3], 117: [1,2,3,0], 118: [0,1,2,3], 119: [1,2,3,0], 120: [0,1,2,3], 121: [1,2,3,0], 122: [0,1,2,3], 123: [1,2,3,0], 124: [0,1,2,3], 125: [1,2,3,0], 126: [0,1,2,3], 127: [1,2,3,0], 128: [0,1,2,3], 129: [1,2,3,0], 130: [0,1,2,3], 131: [1,2,3,0], 132: [0,1,2,3], 133: [1,2,3,0], 134: [0,1,2,3], 135: [1,2,3,0], 136: [0,1,2,3], 137: [1,2,3,0], 138: [0,1,2,3], 139: [1,2,3,0], 140: [0,1,2,3], 141: [1,2,3,0], 142: [0,1,2,3], 143: [1,2,3,0], 144: [0,1,2,3], 145: [1,2,3,0], 146: [0,1,2,3], 147: [1,2,3,0], 148: [0,1,2,3], 149: [1,2,3,0], 150: [0,1,2,3], 151: [1,2,3,0], 152: [0,1,2,3], 153: [1,2,3,0], 154: [0,1,2,3], 155: [1,2,3,0], 156: [0,1,2,3], 157: [1,2,3,0], 158: [0,1,2,3], 159: [1,2,3,0], 160: [0,1,2,3], 161: [1,2,3,0], 162: [0,1,2,3], 163: [1,2,3,0], 164: [0,1,2,3], 165: [1,2,3,0], 166: [0,1,2,3], 167: [1,2,3,0], 168: [0,1,2,3], 169: [1,2,3,0], 170: [0,1,2,3], 171: [1,2,3,0], 172: [0,1,2,3], 173: [1,2,3,0], 174: [0,1,2,3], 175: [1,2,3,0], 176: [0,1,2,3], 177: [1,2,3,0], 178: [0,1,2,3], 179: [1,2,3,0], 180: [0,1,2,3]"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    \n    for i in range(0,n):\n        xor = xor ^ arr[i]\n        \n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum += arr[i] \n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total=0\n    for i in range(n-1) : \n        for j in range(i+1,n) :\n            total+=arr[i]^arr[j]\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(0,n-1) : \n        for j in range(i+1, n) : \n            if arr[i] & arr[j] == 0 : \n                xor = xor ^ arr[i] \n    return xor \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    print(sum(map(lambda x : sum(list(map(lambda y : int(x) ^ y, x))),arr)))\n    \npair_xor_Sum([0, 1],2)\npair_xor_Sum([0, 1, 2],2)\npair_xor_Sum([0, 0, 0, 0],0)\npair_xor_Sum([0, 0, 0, 0],3)\npair_xor_Sum([0, 0, 0, 0],4)\npair_xor_Sum([0, 0, 0, 0],5)\npair_xor_Sum([0, 0, 0, 0],6)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) < 1:\n        return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # We use a min heap to keep the in-order children sorted\n    # in the heap.\n    heap = []\n    # We are creating a list of (value, index) pairs for each\n    # the list element.\n    for index, value in enumerate(iterable):\n        heapq.heappush(heap, (value, index))\n    # We now loop over the list and put all of its values in a\n    # min heap.\n    for i in range(len(heap) - 1, 0, -1):\n        heapq.heapify(heap)\n        heapq.heappop(heap)\n    # Now that we have the min heap, we should return it\n    # as a sorted list.\n    return [element[1] for element in heap]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        hq.heappushpop(iterable, iterable.pop(0))\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq\n    for item in iterable:\n        yield item\n        item.sort()\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq\n    for item in iterable:\n        yield item\n        item.sort()\n        heapq.heapify(item)\ndef quick_sort(iterable):\n    '''\n    Sort the given list using the Quick-Sort algorithm.\n    '''\n    def _quick_sort(items, start, end):\n        if start < end:\n            pivot = _partition(items, start, end)\n            _quick_sort(items, start, pivot-1)\n            _quick_sort(items, pivot+1, end)\n    def _partition(items, start, end):\n        pivot = items[end]\n        i = start\n        for j in range(start, end):\n            if items[j] <= pivot:\n                items[j], items[i] = items[i], items[j]\n                i += 1\n        items[i], items[end] = items[end], items[i]\n        return i\n    _quick_sort(items, 0, len(iterable) - 1)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    for j in range(len(h)-1):\n        hq.heapreplace(h, hq.heappop(h) + hq.heappop(h))\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    for i in range(len(h)-1, 0, -1):\n        hq.heapify(h)\n        h[0] = hq.heappop(h)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = len(iterable)\n    for i in range(l-1):\n        hq.heapify(iterable)\n        for _ in range(l-1-i):\n            hq.heappop(iterable)\n            hq.heappush(iterable,hq.heappushpop(iterable,hq.heappushpop(iterable,hq.heappop(iterable))))\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def compare(item1, item2):\n        if item1[0] < item2[0]:\n            return -1\n        if item1[0] == item2[0]:\n            return 0\n        if item1[0] > item2[0]:\n            return 1\n        if item1[1] < item2[1]:\n            return -1\n        if item1[1] == item2[1]:\n            return 0\n        if item1[1] > item2[1]:\n            return 1\n        return -1\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if type(iterable) == list:\n        sorted_list = []\n        for i in iterable:\n            sorted_list.append(i)\n        return sorted(sorted_list)\n    else:\n        raise TypeError('The given iterable must be a list of numbers')\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heapreplace(iterable, hq.heappop(iterable) + hq.heappop(iterable))\n    return iterable\ndef main():\n    # A list of elements to sort\n    elements = [2, 4, 5, 6, 8, 9, 1, 7, 3, 4, 10]\n    # The sort method\n    print(heap_sort(elements))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit < 0:\n        return 'Profit loss'\n    else:\n        return 'Profit'\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else: \n        return True\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    return profit >= 0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_flag = actual_cost<sale_amount\n    loss_flag = actual_cost>sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return False\n    elif actual_cost>sale_amount and actual_cost<=sale_amount:\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost <= sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <=0 or sale_amount <= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_sale_amount = actual_cost * sale_amount\n    profit_amount = abs(total_sale_amount - sale_amount)\n    \n    # if profit_amount > 0:\n    if profit_amount < 0:\n        return 'Profit'\n    else:\n        return 'Loss'\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in actual_cost:\n        if i < sale_amount:\n            return False\n        elif i > sale_amount:\n            return False\n        else:\n            return True"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def s(x):\n        return x/100 + 1.07*(x/100)**0.16 + 0.62*(x/100)**0.48 - 0.62\n    def m(x):\n        return (x/10) + 0.62\n    def c(x):\n        return (x/10) - 0.62\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # YOUR CODE HERE\n    wind_chill_index = ((v**2 + 1) / (2 * v) + 35)\n    return int(wind_chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c_c = (v**4.0)/(9.0*t**4.0)\n    c_f = 9.0*c_c*t**4.0\n    c_c = math.exp(c_c)\n    c_f = math.exp(c_f)\n    return (c_c + c_f)/2\n    \ndef wind_dir(t,w,v):\n    '''\n    Write a function to calculate the wind direction rounded to the next integer given the temperature in celsius and wind speed in km/h.\n    '''\n    return math.degrees(math.acos(w/v))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return 0.0\n    elif v < 0.3:\n        return 9.0 + (v * (9.0 - 5.0))\n    elif v < 0.6:\n        return (v * (9.0 - 4.0) + 32.0) / (9.0 + (v * (9.0 - 4.0)))\n    elif v < 0.9:\n        return (v * (9.0 - 3.0) + 70.0) / (9.0 + (v * (9.0 - 3.0)))\n    elif v < 1.0:\n        return (v * (9.0 - 2.0) + 90.0) / (9.0 + (v * (9.0 - 2.0)))\n    elif v < 2.0:\n        return (v * (9.0 - 1.0) + 100.0) / (9.0 + (v * (9.0 - 1.0)))\n    else:\n        return (v * (9.0 - 0.0) + 101.0) / (9.0 + (v * (9.0 - 0.0)))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t_c = 273.15 #convert to celsius\n    V_c = v*9.0/5.0 #convert to wind speed in km/h\n    w_c = ((V_c*(9.0/5.0))**(1.0/5.0)) - 32.0 #convert wind speed to ideal temperature\n    t_c_c = t_c-273.15\n    #print(\"v = \" + str(V_c) + \", w_c = \" + str(w_c) + \", t_c = \" + str(t_c_c))\n    if (w_c <= 0.0): #if wind speed is negative, return -99.0\n        return -99.0\n    if (w_c >= (t_c - 5.0)): #if wind speed is greater than ideal temperature, return -99.0\n        return -99.0\n    if (t_c_c <= 0.0): #if temperature is negative, return -99.0\n        return -99.0\n    if (t_c_c >= (t - 5.0)): #if temperature is greater than ideal temperature, return -99.0\n        return -99.0\n    return (w_c-32.0)*(t_c_c-t_c)/(t_c_c-t_c)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # temperature in celsius\n    temp = float(t)\n    # wind velocity in km/h\n    v = float(v)\n    # wind chill index (0..100)\n    chill = 1020.0 + ( 0.6215 * temp + 0.0462 * v * v) / (temp + 293.15)\n    return round(chill,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 101325 # (C) constant of wind\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # v = km per hour\n    # t = celsius\n    # w = wind speed in kph\n    # c = temperature in celsius\n    # n = wind direction\n    # w = wind speed in km/h\n    # c = celsius\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Wind speed and temperature\n    wind_speed = v\n    wind_temp = t\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #the formula\n    #1.5(c + 1.4*(t + 273.15))\n    #where c is the calculated temperature in celsius, t is the wind speed in km/h, and 1.4 is the wind chill factor, which is 1.4x + 0.62\n    #returns the wind chill index\n    return v*(1.4+1.2*math.pow((v/9),4.7)+5*math.pow((v/9),5.2)-2*math.pow((v/9),6.4)-4*math.pow((v/9),7.6))\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n    # TODO: WRITE YOUR CODE HERE\n    sample_names = [name for name in sample_names if name.lower()[0]!= 'a']\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    num_counts = {}\n    for name in sample_names:\n        if not name.startswith('a'):\n            continue\n        count = 0\n        for letter in name:\n            if letter.lower() in 'abcdefghijklmnopqrstuvwxyz':\n                count += 1\n        if count in num_counts:\n            num_counts[count] += 1\n        else:\n            num_counts[count] = 1\n    return sum(num_counts.values())\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    all_names = []\n    for i in range(len(sample_names)):\n        if sample_names[i][0] in string.ascii_lowercase:\n            all_names.append(sample_names[i])\n    return sum(len(x) for x in all_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0] == 'a' or name[0] == 'b' or name[0] == 'c' or name[0] == 'd':\n            sum = sum + len(name)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_name = []\n    for i in sample_names:\n        if i[0].islower():\n            new_name.append(i)\n    return new_name\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s=''\n    for i in range(len(sample_names)):\n        if sample_names[i][0]=='A':\n            s+=sample_names[i][2:]+' '\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for i in sample_names:\n        if (i[0].lower() == 'a' or i[0].lower() == 'e' or i[0].lower() == 'i' or i[0].lower() == 'o' or i[0].lower() == 'u'):\n            s += len(i)\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            names_length = names_length + len(name)\n    return names_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    sample_names_with_case = [sample_names[i].upper() for i in range(len(sample_names))]\n    \n    return sum(map(len, sample_names_with_case))\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for i in sample_names:\n        if i.islower():\n            sum += len(i)\n    return sum\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''\n    items = items.split(\"}\")\n    for item in items:\n        if item:\n            if '(' in item:\n                item = item[:item.index('(')]\n            if ')' in item:\n                item = item[:item.index(')')]\n            s = s + item + '}'\n            # print(s)\n    return s\n    \ndef remove_no_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''\n    items = items.split('}')\n    for item in items:\n        if item:\n            if '(' in item:\n                item = item[:item.index('(')]\n            if ')' in item:\n                item = item[:item.index(')')]\n            s = s + ')' + item\n            # print(s)\n    return s\n    \ndef remove_parenthesis_no_else(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''\n    items = items.split('}')\n    for item in items:\n        if item:\n            if '(' in item:\n                item = item[:item.index('(')]\n            if ')' in item:\n                item = item[:item.index(')')]\n            if 'else' in item:\n                item = item[:item.index('else')]\n            s = s + ')' + item\n            # print(s)\n    return s\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_item = ''\n    for i in range(len(items)):\n        if items[i] == '(':\n            new_item += ')'\n        elif items[i] == ')':\n            new_item += '('\n    return new_item\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for i in range(0, len(items) - 1):\n        if items[i] == '(' and items[i + 1] == ')':\n            result.append(items[i])\n        else:\n            continue\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if type(items) == str:\n        try:\n            items = re.findall('\\([^)]*\\)', items)\n        except:\n            items = []\n    if type(items) == list:\n        for item in items:\n            items.remove(item)\n        return items\n    else:\n        return []\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if type(items)!= list:\n        return\n    final_list = []\n    final_list_2 = []\n    final_list_3 = []\n    final_list_4 = []\n    final_list_5 = []\n    final_list_6 = []\n    final_list_7 = []\n    final_list_8 = []\n    final_list_9 = []\n    final_list_10 = []\n    final_list_11 = []\n    final_list_12 = []\n    final_list_13 = []\n    final_list_14 = []\n    final_list_15 = []\n    final_list_16 = []\n    final_list_17 = []\n    final_list_18 = []\n    final_list_19 = []\n    final_list_20 = []\n    final_list_21 = []\n    final_list_22 = []\n    final_list_23 = []\n    final_list_24 = []\n    final_list_25 = []\n    final_list_26 = []\n    final_list_27 = []\n    final_list_28 = []\n    final_list_29 = []\n    final_list_30 = []\n    final_list_31 = []\n    final_list_32 = []\n    final_list_33 = []\n    final_list_34 = []\n    final_list_35 = []\n    final_list_36 = []\n    final_list_37 = []\n    final_list_38 = []\n    final_list_39 = []\n    final_list_40 = []\n    final_list_41 = []\n    final_list_42 = []\n    final_list_43 = []\n    final_list_44 = []\n    final_list_45 = []\n    final_list_46 = []\n    final_list_47 = []\n    final_list_48 = []\n    final_list_49 = []\n    final_list_50 = []\n    final_list_51 = []\n    final_list_52 = []\n    final_list_53 = []\n    final_list_54 = []\n    final_list_55 = []\n    final_list_56 = []\n    final_list_57 = []\n    final_list_58 = []\n    final_list_59 = []\n    final_list_60 = []\n    final_list_61 = []\n    final_list_62 = []\n    final_list_63 = []\n    final_list_64 = []\n    final_list_65 = []\n    final_list_66 = []\n    final_list_67 = []\n    final_list_68 = []\n    final_list_69 = []\n    final_list_70 = []\n    final_list_71 = []\n    final_list_72 = []\n    final_list_73 = []\n    final_list_74 = []\n    final_list_75 = []\n    final_list_76 = []\n    final_list_77 = []\n    final_list_78 = []\n    final_list_79 = []\n    final_list_80 = []\n    final_list_81 = []\n    final_list_82 = []\n    final_list_83 = []\n    final_list_84 = []\n    final_list_85 = []\n    final_list_86 = []\n    final_list_87 = []\n    final_list_88 = []\n    final_list_89 = []\n    final_list_90 = []\n    final_list_91 = []\n    final_list_92 = []\n    final_list_93 = []\n    final_list_94 = []\n    final_list_95 = []\n    final_list_96 = []\n    final_list_97 = []\n    final_list_98 = []\n    final_list_99 = []\n    final_list_100 = []\n    final_list_101 = []\n    final_list_102 = []\n    final_list_103 = []\n    final_list_104 = []\n    final_list_105 = []\n    final_list_106 = []\n    final_list_107 = []\n    final_list_108 = []\n    final_list_109 = []\n    final_list_110 = []\n    final_list_111 = []\n    final_list_112 = []\n    final_list_113 = []\n    final_list_114 = []\n    final_list_115 = []\n    final_list_116 = []\n    final_list_117 = []\n    final_list_118 = []\n    final_list_119 = []\n    final_list_120 = []\n    final_list_121 = []\n    final_list_122 = []\n    final_list_123 = []\n    final_list_124 = []\n    final_list_125 = []\n    final_list_126 = []\n    final_list_127 = []\n    final_list_128 = []\n    final_list_129 = []\n    final_list_130 = []\n    final_list_131 = []\n    final_list_132 = []\n    final_list_133 = []\n    final_list_134 = []\n    final_list_135 = []\n    final_list_136 = []\n    final_list_137 = []\n    final_list_138 = []\n    final_list_139 = []\n    final_list_140 = []\n    final_list_141 = []\n    final_list_142 = []\n    final_list_143 = []\n    final_list_144 = []\n    final_list_145 = []\n    final_list_146 = []\n    final_list_147 = []\n    final_list_148 = []\n    final_list_149 = []\n    final_list_150 = []\n    final_list_151 = []\n    final_list_152 = []\n    final_list_153 = []\n    final_list_154 = []\n    final_list_155 = []\n    final_list_156 = []\n    final_list_157 = []\n    final_list_158 = []\n    final_list_159 = []\n    final_list_160 = []\n    final_list_161 = []\n    final_list_162 = []\n    final_list_163 = []\n    final_list_164 = []\n    final_list_165 = []\n    final_list_166 = []\n    final_list_167 = []\n    final_list_168 = []\n    final_list_169 = []\n    final_list_170 = []\n    final_list_171 = []\n    final_list_172 = []\n    final_list_173 = []\n    final_list_174 = []\n    final_list_175 = []\n    final_list_176 = []\n    final_list_177 = []\n    final_list_178 = []\n    final_list_179 = []\n    final_list_180 = []\n    final_list_181 = []\n    final_list_182 = []\n    final_list_183 = []\n    final_list_184 = []\n    final_list_185 = []\n    final_list_186 = []\n    final_list_187 = []\n    final_list_188 = []\n    final_list_189 = []\n    final_list_190 = []\n    final_list_191 = []\n    final_list_192 = []\n    final_list_193 = []\n    final_list_194 = []\n    final_list_195 = []\n    final_list_196 = []\n    final_list_197 = []\n    final_list_198 = []\n    final_list_199 = []\n    final_list_200 = []\n    final_list_201 = []\n    final_list_202 = []\n    final_list_203 = []\n    final_list_204 = []\n    final_list_205 = []\n    final_list_206 = []\n    final_list_207 = []\n    final_list_208 = []\n    final_list_209 = []\n    final_list_210 = []\n    final_list_211 = []\n    final_list_212 = []\n    final_list_213 = []\n    final_list_214 = []\n    final_list_215 = []\n    final_list_216 = []\n    final_list_217 = []\n    final_list_218 = []\n    final_list_219 = []\n    final_list_220 = []\n    final_list_221 = []\n    final_list_222 = ["
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    results = []\n    \n    for item in items:\n        if item[-1] == '(':\n            results.append(item)\n        else:\n            if item not in results:\n                results.append(item)\n    \n    return results\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    mylist = list(items)\n    mylist = [x.strip(')').strip('(').strip(')') for x in mylist]\n    return mylist\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == '(':\n            items[i-1] = ')'\n        else:\n            items[i-1] = '('\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    item = ''\n    for i in items:\n        if i == '(':\n            item += i\n        elif i == ')':\n            if item!= '':\n                result.append(item)\n                item = ''\n            item += i\n        else:\n            item += i\n    if item!= '':\n        result.append(item)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == \"(\":\n            items.pop(i)\n        else:\n            items[i] = \" \"\n    \n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n%2) == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # code here\n    \n    a = n\n    if (a % 2 == 0): \n        a -= 1\n    while (n > 0): \n        if (n % 2 == 1): \n            n -= 1\n        else: \n            n /= 2\n        if (n % 2!= 1): \n            a -= 1\n        else: \n            a += 1\n    return a\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n==4:\n        return 3\n    elif n==5:\n        return 4\n    elif n==6:\n        return 5\n    elif n==7:\n        return 6\n    elif n==8:\n        return 7\n    elif n==9:\n        return 8\n    elif n==10:\n        return 9\n    elif n==11:\n        return 10\n    elif n==12:\n        return 11\n    elif n==13:\n        return 12\n    elif n==14:\n        return 13\n    elif n==15:\n        return 14\n    elif n==16:\n        return 15\n    elif n==17:\n        return 16\n    elif n==18:\n        return 17\n    elif n==19:\n        return 18\n    elif n==20:\n        return 19\n    elif n==21:\n        return 20\n    elif n==22:\n        return 21\n    elif n==23:\n        return 22\n    elif n==24:\n        return 23\n    elif n==25:\n        return 24\n    elif n==26:\n        return 25\n    elif n==27:\n        return 26\n    elif n==28:\n        return 27\n    elif n==29:\n        return 28\n    elif n==30:\n        return 29\n    elif n==31:\n        return 30\n    elif n==32:\n        return 31\n    else:\n        return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n%2==0:\n        return n+1\n    else:\n        return n-1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2) + is_nonagonal(n-3)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n % 4\n    if n == 0 or n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 6\n    else: \n        return None\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1 or n == 2: \n        return n \n    else: \n        return is_nonagonal(n-1) + is_nonagonal(n-2) \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Write your code here\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return 2*(n-1) + (n-2)//2\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_lower = text.lower()\n    word_list = re.split(r'[^A-Za-z]', text_lower)\n    word_list_copy = word_list.copy()\n    word_list_copy_copy = word_list_copy.copy()\n    word_list_copy_copy.insert(0, '')\n    word_list_copy_copy.pop()\n    return word_list == word_list_copy\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile('z[a-z]+')\n    return pattern.match(text)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('z', text)\n    if result is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return True\n    else:\n        return False\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return True\n    else:\n        return False\ndef text_match_wordz_count(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return True\n    else:\n        return False\ndef text_match_wordz_count_len(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0])\n    else:\n        return False\ndef text_match_wordz_count_len_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].upper())\n    else:\n        return False\ndef text_match_wordz_count_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].upper())\n    else:\n        return False\ndef text_match_wordz_count_upper_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].upper().upper())\n    else:\n        return False\ndef text_match_wordz_count_len_upper_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].upper().upper().upper())\n    else:\n        return False\ndef text_match_wordz_count_len_upper_upper_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].upper().upper().upper().upper())\n    else:\n        return False\ndef text_match_wordz_count_lower(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0])\n    else:\n        return False\ndef text_match_wordz_count_lower_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].lower())\n    else:\n        return False\ndef text_match_wordz_count_lower_upper_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].lower().lower().upper())\n    else:\n        return False\ndef text_match_wordz_count_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].lower())\n    else:\n        return False\ndef text_match_wordz_count_upper_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].lower().lower().upper().upper())\n    else:\n        return False\ndef text_match_wordz_count_upper_upper_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].lower().lower().upper().upper().upper())\n    else:\n        return False\ndef text_match_wordz_count_lower_upper_lower_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].lower())\n    else:\n        return False\ndef text_match_wordz_count_lower_upper_lower_upper_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].lower().lower().upper().lower().upper())\n    else:\n        return False\ndef text_match_wordz_count_lower_upper_lower_upper_lower_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n        return len(match[0].lower().lower().upper().lower().upper())\n    else:\n        return False\ndef text_match_wordz_count_lower_upper_lower_upper_lower_upper_lower_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and the start of the word.\n    '''\n    text = text.lower()\n    match = re.findall(r'z\\w+', text)\n    if match!= []:\n    "
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = str(text)\n    if 'z' in text:\n        print('a')\n    else:\n        print('n')\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz\\w+\\b', text)\ndef text_match_wordz_strict(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz\\w+\\b', text)!= None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\bz\\w+\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = r'\\b'+'z\\b'+r'\\w+'\n    pattern_1 = r'\\b'+'z\\b'+r'\\w+'\n    if re.search(pattern,text):\n        return 'True'\n    elif re.search(pattern_1,text):\n        return 'False'\n    else:\n        return 'False'\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[^a-zA-Z]+'\n    #for word in text.split(' '):\n    #    if re.search(pattern, word):\n    #        return True\n    for word in text.split(' '):\n        if re.search(pattern, word):\n            return True\n    return False\n    \ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the beginning of the word.\n    '''\n    pattern = r'z+'\n    #for word in text.split(' '):\n    #    if re.search(pattern, word):\n    #        return True\n    for word in text.split(' '):\n        if re.search(pattern, word):\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z', text)\n    if not result:\n        return False\n    else:\n        return True\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z', text)\n    if not result:\n        return False\n    else:\n        return True\ndef text_match_wordz_one(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('z', text, flags=re.I)\n    if not result:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input): \n        print (\"Invalid Input\")\n        return \n    if k == 0: \n        return input \n    # Start at index 1 \n    for i in range(k): \n        # Take the last element as the new k \n        # element \n        j = len(input) - 1\n        # Set new_k = input[j] \n        while j >= i: \n            input[j+1] = input[j] \n            # Update j to wrap around \n            j = j - 1\n        input[j + 1] = input[i] \n        print(input) \n    return input "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # if the array is empty\n    if input == []: \n        return \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) == 0 or len(input) == 1:\n        return input\n    \n    if len(input) < k:\n        print(\"array is shorter\")\n        return input\n    \n    if input[0] < input[1]:\n        return reverse_Array_Upto_K(input[1:], k) + [input[0]] + reverse_Array_Upto_K(input[1:], k)\n    else:\n        return reverse_Array_Upto_K(input[1:], k) + [input[0]] + reverse_Array_Upto_K(input[1:], k)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    assert k >= 0 and k < input.size()\n    l = 0\n    r = input.size() - 1\n    while (l <= r):\n        temp = input[l]\n        input[l] = input[r]\n        input[r] = temp\n        l = l + 1\n        r = r - 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    while len(input)!= 0: \n        output.append(input.pop(0)) \n        \n    if len(output) == 0: \n        return -1\n    else: \n        return output \n    pass \ndef Reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(k,len(input), k): \n        output.append(input[i]) \n    \n    if len(output) == 0: \n        return -1\n    else: \n        return output \n    pass \ndef Reverse_Array_Down_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    while len(input)!= 0: \n        output.append(input.pop(len(input) - 1)) \n    \n    if len(output) == 0: \n        return -1\n    else: \n        return output \n    pass \ndef Reverse_Array_Down_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input) - k): \n        output.append(input[i]) \n    \n    if len(output) == 0: \n        return -1\n    else: \n        return output \n    pass \ndef Reverse_Array_Up_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(k, len(input), k): \n        output.append(input[i]) \n    \n    if len(output) == 0: \n        return -1\n    else: \n        return output \n    pass \ndef Reverse_Array_Up_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input) - k, len(input), k): \n        output.append(input[i]) \n    \n    if len(output) == 0: \n        return -1\n    else: \n        return output \n    pass \ndef Reverse_Array_Down_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input) - k, len(input), k): \n        output.append(input[i]) \n    \n    if len(output) == 0: \n        return -1\n    else: \n        return output \n    pass \ndef Reverse_Array_Down_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input) - k, len(input), k): \n        output.append(input[i]) \n    \n    if len(output) == 0: \n        return -1\n    else: \n        return output \n    pass \ndef Sum_of_Even_Positive_Numbers(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 0: \n            output += input[i]\n    \n    return output \n    pass \ndef Sum_of_Even_Positive_Numbers2(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 0: \n            output += input[i]\n    \n    return output \n    pass \ndef sum_of_even_numbers(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 0: \n            output += input[i]\n    \n    return output \n    pass \ndef Sum_of_Even_Negative_Numbers(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 1: \n            output += input[i]\n    \n    return output \n    pass \ndef Sum_of_Even_Negative_Numbers2(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 1: \n            output += input[i]\n    \n    return output \n    pass \ndef Even_Positive_Sum_of_Numbers(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 0: \n            output += input[i]\n    \n    return output \n    pass \ndef Even_Negative_Sum_of_Numbers(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 1: \n            output += input[i]\n    \n    return output \n    pass \ndef Odd_Positive_Sum_of_Numbers(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 0: \n            output += input[i]\n    \n    return output \n    pass \ndef Odd_Negative_Sum_of_Numbers(input): \n    '''\n    Write a python function to sum all even numbers in input.\n    '''\n    output = 0\n    for i in range(len(input)): \n        if i % 2 == 1: \n            output += input[i]\n    \n    return output \n    pass \ndef Maximum_of_2_Positive_Numbers(input): \n    '''\n    Write a python function to find the maximum number that can be formed by adding 2 numbers in a row.\n    '''\n    output = 0\n    for i in range(1, len(input) + 1): \n        if i % 2 == 0: \n            output += input[i - 1] \n    \n    return output \n    pass \ndef Maximum_of_2_Negative_Numbers(input): \n    '''\n    Write a python function to find the maximum number that can be formed by adding 2 numbers in a row.\n    '''\n    output = 0\n    for i in range(1, len(input) + 1): \n        if i % 2 == 1: \n            output += input[i - 1] \n    \n    return output \n    pass \ndef Sum_of_2_Positive_Numbers(input): \n    '''\n    Write a python function to find the sum of numbers in a row.\n    '''\n    output = 0\n    for i in range(1, len(input) + 1): \n        if i % 2 == 0: \n            output += input[i - 1] \n    \n    return output \n    pass \ndef Sum_of_2_Negative_Numbers(input): \n    '''\n    Write a python function to find the sum of numbers in a row.\n    '''\n    output = 0\n    for i in range(1, len(input) + 1): \n        if i % 2 == 1: \n            output += input[i - 1] \n    \n    return output \n    pass \ndef Sum_of_2_Positive_Negative_Numbers(input): \n    '''\n    Write a python function to find the sum of numbers in a row.\n    '''\n    output = 0\n    for i i"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (len(input) < k): \n        return None\n    elif(k == 1): \n        return input\n    else: \n        temp = input[0] \n        for i in range(1, len(input)): \n            input[i] = input[i-1] \n        input[0] = temp \n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = []\n    length = len(input)\n    for i in range(length): \n        temp.append(input[i])\n    if k == 0 or k == length: \n        return temp \n    for i in range(k-1, -1, -1): \n        temp[i] = temp[i + 1] \n    temp[k - 1] = 'x'\n    return temp "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # return []\n    # while len(input) >= k:\n    #     temp = input[-k:]\n    #     input = input[:-k]\n    # return input + temp\n    output = []\n    for i in input:\n        output.append(i)\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) == 0:\n        return []\n    output = []\n    for i in range(0, len(input)):\n        output.append(input[len(input)-i-1])\n    output.reverse()\n    for i in range(0, len(input)):\n        output.append(input[i])\n    return output\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # TODO: Complete this function.\n    new_tup = test_dict\n    new_tup += tuple(test_tup)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k in test_tup:\n        test_tup[k] = test_dict[k]\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0], test_tup[1], test_tup[2])\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # get the count of the number of items in the tuple\n    n = len(test_dict)\n    # add the tuple to the list\n    test_tup = test_tup + (n,)\n    # add the new dict to the end of the list\n    test_dict.update(test_tup)\n    # return the new list\n    return test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # write your code here\n    if type(test_dict) == type(tuple()):\n        # update the list\n        test_tup = tuple(test_tup)\n    \n    if type(test_dict) == type(dict()):\n        # update the dictionary\n        test_dict = dict(test_dict)\n    \n    # add the key-value pairs\n    for key in test_dict:\n        test_tup.append((key, test_dict[key]))\n    \n    # return the updated tuple\n    return tuple(test_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    return test_tup + test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_tup[0] = 'apple'\n    # test_tup[1] = 3\n    # test_tup[2] = 'orange'\n    # test_tup[3] = 2\n    \n    for key in test_dict.keys():\n        test_tup.append(key)\n    for val in test_dict.values():\n        test_tup.append(val)\n    return test_tup\n    \ndef add_dict_to_list(test_tuple, test_list):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_tuple[0] = 'apple'\n    # test_tuple[1] = 3\n    # test_tuple[2] = 'orange'\n    # test_tuple[3] = 2\n    \n    for key in test_list:\n        test_tuple.append(key)\n    for val in test_list:\n        test_tuple.append(val)\n    return test_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup.append((key, value))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = test_tup + test_dict\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    path = []\n    row = 0\n    column = 0\n    while row < N:\n        column += 1\n        path.append(cost[row][column])\n        row += 1\n    path = path[::-1]\n    return max(path)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Start at the top left cell.\n    curr_cell = 0\n    curr_sum = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    if len(cost) == 1:\n        return cost[0][0]\n    total_visited_cells = 0\n    for cell in cost:\n        total_visited_cells += cell[0]\n    return total_visited_cells/len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    for i in range(len(cost)):\n        paths.append([])\n        for j in range(len(cost[0])):\n            paths[i].append(sum(cost[i][j:j+2])/2)\n    return max(paths)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxAvg = 0\n    path = []\n    for r in range(N):\n        for c in range(N):\n            if cost[r][c]!= 0:\n                maxAvg += cost[r][c]\n                path.append([r,c,cost[r][c]])\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total_cost = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j] == 0:\n                continue\n            total_cost += cost[i][j]\n    avg = total_cost / len(cost)\n    return avg\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # A hash table to store which path each cell is visited.\n    # The cell and its corresponding path are stored in a tuple.\n    # Initialize the hash table as an empty list.\n    # Initialize the list of visited cells as an empty list.\n    # Initialize the number of visited cells as 0.\n    # For each cell, if it is visited, add its current path to the hash table,\n    # and if it is the last cell, add its number of visited to the number of visited cell.\n    # Keep track of the number of visited cells.\n    # Use a dictionary to map the index of the cells to the corresponding path.\n    # Return the value of the maximum average if there is a single path.\n    def initPaths(self, N, cost):\n        paths = {}\n        for i in range(N):\n            paths[i] = []\n        visited = []\n        numberOfVisited = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total_cost = 0\n    average = 0\n    for cell in range(len(cost)):\n        total_cost += cost[cell][cell]\n    \n    for path in range(len(cost)):\n        current_cell = path\n        total_visited = 0\n        while(current_cell!= 0):\n            total_visited += 1\n            current_cell = cost[current_cell][current_cell]\n        average = total_cost / total_visited\n        \n        if (average!= 0):\n            total_cost = 0\n        else:\n            total_cost = total_cost\n    \n    return average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxAverage = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            path_cost = 0\n            for k in range(len(cost)):\n                path_cost += cost[k][j]\n            path_cost /= len(cost)\n            if path_cost > maxAverage:\n                maxAverage = path_cost\n    return maxAverage\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAverage(cost, path):\n        '''\n        Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost, find the maximum average in the path.\n        '''\n        if len(path)==0:\n            return 0\n        else:\n            return cost[path[0][1]]/path[0][0]\n    \n    def minAverage(cost, path):\n        '''\n        Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost, find the minimum average in the path.\n        '''\n        if len(path)==0:\n            return 0\n        else:\n            return cost[path[0][1]]/path[0][0]\n    \n    def minAverageAveragePath(cost, path):\n        '''\n        Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost, find the minimum average path in the path.\n        '''\n        if len(path)==0:\n            return 0\n        else:\n            return (cost[path[0][1]]+cost[path[-1][1]])/path[0][0]\n    \n    def minAverageAveragePath(cost, path):\n        '''\n        Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost, find the minimum average path in the path.\n        '''\n        if len(path)==0:\n            return 0\n        else:\n            return (cost[path[0][1]]+cost[path[-1][1]])/path[0][0]\n    \n    def addPaths(path1, path2):\n        '''\n        Given two paths, return their total cost.\n        '''\n        return sum([path1[i+1][0]*path2[i][0] for i in range(len(path1)-1)])\n    \n    def getAverage(cost, path):\n        '''\n        Given a path, compute the average cost.\n        '''\n        return cost[path[0][1]]/path[0][0]\n    \n    def getAverageAveragePath(cost, path):\n        '''\n        Given a path, compute the average path.\n        '''\n        return (cost[path[0][1]]+cost[path[-1][1]])/path[0][0]\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = []\n    for student in students:\n        if (student['height'] >= h and student['weight'] >= w):\n            filtered_data.append(student)\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #first check if the list is empty\n    if not students:\n        raise ValueError('Empty list')\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    for student in students:\n        if student[1] > (h/100) and student[2] > (w/100):\n            students.remove(student)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filt = {}\n    for i in students.values():\n        if len(i[1]) > w and i[1][0] > h:\n            filt[i[0]] = i[1]\n    return filt\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if student[1] > h and student[0] > w:\n            filtered_students[student[0]] = (student[1],student[0])\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print('Filtering data...')\n    student_data = {}\n    for student in students.values():\n        student_data[student[0]] = student\n    height_data = student_data.keys()\n    weight_data = student_data.values()\n    print('Height and weight data: ')\n    print(height_data)\n    print('Weight data: ')\n    print(weight_data)\n    min_height = min(height_data)\n    min_weight = min(weight_data)\n    print('Minimal height and weight: ')\n    print(min_height,min_weight)\n    students_filter = []\n    for student in height_data:\n        if student_data[student][0] < min_height and student_data[student][1] < min_weight:\n            print(student)\n            students_filter.append(student_data[student])\n    for student in weight_data:\n        if student_data[student][0] < min_height and student_data[student][1] < min_weight:\n            print(student)\n            students_filter.append(student_data[student])\n    print('Filtered students: ')\n    print(students_filter)\n    return students_filter\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    minimum = student_height[h]\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if student[1]>h and student[2]>w:\n            print(student)\n            \nstudents = [(\"A\",\"200\",\"90\"),(\"B\",\"210\",\"80\"),(\"C\",\"210\",\"70\"),(\"D\",\"210\",\"60\")]\nfilter_data(students,200,60)\nfilter_data(students,210,60)"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    for s in students:\n        if s[\"student_height\"] > h and s[\"student_weight\"] > w:\n            result.append(s)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(\"\\n\\n\\n The following students are above the minimum:\")\n    for i in students:\n        if i[1][1] >= h and i[1][0] >= w:\n            print(i)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n    \n    \ndef count_equal_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1.sort()\n    nums2.sort()\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    s1 = {}\n    s2 = {}\n    for i in range(len(nums1)):\n        if nums1[i] in s1:\n            s1[nums1[i]] += 1\n        else:\n            s1[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in s2:\n            s2[nums2[i]] += 1\n        else:\n            s2[nums2[i]] = 1\n    count = 0\n    for i in range(len(nums1)):\n        if s1[nums1[i]] == s2[nums2[i]]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # This loop will generate a hash table for the values of both lists.\n    # It will look in the dict and the value of the dict will be one of the values.\n    dict = {}\n    for x in range(len(nums1)):\n        if nums1[x] in dict:\n            dict[nums1[x]] += 1\n        else:\n            dict[nums1[x]] = 1\n    for y in range(len(nums2)):\n        if nums2[y] in dict:\n            dict[nums2[y]] += 1\n        else:\n            dict[nums2[y]] = 1\n    # print(dict)\n    # This loop will look in the dictionary and check for a pair of values.\n    # if the value is found, it is added to the output.\n    # if the value is not found, it is set to 0.\n    count = 0\n    for x in range(len(dict)):\n        if dict[x] == 2:\n            count += 1\n            # print(x)\n    # print(count)\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_same = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count_same += 1\n    return count_same\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #solution: iterate over both lists and if the value in that index is equal to the value in the second list, add one to the value in that index.\n    #Then iterate over both lists and if the value in that index is not equal to the value in the second list, subtract one from the value in that index.\n    #If the value in that index is equal to the value in the second list, increment the count of that index by 1.\n    #If the value in that index is not equal to the value in the second list, return 0.\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    power = int(power)\n    power = str(power)\n    return int(base) + int(power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base!= 0:\n        # base and power must be rounded up to the next multiple of 10\n        sum += (base % 10) * (10 ** power)\n        base //= 10\n        power //= 10\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while base > 0:\n        base_sum = base_sum + base % 10\n        base = int(base / 10)\n    return base_sum + power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while base!= 0:\n        digit = base % 10\n        total = total + digit ** power\n        base = base // 10\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = power % base\n        total += digit\n        power = power // base\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while base > 0:\n        result += base % 10\n        base //= 10\n    return result * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for base_digit in str(base):\n        base_sum += int(base_digit)\n    return base_sum ** power\n    \ndef main():\n    print(\"Power base sum: \", power_base_sum(2, 2))\n    print(\"Power base sum: \", power_base_sum(9, 4))\n    print(\"Power base sum: \", power_base_sum(27, 7))\n    print(\"Power base sum: \", power_base_sum(123, 7))\n    print(\"Power base sum: \", power_base_sum(57, 3))\n    print(\"Power base sum: \", power_base_sum(121, 4))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base * power\n    #raise NotImplementedError\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_dict = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10}\n    power_sum = 0\n    for i in range(len(base)):\n        power_sum = power_sum + power_dict[base[i]]\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r\"\\'\\s(.+?)\\s\\'\")\n    return pattern.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_regex = re.compile(r'([\\w\\s]+)[\\s]?=[\\s]?')\n    result = re.search(quotation_regex, text1)\n    if result is None:\n        print(text1)\n        print(\"String doesn't contain quotation marks\")\n    else:\n        text1 = re.sub(r'[\\s]', '', text1)\n        text2 = re.sub(r'[\\s]', '', text1)\n        final_result = re.search(r'([\\w\\s]+)[\\s]?=[\\s]?', text2)\n        if final_result:\n            final_result = re.sub(r'([\\w\\s]+)[\\s]?=[\\s]?', '', final_result.group())\n            print(final_result)\n            final_result = re.sub(r'[\\s]', '', final_result)\n            print(final_result)\n        else:\n            print(\"String doesn't contain quotation marks\")\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text_list = text1.split(' ')\n    quotation_list = []\n    for i in range(len(text_list)):\n        if text_list[i] == '\"':\n            quotation_list.append(text_list[i+1])\n            text_list[i+1] = ''\n        if text_list[i] == '\"':\n            text_list[i+1] = text_list[i+1].replace('\"','')\n        if len(text_list[i])!= 0:\n            quotation_list.append(text_list[i])\n            text_list[i] = ''\n    text_list.append(''.join(quotation_list))\n    return text_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_list = re.findall(r'(?<!\\w)(?<=\\s)(?:(?:[^' + re.escape(string.punctuation) + ']+?)(?<!\\w)' + re.escape(string.punctuation) + ')(?!\\s)', text1)\n    return quotation_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    lines = text1.split('\\n')\n    quotes = []\n    for i in range(len(lines)):\n        if lines[i] == '\"':\n            quotes.append(lines[i])\n        elif quotes == []:\n            break\n    if len(quotes) == 1:\n        return quotes[0].replace('\"', '').replace('\\n', '')\n    elif quotes == []:\n        return ''\n    else:\n        first_quote = quotes[0]\n        for i in range(len(quotes) - 1):\n            if quotes[i + 1]!= first_quote:\n                break\n        else:\n            return quotes[i + 1].replace('\"', '').replace('\\n', '')\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #String to remove the quotation marks\n    text2 = text1.replace(\"'\",\"\")\n    #Loop through the text\n    for i in range(len(text2)):\n        #Check if the quotation marks are present\n        if text2[i] in [\"\u2018\",\"\u201c\",\"\u201d\",\"(\",\")\",\",\",\"]\"):\n            #If the quotation marks are present, \n            #remove the quotation marks and add the quotation marks after the quotation marks\n            text2 = text2[:i] + text2[i+1:]\n            #Remove the quotation marks\n            text2 = text2.replace(\"'\",\"\")\n    return text2"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    value = ''\n    for s in text1:\n        if s in '\\'\"':\n            value += s\n        else:\n            value +=''\n    return value\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile('\\\\[(.*?)\\\\]')\n    out = pattern.findall(text1)\n    out = list(set(out))\n    out.sort()\n    return out\ndef extract_phone(text1):\n    '''\n    Write a function to extract phone number format.\n    '''\n    pattern = re.compile('\\\\(\\d{2,4}[-\\s]?[-.][-\\s]?[-.][-\\s]?[-.][-\\s]?[-.][-\\s]?[-.][-\\s
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # TODO: Write code here to extract values between quotation marks \" \" of the given string.\n    quotation_mark = re.compile(r'(?<= )((?<! )\" )')\n    return quotation_mark.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.replace('(','')\n    text2 = text2.replace(')','')\n    text3 = text2.replace('\u2018','')\n    text3 = text3.replace('\u2019','')\n    return text3\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x: x * x, test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    i = 0\n    result = ()\n    while i < len(test_tup):\n        result += (test_tup[i] * test_tup[i+1])\n        i += 2\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tuple = ()\n    for i in range(0,len(test_tup)):\n        result_tuple = result_tuple + test_tup[i] * (test_tup[i+1])\n    return result_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #raise NotImplementedError('Function multiply_elements has not yet been implemented.')\n    return tuple([test_tup[0] * test_tup[i+1] for i in range(len(test_tup))])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return_tuple = ()\n    for i in range(len(test_tup)):\n        return_tuple = return_tuple + (test_tup[i] * test_tup[(i+1) % len(test_tup)])\n    return return_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) > len(test_tup[0]):\n        tuple_new = test_tup[:len(test_tup[0])]\n        for i in range(len(test_tup)):\n            tuple_new.append(test_tup[i][:len(test_tup[0])])\n        return tuple_new\n    else:\n        tuple_new = test_tup[:len(test_tup[0])]\n        for i in range(len(test_tup)):\n            tuple_new.append(test_tup[i][:len(test_tup[0])])\n        return tuple_new\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    t_1, t_2, t_3 = test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return None\n    else:\n        return (tuple(map(lambda x: x * test_tup[0], test_tup[1:])))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert len(test_tup) <= 6\n    res = ()\n    for t in test_tup:\n        res += (t,)\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup_len = len(test_tup)\n    temp_tup = []\n    for i in range(test_tup_len):\n        temp_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(temp_tup)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1==[] or lst2==[]:\n        return 0\n    else:\n        return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!=len(lst2):\n        return None\n    sum=0\n    for i in range(len(lst1)):\n        sum+=lst1[i]+lst2[i]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #Your code here\n    if len(lst1)!= len(lst2):\n        raise Exception('Lengths must be same.')\n    summation = []\n    for i in lst1:\n        summation.append(i+lst2[0])\n    return summation\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if(lst1[0]!= lst2[0]):\n        lst2 = [sum(ele1) for ele1 in zip(lst1,lst2)]\n        return lst2\n    else:\n        return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Your code goes here\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in lst1:\n        result.append(i)\n    for i in lst2:\n        result.append(i)\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in lst1:\n        result.append(i+lst2)\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == 0 or len(lst2) == 0:\n        raise ValueError(\"Must provide two lists of integers.\")\n    if len(lst1) == 1 and len(lst2) == 1:\n        return lst1[0] + lst2[0]\n    return lst1[0] + lst2[0] + sum_list(lst1[1:],lst2[1:])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result=[]\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = 0\n    for i in lst1:\n        s += i\n    for i in lst2:\n        s -= i\n    return s\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # The idea is to use a set to remove duplicates.\n    # We should also remove duplicates from the original list\n    # if it is not the case.\n    # If the new list does not contain duplicates, we just keep\n    # the original list\n    set_of_duplicates = set()\n    for element in nums:\n        if element in set_of_duplicates:\n            continue\n        else:\n            set_of_duplicates.add(element)\n    \n    nums_no_duplicates = []\n    for element in nums:\n        if element in set_of_duplicates:\n            continue\n        else:\n            nums_no_duplicates.append(element)\n    \n    return nums_no_duplicates\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(nums)\n    nums.sort()\n    print(nums)\n    i = 0\n    while i < len(nums) - 2:\n        if nums[i]!= nums[i + 1]:\n            if nums[i + 2]!= nums[i + 1]:\n                return nums[i]\n        i += 1\n    return nums[-1]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    dict = {}\n    for i in range(len(nums)):\n        if nums[i] in dict:\n            dict[nums[i]] = dict[nums[i]] + 1\n        else:\n            dict[nums[i]] = 1\n    return [key for key, value in dict.items() if value == 1]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for x in nums:\n        for y in range(len(nums)-1):\n            if nums[y]!= x:\n                nums[y+1] = nums[y]\n                break\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = groupby(nums, key=lambda num: num if num not in nums else None)\n    return [list(g) for k, g in groups]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    output = []\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    a_list = list(nums)\n    if len(a_list) > 1:\n        for i in range(1, len(a_list)):\n            if a_list[i]!= a_list[i - 1]:\n                a_list[i] = a_list[i - 1]\n                a_list[i - 1] = a_list[i]\n    return a_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                result.append((nums[i], nums[j]))\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Check the first occurrence of the item in nums.\n    # If the item is already present in the list, just remove it.\n    # If the item is not already present, add the item to the list and remove it.\n    \n    '''\n    # Set of tuples of (item, index).\n    # {'item': 0, 'index': 3}\n    item_index = {i:j for i,j in enumerate(nums)}\n    \n    # Initialize variables.\n    seen = set()\n    count = 0\n    \n    for i in nums:\n        # If i has already been seen, skip.\n        if i in seen:\n            continue\n        # If the count is at least 1, add an item.\n        if count >= 1:\n            seen.add(i)\n        # If the count is 0, skip.\n        elif count == 0:\n            continue\n        else:\n            count = count + 1\n            # If the item was not already present.\n            if item_index[i] >= 0:\n                # If i is the first time seen, skip.\n                if item_index[i] == 0:\n                    continue\n                # If the item was already seen, remove it.\n                else:\n                    del nums[item_index[i]]\n                    count = count - 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    l = len(nums)\n    i = 0\n    while i < l:\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n            i = i-1\n        else:\n            i = i+1\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # declare the variables that store the height of the body and the direction of the cone\n    b = h\n    dir = 1\n    # declare the variables that store the area of the cone\n    area = 0\n    # get the value of r for the cone\n    cone = r\n    # iterate over the value of r for the cone\n    while (cone > b):\n        # calculate the height of the body and the direction\n        height = b * math.sin(b * math.pi/360.0)\n        direction = b * math.cos(b * math.pi/360.0)\n        # calculate the area of the cone\n        area = math.pi * (cone * cone) * (height/dir)\n        # increment the cone value\n        cone = cone * 1.01\n        # increment the value of the direction\n        dir = dir * 1.01\n        # return the area\n        return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #if (h<1):\n    #    h=1\n    #    print(\"h value should be greater than 1\")\n    #elif (h>1000):\n    #    h=1000\n    #    print(\"h value should be less than 1000\")\n    #print(\"The method \" + str(h) + \" is used\")\n    print(\"Lateral Surface Area of a cone given radius = \" + str(r) + \" and height = \" + str(h))\n    print(\"The method is based on formula in Section 4.2 of: \" + str(h) + \" \" + str(r))\n    print(\"Are the lateral surface areas:\")\n    print(\"1. \" + str(r**2) + \" \" + \"sqrt(2)\")\n    print(\"2. \" + str(r**3) + \" \" + \"3sqrt(3)\")\n    print(\"3. \" + str(r**4) + \" \" + \"4sqrt(4)\")\n    print(\"4. \" + str(r**5) + \" \" + \"5sqrt(5)\")\n    print(\"5. \" + str(r**6) + \" \" + \"6sqrt(6)\")\n    print(\"6. \" + str(r**7) + \" \" + \"7sqrt(7)\")\n    print(\"7. \" + str(r**8) + \" \" + \"8sqrt(8)\")\n    print(\"8. \" + str(r**9) + \" \" + \"9sqrt(9)\")\n    print(\"9. \" + str(r**10) + \" \" + \"10sqrt(10)\")\n    print(\"10. \" + str(r**11) + \" \" + \"11sqrt(11)\")\n    print(\"11. \" + str(r**12) + \" \" + \"12sqrt(12)\")\n    print(\"12. \" + str(r**13) + \" \" + \"13sqrt(13)\")\n    print(\"13. \" + str(r**14) + \" \" + \"14sqrt(14)\")\n    print(\"14. \" + str(r**15) + \" \" + \"15sqrt(15)\")\n    print(\"15. \" + str(r**16) + \" \" + \"16sqrt(16)\")\n    print(\"16. \" + str(r**17) + \" \" + \"17sqrt(17)\")\n    print(\"17. \" + str(r**18) + \" \" + \"18sqrt(18)\")\n    print(\"18. \" + str(r**19) + \" \" + \"19sqrt(19)\")\n    print(\"19. \" + str(r**20) + \" \" + \"20sqrt(20)\")\n    print(\"20. \" + str(r**21) + \" \" + \"21sqrt(21)\")\n    print(\"21. \" + str(r**22) + \" \" + \"22sqrt(22)\")\n    print(\"22. \" + str(r**23) + \" \" + \"23sqrt(23)\")\n    print(\"23. \" + str(r**24) + \" \" + \"24sqrt(24)\")\n    print(\"24. \" + str(r**25) + \" \" + \"25sqrt(25)\")\n    print(\"25. \" + str(r**26) + \" \" + \"26sqrt(26)\")\n    print(\"26. \" + str(r**27) + \" \" + \"27sqrt(27)\")\n    print(\"27. \" + str(r**28) + \" \" + \"28sqrt(28)\")\n    print(\"28. \" + str(r**29) + \" \" + \"29sqrt(29)\")\n    print(\"29. \" + str(r**30) + \" \" + \"30sqrt(30)\")\n    print(\"30. \" + str(r**31) + \" \" + \"31sqrt(31)\")\n    print(\"31. \" + str(r**32) + \" \" + \"32sqrt(32)\")\n    print(\"32. \" + str(r**33) + \" \" + \"33sqrt(33)\")\n    print(\"33. \" + str(r**34) + \" \" + \"34sqrt(34)\")\n    print(\"34. \" + str(r**35) + \" \" + \"35sqrt(35)\")\n    print(\"35. \" + str(r**36) + \" \" + \"36sqrt(36)\")\n    print(\"36. \" + str(r**37) + \" \" + \"37sqrt(37)\")\n    print(\"37. \" + str(r**38) + \" \" + \"38sqrt(38)\")\n    print(\"38. \" + str(r**39) + \" \" + \"39sqrt(39)\")\n    print(\"39. \" + str(r**40) + \" \" + \"40sqrt(40)\")\n    print(\"40. \" + str(r**41) + \" \" + \"41sqrt(41)\")\n    print(\"41. \" + str(r**42) + \" \" + \"42sqrt(42)\")\n    print(\"42. \" + str(r**43) + \" \" + \"43sqrt(43)\")\n    print(\"43. \" + str(r**44) + \" \" + \"44sqrt(44)\")\n    print(\"44. \" + str(r**45) + \" \" + \"45sqrt(45)\")\n    print(\"45. \" + str(r**46) + \" \" + \"46sqrt(46)\")\n    print(\"46. \" + str(r**47) + \" \" + \"47sqrt(47)\")\n    print(\"47. \" + str(r**48) + \" \" + \"48sqrt(48)\")\n    print(\"48. \" + str(r**49) + \" \" + \"49sqrt(49)\")\n    print(\"49. \" + str(r**50) + \" \" + \"50sqrt(50)\")\n    print(\"50. \" + str(r**51) + \" \" + \"51sqrt(51)\")\n    print(\"51. \" + str(r**52) + \" \" + \"52sqrt(52)\")\n    print(\"52. \" + str(r**53) + \" \" + \"53sqrt(53)\")\n    print(\"53. \" + str(r**54) + \" \" + \"54sqrt(54)\")\n    print(\"54. \" + str(r**55) + \" \" + \"55sqrt(55)\")\n    print(\"55. \" + str(r**56) + \" \" + \"56sqrt(56)\")\n    print(\"56. \" + str(r**57) + \" \" + \"57sqrt(57)\")\n    print(\"57. \" + str(r**58) + \" \" + \"58sqrt(58)\")\n    print(\"58. \" + str(r**59) + \" \" + \"59sqrt(59)\")\n    print(\"59. \" + str(r**60) + \" \" + \"60sqrt(60)\")\n    print(\"60. \" + str(r**61) + \" \" + \"61sqrt(61)\")\n    print(\"61. \" + str(r**62) + \" \" + \"62sqrt(62)\")\n    print(\"62. \" + str(r**63) + \" \" + \"63sqrt(63)\")\n    print(\"63. \" + str(r**64) + \" \" + \"64sqrt(64)\")\n    print(\"64. \" + str(r**65) + \" \" + \"65sqrt(65)\")\n    print(\"65. \" + str(r**66) + \" \" + \"66sqrt(66)\")\n    print(\"66. \" + str(r**67) + \" \" + \"67sqrt(67)\")\n    print(\"67. \" + str(r**68) + \" \" + \"68sqrt(68)\")\n    print(\"68. \" + str(r**69) + \" \" + \"69sqrt(69)\")\n    print(\"69. \" + str(r**70) + \" \" + \"70sqrt(70)\")\n    print(\"70. \" + str(r**71) + \" \" + \"71sqrt(71)\")\n    print(\"71. \" + str(r**72) + \" \" + \"72sqrt(72)\")\n    print(\"72"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    n = (2 * math.pi * r) * math.sin(h / 2)\n    return n*(n/r)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*r/h)**(1/3)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    L1 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L2 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L3 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L4 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L5 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L6 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L7 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L8 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L9 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L10 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L11 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L12 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L13 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L14 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L15 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L16 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L17 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L18 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L19 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L20 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L21 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L22 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L23 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L24 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L25 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L26 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L27 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L28 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L29 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L30 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L31 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L32 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L33 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L34 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L35 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L36 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L37 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L38 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L39 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L40 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L41 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L42 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L43 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L44 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L45 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L46 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L47 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L48 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.radians(h)),2))\n    L49 = r*math.sqrt(1-math.pow(r,2)*math.pow(math.cos(math.ra"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # These are the parameters we need to compute\n    phi = math.acos(r/math.sqrt(2))\n    theta = math.acos(h/math.sqrt(2))\n    # We need to compute the area of the cone and the depth of the surface\n    r_s = math.sqrt(r**2 - r**2 * math.sin(phi)**2 - h**2 * math.sin(theta)**2)\n    # The surface area of the surface is the negative of the volume of the cone\n    r_s = -r_s\n    return r_s\ndef surface_area_cone(r,h):\n    '''\n    Write a function to compute the surface area of a cone given the radius r and the height h.\n    '''\n    # These are the parameters we need to compute\n    phi = math.acos(r/math.sqrt(2))\n    theta = math.acos(h/math.sqrt(2))\n    # The surface area of the surface is the negative of the volume of the cone\n    r_s = -r\n    # The area of the cone is the positive of the volume of the cone\n    r_s = -r_s\n    # This formula computes the volume of a surface\n    v = (math.sqrt(r**2 - r**2 * math.sin(phi)**2 - h**2 * math.sin(theta)**2))\n    # A constant of pi is converted to the degree of freedom of the earth\n    return v * math.pi\ndef area_cone(r,h):\n    '''\n    Write a function to compute the area of a cone given the radius r and the height h.\n    '''\n    # These are the parameters we need to compute\n    phi = math.acos(r/math.sqrt(2))\n    theta = math.acos(h/math.sqrt(2))\n    # The surface area of the surface is the negative of the volume of the cone\n    r_s = -r\n    # The area of the cone is the positive of the volume of the cone\n    r_s = -r_s\n    # This formula computes the volume of a surface\n    v = (math.sqrt(r**2 - r**2 * math.sin(phi)**2 - h**2 * math.sin(theta)**2))\n    # A constant of pi is converted to the degree of freedom of the earth\n    return v * math.pi\ndef surface_volume_cone(r,h):\n    '''\n    Write a function to compute the surface area of a cone given the radius r and the height h.\n    '''\n    # These are the parameters we need to compute\n    phi = math.acos(r/math.sqrt(2))\n    theta = math.acos(h/math.sqrt(2))\n    # The surface area of the surface is the negative of the volume of the cone\n    r_s = -r\n    # The area of the cone is the positive of the volume of the cone\n    r_s = -r_s\n    # This formula computes the volume of a surface\n    v = (math.sqrt(r**2 - r**2 * math.sin(phi)**2 - h**2 * math.sin(theta)**2))\n    # A constant of pi is converted to the degree of freedom of the earth\n    return v * math.pi\ndef volume_cone(r,h):\n    '''\n    Write a function to compute the surface area of a cone given the radius r and the height h.\n    '''\n    # These are the parameters we need to compute\n    phi = math.acos(r/math.sqrt(2))\n    theta = math.acos(h/math.sqrt(2))\n    # The surface area of the surface is the negative of the volume of the cone\n    r_s = -r\n    # The area of the cone is the positive of the volume of the cone\n    r_s = -r_s\n    # This formula computes the volume of a surface\n    v = (math.sqrt(r**2 - r**2 * math.sin(phi)**2 - h**2 * math.sin(theta)**2))\n    # A constant of pi is converted to the degree of freedom of the earth\n    return v * math.pi\ndef perlin_fib(x,y):\n    '''\n    Write a function to compute the perlin value for a given x and y coordinates.\n    '''\n    # These are the parameters we need to compute\n    x = float(x)\n    y = float(y)\n    # We need to convert from meters to meters\n    x *= 1000\n    # We need to convert from meters to meters\n    y *= 1000\n    # We need to compute the value of the perlin function\n    return math.pow(math.sin(y/6) + math.sin(x/6), 3.0/6.0)\ndef perlin_data(x,y):\n    '''\n    Write a function to compute the perlin value for a given x and y coordinates.\n    '''\n    # These are the parameters we need to compute\n    x = float(x)\n    y = float(y)\n    # We need to convert from meters to meters\n    x *= 1000\n    # We need to convert from meters to meters\n    y *= 1000\n    # We need to compute the value of the perlin function\n    return math.pow(math.sin(y/6) + math.sin(x/6), 3.0/6.0)\ndef gradient_of_sine(x,y):\n    '''\n    Write a function to compute the sine curve on a given x,y coordinate.\n    '''\n    # These are the parameters we need to compute\n    x = float(x)\n    y = float(y)\n    # We need to convert from meters to meters\n    x *= 1000\n    # We need to convert from meters to meters\n    y *= 1000\n    # We need to compute the value of the sine curve\n    return math.sin(y/6)\ndef gradient_of_linear(x,y):\n    '''\n    Write a function to compute the linear curve on a given x,y coordinate.\n    '''\n    # These are the parameters we need to compute\n    x = float(x)\n    y = float(y)\n    # We need to convert from meters to meters\n    x *= 1000\n    # We need to convert from meters to meters\n    y *= 1000\n    # We need to compute the value of the sine curve\n    return math.sin(y/6)\ndef gradient_of_quadratic(x,y):\n    '''\n    Write a function to compute the quadratic curve on a given x,y coordinate.\n    '''\n    # These are the parameters we need to compute\n    x = float(x)\n    y = float(y)\n    # We need to convert from meters to meters\n    x *= 1000\n    # We need to convert from meters to meters\n    y *= 1000\n    # We need to compute the value of the sine curve\n    return math.sin(y/6) * math.sin(y/6)\ndef gradient_of_cubic(x,y):\n    '''\n    Write a function to compute the cubic curve on a given x,y coordinate.\n    '''\n    # These are the parameters we need to compute\n    x = float(x)\n    y = float(y)\n    # We need to convert from meters to meters\n    x *= 1000\n    # We need to convert from meters to meters\n    y *= 1000\n    # We need to compute the value of the sine curve\n    return math.sin(y/6) * math.sin(y/6) * math.sin(y/6)\ndef gradient_of_hermite(x,y):\n    '''\n    Write a function to compute the hermite curve on a given x,y coordinate.\n    '''\n    # These are the parameters we need to compute\n    x = float(x)\n    y = float(y)\n    # We need to convert from meters to meters\n    x *= 1000\n    # We need to convert from meters to meters\n    y *= 1000\n    # We need to compute the value of the sine curve\n    return math.sin(y/6) * math.sin(y/6) * math.sin(y/6) * math.sin(y/6)\ndef gradient_o"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    #calculate the parallel surface area\n    s = (r**2+h**2)**0.5\n    \n    #calculate the lateral surface area\n    return h*s\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S = 0\n    for i in range(0,r,1):\n        S += i*(math.sin(math.radians(60)) + math.sin(math.radians(30)))*(math.cos(math.radians(60)) + math.cos(math.radians(30)))\n    return S\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    def re_special(m):\n        return m.group(0).replace(' ','') if m.group(0) else m.group(0)\n    pattern = re.compile(r'(\\s|\\D|\\w)+')\n    return pattern.sub(re_special, text)\n    \ndef replace_url(text):\n    '''\n    Write a function to replace all occurrences of \"http://\" or \"https://\" with a colon.\n    '''\n    def re_url(m):\n        return m.group(0) if m.group(0) else m.group(0)\n    pattern = re.compile(r'\\b(http://|https://)\\b')\n    return pattern.sub(re_url, text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_new = text\n    for char in \":;.!?,;':\" :\n        text_new = text_new.replace(char, \":\")\n        text_new = text_new.replace(char, \":\")\n        text_new = text_new.replace(char, \":\")\n        text_new = text_new.replace(char, \":\")\n        text_new = text_new.replace(char, \":\")\n    text_new = text_new.replace(text, \":\")\n    return text_new\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\"\\?\", \":\", text)\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\"\\?\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='' or char == ',' or char == '.' or char == ':' or char == '\"':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += '\\'\\'\\'\\''\n        elif char == '\\'':\n            new_text += '\\'\\''\n        elif char == '\\'':\n            new_text += '\\'\\''\n        elif char == '\\'':\n            new_text += '\\'\\'\\''\n        elif char == '\\n':\n            new_text += '\\n'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        else:\n            new_text += char\n    return new_text\ndef modify_special_char(text):\n    '''\n    Write a function to modify the given string, replacing all occurrences of special characters with colon.\n    '''\n    new_text = ''\n    for char in text:\n        if char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\n':\n            new_text += '\\n'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        else:\n            new_text += char\n    return new_text\ndef remove_special_char(text):\n    '''\n    Write a function to remove all occurrences of special characters, according to the given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char == '\\'':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += ':'\n        elif char == '\\'':\n            new_text += ':'\n        elif char == '\\n':\n            new_text += '\\n'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        else:\n            new_text += char\n    return new_text\ndef replace_with_specialchar(text):\n    '''\n    Write a function to replace all occurrences of special characters with colon.\n    '''\n    new_text = ''\n    for char in text:\n        if char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\n':\n            new_text += '\\n'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        else:\n            new_text += char\n    return new_text\ndef remove_with_specialchar(text):\n    '''\n    Write a function to remove all occurrences of special characters, according to the given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\'':\n            new_text += ':'''\n        elif char == '\\n':\n            new_text += '\\n'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        elif char == '\\r':\n            new_text += '\\r'\n        elif char == '\\t':\n            new_text += '\\t'\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\D+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+\\s+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n    text = re.sub(r'\\d+', ':', text)\n    text = re.sub(r'\\s+|\\S+\\s+', ':', text)\n    text = re.sub(r'\\S+', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[ ]{2,}', ':', text)\n    text = re.sub('[,]', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[,]', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[ ]{2,}', ':', text)\n    text = re.sub('[,]', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.]{2,}', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', text)\n    text = re.sub('[.,]', ':', tex"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # S-pattern\n    S = \"[a-zA-Z0-9_]+\"\n    # D-pattern\n    D = \"[A-Z_]+\"\n    # E-pattern\n    E = \"[0-9]+\"\n    # G-pattern\n    G = \"[0-9]+\\.?[0-9]+\"\n    # H-pattern\n    H = \"[0-9]+\\.?[0-9]+\"\n    # I-pattern\n    I = \"[0-9]+\\.?[0-9]+\"\n    # K-pattern\n    K = \"[0-9]+\\.?[0-9]+\"\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':' )\n    text = text.replace('/', ';')\n    text = text.replace('\\\\', ':')\n    text = text.replace(',', ':' )\n    text = text.replace('(', ':' )\n    text = text.replace('[', ':' )\n    text = text.replace(']', ':')\n    text = text.replace(':', ';')\n    text = text.replace(']', ';')\n    text = text.replace('[', ';')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s+'\n    text = re.sub(pattern, r' : ', text)\n    pattern = r'\\d+'\n    text = re.sub(pattern, r': ', text)\n    pattern = r'\\W+'\n    text = re.sub(pattern, r' : ', text)\n    pattern = r'\\W+'\n    text = re.sub(pattern, r' : ', text)\n    pattern = r'\\W+'\n    text = re.sub(pattern, r' : ', text)\n    pattern = r'\\W+'\n    text = re.sub(pattern, r' : ', text)\n    pattern = r'\\W+'\n    text = re.sub(pattern, r' : ', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'(?:\\s){2,}', ':', text)\n    text = re.sub(r'(?:\\s{2,})|(?:\\s{2}|\\,|:)', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2})|(?:\\s{2,}|\\,|:)', ':', text)\n    text = re.sub(r'(?:\\s){2,}', ':', text)\n    text = re.sub(r'(?:\\s{2,})|(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s){2,}', ':', text)\n    text = re.sub(r'(?:\\s{2,})|(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2})|(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})|(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)\n    text = re.sub(r'(?:\\s{2,})', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A is None:\n        return None\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n < 2:\n        return n\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    m = len(A)\n    l = 0\n    r = m-1\n    while l<=r:\n        mid = l+((r-l)//2)\n        if A[mid] == x:\n            return mid\n        elif A[mid]<x:\n            l = mid+1\n        else:\n            r = mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    print(A)\n    if A[0] == x:\n        return 0\n    elif A[0] > x:\n        return find_first_occurrence(A[1:], x)\n    else:\n        return find_first_occurrence(A[1:], x) + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # create a dummy array\n    dummy_array = [0] * len(A)\n    # fill the array with numbers\n    for i in range(len(A)):\n        dummy_array[i] = A[i]\n    # sort array\n    dummy_array = sorted(dummy_array)\n    # check if x is present in the array\n    for i in range(len(dummy_array)):\n        if dummy_array[i] == x:\n            return i\n    # return -1 if not found\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    return find_index(A, A.index(x), 0, len(A) - 1)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    s = 0\n    e = len(A)-1\n    \n    while s < e:\n        mid = (s + e)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            s = mid+1\n        else:\n            e = mid-1\n    \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    A = sorted(A)\n    i = 0\n    j = len(A)-1\n    while i<j:\n        m = i + j / 2\n        if A[m] == x:\n            return m\n        elif A[m] > x:\n            i = m+1\n        else:\n            j = m\n    if A[i] == x:\n        return i\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence_index = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n    return first_occurrence_index\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_index = 0\n    n = len(A)\n    while(first_index < n):\n        if A[first_index] == x:\n            return first_index\n        elif A[first_index] > x:\n            first_index = first_index + 1\n        else:\n            return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    l = [1 for i in range(n)]\n    \n    for i in range(1, n):\n        l[i] = arr[i] * arr[i-1]\n    \n    for i in range(n-2, -1, -1):\n        l[i] = arr[i] * l[i+1]\n    \n    return l[n-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    maxSum = arr[0]\n    for i in range(1, len(arr)):\n        prod *= arr[i]\n        maxSum = max(maxSum, prod)\n    return maxSum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    i = 0\n    j = 0\n    lst = list(arr)\n    while i < len(lst) - 1:\n        if lst[i] * lst[j] == 0:\n            if i == 0 or lst[i - 1]!= 0:\n                i += 1\n            elif j == 0 or lst[j + 1]!= 0:\n                j += 1\n        else:\n            sum += lst[i] * lst[j]\n            i += 1\n            j += 1\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    output = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    from collections import Counter\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total_product = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            total_product += arr[j]*arr[i]\n    return total_product\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    k=0\n    ans=0\n    for i in range(n):\n        for j in range(i,n):\n            ans=ans+arr[i]*arr[j]\n            #print(arr[i]*arr[j])\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_prod = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # array = arr[:-1]\n    # sub = arr[1:]\n    # s = 0\n    # sum_ = 0\n    # for i in range(len(array)):\n    #     for j in range(len(sub)):\n    #         s = array[i]*sub[j]\n    #         if s == 1:\n    #             sum_ = s\n    #         else:\n    #             sum_ = s + sum_\n    #     sum_ = sum_ - 1\n    # return sum_\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            temp = arr[i]*arr[j]\n            ans = ans + temp\n    return ans\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = bin(n).replace(\"0b\", \"\")\n    a = a[2:]\n    a = a[::-1]\n    if a[0] == '1':\n        b = \"0\"\n    else:\n        b = \"1\"\n    return b + a[-1]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n + 1\n    print(\"Before:\", n)\n    n = n << 1\n    print(\"After:\", n)\n    n = n + 1\n    print(\"0+1:\", n)\n    n = n >> 1\n    print(\"0-1:\", n)\n    n = n >> 1\n    print(\"1+1:\", n)\n    n = n >> 1\n    print(\"1-1:\", n)\n    n = n >> 1\n    print(\"2+1:\", n)\n    n = n >> 1\n    print(\"2-1:\", n)\n    n = n >> 1\n    print(\"3+1:\", n)\n    n = n >> 1\n    print(\"3-1:\", n)\n    n = n >> 1\n    print(\"4+1:\", n)\n    n = n >> 1\n    print(\"4-1:\", n)\n    n = n >> 1\n    print(\"5+1:\", n)\n    n = n >> 1\n    print(\"5-1:\", n)\n    n = n >> 1\n    print(\"6+1:\", n)\n    n = n >> 1\n    print(\"6-1:\", n)\n    n = n >> 1\n    print(\"7+1:\", n)\n    n = n >> 1\n    print(\"7-1:\", n)\n    n = n >> 1\n    print(\"8+1:\", n)\n    n = n >> 1\n    print(\"8-1:\", n)\n    n = n >> 1\n    print(\"9+1:\", n)\n    n = n >> 1\n    print(\"9-1:\", n)\n    n = n >> 1\n    print(\"10+1:\", n)\n    n = n >> 1\n    print(\"10-1:\", n)\n    n = n >> 1\n    print(\"11+1:\", n)\n    n = n >> 1\n    print(\"11-1:\", n)\n    n = n >> 1\n    print(\"12+1:\", n)\n    n = n >> 1\n    print(\"12-1:\", n)\n    n = n >> 1\n    print(\"13+1:\", n)\n    n = n >> 1\n    print(\"13-1:\", n)\n    n = n >> 1\n    print(\"14+1:\", n)\n    n = n >> 1\n    print(\"14-1:\", n)\n    n = n >> 1\n    print(\"15+1:\", n)\n    n = n >> 1\n    print(\"15-1:\", n)\n    n = n >> 1\n    print(\"16+1:\", n)\n    n = n >> 1\n    print(\"16-1:\", n)\n    n = n >> 1\n    print(\"17+1:\", n)\n    n = n >> 1\n    print(\"17-1:\", n)\n    n = n >> 1\n    print(\"18+1:\", n)\n    n = n >> 1\n    print(\"18-1:\", n)\n    n = n >> 1\n    print(\"19+1:\", n)\n    n = n >> 1\n    print(\"19-1:\", n)\n    n = n >> 1\n    print(\"20+1:\", n)\n    n = n >> 1\n    print(\"20-1:\", n)\n    n = n >> 1\n    print(\"21+1:\", n)\n    n = n >> 1\n    print(\"21-1:\", n)\n    n = n >> 1\n    print(\"22+1:\", n)\n    n = n >> 1\n    print(\"22-1:\", n)\n    n = n >> 1\n    print(\"23+1:\", n)\n    n = n >> 1\n    print(\"23-1:\", n)\n    n = n >> 1\n    print(\"24+1:\", n)\n    n = n >> 1\n    print(\"24-1:\", n)\n    n = n >> 1\n    print(\"25+1:\", n)\n    n = n >> 1\n    print(\"25-1:\", n)\n    n = n >> 1\n    print(\"26+1:\", n)\n    n = n >> 1\n    print(\"26-1:\", n)\n    n = n >> 1\n    print(\"27+1:\", n)\n    n = n >> 1\n    print(\"27-1:\", n)\n    n = n >> 1\n    print(\"28+1:\", n)\n    n = n >> 1\n    print(\"28-1:\", n)\n    n = n >> 1\n    print(\"29+1:\", n)\n    n = n >> 1\n    print(\"29-1:\", n)\n    n = n >> 1\n    print(\"30+1:\", n)\n    n = n >> 1\n    print(\"30-1:\", n)\n    n = n >> 1\n    print(\"31+1:\", n)\n    n = n >> 1\n    print(\"31-1:\", n)\n    n = n >> 1\n    print(\"32+1:\", n)\n    n = n >> 1\n    print(\"32-1:\", n)\n    n = n >> 1\n    print(\"33+1:\", n)\n    n = n >> 1\n    print(\"33-1:\", n)\n    n = n >> 1\n    print(\"34+1:\", n)\n    n = n >> 1\n    print(\"34-1:\", n)\n    n = n >> 1\n    print(\"35+1:\", n)\n    n = n >> 1\n    print(\"35-1:\", n)\n    n = n >> 1\n    print(\"36+1:\", n)\n    n = n >> 1\n    print(\"36-1:\", n)\n    n = n >> 1\n    print(\"37+1:\", n)\n    n = n >> 1\n    print(\"37-1:\", n)\n    n = n >> 1\n    print(\"38+1:\", n)\n    n = n >> 1\n    print(\"38-1:\", n)\n    n = n >> 1\n    print(\"39+1:\", n)\n    n = n >> 1\n    print(\"39-1:\", n)\n    n = n >> 1\n    print(\"40+1:\", n)\n    n = n >> 1\n    print(\"40-1:\", n)\n    n = n >> 1\n    print(\"41+1:\", n)\n    n = n >> 1\n    print(\"41-1:\", n)\n    n = n >> 1\n    print(\"42+1:\", n)\n    n = n >> 1\n    print(\"42-1:\", n)\n    n = n >> 1\n    print(\"43+1:\", n)\n    n = n >> 1\n    print(\"43-1:\", n)\n    n = n >> 1\n    print(\"44+1:\", n)\n    n = n >> 1\n    print(\"44-1:\", n)\n    n = n >> 1\n    print(\"45+1:\", n)\n    n = n >> 1\n    print(\"45-1:\", n)\n    n = n >> 1\n    print(\"46+1:\", n)\n    n = n >> 1\n    print(\"46-1:\", n)\n    n = n >> 1\n    print(\"47+1:\", n)\n    n = n >> 1\n    print(\"47-1:\", n)\n    n = n >> 1\n    print(\"48+1:\", n)\n    n = n >> 1\n    print(\"48-1:\", n)\n    n = n >> 1\n    print(\"49+1:\", n)\n    n = n >> 1\n    print(\"49-1:\", n)\n    n = n >> 1\n    print(\"50+1:\", n)\n    n = n >> 1\n    print(\"50-1:\", n)\n    n = n >> 1\n    print(\"51+1:\", n)\n    n = n >> 1\n    print(\"51-1:\", n)\n    n = n >> 1\n    print(\"52+1:\", n)\n    n = n >> 1\n    print(\"52-1:\", n)\n    n = n >> 1\n    print(\"53+1:\", n)\n    n = n >> 1\n    print(\"53-1:\", n)\n    n = n >> 1"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    val = n % 2\n    val1 = (n % 2) - 1\n    if(val == 0):\n        n = (n-1)\n    elif(val == 1):\n        n = (n+1)\n    else:\n        return -1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the mask as 0 and the first and last bits as 1\n    # Mask is odd and 1 if the first bit is set and 0 if the last bit is set\n    mask = 0\n    first_bit = 1\n    last_bit = 0\n    \n    # Write your code here\n    for i in range(len(n) - 1):\n        # Store the bit of the number\n        mask |= (1 << (len(n) - 1 - i))\n        # Toggle bit of the number\n        mask |= (1 << i)\n        # Check if the bit is set\n        if mask & 1:\n            first_bit = 0\n        else:\n            first_bit = 1\n        # Check if the last bit is set\n        if mask & 2:\n            last_bit = 0\n        else:\n            last_bit = 1\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n):\n        return 1 - (n & n - 1) # 1 - (n & n-1) # 0 - 1\n    return toggle_bits\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    temp = bin(n)[2:]\n    print(temp)\n    temp2 = temp[2:]\n    temp3 = temp2[::-1]\n    print(temp3)\n    print(temp3[-1:])\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # TODO: set this function to toggle the first bit, the last bit, the only bit to toggle.\n    if n>=0:\n        return (n&1) ^ (n&(~n>>1))\n    else:\n        return n & (~n>>1)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    last_bit = n & 0x01\n    n >>= 1\n    first_bit = n & 0x01\n    n >>= 1\n    return n, first_bit, last_bit\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & ~(n>>1)\n    \nprint(set_middle_bits(31))"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = n\n    i = a[0]\n    j = a[1]\n    k = 0\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    j=bisect.bisect_left(a,x)\n    if j==0: return j+1\n    elif j==len(a): return len(a)\n    else: return j\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    j=bisect.bisect_right(a,x)\n    if j==len(a): return j+1\n    elif j==0: return len(a)\n    else: return j\ndef get_min_value_in_array(a):\n    '''\n    Write a function to find the minimum value in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx=0\n    while a[idx]<a[idx+1]:\n        idx+=1\n    return idx\ndef get_max_value_in_array(a):\n    '''\n    Write a function to find the maximum value in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx=0\n    while a[idx]<a[idx+1]:\n        idx+=1\n    return idx\ndef get_average_value_in_array(a):\n    '''\n    Write a function to find the average value in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return sum(a) / len(a)\ndef add_values(a,b):\n    '''\n    Write a function to add two numbers together. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    j=len(a)\n    while i<j:\n        a[i]=b[i]\n        i+=1\n        j-=1\ndef insert_values(a,b):\n    '''\n    Write a function to insert two numbers in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    j=len(a)\n    while i<j:\n        if a[i]<b[i]:\n            a.insert(i,b[i])\n        else:\n            a.insert(i,a[i])\n        i+=1\n        j-=1\ndef shell_sort(a):\n    '''\n    Write a function to sort a list in a linear time using shell sorting. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n=len(a)\n    gap=n//3\n    while gap>=0:\n        for i in range(gap,n):\n            j=i\n            while j>=gap and a[j]<a[j-gap]:\n                a[j-gap],a[j]=a[j],a[j-gap]\n                j-=gap\n        gap//=3\n    print(a)\ndef quick_sort(a):\n    '''\n    Write a function to sort a list in a linear time using quick sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n=len(a)\n    if n<=1: return a\n    pivot=a[0]\n    left=a[1:n//2]\n    right=a[n//2:n]\n    i=0\n    j=n-1\n    while i<len(left):\n        if a[i]<=pivot:\n            a[i],a[j]=a[j],a[i]\n            j-=1\n        i+=1\n    while j>=0:\n        if a[j]<=pivot:\n            a[i],a[j]=a[j],a[i]\n            i+=1\n        j-=1\n    a[i:]=left+right\n    return a\ndef merge_sort(a):\n    '''\n    Write a function to sort a list in a linear time using merge sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)<=1: return a\n    gap=len(a)//2\n    left=a[:gap]\n    right=a[gap:]\n    left_merge_sort(left)\n    right_merge_sort(right)\n    return merge(left,right)\ndef merge(left,right):\n    '''\n    Write a function to sort two sorted lists. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=0\n    j=len(left)\n    k=len(right)\n    l=0\n    r=0\n    while i<j and k>0:\n        if left[i]<right[k]:\n            a[l]=left[i]\n            l+=1\n            i+=1\n        elif left[i]>right[k]:\n            a[l]=right[k]\n            l+=1\n            k-=1\n        else:\n            a[l]=left[i]\n            i+=1\n            l+=1\n            a[l]=right[k]\n            k-=1\n    while i<j:\n        a[l]=left[i]\n        a[r]=right[i]\n        i+=1\n        l+=1\n        r+=1\n    return a\ndef quick_sort_2(a):\n    '''\n    Write a function to sort a list in a linear time using quick sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)<=1: return a\n    gap=len(a)//2\n    left=a[:gap]\n    right=a[gap:]\n    left_quick_sort_2(left)\n    right_quick_sort_2(right)\n    return merge(left,right)\ndef left_quick_sort_2(a):\n    '''\n    Write a function to sort a list in a linear time using quick sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)<=1: return a\n    i=0\n    j=len(a)\n    k=0\n    while i<j:\n        j-=1\n        while j>=i:\n            if a[i]<a[j]:\n                a[i],a[j]=a[j],a[i]\n                i+=1\n                j-=1\n            else:\n                break\n        if i<j:\n            a[i],a[j]=a[j],a[i]\n            i+=1\n    return a\ndef right_quick_sort_2(a):\n    '''\n    Write a function to sort a list in a linear time using quick sort. https://www.w3resource.com/python-exer"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a)-1\n    if x == a[right]:\n        return right\n    elif x < a[right]:\n        while right > left:\n            mid = right - left\n            if a[right] < a[left]:\n                if x < a[right]:\n                    left = mid\n                else:\n                    right = mid\n            else:\n                break\n        return right\n    elif x > a[right]:\n        while left < right:\n            mid = left + (right - left)//2\n            if a[mid] < x:\n                left = mid\n            else:\n                right = mid\n        return left\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #find the index of the value\n    n = len(a)\n    m = n - 1\n    while m >= 0 and a[m] > x:\n        m -= 1\n    if m < 0:\n        return n\n    else:\n        return m + 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #find the index of the value\n    n = len(a)\n    m = n - 1\n    while m >= 0 and a[m] < x:\n        m -= 1\n    if m < 0:\n        return n\n    else:\n        return m + 1\ndef selection_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    for i in range(0, len(a)):\n        m = i\n        for j in range(i, len(a)):\n            if a[j] < a[m]:\n                m = j\n        a[i], a[m] = a[m], a[i]\n    return a\ndef bubble_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    for i in range(0, len(a)):\n        m = len(a) - 1\n        for j in range(0, len(a)):\n            if a[j] > a[m]:\n                a[j], a[m] = a[m], a[j]\n    return a\ndef merge_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    def merge(a1, a2):\n        x = a1[0] + a2[0]\n        y = a1[1] + a2[1]\n        z = a1[2] + a2[2]\n        if x > y + z:\n            return a\n        elif x > y:\n            a[0] = x\n            a[0] = y\n            return a\n        elif x < y:\n            a[1] = x\n            a[1] = y\n            return a\n    if len(a) > 1:\n        m = len(a) // 2\n        a1 = a[:m]\n        a2 = a[m:]\n        a1 = merge(a1, a2)\n    return a\ndef quick_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    def merge(a1, a2):\n        x = a1[0] + a2[0]\n        y = a1[1] + a2[1]\n        z = a1[2] + a2[2]\n        if x > y + z:\n            return a\n        elif x < y:\n            a[0] = x\n            a[0] = y\n            return a\n        elif x > z:\n            a[1] = x\n            a[1] = y\n            return a\n    if len(a) > 1:\n        m = len(a) // 2\n        a1 = a[:m]\n        a2 = a[m:]\n        a1 = merge(a1, a2)\n    return a\ndef heap_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    def heapify(a, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and a[i] < a[l]:\n            largest = l\n        if r < n and a[largest] < a[r]:\n            largest = r\n        if largest!= i:\n            a[i], a[largest] = a[largest], a[i]\n            heapify(a, n, largest)\n    n = len(a)\n    for i in range(n // 2, -1, -1):\n        heapify(a, n, i)\n    for i in range(n - 1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify(a, i, 0)\n    return a\ndef counting_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    n = len(a)\n    counts = [0] * (n + 1)\n    for i in range(0, n):\n        counts[a[i]] += 1\n    for i in range(1, len(counts)):\n        counts[i] += counts[i - 1]\n    for i in range(len(a) - 1, -1, -1):\n        a[i] = counts[a[i]]\n    return a\ndef counting_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    n = len(a)\n    counts = [0] * (n + 1)\n    for i in range(0, n):\n        counts[a[i]] += 1\n    for i in range(1, len(counts)):\n        counts[i] += counts[i - 1]\n    for i in range(len(a) - 1, -1, -1):\n        a[i] = counts[a[i]]\n    return a\ndef counting_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    n = len(a)\n    counts = [0] * (n + 1)\n    for i in range(0, n):\n        counts[a[i]] += 1\n    for i in range(1, len(counts)):\n        counts[i] += counts[i - 1]\n    for i in range(len(a) - 1, -1, -1):\n        a[i] = counts[a[i]]\n    return a\ndef radix_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    def counting_sort_decorator(a):\n        n = len(a)\n        counts = [0] * (n + 1)\n        for i in range(0, n):\n            counts[a[i]] += 1\n        for i in range(1, len(counts)):\n            counts[i] += counts[i - 1]\n        for i in range(len(a) - 1, -1, -1):\n            a[i] = counts[a[i]]\n    n = len(a)\n    counts = [0] * (n + 1)\n    for i in range(0, n):\n        counts[a[i]] += 1\n    for i in range(1, len(counts)):\n        counts[i] += counts[i - 1]\n    for i in range(len(a) - 1, -1, -1):\n        a[i] = counts[a[i]]\n    return a\ndef radix_sort(a):\n    '''\n    Write a function to sort an array.\n    '''\n    def counting_sort_decorator(a):\n        n = len(a)\n        counts = [0] * (n + 1)\n        for i in range(0, n):\n            counts[a[i]] += 1\n        for i in range(1, len(counts)):\n            counts[i] += counts[i - 1]\n        for i in range(len(a) - 1, -1, -1):\n            a[i] = counts[a[i]]\n    n = len(a)\n    counts = [0] * (n + 1)\n    for i in range(0, n):\n        counts[a[i]] += 1\n    for i in range(1, len(counts)):\n        counts[i] += counts[i - 1]\n    for i in range(len(a) - 1, -1, -1):\n        a[i] = counts[a[i]]\n    return "
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    mid = 0\n    while low <= high:\n        mid = (low+high) // 2\n        if a[mid] < x:\n            low = mid+1\n        else:\n            high = mid-1\n    return low\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.insert(0, x)\n    p = len(a)-1\n    for i in range(1, p):\n        if a[i] < x:\n            p -= 1\n            a[p], a[i] = a[i], a[p]\n    a[0], a[-1] = a[-1], a[0]\n    return p\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while a[i] < x:\n        i += 1\n        if i == len(a):\n            break\n    return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = len(a)\n    while a[i] > x:\n        i -= 1\n        if i == -1:\n            break\n    return i\ndef merge(a, l, m, r):\n    '''\n    a is a sorted array\n    l, r is the indices of l, and r respectively\n    '''\n    n1 = m - l + 1\n    n2 = r - m\n    \n    L = [0] * (n1)\n    R = [0] * (n2)\n    \n    for i in range(0, n1):\n        L[i] = a[l + i]\n    for i in range(0, n2):\n        R[i] = a[m + 1 + i]\n    \n    i = 0\n    j = 0\n    k = l\n    \n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            a[k] = L[i]\n            i += 1\n        else:\n            a[k] = R[j]\n            j += 1\n        k += 1\n    while i < n1:\n        a[k] = L[i]\n        i += 1\n        k += 1\n    while j < n2:\n        a[k] = R[j]\n        j += 1\n        k += 1\n    \n    \ndef quick_sort(a, l, r):\n    '''\n    Sort an array of integers in ascending order.\n    '''\n    if l >= r:\n        return\n    \n    p = partition(a, l, r)\n    quick_sort(a, l, p-1)\n    quick_sort(a, p+1, r)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return None\n    if x == a[0]:\n        return x\n    if x > a[0]:\n        return left_insertion(a[0], x)\n    if x < a[-1]:\n        return left_insertion(a[-1], x)\n    if x < a[-1]:\n        return a[bisect.bisect_right(a, x)]\n    if x < a[0]:\n        return a[bisect.bisect_left(a, x)]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    '''\n    Use bisect_left_insertion()\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if i < len(a) else i - len(a)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'aeiouAEIOU'\n    if re.search(vowels, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # vowels = ['A', 'E', 'I', 'O', 'U']\n    # if string[0] in vowels:\n    #     return True\n    # else:\n    #     return False\n    return all(ch in string for ch in ['A', 'E', 'I', 'O', 'U'])\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.lower()\n    pattern = re.compile(regex)\n    print(pattern.search(string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # read the string and remove the whitespaces\n    string = re.sub('\\s', '', string)\n    # split the string\n    list_string = string.split(' ')\n    # loop through the list to check for a vowel \n    for i in range(len(list_string)):\n        if list_string[i] in vowels:\n            return False\n    return True\n    \ndef word_check(word):\n    '''\n    Write a function that checks if the given word starts with vowel or not using regex.\n    '''\n    # read the string and remove the whitespaces\n    word = re.sub('\\s', '', word)\n    # split the string\n    list_word = word.split(' ')\n    # loop through the list to check for a vowel \n    for i in range(len(list_word)):\n        if list_word[i] in vowels:\n            return False\n    return True\n    \nvowels = ['a', 'e', 'i', 'o', 'u']\ndef check_vowel(string):\n    '''\n    Write a function to check whether the given string is vowel or not using regex.\n    '''\n    # read the string and remove the whitespaces\n    string = re.sub('\\s', '', string)\n    # split the string\n    list_string = string.split(' ')\n    # loop through the list to check for a vowel \n    for i in range(len(list_string)):\n        if list_string[i] in vowels:\n            return False\n    return True\n    \ndef check_consonant(string):\n    '''\n    Write a function to check whether the given string is consonant or not using regex.\n    '''\n    # read the string and remove the whitespaces\n    string = re.sub('\\s', '', string)\n    # split the string\n    list_string = string.split(' ')\n    # loop through the list to check for a vowel \n    for i in range(len(list_string)):\n        if list_string[i] in consonants:\n            return False\n    return True\n    \ndef check_consonants(string):\n    '''\n    Write a function that checks whether the given string is consonant or not using regex.\n    '''\n    # read the string and remove the whitespaces\n    string = re.sub('\\s', '', string)\n    # split the string\n    list_string = string.split(' ')\n    # loop through the list to check for a vowel \n    for i in range(len(list_string)):\n        if list_string[i] in consonants:\n            return False\n    return True\n    \ndef check_one_word(word):\n    '''\n    Write a function to check whether the given word starts with consonant or not using regex.\n    '''\n    # read the string and remove the whitespaces\n    word = re.sub('\\s', '', word)\n    # split the string\n    list_word = word.split(' ')\n    # loop through the list to check for a vowel \n    for i in range(len(list_word)):\n        if list_word[i] in consonants:\n            return False\n    return True\n    \ndef check_vowels(string):\n    '''\n    Write a function to check whether the given string is vowel or not using regex.\n    '''\n    # read the string and remove the whitespaces\n    string = re.sub('\\s', '', string)\n    # split the string\n    list_string = string.split(' ')\n    # loop through the list to check for a vowel \n    for i in range(len(list_string)):\n        if list_string[i] in vowels:\n            return False\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.search(regex, string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'AEIOU'\n    return re.match(vowels,string) is not None\ndef check_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'AEIOU'\n    return re.match(vowels,string) is not None\ndef check_symbol(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    symbols = '1234567890'\n    return re.match(symbols,string) is not None\ndef make_word_list(list_name,word_list):\n    '''\n    Write a function to read a file named list_name.txt and check whether the given word_list is valid or not.\n    '''\n    file_in = open(list_name,\"r\")\n    try:\n        for line in file_in:\n            word_list = line.split(' ')\n            for word in word_list:\n                if word not in word_list:\n                    raise Exception(\"Invalid word.\")\n        print(\"Valid word list.\")\n    except:\n        print(\"Invalid word list.\")\ndef make_symb_dict(symb_list):\n    '''\n    Write a function to read a file named symb_list.txt and check whether the given word_list is valid or not.\n    '''\n    file_in = open(symb_list,\"r\")\n    try:\n        for line in file_in:\n            word_list = line.split(' ')\n            for word in word_list:\n                if word not in word_list:\n                    raise Exception(\"Invalid word.\")\n        print(\"Valid word list.\")\n    except:\n        print(\"Invalid word list.\")\ndef remove_vowels(string):\n    '''\n    Write a function to remove the vowels from a string.\n    '''\n    vowels = 'AEIOU'\n    return re.sub(vowels,'',string)\ndef remove_symbols(string):\n    '''\n    Write a function to remove the symbols from a string.\n    '''\n    symbols = '1234567890'\n    return re.sub(symbols,'',string)\ndef remove_words(list_name,word_list):\n    '''\n    Write a function to remove all the words from a file named list_name.txt.\n    '''\n    file_in = open(list_name,\"r\")\n    try:\n        for line in file_in:\n            word_list = line.split(' ')\n            for word in word_list:\n                if word not in word_list:\n                    raise Exception(\"Invalid word.\")\n        print(\"Valid word list.\")\n    except:\n        print(\"Invalid word list.\")\ndef remove_symb_dict(list_name):\n    '''\n    Write a function to remove all the symbols from a file named list_name.txt.\n    '''\n    file_in = open(list_name,\"r\")\n    try:\n        for line in file_in:\n            word_list = line.split(' ')\n            for word in word_list:\n                if word not in word_list:\n                    raise Exception(\"Invalid word.\")\n        print(\"Valid word list.\")\n    except:\n        print(\"Invalid word list.\")\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.startswith('a'):\n        return False\n    elif string.startswith('e'):\n        return False\n    elif string.startswith('i'):\n        return False\n    elif string.startswith('o'):\n        return False\n    elif string.startswith('u'):\n        return False\n    elif string.startswith('y'):\n        return False\n    elif string.startswith('A'):\n        return True\n    elif string.startswith('E'):\n        return True\n    elif string.startswith('I'):\n        return True\n    elif string.startswith('O'):\n        return True\n    elif string.startswith('U'):\n        return True\n    elif string.startswith('Y'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.search(regex, string)\n    \ndef check_num(string): \n    '''\n    Write a function to check whether the given string is starting with a number or not using regex.\n    '''\n    regex = '^[0-9]+'\n    return re.search(regex, string)\n    \ndef check_chars(string): \n    '''\n    Write a function to check whether the given string is starting with a consonant or not using regex.\n    '''\n    regex = '^[Cc]on'\n    return re.search(regex, string)\n    \ndef check_op(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[+-*/~^]'\n    return re.search(regex, string)\n    \ndef check_basic(string): \n    '''\n    Write a function to check whether the given string is basic or not using regex.\n    '''\n    regex = '^[AEIOU]+'\n    return re.search(regex, string)\n    \ndef check_operand(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[0-9]{1,3}$'\n    return re.search(regex, string)\n    \ndef check_id(string): \n    '''\n    Write a function to check whether the given string is an integer or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_math(string): \n    '''\n    Write a function to check whether the given string is a math expression or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_num2(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_num2(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_op2(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_id2(string): \n    '''\n    Write a function to check whether the given string is an integer or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_math2(string): \n    '''\n    Write a function to check whether the given string is a math expression or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_id3(string): \n    '''\n    Write a function to check whether the given string is an integer or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_op3(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_id4(string): \n    '''\n    Write a function to check whether the given string is an integer or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_math3(string): \n    '''\n    Write a function to check whether the given string is a math expression or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_id5(string): \n    '''\n    Write a function to check whether the given string is an integer or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_math4(string): \n    '''\n    Write a function to check whether the given string is a math expression or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_math5(string): \n    '''\n    Write a function to check whether the given string is a math expression or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_op6(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_math6(string): \n    '''\n    Write a function to check whether the given string is a math expression or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_id7(string): \n    '''\n    Write a function to check whether the given string is an integer or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_math7(string): \n    '''\n    Write a function to check whether the given string is a math expression or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_math8(string): \n    '''\n    Write a function to check whether the given string is a math expression or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_op8(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[0-9]+$'\n    return re.search(regex, string)\n    \ndef check_op9(string): \n    '''\n    Write a function to check whether the given string is an operator or not using regex.\n    '''\n    regex = '^[+-*/~^]{1,3}(?:[+-*/~^]{1,3})*$'\n    return re.search(regex, string)\n    \ndef check_op10(string): \n    '''\n    Write a functio"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Note:\n    # There are 2 types of strings:\n    #   1. string = 'This is a test'\n    #   2. string = 'this is a test'\n    # So, if you define a function that checks whether string[0] is a vowel, you should use a regex.\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    else:\n        return 1 + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    #Base case\n    if n == 0:\n        return 0\n    #Divide by 5\n    if n % 5 == 0:\n        return n / 5\n    #Divide by 3 and 5\n    if n % 3 == 0 and n % 5 == 0:\n        return n / 3\n    #Divide by 2 and 3\n    if n % 2 == 0 and n % 3 == 0:\n        return n / 2\n    #Divide by 1 and 2\n    if n % 2 == 0 and n % 3 == 0:\n        return n / 1\n    #Don't divide by 0\n    if n % 1 == 0:\n        return n\n    else:\n        return 0\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # TODO: use the formula for geometric_sum(n-1)\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Brute Force: O(n^2)\n    if n <= 1:\n        return n\n    else:\n        return geometric_sum(n-1) + 1\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    sum = 1\n    for i in range(2, n+1):\n        sum = sum*i\n    return sum\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # your code here\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    h = n\n    # find the last index of nth number\n    while h >= 1:\n        if h == n:\n            return h\n        elif h % 10 == n % 10:\n            h = h // 10\n        else:\n            h = h // 10 + 10\n    return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find index of smallest triangular number with n digits \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return int(n/i)\n    # If no number can be divided by 2, the divisor is even, so index of the largest prime number with n-1 digits is 2, or it is 1, the final number is 1\n    return 2\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 0): return 0\n    elif (n == 1): return 1\n    elif (n == 2): return 1\n    elif (n == 3): return 2\n    elif (n == 4): return 3\n    elif (n == 5): return 4\n    elif (n == 6): return 5\n    elif (n == 7): return 6\n    elif (n == 8): return 7\n    elif (n == 9): return 8\n    elif (n == 10): return 9\n    elif (n == 11): return 10\n    elif (n == 12): return 11\n    elif (n == 13): return 12\n    elif (n == 14): return 13\n    elif (n == 15): return 14\n    elif (n == 16): return 15\n    elif (n == 17): return 16\n    elif (n == 18): return 17\n    elif (n == 19): return 18\n    elif (n == 20): return 19\n    elif (n == 21): return 20\n    elif (n == 22): return 21\n    elif (n == 23): return 22\n    elif (n == 24): return 23\n    elif (n == 25): return 24\n    elif (n == 26): return 25\n    elif (n == 27): return 26\n    elif (n == 28): return 27\n    elif (n == 29): return 28\n    elif (n == 30): return 29\n    elif (n == 31): return 30\n    elif (n == 32): return 31\n    elif (n == 33): return 32\n    elif (n == 34): return 33\n    elif (n == 35): return 34\n    elif (n == 36): return 35\n    elif (n == 37): return 36\n    elif (n == 38): return 37\n    elif (n == 39): return 38\n    elif (n == 40): return 39\n    elif (n == 41): return 40\n    elif (n == 42): return 41\n    elif (n == 43): return 42\n    elif (n == 44): return 43\n    elif (n == 45): return 44\n    elif (n == 46): return 45\n    elif (n == 47): return 46\n    elif (n == 48): return 47\n    elif (n == 49): return 48\n    elif (n == 50): return 49\n    elif (n == 51): return 50\n    elif (n == 52): return 51\n    elif (n == 53): return 52\n    elif (n == 54): return 53\n    elif (n == 55): return 54\n    elif (n == 56): return 55\n    elif (n == 57): return 56\n    elif (n == 58): return 57\n    elif (n == 59): return 58\n    elif (n == 60): return 59\n    elif (n == 61): return 60\n    elif (n == 62): return 61\n    elif (n == 63): return 62\n    elif (n == 64): return 63\n    elif (n == 65): return 64\n    elif (n == 66): return 65\n    elif (n == 67): return 66\n    elif (n == 68): return 67\n    elif (n == 69): return 68\n    elif (n == 70): return 69\n    elif (n == 71): return 70\n    elif (n == 72): return 71\n    elif (n == 73): return 72\n    elif (n == 74): return 73\n    elif (n == 75): return 74\n    elif (n == 76): return 75\n    elif (n == 77): return 76\n    elif (n == 78): return 77\n    elif (n == 79): return 78\n    elif (n == 80): return 79\n    elif (n == 81): return 80\n    elif (n == 82): return 81\n    elif (n == 83): return 82\n    elif (n == 84): return 83\n    elif (n == 85): return 84\n    elif (n == 86): return 85\n    elif (n == 87): return 86\n    elif (n == 88): return 87\n    elif (n == 89): return 88\n    elif (n == 90): return 89\n    elif (n == 91): return 90\n    elif (n == 92): return 91\n    elif (n == 93): return 92\n    elif (n == 94): return 93\n    elif (n == 95): return 94\n    elif (n == 96): return 95\n    elif (n == 97): return 96\n    elif (n == 98): return 97\n    elif (n == 99): return 98\n    elif (n == 100): return 99\n    elif (n == 101): return 100\n    elif (n == 102): return 101\n    elif (n == 103): return 102\n    elif (n == 104): return 103\n    elif (n == 105): return 104\n    elif (n == 106): return 105\n    elif (n == 107): return 106\n    elif (n == 108): return 107\n    elif (n == 109): return 108\n    elif (n == 110): return 109\n    elif (n == 111): return 110\n    elif (n == 112): return 111\n    elif (n == 113): return 112\n    elif (n == 114): return 113\n    elif (n == 115): return 114\n    elif (n == 116): return 115\n    elif (n == 117): return 116\n    elif (n == 118): return 117\n    elif (n == 119): return 118\n    elif (n == 120): return 119\n    elif (n == 121): return 120\n    elif (n == 122): return 121\n    elif (n == 123): return 122\n    elif (n == 124): return 123\n    elif (n == 125): return 124\n    elif (n == 126): return 125\n    elif (n == 127): return 126\n    elif (n == 128): return 127\n    elif (n == 129): return 128\n    elif (n == 130): return 129\n    elif (n == 131): return 130\n    elif (n == 132): return 131\n    elif (n == 133): return 132\n    elif (n == 134): return 133\n    elif (n == 135): return 134\n    elif (n == 136): return 135\n    elif (n == 137): return 136\n    elif (n == 138): return 137\n    elif (n == 139): return 138\n    elif (n == 140): return 139\n    elif (n == 141): return 140\n    elif (n == 142): return 141\n    elif (n == 143): return 142\n    elif (n == 144): return 143\n    elif (n == 145): return 144\n    elif (n == 146): return 145\n    elif (n == 147): return 146\n    elif (n == 148): return 147\n    elif (n == 149): return 148\n    elif (n == 150): return 149\n    elif (n == 151): return 150\n    elif (n == 152): return 151\n    elif (n == 153): return 152\n    elif (n == 154): return 153\n    elif (n == 155): return 154\n    elif (n == 156): return 155\n    elif (n == 157): return 156\n    elif (n == 158): return 157\n    elif (n == 159): return 158\n    elif (n == 160): return 159\n    elif (n == 161): return 160\n    elif (n == 162): return 161\n    elif (n == 163): return 162\n    elif (n == 164): return 163\n    elif (n == 165): return 164\n    elif (n == 166): return 165\n    elif (n == 167): return 166\n    elif (n == 168): return 167\n    elif (n == 169): return 168\n    elif (n == 170): return 169\n    elif (n == 171): return 170\n    elif (n == 172): return 171\n    elif (n == 173): return 172\n    elif (n == 174): return 173\n    elif (n == 175): return 174\n    elif (n == 176): return 175\n    elif (n == 177): return 176\n    elif (n == 178): return 177\n    elif (n == 179): return 178"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # write your code here\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164\n    if n == 166:\n        return 165\n    if n == 167:\n        return 166\n    if n == 168:\n        return 167\n    if n == 169:\n        return 168\n    if n == 170:\n        return 169\n    if n == 171:\n        return 170\n    if n == 172:\n        return 171\n    if n == 173:\n        return 172\n    if n == 174:\n        return 173\n    if n == 175:\n        return 174\n    if n == 176:\n        return 175\n    if n == 177:\n        return 176\n    if n == 178:\n        return 177\n    if n == 179:\n        return 178\n    if "
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math \n    \n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else: \n        for i in range(4, n+1): \n            if n % i == 0: \n                return i-1\n                break\n    return n+1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min = 9999999999999\n    index = 0\n    for i in range(1, n+1):\n        if (i**3 + i**2 + i) % 10 == 0 and min > i:\n            min = i\n            index = i\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    f = []\n    for i in range(2, n):\n        if n % i == 0:\n            f.append(i)\n    return f.index(min(f))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n<0:\n        return -1\n    x=1\n    if n==0:\n        return 1\n    while n%x!=0:\n        x+=1\n    return x\ndef find_largest(n,k):\n    '''\n    Write a python function to find the largest number with k digits. https://www.geeksforgeeks.org/find-largest-number-with-k-digits/\n    '''\n    return (math.log(n+1,k+1))\ndef find_second_largest(n,k):\n    '''\n    Write a python function to find the second largest number with k digits. https://www.geeksforgeeks.org/find-second-largest-number-with-k-digits/\n    '''\n    return (math.log(n+1,k+1)+1)\ndef kth_largest(n,k):\n    '''\n    Write a python function to find the k-th largest number with k digits. https://www.geeksforgeeks.org/find-k-th-largest-number-with-k-digits/\n    '''\n    if k==0:\n        return find_Index(n)\n    else:\n        return find_largest(n,k-1)\ndef kth_second_largest(n,k):\n    '''\n    Write a python function to find the k-th second largest number with k digits. https://www.geeksforgeeks.org/find-k-th-second-largest-number-with-k-digits/\n    '''\n    if k==0:\n        return find_Index(n)\n    else:\n        return find_second_largest(n,k-1)\n    \ndef test(n,k):\n    print(\"{}={}\".format(find_Index(n),find_Index(n)))\n    print(\"{}={}\".format(find_Index(n)+1,find_Index(n)+1))\n    print(\"{}={}\".format(kth_largest(n,k),kth_second_largest(n,k)))\n    \ndef main():\n    try:\n        n,k = [int(i) for i in input().split()]\n        test(n,k)\n    except:\n        print('Enter Valid Inputs')\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # verify if number is a positive integer\n    if n < 0: \n        print(\"Invalid Input\")\n        return -1\n    # verify if number is an integer\n    if n.isdigit():\n        # verify if n is divisible by 3\n        if n % 3 == 0:\n            # calculate how many digits it should have\n            if n == 3:\n                return 2\n            # calculate how many digits it should have\n            else:\n                dig = 3\n                # while n has 3 or more digits\n                while dig < n:\n                    # count how many digits it has\n                    dig = dig + 1\n                    # if n has 2 or more digits\n                    if n % dig == 0:\n                        # calculate how many digits it should have\n                        dig = dig + 1\n                        # if n has 2 or more digits\n                        if n % dig == 0:\n                            # calculate how many digits it should have\n                            dig = dig + 1\n                            # if n has 2 or more digits\n                            if n % dig == 0:\n                                # return the index of the smallest triangular number\n                                return dig\n                        # if n has 1 digit\n                        else:\n                            # if n has 0 or 1 digit\n                            if n % 1 == 0:\n                                # return the index of the smallest triangular number\n                                return dig\n                    # if n has only two digits\n                    else:\n                        # return the index of the smallest triangular number\n                        return dig\n        # if n has only one digit\n        else:\n            # calculate how many digits it should have\n            dig = 3\n            # while n has 3 or more digits\n            while dig < n:\n                # count how many digits it has\n                dig = dig + 1\n                # if n has 2 or more digits\n                if n % dig == 0:\n                    # calculate how many digits it should have\n                    dig = dig + 1\n                    # if n has 2 or more digits\n                    if n % dig == 0:\n                        # calculate how many digits it should have\n                        dig = dig + 1\n                        # if n has 2 or more digits\n                        if n % dig == 0:\n                            # return the index of the smallest triangular number\n                            return dig\n                        # if n has 1 digit\n                        else:\n                            # if n has 0 or 1 digit\n                            if n % 1 == 0:\n                                # return the index of the smallest triangular number\n                                return dig\n                    # if n has only one digit\n                    else:\n                        # return the index of the smallest triangular number\n                        return dig\n                # if n has 1 digit\n                else:\n                    # return the index of the smallest triangular number\n                    return dig\n    # if n has only zero digits\n    else:\n        # calculate how many digits it should have\n        dig = 3\n        # while n has 3 or more digits\n        while dig < n:\n            # count how many digits it has\n            dig = dig + 1\n            # if n has 2 or more digits\n            if n % dig == 0:\n                # calculate how many digits it should have\n                dig = dig + 1\n                # if n has 2 or more digits\n                if n % dig == 0:\n                    # calculate how many digits it should have\n                    dig = dig + 1\n                    # if n has 2 or more digits\n                    if n % dig == 0:\n                        # return the index of the smallest triangular number\n                        return dig\n                    # if n has 1 digit\n                    else:\n                        # if n has 0 or 1 digit\n                        if n % 1 == 0:\n                            # return the index of the smallest triangular number\n                            return dig\n                        # if n has only 1 digit\n                        else:\n                            # if n has only 0 digits\n                            if n % 1 == 0:\n                                # return the index of the smallest triangular number\n                                return dig\n            # if n has only one digit\n            else:\n                # return the index of the smallest triangular number\n                return dig\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n + 1):\n        if (i < n // 10):\n            if (i % 2 == 0):\n                print(\"%.2f\" % (i), end = \" \")\n            else:\n                print(\"%.2f\" % (i), end = \"\")\n        else:\n            if (i % 2 == 0):\n                print(\"%.2f\" % (i), end = \" \")\n            else:\n                print(\"%.2f\" % (i), end = \"\")\n    print(\" \")\n    \ndef fibo(n):\n    '''\n    nth fibonacci number in the range from 1 to n.\n    '''\n    if (n < 1):\n        return None\n    elif (n == 1 or n == 2):\n        return 1\n    else:\n        return fibo(n - 1) + fibo(n - 2)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # First, write your logic to convert the tuple to a key-value dictionary using adjacent elements.\n    # The key-value dictionary will map each adjacent element in the tuple to its corresponding element in the dictionary, so that:\n    # key = {'first': 'apple','second': 'banana'}\n    # value = {'apple': 'first', 'banana':'second'}\n    # After you convert the tuple to a key-value dictionary, you should expect the following result:\n    # key = {'first': 'apple','second': 'banana'}\n    # value = {'apple':'second', 'banana': 'first'}\n    # HINT: You may find the functions tuples() and dictionary_values() helpful here.\n    # Lets make sure you understand what each element in the tuple in this function is.\n    \n    key = {}\n    value = {}\n    for i in test_tup:\n        key[i] = test_tup[i]\n    for i in key:\n        value[i] = key[i]\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)):\n        my_dict[test_tup[i][0]] = test_tup[i][1]\n    return my_dict\n    #print(my_dict)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_test = {}\n    for i in range(0, len(test_tup)):\n        dict_test[test_tup[i][0]] = test_tup[i][1]\n    return dict_test\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # write your code here\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = test_tup[0]\n    val = test_tup[1]\n    dic = {}\n    for i in range(len(val)):\n        if i < len(val) - 1:\n            dic[key[i]] = val[i]\n        else:\n            dic[key[i]] = val[0]\n    return dic\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_data = dict()\n    for idx, item in enumerate(test_tup):\n        dict_data[item] = idx + 1\n    return dict_data\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in test_tup:\n        d[i] = test_tup.index(i)\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = {}\n    for i in range(len(test_tup)):\n        res[test_tup[i][0]] = test_tup[i][1]\n    return res\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s==' ':\n        return True\n    if s=='!':\n        return False\n    if s=='#':\n        return False\n    if s=='$':\n        return False\n    if s=='&':\n        return False\n    if s=='*':\n        return False\n    if s=='+':\n        return False\n    if s=='(' or s==')' or s=='{' or s=='}' or s=='[' or s=='.':\n        return False\n    if s=='\"' or s=='\\'' or s=='_' or s=='`' or s=='\"' or s=='|' or s=='}' or s==']' or s=='.':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = []\n    for i in s:\n        if i not in chars:\n            chars.append(i)\n    return len(chars) == len(set(chars))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #If all the characters are same:\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.isalnum()\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s :\n        if i in s[count:]:\n            count += 1\n    if count == len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # your code goes here\n    return s == s[::-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 0 :\n        for i in range(len(s)):\n            if i!= 0 and s[i] == s[i-1] :\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize the array that will have the number of times an character has been found\n    num_occ = [0]*26\n    # Initialize the count of each character\n    char_count = [0]*26\n    \n    # Iterate through each character\n    for char in s:\n        # Add one to the count of each character\n        num_occ[ord(char)-ord('A')] += 1\n        \n        # Increment the count of each character\n        char_count[ord(char)-ord('A')] += 1\n        \n    # Return true if all characters are same.\n    return all(char == sum(num_occ) for char in num_occ)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # define a dictionary with characters\n    D = {\n        'a':'9', 'b':'6', 'c':'5', 'd':'4',\n        'e':'3', 'f':'2', 'g':'1', 'h':'0'\n    }\n    # check the number of characters\n    l=len(s)\n    if l==len(D):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    assert type(s) == str, 'Input should be a string.'\n    s_list = list(s)\n    s_list_size = len(s_list)\n    assert s_list_size == len(set(s_list)), 'Characters should be unique.'\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side * (side - 1) / 2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    c=2*side\n    return(c*c*c)/6\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(3*3 + 1)*1.965\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side[0]**2 + side[1]**2 + side[2]**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side =='side':\n        return 4\n    elif side =='side-square':\n        return 9\n    elif side =='side-square-square':\n        return 16\n    elif side =='side-square-circle':\n        return 25\n    elif side =='square':\n        return 8\n    elif side =='square-circle':\n        return 50\n    elif side =='square-square-circle':\n        return 66\n    elif side =='square-circle-square':\n        return 90\n    elif side == 'circle':\n        return 3\n    else:\n        print('side not recognized')\n        return 0\n    \ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    if side =='side':\n        return 4 * (3**0.5)\n    elif side =='side-square':\n        return 4 * (3**0.5)\n    elif side =='side-square-square':\n        return 4 * (3**0.5)\n    elif side =='square':\n        return 4\n    elif side =='square-circle':\n        return 4 * (3**0.5)\n    elif side =='square-square-circle':\n        return 4 * (3**0.5)\n    elif side =='square-circle-square':\n        return 4 * (3**0.5)\n    elif side == 'circle':\n        return 4 * math.pi**0.5\n    else:\n        print('side not recognized')\n        return 0\n    \ndef area_triangle(side):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    if side =='side':\n        return (0.5 * (3**0.5))\n    elif side =='side-square':\n        return (0.5 * (3**0.5))\n    elif side =='side-square-circle':\n        return (0.5 * (3**0.5))\n    elif side =='square':\n        return 1\n    elif side =='square-circle':\n        return 1.5\n    elif side =='square-square-circle':\n        return 3\n    elif side == 'circle':\n        return 1\n    else:\n        print('side not recognized')\n        return 0\n    \ndef volume_triangle(side):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    if side =='side':\n        return (3**0.5)\n    elif side =='side-square':\n        return (3**0.5)\n    elif side =='side-square-circle':\n        return (3**0.5)\n    elif side =='square':\n        return 1\n    elif side =='square-circle':\n        return 1.5\n    elif side =='square-square-circle':\n        return 3\n    elif side == 'circle':\n        return 1\n    else:\n        print('side not recognized')\n        return 0\n    \ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if radius == 0:\n        return 0.0\n    else:\n        return (math.pi*(radius**2))\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    n = side**3\n    l = side\n    a = 1\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 4 * side ** 2\n    return area\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    area = side ** 2\n    return area\ndef area_rectangle(side):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    area = side ** 2\n    return area\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = side ** 3\n    return area\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = math.pi * radius ** 2\n    return area\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_rectangle(side):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = side ** 2 * 4\n    return volume\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume = side ** 3 * 4\n    return volume\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_triangle(side1, side2):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    volume = side1 ** 2 * side2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_cylinder_sphere(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_sphere_spheroid(radius, height):\n    '''\n    Write a function to calculate the volume of a cylindr with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_sphere_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylindr with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_spheroid(radius):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_sphere_cylinder(radius):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_cylinder_sphere_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylindr with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_spheroid_cylinder(radius):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_cylinder_sphere_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylindr with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_spheroid_cylinder(radius):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_cube_sphere_spheroid(radius, height):\n    '''\n    Write a function to calculate the volume of a cube with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_cylinder_spheroid(radius, height):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_cylinder_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_cylinder_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_spheroid_cylinder_spheroid(radius, height):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_cylinder_cylinder_spheroid(radius, height):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_cylinder_sphere_spheroid(radius, height):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = 4 * math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_sphere_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_sphere_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_cylinder_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_sphere_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_sphere_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_cylinder_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_sphere_spheroid_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_cylinder_sphere_cylinder_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume\ndef volume_sphere_spheroid_cylinder_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a sphere with spherical shape.\n    '''\n    volume = math.pi * radius ** 2 * height\n    return volume"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    if side == 'a':\n        area = 6*side\n    elif side == 'b':\n        area = 12*side\n    elif side == 'c':\n        area = 18*side\n    elif side == 'd':\n        area = 24*side\n    elif side == 'e':\n        area = 60*side\n    elif side == 'f':\n        area = 72*side\n    return area\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    if side == 'a':\n        return 4*side\n    elif side == 'b':\n        return 8*side\n    elif side == 'c':\n        return 12*side\n    elif side == 'd':\n        return 20*side\n    elif side == 'e':\n        return 30*side\n    elif side == 'f':\n        return 45*side\ndef area_cylinder(side):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    if side == 'a':\n        return (1/2) * math.pi * math.pow(side, 2)\n    elif side == 'b':\n        return (1/3) * math.pi * math.pow(side, 3)\n    elif side == 'c':\n        return (1/6) * math.pi * math.pow(side, 6)\n    elif side == 'd':\n        return (1/8) * math.pi * math.pow(side, 8)\n    elif side == 'e':\n        return (1/12) * math.pi * math.pow(side, 12)\n    elif side == 'f':\n        return (1/20) * math.pi * math.pow(side, 20)\ndef area_sphere(side):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    if side == 'a':\n        return 3 * side\n    elif side == 'b':\n        return 6 * side\n    elif side == 'c':\n        return 6 * math.pow(side, 2)\n    elif side == 'd':\n        return 10 * math.pow(side, 3)\n    elif side == 'e':\n        return 10 * math.pow(side, 4)\n    elif side == 'f':\n        return 10 * math.pow(side, 6)\n    else:\n        print('Unexpected side input')\n        return 0\ndef perimeter_square(side):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    if side == 'a':\n        return math.pow(side, 2)\n    elif side == 'b':\n        return math.pow(side, 3)\n    elif side == 'c':\n        return math.pow(side, 4)\n    elif side == 'd':\n        return math.pow(side, 5)\n    elif side == 'e':\n        return math.pow(side, 6)\n    elif side == 'f':\n        return math.pow(side, 7)\n    else:\n        print('Unexpected side input')\n        return 0\ndef perimeter_rectangle(side):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    if side == 'a':\n        return math.pow(side, 2)\n    elif side == 'b':\n        return math.pow(side, 3)\n    elif side == 'c':\n        return math.pow(side, 4)\n    elif side == 'd':\n        return math.pow(side, 5)\n    elif side == 'e':\n        return math.pow(side, 6)\n    elif side == 'f':\n        return math.pow(side, 7)\n    else:\n        print('Unexpected side input')\n        return 0\ndef perimeter_rhombus(side):\n    '''\n    Write a function to calculate the perimeter of a rhombus.\n    '''\n    if side == 'a':\n        return math.pow(side, 2)\n    elif side == 'b':\n        return math.pow(side, 3)\n    elif side == 'c':\n        return math.pow(side, 4)\n    elif side == 'd':\n        return math.pow(side, 5)\n    elif side == 'e':\n        return math.pow(side, 6)\n    elif side == 'f':\n        return math.pow(side, 7)\n    else:\n        print('Unexpected side input')\n        return 0\ndef perimeter_cylinder(side):\n    '''\n    Write a function to calculate the perimeter of a cylinder.\n    '''\n    if side == 'a':\n        return math.pow(side, 2) + math.pow(side, 3)\n    elif side == 'b':\n        return math.pow(side, 3) + math.pow(side, 4)\n    elif side == 'c':\n        return math.pow(side, 4) + math.pow(side, 5)\n    elif side == 'd':\n        return math.pow(side, 6) + math.pow(side, 7)\n    elif side == 'e':\n        return math.pow(side, 7)\n    elif side == 'f':\n        return math.pow(side, 8)\n    else:\n        print('Unexpected side input')\n        return 0\ndef perimeter_sphere(side):\n    '''\n    Write a function to calculate the perimeter of a sphere.\n    '''\n    if side == 'a':\n        return 3 * math.pow(side, 2)\n    elif side == 'b':\n        return 6 * math.pow(side, 3)\n    elif side == 'c':\n        return 6 * math.pow(side, 4)\n    elif side == 'd':\n        return 10 * math.pow(side, 5)\n    elif side == 'e':\n        return 10 * math.pow(side, 6)\n    elif side == 'f':\n        return 10 * math.pow(side, 7)\n    else:\n        print('Unexpected side input')\n        return 0\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    if side == 'a':\n        return side * math.pow(side, 3)\n    elif side == 'b':\n        return side * math.pow(side, 4)\n    elif side == 'c':\n        return side * math.pow(side, 5)\n    elif side == 'd':\n        return side * math.pow(side, 6)\n    elif side == 'e':\n        return side * math.pow(side, 7)\n    elif side == 'f':\n        return side * math.pow(side, 8)\n    else:\n        print('Unexpected side input')\n        return 0\ndef volume_rectangle(side):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    if side == 'a':\n        return side * math.pow(side, 2)\n    elif side == 'b':\n        return side * math.pow(side, 3)\n    elif side == 'c':\n        return side * math.pow(side, 4)\n    elif side == 'd':\n        return side * math.pow(side, 5)\n    elif side == 'e':\n        return side * math.pow(side, 6)\n    elif side == 'f':\n        return side * math.pow(side, 7)\n    else:\n        print('Unexpected side input')\n        return 0\ndef volume_rhombus(side):\n    '''\n    Write a function to calculate the volume of a rhombus.\n    '''\n    if side == 'a':\n        return side * math.pow(side, 2)\n    elif side == 'b':\n        return side * math.pow(side, 3)\n    elif side == 'c':\n        return side * math.pow(side, 4)\n    elif side == 'd':\n        return side * math.pow(side"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side**2 / 4\n    return a\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    #print(\"n is \", n)\n    #print(\"list: \", list)\n    \n    #print(\"reverse list: \", list[::-1])\n    for i in range(n-1,0,-1):\n        #print(\"after for loop: \", list[i])\n        list[i-1], list[i] = list[i], list[i-1]\n        #print(\"after for loop: \", list[i])\n    #print(\"after for loop: \", list)\n    #print(\"after for loop: \", list[::-1])\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.reverse()\n    if m%2 == 1:\n        for _ in range(m):\n            list.append(list.pop())\n    else:\n        for _ in range(m//2):\n            list.insert(0,list.pop())\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    size = len(list)\n    for i in range(m):\n        for j in range(size - i - 1):\n            temp = list[j]\n            list[j] = list[j + 1]\n            list[j + 1] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # code here\n    # last code part\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[len(list) - i - 1])\n    for i in range(m):\n        list.insert(0, new_list[i])\n        new_list.remove(new_list[i])\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[len(list) - 1 - i])\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Your code here\n    newList = []\n    for i in range(len(list)):\n        newList.append(list[i])\n        newList.append(list[-i-1])\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # if the list has one or more items, just return the list\n    if m == 1:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for _ in range(m):\n        list[m-1], list[m-2] = list[m-2], list[m-1]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    len_list = len(list)\n    for i in range(len_list-m):\n        # print(list[i], list[i+m])\n        list.append(list[len_list-1-i])\n        # print(list[i], list[i+m])\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if all(None in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        test_tup = [None] + test_tup\n    except TypeError:\n        return False\n    return len(test_tup) > 0\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup is None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    tup_len = len(test_tup)\n    for i in range(tup_len):\n        if test_tup[i] is None:\n            return (i in [0,1,2])\n    return (False)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup[i] is None for i in range(len(test_tup)))\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup) == None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None:\n        return test_tup\n    else:\n        return None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for el in test_tup:\n        if el is None:\n            return False\n    return True\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(n):\n        '''\n        n: number to be checked\n        '''\n        if n%10==0: return True\n        else: return False\n        \n    def is_divisible_by_digit_rec(startnum, endnum, divisor):\n        '''\n        Return list of numbers for the given range from startnum to endnum that are divisible by every digit of the given divisor\n        '''\n        if startnum==endnum: return []\n        \n        list=[]\n        for digit in range(startnum, endnum+1):\n            if is_divisible_by_digit(digit):\n                list.append(digit)\n                \n        if divisor==2:\n            list=list[::-1]\n        return list\n    \n    if is_divisible_by_digit_rec(startnum, endnum, divisor): return True\n    else: return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    range_str = str(startnum) + '-' + str(endnum)\n    digits_list = []\n    list_of_digits = []\n    for char in range_str:\n        if char not in digits_list:\n            digits_list.append(char)\n    for digit in digits_list:\n        list_of_digits.append(digit)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    d = dict()\n    for x in range(startnum, endnum+1):\n        if x%10 in d:\n            d[x%10] += 1\n        else:\n            d[x%10] = 1\n    for x in sorted(d):\n        print(d[x], end=' ')\n    print()\n    return\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"HELP!!!\")\n    print(\"Divisibility by digits is:\")\n    for i in range(startnum,endnum+1):\n        if num % i == 0:\n            print(i)\n        if num % i!= 0:\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    max_num = startnum\n    min_num = endnum\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            max_num += 1\n        elif i % 10!= 0:\n            min_num -= 1\n    return min_num <= endnum and max_num >= min_num\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"Divisible by digits\")\n    startnum = startnum.lower()\n    endnum = endnum.lower()\n    # first convert all letters to lowercase\n    startnum = startnum.lower()\n    endnum = endnum.lower()\n    # convert each letter to digits\n    digits = \"0123456789\"\n    # loop through each character in the range\n    for i in range(len(startnum)):\n        # check if the current character is not a digit\n        if startnum[i].isdigit():\n            # if the current number is divisible by a digit, add it to the result\n            if int(startnum[i]) % int(digits[int(i)-1]) == 0:\n                print(int(startnum[i]), end=\"\")\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        num = str(i)\n        check = 0\n        num_list = []\n        for char in num:\n            check += int(char)\n        for j in range(len(num)):\n            num_list.append(int(num[j]))\n        #print(check)\n        for k in range(len(num_list)):\n            if num_list[k] % int(num[k]) == 0:\n                check += int(num[k])\n        #print(check)\n        if check == int(num[k]):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    def is_divisible_by(num, digits):\n        return num % 10 == digits\n    \n    def divisible_by_digits_and(startnum, endnum):\n        '''\n        Return True if startnum and endnum are divisible by every digit in the range and False otherwise.\n        '''\n        \n        def is_divisible_by_digits(digits):\n            '''\n            Digits from startnum to endnum are evenly divisible by every digit it contains.\n            '''\n            \n            def is_divisible_by_digits_rec(startnum, endnum, digits):\n                '''\n                Return True if startnum and endnum are divisible by every digit in the range and False otherwise.\n                '''\n                \n                if startnum > endnum:\n                    return False\n                elif startnum <= digits <= endnum:\n                    return True\n                else:\n                    return is_divisible_by_digits_rec(startnum, endnum, digits + 1)\n                \n            return is_divisible_by_digits_rec(startnum, endnum, 0)\n        \n        def is_divisible_by_digits_rec(startnum, endnum, digits):\n            '''\n            Return True if startnum and endnum are divisible by every digit in the range and False otherwise.\n            '''\n            \n            if startnum > endnum:\n                return False\n            elif startnum <= digits <= endnum:\n                return True\n            else:\n                return is_divisible_by_digits_rec(startnum, endnum, digits + 1)\n        \n        # Not using for loops because it's easier to understand\n        for i in range(startnum, endnum):\n            if is_divisible_by(i, digits):\n                return True\n        \n        return False\n    \n    def divisible_by_digits_rec(startnum, endnum, digits):\n        '''\n        Return True if startnum and endnum are divisible by every digit in the range and False otherwise.\n        '''\n        \n        def is_divisible_by_digits_rec(startnum, endnum, digits):\n            '''\n            Return True if startnum and endnum are divisible by every digit in the range and False otherwise.\n            '''\n            \n            if startnum > endnum:\n                return False\n            elif startnum <= digits <= endnum:\n                return True\n            else:\n                return is_divisible_by_digits_rec(startnum, endnum, digits + 1)\n        \n        return is_divisible_by_digits_rec(startnum, endnum, 0)\n        \n    return divisible_by_digits_rec(startnum, endnum, 0)\n        \nprint(divisible_by_digits(11, 9))\nprint(divisible_by_digits(100, 100))\nprint(divisible_by_digits(12345678, 1234))\nprint(divisible_by_digits(11, 1000)"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    assert startnum > 0 and startnum <= endnum\n    assert endnum > 0 and endnum <= 10**6\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    # Define range\n    range_start = range(startnum, endnum, 1)\n    \n    # Initialize the list\n    div_list = list()\n    \n    # Loop over the range\n    for i in range_start:\n        # Check if it is a remainder of start num\n        rem = (i % 10)\n        if rem not in div_list:\n            div_list.append(rem)\n    \n    # Write the list to a file\n    f = open(\"/Users/rodrigo/Documents/Python/Tarea2/divisor.py\", \"w+\")\n    \n    # Loop over the div_list\n    for div in div_list:\n        # Write the string\n        f.write(str(div))\n        \n    f.close()\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (math.pi/180)*(r**2)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the radius of the sector\n    r_sector = r/math.sin(math.radians(a))\n    #Calculate the area of the sector\n    return circumference*r_sector\ndef sector_area_sq(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the radius of the sector\n    r_sector = r/math.sin(math.radians(a))\n    #Calculate the area of the sector\n    return r_sector*r_sector\ndef sector_circumference(r,a):\n    '''\n    Write a function to find circumference of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r\ndef sector_area_sector(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return (circumference*r)/(r*r)\ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return (circumference*r)/(r*r)\ndef sector_area_volume(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r/r\ndef sector_volume_sector(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r/r*r\ndef sector_area_volume_sector(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return (circumference*r)/r*r\ndef volume_cubic(r,a):\n    '''\n    Write a function to find volume of a cuboid. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r\ndef area_cubic(r,a):\n    '''\n    Write a function to find area of a cuboid. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r\ndef volume_cylinder(r,a):\n    '''\n    Write a function to find volume of a cylinder. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r*r\ndef area_cylinder(r,a):\n    '''\n    Write a function to find area of a cylinder. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r*r*r*r*r*r\ndef volume_square(r,a):\n    '''\n    Write a function to find volume of a square. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r*r\ndef area_square(r,a):\n    '''\n    Write a function to find area of a square. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r*r*r*r*r\ndef volume_ellipse(r,a):\n    '''\n    Write a function to find volume of a ellipse. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r*r\ndef area_ellipse(r,a):\n    '''\n    Write a function to find area of a ellipse. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r*r*r*r*r*r*r\ndef volume_triangle(r,a):\n    '''\n    Write a function to find volume of a triangle. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r*r*r*r*r\ndef area_triangle(r,a):\n    '''\n    Write a function to find area of a triangle. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Calculate the circumference of the sector\n    circumference = 2*3.14159*a/360\n    #Calculate the area of the sector\n    return circumference*r*r*r*r*r*r*r*r*r\ndef volume_cylinder_circle(r,a):\n    '''\n    Write a function to find volume of a cylinder. The function takes the radius and angle as inputs. Function should return Non"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 2 * math.pi * (r**2) * a * math.sin(math.radians(a))\n    return area\ndef sector_area_2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 2 * math.pi * (r**2) * a\n    return area\ndef sector_area_3(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 2 * math.pi * (r**2) * a\n    return area\ndef area_of_sector(sector_number,r):\n    '''\n    Write a function to find area of a sector. The function takes the sector number as an integer and radius as an integer as inputs. Function should return None if the sector is not a sector.\n    '''\n    if sector_number == 0:\n        return sector_area(r,0)\n    elif sector_number == 1:\n        return sector_area_2(r,0)\n    elif sector_number == 2:\n        return sector_area_3(r,0)\n    elif sector_number == 3:\n        return sector_area_3(r,0)\n    elif sector_number == 4:\n        return sector_area_3(r,0)\n    elif sector_number == 5:\n        return sector_area_3(r,0)\n    elif sector_number == 6:\n        return sector_area_3(r,0)\n    elif sector_number == 7:\n        return sector_area_3(r,0)\n    elif sector_number == 8:\n        return sector_area_3(r,0)\n    elif sector_number == 9:\n        return sector_area_3(r,0)\n    elif sector_number == 10:\n        return sector_area_3(r,0)\n    elif sector_number == 11:\n        return sector_area_3(r,0)\n    elif sector_number == 12:\n        return sector_area_3(r,0)\n    elif sector_number == 13:\n        return sector_area_3(r,0)\n    elif sector_number == 14:\n        return sector_area_3(r,0)\n    elif sector_number == 15:\n        return sector_area_3(r,0)\n    elif sector_number == 16:\n        return sector_area_3(r,0)\n    elif sector_number == 17:\n        return sector_area_3(r,0)\n    elif sector_number == 18:\n        return sector_area_3(r,0)\n    elif sector_number == 19:\n        return sector_area_3(r,0)\n    elif sector_number == 20:\n        return sector_area_3(r,0)\n    elif sector_number == 21:\n        return sector_area_3(r,0)\n    elif sector_number == 22:\n        return sector_area_3(r,0)\n    elif sector_number == 23:\n        return sector_area_3(r,0)\n    elif sector_number == 24:\n        return sector_area_3(r,0)\n    elif sector_number == 25:\n        return sector_area_3(r,0)\n    elif sector_number == 26:\n        return sector_area_3(r,0)\n    elif sector_number == 27:\n        return sector_area_3(r,0)\n    elif sector_number == 28:\n        return sector_area_3(r,0)\n    elif sector_number == 29:\n        return sector_area_3(r,0)\n    elif sector_number == 30:\n        return sector_area_3(r,0)\n    elif sector_number == 31:\n        return sector_area_3(r,0)\n    elif sector_number == 32:\n        return sector_area_3(r,0)\n    elif sector_number == 33:\n        return sector_area_3(r,0)\n    elif sector_number == 34:\n        return sector_area_3(r,0)\n    elif sector_number == 35:\n        return sector_area_3(r,0)\n    elif sector_number == 36:\n        return sector_area_3(r,0)\n    elif sector_number == 37:\n        return sector_area_3(r,0)\n    elif sector_number == 38:\n        return sector_area_3(r,0)\n    elif sector_number == 39:\n        return sector_area_3(r,0)\n    elif sector_number == 40:\n        return sector_area_3(r,0)\n    elif sector_number == 41:\n        return sector_area_3(r,0)\n    elif sector_number == 42:\n        return sector_area_3(r,0)\n    elif sector_number == 43:\n        return sector_area_3(r,0)\n    elif sector_number == 44:\n        return sector_area_3(r,0)\n    elif sector_number == 45:\n        return sector_area_3(r,0)\n    elif sector_number == 46:\n        return sector_area_3(r,0)\n    elif sector_number == 47:\n        return sector_area_3(r,0)\n    elif sector_number == 48:\n        return sector_area_3(r,0)\n    elif sector_number == 49:\n        return sector_area_3(r,0)\n    elif sector_number == 50:\n        return sector_area_3(r,0)\n    elif sector_number == 51:\n        return sector_area_3(r,0)\n    elif sector_number == 52:\n        return sector_area_3(r,0)\n    elif sector_number == 53:\n        return sector_area_3(r,0)\n    elif sector_number == 54:\n        return sector_area_3(r,0)\n    elif sector_number == 55:\n        return sector_area_3(r,0)\n    elif sector_number == 56:\n        return sector_area_3(r,0)\n    elif sector_number == 57:\n        return sector_area_3(r,0)\n    elif sector_number == 58:\n        return sector_area_3(r,0)\n    elif sector_number == 59:\n        return sector_area_3(r,0)\n    elif sector_number == 60:\n        return sector_area_3(r,0)\n    elif sector_number == 61:\n        return sector_area_3(r,0)\n    elif sector_number == 62:\n        return sector_area_3(r,0)\n    elif sector_number == 63:\n        return sector_area_3(r,0)\n    elif sector_number == 64:\n        return sector_area_3(r,0)\n    elif sector_number == 65:\n        return sector_area_3(r,0)\n    elif sector_number == 66:\n        return sector_area_3(r,0)\n    elif sector_number == 67:\n        return sector_area_3(r,0)\n    elif sector_number == 68:\n        return sector_area_3(r,0)\n    elif sector_number == 69:\n        return sector_area_3(r,0)\n    elif sector_number == 70:\n        return sector_area_3(r,0)\n    elif sector_number == 71:\n        return sector_area_3(r,0)\n    elif sector_number == 72:\n        return sector_area_3(r,0)\n    elif sector_number == 73:\n        return sector_area_3(r,0)\n    elif sector_number == 74:\n        return sector_area_3(r,0)\n    elif sector_number == 75:\n        return sector_area_3(r,0"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return(math.pi*r*(a/360))**(1/2)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > a:\n        return None\n    elif r == a:\n        return a\n    elif a == 360:\n        return math.sqrt(r**2 + (a**2)**2)\n    else:\n        return math.degrees(math.acos((r**2 + (a**2)**2)**(1/2)))\n    \ndef sector_radii(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the sector's radius and angle as outputs.\n    '''\n    if r > a:\n        return (math.radians(360 - a), 360)\n    elif r == a:\n        return a\n    elif a == 360:\n        return r, 360\n    else:\n        return math.radians(a - 360), 360\n    \ndef sector_angle(r,a,h):\n    '''\n    Write a function that takes the sector's radius, angle and height as inputs and returns the sector's angle and height as outputs.\n    '''\n    if r == a:\n        return math.radians(a), h\n    elif r == 360:\n        return math.degrees(math.acos((a**2)**(1/2)),h), h\n    else:\n        return math.degrees(math.acos((r**2 + (a**2)**2)**(1/2)),h), a\n        \ndef sector_sector(sector_radii, sector_angle, sector_area):\n    '''\n    Write a function that takes the sector's radius, angle and area as inputs and returns the sector's sector area and sector's angle as outputs.\n    '''\n    if sector_area == None:\n        sector_area = sector_area(sector_radii[0], sector_radii[1])\n        return sector_area, sector_angle\n    else:\n        return sector_area, sector_angle\n        \ndef sector_calculate(r,a,sector_area,sector_angle,sector_radii):\n    '''\n    Write a function that calculates the sector's area, angle and radius using the sector's sector radii, angle, and sector radii.\n    '''\n    sector_area = sector_area(r,a)\n    sector_angle = sector_angle(r,a,sector_area)\n    sector_radii = sector_radii(r,sector_area)\n    return sector_area, sector_angle, sector_radii\n    \ndef sector_radius(r,sector_area,sector_angle,sector_radii):\n    '''\n    Write a function that calculates the sector's radius.\n    '''\n    sector_area = sector_area(r,sector_area)\n    sector_angle = sector_angle(r,sector_angle[0],sector_angle[1])\n    sector_radii = sector_radii(r,sector_area)\n    return sector_radii[0] + sector_radii[1]\n    \ndef sector_calculate_all(r_list,a_list,sector_area_list,sector_angle_list,sector_radii_list):\n    '''\n    Write a function that calculates the sector's area, angle and radius for every r value in the r_list and sector_area_list. \n    '''\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angle(r,sector_angle_list[0],sector_area_list[0]) for r in r_list]\n    sector_radii_list = [sector_radii(r,sector_area_list[0],sector_angle_list[0],sector_radii_list[0]) for r in r_list]\n    sector_area_list = [sector_area(r,sector_area_list[0]) for r in r_list]\n    sector_angle_list = [sector_angl"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Variable to hold sector length\n    s_len = (2 * math.pi) / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r%math.pi) >= math.pi/4:\n        return r**2 * math.sin(math.radians(a))\n    else:\n        return r**2 * math.sin(math.radians(a)) * math.cos(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #find direction\n    if (r >= 0):\n        #find the left half edge\n        if (r >= 0):\n            return a\n        elif (r >= 0.5 and r < 0.7):\n            return 0\n        elif (r >= 0.7 and r < 0.9):\n            return -a\n        elif (r >= 0.9 and r < 0.99):\n            return a\n    else:\n        #find the right half edge\n        if (r >= 0):\n            return -a\n        elif (r >= 0.5 and r < 0.7):\n            return 0\n        elif (r >= 0.7 and r < 0.9):\n            return -a\n        elif (r >= 0.9 and r < 0.99):\n            return -a\n    \n    #find direction\n    if (r < 0):\n        #find the left edge\n        if (r < 0):\n            return a\n        elif (r < 0.5 and r >= 0.5):\n            return -a\n        elif (r < 0.5 and r < 0.7):\n            return 0\n        elif (r < 0.7 and r < 0.9):\n            return -a\n        elif (r < 0.9 and r < 0.99):\n            return -a\n    else:\n        #find the right edge\n        if (r < 0):\n            return -a\n        elif (r < 0.5 and r >= 0.5):\n            return a\n        elif (r < 0.5 and r < 0.7):\n            return -a\n        elif (r < 0.7 and r < 0.9):\n            return 0\n        elif (r < 0.9 and r < 0.99):\n            return 0\n    \n    #find the central edge\n    if (r < 0.5):\n        return 0\n    elif (r < 0.7):\n        return -a\n    elif (r < 0.9):\n        return a\n    elif (r < 0.99):\n        return -a\n    \n    #check for rounding error\n    return None\n    \ndef sector_area_sq(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #find direction\n    if (r >= 0):\n        #find the left half edge\n        if (r >= 0):\n            return r*(math.pi/180)**2\n        elif (r >= 0.5 and r < 0.7):\n            return 0\n        elif (r >= 0.7 and r < 0.9):\n            return r*(math.pi/180)**2\n        elif (r >= 0.9 and r < 0.99):\n            return r*(math.pi/180)**2\n    else:\n        #find the right half edge\n        if (r >= 0):\n            return r*(math.pi/180)**2\n        elif (r >= 0.5 and r < 0.7):\n            return 0\n        elif (r >= 0.7 and r < 0.9):\n            return r*(math.pi/180)**2\n        elif (r >= 0.9 and r < 0.99):\n            return r*(math.pi/180)**2\n    \n    #find direction\n    if (r < 0):\n        #find the left edge\n        if (r < 0):\n            return a*(math.pi/180)**2\n        elif (r < 0.5 and r >= 0.5):\n            return a*(math.pi/180)**2\n        elif (r < 0.5 and r < 0.7):\n            return a*(math.pi/180)**2\n        elif (r < 0.7 and r < 0.9):\n            return a*(math.pi/180)**2\n        elif (r < 0.9 and r < 0.99):\n            return a*(math.pi/180)**2\n    else:\n        #find the right edge\n        if (r < 0):\n            return a*(math.pi/180)**2\n        elif (r < 0.5 and r >= 0.5):\n            return a*(math.pi/180)**2\n        elif (r < 0.5 and r < 0.7):\n            return a*(math.pi/180)**2\n        elif (r < 0.7 and r < 0.9):\n            return a*(math.pi/180)**2\n        elif (r < 0.9 and r < 0.99):\n            return a*(math.pi/180)**2\n    \n    #check for rounding error\n    return None\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    x = 0\n    y = 0\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs = [[0 for i in range(len(X)+1)] for j in range(len(Y)+1)]\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                if X[i] == Y[j] and Y[j] == Z[k]:\n                    lcs[j+1][k+1] = lcs[j][k] + 1\n    print(' '.join(map(str,lcs[1:])))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[-1] * (len(X)+1) for _ in range(len(Y)+1)]\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            k = 1 + max(dp[i+1][j], dp[i][j+1])\n            dp[i+1][j+1] = k\n    for i in range(len(Y)-1, -1, -1):\n        for j in range(len(X)):\n            k = 1 + max(dp[i+1][j], dp[i][j+1])\n            dp[i][j+1] = k\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # If not empty\n    if X == '':\n        return ''\n    if Y == '':\n        return ''\n    if Z == '':\n        return ''\n    \n    # If L and R are both empty\n    if X == '' and Y == '' and Z == '':\n        return ''\n    \n    # if LCS exists\n    if LCS(X, Y) == Z:\n        return LCS(X, Y)\n    \n    # if L has shorter length than R\n    if len(Z) < len(X):\n        return lcs_of_three(Z, Y, X)\n    \n    # If L has longer length than R\n    else:\n        return lcs_of_three(X, Y, Z)\n    \n    \ndef lcs_of_two(X, Y):\n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    # If not empty\n    if X == '':\n        return ''\n    if Y == '':\n        return ''\n    \n    # If L and R are both empty\n    if X == '' and Y == '':\n        return ''\n    \n    # if LCS exists\n    if LCS(X, Y) == X:\n        return LCS(X, Y)\n    \n    # If L has shorter length than R\n    if len(X) < len(Y):\n        return lcs_of_two(Y, X)\n    \n    # If L has longer length than R\n    else:\n        return lcs_of_two(X, Y)\n    \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) + 1 \n    n = len(Y) + 1 \n    dp = [[0 for i in range(m)] for j in range(n)] \n    for i in range(1, n): \n        for j in range(1, m): \n            if X[j-1] == Y[i-1]: \n                dp[i][j] = dp[i-1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = [[0 for i in range(len(Z)+1)] for i in range(len(X)+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # declaring variables\n    LCS_len_1 = len(X) \n    LCS_len_2 = len(Y) \n    LCS_len_3 = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # create a list for the shorter string seqs\n    lcs_x = list()\n    lcs_y = list()\n    lcs_z = list()\n    \n    # iterate over the 3 strings and compare them to find the longest common subsequence\n    # the length of the longer string is returned as the last 2 characters of lcs\n    for i in range(len(X)):\n        for j in range(i,len(Y)):\n            lcs = ''\n            # iterate over each element in the longer string\n            for k in range(len(X)):\n                if X[i:j+1] == Y[k:k+1] and X[j:j+1] == Y[j:j+1]:\n                    lcs += X[i:j+1]\n            if len(lcs) > len(lcs_x) and lcs!= '':\n                lcs_x = lcs\n            if len(lcs) > len(lcs_y) and lcs!= '':\n                lcs_y = lcs\n            if len(lcs) > len(lcs_z) and lcs!= '':\n                lcs_z = lcs\n                \n    # return the longest common subsequence\n    return lcs_x[::-1][len(lcs_x)-2:len(lcs_x)-1:-1]\n    # I needed to iterate over the longer string, the lower case string, and the upper case string\n    # because python has an indexing error, and does not support indexing with the last element\n    # The last element is the last character of the longest common subsequence, so I could not find the error.\n    # Because of this, I had to go through the long string and find the first and last characters in it.\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_of_X, lcs_of_Y, lcs_of_Z = [], [], []\n    for i in range(len(X)):\n        if X[i] in Y and Y[i] in Z:\n            lcs_of_X.append(X[i])\n            lcs_of_Y.append(Y[i])\n            lcs_of_Z.append(Z[i])\n        elif X[i] in Y and Y[i] not in Z:\n            lcs_of_Y.append(Y[i])\n            lcs_of_X.append(X[i])\n            lcs_of_Z.append(Z[i])\n        elif X[i] not in Y and X[i] in Z:\n            lcs_of_X.append(X[i])\n            lcs_of_Y.append(Y[i])\n            lcs_of_Z.append(Z[i])\n        elif X[i] not in Y and X[i] not in Z:\n            lcs_of_X.append(X[i])\n            lcs_of_Y.append(Y[i])\n            lcs_of_Z.append(Z[i])\n    lcs = lcs_of_X[::-1] + lcs_of_Y[::-1] + lcs_of_Z[::-1]\n    return lcs[0]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    l1 = l2 = l3 = ''\n    \n    for i in range(len(X)): \n        if X[i] not in l1 and Y[i] not in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] not in l1 and Y[i] in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] not in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n    \n    if len(l1) > len(l2) and len(l1) > len(l3): \n        return len(l1) \n    elif len(l2) > len(l1) and len(l2) > len(l3): \n        return len(l2) \n    elif len(l3) > len(l1) and len(l3) > len(l2): \n        return len(l3) \n    \n    return 0 \n    \ndef find_LCS(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given two strings sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    \n    l1 = l2 = l3 = ''\n    \n    for i in range(len(X)): \n        if X[i] not in l1 and Y[i] not in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] not in l1 and Y[i] in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] not in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n    \n    if len(l1) > len(l2) and len(l1) > len(l3): \n        return len(l1) \n    elif len(l2) > len(l1) and len(l2) > len(l3): \n        return len(l2) \n    elif len(l3) > len(l1) and len(l3) > len(l2): \n        return len(l3) \n    \n    return 0 \n    \ndef find_LCS_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    l1 = l2 = l3 = ''\n    \n    for i in range(len(X)): \n        if X[i] not in l1 and Y[i] not in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] not in l1 and Y[i] in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] not in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n    \n    if len(l1) > len(l2) and len(l1) > len(l3): \n        return len(l1) \n    elif len(l2) > len(l1) and len(l2) > len(l3): \n        return len(l2) \n    elif len(l3) > len(l1) and len(l3) > len(l2): \n        return len(l3) \n    \n    return 0 \n    \ndef find_LCS_of_one(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given one string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-one-strings/\n    '''\n    \n    l1 = l2 = l3 = ''\n    \n    for i in range(len(X)): \n        if X[i] not in l1 and Y[i] not in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] not in l1 and Y[i] in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] not in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] not in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] in l3: \n            l1 += X[i]\n            l2 += Y[i]\n            l3 += Z[i]\n        elif X[i] in l1 and Y[i] in l2 and Z[i] in l3: \n            l1 += "
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = []\n    str_temp = ''\n    for i in str1:\n        if i.isupper():\n            i = i.lower()\n            str_temp += i\n        else:\n            result.append(i)\n    return result\ndef capital_words_punctuations(str1):\n    '''\n    Write a function to put punctuations in string with spaces between words.\n    '''\n    result = []\n    for i in str1:\n        if i in punctuations:\n            result.append(i)\n        else:\n            result.append(i.replace(' ',''))\n    return result\ndef all_caps(str1):\n    '''\n    Write a function to make all uppercase in a given string.\n    '''\n    return str1.upper()\ndef remove_num(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.replace('+', '')\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    return str1.replace('.', '')\ndef word_count(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    num_words = 0\n    str_temp = ''\n    for i in str1:\n        if i in stopwords:\n            num_words += 1\n        else:\n            str_temp += i\n    return num_words\ndef add_word_to_string(str1):\n    '''\n    Write a function to add words to a given string.\n    '''\n    return''.join(str1)\ndef lemmatization(str1):\n    '''\n    Write a function to lemmatize a given string.\n    '''\n    str1 = str1.split()\n    str1 =''.join(str1)\n    str1 = str1.lower()\n    result = []\n    for i in str1:\n        if i in lemmatizer:\n            result.append(lemmatizer[i])\n        else:\n            result.append(i)\n    return result\ndef is_punctuation(str1):\n    '''\n    Write a function to check if a given string is a punctuation.\n    '''\n    return str1 in punctuations\ndef replace_punctuations(str1):\n    '''\n    Write a function to replace punctuations with a special character.\n    '''\n    return str1.replace('.','')\ndef most_common_words(str1):\n    '''\n    Write a function to get the most common words from a given string.\n    '''\n    str_temp = ''\n    for i in str1:\n        if i in stopwords:\n            continue\n        if i not in punctuations:\n            str_temp += i\n    return str_temp\ndef extract_number_from_words(str1):\n    '''\n    Write a function to extract the number from a given string.\n    '''\n    if re.search(r'\\d+', str1):\n        num = re.search(r'\\d+', str1).group()\n        return int(num)\ndef find_solution(solution):\n    '''\n    Write a function to get the solution from the given string.\n    '''\n    if solution == '':\n        return solution\n    return solution.replace(' ', '')\ndef find_problems(solution):\n    '''\n    Write a function to get the problem from the given string.\n    '''\n    if solution == '':\n        return solution\n    return solution.replace(' ', '')\ndef remove_multiple_chars(str1):\n    '''\n    Write a function to remove a given string from a given string with multiple characters.\n    '''\n    str_temp = ''\n    for i in str1:\n        if i in stopwords:\n            continue\n        if i in punctuations:\n            str_temp += i\n        else:\n            str_temp += i.replace(' ', '')\n    return str_temp\ndef remove_from_string(str1,str2):\n    '''\n    Write a function to remove two strings from a given string.\n    '''\n    str_temp = ''\n    for i in str1:\n        if i in stopwords:\n            continue\n        if i in punctuations:\n            str_temp += i\n        else:\n            str_temp += i.replace(' ', '')\n    str_temp = str_temp.replace(str2, '')\n    return str_temp\ndef word_check(str1):\n    '''\n    Write a function to check if a given string is a word.\n    '''\n    return str1.isalpha()\ndef word_check_remove_digits(str1):\n    '''\n    Write a function to check if a given string is a word.\n    '''\n    return str1.isalpha() and str1[0].isdigit()\ndef word_check_in_stopword(str1):\n    '''\n    Write a function to check if a given string is a word.\n    '''\n    return str1.isalpha() and str1[0].isalpha() and str1[0].isupper()\ndef count_characters(str1):\n    '''\n    Write a function to count the number of characters in a given string.\n    '''\n    return len(str1)\ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return word_count(str1)\ndef add_capital_letters(str1):\n    '''\n    Write a function to add capital letters to a given string.\n    '''\n    return str1.upper()\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    return str1.replace('.', '')\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return str1.replace('-', '').replace('_', '').replace('.', '').replace(',', '').replace(';', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\" \", \"\").replace(';', '')\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.replace('+', '')\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.replace('0', '')\ndef remove_upper(str1):\n    '''\n    Write a function to remove upper case letters from a given string.\n    '''\n    return str1.replace('A', '').replace('B', '').replace('C', '').replace('D', '').replace('E', '').replace('F', '').replace('G', '').replace('H', '').replace('I', '').replace('J', '').replace('K', '').replace('L', '').replace('M', '').replace('N', '').replace('O', '').replace('P', '').replace('Q', '').replace('R', '').replace('S', '').replace('T', '').replace('U', '').replace('V', '').replace('W', '').replace('X', '').replace('Y', '').replace('Z', '')\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    return str1.replace('+', '')\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.replace('?', '').replace('.', '').replace(',', '').replace(';', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\" \", \"\").replace(';', '')\ndef remove_num_from_words(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.replace('+', '')\ndef remove_punctuatio"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def spacer_word(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add spaces between words in a given string.\n    '''\n    def spacer_word2(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word3(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word4(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word5(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word6(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word7(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word8(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word9(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word10(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word11(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word12(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word13(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word14(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word15(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word16(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word17(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word18(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word19(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word20(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word21(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word22(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word23(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word24(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word25(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word26(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a function that will add a space between words in a given string.\n    '''\n    def spacer_word27(str1):\n        '''\n        Split the given string into words in a list and return it.\n        '''\n        l = str1.split()\n        return l\n    \n    '''\n    Write a functio"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return str1.upper().replace(\" \",\"\").replace(\"\\t\",\" \")\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = ''\n    for i in str1:\n        if i.isalpha():\n            result += i.upper() +''\n    return result.strip()\ndef get_last_letter(str1):\n    '''\n    Get the last letter of the given string, if it is not already there, then use it as the end of the sentence.\n    '''\n    last_letter = str1[-1]\n    return last_letter\ndef get_number_words(str1, word_count):\n    '''\n    Return the number of words in a given string.\n    '''\n    num_words = 0\n    for i in range(len(str1)-word_count +1):\n        if str1[i:i+word_count]!= \" \" * word_count:\n            num_words += 1\n    return num_words\ndef get_number_sentences(str1):\n    '''\n    Return the number of sentences in the given string.\n    '''\n    num_sentences = 0\n    for i in range(len(str1)):\n        if str1[i:i+5]!= \".\" * 5:\n            num_sentences += 1\n    return num_sentences\ndef get_number_words_sentences(str1):\n    '''\n    Return the number of words and sentences in the given string.\n    '''\n    num_words = get_number_words(str1)\n    num_sentences = get_number_sentences(str1)\n    return num_words, num_sentences\ndef remove_stopwords(str1):\n    '''\n    Remove the stopwords from the given string.\n    '''\n    # print(str1.split(' '))\n    # print(str1.split(':'))\n    result = []\n    stopwords = ['a', 'an', 'the', 'for', 'if', 'is', 'it', 'of', 'and', 'on', 'of', 'and', 'as', 'as', 'is']\n    for i in range(len(str1.split(':'))):\n        str1 = str1.replace(str1.split(':')[i], '')\n    # print(str1.split())\n    for word in str1.split():\n        if word not in stopwords:\n            result.append(word)\n    # print(result)\n    return result\ndef get_numbers(str1):\n    '''\n    Return the numbers of all words in a given string.\n    '''\n    num = 0\n    for i in str1.split():\n        num += int(i)\n    return num\ndef get_number_of_sentences(str1):\n    '''\n    Return the number of sentences in the given string.\n    '''\n    return get_number_sentences(str1)\ndef get_number_of_words(str1):\n    '''\n    Return the number of words in the given string.\n    '''\n    return get_number_words(str1, 3)\ndef get_number_of_words_spaces(str1):\n    '''\n    Return the number of words in the given string, including spaces.\n    '''\n    return get_number_words(str1, 4)\ndef get_words(str1):\n    '''\n    Return the word in the given string.\n    '''\n    return str1.split()\ndef get_words_spaces(str1):\n    '''\n    Return the word in the given string, including spaces.\n    '''\n    return str1.split(':')\ndef clean_text(str1):\n    '''\n    Clean the given string using:\n    - remove_stopwords\n    - remove_special_chars\n    - convert to lowercase\n    - remove numbers\n    - convert to numbers\n    '''\n    result = []\n    # remove stopwords\n    str1 = remove_stopwords(str1)\n    # remove special chars\n    str1 = remove_special_chars(str1)\n    # convert to lowercase\n    str1 = str1.lower()\n    # remove numbers\n    str1 = str1.replace('\\d+','')\n    # remove punctuation\n    str1 = str1.translate(str.maketrans('','',string.punctuation))\n    # remove whitespace\n    str1 = str1.strip()\n    # return result\n    return str1\ndef get_sentence_prob(str1):\n    '''\n    Return the sentence probability.\n    '''\n    return get_sentence_prob_from_file(str1)\ndef get_sentence_prob_from_file(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split(':')\n    result = {}\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            break\n        if str1[i]!='':\n            result[str1[i]] = 0\n    return result\ndef get_sentence_prob_from_lines(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split('\\n')\n    result = {}\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            break\n        if str1[i]!='':\n            result[str1[i]] = 0\n    return result\ndef get_sentence_prob_from_lines_file(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split('\\n')\n    result = {}\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            break\n        if str1[i]!='':\n            result[str1[i]] = 0\n    return result\ndef get_sentence_prob_from_text(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split(':')\n    result = {}\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            break\n        if str1[i]!='':\n            result[str1[i]] = 0\n    return result\ndef get_sentence_prob_from_text_file(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split('\\n')\n    result = {}\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            break\n        if str1[i]!='':\n            result[str1[i]] = 0\n    return result\ndef get_sentence_prob_from_files(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split('\\n')\n    result = {}\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            break\n        if str1[i]!='':\n            result[str1[i]] = 0\n    return result\ndef get_sentence_prob_from_files_file(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split('\\n')\n    result = {}\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            break\n        if str1[i]!='':\n            result[str1[i]] = 0\n    return result\ndef get_sentence_prob_from_text_file_file(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split('\\n')\n    result = {}\n    for i in range(len(str1)):\n        if str1[i] == '.':\n            break\n        if str1[i]!='':\n            result[str1[i]] = 0\n    return result\ndef get_sentence_prob_from_text_file_file_file(str1):\n    '''\n    Return the sentence probability.\n    '''\n    str1 = str1.split('\\n')\n    result = {}\n    for i in range(len(str1))"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = ''\n    str1 = str1.split()\n    for word in str1:\n        if word[0].isupper():\n            word = word.capitalize()\n        result += word+''\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    l1 = list(str1.lower())\n    l2 = re.split('[^A-Za-z0-9]',l1)\n    final = \" \".join(l2)\n    return final\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(\"(.)\\1+\", r\"\\1 \\1\", str1)\n    \ndef capital_words(str1):\n    '''\n    Write a function that returns a string where all the first characters have been capitalized.\n    '''\n    return re.sub(r\"^\\w+\", lambda word: word.capitalize(), str1)\n    \ndef title_words(str1):\n    '''\n    Write a function that returns a string where all the first letters are title case.\n    '''\n    return re.sub(r\"[A-Z]\\w+\", lambda word: word.title(), str1)\n    \ndef main():\n    str1 = 'Hello World'\n    print(capital_words(str1))\n    print(capital_words_spaces(str1))\n    print(capital_words(title_words(str1)))\n    print(capital_words(capital_words(str1)))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # get the string and split the string into a list of words\n    words = str1.split()\n    # return the result\n    return words\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.replace(\" \",\"\").replace(\",\",\"\").replace(\"-\",\"\").replace(\"'\",\"\").replace(\"'s\",\"\").replace('\"','').replace(\"'s\",\"\").replace(\"-\",\"\").replace(\"'\",\"\").replace(\".\",\"\").replace(\"..\",\"\").replace(\".\",\"\")\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # def get_words(str1):\n    #     return str1.split()\n    # for i in range(len(get_words(str1))):\n    #     if get_words(str1)[i][0].isupper():\n    #         str1 = str1.replace(get_words(str1)[i],' ')\n    #     print(str1)\n    \n    str1 = str1.lower()\n    \n    words = str1.split()\n    \n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i][1:] +''\n    print(' '.join(words))\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    temp_list = []\n    for i in range(len(nums_str)):\n        num = nums_str[i]\n        if num.isnumeric():\n            temp_list.append(num)\n        else:\n            temp_list.append(' ')\n    temp_list.sort()\n    nums_str = temp_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: x.replace('.','').isdigit())\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #Your code here\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = sorted(nums_str)\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        nums.append(float(i))\n    nums.sort()\n    return [str(i) for i in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n    return nums_str\n    \ndef sort_numeric_strings_return_numbers(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n    \ndef sort_numeric_strings_return_numbers_no_string(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_str_list = []\n    for num in nums_str:\n        if num!= \"\":\n            temp_num = int(num)\n            if temp_num not in sorted_str_list:\n                sorted_str_list.append(temp_num)\n    print(sorted_str_list)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # your code goes here\n    return sorted(nums_str, key=lambda x: x.isdigit())\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    list_nums = list(map(float,nums_str))\n    list_nums.sort()\n    final_str = \"\".join(str(x) for x in list_nums)\n    return final_str\n    \n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    tup = test_tup[0]\n    for i in range(len(test_list)):\n        test_list[i] += tup\n        if(type(test_list[i]) == int):\n            test_list[i] = tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print(f\"Tuple added to {test_list}\")\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if type(test_list) == list:\n        test_list.append(tuple(test_tup))\n    else:\n        print(\"The list you gave is not a list.\\n\")\n        return\n    \n    \ndef main():\n    '''\n    Create a list of tuples and write a function to insert the tuple in the list,\n    and add that tuple to the list.\n    '''\n    \n    test_list = []\n    print(\"Your list is empty.\\n\")\n    print(\"Type in the numbers you would like to insert them into the list.\")\n    print(\"Example: 1, 2, 3\\n\")\n    \n    number = input(\"Enter the numbers you would like to insert: \")\n    \n    # check if the input is a number\n    while not number.isnumeric():\n        print(\"The numbers you provided is not a number.\\n\")\n        number = input(\"Enter the numbers you would like to insert: \")\n        \n    number = int(number)\n    \n    # add the input into the list\n    add_tuple(test_list, (number,))\n    \n    print(\"The list you gave is now:\\n\")\n    print(test_list)\n    \n    # write the list to a file\n    with open(\"test.txt\", 'w') as f:\n        for x in test_list:\n            f.write(str(x) + \"\\n\")\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item + test_tup)\n    return result\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_tup)!= 2:\n        raise TypeError(\"tuple must have 2 elements\")\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # write your code here\n    return test_list + test_tup\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i-1] < arr[i]:\n        return False\n    if arr[i-1] == arr[i]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    if arr[i] < arr[i+1] and arr[i] < arr[i+2]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i < len(arr) and arr[i] < arr[i//2]:\n        return check_min_heap_helper(arr, i*2)\n    else:\n        return False\n    \ndef check_max_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents max heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i < len(arr) and arr[i] > arr[i//2]:\n        return check_max_heap_helper(arr, i*2)\n    else:\n        return False\n    \ndef check_min_heap_2(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if len(arr) > 1:\n        return check_min_heap_helper(arr, len(arr)-1)\n    return False\n    \ndef check_max_heap_2(arr):\n    '''\n    Write a function to check if the given array represents max heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if len(arr) > 1:\n        return check_max_heap_helper(arr, len(arr)-1)\n    return False\n    \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if len(arr) > 1:\n        return check_min_heap_helper(arr, len(arr)-1)\n    return False\n    \ndef check_max_heap(arr):\n    '''\n    Write a function to check if the given array represents max heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if len(arr) > 1:\n        return check_max_heap_helper(arr, len(arr)-1)\n    return False\n    \ndef min_heapify(arr, i, heap):\n    '''\n    Write a function to min heapify the given array and return its min heap value. https://www.geeksforgeeks.org/min-heap-size-and-heaps-of-array-using-python/\n    '''\n    \n    if i > 0 and arr[i] < arr[i//2]:\n        arr[i//2], arr[i] = arr[i], arr[i//2]\n        return min_heapify(arr, i//2, heap)\n    return arr[i]\n    \ndef check_max_heapify(arr, i, heap):\n    '''\n    Write a function to check if the given array represents max heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i > 0 and arr[i] < arr[i//2]:\n        arr[i//2], arr[i] = arr[i], arr[i//2]\n        return check_max_heapify(arr, i//2, heap)\n    return arr[i]\n    \ndef min_heapify2(arr, i, heap):\n    '''\n    Write a function to min heapify the given array and return its min heap value. https://www.geeksforgeeks.org/min-heap-size-and-heaps-of-array-using-python/\n    '''\n    \n    if i > 0 and arr[i] < arr[i//2]:\n        arr[i//2], arr[i] = arr[i], arr[i//2]\n        return min_heapify2(arr, i//2, heap)\n    return arr[i]\n    \ndef check_max_heapify2(arr, i, heap):\n    '''\n    Write a function to check if the given array represents max heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i > 0 and arr[i] < arr[i//2]:\n        arr[i//2], arr[i] = arr[i], arr[i//2]\n        return check_max_heapify2(arr, i//2, heap)\n    return arr[i]\n    \ndef heap_sort(arr):\n    '''\n    Write a function to sort the given array in ascending order.\n    '''\n    \n    heap = []\n    \n    for i in range(len(arr)):\n        heap.append(arr[i])\n    \n    while len(heap) > 1:\n        min_index = 0\n        for i in range(len(heap)):\n            if heap[i] < heap[min_index]:\n                min_index = i\n        \n        arr[i], heap[min_index] = heap[min_index], arr[i]\n        heap.pop(min_index)\n        \n    return arr\n    \ndef count_sort(arr):\n    '''\n    Write a function to sort the given array in ascending order.\n    '''\n    \n    counts = [0] * (len(arr) + 1)\n    \n    for i in range(len(arr)):\n        counts[arr[i]] += 1\n        \n    for i in range(len(counts)):\n        counts[i] += i + 1\n        \n    for i in range(len(counts)):\n        counts[i] += counts[i-1]\n    \n    for i in range(len(counts)):\n        counts[i] = counts[i] - 1\n        \n    for i in range(len(arr)):\n        arr[i] = counts[arr[i]]\n    \n    return arr\n    \ndef check_count_sort(arr):\n    '''\n    Write a function to check if the given array represents count sort or not.\n    '''\n    \n    if check_heap(arr) == True:\n        return arr\n    if check_count(arr) == True:\n        return arr\n    return arr\n    \ndef check_heap(arr):\n    '''\n    Write a function to check if the given array represents heap or not.\n    '''\n    \n    if len(arr) > 1:\n        return check_heap_helper(arr, len(arr)-1)\n    return False\n    \ndef check_count_heap(arr):\n    '''\n    Write a function to check if the given array represents heap or not.\n    '''\n    \n    if len(arr) > 1:\n        return check_count_heap_helper(arr, len(arr)-1)\n    return False\n    \ndef check_count_heap2(arr):\n    '''\n    Write a function to check if the given array represents heap or not.\n    '''\n    \n    if len(arr) > 1:\n        return check_count_heap_helper2(arr, len(arr)-1)\n    return False\n    \ndef check_count_heap2_2(arr):\n    '''\n    Write a function to check if the given array represents heap or not.\n    '''\n    \n    if len(arr) > 1:\n        return check_count_heap_helper2(arr, len(arr)-1)\n    return arr\n    \ndef check_count_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents count sort or not.\n    ''"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # To store the minimum element\n    temp_min = float('inf')\n    # To store the index of minimum element\n    temp_index = i\n    # To store the index of minimum element\n    min_index = i\n    # To store the index of minimum element\n    min_index_2 = 0\n    # To store the index of minimum element\n    min_index_3 = 0\n    # To store the index of minimum element\n    min_index_4 = 0\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) <= 0:\n        return 0\n    if i > 0:\n        if arr[i] < arr[0]:\n            return -1\n    return 1\n    \ndef check_min_heap(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    \n    left = 2 * (len(arr) // 2) - 1\n    right = len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] < arr[mid + 1]:\n            return arr[mid]\n        \n        if arr[mid] < arr[mid - 1]:\n            arr[mid], arr[mid - 1] = arr[mid - 1], arr[mid]\n            mid = mid - 1\n            \n        if arr[mid] < arr[0]:\n            arr[left], arr[mid] = arr[mid], arr[left]\n            left = mid\n        \n        if arr[mid] < arr[right]:\n            arr[right], arr[mid] = arr[mid], arr[right]\n            right = mid\n    \n    return arr[left]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return True\n    elif arr[i] > arr[i + 1]:\n        return False\n    else:\n        return True\n    \ndef find_min_heap(arr):\n    '''\n    Find the smallest element of the array\n    '''\n    i = 0\n    min_index = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[min_index]:\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    \n    return arr[i] < arr[i+1] and check_min_heap_helper(arr, i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= (len(arr) - 1):\n        return True\n    \n    return arr[i] < arr[2 * i + 1]\n    \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if check_min_heap_helper(arr, 0):\n        print('Array represents min heap')\n    else:\n        print('Array is not min heap')\n    \n    return \n    \ndef check_min_heap2(arr):\n    '''\n    Use the same approach as check_min_heap\n    '''\n    for i in range(1, len(arr) // 2):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n    return True\n    \ndef min_heap(arr):\n    '''\n    Use the same approach as check_min_heap\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] < arr[2 * i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef check_min_heap3(arr):\n    '''\n    Use a smaller array of size 3\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] < arr[2 * i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef check_min_heap4(arr):\n    '''\n    Use a smaller array of size 2\n    '''\n    if arr[0] < arr[1]:\n        return False\n    else:\n        return True\n    \ndef min_heap2(arr):\n    '''\n    Use a smaller array of size 3\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] < arr[2 * i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef check_min_heap3(arr):\n    '''\n    Use a larger array of size 3\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] < arr[2 * i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef check_min_heap4(arr):\n    '''\n    Use a larger array of size 2\n    '''\n    if arr[0] < arr[1]:\n        return False\n    else:\n        return True\n    \ndef swap(arr, index1, index2):\n    '''\n    Swap the values of the array at index1 and index2\n    '''\n    arr[index1], arr[index2] = arr[index2], arr[index1]\n    return arr\n    \ndef sort(arr):\n    '''\n    Sort the array using the bubble sort algorithm\n    '''\n    for i in range(len(arr) // 2):\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr\n    \ndef swap_sort(arr):\n    '''\n    Sort the array using the bubble sort algorithm\n    '''\n    for i in range(len(arr) // 2):\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr\n    \ndef get_min_heap(arr):\n    '''\n    Find the minimum value in the heap\n    '''\n    if check_min_heap_helper(arr, 0):\n        return arr[0]\n    else:\n        return arr[1]\n    \ndef get_min_heap2(arr):\n    '''\n    Find the minimum value in the heap\n    '''\n    if check_min_heap2(arr, 0):\n        return arr[0]\n    else:\n        return arr[1]\n    \ndef get_min_heap3(arr):\n    '''\n    Find the minimum value in the heap\n    '''\n    if check_min_heap3(arr, 0):\n        return arr[0]\n    else:\n        return arr[1]\n    \ndef get_min_heap4(arr):\n    '''\n    Find the minimum value in the heap\n    '''\n    if check_min_heap4(arr, 0):\n        return arr[0]\n    else:\n        return arr[1]\n    \ndef min_heap_sort(arr):\n    '''\n    Sort the array using the bubble sort algorithm\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef min_heap_sort2(arr):\n    '''\n    Sort the array using the bubble sort algorithm\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] > arr[2 * i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef get_min_heap3(arr):\n    '''\n    Find the minimum value in the heap\n    '''\n    if check_min_heap3(arr, 0):\n        return arr[0]\n    else:\n        return arr[1]\n    \ndef get_min_heap4(arr):\n    '''\n    Find the minimum value in the heap\n    '''\n    if check_min_heap4(arr, 0):\n        return arr[0]\n    else:\n        return arr[1]\n    \ndef heap_sort(arr):\n    '''\n    Sort the array using the heapsort algorithm\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef heap_sort2(arr):\n    '''\n    Sort the array using the heapsort algorithm\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] > arr[2 * i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef sort_heap_function(arr):\n    '''\n    Sort the array using the heapsort algorithm\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] > arr[2 * i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            i = 2 * i + 1\n    return arr\n    \ndef sort_heap_function2(arr):\n    '''\n    Sort the array using the heapsort algorithm\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if arr[i] > arr[2 * i + 1]:\n            arr[2 * i + 1], arr[i] = arr[i], arr[2 * i + 1]\n            "
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (arr[i] >= 2**31 - 1):\n        print(\"Heap is not a binary heap\")\n        return False\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 3\n    if n == 5: \n        return 4\n    if n == 6: \n        return 5\n    if n == 7: \n        return 6\n    if n == 8: \n        return 7\n    if n == 9: \n        return 8\n    if n == 10: \n        return 9\n    if n == 11: \n        return 10\n    if n == 12: \n        return 11\n    if n == 13: \n        return 12\n    if n == 14: \n        return 13\n    if n == 15: \n        return 14\n    if n == 16: \n        return 15\n    if n == 17: \n        return 16\n    if n == 18: \n        return 17\n    if n == 19: \n        return 18\n    if n == 20: \n        return 19\n    if n == 21: \n        return 20\n    if n == 22: \n        return 21\n    if n == 23: \n        return 22\n    if n == 24: \n        return 23\n    if n == 25: \n        return 24\n    if n == 26: \n        return 25\n    if n == 27: \n        return 26\n    if n == 28: \n        return 27\n    if n == 29: \n        return 28\n    if n == 30: \n        return 29\n    if n == 31: \n        return 30\n    if n == 32: \n        return 31\n    if n == 33: \n        return 32\n    if n == 34: \n        return 33\n    if n == 35: \n        return 34\n    if n == 36: \n        return 35\n    if n == 37: \n        return 36\n    if n == 38: \n        return 37\n    if n == 39: \n        return 38\n    if n == 40: \n        return 39\n    if n == 41: \n        return 40\n    if n == 42: \n        return 41\n    if n == 43: \n        return 42\n    if n == 44: \n        return 43\n    if n == 45: \n        return 44\n    if n == 46: \n        return 45\n    if n == 47: \n        return 46\n    if n == 48: \n        return 47\n    if n == 49: \n        return 48\n    if n == 50: \n        return 49\n    if n == 51: \n        return 50\n    if n == 52: \n        return 51\n    if n == 53: \n        return 52\n    if n == 54: \n        return 53\n    if n == 55: \n        return 54\n    if n == 56: \n        return 55\n    if n == 57: \n        return 56\n    if n == 58: \n        return 57\n    if n == 59: \n        return 58\n    if n == 60: \n        return 59\n    if n == 61: \n        return 60\n    if n == 62: \n        return 61\n    if n == 63: \n        return 62\n    if n == 64: \n        return 63\n    if n == 65: \n        return 64\n    if n == 66: \n        return 65\n    if n == 67: \n        return 66\n    if n == 68: \n        return 67\n    if n == 69: \n        return 68\n    if n == 70: \n        return 69\n    if n == 71: \n        return 70\n    if n == 72: \n        return 71\n    if n == 73: \n        return 72\n    if n == 74: \n        return 73\n    if n == 75: \n        return 74\n    if n == 76: \n        return 75\n    if n == 77: \n        return 76\n    if n == 78: \n        return 77\n    if n == 79: \n        return 78\n    if n == 80: \n        return 79\n    if n == 81: \n        return 80\n    if n == 82: \n        return 81\n    if n == 83: \n        return 82\n    if n == 84: \n        return 83\n    if n == 85: \n        return 84\n    if n == 86: \n        return 85\n    if n == 87: \n        return 86\n    if n == 88: \n        return 87\n    if n == 89: \n        return 88\n    if n == 90: \n        return 89\n    if n == 91: \n        return 90\n    if n == 92: \n        return 91\n    if n == 93: \n        return 92\n    if n == 94: \n        return 93\n    if n == 95: \n        return 94\n    if n == 96: \n        return 95\n    if n == 97: \n        return 96\n    if n == 98: \n        return 97\n    if n == 99: \n        return 98\n    if n == 100: \n        return 99\n    if n == 101: \n        return 100\n    if n == 102: \n        return 101\n    if n == 103: \n        return 102\n    if n == 104: \n        return 103\n    if n == 105: \n        return 104\n    if n == 106: \n        return 105\n    if n == 107: \n        return 106\n    if n == 108: \n        return 107\n    if n == 109: \n        return 108\n    if n == 110: \n        return 109\n    if n == 111: \n        return 110\n    if n == 112: \n        return 111\n    if n == 113: \n        return 112\n    if n == 114: \n        return 113\n    if n == 115: \n        return 114\n    if n == 116: \n        return 115\n    if n == 117: \n        return 116\n    if n == 118: \n        return 117\n    if n == 119: \n        return 118\n    if n == 120: \n        return 119\n    if n == 121: \n        return 120\n    if n == 122: \n        return 121\n    if n == 123: \n        return 122\n    if n == 124: \n        return 123\n    if n == 125: \n        return 124\n    if n == 126: \n        return 125\n    if n == 127: \n        return 126\n    if n == 128: \n        return 127\n    if n == 129: \n        return 128\n    if n == 130: \n        return 129\n    if n == 131: \n        return 130\n    if n == 132: \n        return 131\n    if n == 133: \n        return 132\n    if n == 134: \n        return 133\n    if n == 135: \n        return 134\n    if n == 136: \n        return 135\n    if n == 137: \n        return 136\n    if n == 138: \n        return 137\n    if n == 139: \n        return 138\n    if n == 140: \n        return 139\n    if n == 141: \n        return 140\n    if n == 142: \n        return 141\n    if n == 143: \n        return 142\n    if n == 144: \n        return 143\n    if n == 145: \n        return 144\n    if n == 146: \n        return 145\n    if n == 147: \n        return 146\n    if n == 148: \n        return 147\n    if n == 149: \n        return 148\n    if n == 150: \n        return 149\n    if n == 151: \n        return 150\n    if n == 152: \n        return 151\n    if n == 153: \n        return 152\n    if n == 154: \n        return 153\n    if n == 155: \n        return 154\n    if n == 156: \n        return 155\n    if n == 157: \n        return 156\n    if n == 158: \n        return 157\n    if n == 159: \n        return 158\n    if n == 160: \n        return 159\n    if n == 161: \n        return 160\n    if n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    lucas_numbers = []\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        total = total + (i + 1)\n        i = i + 1\n    return total\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from itertools import count\n    from math import log2\n    max_val = float('-inf')\n    val = 0\n    for i in count(1):\n        v = n - i\n        if (v % 2) == 0:\n            if v / 2 == max_val:\n                val += 1\n            max_val = v\n        else:\n            if v / 2 == max_val:\n                val += 1\n            max_val = v\n    return val\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n < 0:\n        return print(\"Sorry, n is negative.\")\n    elif n == 0:\n        return print(\"The jacobsthal number is 1.\")\n    elif n == 1:\n        return print(\"The jacobsthal number is 1.\")\n    elif n == 2:\n        return print(\"The jacobsthal number is 2.\")\n    elif n == 3:\n        return print(\"The jacobsthal number is 3.\")\n    elif n == 4:\n        return print(\"The jacobsthal number is 4.\")\n    elif n == 5:\n        return print(\"The jacobsthal number is 5.\")\n    elif n == 6:\n        return print(\"The jacobsthal number is 6.\")\n    elif n == 7:\n        return print(\"The jacobsthal number is 7.\")\n    elif n == 8:\n        return print(\"The jacobsthal number is 8.\")\n    elif n == 9:\n        return print(\"The jacobsthal number is 9.\")\n    elif n == 10:\n        return print(\"The jacobsthal number is 10.\")\n    elif n == 11:\n        return print(\"The jacobsthal number is 11.\")\n    elif n == 12:\n        return print(\"The jacobsthal number is 12.\")\n    elif n == 13:\n        return print(\"The jacobsthal number is 13.\")\n    elif n == 14:\n        return print(\"The jacobsthal number is 14.\")\n    elif n == 15:\n        return print(\"The jacobsthal number is 15.\")\n    elif n == 16:\n        return print(\"The jacobsthal number is 16.\")\n    elif n == 17:\n        return print(\"The jacobsthal number is 17.\")\n    elif n == 18:\n        return print(\"The jacobsthal number is 18.\")\n    elif n == 19:\n        return print(\"The jacobsthal number is 19.\")\n    elif n == 20:\n        return print(\"The jacobsthal number is 20.\")\n    elif n == 21:\n        return print(\"The jacobsthal number is 21.\")\n    elif n == 22:\n        return print(\"The jacobsthal number is 22.\")\n    elif n == 23:\n        return print(\"The jacobsthal number is 23.\")\n    elif n == 24:\n        return print(\"The jacobsthal number is 24.\")\n    elif n == 25:\n        return print(\"The jacobsthal number is 25.\")\n    elif n == 26:\n        return print(\"The jacobsthal number is 26.\")\n    elif n == 27:\n        return print(\"The jacobsthal number is 27.\")\n    elif n == 28:\n        return print(\"The jacobsthal number is 28.\")\n    elif n == 29:\n        return print(\"The jacobsthal number is 29.\")\n    elif n == 30:\n        return print(\"The jacobsthal number is 30.\")\n    elif n == 31:\n        return print(\"The jacobsthal number is 31.\")\n    elif n == 32:\n        return print(\"The jacobsthal number is 32.\")\n    elif n == 33:\n        return print(\"The jacobsthal number is 33.\")\n    elif n == 34:\n        return print(\"The jacobsthal number is 34.\")\n    elif n == 35:\n        return print(\"The jacobsthal number is 35.\")\n    elif n == 36:\n        return print(\"The jacobsthal number is 36.\")\n    elif n == 37:\n        return print(\"The jacobsthal number is 37.\")\n    elif n == 38:\n        return print(\"The jacobsthal number is 38.\")\n    elif n == 39:\n        return print(\"The jacobsthal number is 39.\")\n    elif n == 40:\n        return print(\"The jacobsthal number is 40.\")\n    elif n == 41:\n        return print(\"The jacobsthal number is 41.\")\n    elif n == 42:\n        return print(\"The jacobsthal number is 42.\")\n    elif n == 43:\n        return print(\"The jacobsthal number is 43.\")\n    elif n == 44:\n        return print(\"The jacobsthal number is 44.\")\n    elif n == 45:\n        return print(\"The jacobsthal number is 45.\")\n    elif n == 46:\n        return print(\"The jacobsthal number is 46.\")\n    elif n == 47:\n        return print(\"The jacobsthal number is 47.\")\n    elif n == 48:\n        return print(\"The jacobsthal number is 48.\")\n    elif n == 49:\n        return print(\"The jacobsthal number is 49.\")\n    elif n == 50:\n        return print(\"The jacobsthal number is 50.\")\n    elif n == 51:\n        return print(\"The jacobsthal number is 51.\")\n    elif n == 52:\n        return print(\"The jacobsthal number is 52.\")\n    elif n == 53:\n        return print(\"The jacobsthal number is 53.\")\n    elif n == 54:\n        return print(\"The jacobsthal number is 54.\")\n    elif n == 55:\n        return print(\"The jacobsthal number is 55.\")\n    elif n == 56:\n        return print(\"The jacobsthal number is 56.\")\n    elif n == 57:\n        return print(\"The jacobsthal number is 57.\")\n    elif n == 58:\n        return print(\"The jacobsthal number is 58.\")\n    elif n == 59:\n        return print(\"The jacobsthal number is 59.\")\n    elif n == 60:\n        return print(\"The jacobsthal number is 60.\")\n    elif n == 61:\n        return print(\"The jacobsthal number is 61.\")\n    elif n == 62:\n        return print(\"The jacobsthal number is 62.\")\n    elif n == 63:\n        return print(\"The jacobsthal number is 63.\")\n    elif n == 64:\n        return print(\"The jacobsthal number is 64.\")\n    elif n == 65:\n        return print(\"The jacobsthal number is 65.\")\n    elif n == 66:\n        return print(\"The jacobsthal number is 66.\")\n    elif n == 67:\n        return print(\"The jacobsthal number is 67.\")\n    elif n == 68:\n        return print(\"The jacobsthal number is 68.\")\n    elif n == 69:\n        return print(\"The jacobsthal number is 69.\")\n    elif n == 70:\n        return print(\"The jacobsthal number is 70.\")\n    elif n == 71:\n        return print(\"The jacobsthal number is 71.\")\n    elif n == 72:\n        return print(\"The jacobsthal number is 72.\")\n    elif n == 73:\n        return print(\"The jacobsthal number is 73.\")\n    elif n == 74:\n        return print(\"The jacobsthal number is 74.\")\n    elif n == 75:\n        return print(\"The jacobsthal number is 75.\")\n    elif n == 76:\n        return print(\"The jacobsthal number is 76.\")\n    elif n == 77:\n        return print(\"The jacobsthal number is 77.\")\n    elif n == 78:\n        return print(\"The jacobsthal number is 78.\")\n    elif n == 79:\n        return print(\"The jacobsthal number is 79.\")\n    elif n == 80:\n        return print(\"The jacobsthal number is 80.\")\n    elif n == 81:\n        return print(\"The jacobsthal number is 81.\")\n    elif n == 82:\n        return print(\"The jacobsthal number is 82.\")\n    elif n == 83:\n        return print(\"Th"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4: \n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6: \n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8: \n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10: \n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13: \n        return 13\n    elif n == 14: \n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16: \n        return 16\n    elif n == 17: \n        return 17\n    elif n == 18: \n        return 18\n    elif n == 19: \n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26: \n        return 26\n    elif n == 27: \n        return 27\n    elif n == 28: \n        return 28\n    elif n == 29: \n        return 29\n    elif n == 30: \n        return 30\n    elif n == 31: \n        return 31\n    elif n == 32: \n        return 32\n    elif n == 33: \n        return 33\n    elif n == 34: \n        return 34\n    elif n == 35: \n        return 35\n    elif n == 36: \n        return 36\n    elif n == 37: \n        return 37\n    elif n == 38: \n        return 38\n    elif n == 39: \n        return 39\n    elif n == 40: \n        return 40\n    elif n == 41: \n        return 41\n    elif n == 42: \n        return 42\n    elif n == 43: \n        return 43\n    elif n == 44: \n        return 44\n    elif n == 45: \n        return 45\n    elif n == 46: \n        return 46\n    elif n == 47: \n        return 47\n    elif n == 48: \n        return 48\n    elif n == 49: \n        return 49\n    elif n == 50: \n        return 50\n    elif n == 51: \n        return 51\n    elif n == 52: \n        return 52\n    elif n == 53: \n        return 53\n    elif n == 54: \n        return 54\n    elif n == 55: \n        return 55\n    elif n == 56: \n        return 56\n    elif n == 57: \n        return 57\n    elif n == 58: \n        return 58\n    elif n == 59: \n        return 59\n    elif n == 60: \n        return 60\n    elif n == 61: \n        return 61\n    elif n == 62: \n        return 62\n    elif n == 63: \n        return 63\n    elif n == 64: \n        return 64\n    elif n == 65: \n        return 65\n    elif n == 66: \n        return 66\n    elif n == 67: \n        return 67\n    elif n == 68: \n        return 68\n    elif n == 69: \n        return 69\n    elif n == 70: \n        return 70\n    elif n == 71: \n        return 71\n    elif n == 72: \n        return 72\n    elif n == 73: \n        return 73\n    elif n == 74: \n        return 74\n    elif n == 75: \n        return 75\n    elif n == 76: \n        return 76\n    elif n == 77: \n        return 77\n    elif n == 78: \n        return 78\n    elif n == 79: \n        return 79\n    elif n == 80: \n        return 80\n    elif n == 81: \n        return 81\n    elif n == 82: \n        return 82\n    elif n == 83: \n        return 83\n    elif n == 84: \n        return 84\n    elif n == 85: \n        return 85\n    elif n == 86: \n        return 86\n    elif n == 87: \n        return 87\n    elif n == 88: \n        return 88\n    elif n == 89: \n        return 89\n    elif n == 90: \n        return 90\n    elif n == 91: \n        return 91\n    elif n == 92: \n        return 92\n    elif n == 93: \n        return 93\n    elif n == 94: \n        return 94\n    elif n == 95: \n        return 95\n    elif n == 96: \n        return 96\n    elif n == 97: \n        return 97\n    elif n == 98: \n        return 98\n    elif n == 99: \n        return 99\n    elif n == 100: \n        return 100\n    elif n == 101: \n        return 101\n    elif n == 102: \n        return 102\n    elif n == 103: \n        return 103\n    elif n == 104: \n        return 104\n    elif n == 105: \n        return 105\n    elif n == 106: \n        return 106\n    elif n == 107: \n        return 107\n    elif n == 108: \n        return 108\n    elif n == 109: \n        return 109\n    elif n == 110: \n        return 110\n    elif n == 111: \n        return 111\n    elif n == 112: \n        return 112\n    elif n == 113: \n        return 113\n    elif n == 114: \n        return 114\n    elif n == 115: \n        return 115\n    elif n == 116: \n        return 116\n    elif n == 117: \n        return 117\n    elif n == 118: \n        return 118\n    elif n == 119: \n        return 119\n    elif n == 120: \n        return 120\n    elif n == 121: \n        return 121\n    elif n == 122: \n        return 122\n    elif n == 123: \n        return 123\n    elif n == 124: \n        return 124\n    elif n == 125: \n        return 125\n    elif n == 126: \n        return 126\n    elif n == 127: \n        return 127\n    elif n == 128: \n        return 128\n    elif n == 129: \n        return 129\n    elif n == 130: \n        return 130\n    elif n == 131: \n        return 131\n    elif n == 132: \n        return 132\n    elif n == 133: \n        return 133\n    elif n == 134: \n        return 134\n    elif n == 135: \n        return 135\n    elif n == 136: \n        return 136\n    elif n == 137: \n        return 137\n    elif n == 138: \n        return 138\n    elif n == 139: \n        return 139\n    elif n == 140: \n        return 140\n    elif n == 141: \n        return 141\n    elif n == 142: \n        return 142\n    elif n == 143: \n        return 143\n    elif n == 144: \n        return 144\n    elif n == 145: \n        return 145\n    elif n == 146: \n        return 146\n    elif n == 147: \n        return 147\n    elif n == 148: \n        return 148\n    elif n == 149: \n        return 149\n    elif n == 150: \n        return 150"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 43\n    elif n == 7:\n        return 85\n    elif n == 8:\n        return 171\n    elif n == 9:\n        return 341\n    elif n == 10:\n        return 683\n    elif n == 11:\n        return 1365\n    elif n == 12:\n        return 2731\n    elif n == 13:\n        return 3013\n    else:\n        return 3013\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 0\n    while x < n:\n        x += 1\n        y = x-1\n        if y == 0:\n            continue\n        while y >= 1:\n            if n % y == 0 and y!= 2:\n                y -= 1\n                continue\n            elif n % y == 0:\n                y -= 1\n                x += 1\n                continue\n            else:\n                return y\n    return 0\n    \ndef jacobsthal_nums(n):\n    '''\n    Write a function to return the nth jacobsthal number.\n    '''\n    x = 0\n    while x < n:\n        x += 1\n        y = x-1\n        if y == 0:\n            continue\n        while y >= 1:\n            if n % y == 0:\n                y -= 1\n                continue\n            else:\n                return y\n    return 0"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    factorial = 1\n    n = abs(n)\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    numbers = [1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 3141, 4841, 6567, 9597, 9912, 16583, 25147, 29681]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = 0\n    for tup in test_list:\n        tup_k = len(tup)\n        if tup_k < K:\n            break\n        else:\n            min_k = min(tup_k, min_k)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(test_list, key = lambda x: x[K - 1])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_records = []\n    for i in range(len(test_list)):\n        min_k_records.append(test_list[i][:K])\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp = []\n    for i in range(len(test_list)):\n        temp.append(test_list[i])\n        del(test_list[i])\n    for i in range(len(test_list)):\n        temp.append(test_list[i])\n    return min(temp)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    print('function min_k called')\n    if K <= 0:\n        return\n    if len(test_list) < K:\n        return\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return 0\n    min_k = K\n    count = 0\n    for i in test_list:\n        count += 1\n        if count < min_k:\n            min_k = count\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return sorted(test_list)\n    else:\n        return sorted(test_list, key = lambda x: x[len(x)-1-K])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    c = []\n    for i in range(len(test_list)):\n        c.append(test_list[i][1])\n    \n    # sorting the tuple in ascending order\n    c.sort()\n    \n    # The minimum k is always 1\n    return min(c)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l1 = list(test_list)\n    l1.sort()\n    k = 0\n    result = []\n    for i in range(len(l1)):\n        k += 1\n        result.append(l1[i])\n    print(result)\n    return k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Dictionary that maps tuple items to their respective index in test_list\n    # -- if tuple is in test_list, use its index\n    # -- if tuple is not in test_list, return -1\n    test_dict = {}\n    for i in range(len(test_list)):\n        test_dict[test_list[i]] = i\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l_tuple = set(tuple(l1+l2+l3))\n    return list(l_tuple)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0 -> 0, 0, 0\n    index = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    index.append(i)\n    return index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n        elif i in l3:\n            common.append(i)\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    \n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    index_list.append(i)\n    \n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    lista = []\n    if (l1[0] == l2[0]) and (l1[1] == l2[1]):\n        lista = l1 + l2\n        \n    elif (l1[0] == l3[0]) and (l1[1] == l3[1]):\n        lista = l1 + l3\n    \n    elif (l2[0] == l3[0]) and (l2[1] == l3[1]):\n        lista = l2 + l3\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i1 = 0\n    i2 = 0\n    i3 = 0\n    common_elements = []\n    while i1 < len(l1) and i2 < len(l2) and i3 < len(l3):\n        if l1[i1] == l3[i3]:\n            common_elements.append(l1[i1])\n            i1 += 1\n        elif l2[i2] == l3[i3]:\n            common_elements.append(l2[i2])\n            i2 += 1\n        else:\n            common_elements.append(l3[i3])\n            i3 += 1\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(0, 3):\n        if l1[i] in l2[i] or l1[i] in l3[i] or l2[i] in l3[i] or l3[i] in l1[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    from collections import defaultdict\n    # We don't want to create an index dictionary\n    # Make it a list of lists\n    index = list()\n    index.extend(l1)\n    index.extend(l2)\n    index.extend(l3)\n    # We want to iterate over each element of the list\n    index_list = []\n    for i in index:\n        if i in index_list:\n            # If the element is present in both lists\n            # We only want the common elements\n            pass\n        else:\n            # If the element isn't in both lists\n            # We need to iterate over the remaining list\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    if l1 is None:\n        l1 = []\n    if l2 is None:\n        l2 = []\n    if l3 is None:\n        l3 = []\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return sorted(numbers)[1]\n    \n    # WRITE YOUR SOLUTION\n    \n    \n    #testing\n    for num in numbers:\n        if (num < numbers[1]):\n            return num\n        \n    \n    #testing\n    return sorted(numbers)[1]\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 2:\n        return numbers[0]\n    return numbers[1]\n    \ndef third_smallest(numbers):\n    '''\n    Write a function to find the third smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 3:\n        return numbers[2]\n    return numbers[2]\n    \ndef fourth_smallest(numbers):\n    '''\n    Write a function to find the fourth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 4:\n        return numbers[3]\n    return numbers[3]\n    \ndef fifth_smallest(numbers):\n    '''\n    Write a function to find the fifth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 5:\n        return numbers[4]\n    return numbers[4]\n    \ndef sixth_smallest(numbers):\n    '''\n    Write a function to find the sixth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 6:\n        return numbers[5]\n    return numbers[5]\n    \ndef seventh_smallest(numbers):\n    '''\n    Write a function to find the seventh smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 7:\n        return numbers[6]\n    return numbers[6]\n    \ndef eighth_smallest(numbers):\n    '''\n    Write a function to find the eighth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 8:\n        return numbers[7]\n    return numbers[7]\n    \ndef nineth_smallest(numbers):\n    '''\n    Write a function to find the ninth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 9:\n        return numbers[8]\n    return numbers[8]\n    \ndef tenth_smallest(numbers):\n    '''\n    Write a function to find the tenth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 10:\n        return numbers[9]\n    return numbers[9]\n    \ndef nineth_large(numbers):\n    '''\n    Write a function to find the tenth largest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 10:\n        return numbers[10]\n    return numbers[10]\n    \ndef tenth_smallest_large(numbers):\n    '''\n    Write a function to find the tenth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 10:\n        return numbers[11]\n    return numbers[11]\n    \ndef millionth_smallest(numbers):\n    '''\n    Write a function to find the millionth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 100000:\n        return numbers[12]\n    return numbers[12]\n    \ndef millionth_smallest_large(numbers):\n    '''\n    Write a function to find the millionth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 100000:\n        return numbers[13]\n    return numbers[13]\n    \ndef fifty_smallest(numbers):\n    '''\n    Write a function to find the fifty smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 500:\n        return numbers[14]\n    return numbers[14]\n    \ndef fifty_smallest_large(numbers):\n    '''\n    Write a function to find the fifty smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 500:\n        return numbers[15]\n    return numbers[15]\n    \ndef ten_smallest(numbers):\n    '''\n    Write a function to find the tenth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 10:\n        return numbers[16]\n    return numbers[16]\n    \ndef ten_smallest_large(numbers):\n    '''\n    Write a function to find the tenth smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 10:\n        return numbers[17]\n    return numbers[17]\n    \ndef hundred_smallest(numbers):\n    '''\n    Write a function to find the hundred smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 100000:\n        return numbers[18]\n    return numbers[18]\n    \ndef hundred_smallest_large(numbers):\n    '''\n    Write a function to find the hundred smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 100000:\n        return numbers[19]\n    return numbers[19]\n    \ndef thousand_smallest(numbers):\n    '''\n    Write a function to find the thousand smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 100000:\n        return numbers[20]\n    return numbers[20]\n    \ndef thousand_smallest_large(numbers):\n    '''\n    Write a function to find the thousand smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 100000:\n        return numbers[21]\n    return numbers[21]\n    \ndef million_smallest(numbers):\n    '''\n    Write a function to find the millionest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 100000:\n        return numbers[22]\n    return numbers[22]\n    \ndef million_smallest_large(numbers):\n    '''\n    Write a function to find the millionest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 100000:\n        return numbers[23]\n    return numbers[23]\n    \ndef ten_last(numbers):\n    '''\n    Write a function to find the ten last number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 10:\n        return numbers[24]\n    return numbers[24]\n    \ndef ten_last_large(numbers):\n    '''\n    Write a function to find the ten last number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 10:\n        return numbers[25]\n    return numbers[25]\n    \ndef eleven_last(numbers):\n    '''\n    Write a function to find the eleven last number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 11:\n        return numbers[26]\n    return numbers[26]\n    \ndef eleven_last_large(numbers):\n    '''\n    Write a function to find the eleven last number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 11:\n        return numbers[27]\n    return numbers[27]\n    \ndef twelve_last(numbers):\n    '''\n    Write a function to find the twelve last number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 12:\n        return numbers[28]\n    return numbers[28]\n    \ndef twelve_last_large(numbers):\n    '''\n    Write a function to find the twelve last number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 12:\n        return numbers[29]\n    return numbers[29]\n    \ndef seventy_last(numbers):\n    '''\n    Write a function to find the seventy last number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 60:\n        return numbers[30]\n    return numbers[30]\n    \ndef seventy_last_large(numbers):\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for i in range(len(numbers)):\n        for j in range(len(numbers) - 1):\n            if numbers[j] > numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #\n    # EXAMPLE\n    # >>> second_smallest([5, 12, 8, 9, 11, 5, 12, 8, 9, 7])\n    # 9\n    #\n    # >>> second_smallest([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n    # 7\n    #\n    # >>> second_smallest([])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n    # 7\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5])\n    # 1\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 4\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 4\n    #\n    # >>> second_smallest([])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 4\n    #\n    # >>> second_smallest([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n    # 7\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5])\n    # 4\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 4\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 4\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 4\n    #\n    # >>> second_smallest([])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 5\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 5\n    #\n    # >>> second_smallest([])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 4\n    #\n    # >>> second_smallest([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n    # 7\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5])\n    # 4\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 5\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, in <module>\n    # TypeError: 'list' object has no attribute 'append'\n    #\n    # >>> second_smallest([1, 2, 3, 4, 5])\n    # Traceback (most recent call last):\n    #   File \"<stdin>\", line 1, i"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # brute force: time complexity O(n^2)\n    # worst case: O(n)\n    # 2 extra loops to get the numbers [2,4,6,8]\n    for x in range(0, len(numbers)):\n        min_num = numbers[x]\n        for y in range(x+1, len(numbers)):\n            if min_num > numbers[y]:\n                min_num = numbers[y]\n                second_smallest = min_num\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    smallest_num = numbers[0]\n    second_smallest_num = None\n    for num in numbers:\n        if num < smallest_num:\n            smallest_num = num\n            second_smallest_num = smallest_num\n    return second_smallest_num\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n    return smallest\n    "
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[len(numbers)-1]\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_zero_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'z's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_zero_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'z's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'z's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_one_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'z's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_one_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'z's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_zero_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_one_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_one_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_two_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_two_zero_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_two_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_two_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_two_one_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_two_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=\\w)\\b\\w+'\n    return re.search(pattern, text)\ndef text_match_two_two_one_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/pytho"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'a+b', text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b)')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #print(\"Matching a string with a and b\",text)\n    # Find all of the 'a' between'' and '.'\n    # Make a text string with all of the 'a' around it and have one of the 'b's\n    # Use the Python Re module.\n    # The first group is the only group so that I can find it\n    text_regex = re.compile(r'(?<=a)(?<=b).+')\n    #print(text_regex.findall(text))\n    #print(text_regex.findall(text,1,2,3,4,5,6,7,8,9,10))\n    text_regex = re.compile(r'(?<=a)(?<=b).+')\n    return text_regex.findall(text)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\b'\n    print(text)\n    match = re.search(pattern, text)\n    print(match)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #print(\"text_match_zero_one test\",text)\n    text_list = text.split(' ')\n    #print(\"text_list\",text_list)\n    if 'a' in text_list:\n        if text_list.index('a') == 0:\n            text_list.remove('a')\n    if 'b' in text_list:\n        if text_list.index('b') == 0:\n            text_list.remove('b')\n    return''.join(text_list)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match('(?<=a)[b]{1}(?= )', text)\n    if result:\n        return result.group()\n    else:\n        return text\n    \ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by two or more 'a's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match('(?<=b)[a]{2}(?= )', text)\n    if result:\n        return result.group()\n    else:\n        return text\n    \ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has two or more 'a's, if a and b match the string, where a and b are separated by a space, return a, b separated by a space.\n    '''\n    result = re.match('(?<=a)[a]{2,}(?= )', text)\n    if result:\n        return result.group()\n    else:\n        return text\n    \ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has a number followed by one or more 'b's, if b matches the string, where b is separated by a number, return b followed by a number separated by a number.\n    '''\n    result = re.match('(?<=b)[a-z][a-z]{1,}(?= )', text)\n    if result:\n        return result.group()\n    else:\n        return text\n    \ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has a number followed by two or more 'b's, if b and c match the string, where a and b followed by a number separated by a space, return a, b followed by a number separated by a space, and c followed by a number separated by a space.\n    '''\n    result = re.match('(?<=b)[a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z]{1,}(?= )', text)\n    if result:\n        return result.group()\n    else:\n        return text\n    \ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has a number followed by two or more 'b's, if b and c match the string, where b followed by a number separated by a number and c followed by a number separated by a number.\n    '''\n    result = re.match('(?<=b)[a-z][a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]{1,}(?= )', text)\n    if result:\n        return result.group()\n    else:\n        return text\n    \ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has a number followed by two or more 'b's, if b followed by a number and c followed by a number separated by a space, then a followed by a number followed by a number followed by a number followed by a number and c followed by a number followed by a number separated by a space, then a followed by a number followed by a number followed by a number followed by a number followed by a number followed by a number followed by a number separated by a space.\n    '''\n    result = re.match('(?<=b)[a-z][a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z][a-z]{1,}[a-z][a-z][a-z][a-z][a-z]{1,}(?= )', text)\n    if result:\n        return result.group()\n    else:\n        return text\n    \ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has a number followed by two or more 'b's, if b followed by a number followed by a number followed by a number followed by two or more characters separated by a space, then a followed by two or more characters separated by two or more characters separated by two or more characters followed by two or more characters separated by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters separated by two or more characters separated by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more characters followed by two or more character"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace(\"a\",\"\")\n    text = text.replace(\"b\",\"\")\n    # Now we will check if the string is valid\n    match_zero_one = re.search(r'^([a-z]+)$',text)\n    match_zero_one = match_zero_one.group(1)\n    if match_zero_one.isalpha() == False:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # add your regex code here\n    return bool(re.search(r'\\b[a-b][a-b]', text))\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    for i in range(len(text)-2):\n        if text[i:i+3]=='aab':\n            return True\n    return False\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if not test_list:\n        return 0\n    result = 0\n    l = len(test_list)\n    for i in range(l):\n        if i > 0 and test_list[i] == test_list[i-1]:\n            continue\n        if i < l-1 and test_list[i] == test_list[i+1]:\n            continue\n        result += 1\n    return result\ndef count_reverse_pairs_memo(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    if not test_list:\n        return 0\n    result = 0\n    l = len(test_list)\n    memo = {}\n    for i in range(l):\n        if i > 0 and test_list[i] == test_list[i-1]:\n            continue\n        if i < l-1 and test_list[i] == test_list[i+1]:\n            continue\n        result += 1\n        if i not in memo:\n            memo[i] = 1\n        else:\n            memo[i] += 1\n    return result\ndef count_reverse_pairs_list(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    if not test_list:\n        return 0\n    result = 0\n    l = len(test_list)\n    for i in range(l):\n        if i > 0 and test_list[i] == test_list[i-1]:\n            continue\n        if i < l-1 and test_list[i] == test_list[i+1]:\n            continue\n        result += 1\n    return result\ndef count_reverse_pairs_hash(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    if not test_list:\n        return 0\n    result = 0\n    l = len(test_list)\n    for i in range(l):\n        if i > 0 and test_list[i] == test_list[i-1]:\n            continue\n        if i < l-1 and test_list[i] == test_list[i+1]:\n            continue\n        result += 1\n    return result\ndef max_rev(l):\n    \"\"\"\n    max([])\n    \"\"\"\n    if l == 0:\n        return 0\n    if l == 1:\n        return 1\n    return max(max_rev(l-2), max_rev(l-1)) + 1\ndef min_rev(l):\n    \"\"\"\n    min([])\n    \"\"\"\n    if l == 0:\n        return 0\n    if l == 1:\n        return 1\n    return min_rev(l-2) + 1\ndef get_shortest_path(graph, start, goal):\n    \"\"\"\n    print shortest path\n    print shortest path\n    print shortest path\n    \"\"\"\n    path = [start]\n    visited = [False] * (len(graph))\n    visited[start] = True\n    while len(path)!= 0:\n        node = path[0]\n        path = path[1:]\n        if node == goal:\n            print(path)\n            return True\n        else:\n            for n in graph[node]:\n                if not visited[n]:\n                    visited[n] = True\n                    path.append(n)\n    return False\ndef reconstruct_path(came_from, current, goal):\n    \"\"\"\n    returns the path from current to goal\n    \"\"\"\n    path = []\n    while current!= goal:\n        path.append(current)\n        current = came_from[current]\n    path.append(current)\n    path.reverse()\n    return path\ndef dfs(graph, start, goal):\n    \"\"\"\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    \"\"\"\n    if start == goal:\n        return [start]\n    stack = [start]\n    visited = [False] * (len(graph))\n    visited[start] = True\n    while len(stack)!= 0:\n        node = stack[-1]\n        stack = stack[:-1]\n        if node == goal:\n            print(reconstruct_path(came_from, node, goal))\n            return True\n        else:\n            for n in graph[node]:\n                if not visited[n]:\n                    visited[n] = True\n                    stack.append(n)\n    return False\ndef dfs_recursive(graph, start, goal):\n    \"\"\"\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    \"\"\"\n    if start == goal:\n        return [start]\n    stack = [start]\n    visited = [False] * (len(graph))\n    visited[start] = True\n    while len(stack)!= 0:\n        node = stack[-1]\n        stack = stack[:-1]\n        if node == goal:\n            print(reconstruct_path(came_from, node, goal))\n            return True\n        else:\n            for n in graph[node]:\n                if not visited[n]:\n                    visited[n] = True\n                    stack.append(n)\n    return False\ndef bfs(graph, start, goal):\n    \"\"\"\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    \"\"\"\n    if start == goal:\n        return [start]\n    queue = [start]\n    visited = [False] * (len(graph))\n    visited[start] = True\n    while len(queue)!= 0:\n        node = queue[-1]\n        queue = queue[:-1]\n        if node == goal:\n            print(reconstruct_path(came_from, node, goal))\n            return True\n        else:\n            for n in graph[node]:\n                if not visited[n]:\n                    visited[n] = True\n                    queue.append(n)\n    return False\ndef bfs_recursive(graph, start, goal):\n    \"\"\"\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    print shortest path\n    \"\"\"\n    if start == goal:\n        return [start]\n    queue = [start]\n    visited = [False] * (len(graph))\n    visited[start] = True\n    while len(queue)!= 0:\n        node = queue[-1]\n        queue = queue[:-1]\n        if node == goal:\n            print(reconstruct_path(came_from, node, goal))\n            return True\n        else:\n            for n in graph[node]:\n                if not visited[n]:\n                    visited[n] = True\n                    queue.append(n)\n    return False\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    l = len(test_list)\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len(Counter(test_list).items())\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    # loop through the list\n    for i in range(len(test_list)):\n        # find the start of the string\n        j = i\n        # loop through the rest of the string\n        while j < len(test_list) and test_list[j].endswith(test_list[i]):\n            j += 1\n        # check if the result is the length of the string\n        if j - i == len(test_list[i]):\n            # add 1 to the count\n            count += 1\n    return count\n    \ntest_list = [\"abcdef\", \"abcdee\", \"bcdeee\", \"bdfedf\"]\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # iterate through the list of strings\n    for i in range(len(test_list)-1):\n        \n        # iterate through the list of strings\n        for j in range(i+1, len(test_list)):\n            \n            # if the two strings are equal, increment the count by 1\n            if test_list[i] == test_list[j]:\n                count = count + 1\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Count the occurrences of each letter in the given string\n    reverse_count = {}\n    for char in test_list:\n        if char in reverse_count:\n            reverse_count[char] += 1\n        else:\n            reverse_count[char] = 1\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    i = 0\n    j = len(test_list)-1\n    # print(test_list)\n    while i < j:\n        if test_list[i] == test_list[j]:\n            i += 1\n            j -= 1\n        elif test_list[i] < test_list[j]:\n            i += 1\n        else:\n            j -= 1\n    return i\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[j] == test_list[i]:\n                reverse_pairs = reverse_pairs + 1\n    print(reverse_pairs)\n    return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) < 2:\n        return 0\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            count += 1\n        else:\n            count = 0\n            return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        if list1[i] not in counts:\n            counts[list1[i]] = 1\n        else:\n            counts[list1[i]] += 1\n    return counts\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if list1 == []:\n        return {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    uniquelist=dict()\n    for i in range(len(list1)):\n        if list1[i] not in uniquelist:\n            uniquelist[list1[i]]=0\n        else:\n            uniquelist[list1[i]]+=1\n    return uniquelist\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # your code here\n    d = dict()\n    for i in list1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    counter = {}\n    counter_dict = {}\n    for i in range(0, len(list1)):\n        if len(list1[i]) in counter:\n            counter[len(list1[i])] += 1\n        else:\n            counter[len(list1[i])] = 1\n    for k,v in counter.items():\n        counter_dict[k] = (v, v)\n    return counter_dict\n    # return counter"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict(Counter(list1))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] in dict.keys():\n                dict[list1[i]].append(list1[j])\n            else:\n                dict[list1[i]] = [list1[j]]\n    return dict"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if int(num) == int(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    if len(num) == 1:\n        if num[0] == '0' and num[1] == '0':\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return num.count('.') == 1\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str or len(num) == 0:\n        return False\n    num = num.strip()\n    dec = False\n    dec_sign = False\n    dec_num = []\n    for i in num:\n        if i.isdigit() == True:\n            dec_num.append(i)\n        else:\n            if dec == True:\n                dec = False\n                dec_sign = True\n            else:\n                dec_sign = True\n            num = num.replace(i, \"\")\n    for i in dec_num:\n        if i == '-' or i == '+' or i == '.' or i == 'e' or i == 'E':\n            return False\n    if dec_sign == True:\n        return False\n    if len(num) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).isnumeric()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] not in '0123456789':\n        return False\n    if num[0] == '0':\n        return False\n    i = 0\n    flag = True\n    while i < len(num):\n        if num[i]!= '0':\n            flag = False\n        i += 1\n    return flag\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    else:\n        if num[0] == '-':\n            num = num[1:]\n        elif num[0] == '+' or num[0] == '0':\n            return False\n        else:\n            return True\n        if num[-1] == '.':\n            num = num[:-1]\n        if num[-1] == 'e':\n            return True\n        else:\n            return False\n    \n    "
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        if arr[0] == arr[0]:\n            return arr[0]\n        else:\n            return False\n    else:\n        return False\n    return \n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # get the number of elements in a given array\n    n = len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_uniq = list(set(arr))\n    if len(arr_uniq)!= 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elem = set(arr)\n    if len(unique_elem) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Your code here\n    dic = {}\n    for i in arr:\n        if i in dic:\n            return False\n        else:\n            dic[i] = 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        # 1. loop through the list and find the index of the first item\n        for i in range(len(arr)):\n            if arr[i]!= arr[0]:\n                return False\n        # 2. if the first item of the list is the same as the last item in the list\n        # then return true\n        if arr[-1] == arr[0]:\n            return True\n        # 3. the numbers are not unique\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    counter = Counter(arr)\n    for elem in arr:\n        if elem not in counter:\n            return False\n    return True\n    \n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_ = set(arr)\n    if len(set_)==1:\n        return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if not arr:\n        return False\n    elif len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if(arr.count(i) > 1):\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        monthnum3 = int(monthnum3)\n        if monthnum3 in range(1,13):\n            if monthnum3 == 1:\n                monthnum3 = \"January\"\n            elif monthnum3 == 2:\n                monthnum3 = \"February\"\n            elif monthnum3 == 3:\n                monthnum3 = \"March\"\n            elif monthnum3 == 4:\n                monthnum3 = \"April\"\n            elif monthnum3 == 5:\n                monthnum3 = \"May\"\n            elif monthnum3 == 6:\n                monthnum3 = \"June\"\n            elif monthnum3 == 7:\n                monthnum3 = \"July\"\n            elif monthnum3 == 8:\n                monthnum3 = \"August\"\n            elif monthnum3 == 9:\n                monthnum3 = \"September\"\n            elif monthnum3 == 10:\n                monthnum3 = \"October\"\n            elif monthnum3 == 11:\n                monthnum3 = \"November\"\n            elif monthnum3 == 12:\n                monthnum3 = \"December\"\n            return monthnum3\n        elif monthnum3 < 1 or monthnum3 > 12:\n            return \"Enter a valid month number between 1 and 12\"\n        else:\n            return \"Please enter a number from 1 to 12\"\n    except:\n        return \"Please enter a number from 1 to 12\"\ndef check_month(month1,month2,month3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        monthnum1 = int(month1)\n        monthnum2 = int(month2)\n        monthnum3 = int(month3)\n        if monthnum1 in range(1,13) and monthnum2 in range(1,13) and monthnum3 in range(1,13):\n            if monthnum1 == 1 and monthnum2 == 1 and monthnum3 == 1:\n                monthnum1 = \"January\"\n            elif monthnum1 == 2 and monthnum2 == 2 and monthnum3 == 2:\n                monthnum1 = \"February\"\n            elif monthnum1 == 3 and monthnum2 == 3 and monthnum3 == 3:\n                monthnum1 = \"March\"\n            elif monthnum1 == 4 and monthnum2 == 4 and monthnum3 == 4:\n                monthnum1 = \"April\"\n            elif monthnum1 == 5 and monthnum2 == 5 and monthnum3 == 5:\n                monthnum1 = \"May\"\n            elif monthnum1 == 6 and monthnum2 == 6 and monthnum3 == 6:\n                monthnum1 = \"June\"\n            elif monthnum1 == 7 and monthnum2 == 7 and monthnum3 == 7:\n                monthnum1 = \"July\"\n            elif monthnum1 == 8 and monthnum2 == 8 and monthnum3 == 8:\n                monthnum1 = \"August\"\n            elif monthnum1 == 9 and monthnum2 == 9 and monthnum3 == 9:\n                monthnum1 = \"September\"\n            elif monthnum1 == 10 and monthnum2 == 10 and monthnum3 == 10:\n                monthnum1 = \"October\"\n            elif monthnum1 == 11 and monthnum2 == 11 and monthnum3 == 11:\n                monthnum1 = \"November\"\n            elif monthnum1 == 12 and monthnum2 == 12 and monthnum3 == 12:\n                monthnum1 = \"December\"\n            return monthnum1\n        elif monthnum1 < 1 or monthnum1 > 12:\n            return \"Please enter a valid month number between 1 and 12\"\n        elif monthnum2 < 1 or monthnum2 > 12:\n            return \"Please enter a valid month number between 1 and 12\"\n        elif monthnum3 < 1 or monthnum3 > 12:\n            return \"Please enter a valid month number between 1 and 12\"\n        else:\n            return \"Please enter a number from 1 to 12\"\n    except:\n        return \"Please enter a number from 1 to 12\"\ndef find_next_month(month_1,month_2):\n    '''\n    Write a function to find the next month or the month that ends on the given month number.\n    '''\n    try:\n        monthnum_1 = int(month_1)\n        monthnum_2 = int(month_2)\n        if monthnum_1 < 1 or monthnum_1 > 12:\n            return \"Enter a valid month number between 1 and 12\"\n        elif monthnum_2 < 1 or monthnum_2 > 12:\n            return \"Enter a valid month number between 1 and 12\"\n        else:\n            return \"Enter a valid month number between 1 and 12\"\n    except:\n        return \"Enter a valid month number between 1 and 12\"\ndef check_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    try:\n        year = int(year)\n        if year % 400 == 0:\n            if year % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        elif year % 100 == 0:\n            if year % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        else:\n            return \"Not Leap Year\"\n    except:\n        return \"Enter a valid year\"\ndef check_year_ending(year1):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    try:\n        year1 = int(year1)\n        if year1 % 400 == 0:\n            if year1 % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        elif year1 % 100 == 0:\n            if year1 % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        else:\n            return \"Not Leap Year\"\n    except:\n        return \"Enter a valid year\"\ndef check_year_ending_month(year1,month_1,month_2):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    try:\n        year1 = int(year1)\n        month_1 = int(month_1)\n        month_2 = int(month_2)\n        if year1 % 400 == 0:\n            if year1 % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        elif year1 % 100 == 0:\n            if year1 % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        else:\n            return \"Not Leap Year\"\n    except:\n        return \"Enter a valid year\"\ndef check_year_ending_month_end(year1,month_1,month_2):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    try:\n        year1 = int(year1)\n        month_1 = int(month_1)\n        month_2 = int(month_2)\n        if year1 % 400 == 0:\n            if year1 % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        elif year1 % 100 == 0:\n            if year1 % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        else:\n            return \"Not Leap Year\"\n    except:\n        return \"Enter a valid year\"\ndef check_year_ending_month_end_month(year1,month_1,month_2):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    try:\n        year1 = int(year1)\n        month_1 = int(month_1)\n        month_2 = int(month_2)\n        if year1 % 400 == 0:\n            if year1 % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        elif year1 % 100 == 0:\n            if year1 % 4 == 0:\n                return \"Leap Year\"\n            else:\n                return \"Not Leap Year\"\n        else:\n            return \"Not Leap Year\"\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        return True\n        \ndef is_leap_year(year):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    if year%4==0:\n        if year%100==0 and year%400==0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # write your logic here\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check = monthnum3 % 30 > 0\n    if check:\n        print(f\"You entered {monthnum3} which is a month number, which is not in the year (01-12).\")\n    else:\n        print(f\"You entered {monthnum3} which is a month number, which is in the year (01-12).\")\n    return check\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        monthnum3 = int(monthnum3)\n    except:\n        monthnum3 = \"Please enter an integer\"\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return True if monthnum3 in range(1,13) else False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 0):\n        monthnum3 = 12\n    elif(monthnum3 == 1):\n        monthnum3 = 1\n    elif(monthnum3 == 2):\n        monthnum3 = 2\n    elif(monthnum3 == 3):\n        monthnum3 = 3\n    elif(monthnum3 == 4):\n        monthnum3 = 4\n    elif(monthnum3 == 5):\n        monthnum3 = 5\n    elif(monthnum3 == 6):\n        monthnum3 = 6\n    elif(monthnum3 == 7):\n        monthnum3 = 7\n    elif(monthnum3 == 8):\n        monthnum3 = 8\n    elif(monthnum3 == 9):\n        monthnum3 = 9\n    elif(monthnum3 == 10):\n        monthnum3 = 10\n    elif(monthnum3 == 11):\n        monthnum3 = 11\n    elif(monthnum3 == 12):\n        monthnum3 = 12\n    else:\n        return False\n    return monthnum3\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 > 12 or monthnum3 <= 1:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print(arr)\n    for i in range(0,n):\n        for j in range(i,n):\n            print(arr[i],arr[j])\n            if abs(arr[i]-arr[j])>abs(arr[i]-arr[j]):\n                print(\"added\")\n                arr[i],arr[j]=arr[j],arr[i]\n    print(arr)\n    return arr\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return arr[0]\n    elif n==2:\n        return min(arr[0],arr[1])\n    else:\n        minimum = arr[0]\n        j = 1\n        k = 2\n        while k<n-1:\n            minimum = min(minimum, arr[j]+arr[k])\n            k = k+1\n        return minimum"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return arr[1] - arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i,j = 0,0\n    m,n = len(arr), len(arr[0])\n    min_diff = arr[i][j] - arr[j][i]\n    while i < m and j < n:\n        if arr[i][j] < arr[i][j + 1]:\n            j+=1\n        elif arr[i][j] > arr[i][j + 1]:\n            i+=1\n        else:\n            min_diff = min(min_diff, arr[i][j] - arr[i][j + 1])\n            i +=1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # For each element in array\n    for i in range(n):\n        # For each element in array\n        for j in range(n-1):\n            # If elements are equal, set diff to zero\n            if arr[i] == arr[j]:\n                diff = 0\n            # If element is less, set diff to number of elements between i and j\n            elif arr[i] < arr[j]:\n                diff = n-1-j\n            # If element is greater, set diff to number of elements between i and j-1\n            elif arr[i] > arr[j]:\n                diff = j-i\n            # If element is equal, set diff to zero\n            else:\n                diff = 0\n            # Set diff equal to the min difference\n            arr[i+diff] = diff\n    \n    return arr\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = 0\n    for i in range(n):\n        diff = arr[i] - arr[i+1]\n        if diff > diff:\n            return diff\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = arr[0] - arr[1]\n    for i in range(2, n):\n        if arr[i] - arr[i-1]!= diff:\n            return 'Not found'\n        diff = arr[i] - arr[i-1]\n    return 'Found'\narr = [5,2,3,1,9,6,7,3,4,8,9]\nn = len(arr)\nprint(find_min_diff(arr,n))\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 0\n    max_diff = 0\n    for i in range(0,n):\n        min_diff = min_diff + abs(arr[i] - arr[i+1])\n        max_diff = max_diff + abs(arr[i] - arr[i+1])\n    return min_diff, max_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        minimum_diff = min(minimum_diff, arr[i] - arr[i-1])\n    return minimum_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    min_diff = arr[0] - arr[1]\n    for i in range(2,n):\n        min_diff = min(arr[i] - arr[i-1], min_diff)\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if str==\"\":\n        return 0\n    return len(str)-len(str.replace('0','9'))+1\ndef divisors(num):\n    '''\n    Write a python function to return all divisors of a given number.\n    '''\n    if num==0:\n        return []\n    if num==1:\n        return [1]\n    if num<=1:\n        return []\n    if num%2==0:\n        r=divisors(num//2)\n        r.append(num)\n        return r\n    else:\n        r=[]\n        for i in range(1,num+1):\n            if num%i==0:\n                r.append(i)\n        r.append(num)\n        return r\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n in divisors(n):\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef main():\n    print(\"Is it a prime number?\")\n    print(\"1.Yes\")\n    print(\"2.No\")\n    while True:\n        try:\n            choice = input(\"Enter choice: \")\n            if choice==\"1\":\n                print(\"Is it a prime number?\")\n                n=int(input(\"Enter number: \"))\n                if is_prime(n):\n                    print(n,\"is prime\")\n                else:\n                    print(n,\"is not prime\")\n            elif choice==\"2\":\n                print(\"Is it a prime number?\")\n                n=int(input(\"Enter number: \"))\n                if n<=2:\n                    print(n,\"is not prime\")\n                else:\n                    print(n,\"is prime\")\n            else:\n                print(\"Invalid choice\")\n        except:\n            print(\"Invalid choice\")\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in str:\n        if i.isdigit():\n            digits += 1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return str.count('0')\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return(str.isdigit())\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    sum=0\n    for x in str:\n        if x.isdigit():\n            sum+=1\n    return sum\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    s = 0\n    for i in str:\n        if i.isdigit():\n            s += 1\n    return s\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # init\n    count = 0\n    # loop\n    for i in str:\n        # if i is a digit\n        if i.isdigit():\n            count += 1\n    # output\n    print(\"Number of Digits in str:\", count)\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n in range(1,101):\n        if n%2==0:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_prime(n): \n    '''\n    Write a function to find prime number n. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,int(math.sqrt(n)),2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_prime(n): \n    '''\n    Write a function to find prime number n. geeksforgeeks.org/n-th-prime-prime-number/\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,int(math.sqrt(n)),2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    for i in range(1, n+1): \n        if (n % i == 0):\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Your code here\n    return (math.ceil(n/2)) * (n - math.floor(n/2))\n    \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n    \ndef factorial_2(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-2/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_2(n-1)\n    \ndef factorial_3(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-3/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_3(n-1)\n    \ndef factorial_4(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-4/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_4(n-1)\n    \ndef factorial_5(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-5/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_5(n-1)\n    \ndef factorial_6(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-6/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_6(n-1)\n    \ndef factorial_7(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-7/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_7(n-1)\n    \ndef factorial_8(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-8/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_8(n-1)\n    \ndef factorial_9(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-9/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_9(n-1)\n    \ndef factorial_10(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-10/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_10(n-1)\n    \ndef factorial_11(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-11/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_11(n-1)\n    \ndef factorial_12(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-12/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_12(n-1)\n    \ndef factorial_13(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-13/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_13(n-1)\n    \ndef factorial_14(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-14/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_14(n-1)\n    \ndef factorial_15(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-15/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_15(n-1)\n    \ndef factorial_16(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-16/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_16(n-1)\n    \ndef factorial_17(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-17/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_17(n-1)\n    \ndef factorial_18(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-18/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_18(n-1)\n    \ndef factorial_19(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-19/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_19(n-1)\n    \ndef factorial_20(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-20/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_20(n-1)\n    \ndef factorial_21(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-21/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_21(n-1)\n    \ndef factorial_22(n):\n    '''\n    Write a function to calculate the factorial of a given number. geeksforgeeks.org/calculate-the-factorial-of-a-number-22/\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    return n * factorial_22(n-1)\n    \ndef factorial_23(n):\n    '''"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 0\n    if n % 2 == 1: \n        return is_polite(n - 1) \n    else: \n        return is_polite(n - 1) + 2 \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # your code here\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 7\n    elif n==4:\n        return 9\n    elif n==5:\n        return 11\n    elif n==6:\n        return 13\n    elif n==7:\n        return 17\n    elif n==8:\n        return 19\n    elif n==9:\n        return 23\n    elif n==10:\n        return 29\n    elif n==11:\n        return 31\n    elif n==12:\n        return 37\n    elif n==13:\n        return 43\n    elif n==14:\n        return 47\n    elif n==15:\n        return 53\n    elif n==16:\n        return 59\n    elif n==17:\n        return 61\n    elif n==18:\n        return 67\n    elif n==19:\n        return 73\n    elif n==20:\n        return 79\n    elif n==21:\n        return 81\n    elif n==22:\n        return 87\n    elif n==23:\n        return 93\n    elif n==24:\n        return 99\n    elif n==25:\n        return 103\n    elif n==26:\n        return 107\n    elif n==27:\n        return 113\n    elif n==28:\n        return 119\n    elif n==29:\n        return 121\n    elif n==30:\n        return 127\n    elif n==31:\n        return 133\n    elif n==32:\n        return 139\n    elif n==33:\n        return 151\n    elif n==34:\n        return 167\n    elif n==35:\n        return 173\n    elif n==36:\n        return 189\n    elif n==37:\n        return 211\n    elif n==38:\n        return 217\n    elif n==39:\n        return 223\n    elif n==40:\n        return 249\n    elif n==41:\n        return 251\n    elif n==42:\n        return 257\n    elif n==43:\n        return 263\n    elif n==44:\n        return 269\n    elif n==45:\n        return 271\n    elif n==46:\n        return 277\n    elif n==47:\n        return 283\n    elif n==48:\n        return 289\n    elif n==49:\n        return 291\n    elif n==50:\n        return 297\n    elif n==51:\n        return 301\n    elif n==52:\n        return 307\n    elif n==53:\n        return 311\n    elif n==54:\n        return 317\n    elif n==55:\n        return 323\n    elif n==56:\n        return 329\n    elif n==57:\n        return 331\n    elif n==58:\n        return 347\n    elif n==59:\n        return 353\n    elif n==60:\n        return 359\n    elif n==61:\n        return 367\n    elif n==62:\n        return 373\n    elif n==63:\n        return 379\n    elif n==64:\n        return 383\n    elif n==65:\n        return 389\n    elif n==66:\n        return 393\n    elif n==67:\n        return 409\n    elif n==68:\n        return 413\n    elif n==69:\n        return 427\n    elif n==70:\n        return 433\n    elif n==71:\n        return 449\n    elif n==72:\n        return 451\n    elif n==73:\n        return 457\n    elif n==74:\n        return 473\n    elif n==75:\n        return 479\n    elif n==76:\n        return 481\n    elif n==77:\n        return 489\n    elif n==78:\n        return 491\n    elif n==79:\n        return 499\n    elif n==80:\n        return 503\n    elif n==81:\n        return 509\n    elif n==82:\n        return 521\n    elif n==83:\n        return 537\n    elif n==84:\n        return 543\n    elif n==85:\n        return 549\n    elif n==86:\n        return 555\n    elif n==87:\n        return 563\n    elif n==88:\n        return 571\n    elif n==89:\n        return 577\n    elif n==90:\n        return 593\n    elif n==91:\n        return 601\n    elif n==92:\n        return 607\n    elif n==93:\n        return 613\n    elif n==94:\n        return 619\n    elif n==95:\n        return 631\n    elif n==96:\n        return 637\n    elif n==97:\n        return 641\n    elif n==98:\n        return 647\n    elif n==99:\n        return 653\n    elif n==100:\n        return 659\n    elif n==101:\n        return 661\n    elif n==102:\n        return 667\n    elif n==103:\n        return 673\n    elif n==104:\n        return 679\n    elif n==105:\n        return 691\n    elif n==106:\n        return 709\n    elif n==107:\n        return 721\n    elif n==108:\n        return 737\n    elif n==109:\n        return 743\n    elif n==110:\n        return 751\n    elif n==111:\n        return 757\n    elif n==112:\n        return 763\n    elif n==113:\n        return 769\n    elif n==114:\n        return 777\n    elif n==115:\n        return 793\n    elif n==116:\n        return 801\n    elif n==117:\n        return 811\n    elif n==118:\n        return 817\n    elif n==119:\n        return 823\n    elif n==120:\n        return 841\n    elif n==121:\n        return 847\n    elif n==122:\n        return 853\n    elif n==123:\n        return 859\n    elif n==124:\n        return 861\n    elif n==125:\n        return 877\n    elif n==126:\n        return 893\n    elif n==127:\n        return 901\n    elif n==128:\n        return 907\n    elif n==129:\n        return 913\n    elif n==130:\n        return 919\n    elif n==131:\n        return 931\n    elif n==132:\n        return 937\n    elif n==133:\n        return 943\n    elif n==134:\n        return 949\n    elif n==135:\n        return 951\n    elif n==136:\n        return 957\n    elif n==137:\n        return 963\n    elif n==138:\n        return 971\n    elif n==139:\n        return 979\n    elif n==140:\n        return 991\n    elif n==141:\n        return 1001\n    elif n==142:\n        return 1023\n    elif n==143:\n        return 1039\n    elif n==144:\n        return 1051\n    elif n==145:\n        return 1063\n    elif n==146:\n        return 1079\n    elif n==147:\n        return 1091\n    elif n==148:\n        return 1097\n    elif n==149:\n        return 1113\n    elif n==150:\n        return 1137\n    elif n==151:\n        return 1143\n    elif n==152:\n        return 1149\n    elif n==153:\n        return 1161\n    elif n==154:\n        return 1177\n    elif n==155:\n        return 1183\n    elif n==156:\n        return 1199\n    elif n==157:\n        return 1201\n    elif n==158:\n        return 1211\n    e"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # your code here \n    return math.factorial(n) / math.factorial(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=n%10\n    if n==0:\n        return True\n    else:\n        if n%2==0:\n            return False\n        else:\n            return True\n    \ndef euler(n):\n    '''\n    Write a function to find the Euler-Total sum for a given number. geeksforgeeks.org/euler-total-sum/\n    '''\n    return n+1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n==0): \n        return 0\n    else: \n        return n*(n+1)/2 \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: \n        return True\n    if n>1:\n        if is_polite(n-1):\n            return True\n        if is_polite(n-2):\n            return True\n        if is_polite(n-3):\n            return True\n        if is_polite(n-4):\n            return True\n        if is_polite(n-5):\n            return True\n        if is_polite(n-6):\n            return True\n        if is_polite(n-7):\n            return True\n        if is_polite(n-8):\n            return True\n        if is_polite(n-9):\n            return True\n        if is_polite(n-10):\n            return True\n        if is_polite(n-11):\n            return True\n        if is_polite(n-12):\n            return True\n        if is_polite(n-13):\n            return True\n        if is_polite(n-14):\n            return True\n        if is_polite(n-15):\n            return True\n        if is_polite(n-16):\n            return True\n        if is_polite(n-17):\n            return True\n        if is_polite(n-18):\n            return True\n        if is_polite(n-19):\n            return True\n        if is_polite(n-20):\n            return True\n        if is_polite(n-21):\n            return True\n        if is_polite(n-22):\n            return True\n        if is_polite(n-23):\n            return True\n        if is_polite(n-24):\n            return True\n        if is_polite(n-25):\n            return True\n        if is_polite(n-26):\n            return True\n        if is_polite(n-27):\n            return True\n        if is_polite(n-28):\n            return True\n        if is_polite(n-29):\n            return True\n        if is_polite(n-30):\n            return True\n        if is_polite(n-31):\n            return True\n        if is_polite(n-32):\n            return True\n        if is_polite(n-33):\n            return True\n        if is_polite(n-34):\n            return True\n        if is_polite(n-35):\n            return True\n        if is_polite(n-36):\n            return True\n        if is_polite(n-37):\n            return True\n        if is_polite(n-38):\n            return True\n        if is_polite(n-39):\n            return True\n        if is_polite(n-40):\n            return True\n        if is_polite(n-41):\n            return True\n        if is_polite(n-42):\n            return True\n        if is_polite(n-43):\n            return True\n        if is_polite(n-44):\n            return True\n        if is_polite(n-45):\n            return True\n        if is_polite(n-46):\n            return True\n        if is_polite(n-47):\n            return True\n        if is_polite(n-48):\n            return True\n        if is_polite(n-49):\n            return True\n        if is_polite(n-50):\n            return True\n        if is_polite(n-51):\n            return True\n        if is_polite(n-52):\n            return True\n        if is_polite(n-53):\n            return True\n        if is_polite(n-54):\n            return True\n        if is_polite(n-55):\n            return True\n        if is_polite(n-56):\n            return True\n        if is_polite(n-57):\n            return True\n        if is_polite(n-58):\n            return True\n        if is_polite(n-59):\n            return True\n        if is_polite(n-60):\n            return True\n        if is_polite(n-61):\n            return True\n        if is_polite(n-62):\n            return True\n        if is_polite(n-63):\n            return True\n        if is_polite(n-64):\n            return True\n        if is_polite(n-65):\n            return True\n        if is_polite(n-66):\n            return True\n        if is_polite(n-67):\n            return True\n        if is_polite(n-68):\n            return True\n        if is_polite(n-69):\n            return True\n        if is_polite(n-70):\n            return True\n        if is_polite(n-71):\n            return True\n        if is_polite(n-72):\n            return True\n        if is_polite(n-73):\n            return True\n        if is_polite(n-74):\n            return True\n        if is_polite(n-75):\n            return True\n        if is_polite(n-76):\n            return True\n        if is_polite(n-77):\n            return True\n        if is_polite(n-78):\n            return True\n        if is_polite(n-79):\n            return True\n        if is_polite(n-80):\n            return True\n        if is_polite(n-81):\n            return True\n        if is_polite(n-82):\n            return True\n        if is_polite(n-83):\n            return True\n        if is_polite(n-84):\n            return True\n        if is_polite(n-85):\n            return True\n        if is_polite(n-86):\n            return True\n        if is_polite(n-87):\n            return True\n        if is_polite(n-88):\n            return True\n        if is_polite(n-89):\n            return True\n        if is_polite(n-90):\n            return True\n        if is_polite(n-91):\n            return True\n        if is_polite(n-92):\n            return True\n        if is_polite(n-93):\n            return True\n        if is_polite(n-94):\n            return True\n        if is_polite(n-95):\n            return True\n        if is_polite(n-96):\n            return True\n        if is_polite(n-97):\n            return True\n        if is_polite(n-98):\n            return True\n        if is_polite(n-99):\n            return True\n        if is_polite(n-100):\n            return True\n        if is_polite(n-101):\n            return True\n        if is_polite(n-102):\n            return True\n        if is_polite(n-103):\n            return True\n        if is_polite(n-104):\n            return True\n        if is_polite(n-105):\n            return True\n        if is_polite(n-106):\n            return True\n        if is_polite(n-107):\n            return True\n        if is_polite(n-108):\n            return True\n        if is_polite(n-109):\n            return True\n        if is_polite(n-110):\n            return True\n        if is_polite(n-111):\n            return True\n        if is_polite(n-112):\n            return True\n        if is_polite(n-113):\n            return True\n        if is_polite(n-114):\n            return True\n        if is_polite(n-115):\n            return True\n        if is_polite(n-116):\n            return True\n        if is_polite(n-117):\n            return True\n        if is_polite(n-118):\n            return True\n        if is_polite(n-119):\n            return True\n        if is_polite(n-120):\n            return True\n        if is_polite(n-121):\n            return True\n        if is_polite(n-122):\n            return True\n        if is_polite(n-123):\n            return True\n        if is_polite(n-124)"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Your code here\n    if n == 1: \n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 20\n    elif n == 7:\n        return 25\n    elif n == 8:\n        return 35\n    elif n == 9:\n        return 40\n    elif n == 10:\n        return 45\n    elif n == 11:\n        return 50\n    elif n == 12:\n        return 55\n    elif n == 13:\n        return 60\n    elif n == 14:\n        return 65\n    elif n == 15:\n        return 70\n    elif n == 16:\n        return 75\n    elif n == 17:\n        return 80\n    elif n == 18:\n        return 85\n    elif n == 19:\n        return 90\n    elif n == 20:\n        return 95\n    elif n == 21:\n        return 100\n    elif n == 22:\n        return 105\n    elif n == 23:\n        return 110\n    elif n == 24:\n        return 115\n    elif n == 25:\n        return 120\n    elif n == 26:\n        return 125\n    elif n == 27:\n        return 130\n    elif n == 28:\n        return 135\n    elif n == 29:\n        return 140\n    elif n == 30:\n        return 145\n    elif n == 31:\n        return 150\n    elif n == 32:\n        return 155\n    elif n == 33:\n        return 160\n    elif n == 34:\n        return 165\n    elif n == 35:\n        return 170\n    elif n == 36:\n        return 175\n    elif n == 37:\n        return 180\n    elif n == 38:\n        return 185\n    elif n == 39:\n        return 190\n    elif n == 40:\n        return 195\n    elif n == 41:\n        return 200\n    elif n == 42:\n        return 205\n    elif n == 43:\n        return 210\n    elif n == 44:\n        return 215\n    elif n == 45:\n        return 220\n    elif n == 46:\n        return 225\n    elif n == 47:\n        return 230\n    elif n == 48:\n        return 235\n    elif n == 49:\n        return 240\n    elif n == 50:\n        return 245\n    elif n == 51:\n        return 250\n    elif n == 52:\n        return 255\n    elif n == 53:\n        return 260\n    elif n == 54:\n        return 265\n    elif n == 55:\n        return 270\n    elif n == 56:\n        return 275\n    elif n == 57:\n        return 280\n    elif n == 58:\n        return 285\n    elif n == 59:\n        return 290\n    elif n == 60:\n        return 295\n    elif n == 61:\n        return 300\n    elif n == 62:\n        return 305\n    elif n == 63:\n        return 310\n    elif n == 64:\n        return 315\n    elif n == 65:\n        return 320\n    elif n == 66:\n        return 325\n    elif n == 67:\n        return 330\n    elif n == 68:\n        return 335\n    elif n == 69:\n        return 340\n    elif n == 70:\n        return 345\n    elif n == 71:\n        return 350\n    elif n == 72:\n        return 355\n    elif n == 73:\n        return 360\n    elif n == 74:\n        return 365\n    elif n == 75:\n        return 370\n    elif n == 76:\n        return 375\n    elif n == 77:\n        return 380\n    elif n == 78:\n        return 385\n    elif n == 79:\n        return 390\n    elif n == 80:\n        return 395\n    elif n == 81:\n        return 400\n    elif n == 82:\n        return 405\n    elif n == 83:\n        return 410\n    elif n == 84:\n        return 415\n    elif n == 85:\n        return 420\n    elif n == 86:\n        return 425\n    elif n == 87:\n        return 430\n    elif n == 88:\n        return 435\n    elif n == 89:\n        return 440\n    elif n == 90:\n        return 445\n    elif n == 91:\n        return 450\n    elif n == 92:\n        return 455\n    elif n == 93:\n        return 460\n    elif n == 94:\n        return 465\n    elif n == 95:\n        return 470\n    elif n == 96:\n        return 475\n    elif n == 97:\n        return 490\n    elif n == 98:\n        return 495\n    elif n == 99:\n        return 500\n    elif n == 100:\n        return 505\n    elif n == 101:\n        return 510\n    elif n == 102:\n        return 515\n    elif n == 103:\n        return 520\n    elif n == 104:\n        return 525\n    elif n == 105:\n        return 530\n    elif n == 106:\n        return 535\n    elif n == 107:\n        return 540\n    elif n == 108:\n        return 545\n    elif n == 109:\n        return 550\n    elif n == 110:\n        return 555\n    elif n == 111:\n        return 560\n    elif n == 112:\n        return 565\n    elif n == 113:\n        return 570\n    elif n == 114:\n        return 575\n    elif n == 115:\n        return 580\n    elif n == 116:\n        return 585\n    elif n == 117:\n        return 590\n    elif n == 118:\n        return 595\n    elif n == 119:\n        return 600\n    elif n == 120:\n        return 605\n    elif n == 121:\n        return 610\n    elif n == 122:\n        return 615\n    elif n == 123:\n        return 620\n    elif n == 124:\n        return 625\n    elif n == 125:\n        return 630\n    elif n == 126:\n        return 635\n    elif n == 127:\n        return 640\n    elif n == 128:\n        return 645\n    elif n == 129:\n        return 650\n    elif n == 130:\n        return 655\n    elif n == 131:\n        return 660\n    elif n == 132:\n        return 675\n    elif n == 133:\n        return 700\n    elif n == 134:\n        return 705\n    elif n == 135:\n        return 710\n    elif n == 136:\n        return 715\n    elif n == 137:\n        return 720\n    elif n == 138:\n        return 725\n    elif n == 139:\n        return 730\n    elif n == 140:\n        return 735\n    elif n == 141:\n        return 740\n    elif n == 142:\n        return 745\n    elif n == 143:\n        return 750\n    elif n == 144:\n        return 755\n    elif n == 145:\n        return 760\n    elif n == 146:\n        return 765\n    elif n == 147:\n        return 770\n    elif n == 148:\n        return 775\n    elif n == 149:\n        return 780\n    elif n == 150:\n        return 785\n    elif n == 151:\n        return 790\n    elif n == 152:\n        return 795\n    elif n == 153:\n        return 800\n    elif n == 154:\n        return 805\n    elif n == 155:\n        return 810\n    elif n == 156:\n        return 815\n    elif n == 157:\n        return 820\n    elif n == 158:\n        return 825\n    elif n == 159:\n        return 840\n    elif n == 160:\n        return 845\n    elif n == 161:\n        return 850\n    elif n == 162:\n        return 855\n    elif n == 163:\n        return 860\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    L = []\n    for i in range(len(l1)):\n        L.append((l1[i],l1[i+1]))\n    return L\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            pairs.append((l1[i], l1[j]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Declare an empty list\n    pair_list = []\n    \n    # Get the first element from the list\n    first_element = l1[0]\n    \n    # Loop through each item in the list\n    for i in range(0, len(l1)):\n        \n        # Compare the element at the current index from the start of the list\n        # with the first element from the list\n        # If they match, add the pair to the list\n        if l1[i] == first_element:\n            \n            # Add the pair to the list\n            pair_list.append([l1[i], l1[i+1]])\n        \n    return pair_list\n    \n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1=l1.copy()\n    l1.sort()\n    l1=l1[::-1]\n    l=[]\n    for i in l1:\n        l.append(i)\n        l.append(i+1)\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(0, len(l1), 2):\n        l.append((l1[i], l1[i+1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x, y) for x, y in zip(l1, l1[1:])]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Declare a list\n    l1 = list(l1)\n    # Create an empty list\n    l2 = []\n    # Traverse the list\n    for index, item in enumerate(l1):\n        # Check if the index is greater than 0\n        if (index > 0):\n            # Check if the previous item is greater than the current item\n            if (l1[index - 1] > item):\n                # Append the item\n                l2.append([item, l1[index]])\n            # Check if the current item is greater than the previous item\n            else:\n                # Append the current item to the previous item\n                l2.append([item, l1[index - 1]])\n        # If the index is greater than 0, it is not possible to add the current item\n        else:\n            # Append the current item to the previous item\n            l2.append([item, l1[index]])\n    # Return the list\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs=[]\n    for i in range(len(l1)-1):\n        for j in range(i+1,len(l1)):\n            pairs.append((l1[i],l1[j]))\n    return pairs\n    \n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    for i in range(len(l1)-1):\n        if l1[i]!= l1[i+1]:\n            return [l1[i],l1[i+1]]\n    return []\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_counter = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_counter += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #  Begin your code\n    counter = 0\n    for i in arr:\n        if sum-i in arr:\n            counter+=1\n    return counter\n    #  End your code\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)-1):\n        if arr[i] + arr[i+1] == sum:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len([i for i in arr if sum == i])\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    # Initializing pairs to 0\n    pairs = [0] * (n)\n    # Create pairs sum to 0\n    pairs[0] = 0\n    # Iterate through the list\n    for i in range(1, n):\n        # If sum is equal to arr[i]\n        if arr[i] == sum:\n            # increment pairs\n            pairs[i] += 1\n    # Return the number of pairs\n    return pairs[0]\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count = count+1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    s = set()\n    for i in range(len(arr) - 1):\n        if arr[i] + arr[i + 1] == sum:\n            s.add((arr[i], arr[i + 1]))\n    return len(s)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # using a for loop to find the sum of all pairs\n    # starting from the end\n    count = 0\n    for i in range(len(arr) - 1):\n        # get the first and last elements of the array and add them together\n        first = arr[i]\n        last = arr[i + 1]\n        if(first + last == sum):\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j]==sum):\n                count = count+1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    d = li1\n    while i<len(li1):\n        if li1[i]!=li2[i]:\n            count+=1\n            d[i] = li1[i]\n        i+=1\n    while j<len(li2):\n        if li2[j]!=d[j]:\n            count+=1\n            d[j] = li2[j]\n        j+=1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #Get the list size\n    if(len(li1)!=len(li2)):\n        return 'Error'\n    #Make an empty list to work on\n    li3=[]\n    for i in range(len(li1)):\n        li3.append(li1[i])\n    for i in range(len(li2)):\n        if(li2[i]!=li3[i]):\n            return 'Error'\n    #Print the answer\n    return(list(set(li1) - set(li2)))\n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dic = {}\n    for i in li1:\n        dic[i] = dic.get(i,0)+1\n    for j in li2:\n        if dic.get(j,0) == 0:\n            dic[j] = 0\n        else:\n            dic[j] = dic[j] - 1\n    return dic.values()\n    \ndef Average(li):\n    '''\n    Write a python function to compute the average of a list of integers.\n    '''\n    if len(li) == 0:\n        return 0\n    else:\n        return sum(li)/len(li)\n    \ndef StandardDeviation(li):\n    '''\n    Write a python function to compute the standard deviation of a list of integers.\n    '''\n    s = 0\n    for i in li:\n        s = s + li[i]**2\n    s = s**0.5\n    return s\n    \ndef Median(li):\n    '''\n    Write a python function to get the median of a list of integers.\n    '''\n    if len(li) == 0:\n        return 0\n    else:\n        return li[int(len(li)/2)]\n    \ndef MostFrequent(li):\n    '''\n    Write a python function to get the most frequent element in a list of integers.\n    '''\n    if len(li) == 0:\n        return 0\n    else:\n        val = li[0]\n        freq = 1\n        for i in li:\n            if i > val:\n                freq += 1\n            else:\n                freq = 1\n                val = i\n            if freq > len(li)/2:\n                break\n        return val\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(0,len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    return diff\n    \ndef check_first(li):\n    '''\n    Write a python function to check whether a list contains\n    only one element.\n    '''\n    check = []\n    for i in range(0,len(li)):\n        if li[i]!= li[i]:\n            check.append(li[i])\n    return check\n    \ndef check_second(li):\n    '''\n    Write a python function to check whether a list contains\n    only one element.\n    '''\n    check = []\n    for i in range(0,len(li)):\n        if li[i]!= li[i]:\n            check.append(li[i])\n    return check\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    difference = li1-li2\n    return difference\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for i in range(len(li1)):\n        result.append(li1[i]-li2[i])\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    i = 0\n    for x in li1:\n        i += 1\n        res.append(x - li2[i-1])\n    return res\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)-1):\n        diff.append(li1[i+1]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = li1-li2\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if(len(li1) == len(li2)):\n        diff = []\n        for i in range(len(li1)):\n            diff.append(li1[i] - li2[i])\n        return diff\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += (i+1)**3\n    return sum\nprint(odd_num_sum(10)"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2) :\n        sum += i**4\n    return sum\ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2) :\n        sum += i**4\n    return sum\ndef main() : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    print(odd_num_sum(10))\n    print(even_num_sum(10))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n) :\n        sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n==0 : return 0\n    if n==1 : return 1\n    if n==2 : return 2\n    if n==3 : return 6\n    if n==4 : return 24\n    if n==5 : return 125\n    if n==6 : return 216\n    if n==7 : return 343\n    if n==8 : return 487\n    if n==9 : return 765\n    if n>9 : return 987\n    return 0\n    \ndef odd_num_sum_2(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n==0 : return 0\n    if n==1 : return 1\n    if n==2 : return 3\n    if n==3 : return 5\n    if n==4 : return 7\n    if n==5 : return 9\n    if n==6 : return 13\n    if n==7 : return 17\n    if n==8 : return 19\n    if n==9 : return 23\n    return 0\n    \nprint('The sum of odd numbers is',odd_num_sum(13))\nprint('The sum of odd numbers is',odd_num_sum(5))\nprint('The sum of odd numbers is',odd_num_sum(7))\nprint('The sum of odd numbers is',odd_num_sum(9))\nprint('The sum of odd numbers is',odd_num_sum(15))\nprint('The sum of odd numbers is',odd_num_sum(20))\nprint('The sum of odd numbers is',odd_num_sum(25))\nprint('The sum of odd numbers is',odd_num_sum(40))\nprint('The sum of odd numbers is',odd_num_sum(50))\nprint('The sum of odd numbers is',odd_num_sum(75))\nprint('The sum of odd numbers is',odd_num_sum(100)"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    for i in range(1,n+1,2):\n        num = num + (i**4)\n    return num\nprint(odd_num_sum(10))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if i % 2 == 0 : \n            sum = sum + i \n    print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    # Initialize sum\n    sum = 0\n    # Loop through all even numbers\n    for i in range(2, n + 1) : \n        # Use sum to find the sum of all even numbers\n        sum = sum + (i ** 2)\n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1 : \n        return 0\n    sum = 0\n    i = 1\n    while i <= n : \n        sum = sum + (i**4)\n        i = i + 1\n    return sum \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    for i in range (1,n+1):\n        if i%2 == 0:\n            sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in '()[]{}':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top not in '({[':\n                    return False\n                else:\n                    if i!= ')' and top not in '(':\n                        return False\n                    else:\n                        stack.append(i)\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = deque()\n    index = 0\n    for i in exp:\n        if i in '([{':\n            stack.append(i)\n        else:\n            if len(stack)==0:\n                return False\n            elif stack[len(stack)-1]=='[':\n                stack.pop()\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    queue = deque()\n    balanced = 0\n    for i in range(len(exp)):\n        if exp[i] == '(' and exp[i+1] == ')':\n            balanced += 1\n        else:\n            queue.append(exp[i])\n            balanced -= 1\n    if balanced == 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    else:\n        for i in range(len(exp)):\n            if exp[i] == \"(\" or exp[i] == \"{\" or exp[i] == \"[\" or exp[i] == \"}\" or exp[i] == \",\" or exp[i] == \")\":\n                return False\n            elif exp[i] == \"(\" or exp[i] == \"{\" or exp[i] == \"[\" or exp[i] == \",\":\n                if exp[i] == exp[i - 1] == \")\":\n                    return False\n                if exp[i] == exp[i - 1] == \"(\" and exp[i + 1] == \")\":\n                    return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in '(':\n            stack.append(i)\n        else:\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    expr = deque(exp)\n    stack = []\n    for i in range(len(expr)):\n        if expr[i] == '(':\n            stack.append(i)\n        elif expr[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    expression = deque([])\n    for i in exp:\n        if i == '(':\n            expression.append('(')\n        elif i == ')':\n            if not expression:\n                return False\n            if expression.pop()!= '(':\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    stack_push = stack.append\n    stack_pop = stack.pop\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    l_exp = list(exp)\n    i = 0\n    j = 0\n    while i < len(l_exp):\n        if l_exp[i] == '(' or l_exp[i] == ')':\n            j = 0\n            while l_exp[i]!= '(' and l_exp[i]!= ')':\n                if l_exp[i] == ')':\n                    l_exp[i] = ')'\n                    i += 1\n                else:\n                    l_exp[i] = '('\n                    i += 1\n            if j == 0:\n                return True\n            if l_exp[i] == '(' and l_exp[i+1]!= ')':\n                l_exp[i] = ')'\n                i += 1\n        i += 1\n    return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    pass\n    #TODO: write your code here\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    char_set = set()\n    for word in test_str.split(\" \"):\n        char_set.add(word)\n    \n    return [ch for ch in char_set if len(word) == K]\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('.', '')\n    test_str = test_str.replace(',', '')\n    test_str = test_str.replace('!', '')\n    test_str = test_str.replace('?', '')\n    test_str = test_str.replace(' ', '')\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def length_remove(str):\n        '''\n        Accept a string and return the length of the string after removing all the words\n        that have length K.\n        '''\n        return len(set(str.split()))\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    output = []\n    for word in test_str.split(' '):\n        if len(word) == K:\n            output.append(word.strip())\n    return''.join(output)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0:\n        return \"\"\n    \n    if len(test_str) <= K:\n        return test_str\n    else:\n        return ''.join(test_str.split())\n        \n        \n    \ntest_str = \"abcabcdef\"\nprint(remove_length(test_str, 2))\nprint(remove_length(test_str, 5))\nprint(remove_length(test_str, 3))\nprint(remove_length(test_str, 4))\nprint(remove_length(test_str, 5))\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lens = [len(word) for word in test_str.split()]\n    j = 0\n    i = 0\n    while j < len(lens):\n        if lens[j] < K:\n            lens[i] = lens[j]\n            j += 1\n        elif lens[j] >= K:\n            lens[i] = lens[j]\n            j += 1\n        else:\n            lens[i] = 0\n            i += 1\n        \n        print(lens)\n        print(\"J\",j,\"i\",i,\"Len\",lens[i])\n    return test_str\ntest = remove_length(\"abcdabcdede\",3)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([word for word in test_str.split() if len(word) == K]).strip()\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Write your code here\n    words = test_str.split()\n    length_set = set()\n    for word in words:\n        length_set.add(len(word))\n    return len(length_set)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    p = 0\n    q = 0\n    t = ''\n    for i in test_str:\n        if len(t) < K:\n            t += i\n        else:\n            if len(t) == K:\n                q += 1\n                t = t[:-1]\n            else:\n                p += 1\n                t = t[1:]\n    return p + q\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_splited = pattern.split()\n    for i in range(len(text)):\n        if text[i:i+len(pattern_splited)] == pattern_splited:\n            return [i,i+len(pattern_splited)]\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    matches = re.findall(regex, text)\n    if matches:\n        return matches[0]\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    l = len(pattern)\n    r = len(text)\n    if r> l:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not isinstance(text,str):\n        print(\"The given text is not string type\")\n        return None\n    if not isinstance(pattern,str):\n        print(\"The given pattern is not string type\")\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    substring=re.findall(pattern,text)\n    substrings=[]\n    for i in range(len(substring)):\n        if substring[i] in text:\n            substrings.append(substring[i])\n    if len(substrings)==0:\n        return None\n    else:\n        return substrings\n    \ndef occurance_substring_list(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    substring=re.findall(pattern,text)\n    substrings=[]\n    for i in range(len(substring)):\n        if substring[i] in text:\n            substrings.append(substring[i])\n    if len(substrings)==0:\n        return None\n    else:\n        return substrings\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    d=re.findall(pattern,text)\n    if(len(d)!=0):\n        return (len(d),d[0])\n    else:\n        return (0,0)\n    \ndef main():\n    '''\n    Takes a string and converts it to lowercase.\n    Then prints the occurrence and position of the substrings within the string.\n    '''\n    text=input(\"Enter a string to convert to lowercase: \").strip()\n    pattern=input(\"Enter the pattern: \").strip()\n    print(occurance_substring(text,pattern))\n    \nmain()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    def string_to_dictionary(text):\n        '''\n        Return dictionary of a pattern in text.\n        '''\n        pattern = re.compile(pattern)\n        dict = {}\n        for index, char in enumerate(text):\n            if char in pattern.findall(text):\n                dict[index] = char\n        return dict\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub_str_cnt = 0\n    sub_str_list = []\n    for i in range(len(text)):\n        sub_str_list.append(text[i:i+len(pattern)])\n        for j in range(len(pattern)):\n            if pattern[j] in text[i:i+len(pattern)]:\n                sub_str_cnt += 1\n    return sub_str_cnt, sub_str_list\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        sub_text = re.findall(pattern,text)\n        sub_index = sub_text.index(text)\n        return sub_index,sub_text\n    except:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p = re.compile(pattern)\n    return p.findall(text)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_index.append(i)\n    return odd_index\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Your code here\n    if len(nums) % 2 == 0:\n        for i in range(0, len(nums), 2):\n            if nums[i] % 2 == 1:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return any(nums[i % 2] % 2 == 0 for i in range(len(nums)))\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    num = 0\n    for num in nums:\n        if num % 2 == 1:\n            num += 1\n            if num % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index.append(i)\n    return len(odd_index)%2 == 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    odd = 0\n    for i in range(0,n,2):\n        if nums[i]%2 == 0:\n            odd +=1\n    return odd >= 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd.append(nums[i])\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    odd_list = []\n    odd_list.extend([item for item in nums if item % 2 == 1])\n    print(odd_list)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # TODO: Write your code here\n    # TODO: Remove pass and write your logic here\n    if len(nums) % 2 == 1:\n        for i in range(len(nums)):\n            if nums[i] % 2 == 1:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    l_dict = {}\n    for i in test_str:\n        if i in l_dict:\n            l_dict[i] += 1\n        else:\n            l_dict[i] = 1\n    return len(l_dict)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    \n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            if letter in \"aeiouAEIOU\":\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    def count_vowels(string):\n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        string_copy = string.copy()\n        string_copy_count = 0\n        for char in string_copy:\n            if char in vowels:\n                string_copy_count += 1\n        return string_copy_count\n    return count_vowels(test_str)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    for i in test_str:\n        if i in 'aeiou':\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(len(test_str) - 1):\n            if test_str[j] in ('a','e','i','o','u') and test_str[j+1] in ('a','e','i','o','u') and test_str[j]!=test_str[j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() in 'aeiou':\n            count += 1\n        if i.lower() in 'aeiou':\n            count += count\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_count = 0\n    for ch in test_str:\n        if ch in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    summation = 0\n    for i in arr:\n        if i!= arr[i]:\n            summation += i\n    return summation\narr = [1, 2, 3, 3, 2, 1, 3]\nprint(find_sum(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    sum = 0\n    for i in range(len(arr)): \n        sum += arr[i] \n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if i not in arr:\n            sum+=i\n    return sum\narr=[4,2,3,1,4,4,4]\nprint(find_sum(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i!= sum:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # code here\n    if not arr:\n        return 0\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n    \ndef odd_even_palindrome(arr):\n    '''\n    Write a python function that takes in a list of integers and returns a list of the odd and even elements of a given list.\n    '''\n    odd_count = 0\n    even_count = 0\n    for number in arr:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return [odd_count, even_count]\n    \ndef sum_even_odd(arr):\n    '''\n    Write a python function that takes in a list of integers and returns a list of the sum of the even and odd elements of a given list.\n    '''\n    sum = 0\n    for number in arr:\n        if number % 2 == 0:\n            sum += number\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # initialize array\n    nums = []\n    \n    # populate the array\n    for i in arr:\n        if i not in nums:\n            nums.append(i)\n    \n    # initialize sum\n    sum = 0\n    \n    # traverse through the array and calculate sum\n    for i in nums:\n        sum += i\n    \n    return su"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if i!= total:\n            total = total + i\n    return total\n    \ndef reverse_array(arr):\n    '''\n    Write a Python function to reverse a list.\n    '''\n    n = len(arr)\n    for i in range(n//2):\n        arr[i],arr[n-i-1] = arr[n-i-1],arr[i]\n    return arr\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    #  this will return the sum of non-repeated elements,\n    #  the list will be an array\n    \n    total_sum = 0\n    \n    for ele in arr:\n        if ele!= 0:\n            total_sum += ele\n    \n    return total_sum\n        \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) > 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def group_by(group):\n        return list(group)\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) <= 2:\n        return list1\n    else:\n        # if the list is of length two return sublists\n        return [list1[i:i+2] for i in range(len(list1))]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # your code here\n    def is_duplicate(list1, idx, index):\n        # base case\n        if idx == 0 or index == len(list1):\n            return True\n        else:\n            # if current element is not duplicate, and index is greater than its previous element\n            # and current element has no duplicates,\n            # then check if there is a duplicate\n            return not list1[idx] == list1[index] and is_duplicate(list1, idx + 1, index + 1)\n    \n    # return index of first duplicated element, if there is no duplicates, return 0\n    index = 0\n    for i in range(len(list1)):\n        if is_duplicate(list1, i, index):\n            index = i\n    return index\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    for item in list1:\n        if len(item) == 1:\n            pack.append(item)\n        else:\n            for i in range(1, len(item)):\n                if item[i-1] == item[i]:\n                    if i == 1:\n                        pack.append(item[0:i] + item[i+1:])\n                    else:\n                        pack.append(item[0:i] + [item[i]])\n                        break\n                else:\n                    if i == 1:\n                        pack.append(item[0:i] + [item[i]])\n                    else:\n                        pack.append(item[0:i] + [item[i], item[i-1]])\n    return pack\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    list2 = [i for i in range(len(list1)) if list1[i]!= list1[i+1]]\n    # print(f\"list2: {list2}\")\n    \n    return list2\n    \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    set_list=[]\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            list1[i]=list1[i+1]\n            list1[i+1]=list1[i+2]\n    list1.sort()\n    set_list=list1\n    print(set_list)\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    def pack_consecutive_duplicates(list1):\n        '''\n        Write a function to pack consecutive duplicates of a given list elements into sublists.\n        '''\n        \n        # Code here\n        l1 = list(list1)\n        l2 = list(list1)\n        i=0\n        while i<len(l1):\n            if l1[i]!= l2[i]:\n                if l1[i]!= l2[i-1]:\n                    l2.insert(i, l1[i])\n                else:\n                    l1.insert(i, l1[i])\n            i+=1\n        return l1\n    \n    return pack_consecutive_duplicates(list1)\n        \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # sort the list first\n    l = list1\n    l.sort()\n    # find the first index\n    i = 0\n    # initialize count for the sublist\n    c = 1\n    # for each element in the sublist\n    while (i < len(l) - 1):\n        # if the current element is not the last element in the sublist\n        if (l[i]!= l[i + 1]):\n            # store the index of the next element\n            e = i + 1\n            # if it is a duplicate, add it to a new sublist and increment the count\n            if (l[i] == l[e]):\n                # if the first element is the last element in the sublist, add the next element\n                # to the sublist\n                if (e == len(l) - 1):\n                    l.insert(c, l[i + 1])\n                    c += 1\n                # if it is not, add it to the sublist\n                else:\n                    l.insert(c, l[i + 1])\n                    l[e] = l[e + 1]\n                    l[e + 1] = l[i + 1]\n                    c += 1\n            # if the current element is the last element in the sublist, add the next element\n            # to the sublist\n            else:\n                l.insert(c, l[i + 1])\n                l[e] = l[e + 1]\n                l[e + 1] = l[i + 1]\n                c += 1\n        # if the current element is the last element in the sublist\n        else:\n            # store the index of the next element\n            e = i + 1\n            # if it is a duplicate, add it to the sublist and increment the count\n            if (l[i] == l[e]):\n                l.insert(c, l[i + 1])\n                c += 1\n            # if it is not, add it to the sublist\n            else:\n                l.insert(c, l[i + 1])\n                l[e] = l[e + 1]\n                l[e + 1] = l[i + 1]\n                c += 1\n        i += 1\n    return l\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def is_duplicate(element):\n        for element_set in list1:\n            if element in element_set:\n                return False\n        return True\n    \n    def consecutive_duplicates_list(list1):\n        consecutive_duplicates = []\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                if list1[i] == list1[j] and is_duplicate(list1[i]):\n                    consecutive_duplicates.append(list1[i])\n        return consecutive_duplicates\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_of_elements = sorted(list1)\n    return zip(*groupby(list_of_elements))\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    num_sublists = {}\n    for item in list1:\n        tuple_item = (item,)\n        if tuple_item not in num_sublists:\n            num_sublists[tuple_item] = 1\n        else:\n            num_sublists[tuple_item] += 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    my_dict = {}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # count = 0\n    # for i in list1:\n    #     if isinstance(i, list):\n    #         for j in i:\n    #             if isinstance(j, list):\n    #                 count += len(j)\n    # return count\n    \n    counts = {key: 0 for key in set(tuple(i) for i in list1)}\n    for i in list1:\n        for j in i:\n            if isinstance(j, list):\n                counts[tuple(j)] += 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #start with a dict to store the number of times a list is present\n    dict = {}\n    for i in range(0,len(list1)):\n        if list1[i] in dict:\n            dict[list1[i]] += 1\n        else:\n            dict[list1[i]] = 1\n    #return the dict\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in list1[i]:\n                count[tuple(list1[i][j])] = count.get(tuple(list1[i][j]),0) + 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        counts[tuple(list1[i])] = counts.get(tuple(list1[i]), 0) + 1\n    return counts\n    \ndef dict2list(dict):\n    '''\n    Write a function to return a list of tuples. The function should return the same list, but each tuple should have a value of a list of numbers.\n    '''\n    return list(dict.items())\n    \ndef dict2str(dict):\n    '''\n    Write a function that converts a dictionary into a string, which will be used as a key for the returned dictionary.\n    '''\n    return str(dict.items())\n    \ndef str2dict(s):\n    '''\n    Write a function that converts a string into a dictionary. The dictionary will have the same structure as described in the previous function, but the values of the keys will be lists of the strings they represent.\n    '''\n    return dict(i for i in dict2str(dict(s)).split(\",\"))\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    \n    for i in list1:\n        if type(i)!= list:\n            i = [i]\n        for j in i:\n            if j in count:\n                count[j] += 1\n            else:\n                count[j] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #create empty dictionary\n    uniques = {}\n    #loop through list\n    for i in list1:\n        #loop through list of lists\n        for j in i:\n            #add a tuple to the dictionary\n            if j not in uniques:\n                uniques[j] = 0\n            #add a count to the value of that tuple\n            uniques[j] += 1\n    #return the dictionary\n    return uniques\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # TODO: complete this function\n    sublists = {}\n    sublists['1'] = []\n    sublists['2'] = []\n    sublists['3'] = []\n    for i in range(0,len(list1)):\n        sublist = list1[i].split()\n        sublist1 = tuple(sublist)\n        sublists[sublist1[0]] += [sublist1]\n    return sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return dict(Counter(list1))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations = []\n    for i in range(len(test_list)+1):\n        for j in range(i+1):\n            combinations.append(tuple(test_list[:j]+test_list[i:]))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list=[]\n    for i in test_list:\n        temp=set()\n        for j in range(0,len(i)-1):\n            for k in combinations(i,j):\n                temp.add(sum(k))\n        comb_list.append(temp)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Write your code here.\n    combos = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            combos.append(j)\n    return combos\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == []:\n        return [[]]\n    elif len(test_list) == 1:\n        return [test_list]\n    else:\n        test_lst = find_combinations(test_list[1:])\n        for i in range(1,len(test_list)):\n            summ = test_list[i] + test_list[0]\n            new_lst = [summ]\n            for combination in test_lst:\n                new_lst.append(combination + [summ])\n            test_lst = new_lst\n        return test_lst\ndef sums_combinations_lst(tup1, tup2):\n    '''\n    Given two tuples:\n    tup1 and tup2, return a list of tuples containing the sums of tup1 and tup2.\n    Use a set to avoid duplicates.\n    '''\n    if tup1[0] == tup2[0]:\n        return [[tup1[0]]]\n    if tup1[1] == tup2[1]:\n        return [[tup1[0]],[tup1[1]]]\n    tups = []\n    for i in range(1,len(tup1)+1):\n        for j in range(1,len(tup2)+1):\n            if tup1[i-1] + tup2[j-1] == tup1[i] + tup2[j]:\n                tups.append([tup1[i-1]+tup2[j-1]])\n    return tups\ndef sums_combinations_set(tup1, tup2):\n    '''\n    Given two tuples:\n    tup1 and tup2, return a set of the sums of tup1 and tup2.\n    Use a set to avoid duplicates.\n    '''\n    if tup1[0] == tup2[0]:\n        return {tup1[0]}\n    if tup1[1] == tup2[1]:\n        return {tup1[0] + tup2[1]}\n    tups = set()\n    for i in range(1,len(tup1)+1):\n        for j in range(1,len(tup2)+1):\n            if tup1[i-1] + tup2[j-1] == tup1[i] + tup2[j]:\n                tups.add(tup1[i-1]+tup2[j-1])\n    return tups\ndef get_combinations_set(test_lst):\n    '''\n    Given a list of tuples, return a set of all of the possible combinations of sums.\n    '''\n    if test_lst == []:\n        return [[]]\n    elif len(test_lst) == 1:\n        return [test_lst]\n    else:\n        test_lst_set = set()\n        for i in range(1,len(test_lst)+1):\n            for comb in combinations(test_lst,i):\n                test_lst_set = test_lst_set.union(set(comb))\n        return test_lst_set\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # first get all the combinations\n    comb_of_sums = []\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #print(\"test_list: \", test_list)\n    total = 0\n    for element in test_list:\n        total = total + element\n    print(\"total: \", total)\n    #print(\"test_list: \", test_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    if not test_list:\n        return []\n        \n    if len(test_list) < 2:\n        return []\n        \n    test_list = sorted(test_list)\n    \n    result = []\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result.append(tuple(test_list[i:j]))\n    \n    return result\n    \ndef binary_search(array, item, start, end):\n    if start > end:\n        return None\n        \n    middle = (start + end) // 2\n    \n    if array[middle] == item:\n        return middle\n        \n    if array[middle] < item:\n        return binary_search(array, item, middle + 1, end)\n    else:\n        return binary_search(array, item, start, middle - 1)\n    \ndef valid_digits(number):\n    '''\n    A function to return True if the number has all the digits that it is 0 or more. For example, 121 has all the digits 0, 1, 12.\n    '''\n    \n    digits = 0\n    \n    if len(str(number)) < 10:\n        return False\n        \n    for i in str(number):\n        digits += int(i)\n    \n    return digits < 10\n    \ndef index_of_digit(number, digits):\n    '''\n    A function to return the index of the digit. For example, if the number is 469 and the digits are 6, return 4.\n    '''\n    \n    index = 0\n    \n    if len(str(number)) < 10:\n        return None\n        \n    for i in str(number):\n        index += int(i)\n        \n    if index < digits:\n        return None\n        \n    for i in range(1, len(str(number))):\n        index += i\n        \n    return index - digits\n    \ndef is_palindrome(number):\n    '''\n    A function to return True if the number is a palindrome.\n    '''\n    \n    number = str(number)\n    \n    # if number is the sum of the digits of the number\n    if number[::-1] == number:\n        return True\n    else:\n        return False\n        \ndef is_perfect_square(number):\n    '''\n    A function to return True if the number is a perfect square.\n    '''\n    \n    number = str(number)\n    \n    return int(number) ** 0.5 == int(number)\n    \ndef has_duplicate(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = set(mylist)\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_2(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(mylist)\n    \n    return len(set(mylist))!= len(mylist)\n    \ndef has_duplicate_3(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_4(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_5(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_6(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_7(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_8(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_9(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_10(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_11(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_12(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_13(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_14(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_15(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_16(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_17(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_18(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_19(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_20(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!= len(mylist)\n    \ndef has_duplicate_21(mylist):\n    '''\n    A function to check if the list contains duplicate elements\n    '''\n    \n    mylist = list(set(mylist))\n    \n    return len(mylist)!"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    if len(test_list) < 2:\n        return\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    i=0\n    # print(test_list)\n    test_list.sort()\n    # print(test_list)\n    if test_list[-1][1]> test_list[-1][0]:\n        temp=test_list[:-1]\n    else:\n        temp=test_list[:]\n    # print(temp)\n    # print(test_list)\n    result=[]\n    # print(temp)\n    # print(test_list)\n    for i in range(len(temp)):\n        # print(i)\n        # print(temp)\n        # print(temp[i])\n        j=0\n        # print(j)\n        for j in range(len(temp)):\n            # print(j)\n            # print(temp[j])\n            if temp[i][1]>temp[j][0] and temp[i][0]<temp[j][0] and (temp[i][1]+temp[j][1]) not in result:\n                result.append(temp[i][1]+temp[j][1])\n                # print(temp[i][1]+temp[j][1])\n    # print(result)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in test_list:\n        temp_comb = list(combinations(i,len(i)))\n        comb += temp_comb\n    return comb\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 : \n        return \"divisor not found\"\n    if n == 1 : \n        return \"1\"\n    i = 2\n    divisors = 0\n    while i * i < n : \n        if n % i == 0 : \n            divisors += 1\n            if divisors % 2 == 0 : \n                return \"divisor found\"\n            else : \n                i += 1\n        i += 1\n    return \"divisor not found\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0 :\n            if (i+1)**2 == n :\n                count += 1\n            else :\n                count += 2\n    if n == count :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [] \n    i = 1\n    while i * i <= n: \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n / i: \n                divisors.append(n / i) \n        i += 1\n    if len(divisors) > 0: \n        return \"Not divisible\"\n    else: \n        return \"Divisible\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n%2 == 0 : \n        print('The number is even')\n    else : \n        print('The number is odd')\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to count the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to count the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to count the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to count the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to count the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to count the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to count the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n%i == 0:\n            divisors += 1\n    print(divisors)\n    \ndef count_divisors(n) : \n    '''\n    Write a python functio"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count_divisors += 1\n    return count_divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        return divisors\n    else:\n        return False\ndef count_divisors_soln(n):\n    '''\n    https://www.geeksforgeeks.org/how-can-i-find-all-divisors-of-a-number-i-using-python-27-5-using-divisors/\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # TODO: your code here\n    '''\n    # test cases\n    print(count_divisors(10))\n    # count_divisors(0)\n    # count_divisors(1)\n    # count_divisors(2)\n    # count_divisors(3)\n    # count_divisors(4)\n    # count_divisors(5)\n    # count_divisors(6)\n    # count_divisors(7)\n    # count_divisors(8)\n    # count_divisors(9)\n    print(count_divisors(120))\n    print(count_divisors(123))\n    print(count_divisors(12345))\n    '''\n    if (n % 2) == 0:\n        print(n, \" is even\")\n    else:\n        print(n, \" is not even\")\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1, n):\n        if n%i==0:\n            cnt+=1\n    if cnt%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # arr = [0] * (len(arr)+1)\n    # arr[1] = arr[0]\n    # for i in range(2, len(arr)):\n    #     arr[i] = arr[i-1] + arr[i-2]\n    # return arr[len(arr)-1]\n    return sum(list(map(int, (list(filter(lambda x: x%2==1, arr)))))[len(arr)-1::2])\n    \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odds = []\n    sum = 0\n    start = 0\n    end = 0\n    n = len(arr)\n    for i in range(n):\n        if (i % 2 == 0):\n            start = i\n        if (i % 2!= 0):\n            end = i\n        odds.append(arr[start:end])\n        sum += len(odds[-1])\n        start += 1\n        end += 1\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        odd_length_sum = 0\n        for i in range(len(arr)):\n            if i % 2 == 0:\n                odd_length_sum += arr[i]\n        return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = []\n    sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            odd_length.append(arr[i])\n            sum += arr[i]\n        else:\n            continue\n    \n    print(sum)\n    return sum\n        \n    \nodd_length_sum([2, 4, 6, 8, 10, 12])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sums = 0\n    for i in range(0,len(arr)):\n        if i % 2 == 0:\n            sums += arr[i]\n    return sums\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # check if all elements in the array are odd\n    if len(arr) <= 1:\n        return sum(arr)\n    # use two pointer technique to find the first and last element of a subarray\n    first, last = 0, len(arr) - 1\n    # store the sum of elements in a separate array\n    result = [0] * len(arr)\n    # traverse till the end\n    while first < last:\n        # increase the first element by 1\n        result[first] += arr[first]\n        # increase the last element by 1\n        result[last] += arr[last]\n        # increment both end elements by 1\n        first += 1\n        last -= 1\n    # add sum in the end of result array\n    result.extend(arr[first:last+1])\n    return sum(result)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0,len(arr),2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            odd_length_sum += arr[i]\n    return odd_length_sum\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = int(r)\n    g = int(g)\n    b = int(b)\n    if r > 255:\n        r = 255\n    if g > 255:\n        g = 255\n    if b > 255:\n        b = 255\n    if r < 0:\n        r = 0\n    if g < 0:\n        g = 0\n    if b < 0:\n        b = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert the RGB to hsv\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    hue = 0.003921568627451011\n    saturation = 0.6039215686274510\n    value = 0.0\n    # hsv (Hue Saturation Value)\n    hue = hue * 6\n    saturation = saturation * 6\n    value = value * 6\n    # print(hue,saturation,value)\n    # hsv = h*saturation\n    hue_r = int(hue*255)\n    hue_g = int(hue*255)\n    hue_b = int(hue*255)\n    # print(hue_r, hue_g, hue_b)\n    hue_int = int(hue_r + hue_g + hue_b)\n    # print(hue_int)\n    hue_int = hue_int % 180\n    # print(hue_int)\n    if hue_int > 360:\n        hue_int = hue_int - 360\n    if hue_int < 0:\n        hue_int = hue_int + 360\n    # print(hue_int)\n    # print(hue,saturation,value)\n    # hsv_int = int(hue_r*saturation)\n    # print(hue_r,saturation,value)\n    # print(hue_g,saturation,value)\n    # print(hue_b,saturation,value)\n    # print(hue_r, hue_g, hue_b)\n    # print(hue_int, hue_r, hue_g, hue_b)\n    # print(hue_int % 180)\n    if hue_int > 180:\n        hue_int = hue_int - 180\n    if hue_int < 0:\n        hue_int = hue_int + 180\n    # print(hue_int)\n    # print(hue,saturation,value)\n    # hsv_int = int(hue_r*saturation)\n    # print(hue_r,saturation,value)\n    # print(hue_g,saturation,value)\n    # print(hue_b,saturation,value)\n    # print(hue_r, hue_g, hue_b)\n    # print(hue_int, hue_r, hue_g, hue_b)\n    # print(hue_int % 180)\n    # print(hue,saturation,value)\n    # print(hue_r,hue_g,hue_b)\n    # print(hue_int, hue_r, hue_g, hue_b)\n    # print(hue_int % 180)\n    # print(hue_int)\n    # print(hue_r)\n    # print(hue_g)\n    # print(hue_b)\n    # print(hue_int)\n    # print(hue_r)\n    # print(hue_g)\n    # print(hue_b)\n    # print(hue_r)\n    # print(hue_g)\n    # print(hue_b)\n    # print(hue_r)\n    # print(hue_g)\n    # print(hue_b)\n    # print(hue)\n    # print(saturation)\n    # print(value)\n    # print(hue_r)\n    # print(hue_g)\n    # print(hue_b)\n    # print(hue_r)\n    # print(hue_g)\n    # print(hue_b)\n    # print(hue_r)\n    # print(hue_g)\n    # print(hue_b)\n    return (hue_int, hue_r, hue_g, hue_b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    return (\n        r,\n        g,\n        b\n    )\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def hsv_to_rgb(h, s, v):\n        '''\n        Convert HSB values to rgb.\n        '''\n        return (int(h*65535), int(s*255), int(v*255))\n    if(r == g == b):\n        return (r, g, b)\n    else:\n        return hsv_to_rgb(r, g, b)\n    \n    \ndef main():\n    '''\n    Main function\n    '''\n    print(\"Hello, I'm you. I'm a color converter\")\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    #1\n    c = r+g+b\n    m = max(r, g, b)\n    if m == 0:\n        return (0,0,0)\n    elif m == r:\n        return (0,0,255)\n    elif m == g:\n        return (255,0,0)\n    elif m == b:\n        return (255,255,0)\n    else:\n        return (0,255,0)\n    \n    #2\n    if c <= 60:\n        return hsv_to_rgb(0,0,0)\n    elif 60 <= c < 100:\n        return hsv_to_rgb(0,100,100)\n    else:\n        return hsv_to_rgb(100,100,100)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = (r * 6) / 255.0\n    s = (g * 6) / 255.0\n    v = (b * 6) / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # The color is black\n    if r == 0:\n        h = 0\n        s = 0\n        v = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to H,S,V values\n    r = int(r * 255)\n    g = int(g * 255)\n    b = int(b * 255)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # assume colors are in the range [0, 1]\n    # convert to floats and apply formula\n    v = (r + g + b) / 3\n    a = 0.299*v + 0.587*(r - v) + 0.114*(g - v)\n    b = 0.212*v - 0.523*(g - v) - 0.311*(r - v)\n    # format the result to be a float\n    a = (a*255).clip(0,255)\n    b = (b*255).clip(0,255)\n    # the formula says a = hsv(h,s,v)\n    # round down to two decimal places, so we can handle weird situations\n    a = (a + 1.0)*(2.0 / (2.0 + 2.0))\n    b = (b + 1.0)*(2.0 / (2.0 + 2.0))\n    if a > 1.0:\n        a = 1.0\n    if a < 0.0:\n        a = 0.0\n    if b > 1.0:\n        b = 1.0\n    if b < 0.0:\n        b = 0.0\n    # return the hsv values as a single vector\n    return (a, b, c)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #  * Variables to store color values in\n    #  * Hue: 0-360\n    #  * Saturation: 0-1\n    #  * Value: 0-1\n    h = int(r * 6)\n    s = r - (h / 360)\n    v = g - (s / 216)\n    #  * Obtain the values of the HSB values using the formula\n    #  * https://www.geeksforgeeks.org/hue-saturation-value-color-model-hsv-color-model/\n    #  * https://www.youtube.com/watch?v=0VlSs3PqeI&ab_channel=TobyShark\n    #  * https://www.youtube.com/watch?v=a1B3jZO3nkE&ab_channel=TobyShark\n    #  * https://www.youtube.com/watch?v=cRnKtb3PX0&ab_channel=TobyShark\n    #  * https://www.youtube.com/watch?v=XD1VwB0Y2I&ab_channel=TobyShark\n    #  * https://www.youtube.com/watch?v=ZL8JOZrVWg&ab_channel=TobyShark\n    if h > 360:\n        h = h % 360\n    if s > 1:\n        s = s % 1\n    if v > 1:\n        v = v % 1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    cnt_even_odd=0\n    for i in list1:\n        if i%2==0:\n            cnt_even_odd+=i\n        else:\n            continue\n    return cnt_even_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    return list1[0]*list1[1]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return list1[::2] + list1[1::2]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    for i in range(0,len(list1)):\n        prod=prod*list1[i]\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print(list1)\n    product=1\n    for i in list1:\n        if i%2==0:\n            product*=i\n        else:\n            product*=i\n    print(product)\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)%2==0:\n        return sum(list1[0:int(len(list1)/2)])\n    else:\n        return sum(list1[0:int(len(list1)/2)+1])\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum = 0\n    for i in list1:\n        if i%2 == 0:\n            sum+=i\n    return sum\n    \n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            prod = prod*list1[i]\n        else:\n            prod = prod*list1[i]\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2=[]\n    count=0\n    for i in list1:\n        if i%2==0:\n            list2.append(i)\n        elif i%2==1:\n            list2.append(i)\n        count+=1\n        if count==2:\n            break\n    return list2\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    odd_numbers = []\n    even_numbers = []\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    ints = tuple()\n    for i in test_str:\n        ints.append(int(i))\n    return tuple(ints)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str,tuple):\n        return tuple([int(i) for i in test_str])\n    else:\n        return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    for i in range(len(test_str)):\n        test_str[i] = int(test_str[i])\n    return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_tuple = tuple(test_str)\n        return test_tuple\n    except:\n        return 'Cannot convert'+ test_str\n    \n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str,tuple):\n        raise TypeError('tuple_str_int: input is not a tuple')\n    if len(test_str)!= 2:\n        raise ValueError('tuple_str_int: input must be of length 2')\n    return (test_str[0],int(test_str[1]))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(s) for s in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(map(int,test_str))\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for char in test_str:\n        result.append(int(char))\n    return tuple(result)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if a[i] < x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # make a copy of a\n    n = len(a)\n    i = bisect.bisect_right(a, x, lo=0, hi=n)\n    if i == 0:\n        i = n\n    if i == n:\n        i = 0\n    if i == n and x >= a[i]:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    if i == len(a):\n        return a.append(x)\n    else:\n        return right_insertion(a[i:], x)\ndef merge_sort(a):\n    '''\n    Write a function to sort an unsorted list.\n    '''\n    def sort(a, p, r):\n        if r - p > 1:\n            q = (p + r) // 2\n            sort(a, p, q)\n            sort(a, q + 1, r)\n            merge(a, p, q)\n    sort(a, 0, len(a)-1)\ndef merge(a, p, r):\n    '''\n    Write a function that merges the two sorted lists.\n    '''\n    l = p + 1\n    r = len(a) - 1\n    i = p\n    j = r\n    while i <= j:\n        if a[l] > a[i] and a[r] > a[j]:\n            a[l], a[i] = a[i], a[l]\n            i += 1\n            l += 1\n        elif a[l] > a[i] and a[r] <= a[j]:\n            a[l], a[j] = a[j], a[l]\n            j -= 1\n        elif a[l] <= a[i] and a[r] > a[j]:\n            a[l], a[r] = a[r], a[l]\n            r -= 1\n        elif a[l] <= a[i] and a[r] <= a[j]:\n            a[l], a[j] = a[j], a[l]\n            l += 1\n        elif a[l] <= a[i] and a[r] <= a[j]:\n            a[l], a[r] = a[r], a[l]\n            i += 1\n            j -= 1\n        else:\n            break\n    for k in range(p, r + 1):\n        a[k] = a[l] + a[r]\ndef insert_sort(a):\n    '''\n    Write a function to sort an unsorted list.\n    '''\n    def sort(a, p, r):\n        if r - p > 1:\n            q = (p + r) // 2\n            sort(a, p, q)\n            sort(a, q + 1, r)\n            merge(a, p, q)\n    sort(a, 0, len(a)-1)\ndef merge(a, p, r):\n    '''\n    Write a function that merges the two sorted lists.\n    '''\n    l = p + 1\n    r = len(a) - 1\n    i = p\n    j = r\n    while i <= j:\n        if a[l] < a[i] and a[r] > a[j]:\n            a[l], a[i] = a[i], a[l]\n            i += 1\n            l += 1\n        elif a[l] < a[i] and a[r] <= a[j]:\n            a[l], a[j] = a[j], a[l]\n            j -= 1\n        elif a[l] > a[i] and a[r] > a[j]:\n            a[l], a[r] = a[r], a[l]\n            r -= 1\n        elif a[l] == a[i] and a[r] < a[j]:\n            a[l], a[j] = a[j], a[l]\n            j -= 1\n        elif a[l] == a[i] and a[r] >= a[j]:\n            a[l], a[j] = a[j], a[l]\n            i += 1\n            j -= 1\n        else:\n            break\n    for k in range(p, r + 1):\n        a[k] = a[l] + a[r]\ndef find_center(a, p, r, i, j):\n    '''\n    Write a function to find the center point for the given list.\n    '''\n    if a[i] > a[j]:\n        p = p + 1\n        j = j - 1\n    if a[p] >= a[j] and a[r] > a[i]:\n        p = p + 1\n    if a[p] >= a[i] and a[r] >= a[j]:\n        return p\n    else:\n        return find_center(a, p, r, i, j)\ndef median(a, p, r):\n    '''\n    Write a function to find the median of a sorted list.\n    '''\n    if r == len(a):\n        return a[0]\n    else:\n        l = find_center(a, p, r, 0, len(a)-1)\n        r = find_center(a, p, r, l, l)\n        if l == len(a) and r == len(a):\n            return a[0]\n        if l == len(a):\n            return a[r]\n        if r == len(a):\n            return a[l]\n        return a[l] + a[r]\ndef kth_smallest(a, p, r, k):\n    '''\n    Write a function to find the kth smallest number in a sorted list.\n    '''\n    if r == len(a):\n        return a[p]\n    if a[r] >= a[p]:\n        return kth_smallest(a, p, r - 1, k)\n    else:\n        return kth_smallest(a, r + 1, p, k-1)\ndef kth_largest(a, p, r, k):\n    '''\n    Write a function to find the kth largest number in a sorted list.\n    '''\n    if r == len(a):\n        return a[p]\n    if a[r] <= a[p]:\n        return kth_largest(a, p, r - 1, k)\n    else:\n        return kth_largest(a, r + 1, p, k-1)\ndef merge_kth_smallest(a, p, r, k):\n    '''\n    Write a function to merge the kth smallest elements of a into a sorted list.\n    '''\n    left = p\n    right = r\n    left = p\n    right = r\n    temp = []\n    while left <= right:\n        if a[left] > a[right]:\n            temp.append(a[left])\n            left += 1\n        else:\n            temp.append(a[right])\n            right -= 1\n    for i in range(left, len(a)):\n        a[i] = temp[i-left]\n    for i in range(right, len(a)):\n        a[i] = temp[i-right]\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x, lo=0, hi=len(a))\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # You may use bisect.bisect_left(arr, x)\n    i = bisect.bisect_left(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # get the index of the last element\n    n = len(a)\n    left_position = n - 1\n    # set right position as n\n    right_position = n\n    # if a is empty\n    if a[0] < x:\n        # while the position is not at the last element\n        while left_position > 0:\n            if a[left_position] < x:\n                break\n            left_position -= 1\n        # if the position is the first element\n        if left_position == 0:\n            # set right position as the last element\n            right_position = len(a) - 1\n        else:\n            # if the position is not at the last element\n            # swap the index position of a[0] with the last element\n            if left_position > 0:\n                a[left_position], a[0] = a[0], a[left_position]\n            # swap the position of a[n-1] with the last element\n            if n - 1 > left_position:\n                a[n - 1], a[right_position] = a[right_position], a[n - 1]\n    else:\n        # if the value is not the smallest value\n        if x < a[0]:\n            # set right position as the last element\n            right_position = len(a) - 1\n        else:\n            # if the value is the smallest value\n            if x < a[n - 1]:\n                # set right position as the last element\n                right_position = n - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_right(a, x)\n    if i == n:\n        return -1\n    else:\n        return i\n    \ndef insert_at(a, x):\n    '''\n    Write a function to insert an element at the right insertion point for a specified value in sorted order.\n    '''\n    if x == a[0]:\n        return a.insert(1, x)\n    else:\n        return a.insert(right_insertion(a, x), x)\n    \ndef bubble_sort(a):\n    '''\n    Write a function to sort an unsorted array in ascending order.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n                \ndef selection_sort(a):\n    '''\n    Write a function to sort an unsorted array in ascending order.\n    '''\n    n = len(a)\n    for i in range(n):\n        min_idx = i\n        for j in range(i, n):\n            if a[j] < a[min_idx]:\n                min_idx = j\n        a[i], a[min_idx] = a[min_idx], a[i]\n        \ndef merge(a, b):\n    '''\n    Write a function to merge two sorted arrays into one sorted array.\n    '''\n    i = 0\n    j = 0\n    n = len(a)\n    m = len(b)\n    sorted_array = []\n    while i < n and j < m:\n        if a[i] < b[j]:\n            sorted_array.append(a[i])\n            i += 1\n        else:\n            sorted_array.append(b[j])\n            j += 1\n            \n    while i < n:\n        sorted_array.append(a[i])\n        i += 1\n    while j < m:\n        sorted_array.append(b[j])\n        j += 1\n        \n    return sorted_array\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    left = bisect.bisect_left(a, x)\n    if left == n:\n        return -1\n    else:\n        return left\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # This function should return the right insertion point for x.\n    # You can assume that there is no tie.\n    # Returns the index position, which is the position of the largest element.\n    # [25, 23, 22, 21, 15, 17, 18, 19, 20, 21] \n    #  (or  [25, 23, 22, 20, 17, 18, 21, 21, 15, 17] or [25, 23, 22, 20, 17, 18, 21, 21, 15, 17] )\n    # You are given an array of n elements and the value x.\n    # There are n/2 numbers, that are less than x.\n    # But we can look at the numbers on the left side and right side.\n    # This function should return the index position for the right insertion point.\n    # Note that the index position will always be an integer, and be less than the length of the array.\n    # The search function should return the index position for the smallest element.\n    # Your search function will always be called with O(log n) time complexity.\n    \n    #Note that when you return an index position, you must increment the left index counter by 1.\n    # Therefore, when you return the index position, the value x will have been inserted at the right position.\n    # The time complexity of your search is O(log n).\n    #\n    #\n    #\n    \n    # def right_insertion(a, x):\n    #     # Create an empty list\n    #     new_list = []\n    #     # Iterate through the array.\n    #     for i in range(len(a)):\n    #         # Compare with x.\n    #         if a[i] < x:\n    #             new_list.append(a[i])\n    #         else:\n    #             new_list.append(x)\n    #     # Return the index position.\n    #     return new_list\n    #\n    #\n    #\n    #\n    \n    left_index = bisect.bisect_left(a, x)\n    right_index = len(a) - 1\n    return right_index - left_index + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    start = bisect.bisect_left(a, x)\n    if start == len(a):\n        return start\n    return start + 1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    # the regular expression\n    r = '^[a-zA-Z]+b[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'b'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+b[0-9]+[a-zA-Z]+b[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a two followed by two 'c'.\n    '''\n    \n    # the regular expression\n    r = '[a-zA-Z]+c[0-9]+[a-zA-Z]+c[0-9]+'\n    \n    # find all the matches\n    matches = re.finditer(r, text)\n    \n    # iterate through the matches\n    for match in matches:\n        print(\"Match:\", match.start(), match.group())\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that ha"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(\\b)(\\w*\\w*)(\\b)\")\n    return pattern.search(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('a(\\d)b')\n    return pattern.search(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(?<=b)\\w+')\n    return pattern.findall(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #1. Create a regex expression for the string\n    string_regex = r\"a(?:b)?\\s*(?:[bc]|[bcb])\\s*\\w+\"\n    #2. Iterate over the string using the findall method\n    for i in re.findall(string_regex, text):\n        #3. Return the first occurrence of the group that matches the regex\n        return i[0]\n    #4. Return -1 if no match found\n    return -1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Replace the 2nd 'b' with 'b'\n    text = text.replace(\"b\",\"b\")\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text[0:1] == 'a' and re.search('b', text) is not None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.match(\"[a-z]*$\", text)\n    print(\"matching\", text)\n    print(\"Result: \", result)\n    return result\n    # if result is not None:\n    #     return result.group()\n    # else:\n    #     return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_string = re.search(r'(a){3}b', text)\n    if match_string:\n        return match_string.group()\n    else:\n        return \"None\"\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    list1 = text.split()\n    res = []\n    for i in range(0,len(list1)):\n        if i == len(list1) - 1:\n            if list1[i].isalpha():\n                if list1[i-1].isalpha() and list1[i].isalpha() and list1[i+1].isalpha():\n                    res.append(list1[i])\n            else:\n                if list1[i-1].isalpha() and list1[i].isalpha():\n                    res.append(list1[i])\n        elif i == 0:\n            if list1[i].isalpha():\n                if list1[i+1].isalpha() and list1[i+2].isalpha():\n                    res.append(list1[i])\n            else:\n                if list1[i+1].isalpha():\n                    res.append(list1[i])\n        else:\n            if list1[i-1].isalpha() and list1[i].isalpha() and list1[i+1].isalpha() and list1[i+2].isalpha():\n                res.append(list1[i])\n    return res\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_str)\n    test_list = list(test_tuple)\n    test_list.extend(test_tuple)\n    return test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    output = []\n    if not test_str:\n        return None\n    elif test_list:\n        for i in test_list:\n            output.append(i)\n    else:\n        output.append(test_str)\n    return tuple(output)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result_tuple = tuple(test_list)\n    result_tuple += tuple(test_str)\n    return result_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list)!= list:\n        print(\"\\n[ERROR] TypeError!\\n\")\n        return 0\n    else:\n        if type(test_str)!= str:\n            print(\"\\n[ERROR] TypeError!\\n\")\n            return 0\n        else:\n            new_tuple = tuple(test_list)\n            new_tuple.append(test_str)\n            return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    temp = []\n    for item in test_str:\n        temp.append(item)\n    tuple = tuple(temp)\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([x for x in test_str.split()])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        new_tuple = tuple(test_list)\n        new_tuple.append(test_str)\n        return new_tuple\n    except TypeError:\n        print(\"{} is an incorrect input for a tuple\".format(test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a list of all letters\n    letters = list(test_str)\n    # Create a tuple of all letters\n    tuple = tuple(letters)\n    # Print the output\n    print(\"The new tuple is {}\".format(tuple))\n    # Return the tuple to the calling function\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_str)\n    test_list.remove(test_tuple)\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = []\n    for item in test_str.split():\n        tuple.append(item)\n    return tuple\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            even_numbers.append(nums[i])\n    return even_numbers\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_indices.append(i)\n    if len(even_indices) == len(nums):\n        return even_indices\n    else:\n        return None\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = False\n    for i in nums:\n        if i % 2 == 0:\n            result = True\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Even index indexes start at zero, the index we check is less than the length of the list.\n    # So we just check if the index is even and if it's an even number of numbers.\n    evens = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            evens += 1\n    return evens == 0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            print(nums[i])\n    print('END')\neven_position([2, 3, 5, 7])\neven_position([2, 5, 7, 8])\neven_position([2, 3, 4, 5, 6, 7])\neven_position([2, 4, 6, 8])"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = []\n    for i in nums:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    check = 0\n    for i in range(0, len(nums), 2):\n        if(nums[i] % 2 == 0):\n            if(nums[i] % 2!= 0):\n                check += 1\n    return check\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return None\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Write your code here\n    tup = ()\n    for x in test_tup:\n        if type(x) == tuple:\n            tup = tup + x\n    return tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) < 3:\n        return None\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is tuple:\n        #convert tuple to list of tuples\n        result = list(test_tup)\n        \n        for index, item in enumerate(result):\n            #remove index from list\n            item = result.pop(index)\n            #append back to list\n            result.append(item)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # TODO: Write your code here\n    test_tup_1 = test_tup[1:]\n    return test_tup_1\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # your code here\n    \n    return test_tup[0]\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    t = []\n    for i in test_tup:\n        if type(i) == tuple:\n            t.append(i)\n        else:\n            t.append(i)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[1]\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    summ = 0\n    for x in input_list:\n        summ = summ + len(x)\n    return summ\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        count += len(x)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list: \n        if isinstance(x, list): \n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    print(type(input_list))\n    print(type(input_list[0]))\n    list_length = len(input_list)\n    print(type(list_length))\n    print(type(list_length[0]))\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    cnt = 0\n    for lst in input_list:\n        if isinstance(lst, list):\n            cnt = cnt + len(lst)\n    return cnt\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # your code here\n    counter = 0\n    for i in input_list:\n        counter += len(i)\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists = 0\n    for i in input_list:\n        if type(i) == list:\n            number_of_lists += 1\n    return number_of_lists\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n    \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    def count_list_recursive(input_list, count):\n        '''\n        Write a python function to count the number of lists in a given number of lists.\n        '''\n        if input_list == []:\n            count += 1\n        else:\n            count_list_recursive(input_list[1:], count)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    \n    while left <= right:\n        middle = (left + right) // 2\n        if arr[middle] < x:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return left\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<=r:\n        mid=(l+r)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            l=mid+1\n        else:\n            r=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left=0\n    right=len(arr)-1\n    while left<=right:\n        mid=(left+right)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            right=mid-1\n        else:\n            left=mid+1\n    return None\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #def last(arr, x):\n    for i in range(len(arr)):\n        if (arr[i] == x):\n            return i\n    return -1\n    #return arr[-1]\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        if arr[n-1]>x:\n            return n-1\n        return n\n    if x>arr[n-1]:\n        return n-1\n    if arr[n-1]>x:\n        return n-1\n    if arr[n-2]>x:\n        return n-2\n    return n-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # define variables\n    n=len(arr)\n    p=n//2\n    # init flag\n    i=p\n    # for loop to iterate through array\n    while(i>=0 and arr[i]<=x):\n        i-=1\n    # if array contains element x\n    if arr[i]==x:\n        return i\n    # if array contains element x\n    elif arr[i]>x:\n        return p\n    # if array contains element x\n    else:\n        return n-i-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def isLast(arr,x):\n        '''\n        Python method to identify if a given element is the last element in an array.\n        '''\n        if len(arr) == 1:\n            return arr[0] == x\n        else:\n            if arr[len(arr)-1] < x:\n                return False\n            else:\n                return True\n    \n    if isLast(arr,x):\n        return len(arr)-1\n    else:\n        return arr.index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # n = len(arr)\n    # if n<1:\n    #     return -1\n    \n    # l = 0\n    # r = n-1\n    # while l<r:\n    #     mid = (l+r)//2\n    #     if arr[mid]<x:\n    #         l = mid + 1\n    #     else:\n    #         r = mid\n    #     return l\n    \n    # if arr[l]<x:\n    #     return l\n    # else:\n    #     return -1\n    \n    def last_index(arr,x):\n        n = len(arr)\n        if n<1:\n            return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x,len(arr)-1)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'a\\b', text)\n    return result\ndef find_all(text, substring):\n    '''\n    Finds all positions in a string that match a substring.\n    '''\n    result = []\n    matches = re.findall(substring, text)\n    for match in matches:\n        result.append(match[0])\n    return result\ndef contains_substring(text, substring):\n    '''\n    Returns true if the substring exists in the text.\n    '''\n    return text.find(substring)!= -1\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    matches = re.findall('a\\w+\\w+\\w+', text)\n    print(matches)\n    matches = [m for m in matches if m!= '']\n    print(matches)\n    matches = [m for m in matches if m!= '']\n    print(matches)\n    matches = [m for m in matches if m!= '']\n    print(matches)\n    matches = [m for m in matches if m!= '']\n    print(matches)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r'a(b)([\\s\\S]*?)b')\n    result = p.findall(text)\n    return result\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    p = re.compile(r'a(c)([\\s\\S]*?)c')\n    result = p.findall(text)\n    return result\ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    p = re.compile(r'a(d)([\\s\\S]*?)d')\n    result = p.findall(text)\n    return result\ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    p = re.compile(r'a(e)([\\s\\S]*?)e')\n    result = p.findall(text)\n    return result\ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'f'.\n    '''\n    p = re.compile(r'a(f)([\\s\\S]*?)f')\n    result = p.findall(text)\n    return result\ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'g'.\n    '''\n    p = re.compile(r'a(g)([\\s\\S]*?)g')\n    result = p.findall(text)\n    return result\ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'h'.\n    '''\n    p = re.compile(r'a(h)([\\s\\S]*?)h')\n    result = p.findall(text)\n    return result\ndef text_starta_endi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'i'.\n    '''\n    p = re.compile(r'a(i)([\\s\\S]*?)i')\n    result = p.findall(text)\n    return result\ndef text_starta_endj(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'j'.\n    '''\n    p = re.compile(r'a(j)([\\s\\S]*?)j')\n    result = p.findall(text)\n    return result\ndef text_starta_endk(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'k'.\n    '''\n    p = re.compile(r'a(k)([\\s\\S]*?)k')\n    result = p.findall(text)\n    return result\ndef text_starta_endl(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'l'.\n    '''\n    p = re.compile(r'a(l)([\\s\\S]*?)l')\n    result = p.findall(text)\n    return result\ndef text_starta_endm(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in'm'.\n    '''\n    p = re.compile(r'a(m)([\\s\\S]*?)m')\n    result = p.findall(text)\n    return result\ndef text_starta_endn(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'n'.\n    '''\n    p = re.compile(r'a(n)([\\s\\S]*?)n')\n    result = p.findall(text)\n    return result\ndef text_starta_endo(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'o'.\n    '''\n    p = re.compile(r'a(o)([\\s\\S]*?)o')\n    result = p.findall(text)\n    return result\ndef text_starta_endp(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'p'.\n    '''\n    p = re.compile(r'a(p)([\\s\\S]*?)p')\n    result = p.findall(text)\n    return result\ndef text_starta_endq(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'q'.\n    '''\n    p = re.compile(r'a(q)([\\s\\S]*?)q')\n    result = p.findall(text)\n    return result\ndef text_starta_endr(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'r'.\n    '''\n    p = re.compile(r'a(r)([\\s\\S]*?)r')\n    result = p.findall(text)\n    return result\ndef text_starta_endt(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 't'.\n    '''\n    p = re.compile(r'a(t)([\\s\\S]*?)t')\n    result = p.findall(text)\n    return result\ndef text_starta_endu(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'u'.\n    '''\n    p = re.compile(r'a(u)([\\s\\S]*?)u')\n    result = p.findall(text)\n    return result\ndef text_starta_endv(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'v'.\n    '''\n    p = re.compile(r'a(v)([\\s\\S]*?)v')\n    result = p.findall(text)\n    return result\ndef text_starta_endw(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'w'.\n    '''\n    p = re.compile(r'a(w)([\\s\\S]*?)w')\n    result = p.findall(text)\n    return result\ndef text_starta_endx(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'x'.\n    '''\n    p = re.compile(r'a(x)([\\s\\S]*?)x')\n    result = p.findall(text)\n    return result\ndef text_starta_endy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'y'.\n    '''\n    p = re.compile(r'a(y)([\\s\\S]*?)y')\n    result = p.findall(text)\n    return result\ndef text_starta_endz(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'z'.\n    '''\n    p = re.compile(r'a(z)([\\s\\S]*?)z')\n    result = p.findall(text)\n    return result\ndef text_starta_endzd(text):\n    '''\n    Write a function that matches a string that has an "
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.strip().lower()\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'\\s\\s+$', '', text)\n    text = re.sub(r'^\\s*\\S+?\\s*$', '', text)\n    text = re.sub(r'\\s*\\S+?$', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'\\s*\\S+?\\s*$', '', text)\n    text = re.sub(r'\\s*\\S+?$', '', text)\n    text = re.sub(r'\\s*\\S+?\\s*', '', text)\n    text = re.sub(r'\\s*\\S+?\\s*', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'\\s+\\S+?\\s+', '', text)\n    text = re.sub(r'\\s+\\S+?\\s+', '', text)\n    text = re.sub(r'\\s+\\S+?\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', text)\n    text = re.sub(r'^\\s+', '', tex"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if type(text) is not str:\n        raise TypeError(\"Error. text must be a string.\")\n    if len(text)==0:\n        raise ValueError(\"Error. string can't be empty.\")\n    regex = '[a-zA-Z0-9]+[0-9]+b'\n    return re.findall(regex,text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return text.endswith(\"a\") or re.search(\"a\",text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.sub('[^a-zA-Z]', '', text)\n    text = re.sub('^[a-zA-Z]$', '', text)\n    text = re.sub('\\s+','', text)\n    text = text.split()\n    text = list(map(lambda x: x.lower(), text))\n    text = list(filter(lambda x: x.isalpha() and x.isupper(), text))\n    text = list(filter(lambda x: x[0]!= x[1] and x.endswith('e'), text))\n    text = list(filter(lambda x: x.endswith('u'), text))\n    text = list(filter(lambda x: x[0]!= x[1] and x.endswith('e'), text))\n    text = list(filter(lambda x: x.endswith('u'), text))\n    text = list(filter(lambda x: x.startswith('-'), text))\n    text = list(filter(lambda x: x.endswith('-'), text))\n    text = list(filter(lambda x: x.startswith('-'), text))\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return text.startswith('a') and 'b' in text.endswith('b')\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_tostart = re.search(r'[a-zA-Z]+\\w+\\s*[a-zA-Z]+\\s*[a-zA-Z]+\\w*', text)\n    if text_tostart:\n        return text_tostart.group()\n    else:\n        return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    for a in range(0,len(text)):\n        #print(a)\n        if text[a] == 'a':\n            if(text[a+1] == 'b'):\n                endb_flag = True\n                return(endb_flag)\n    \n    return(endb_flag)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    if '__dict__' in dict:\n        total = dict['__dict__']\n    elif '__slots__' in dict:\n        total = dict['__slots__']\n    else:\n        for key in dict:\n            total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum+= i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not dict:\n        return 0\n    total = 0\n    for k in dict.keys():\n        total += dict[k]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for x in dict.values():\n        total += x\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    if type(dict) == dict:\n        for i in dict.values():\n            total += i\n        return total\n    else:\n        print(\"ERROR\")\n        return 0\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k in dict:\n        sum += dict[k]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    if type(dict) == dict:\n        for k in dict:\n            total = total + dict[k]\n        return total\n    return 0\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0: \n        return 0\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=1:\n        print('Please enter a number greater than or equal to 1')\n    else:\n        sum=0\n        for i in range(1,n+1):\n            if i%2==0:\n                sum+=i\n        print(sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # print(\"This is a python function!\")\n    sum = 0\n    i = 0\n    while i < n: \n        if i % 2 == 1:\n            sum = sum + i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l,r = 1,n \n    while l < r: \n        if l%2 == 0: \n            r-=1 \n        else: \n            l+=1 \n    return l \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0 \n    for num in range(l, r+1):\n        if num % 2 == 1: \n            sum += num \n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        print(\"Please enter a positive integer\")\n        return \n    else:\n        num=0\n        for i in range(1,n):\n            if i%2!=0:\n                num=num+i\n        print(num)\ndef main():\n    #number=int(input(\"enter a positive integer\"))\n    #sum_odd(number)\n    #sum_even(number)\n    sum_odd(10)\n    print(\"------------------------------\")\nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #write your code here\n    print(sum(range(0, n)))\n    \n    \nsum_odd(10000)\nsum_odd(2000)\nsum_odd(8000)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            sum = sum + arr[i]\n        return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0 \n    for i in arr:\n        total += i\n    return total \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    a=arr[0]\n    b=arr[1]\n    for i in range(2,len(arr)):\n        a+=arr[i]\n        b+=arr[i]\n    return(a,b)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for item in arr:\n        sum = sum + item\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum += x\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(0,len(arr)):\n        sum+=arr[i]\n    return sum\n    "
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_array = 0\n    for item in arr:\n        sum_array += item\n    return sum_array\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n    \n    x = n&1\n    if x:\n        n = n>>1\n        x = x|(1<<(d-1))\n    else:\n        x = (1<<d)\n        n = n|(1<<(d-1))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n < 32:\n        return n\n    if d < 0:\n        d = d % 32\n    if d == 0:\n        return n\n    if d == 32:\n        return 0\n    if d == 33:\n        return n\n    if d == 34:\n        return 1\n    if d == 35:\n        return 2\n    if d == 36:\n        return 3\n    if d == 37:\n        return 4\n    if d == 38:\n        return 5\n    if d == 39:\n        return 6\n    if d == 40:\n        return 7\n    if d == 41:\n        return 8\n    if d == 42:\n        return 9\n    if d == 43:\n        return 10\n    if d == 44:\n        return 11\n    if d == 45:\n        return 12\n    if d == 46:\n        return 13\n    if d == 47:\n        return 14\n    if d == 48:\n        return 15\n    if d == 49:\n        return 16\n    if d == 50:\n        return 17\n    if d == 51:\n        return 18\n    if d == 52:\n        return 19\n    if d == 53:\n        return 20\n    if d == 54:\n        return 21\n    if d == 55:\n        return 22\n    if d == 56:\n        return 23\n    if d == 57:\n        return 24\n    if d == 58:\n        return 25\n    if d == 59:\n        return 26\n    if d == 60:\n        return 27\n    if d == 61:\n        return 28\n    if d == 62:\n        return 29\n    if d == 63:\n        return 30\n    if d == 64:\n        return 31\n    if d == 65:\n        return 32\n    if d == 66:\n        return 33\n    if d == 67:\n        return 34\n    if d == 68:\n        return 35\n    if d == 69:\n        return 36\n    if d == 70:\n        return 37\n    if d == 71:\n        return 38\n    if d == 72:\n        return 39\n    if d == 73:\n        return 40\n    if d == 74:\n        return 41\n    if d == 75:\n        return 42\n    if d == 76:\n        return 43\n    if d == 77:\n        return 44\n    if d == 78:\n        return 45\n    if d == 79:\n        return 46\n    if d == 80:\n        return 47\n    if d == 81:\n        return 48\n    if d == 82:\n        return 49\n    if d == 83:\n        return 50\n    if d == 84:\n        return 51\n    if d == 85:\n        return 52\n    if d == 86:\n        return 53\n    if d == 87:\n        return 54\n    if d == 88:\n        return 55\n    if d == 89:\n        return 56\n    if d == 90:\n        return 57\n    if d == 91:\n        return 58\n    if d == 92:\n        return 59\n    if d == 93:\n        return 60\n    if d == 94:\n        return 61\n    if d == 95:\n        return 62\n    if d == 96:\n        return 63\n    if d == 97:\n        return 64\n    if d == 98:\n        return 65\n    if d == 99:\n        return 66\n    if d == 100:\n        return 67\n    if d == 101:\n        return 68\n    if d == 102:\n        return 69\n    if d == 103:\n        return 70\n    if d == 104:\n        return 71\n    if d == 105:\n        return 72\n    if d == 106:\n        return 73\n    if d == 107:\n        return 74\n    if d == 108:\n        return 75\n    if d == 109:\n        return 76\n    if d == 110:\n        return 77\n    if d == 111:\n        return 78\n    if d == 112:\n        return 79\n    if d == 113:\n        return 80\n    if d == 114:\n        return 81\n    if d == 115:\n        return 82\n    if d == 116:\n        return 83\n    if d == 117:\n        return 84\n    if d == 118:\n        return 85\n    if d == 119:\n        return 86\n    if d == 120:\n        return 87\n    if d == 121:\n        return 88\n    if d == 122:\n        return 89\n    if d == 123:\n        return 90\n    if d == 124:\n        return 91\n    if d == 125:\n        return 92\n    if d == 126:\n        return 93\n    if d == 127:\n        return 94\n    if d == 128:\n        return 95\n    if d == 129:\n        return 96\n    if d == 130:\n        return 97\n    if d == 131:\n        return 98\n    if d == 132:\n        return 99\n    if d == 133:\n        return 100\n    if d == 134:\n        return 101\n    if d == 135:\n        return 102\n    if d == 136:\n        return 103\n    if d == 137:\n        return 104\n    if d == 138:\n        return 105\n    if d == 139:\n        return 106\n    if d == 140:\n        return 107\n    if d == 141:\n        return 108\n    if d == 142:\n        return 109\n    if d == 143:\n        return 110\n    if d == 144:\n        return 111\n    if d == 145:\n        return 112\n    if d == 146:\n        return 113\n    if d == 147:\n        return 114\n    if d == 148:\n        return 115\n    if d == 149:\n        return 116\n    if d == 150:\n        return 117\n    if d == 151:\n        return 118\n    if d == 152:\n        return 119\n    if d == 153:\n        return 120\n    if d == 154:\n        return 121\n    if d == 155:\n        return 122\n    if d == 156:\n        return 123\n    if d == 157:\n        return 124\n    if d == 158:\n        return 125\n    if d == 159:\n        return 126\n    if d == 160:\n        return 127\n    if d == 161:\n        return 128\n    if d == 162:\n        return 129\n    if d == 163:\n        return 130\n    if d == 164:\n        return 131\n    if d == 165:\n        return 132\n    if d == 166:\n        return 133\n    if d == 167:\n        return 134\n    if d == 168:\n        return 135\n    if d == 169:\n        return 136\n    if d == 170:\n        return 137\n    if d == 171:\n        return 138\n    if d == 172:\n        return 139\n    if d == 173:\n        return 140\n    if d == 174:\n        return 141\n    if d == 175:\n        return 142\n    if d == 176:\n        return 143\n    if d == 177:\n        return 144\n    if d == 178:\n        return 145\n    if d == 179:\n        return 146\n    if d == 180:\n        return 147\n    if d == 181:\n        return 148\n    if d == 182:\n        return 149\n    if d == 183:\n        return 150\n    if d == 184:\n        return 151\n    if d == 185:\n        return 152\n    if d == 186:\n        return 153\n    if d == 187:\n        return 154\n    if d == 188:\n        return 155\n    if d == 189:\n        return 156\n    if d == 190:\n        return 157\n    if d == 191:\n        return 158\n    if d == 192:\n        return 159\n    if d == 193:\n        return 160\n    if d == 194:\n        return 161\n    if d == 195:\n        return 162\n    if d == 196:\n        return 163\n    if d == 197:\n        return 164\n    if d == 198:\n        return 165\n    if d == 199:\n        return 166\n    if d == 200:\n        return 167\n    if d == 201:\n        return 168\n    if d == 202:\n        return 169\n    if d == 203:\n        return 170\n    if d == 204:\n        return 171\n    if d == 205:\n        return 172\n    if d == 206:\n        return 173\n    if d == 207:\n        return 174\n    if d == 208:\n        return 175\n    if d == 209:\n        return 176\n    if d == 210:\n    "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a = n>>d%32\n    return n & (0xff000000 | (0x00ff0000 << (32-d)))"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    f=n%(2**d)\n    return ((f)<<d)+(n>>(2**d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n < 32:\n        return n\n    else:\n        if d >= 1:\n            d = d % 32\n            #if d == 0:\n            #    print(d)\n            #    print(n)\n            #    print(32)\n            return n << d\n        else:\n            return n >> 32\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n >> d \n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if(n == 0):\n        return 0\n    if(n & 1):\n        n = n ^ (1 << (32 - d))\n    else:\n        n = n ^ (1 << (d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n | (1<<d)\n    for i in range(d):\n        n = n << 1\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n&(1<<d)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Your code here\n    pattern = '\\s'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_no_spaces(text):\n    '''\n    Write a function to remove all the characters that are not whitespace.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_upper_case(text):\n    '''\n    Write a function to remove all the characters that are not uppercase.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_lower_case(text):\n    '''\n    Write a function to remove all the characters that are not lowercase.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_digits(text):\n    '''\n    Write a function to remove all the characters that are not digits.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_digits_regex(text):\n    '''\n    Write a function to remove all the characters that are not digits and \n    a non-digit character from a string.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_digits_regex_2(text):\n    '''\n    Write a function to remove all the characters that are not digits and \n    a non-digit character from a string.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef replace_all_spaces(text):\n    '''\n    Write a function to replace all the spaces with a dash and all \n    non-space characters with a dash.\n    '''\n    # Your code here\n    pattern = '\\s'\n    text = re.sub(pattern, '-', text)\n    return text\n    \ndef replace_space_regex(text):\n    '''\n    Write a function to replace all the space characters with a dash and\n    all non-space characters with a dash.\n    '''\n    # Your code here\n    pattern = '\\s'\n    text = re.sub(pattern, '-', text)\n    return text\n    \ndef remove_words(text):\n    '''\n    Write a function to remove all the characters from a string that \n    contains at least 2 words.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_punctuation_regex(text):\n    '''\n    Write a function to remove all punctuation.\n    '''\n    # Your code here\n    pattern = '\\p{Punctuation}'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_punctuation_regex_2(text):\n    '''\n    Write a function to remove all punctuation.\n    '''\n    # Your code here\n    pattern = '\\p{Punctuation}'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef replace_punctuation_regex(text):\n    '''\n    Write a function to replace all the punctuation characters with a dash\n    and all non-punctuation characters with a dash.\n    '''\n    # Your code here\n    pattern = '\\p{Punctuation}'\n    text = re.sub(pattern, '-', text)\n    return text\n    \ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all the non-digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_numbers_regex(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits_regex_2(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef replace_all_digits_regex_2(text):\n    '''\n    Write a function to replace all the digits from a string with a dash \n    and all non-digit characters with a dash.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '-', text)\n    return text\n    \ndef remove_all_uppercase_letters(text):\n    '''\n    Write a function to remove all the uppercase letters from a string.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_lowercase_letters(text):\n    '''\n    Write a function to remove all the lowercase letters from a string.\n    '''\n    # Your code here\n    pattern = '\\W'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits_regex_3(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits_regex_2(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits_regex_3(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits_regex_4(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits_regex_2(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits_regex_3(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, '', text)\n    return text\n    \ndef remove_all_digits_regex(text):\n    '''\n    Write a function to remove all the digits from a string.\n    '''\n    # Your code here\n    pattern = '\\d'\n    text = re.sub(pattern, ''"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # YOUR CODE GOES HERE\n    return''.join([i.strip() for i in text.split(' ')])\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text +=''\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(c for c in text if c!='')\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # First remove spaces that are not followed by commas\n    # This can be very handy because the original string has commas,\n    # so it will be split up in half in a random fashion.\n    text = re.sub(r'\\s+','', text)\n    # Remove all double spaces\n    text = text.replace('  ','')\n    # Remove all single spaces\n    text = text.replace('  ','').replace(' ', '')\n    # Remove all single spaces. Note: we have to replace''by ''\n    # since it will be replaced by whitespace\n    text = text.replace('  ', '')\n    # Remove all single spaces except last ones\n    text = text.replace('  ','').replace(' ', '')\n    # Remove all single spaces except last ones\n    text = text.replace('  ','').replace(' ', '')\n    # Remove all single spaces except last ones\n    text = text.replace('  ','').replace(' ', '')\n    return text\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    total = 0\n    if x == y == z == 'hello':\n        total += 1\n    if x == z == 'hello':\n        total += 1\n    if y == z == 'hello':\n        total += 1\n    if x == z == 'bye':\n        total += 1\n    if y == z == 'bye':\n        total += 1\n    if x == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == z == 'bye':\n        total += 1\n    if x == y == "
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    n = 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #this line goes through the line number and loops through the whole array\n    #the loop calculates the sum of the numbers at that location\n    sum=0\n    for i in range(len(x)):\n        sum+=x[i]\n    for j in range(len(y)):\n        sum+=y[j]\n    for k in range(len(z)):\n        sum+=z[k]\n    #print(sum)\n    #the function returns the sum of the numbers at that location\n    return sum\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x,y,z)\n    print(\"The number of equal numbers from the given integers are\",x+y+z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    sum = x + y + z\n    if x == y and y == z:\n        return 1\n    elif x == y or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,len(x)):\n        if x[i]==y[i]==z[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x==y==z)\n    print(x!=y!=z)\n    print(x>y>z)\n    print(x<y<z)\n    print(x<z<y)\n    print(x>=y>z)\n    print(x>=z>y)\n    print(x<=z<y)\n    print(x>z>y)\n    print(x>=z>y)\n    print(x<y<z)\n    print(x<=z<y)\n    print(x>z>y)\n    print(x>=z>y)\n    print(x<y<z)\n    print(x>y<z)\n    print(x<=y<z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z)\n    print(x<y>z"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if type(x)==int:\n        for i in range(x,y):\n            if i in range(z):\n                count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if type(x) is not int or type(y) is not int or type(z) is not int:\n        raise TypeError('The arguments must be integers')\n    if x == y == z:\n        return 1\n    elif x == z or y == z or x == y:\n        return 2\n    else:\n        return 3"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return count_rotation(arr[:-1]) + count_rotation(arr[-1:])\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    num_rotations = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            num_rotations += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return num_rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # your code goes here\n    if len(arr) <= 1:\n        return 1\n    \n    left, right = 0, len(arr) - 1\n    while left < right:\n        \n        while left < right and arr[left] > arr[right]:\n            left += 1\n        \n        while left < right and arr[left] < arr[right]:\n            right -= 1\n        \n        if left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    \n    return right - left + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    i = 0\n    j = l - 1\n    count = 0\n    while i < l:\n        if arr[i] < arr[j]:\n            if arr[i] > arr[j] :\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n            i += 1\n        j = j - 1\n        j = j - 1\n        if j == -1:\n            i += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        while arr[i]!= arr[len(arr)-1]:\n            if arr[i] < arr[len(arr)-1]:\n                arr[i], arr[len(arr)-1] = arr[len(arr)-1], arr[i]\n            else:\n                arr[i], arr[len(arr)-2] = arr[len(arr)-2], arr[i]\n            count += 1\n    print(count)\n            \n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] > arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        i += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if arr == []:\n        return 0\n    \n    rotations = 0\n    \n    # Rotate the first array element\n    # (elements are already sorted in this order)\n    arr[0], arr[-1] = arr[-1], arr[0]\n    \n    # Traverse through the array (in increasing order)\n    for i in range(1, len(arr)):\n        \n        # The new rotated element must be greater than the old one\n        if arr[i] > arr[i-1]:\n            \n            # Save the old element's index in the rotated array\n            rotations += arr[i-1] - arr[i]\n            \n            # Reverse the array since the element was removed\n            arr[i-1], arr[i] = arr[i], arr[i-1]\n    \n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    mid = n // 2\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    def number_rotations(arr):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(len(arr) - i):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n                    count += 1\n        return count\n    \n    # return the number of rotations\n    return number_rotations(arr)\n        "
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==1:\n        return True\n    if n<=0:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n :\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return False\n    elif n == 1 :\n        return True\n    elif n == 2 :\n        return True\n    elif n == 3 :\n        return True\n    elif n%2 == 0 :\n        return False\n    elif n%3 == 0 :\n        return False\n    else :\n        for i in range(2, int(math.sqrt(n))+1) :\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i=1\n    while i<=int(sqrt(n)):\n        if (n%i==0) :\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<=1:\n        return True\n    if n%2==0:\n        return is_perfect_square(n//2)\n    return n!=n%2\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = n * n\n    if n == 1 or n == n // 2 :\n        return True\n    if n == 0 :\n        return False\n    else :\n        if (n % 2 == 0) :\n            return is_perfect_square(n//2)\n        else :\n            return not is_perfect_square(3*n + 1)\n    \ndef is_prime(n) :\n    '''\n    Write a function that checks whether the given number is a prime number or not. https://www.geeksforgeeks.org/is-prime-number-in-cpp/\n    '''\n    for i in range(2, n // 2 + 1) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n ** 0.5)\n        for i in range(3, sqrt + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i=0\n    while i<n:\n        if n%i==0:\n            print(n)\n            return False\n        i+=1\n    print(n)\n    return True\n    \ndef count_frequency(n) :\n    '''\n    Count the frequency of the numbers in a given array.\n    '''\n    c=0\n    for i in range(0,len(n)):\n        if n[i]==n[i]:\n            c+=1\n    print(c)\n    return c\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = n**0.5\n    if n**0.5%sq == 0:\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==0:\n        return False\n    elif n==1 or n==2:\n        return True\n    else:\n        d=n//2\n        if n%2 == 0:\n            return d*d==n\n        elif n%2!= 0:\n            return d*d>n\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    check = 1\n    for i in arr:\n        check = check*i\n    return check%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    total=0\n    for number in arr:\n        total+=number\n    if total%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum=0\n    for i in arr:\n        sum+=i\n    if sum%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) % 2 == 0: \n        return False \n    else: \n        return True \n    \narr=[2,3,4,5,6,7]\nprint(is_product_even(arr))\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Initialize an empty list\n    even_list = []\n    # Loop through the list\n    for i in range(len(arr)):\n        # Append the element of the list to the even list\n        even_list.append(arr[i])\n    # Check if the even list is even\n    if len(even_list) % 2 == 0:\n        # If even, return True\n        return True\n    # If not even, return False\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    #Your code here\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Write your code here\n    \n    if len(arr)%2==0:\n        for i in range(len(arr)//2):\n            if arr[i]%2==0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in lists:\n        sum = 0\n        for j in i:\n            sum += j\n        if sum > max(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    result = []\n    for i in range(len(lists)):\n        result.append(0)\n        for j in range(len(lists[i])):\n            if lists[i][j]!= 0:\n                result[i] = max(result[i], lists[i][j])\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in lists:\n        list_len = len(i)\n        if list_len > len(max_list):\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # create a new empty list\n    max_list = []\n    # iterate through all the lists in the list\n    for x in lists:\n        # check the sum of all the elements in the list\n        sum_list = sum(x)\n        # add the element to the result if the value is greater than the sum of all elements\n        if sum_list > sum(max_list):\n            max_list = x\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = []\n    for i in range(len(lists)):\n        list = []\n        for j in range(len(lists[i])):\n            list.append(lists[i][j])\n        list.sort()\n        highest.append(list[-1])\n    return highest\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # take a list and make another list of the largest and sum each element.\n    # then add the two lists together, creating a new list with the new sum\n    max_sum = []\n    for list in lists:\n        max_sum.append(list[0] + list[1])\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = 0\n    lst = []\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if lists[i][j] > highest:\n                highest = lists[i][j]\n    lst.append(highest)\n    return lst\n    \n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_lst = []\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    lower_str = test_str.lower()\n    result = 0\n    for ch in lower_str:\n        if ch.isupper():\n            result += 1\n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_uppercase = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    for i in test_str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    import re\n    max_run = 0\n    for i in range(len(test_str)):\n        count = re.sub(r'[^a-zA-Z]', '', test_str[i]).upper()\n        if len(count) > max_run:\n            max_run = len(count)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #FILL IN YOUR CODE HERE\n    my_str = ''\n    for char in test_str:\n        if char.isupper():\n            my_str += char.lower()\n        elif char.islower():\n            my_str += char.upper()\n        else:\n            pass\n    \n    return my_str\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i].isupper() == test_str[i + 1].isupper():\n                if test_str[i] > test_str[i + 1]:\n                    max = max + 1\n                else:\n                    max = max + 1\n            else:\n                max = max + 1\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # convert string to lowercase\n    lower_str = test_str.lower()\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def run_uppercase(text):\n        '''\n        Function that runs the uppercase on the given string\n        '''\n        uppercased_text = text.upper()\n        uppercased_list = uppercased_text.split(' ')\n        return uppercased_list\n    \n    def max_uppercase_char(text):\n        '''\n        Function that runs the uppercase on the given string\n        '''\n        uppercased_list = run_uppercase(text)\n        max_char_upper = uppercased_list[-1]\n        max_char = max_char_upper[0]\n        print(f'The max run of uppercase is: {max_char}')\n    \n    max_uppercase_char(test_str)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upp_dict = dict()\n    max_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            if char in upp_dict:\n                upp_dict[char] += 1\n            else:\n                upp_dict[char] = 1\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    result = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if result < len(test_str[:i+1]):\n                result = len(test_str[:i+1])\n            else:\n                result = len(test_str[:i+1])\n            if max_run < result:\n                max_run = result\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #create a list of all the numbers in the list \n    #then sort them in descending order\n    new_nums=[]\n    for i in range(len(nums)):\n        new_nums.append(nums[i])\n    new_nums.sort()\n    #if the number is odd\n    if new_nums.count(new_nums[0]) % 2!= 0:\n        return new_nums[0]\n    #if not odd return the last number\n    else:\n        return new_nums[-1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_num = 0\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            odd_num = odd_num + 1\n        \n    if odd_num%2!= 0:\n        return nums[0]\n    else:\n        return nums[len(nums)//2]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n    if len(nums) % 2 == 0:\n        return nums[len(nums)//2]\n    else:\n        return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # NOTE: there should be a better way to write this function and\n    # not write it here.\n    # NOTE: I've left some notes on it for reference and this is a very good\n    # idea!\n    # NOTE: you'll need to use the list of numbers to calculate the\n    # first odd number in the list.\n    # NOTE: you'll need to use the built-in sorted function to determine\n    # which of the numbers is the first odd.\n    # NOTE: you'll have to use the math.sqrt function to find the square root\n    # of the first odd number.\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    even = 0\n    for x in nums:\n        if x % 2 == 0:\n            even += 1\n    if even == 0:\n        return False\n    else:\n        return even\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x%2==1:\n            print(x)\n            break\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = 0\n    for num in nums:\n        if num % 2 == 1:\n            odd += 1\n            \n    return od"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # check the tuples\n    if len(test_tup) > K:\n        return False\n    else:\n        return True\n    \ndef main():\n    # get the test cases\n    test_cases = int(input())\n    # get the tests\n    for i in range(test_cases):\n        # get the test tuple\n        test_tup = tuple(map(int, input().split()))\n        # check the K\n        K = int(input())\n        # create the new tuple\n        new_tup = test_tup[:K] + test_tup[K+1:]\n        # check\n        if check_K(new_tup, K):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        if test_tup[i] % K!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(len(test_tup) <= K):\n        return False\n    else:\n        return True\n    \ndef check_keys(test_tup, dict):\n    '''\n    Write a function to check if the keys of a dictionary are present in the given dictionary.\n    '''\n    for i in test_tup:\n        if(i in dict):\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= len(K):\n        return \"not k\"\n    else:\n        for i in range(len(test_tup)):\n            if K[i] in test_tup:\n                return test_tup[i]\n    return \"k\"\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= len(K):\n        return False\n    else:\n        for i in range(len(test_tup)):\n            for j in range(len(K)):\n                if K[j] in test_tup[i]:\n                    return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K_valid = True\n    if type(K) is not tuple:\n        return K_valid\n    elif len(K)!= 2:\n        return K_valid\n    elif type(K[0]) is not int or type(K[1]) is not int:\n        return K_valid\n    else:\n        if test_tup[0] < K[0] or test_tup[0] > K[1]:\n            return False\n        if test_tup[1] < K[0] or test_tup[1] > K[1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #check if the length of the tuples is valid\n    if len(test_tup) < K:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #test_tup = tuple(test_tup)\n    #Check if the tuple is in the data.\n    if test_tup in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # if len(test_tup) > K:\n    #     return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x in range(len(test_tup1)):\n        if test_tup1[x] < test_tup2[x]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup1[i]} is too big for {test_tup2[i]}\")\n        else:\n            print(f\"{test_tup2[i]} is too big for {test_tup1[i]}\")\n            return True\n    else:\n        print(f\"{test_tup1[i]} is too big for {test_tup2[i]}\")\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            smaller.append(test_tup1[i])\n    return lesser == smaller\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0, len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for tup in test_tup2:\n        if tup[1] < tup[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    i,j=0,0\n    for k in range(len(test_tup1)):\n        if test_tup2[i]<test_tup1[j]:\n            i=j=0\n        else:\n            i+=1\n            j+=1\n    return i>j\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[0] < test_tup1[0]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tuple_a = test_tup1\n    tuple_b = test_tup2\n    smaller = True\n    for a, b in zip(tuple_a, tuple_b):\n        if a < b:\n            smaller = False\n    return smaller\n"
    }
]