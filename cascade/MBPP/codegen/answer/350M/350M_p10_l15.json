[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize a dictionary with the keys as the tuples and the values as the lists of the same element\n    l1 = {tup: list(set(test_tup1) & set(tup)) for tup in test_tup1}\n    l2 = {tup: list(set(test_tup2) & set(tup)) for tup in test_tup2}\n    # initialize a list with the tuples as the keys\n    l3 = {tup: sorted(tup) for tup in test_tup1 + test_tup2}\n    # loop through each key and its value\n    for key in l1:\n        for val in l1[key]:\n            if val in l2[key]:\n                return (key, val)\n    for key in l2:\n        for val in l2[key]:\n            if val in l3[key]:\n                return (key, val)\n    return False\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # pass\n    res = []\n    for element in test_tup1:\n        if element in test_tup2:\n            res.append(element)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = []\n    b = []\n    c = []\n    for el in test_tup1:\n        if el in test_tup2:\n            a.append(el)\n    for el in test_tup2:\n        if el in test_tup1:\n            b.append(el)\n    for el in test_tup2:\n        if el in test_tup1:\n            c.append(el)\n    return a+b+c\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #pass\n    shared_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_list.append(item)\n    return shared_list\n    #pass"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    sh1 = 0\n    sh2 = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            sh1 += 1\n        else:\n            sh2 += 1\n    return (sh1, sh2)\n    \ndef find_the_positions(list1, list2):\n    '''\n    Write a function to find the positions of the shared elements in the given lists.\n    '''\n    pos1 = []\n    pos2 = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            pos1.append(i)\n    for i in range(len(list2)):\n        if list2[i] in pos1:\n            pos2.append(pos1.index(i))\n    return pos2\n    \ndef remove_element(list1, list2, index):\n    '''\n    Write a function to remove an element from the given lists using the given index.\n    '''\n    del list1[index]\n    del list2[index]\n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove elements from the given lists using the given index.\n    '''\n    for i in range(len(list1)):\n        list1.remove(list1[i])\n    for i in range(len(list2)):\n        list2.remove(list2[i])\n    return list1, list2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set from the given list\n    shared_set = set()\n    # Iterate through the given lists\n    for i in range(len(test_tup1)):\n        # Check each item\n        if test_tup1[i] in test_tup2:\n            # If it's a present, add it to the set\n            shared_set.add(test_tup1[i])\n    return shared_set\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        # First check if any are the same element\n        same_elements = [x for x in test_tup1 if x == test_tup2[x]]\n        if len(same_elements) > 0:\n            # print(f\"{test_tup1=}\")\n            # print(f\"{test_tup2=}\")\n            return (test_tup1, test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Write your code here\n    dict1 = {}\n    for i in test_tup1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in test_tup2:\n        if i in dict1:\n            dict1[i] -= 1\n        else:\n            dict1[i] = -1\n    return [i for i in dict1 if dict1[i] == 0]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n    \n    #check the type of each list\n    if isinstance(test_tup1[0], list) or isinstance(test_tup2[0], list):\n        test_list1 = test_tup1[0]\n        test_list2 = test_tup2[0]\n    else:\n        test_list1 = [test_tup1[0]]\n        test_list2 = [test_tup2[0]]\n    \n    #check the length of each list\n    if len(test_list1)!= len(test_list2):\n        return\n    \n    #check the type of each list\n    if isinstance(test_list1[0], list) or isinstance(test_list2[0], list):\n        for i in test_list1:\n            if isinstance(i, list):\n                for j in i:\n                    if isinstance(j, list):\n                        for k in j:\n                            if isinstance(k, list):\n                                for l in k:\n                                    if isinstance(l, list) and len(l) == len(test_list1):\n                                        for m in l:\n                                            if m in test_list2:\n                                                return m\n        return\n    else:\n        for i in test_list1:\n            if isinstance(i, list):\n                for j in i:\n                    if isinstance(j, list):\n                        for k in j:\n                            if isinstance(k, list) and len(k) == len(test_list2):\n                                for l in k:\n                                    if l in test_list1:\n                                        return l\n        return\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return False\n    if n%5 == 0:\n        return False\n    if n%7 == 0:\n        return False\n    if n%9 == 0:\n        return False\n    if n%11 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")\ndef is_prime(n):\n    '''\n    Write a python function to determine whether a number is prime.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            print(n,\"is not a prime number\")\n            return False\n    print(n,\"is a prime number\")\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, n+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    while n % 2 == 0:\n        n = int(n / 2)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # return not (n % 2 == 0)\n    return (n % 2 == 0 and n!= 1)\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_factor(n):\n    '''\n    Return a list of all prime factors of a number.\n    '''\n    if n == 2:\n        return [2]\n    if n == 1:\n        return []\n    if n < 2 or n % 2 == 0:\n        return []\n    fac = []\n    for i in range(3, n, 2):\n        if n % i == 0:\n            fac.append(i)\n    return fac\ndef is_prime_list(L):\n    '''\n    Return a list of all prime numbers in L.\n    '''\n    for i in range(len(L)):\n        if is_prime(L[i]):\n            L.append(L[i])\n    return L\ndef Lcm(L):\n    '''\n    Return the least common multiple of the elements of L.\n    '''\n    L.sort()\n    n = len(L)\n    L.insert(0, 0)\n    for i in range(n):\n        L[i] = L[i] // math.gcd(L[i], L[0])\n        for j in range(i + 1, n, 1):\n            if L[i] * L[j] > L[0]:\n                break\n        else:\n            return L[0]\n    return L[0]\ndef gcd(a, b):\n    '''\n    Return the Greatest Common Divisor of a and b.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef check_prime(n):\n    '''\n    Return True if a number n is prime, False otherwise.\n    '''\n    if n <= 1 or n % 2 == 0 or n < 2:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            return False\n    return True\ndef primes(n):\n    '''\n    Function to determine if a number is a prime.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif is_not_prime(n):\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is prime.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\ndef prim_add(a, b):\n    '''\n    return sum of prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef prim_find(a, b):\n    '''\n    Return index of prime numbers less than a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef prim_com(a, b):\n    '''\n    return the sum of the prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef prime_check(n):\n    '''\n    Return True if n is prime, else return False\n    '''\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n%i == 0:\n            return False\n    return True\ndef solve():\n    '''\n    solve the puzzle\n    '''\n    a = int(input(\"a = \"))\n    b = int(input(\"b = \"))\n    print(primes(a, b))\n    print(prim_add(a, b))\n    print(prim_find(a, b))\n    print(prim_com(a, b))\ndef solve2():\n    '''\n    solve the puzzle\n    '''\n    a = int(input(\"a = \"))\n    b = int(input(\"b = \"))\n    print(p_add(a, b))\n    print(p_find(a, b))\n    print(p_com(a, b))\ndef p_find(a, b):\n    '''\n    Return the index of prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef p_find2(a, b):\n    '''\n    Return the index of prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef p_com(a, b):\n    '''\n    Return the sum of the prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef p_com2(a, b):\n    '''\n    Return the sum of the prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef p_com_mul(a, b):\n    '''\n    Return the sum of the prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef p_com_mul2(a, b):\n    '''\n    Return the sum of the prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef p_com_mul3(a, b):\n    '''\n    Return the sum of the prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef p_com_mul4(a, b):\n    '''\n    Return the sum of the prime numbers less than or equal to a and b.\n    '''\n    if is_not_prime(a) or is_not_prime(b):\n        return 0\n    if a == b:\n        return 1\n    if b in [2, 3, 5, 7]:\n        return 4\n    if a < b:\n        return 0\n    k = 1\n    while k < (a + b):\n        if a % k == 0 and b % k == 0:\n            return k\n        k += 1\n    return (a + b)\ndef solve_par2():\n    '''\n    solve the puzzle\n    '''\n    a = int(input(\"a = \"))\n    b = int(input(\"b = \"))\n    print(p_add(a, b))\n    print(p_find("
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # This is an interview question\n    # 1. I made it a list, so this could be a bit more efficient\n    # 2. I didn't even give it a list in the time, but it's a way to work. It's a list\n    if not nums:\n        return []\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n<=0:\n        return\n    if len(nums)==0:\n        return\n    heap_queue = []\n    for i in range(0,n):\n        heapq.heappush(heap_queue,nums[i])\n    num = heapq.heappop(heap_queue)\n    for i in range(0,n):\n        if num<nums[i]:\n            heapq.heappush(heap_queue,nums[i])\n    return num\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    def partition(nums, start, end):\n        # Pick the smallest (or the same) value as\n        # the first value for the partition\n        smallest = start\n        for i in range(start, end):\n            if nums[i] < nums[smallest]:\n                smallest = i\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) == 0:\n        return []\n    sorted_nums = sorted(nums, reverse=True)\n    return hq.heapify(sorted_nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = sorted(nums,reverse=True)\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    res = []\n    while heap:\n        res.append(heq.heappop(heap))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q=[]\n    heapq.heapify(q)\n    for i in range(n):\n        heapq.heappush(q,-nums[i])\n    return hq.heappop(q)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,-num)\n    return [heapq.heappop(heap) for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,-num)\n    return [heapq.heappop(heap) for i in range(n)]\ndef heap_queue_random(nums,n):\n    '''\n    Write a function to find the n random integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,num)\n    return [heapq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums or n < 0:\n        return []\n    q = []\n    for i in range(n):\n        heapq.heappush(q,nums[i])\n    for i in range(n-1,0,-1):\n        heapq.heappush(q,-heapq.heappop(q)+heapq.heappop(q)*nums[i])\n    return q[::-1]\ndef print_heap(q):\n    for i in range(len(q)):\n        print(q[i], end ='')\n    print()\ndef smallest_tuple(nums, n):\n    '''\n    Write a function to find the smallest element of a given list of numbers, which is sorted in ascending order.\n    '''\n    if not nums or n < 0:\n        return []\n    q = []\n    for i in range(n):\n        heapq.heappush(q,num[i])\n    for i in range(n-1,0,-1):\n        heapq.heappush(q,-heapq.heappop(q)+heapq.heappop(q)*num[i])\n    return heapq.heappop(q)[::-1]\ndef print_smallest(q):\n    for i in range(len(q)):\n        print(q[i], end ='')\n    print()\ndef largest_tuple(nums, n):\n    '''\n    Write a function to find the largest element of a given list of numbers, which is sorted in descending order.\n    '''\n    if not nums or n < 0:\n        return []\n    q = []\n    for i in range(n):\n        heapq.heappush(q,num[i])\n    for i in range(n-1,0,-1):\n        heapq.heappush(q,-heapq.heappop(q)+heapq.heappop(q)*num[i])\n    return heapq.heappop(q)[::-1]\ndef print_largest(q):\n    for i in range(len(q)):\n        print(q[i], end ='')\n    print()\ndef bubble_sort(num):\n    '''\n    Write a function to sort an unsorted array using the bubble sort algorithm.\n    '''\n    if not num or len(num) < 1:\n        return num\n    for i in range(len(num)):\n        if num[i] < num[i-1]:\n            swap(num,i,i-1)\n    return num\ndef swap(num,i,j):\n    '''\n    Write a function to swap two elements of an unsorted array.\n    '''\n    num[i],num[j]=num[j],num[i]\ndef insertion_sort(num):\n    '''\n    Write a function to sort an unsorted array using the insertion sort algorithm.\n    '''\n    if not num or len(num) < 1:\n        return num\n    for i in range(1,len(num)):\n        val=num[i]\n        j=i-1\n        while j>=0 and num[j]>val:\n            num[j+1]=num[j]\n            j-=1\n        num[j+1]=val\n    return num\ndef insertion_sort_reverse(num):\n    '''\n    Write a function to sort an unsorted array using the insertion sort algorithm.\n    '''\n    if not num or len(num) < 1:\n        return num\n    for i in range(len(num)-1,0,-1):\n        j=i-1\n        while j>=0 and num[j]<num[j-1]:\n            num[j+1]=num[j]\n            j-=1\n        num[j+1]=num[j-1]\n    return num\ndef bubble_sort_reverse(num):\n    '''\n    Write a function to sort an unsorted array using the bubble sort algorithm.\n    '''\n    if not num or len(num) < 1:\n        return num\n    for i in range(len(num)-1,0,-1):\n        swap(num,i,0)\n    return num\ndef merge(num1, num2):\n    '''\n    Write a function to merge two sorted arrays, which is in sorted form.\n    '''\n    if not num1 or not num2:\n        return num1\n    if len(num1) > len(num2):\n        num1, num2=num2, num1\n    num1[0], num2[0] = num2[0], num1[0]\n    i,j=0,0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            num1[i+1]=num1[i]\n            i+=1\n        else:\n            num1[i+1]=num2[j]\n            j+=1\n    num1[i+1]=num2[j]\n    return num1\ndef merge_sort(num):\n    '''\n    Write a function to sort an unsorted array using the merge sort algorithm.\n    '''\n    if not num or len(num) < 1:\n        return num\n    if len(num)==1:\n        return num\n    mid=len(num)//2\n    left=num[:mid]\n    right=num[mid:]\n    left_sort=merge_sort(left)\n    right_sort=merge_sort(right)\n    return merge(left_sort,right_sort)\ndef shell_sort(num):\n    '''\n    Write a function to sort an unsorted array using the shell sort algorithm.\n    '''\n    if not num or len(num) < 1:\n        return num\n    n=len(num)\n    gap=n//3\n    while gap>=1:\n        for i in range(gap,n):\n            tmp=num[i]\n            j=i\n            while j>=gap and num[j-gap]>tmp:\n                num[j]=num[j-gap]\n                j-=gap\n            num[j]=tmp\n        gap*=3\n    return num\ndef shell_sort_reverse(num):\n    '''\n    Write a function to sort an unsorted array using the shell sort algorithm.\n    '''\n    if not num or len(num) < 1:\n        return num\n    gap=len(num)//3\n    while gap>=1:\n        for i in range(gap,len(num)):\n            tmp=num[i]\n            j=i\n            while j>=gap and num[j-gap]<tmp:\n                num[j]=num[j-gap]\n                j-=gap\n            num[j]=tmp\n        gap*=3\n    return num\ndef quick_sort(num,l,r):\n    '''\n    Write a function to sort an unsorted array using the partitioned-Quick sort algorithm.\n    '''\n    if l<r:\n        p=l\n        q=r\n        key=num[l]\n        while p<q:\n            while num[p]<=key:\n                p+=1\n            while num[q]>=key:\n                q-=1\n            if p<q:\n                num[p],num[q]=num[q],num[p]\n            p+=1\n            q-=1\n        num[l],num[p]=num[p],num[l]\n        p=l\n        while p<q:\n            num[q],num[p]=num[p],num[q]\n            p+=1\n            q-=1\n        return num\ndef partition(arr,l,r):\n    '''\n    Write a function to sort an array in increasing order.\n    '''\n    if l<r:\n        p=l\n        q=r\n        key=arr[l]\n        while p<q:\n            while arr[p]<=key:\n                p+=1\n            while arr[q]>=key:\n                q-=1\n            if p<q:\n                arr[p],arr[q]=arr[q],arr[p]\n            p+=1\n            q-=1\n        arr[l],arr[q]=arr[q],ar"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x//2)\ndef main():\n    print(is_Power_Of_Two(25))\n    print(is_Power_Of_Two(42))\n    print(is_Power_Of_Two(27))\n    print(is_Power_Of_Two(64))\n    print(is_Power_Of_Two(1))\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x % 10\n    if y == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    for i in range(1, x): \n        if x % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 : return True\n    if x%2 == 0 : return False\n    elif x % 10!= x : return True\n    else : \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #raise NotImplementedError()\n    if x>0:\n        if x%2==0:\n            return True\n        else:\n            return False\n    else:\n        if x%2!=0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    print(\"Power Of 2 ->\",end=\" \")\n    if (x == int(x)):\n        print(int(x))\n    else:\n        return (x > int(x))\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return True\n    if x % 2 == 0:\n        return False\n    if x == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x < 0:\n        return False\n    else:\n        while x >= 2:\n            if x%2 == 1:\n                return True\n            x = x//2\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    longest = 0\n    for character in text:\n        if len(character) >= 4:\n            longest = max(longest, len(character))\n    return longest\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in range(len(text)):\n        for j in range(len(text)-1):\n            if (text[i] == text[j] and text[i] == text[j+1] and text[i] not in 'aeiouAEIOU'):\n                text[i] = '*'\n    return text\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'[^\\w\\s]{4}', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    for x in range(len(text)):\n        x=x+1\n        if len(text[x:]) >= 4:\n            yield text[x:x+4]\n            \ndef char_to_space(text):\n    '''\n    Write a function to convert a list of characters to a single string of space\n    '''\n    \n    for x in range(len(text)):\n        yield text[x:x+4]\n    \ndef remove_space(text):\n    '''\n    Write a function to remove multiple spaces from a string\n    '''\n    \n    x=text\n    for y in range(len(text)):\n        y=y+1\n        if y==len(text):\n            break\n        elif y==len(text)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x=x+' '\n    return x\n        \ndef sub_str_to_str(text,substr):\n    '''\n    Write a function to convert a string of letters to a string of letters with a substring\n    '''\n    \n    x=text\n    for y in range(len(substr)):\n        y=y+1\n        if y==len(substr):\n            break\n        elif y==len(substr)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x+=substr[y]\n    return x\n    \ndef replace_to_list(text,substr,lst):\n    '''\n    Write a function to replace a substring with a list\n    '''\n    \n    x=text\n    for y in range(len(substr)):\n        y=y+1\n        if y==len(substr):\n            break\n        elif y==len(substr)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x=x+substr[y]\n            x=x+substr[len(text)-1]\n    lst.append(x)\n    return x\n    \ndef substring_length(text,substring):\n    '''\n    Write a function to return the length of a substring\n    '''\n    \n    x=text\n    for y in range(len(substring)):\n        y=y+1\n        if y==len(substring):\n            break\n        elif y==len(substring)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x+=substring[y]\n            x=x+substring[len(text)-1]\n    return len(x)\n    \ndef change_str_lst(text,lst):\n    '''\n    Write a function to change the list of letters into a string\n    '''\n    \n    x=text\n    for y in range(len(lst)):\n        y=y+1\n        if y==len(lst):\n            break\n        elif y==len(lst)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x+=lst[y]\n            x=x+lst[len(text)-1]\n    return x\n    \ndef digits_to_int(text,digits):\n    '''\n    Write a function to convert a string of digits to an integer\n    '''\n    \n    x=text\n    for y in range(len(digits)):\n        y=y+1\n        if y==len(digits):\n            break\n        elif y==len(digits)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x+=digits[y]\n            x=x+digits[len(text)-1]\n    return int(x)\n    \ndef int_to_digits(text,int):\n    '''\n    Write a function to convert an integer to a string of digits\n    '''\n    \n    x=text\n    for y in range(len(int)):\n        y=y+1\n        if y==len(int):\n            break\n        elif y==len(int)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x+=str(int%10)\n            x=x+str(int//10)\n            x=x+str(int//100)\n            x=x+str(int//1000)\n            x=x+str(int//1000000)\n    return x\n    \ndef change_int_to_str(text,int):\n    '''\n    Write a function to change an integer to a string\n    '''\n    \n    x=text\n    for y in range(len(int)):\n        y=y+1\n        if y==len(int):\n            break\n        elif y==len(int)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x+=str(int%10)\n            x=x+str(int//10)\n            x=x+str(int//100)\n            x=x+str(int//1000)\n            x=x+str(int//1000000)\n    return x\n    \ndef check_int_lst(text,int):\n    '''\n    Write a function to check if a string is an integer\n    '''\n    \n    x=text\n    for y in range(len(int)):\n        y=y+1\n        if y==len(int):\n            break\n        elif y==len(int)-1:\n            x=x[:len(x)-y]\n        else:\n            if int%10==int//10:\n                x=x[:y]\n                x+=str(int%10)\n                x=x+str(int//10)\n                x=x+str(int//100)\n                x=x+str(int//1000)\n                x=x+str(int//1000000)\n            elif int%10==int//1000:\n                x=x[:y]\n                x+=str(int%10)\n                x=x+str(int//10)\n                x=x+str(int//100)\n                x=x+str(int//1000000)\n            elif int%10==int//1000000:\n                x=x[:y]\n                x+=str(int%10)\n                x=x+str(int//10)\n                x=x+str(int//100)\n                x=x+str(int//1000)\n                x=x+str(int//1000000)\n            elif int%10==int//100:\n                x=x[:y]\n                x+=str(int%10)\n                x=x+str(int//10)\n                x=x+str(int//100)\n            else:\n                x=x[:y]\n                x+=str(int%10)\n                x=x+str(int//10)\n                x=x+str(int//1000000)\n    return x\n    \ndef change_int_to_digits(text,int):\n    '''\n    Write a function to change an integer to a string of digits\n    '''\n    \n    x=text\n    for y in range(len(int)):\n        y=y+1\n        if y==len(int):\n            break\n        elif y==len(int)-1:\n            x=x[:len(x)-y]\n        else:\n            x=x[:y]\n            x+=str(int%10)\n            x=x+str(int//10)\n            x=x+str(int//100)\n            x=x+str(int//1000)\n            x=x+str(int//1000000)\n    return x\n    \ndef remove_other_spaces(text):\n    '''\n    Write a function to remove the spaces from the string\n    '''\n    \n    x=text\n    for y in range(len(text)):\n        y=y+1\n        if y==len(text):\n            break\n        elif y==len(text)-1"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_diacritics(text):\n    '''\n    Write a function to return a list of all words whose lengths are at least 3 characters.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_consecutive_diacritics(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_nested_diacritics(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_consecutive_nested_diacritics(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_unique_words(text):\n    '''\n    Write a function to return a list of all words whose length does not exceed three characters.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_unique_words(text):\n    '''\n    Write a function to return a list of all words whose length does not exceed three characters.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_unique_letters(text):\n    '''\n    Write a function to return a list of all words whose length does not exceed three characters.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_longest_word(text):\n    '''\n    Write a function to return the word with the longest length.\n    '''\n    return re.findall(r'[^\\w]', text)[0]\ndef find_longest_word_without_longest_words(text):\n    '''\n    Write a function to return the word with the longest length.\n    '''\n    return re.findall(r'[^\\w]', text)[1]\ndef find_words_containing_alphanumerics(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics and not '-'.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_words_containing_nested_diacritics(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_words_containing_consecutive_nested_diacritics(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_words_containing_consecutive_diacritics(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_words_containing_unbalanced_diacritics(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_words_containing_nested_diacritics_in_order(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_greater_than(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics and not '-'.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_less_than(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_less_than_and_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics and not '-'.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_greater_than_or_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_less_than_or_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_less_than_and_equal_to_or_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_greater_than_or_equal_to_or_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_less_than_or_equal_to_or_equal_to_or_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_less_than_and_equal_to_or_equal_to_or_equal_to_or_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_greater_than_or_equal_to_or_equal_to_or_equal_to_or_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_all_words_whose_length_is_less_than_or_equal_to_or_equal_to_or_equal_to_or_equal_to(text):\n    '''\n    Write a function to return a list of all words whose lengths are consecutive diacritics.\n    '''\n    return re.findall(r'[^\\w]', text)\ndef find_longest_word_without_longest_words(text):\n    '''\n    Write a function to return the word with the longest length.\n    '''\n    return re.findall(r'[^\\w]', text)[0]\ndef find_longest_word_without_longest_words_without_words(text):\n    '''\n    Write a function to return the word with the longest length.\n    '''\n    return re.findall(r'[^\\w]', text)[0]\ndef find_longest_word_without_words(text):\n    '''\n    Write a function to return the word with the longest length.\n    '''\n    return re.findall(r'[^\\w]', text)[0"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    lst = []\n    for word in text.split(' '):\n        if len(word) >= 4 and re.search(r'\\b' + word + r'\\b', text)!= None:\n            lst.append(word)\n    return lst\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Create an empty list\n    list = []\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = text.split(\" \")\n    long_words = []\n    for word in words:\n        long_words.append(len(word))\n    # print(long_words)\n    char_dict = {}\n    for long_word in long_words:\n        char_dict[long_word] = len(long_word)\n    return char_dict\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    print(\"find_char_long() running\")\n    lst = []\n    word_list = text.split(\" \")\n    for word in word_list:\n        if len(word) >= 4:\n            lst.append(word)\n    print(\"found: \" + str(len(lst)))\n    return lst\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    text = text.lower()\n    print(\"find_char_short() running\")\n    lst = []\n    word_list = text.split(\" \")\n    for word in word_list:\n        if len(word) <= 3:\n            lst.append(word)\n    print(\"found: \" + str(len(lst)))\n    return lst\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    def is_long(word, char_list):\n        for char in char_list:\n            if word.count(char) > 0:\n                return True\n        return False\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for item in nums:\n        squares.append(item**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    squares = []\n    for number in nums:\n        square = number**2\n        squares.append(square)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square = []\n    for num in nums:\n        square.append(num*num)\n    return square\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n*n)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    output = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # your code here\n    for i in range(len(nums)):\n        if nums[i]**2 == nums[i]:\n            print(nums[i],end=\", \")\n    print()\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i]**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # TODO\n    # base case\n    if len(nums) == 0:\n        return []\n    # recursive case\n    else:\n        return [num * num for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    '''\n    Start with the length of the string, as defined by the input argument.\n    The find_rotations function will return the minimum number of rotations required to get the same string. \n    '''\n    min_rot = 0\n    \n    # loop through string and find the minimum number of rotations required\n    for i in range(len(str)):\n        # keep track of the current rotation\n        rot = 0\n        # iterate through each letter to find the rotation\n        for j in range(len(str)):\n            # if the current letter is not the same as the one in the current position\n            if str[j]!= str[i]:\n                rot += 1\n            # if the current letter is the same as the one in the current position,\n            # we can count the rotation as 1, so decrement the rotations\n            else:\n                rot -= 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_list = list(str)\n    n = len(str_list)\n    if n<2:\n        return None\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(lst, n):\n        # for each index in lst, take the last n indices\n        # then add the first n indices\n        # finally return the result\n        i = len(lst) - n\n        return lst[i:] + lst[:i]\n    # Initialize a list to store the rotated strings\n    rotations = []\n    # Loop over all letters in the string\n    for letter in str:\n        # increment the count by 1 for each letter\n        rotations.append(letter)\n    # Initialize a list of rotated strings\n    temp_strings = []\n    # loop over all letters in the string\n    for letter in str:\n        # If the current letter is not the same as the previous letter, add it to the temp_strings list\n        # Else add the letter to the temp_strings list\n        if letter!= temp_strings[-1]:\n            temp_strings.append(letter)\n        else:\n            # update temp_strings list\n            temp_strings.append(letter)\n    # loop over the rotated strings\n    for item in temp_strings:\n        # If the rotations count is greater than the max number of rotations, return 0\n        if len(rotations) > len(temp_strings):\n            return 0\n        # if the rotations count is less than the max number of rotations, rotate the remaining letters\n        # and add them to the temp_strings list\n        elif len(rotations) <= len(temp_strings):\n            rotations.append(item)\n            temp_strings.pop()\n    # return the list of rotated strings\n    return len(rotations)\n        \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    char_list = list(str)\n    Rotations = 0\n    for i in range(len(char_list)-1, -1, -1):\n        if char_list[i] == char_list[i-1]:\n            Rotations = Rotations+1\n            char_list.pop(i)\n            char_list.pop(i-1)\n    return Rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Function to find rotations\n    def get_rotations(word):\n        #Setting an initial count to zero\n        count=0\n        #Loop through each letter in the word\n        for i in range(len(word)):\n            #If the letter is the same as the first letter, it is no rotations\n            if word[i]==word[i-1]:\n                count=count+1\n        #Return the count\n        return count\n    #Return the minimum number of rotations\n    return min(get_rotations(word))\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    ans = 0\n    \n    for i in range(len(str)-1):\n        ans = ans + abs(i-len(str))\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotations(a,b):\n        a1=0\n        b1=0\n        temp=''\n        for i in a:\n            for j in b:\n                temp=temp+i\n                a1+=1\n        for i in b:\n            for j in a:\n                temp=temp+i\n                b1+=1\n        return(a1,b1,temp)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    counter = 0\n    for i in range(len(str)-1):\n        if (str[i:i+2]!= str[i+1:i+2]+str[i]):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #  Set the number of rotations to be calculated \n    rotations = 0\n    # Traverse through string \n    for i in range(0, len(str) - 1): \n        # Check if the string is a palindrome \n        if str[i] == str[i + 1]: \n            # Add one to the number of rotations \n            rotations += 1\n    # Return the minimum number of rotations \n    return rotations \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    i = 0\n    rotations = 0\n    for j in range(0, len(str)):\n        rotations += 1\n        if str[i]!= str[j]:\n            i += 1\n        else:\n            i += 1\n    print(\"rotations: \", rotations)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch_count = {}\n    for ch in s:\n        if ch not in ch_count:\n            ch_count[ch]=1\n        else:\n            ch_count[ch]+=1\n    print(' '.join(s[:ch_count[s[0]]-1]).lstrip(),s[ch_count[s[0]]-1:].lstrip())\n    print(' '.join(s[ch_count[s[0]]-1:]).lstrip())\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0 or len(s)==1:\n        return s\n    else:\n        return s[0:1]+s[-1::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        return s[0:1].replace(ch,\"\") + remove_Occ(s,ch) + s[len(s)-1:len(s)]\n    except:\n        return remove_Occ(s,ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = str(s)\n    l = len(s)\n    i = 0\n    j = 0\n    if ch in s[i]:\n        i = i - 1\n    if ch in s[l - 1:l]:\n        l = l - 1\n    s = s[i:l]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code goes here\n    try: \n        ch = str(ch)\n    except: \n        print(\"Enter a valid character\")\n        return \n    if ch in s:\n        s = s.replace(ch,'')\n    else:\n        print(\"Character not found in string\")\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = 0\n    l = list(s)\n    i = 0\n    while (i < len(l)):\n        if(l[i] == ch):\n            occ += 1\n        i += 1\n    if(occ == 1):\n        l = list(s)\n        l.pop(0)\n        l.pop(len(l)-1)\n        return \"\".join(l)\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    print(\"The string is:\", s)\n    i=0\n    j=len(s)\n    while i < j:\n        if s[i] == ch:\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    s=s[:j]+s[j+1:]\n    print(\"The updated string is:\", s)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\") \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the string is empty\n    if not s:\n        return \"Empty String\"\n    # If the string contains only one character,\n    # return the character\n    if len(s) == 1:\n        return s\n    # If the string contains multiple characters,\n    # split it in a list and sort them\n    # This is not a logical arrangement, but\n    # equivalent to split() method\n    # by returning a list\n    return \" \".join([s[0],s[-1]]).lower()\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occurence = s.find(ch)\n    if occurence!= -1:\n        s = s[:occurence] + s[occurence+1:]\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    columns = []\n    for i in range(len(M)):\n        columns.append(M[i][0])\n    sums = []\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            sums.append(M[i][j] + sum(M[i]))\n    return sorted(columns, reverse=True, key=lambda x: sums.count(x))\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = 0\n    for i in range(len(M)):\n        S += M[i][0]\n    S = sorted(M, key = lambda x : x[0])\n    for i in range(len(M)):\n        for j in range(len(M)):\n            if S[i][0] == M[j][0]:\n                S[j][0] += M[i][0]\n    return S\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    s = sum(M.values())\n    i = 0\n    j = 0\n    \n    for key, value in M.items():\n        i = i + value\n        if i > s:\n            j = j + 1\n            i = s\n    \n    for key, value in M.items():\n        M[key] = value\n        \n    M = sorted(M.items(), key=lambda x: x[1], reverse=True)\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    sum_rows = sum(M)\n    M = sorted(M, key = lambda row: sum(row))\n    print(sum_rows, M)\n    if sum_rows!= sum(M):\n        raise Exception(\"The matrix is not sorted!\")\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_rows = []\n    # For each row\n    for row in range(len(M)):\n        sum_rows.append(sum(M[row]))\n    # Sort in ascending order\n    sorted_matrix = sorted(sum_rows)\n    # Turn it into a list\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = sorted(M,key=lambda x: sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = M.tolist()\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            if sum(M[row]) == sum(M[row][col:]):\n                M[row].append(0)\n                M[row][col] = -1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #  define the function to sort an array\n    def sort(elements):\n        '''\n        Write a function to sort an array in ascending order according to the sum of its rows.\n        '''\n        #  if matrix is not empty\n        if len(elements)>0:\n            #  use a for loop to sort each row\n            for row in range(len(elements)):\n                #  for each row\n                for col in range(row+1,len(elements)):\n                    #  create a variable to find the sum of each row\n                    sum = 0\n                    #  assign to the variable the value of the row\n                    sum = elements[row] + elements[col]\n                    #  if the sum of the row is less than the sum of the column then the row is sorted\n                    if sum < elements[col]:\n                        #  replace the row of the element with the sorted value\n                        elements[row] = elements[col]\n                        #  update the element of the row\n                        elements[col] = sum\n    #  return the sorted matrix\n    return sort(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # STEP 1: Start with the first row\n    # STEP 2: Sort the remaining rows, and then take the rest of the rows\n    # STEP 3: Assign the elements of the remaining rows to the elements of the first row\n    # STEP 4: Iterate over the remaining rows, keeping track of the cumulative sum of rows\n    # STEP 5: Return the new sorted matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        M[i].sort()\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)*l\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5*(b**2 - 4*l*h + b*h**2)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l == h : \n        return (l*b)/2\n    else : \n        v1 = find_Volume(l,b,h/2)\n        v2 = find_Volume(l*b,h/2,2*h)\n        v = v1+v2\n        return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # if volume is greater than the height\n    if l > h :\n        # if volume is less than the height\n        if l < h :\n            # calculate the volume\n            Volume = l*b*h/3\n            # return the volume\n            return Volume\n        else :\n            # return the error\n            return \"The entered height is not valid.\"\n    \n    # if volume is less than the height\n    elif l < h :\n        # if volume is less than the height\n        if l > h :\n            # calculate the volume\n            Volume = b*l*h/3\n            # return the volume\n            return Volume\n        else :\n            # return the error\n            return \"The entered height is not valid.\"\n    \n    # if volume is greater than the height\n    else : \n        # if volume is less than the height\n        if l > h :\n            # calculate the volume\n            Volume = h*b*l/3\n            # return the volume\n            return Volume\n        else :\n            # return the error\n            return \"The entered height is not valid.\"\n    \n    \nprint(find_Volume(3,2,5))\nprint(find_Volume(5,5,5))\nprint(find_Volume(1,1,1))"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if b>l: \n        print(\"Error : The base of the prism has to be greater than the base of the height\")\n    else:\n        if h<l: \n            print(\"Error : The height of the prism has to be greater than the height of the base\")\n        else: \n            Area = (l*b)*(h/2)**2\n            print(\"The volume of the triangle is:\",Area)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    i = 0\n    v = 0\n    while i < h : \n        v = v + (b - l)*(i+1)\n        i += 1\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/3)*(l*h**3)*np.pi\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v=0\n    for i in range(b,h,1) :\n        v+=math.pow(l,2)*math.pow(math.cos(i),2)\n    v=math.sqrt(v)\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = h * b * l\n    print(\"The volume of a triangular prism is\",volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 4/3 * np.pi * (h**3) * (l**3)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not re.search('[^a-zA-Z0-9_ ]', text):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(\"([a-z])([A-Z])\")\n    return pattern.search(text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # detect all cases where the input string contains sequences of lowercase letters\n    if re.search('[a-z0-9]', text):\n        return True\n    elif re.search('[A-Z]', text):\n        return True\n    elif re.search('[0-9]', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # create a regular expression\n    regex = re.compile(\"[^a-zA-Z0-9_]\")\n    # Search for the string\n    return regex.search(text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'^[a-z]{2}[A-Z]{2}[0-9]{2}[a-z]{2}[0-9]{2}$' # ensures that we don't accidentally add commas\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # lowercase_text = re.findall(r'\\w+', text)\n    # return text in lowercase_text\n    if '_' in text:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text)!= len(set(text.lower())):\n        return False\n    if not text.isalnum():\n        return False\n    #return text.isalnum()\n    for c in text:\n        if c.isalpha():\n            return False\n        elif c.isnumeric():\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in text.lower():\n        if i in ['_', '-', '.','']:\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print(text)\n    print(text.lower())\n    if any(char.islower() for char in text):\n        print('yes')\n    else:\n        print('no')\n    return \"yes\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # TODO: complete the function so that it returns the perimeter of the square\n    # HINT: you may want to use the fact that the area of a square is the square of its own width and height.\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a < 0:\n        return 'Invalid side length'\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return(sum(a))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if len(a)!= 4:\n        raise Exception('The length of a must be 4')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_perimeter_list = []\n    if type(a)!= int or a < 0:\n        raise ValueError('The value of a must be a non-negative integer')\n    else:\n        for i in range(1,a+1):\n            square_perimeter_list.append(i*i)\n    return sum(square_perimeter_list)"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    a = int(a)\n    return a*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n    \ndef cube_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a cube given its side length as input.\n    '''\n    perimeter = 6 * a\n    return perimeter\n    \ndef rectangle_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a rectangle given its height and width as input.\n    '''\n    perimeter = a * 3\n    return perimeter\n    \ndef triangle_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a triangle given its base as input and height as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n    \ndef rectangle_side(a):\n    '''\n    Write a function that returns the side of the rectangle given its width and height as input.\n    '''\n    side = a * 2\n    return side\n    \ndef triangle_side(a):\n    '''\n    Write a function that returns the side of the triangle given its base and height as input.\n    '''\n    side = a * 3\n    return side\n    "
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return pow(a, 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*4)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for char in string:\n        if char in list:\n            continue\n        else:\n            list.append(char)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i in string:\n            list.append(i)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    for i in range(len(string)): \n        if string[i] in string: \n            lst.append(string[i])\n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #Time O(N)\n    #Space O(1)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(0, len(string)):\n        if string[i] in string[i:]:\n            continue\n        else:\n            list1.append(string[i])\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.strip()\n    string = string.replace(\" \", \"\")\n    list_of_chars = string.split()\n    return list_of_chars\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [item for item in string if item not in string.replace(' ','')]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string is None or len(string) == 0:\n        return string\n    \n    string_list = list(string)\n    for i in range(len(string)):\n        if string[i] not in string_list:\n            string_list.remove(string[i])\n            break\n        \n    return \"\".join(string_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string[:len(string)]]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        if (string[i] in string[:i]):\n            list.append(string[i])\n    return list\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Testing: duplicate element check\")\n    check = duplicate_element(arraynums)\n    assert check, \"check failed\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # Code here\n    array = arraynums\n    dupes = []\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if array[i] == array[j]:\n                dupes.append(array[i])\n    if len(dupes) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(duplicate(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    count = 0\n    # check each element in array\n    for num in arraynums:\n        # check if the element is duplicate\n        if num in arraynums:\n            count += 1\n        # if we get the count > 1, we are not allowed to duplicate\n        if count > 1:\n            break\n    print(count)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    array.sort()\n    print(array)\n    \n    for i in array:\n        for j in array:\n            print(i+j,end=' ')\n        print()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    found = []\n    \n    for i in range(len(arraynums) - 1):\n        if arraynums[i] == arraynums[i + 1]:\n            found.append(True)\n        else:\n            found.append(False)\n    \n    return any(found)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = set(arraynums)\n    duplicate = False\n    if len(arraynums) == len(set(arraynums)):\n        duplicate = True\n    return duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    a = [x for x in arraynums if x in arraynums]\n    b = [x for x in arraynums if x not in arraynums]\n    \n    if len(b)!= len(a):\n        return False\n    \n    for x in a:\n        if x in b:\n            return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = []\n    for num in arraynums:\n        if num in duplicate:\n            return True\n        else:\n            duplicate.append(num)\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3==0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 100 == 0 and x % 400 == 0:\n        print(x, 'is a woodball')\n    else:\n        print(x, 'is not a woodball')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 2: \n        return False\n    elif 3 <= x <= 5: \n        return True \n    elif 6 <= x <= 8: \n        return True\n    elif 9 <= x <= 12: \n        return True\n    elif x > 12: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Corner cases\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x == 2:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 0 and x <= 100 \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x < 0):\n        return False\n    elif (x < 2):\n        return True\n    elif (x < 5):\n        return False\n    elif (x < 10):\n        return True\n    elif (x < 20):\n        return False\n    elif (x < 100):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 7:\n        return False\n    elif x >= 7 and x <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x<5):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    if num < 2:\n        return 0\n    elif num < 3:\n        return num - 1\n    else:\n        return rev(num - 2) + 1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    rev = num - (num * 2)\n    rev = rev if rev >= 0 else -1 * (rev + 1)\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = int(str(num)[::-1])\n    if num == rev:\n        return num\n    else:\n        return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    for i in range(num):\n        rev_num += (num-i)\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return rev(num // 2) + num % 2 == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # solution = num + 1\n    # rev = 0\n    # if num == 0:\n    #     print(True)\n    # else:\n    #     print(False)\n    #     for n in str(num):\n    #         rev = int(n) * 2\n    #         if rev == num:\n    #             print(True)\n    #         else:\n    #             print(False)\n    #     print(rev)\n    # return rev\n    if num == 0:\n        print(True)\n    else:\n        print(False)\n        rev = 0\n        while num > 0:\n            num = num // 2\n            rev = int(num) * 2\n            if rev == num:\n                print(True)\n            else:\n                print(False)\n        print(rev)\n    \n    # return num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return False\n    else:\n        if num % 2 == 0:\n            return True\n        elif num % 2!= 0:\n            return False\n        else:\n            return rev(num // 2)\n    \ndef rev_until(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_reverse = 0\n    if num < 2:\n        return False\n    elif num % 2 == 0:\n        num_reverse = 2\n    elif num % 2!= 0:\n        num_reverse = num + 1\n    else:\n        num_reverse = num\n    \n    if num_reverse < num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    for i in range(len(num)-1, -1, -1):\n        rev_num += int(num[i])\n    if num == str(rev_num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = num + rev_num\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return \"0\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # initialize output array\n    output = []\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for number in arr : \n        if number > max_num : \n            max_num = number \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = 0\n    for i in arr :\n        n = n*10 + i\n    if n > sum(arr) : \n        return n \n    else : \n        return None\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Loop through the list of digits\n    # If there are more than 1 element, then find the largest one\n    # If the number is the same as the biggest, then add it to the result\n    # If the number is not the same as the biggest, then return -1\n    if len(arr) == 1 :\n        return arr[0]\n    elif len(arr) == 2 :\n        return max(arr)\n    else :\n        max_val = -1\n        # Find the number that is max\n        # Loop through all the numbers \n        # If the number is greater than max, then add it to the result\n        # If the number is less than max, then return -1\n        for number in arr :\n            if number > max_val :\n                max_val = number\n            elif number < max_val :\n                return -1\n        return max_val\n    \ndef sum_Numbers(arr) :\n    '''\n    Write a python function to get the sum of all the numbers in an array.\n    '''\n    # Loop through the array\n    # If the number is greater than the sum, add it to the result\n    # If the number is less than the sum, add it to the result\n    # If the number is the same as the sum, return the sum of the numbers\n    # If it is not the same as the sum, return -1\n    sum_val = 0\n    for number in arr :\n        if number > sum_val :\n            sum_val = number\n        elif number < sum_val :\n            return -1\n    return sum_val\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # store the first number to find the largest sum\n    first_num = arr[0]\n    # compute the sum of the elements in the array\n    sum = 0\n    for i in range(1, len(arr)) :\n        sum += arr[i]\n    # store the largest sum\n    Largest_Sum = first_num\n    # while the number is less than the sum\n    while sum < Largest_Sum :\n        Largest_Sum += arr[i]\n    return Largest_Sum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Function to return the maximum number\n    # that can be formed with the given list\n    def find_Max(arr):\n        # using recursion to calculate the max number\n        if len(arr) <= 1:\n            return arr[0]\n        else:\n            return max(find_Max(arr[0:len(arr)]), find_Max(arr[len(arr):len(arr) + len(arr) - 1]))\n    return find_Max(arr)\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for i in range(len(arr)) :\n        for j in range(i, len(arr)) :\n            for k in range(j, len(arr)) :\n                if arr[i] + arr[j] + arr[k] == 0 :\n                    return arr[i] + arr[j] + arr[k]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr :\n        for j in range(len(str(i))) :\n            if i == str(i)[j] :\n                if j!= len(str(i)) - 1 :\n                    if (str(i)[j + 1] == '0') :\n                        continue\n                    if (str(i)[j + 1] == '1'):\n                        continue\n                else :\n                    continue\n                if i > max :\n                    max = i\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = 0\n    for i in range(len(arr)) : \n        if arr[i] == arr[i].zfill(8) : \n            if arr[i] > Max : \n                Max = arr[i] \n    return Max \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # define max value\n    max_num = arr[0]\n    for item in arr:\n        if item > max_num:\n            max_num = item\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > y):\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y > 0:\n        return 1\n    elif x > 0 and y < 0:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #take input from user\n    num1=int(input('Enter number 1 :'))\n    num2=int(input('Enter number 2 :'))\n    #create list for swapped numbers\n    num1_list=[num1,num2]\n    #create a list to store swap\n    swap_list=[]\n    #check whether input contains 0 or not\n    if not num1:\n        print('Your number does not contain 0')\n    else:\n        #create a list to store sign\n        sign_list=[]\n        #check whether input contains negative or positive sign\n        if num1>0:\n            #add 1 to swapped number\n            num1=num1+1\n            #add 0 to swapped number\n            num2=num2-1\n            #create list of swapped numbers\n            swap_list.append(num1)\n            swap_list.append(num2)\n        else:\n            #add 1 to swapped number\n            num1=num1-1\n            #add 0 to swapped number\n            num2=num2+1\n            #create list of swapped numbers\n            swap_list.append(num1)\n            swap_list.append(num2)\n    #check whether input contains negative sign\n    if num2<0:\n        #add 1 to swapped number\n        num2=num2+1\n        #add 0 to swapped number\n        num1=num1-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    if num1>0 and num2>0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are negative add 1 to swapped number\n    elif num1<0 and num2<0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are negative add 1 to swapped number\n    elif num1<0 and num2>0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1>0 and num2<0:\n        #add 1 to swapped number\n        num1=num1-1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1>0 and num2>0:\n        #add 1 to swapped number\n        num1=num1-1\n        #add 0 to swapped number\n        num2=num2-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1>0 and num2<0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1<0 and num2>0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1<0 and num2<0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are negative add 1 to swapped number\n    elif num1<0 and num2>0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are negative add 1 to swapped number\n    elif num1<0 and num2<0:\n        #add 1 to swapped number\n        num1=num1-1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are negative add 1 to swapped number\n    elif num1<0 and num2<0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1<0 and num2>0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1<0 and num2<0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1<0 and num2>0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1<0 and num2<0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1<0 and num2<0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swapped number\n        num2=num2-1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are positive add 1 to swapped number\n    elif num1<0 and num2<0:\n        #add 1 to swapped number\n        num1=num1-1\n        #add 0 to swapped number\n        num2=num2+1\n        #create list of swapped numbers\n        swap_list.append(num1)\n        swap_list.append(num2)\n    #if all the signs are negative add 1 to swapped number\n    elif num1<0 and num2>0:\n        #add 1 to swapped number\n        num1=num1+1\n        #add 0 to swappe"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #Dont change anything in here.\n    return x < y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0) or (y<0): \n        return True\n    elif (x>=0) and (y>=0):\n        return False\n    else: \n        return opposite_Signs(x,y-1) or opposite_Signs(x+1,y) \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\ndef main():\n    '''\n    This program is to check whether the given two integers have opposite sign or not.\n    '''\n    print(\"This program is to check whether the given two integers have opposite sign or not.\")\n    print(\"\\n\")\n    print(\"1.For Positive numbers\")\n    print(\"2.For Negative numbers\")\n    print(\"3.For all numbers\")\n    print(\"Enter your choice: \")\n    choice = int(input())\n    if choice == 1:\n        print(\"Enter a positive number: \")\n        a = int(input())\n        print(\"Enter a negative number: \")\n        b = int(input())\n        if opposite_Signs(a,b):\n            print(\"Positive numbers are : \",a,\" and negative numbers are :\",b)\n        else:\n            print(\"Neither of the numbers are positive or negative numbers.\")\n    elif choice == 2:\n        print(\"Enter a positive number: \")\n        a = int(input())\n        print(\"Enter a negative number: \")\n        b = int(input())\n        if opposite_Signs(a,b):\n            print(\"Positive numbers are :\",a,\" and negative numbers are :\",b)\n        else:\n            print(\"Neither of the numbers are positive or negative numbers.\")\n    elif choice == 3:\n        print(\"Enter the number to check: \")\n        n = int(input())\n        if opposite_Signs(n):\n            print(\"This is not a positive number.\")\n        else:\n            print(\"This is a positive number.\")\n    else:\n        print(\"Invalid choice. Please try again.\")\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return(x<0 and y<0 or x>0 and y>0)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>y):\n        return False\n    if (y<x):\n        return False\n    if (x>y):\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0: \n        return -1\n    elif x < 0 and y > 0: \n        return 1\n    elif x < 0 and y < 0: \n        return 0\n    else: \n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > y):\n        return True\n    elif(x < y):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Your code here\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 8\n    elif n == 5: \n        return 13\n    elif n == 6: \n        return 21\n    elif n == 7: \n        return 34\n    elif n == 8: \n        return 51\n    elif n == 9: \n        return 81\n    elif n == 10: \n        return 106\n    elif n == 11: \n        return 121\n    elif n == 12: \n        return 144\n    elif n == 13: \n        return 221\n    elif n == 14: \n        return 256\n    elif n == 15: \n        return 291\n    elif n == 16: \n        return 324\n    elif n == 17: \n        return 441\n    elif n == 18: \n        return 551\n    elif n == 19: \n        return 675\n    elif n == 20: \n        return 713\n    elif n == 21: \n        return 821\n    elif n == 22: \n        return 941\n    elif n == 23: \n        return 1051\n    elif n == 24: \n        return 1175\n    elif n == 25: \n        return 1221\n    elif n == 26: \n        return 1335\n    elif n == 27: \n        return 1441\n    elif n == 28: \n        return 1555\n    elif n == 29: \n        return 1671\n    elif n == 30: \n        return 1785\n    elif n == 31: \n        return 1871\n    elif n == 32: \n        return 1914\n    elif n == 33: \n        return 2261\n    elif n == 34: \n        return 2253\n    elif n == 35: \n        return 2411\n    elif n == 36: \n        return 2641\n    elif n == 37: \n        return 2893\n    elif n == 38: \n        return 2951\n    elif n == 39: \n        return 3075\n    elif n == 40: \n        return 3201\n    elif n == 41: \n        return 3455\n    elif n == 42: \n        return 3631\n    elif n == 43: \n        return 3771\n    elif n == 44: \n        return 3891\n    elif n == 45: \n        return 4205\n    elif n == 46: \n        return 4323\n    elif n == 47: \n        return 4407\n    elif n == 48: \n        return 4425\n    elif n == 49: \n        return 4537\n    elif n == 50: \n        return 4581\n    elif n == 51: \n        return 4675\n    elif n == 52: \n        return 4833\n    elif n == 53: \n        return 4943\n    elif n == 54: \n        return 5037\n    elif n == 55: \n        return 5381\n    elif n == 56: \n        return 5475\n    elif n == 57: \n        return 5777\n    elif n == 58: \n        return 5825\n    elif n == 59: \n        return 5941\n    elif n == 60: \n        return 5999\n    elif n == 61: \n        return 6025\n    elif n == 62: \n        return 6041\n    elif n == 63: \n        return 6453\n    elif n == 64: \n        return 6607\n    elif n == 65: \n        return 6763\n    elif n == 66: \n        return 6839\n    elif n == 67: \n        return 6937\n    elif n == 68: \n        return 7025\n    elif n == 69: \n        return 7041\n    elif n == 70: \n        return 7453\n    elif n == 71: \n        return 7607\n    elif n == 72: \n        return 7763\n    elif n == 73: \n        return 7809\n    elif n == 74: \n        return 7985\n    elif n == 75: \n        return 8041\n    elif n == 76: \n        return 8453\n    elif n == 77: \n        return 8607\n    elif n == 78: \n        return 8763\n    elif n == 79: \n        return 8809\n    elif n == 80: \n        return 8925\n    elif n == 81: \n        return 9035\n    elif n == 82: \n        return 9041\n    elif n == 83: \n        return 9453\n    elif n == 84: \n        return 9607\n    elif n == 85: \n        return 9763\n    elif n == 86: \n        return 9809\n    elif n == 87: \n        return 9985\n    elif n == 88: \n        return 10133\n    elif n == 89: \n        return 10335\n    elif n == 90: \n        return 10423\n    elif n == 91: \n        return 10477\n    elif n == 92: \n        return 10871\n    elif n == 93: \n        return 10925\n    elif n == 94: \n        return 10941\n    elif n == 95: \n        return 11035\n    elif n == 96: \n        return 11059\n    elif n == 97: \n        return 11091\n    elif n == 98: \n        return 11155\n    elif n == 99: \n        return 11173\n    elif n == 100: \n        return 11307\n    elif n == 101: \n        return 11311\n    elif n == 102: \n        return 11345\n    elif n == 103: \n        return 11447\n    elif n == 104: \n        return 11533\n    elif n == 105: \n        return 11557\n    elif n == 106: \n        return 11573\n    elif n == 107: \n        return 11777\n    elif n == 108: \n        return 11825\n    elif n == 109: \n        return 11841\n    elif n == 110: \n        return 11935\n    elif n == 111: \n        return 11961\n    elif n == 112: \n        return 12003\n    elif n == 113: \n        return 12041\n    elif n == 114: \n        return 12425\n    elif n == 115: \n        return 12431\n    elif n == 116: \n        return 12535\n    elif n == 117: \n        return 12561\n    elif n == 118: \n        return 12771\n    elif n == 119: \n        return 12765\n    elif n == 120: \n        return 12811\n    elif n == 121: \n        return 12845\n    elif n == 122: \n        return 12941\n    elif n == 123: \n        return 12967\n    elif n == 124: \n        return 13025\n    elif n == 125: \n        return 13041\n    elif n == 126: \n        return 13355\n    elif n == 127: \n        return 13411\n    elif n == 128: \n        return 13445\n    elif n == 129: \n        return 13671\n    elif n == 130: \n        return 13725\n    elif n == 131: \n        return 13841\n    elif n == 132: \n        return 13867\n    elif n == 133: \n        return 13925\n    elif n == 134: \n        return 13941\n    elif n == 135: \n        return 14001\n    elif n == 136: \n        return 14043\n    elif n == 137: \n        return 14435\n    elif n == 138: \n        return 14511\n    elif n == 139: \n        return 14545\n    elif n == 140: \n        return 14611\n    elif n == 141: \n        return 14645\n    elif n == 142: \n        return 14711\n    elif n == 143: \n        return 14745\n    elif n == 144: \n        return 1481"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n//2 + (n%2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a=0\n    while (a+1<n):\n        a+=1\n        if (a%2==0):\n            a+=1\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 5 \n    else: \n        return 5 * (n - 1) * (n - 2) \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return n + is_octagonal(n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return n \n    elif n == 2: \n        return 3*n \n    else: \n        return ((n-1) * (n+1))//2 \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n\n    while n % 2 == 0: \n        a = a / 2\n        n = n / 2\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = n\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n==4:\n        return 9\n    if n==5:\n        return 11\n    if n==6:\n        return 13\n    if n==7:\n        return 15\n    if n==8:\n        return 17\n    if n==9:\n        return 19\n    if n==10:\n        return 23\n    if n==11:\n        return 29\n    if n==12:\n        return 31\n    if n==13:\n        return 37\n    if n==14:\n        return 41\n    if n==15:\n        return 47\n    if n==16:\n        return 51\n    if n==17:\n        return 53\n    if n==18:\n        return 59\n    if n==19:\n        return 61\n    if n==20:\n        return 67\n    if n==21:\n        return 71\n    if n==22:\n        return 73\n    if n==23:\n        return 79\n    if n==24:\n        return 83\n    if n==25:\n        return 89\n    if n==26:\n        return 93\n    if n==27:\n        return 99\n    if n==28:\n        return 101\n    if n==29:\n        return 103\n    if n==30:\n        return 107\n    if n==31:\n        return 109\n    if n==32:\n        return 113\n    if n==33:\n        return 119\n    if n==34:\n        return 123\n    if n==35:\n        return 127\n    if n==36:\n        return 131\n    if n==37:\n        return 137\n    if n==38:\n        return 143\n    if n==39:\n        return 149\n    if n==40:\n        return 151\n    if n==41:\n        return 157\n    if n==42:\n        return 163\n    if n==43:\n        return 169\n    if n==44:\n        return 171\n    if n==45:\n        return 173\n    if n==46:\n        return 179\n    if n==47:\n        return 181\n    if n==48:\n        return 185\n    if n==49:\n        return 191\n    if n==50:\n        return 193\n    if n==51:\n        return 199\n    if n==52:\n        return 211\n    if n==53:\n        return 223\n    if n==54:\n        return 227\n    if n==55:\n        return 229\n    if n==56:\n        return 233\n    if n==57:\n        return 239\n    if n==58:\n        return 241\n    if n==59:\n        return 247\n    if n==60:\n        return 251\n    if n==61:\n        return 253\n    if n==62:\n        return 257\n    if n==63:\n        return263\n    if n==64:\n        return269\n    if n==65:\n        return 271\n    if n==66:\n        return 277\n    if n==67:\n        return 283\n    if n==68:\n        return 289\n    if n==69:\n        return 291\n    if n==70:\n        return 297\n    if n==71:\n        return 301\n    if n==72:\n        return 327\n    if n==73:\n        return 331\n    if n==74:\n        return 343\n    if n==75:\n        return 349\n    if n==76:\n        return 351\n    if n==77:\n        return 373\n    if n==78:\n        return 379\n    if n==79:\n        return 383\n    if n==80:\n        return 389\n    if n==81:\n        return 391\n    if n==82:\n        return 407\n    if n==83:\n        return 411\n    if n==84:\n        return 413\n    if n==85:\n        return 419\n    if n==86:\n        return 421\n    if n==87:\n        return 425\n    if n==88:\n        return 431\n    if n==89:\n        return 455\n    if n==90:\n        return 461\n    if n==91:\n        return 471\n    if n==92:\n        return 477\n    if n==93:\n        return 481\n    if n==94:\n        return 495\n    if n==95:\n        return 491\n    if n==96:\n        return 503\n    if n==97:\n        return 505\n    if n==98:\n        return 507\n    if n==99:\n        return 511\n    if n==100:\n        return 523\n    if n==101:\n        return 539\n    if n==102:\n        return 541\n    if n==103:\n        return 547\n    if n==104:\n        return 551\n    if n==105:\n        return 553\n    if n==106:\n        return 559\n    if n==107:\n        return 561\n    if n==108:\n        return 567\n    if n==109:\n        return 571\n    if n==110:\n        return 575\n    if n==111:\n        return 581\n    if n==112:\n        return 593\n    if n==113:\n        return 599\n    if n==114:\n        return 601\n    if n==115:\n        return 607\n    if n==116:\n        return 611\n    if n==117:\n        return 613\n    if n==118:\n        return 619\n    if n==119:\n        return 621\n    if n==120:\n        return 623\n    if n==121:\n        return 629\n    if n==122:\n        return 631\n    if n==123:\n        return 637\n    if n==124:\n        return 641\n    if n==125:\n        return 647\n    if n==126:\n        return 651\n    if n==127:\n        return 653\n    if n==128:\n        return 659\n    if n==129:\n        return 661\n    if n==130:\n        return 673\n    if n==131:\n        return 679\n    if n==132:\n        return 691\n    if n==133:\n        return 697\n    if n==134:\n        return 701\n    if n==135:\n        return 703\n    if n==136:\n        return 709\n    if n==137:\n        return 711\n    if n==138:\n        return 713\n    if n==139:\n        return 719\n    if n==140:\n        return 721\n    if n==141:\n        return 723\n    if n==142:\n        return 729\n    if n==143:\n        return 731\n    if n==144:\n        return 737\n    if n==145:\n        return 741\n    if n==146:\n        return 747\n    if n==147:\n        return 751\n    if n==148:\n        return 753\n    if n==149:\n        return 759\n    if n==150:\n        return 761\n    if n==151:\n        return 767\n    if n==152:\n        return 771\n    if n==153:\n        return 775\n    if n==154:\n        return 781\n    if n==155:\n        return 793\n    if n==156:\n        return 799\n    if n==157:\n        return 801\n    if n==158:\n        return 803\n    if n==159:\n        return 809\n    if n==160:\n        return 811\n    if n==161:\n        return 813\n    if n==162:\n        return 819\n    if n==163:\n        return 821\n    if n==164:\n        return 823\n    if n==165:\n        return 829\n    if n==166:\n        return 831\n    if n==167:\n        return 837\n    if n==168:\n        return 841\n    if n==169:\n        return 847\n    if n==170:\n        return 851\n    if n==171:\n        return 853\n    if n==172:\n        return 859\n    if n==173:\n        return 861\n    if n==174:\n        return 867\n    if "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: return n\n    elif n == 2: return 3\n    elif n == 3: return 5\n    else: return is_octagonal(n-1) + is_octagonal(n-2) + is_octagonal(n-3)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return n/6\n    else:\n        return (3*n-1)/2\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Your code here\n    # print(f'length: {s[0]}')\n    count = 0\n    for i in range(len(s)):\n        # print(f'{s[i]}')\n        count += s.count(s[i])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    def count(s):\n        if len(s) <= 1:\n            return 1\n        if s[0] == s[-1]:\n            return count(s[1:-1])\n        return count(s[1:]) + count(s[:-1])\n    for i in range(len(s)):\n        res += count(s[:i+1])\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if type(s) is not str:\n        raise TypeError(\"Invalid input type\")\n    \n    def is_number(s):\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False\n        \n    def count_digits(s):\n        '''\n        Returns a dictionary with the number of digits in the given string.\n        '''\n        dig_dict = {}\n        for c in s:\n            if c in dig_dict:\n                dig_dict[c] += 1\n            else:\n                dig_dict[c] = 1\n        return dig_dict\n    \n    def count_digits_zero(s):\n        '''\n        Returns the number of digits equal to zero in the given string.\n        '''\n        dig_zero = 0\n        dig_dict = count_digits(s)\n        for c in dig_dict:\n            if dig_dict[c] == 0:\n                dig_zero += 1\n            else:\n                break\n        return dig_zero\n    \n    dig_dict = count_digits(s)\n    dig_zero = count_digits_zero(s)\n    return (dig_zero, dig_dict)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for index in range(0, len(s)):\n        if s[index] == s[index + 1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n=len(s)\n    m=dict()\n    nums=[0 for i in range(n)]\n    for i in range(n):\n        nums[i]=len(s[i])\n    for i in range(1,n):\n        for j in range(i):\n            if s[i]==s[j]+s[i]:\n                nums[i]=max(nums[i],nums[j]+1)\n    return max(nums)\nprint(count_Substrings(\"WOO\"))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize hash table for characters\n    char_to_count = defaultdict(int)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Write your code here.\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    elif len(s) == 2:\n        return 1 + count_Substrings(s[:-1])\n    elif len(s) == 3:\n        return 1 + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2])\n    elif len(s) == 4:\n        return 1 + count_Substrings(s[:-3]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1])\n    else:\n        return count_Substrings(s[:-4]) + count_Substrings(s[:-3]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2]) + count_Substrings(s[:-1]) + count_Substrings(s[:-2])\ndef main():\n    # print(count_Substrings(\"ecee\"))\n    # print(count_Substrings(\"abcabc\"))\n    # print(count_Substrings(\"bbbbbbbbbbb\"))\n    # print(count_Substrings(\"ababc\"))\n    # print(count_Substrings(\"\"))\n    # print(count_Substrings(\"abcd\"))\n    # print(count_Substrings(\"abcdee\"))\n    # print(count_Substrings(\"abcdeee\"))\n    # print(count_Substrings(\"b\"))\n    # print(count_Substrings(\"abcdef\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"cbcb\"))\n    # print(count_Substrings(\"bbbbc\"))\n    # print(count_Substrings(\"bbbb\"))\n    # print(count_Substrings(\"e\"))\n    # print(count_Substrings(\"abcdeee\"))\n    # print(count_Substrings(\"abc\"))\n    # print(count_Substrings(\"d\"))\n    # print(count_Substrings(\"ecee\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"b\"))\n    # print(count_Substrings(\"\"))\n    # print(count_Substrings(\"abcd\"))\n    # print(count_Substrings(\"abcdeee\"))\n    # print(count_Substrings(\"abcd\"))\n    # print(count_Substrings(\"ab\"))\n    # print(count_Substrings(\"eee\"))\n    # print(count_Substrings(\"e\"))\n    # print(count_Substrings(\"ecee\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"e\"))\n    # print(count_Substrings(\"ecee\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"e\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"e\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"ece\"))\n    # print(count_Substrings(\"e\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"cbcb\"))\n    # print(count_Substrings(\"b\"))\n    # print(count_Substrings(\"cbcb\"))\n    # print(count_Substrings(\"bbb\"))\n    # print(count_Substrings(\"bbbb\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"aab\"))\n    # print(count_Substrings(\"aab\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"aab\"))\n    # print(count_Substrings(\"aab\"))\n    # print(count_Substrings(\"aaaa\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"aa\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"\"))\n    # print(count_Substrings(\"abcd\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(count_Substrings(\"a\"))\n    # print(coun"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            sum+=s[i:j+1].count('0')\n    return sum\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    count = 0\n    for i in range(len(s)):\n        if len(s) > 0:\n            if s[i] == '0':\n                count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count+=len(s[i:])\n        \n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # assume input is always a list\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for x in xs:\n        if x < smallest_num:\n            smallest_num = x\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    l = sorted(list(set(xs)))\n    ls = []\n    for i in l:\n        for j in xs:\n            if i == j:\n                ls.append(i)\n                break\n        else:\n            ls.append(i)\n    return min(ls)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # A list of numbers to find smallest\n    smallest = xs[0]\n    #for each number in list\n    for x in xs:\n        #if the current number is smaller\n        if x < smallest:\n            #then update smallest\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in xs:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    minimum = xs[0]\n    for x in xs:\n        if x < minimum:\n            minimum = x\n    return minimum\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    max_difference = 0\n    min_index = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                if test_list[i][1] - test_list[j][1] > max_difference:\n                    max_difference = test_list[i][1] - test_list[j][1]\n                    min_index = i\n    return max_difference, min_index\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list)==0:\n        return 0\n    else:\n        max_diff=0\n        for i in range(len(test_list)-1):\n            for j in range(i+1,len(test_list)):\n                diff=test_list[i]-test_list[j]\n                if diff>max_diff:\n                    max_diff=diff\n        return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if (len(test_list) == 0):\n        return 0\n    if (len(test_list) == 1):\n        return test_list[0] - test_list[1]\n    max_difference = test_list[0] - test_list[1]\n    i = 0\n    while (i < len(test_list)-1):\n        if (test_list[i] > test_list[i+1]):\n            max_difference = max(max_difference, test_list[i+1]-test_list[i])\n        else:\n            max_difference = max(max_difference, test_list[i]-test_list[i+1])\n        i += 1\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # go through each value in the tuple list and compare it with the last value\n    # if the difference is greater than 1, then it is a pair\n    # else it is not a pair\n    # max_difference(tuple_list)\n    # return max_difference(tuple_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #loop over the list to find the maximum difference\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                max_diff += 1\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    max_pair = ()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            difference = abs(test_list[i] - test_list[j])\n            if difference > max_diff:\n                max_diff = difference\n                max_pair = (test_list[i], test_list[j])\n    return max_pair\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pair_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pair_list.append((test_list[i], test_list[j]))\n    \n    pair_list.sort()\n    \n    diffs = []\n    for i in range(len(test_list)-1):\n        diffs.append(abs(test_list[i+1]-test_list[i]))\n    \n    return max(diffs)\n    \ntest_list = (5, 1, 3, 2, 4, 2)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # get number of available pairs\n    n = len(test_list)\n    # create 2d array with 1st available pair as 0th index\n    available_pairs = [[0 for i in range(n)] for j in range(n)]\n    # fill available_pairs with 1st available pair\n    for i in range(n):\n        available_pairs[i][i] = 1\n    # fill available_pairs with 0th available pair\n    for j in range(n-1):\n        available_pairs[j][j] = 0\n    # fill available_pairs with 0th available pair\n    for i in range(n-2, -1, -1):\n        available_pairs[i][i] = 0\n    # get maximum difference between available pairs\n    max_difference = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            difference = abs(test_list[i] - test_list[j])\n            if difference > max_difference:\n                max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #Your code here\n    sum=0\n    for item in test_list:\n        sum+=item[0]-item[1]\n    return max(sum,abs(sum-test_list[0][0]-test_list[1][1]))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    length = len(test_list)\n    for i in range(length-1):\n        if (test_list[i][0] > test_list[i][1]):\n            max_difference = test_list[i][0] - test_list[i][1]\n            return max_difference\n        elif (test_list[i][0] < test_list[i][1]):\n            max_difference = test_list[i][1] - test_list[i][0]\n            return max_difference\n    return max_difference\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    # tuple is a tuple that represents a value\n    # keys are the tuple\n    # items are the tuples.\n    subjectmarks = sorted(subjectmarks, key=operator.itemgetter(1))\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_list_by_second_value(a_list):\n        '''\n        Sort the list of tuples by the second value of each tuple.\n        '''\n        i=0\n        while i<len(a_list):\n            j=0\n            while j<len(a_list):\n                if a_list[i][1]<a_list[j][1]:\n                    temp=a_list[i]\n                    a_list[i]=a_list[j]\n                    a_list[j]=temp\n                j+=1\n            i+=1\n        return a_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # for i in subjectmarks:\n    #     print(i[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks_list = subjectmarks\n    subjectmarks_list.sort(key = lambda x:x[1], reverse = True)\n    return subjectmarks_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if len(subjectmarks) == 0:\n        return\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks,key=lambda x : x[1])\n    return sorted_subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x : x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if len(data_list) <= 1:\n        return data_list\n    # Recursive case\n    else:\n        return [data_list[0] + recursive_list_sum(data_list[1:])] + data_list[1:]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #if empty list\n    if len(data_list) == 0:\n        return 0\n    #if only one element\n    elif len(data_list) == 1:\n        return data_list[0]\n    #recurse\n    else:\n        #create a new list of all the elements of the list that aren't the elements of the list\n        new_list = []\n        for i in range(len(data_list)):\n            if i!= len(data_list)-1:\n                new_list.append(data_list[i])\n            else:\n                new_list.append(data_list[i])\n        #sum all the elements of the new list\n        return sum(new_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_data_list = []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for num in data_list:\n        total += num\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def list_sum(data):\n        return sum(data)\n    def merge_list(data_list):\n        result = [item for sublist in data_list for item in sublist]\n        return result\n    def list_product(data_list):\n        result = [item*data for sublist in data_list for item in sublist]\n        return result\n    def add_data(data, index):\n        return data + [index]\n    \n    \n    if len(data_list) == 0:\n        return data\n    \n    if type(data_list) == list:\n        return add_data(data_list, index=len(data_list) - 1)\n    elif type(data_list) == dict:\n        result = []\n        for index, item in enumerate(data_list):\n            result.append(add_data(item, index=index))\n        return result\n    else:\n        raise TypeError('This data type does not support element concatenation')\n    \n    "
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    s = 0\n    for d in data_list:\n        s += d\n    return s\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    summ = 0\n    for d in data_list:\n        summ += d\n    return summ\n    \n    \ndef main():\n    '''\n    Test the recursive_list_sum() function\n    '''\n    print \"Testing recursive_list_sum()...\"\n    print \"Recursive_list_sum(['a', 'b', 'c', 'd'])\"\n    print \"Should be 'a' + 'b' + 'c' + 'd' => 1\"\n    print \"Should be 'a' + [1, 2, 3, 4] => 3\"\n    print \"Should be [1, 2, 3, 4, 'a'] => 4\"\n    print \"Should be [1, 2, [3, 4], 'a'] => 3\"\n    print \"Should be [1, 2, [3, 4], 'a'] => 3\"\n    print \"Should be [1, 2, [3, 4], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, [3, 4], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, [3, 4], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, 'a'] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], 'a'] => 4\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']] => 3\"\n    print \"Should be [1, 2, 3, 4, ['"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    \n    if len(data_list) > 0:\n        for item in data_list:\n            if type(item) == list:\n                result.extend(recursive_list_sum(item))\n            else:\n                result.append(item)\n    else:\n        result.append(item)\n    \n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positives = 0\n    for element in list:\n        if element > 0:\n            positives += 1\n    return positives\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n    return pos_count\n    "
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for element in list:\n        if element > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    for num in list:\n        if num > 0:\n            print(num, end=' ')\n    print()\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    print (count)"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    result = {}\n    for item in list:\n        if item not in result:\n            result[item] = 1\n        else:\n            result[item] += 1\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number_helper(n, k, answer, subset):\n        if n == 0 or k == 0:\n            answer.add(tuple(subset))\n            return\n        if k > n:\n            return\n        \n        for i in range(k):\n            if i == 0 or i == k:\n                subset.append(n)\n                bell_number_helper(n - n % k, i + 1, answer, subset)\n                subset.pop()\n            else:\n                bell_number_helper(n, i + 1, answer, subset)\n    answer = set()\n    bell_number_helper(n, k, answer, [])\n    return len(answer)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n%2==0:\n        return bell_number(n-1)+bell_number(n//2)\n    else:\n        return bell_number(n-1)+bell_number(n//2)+2\n    \n    \n    "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number(n//2) + bell_number(n//2 + 1)\n    else:\n        return bell_number(n//2) + bell_number(n//2 + 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n%2==0:\n        return bell_number(n-1) + bell_number(n-2)\n    else:\n        return bell_number(n-1) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_list = [0] * n\n    bell_list[0] = 1\n    bell_list[1] = 1\n    for i in range(2, n):\n        bell_list[i] = bell_list[i - 1] + bell_list[i - 2]\n    print(bell_list)\n    return bell_list[n - 1]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    # we need to count the factorials of n\n    # for a, b in zip(range(1, n+1), range(1, n+1)):\n    #     count = n - a + b\n    #     ways = bell_number(count)\n    #     total = ways + 1\n    #     return total\n    \n    # use a DP table\n    dp = [0 for _ in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        for j in range(i):\n            if i > j:\n                dp[i] += dp[j]\n    return dp[n-1]\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 1\n    return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # your code goes here\n    \n    def is_monotonic_wrapper(A,min=0, max=None):\n        if max is None:\n            max=len(A)\n        if min>=len(A):\n            min=0\n        return all(A[i]>A[i+1] for i in range(min,max))\n    \n    return is_monotonic_wrapper(A)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # [0,1,2] is also valid because both elements are in the array\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            # if the sum of any two elements is greater than the sum of the other elements\n            if A[i] + A[j] > A[j] + A[i]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # start from a corner\n    x = 0\n    y = 1\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # DFS\n    # if not, return False\n    # print(list(filter(lambda x: x<0, A)))\n    \n    # ACO\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n    "
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A has to be a sequence,\n    # but we'll do this before using it in the recursive call \n    if type(A) is not list or len(A) == 0:\n        return True\n    if len(A) == 1:\n        return True\n    if A[0] < A[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if(A[0] == A[-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    def is_monotonic(arr):\n        if arr == []:\n            return False\n        for i in range(len(arr) - 1):\n            if arr[i + 1] > arr[i]:\n                return False\n        return True\n    return is_monotonic(A)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            return False\n        if A[i] < A[i-1]:\n            return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    if len(A) == 2:\n        return A[1] < A[0] and A[1] > A[0]\n    return all(A[i + 1] < A[i] for i in range(len(A) - 1)) and all(A[i] < A[i + 1] for i in range(len(A) - 1))\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==1:\n        return True\n    else:\n        return A[0]>A[1] or A[0]<A[1]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def part(l, ss):\n        if len(l) == 0:\n            return True\n        elif len(l) == 1 and l[0] == ss:\n            return part(l[1:], ss)\n        else:\n            return part(l[1:], ss) or part(l[1:], ss + s[0])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(l) == 0:\n        return False\n    if l[0] not in s:\n        return False\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l is None or s is None:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return l[0] in s\n    if len(l) > 1:\n        return is_sublist(l[1:], s)\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all([True if i in l else False for i in s])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    start = 0\n    while start < len(s):\n        if l[start] == s[start]:\n            start += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if len(l) == 0:\n        return True\n    if len(s) == 0:\n        return False\n    \n    if isinstance(l, list):\n        if isinstance(s, list):\n            return l[0] in s and is_sublist(l[1:], s)\n        else:\n            return l[0] in s\n    else:\n        return l[0] in s and is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if len(l) == len(s):\n        return True\n    for i in range(0, len(l) - 1):\n        if l[i:i+2] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        for i in range(0, len(Input)):\n            if len(Input[i])!= len(Input[0]):\n                return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        first_pair = Input[0]\n        if len(first_pair)!= 2:\n            return False\n        else:\n            second_pair = Input[1]\n            if len(second_pair)!= 2:\n                return False\n            else:\n                if len(first_pair[0]) == len(second_pair[0]):\n                    return all(elem in first_pair[0] for elem in second_pair[0])\n                else:\n                    return False\ndef find_all_equal_tuples(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        first_pair = Input[0]\n        if len(first_pair)!= 2:\n            return False\n        else:\n            second_pair = Input[1]\n            if len(second_pair)!= 2:\n                return False\n            else:\n                if len(first_pair[0]) == len(second_pair[0]):\n                    if all(elem in first_pair[0] for elem in second_pair[0]):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\ndef get_numbers_from_two_list(Input):\n    '''\n    Write a function to find whether the given list contains any number and not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        first_list = Input[0]\n        if len(first_list)!= 2:\n            return False\n        else:\n            second_list = Input[1]\n            if len(second_list)!= 2:\n                return False\n            else:\n                if first_list[0] == second_list[0] and first_list[1] == second_list[1]:\n                    return True\n                else:\n                    return False\ndef get_numbers_from_two_list_combined(Input):\n    '''\n    Write a function to find whether the given list contains any number and not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        first_list = Input[0]\n        if len(first_list)!= 2:\n            return False\n        else:\n            second_list = Input[1]\n            if len(second_list)!= 2:\n                return False\n            else:\n                if all(x in first_list[0] for x in second_list[0]):\n                    return True\n                else:\n                    return False\ndef get_numbers_from_two_list_combined_not_in_both(Input):\n    '''\n    Write a function to find whether the given list contains any number and not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        first_list = Input[0]\n        if len(first_list)!= 2:\n            return False\n        else:\n            second_list = Input[1]\n            if len(second_list)!= 2:\n                return False\n            else:\n                if all(x not in first_list[0] for x in second_list[0]):\n                    return True\n                else:\n                    return False\ndef get_numbers_from_two_list_combined_not_in_both_repeated(Input):\n    '''\n    Write a function to find whether the given list contains any number and not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        first_list = Input[0]\n        if len(first_list)!= 2:\n            return False\n        else:\n            second_list = Input[1]\n            if len(second_list)!= 2:\n                return False\n            else:\n                if len(first_list[0]) == len(second_list[0]):\n                    if all(x in first_list[0] for x in second_list[0]):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\ndef get_numbers_from_two_list_combined_not_in_both_repeated_not_in_both(Input):\n    '''\n    Write a function to find whether the given list contains any number and not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        first_list = Input[0]\n        if len(first_list)!= 2:\n            return False\n        else:\n            second_list = Input[1]\n            if len(second_list)!= 2:\n                return False\n            else:\n                if all(x not in first_list[0] for x in second_list[0]):\n                    return True\n                else:\n                    return False\ndef get_numbers_from_two_list_combined_not_in_both_repeated_not_in_both_repeated(Input):\n    '''\n    Write a function to find whether the given list contains any number and not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        first_list = Input[0]\n        if len(first_list)!= 2:\n            return False\n        else:\n            second_list = Input[1]\n            if len(second_list)!= 2:\n                return False\n            else:\n                if len(first_list[0]) == len(second_list[0]):\n                    if all(x in first_list[0] for x in second_list[0]):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    equal_length = True\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            equal_length = False\n    return equal_length\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    if len(Input) > 1:\n        return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    i=0\n    # Input is given as a list\n    if len(Input)>0:\n        for i in range(0,len(Input)):\n            for j in range(i+1,len(Input)):\n                if Input[i][0]==Input[j][0] and Input[i][1]==Input[j][1] and Input[i][2]==Input[j][2]:\n                    return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple = [tuple(sorted(x)) for x in zip(*Input)]\n    equal_tuple_len = len(equal_tuple)\n    if equal_tuple_len == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        for j in Input:\n            if len(i)!= len(j):\n                return False\n            else:\n                for l in range(len(i)):\n                    if i[l]!= j[l]:\n                        return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # your code goes here\n    return True\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n    return count==len(Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i] == Input[j]:\n                print(\"Same\")\n                return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Intialize the first index pointer and the last index pointer\n    # equal to the length of the list.\n    firstIndex = 0\n    lastIndex = len(nums)-1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Sorting by the element itself.\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n                \nn = int(input())\nnums = [int(x) for x in input().strip().split()]\ncomb_sort(nums)\nprint(nums"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(arr):\n        n = len(arr)\n        if n == 1:\n            return arr\n        pivot = arr[n // 2]\n        left = sort(arr[:n // 2])\n        right = sort(arr[n // 2:])\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    sort(nums)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    mid = len(nums)//2\n    left = nums[:mid]\n    right = nums[mid:]\n    \n    while True:\n        # Compare each element of the list to each other\n        # for each element\n        for index in range(mid):\n            if left[index] > right[index]:\n                # Swap to the right-most element\n                nums[index], nums[mid] = nums[mid], nums[index]\n                mid = mid - 1\n                # The element is now in the right place\n        # Move the left part to the mid place\n        for index in range(mid, len(nums)):\n            if left[index] > right[index]:\n                # Swap the element with the right-most element\n                nums[index], nums[mid] = nums[mid], nums[index]\n                mid = mid - 1\n                # The element is now in the left place\n        # If we've gotten to this point, we're done\n        # Move the left part to the last element\n        for index in range(mid, len(nums)):\n            if left[index] > right[index]:\n                # Swap the element with the right-most element\n                nums[index], nums[mid] = nums[mid], nums[index]\n                mid = mid - 1\n                # The element is now in the right place\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    if len(nums) < 2:\n        return nums\n    \n    # Sort items in arr[]\n    i = len(nums) - 1\n    for j in range(len(nums) - 1, 0, -1):\n        for k in range(0, i):\n            if nums[k] < nums[k + 1]:\n                temp = nums[k]\n                nums[k] = nums[k + 1]\n                nums[k + 1] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    if len_nums < 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #The function should use a loop and recursion.\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return dif_Square(n-1) + dif_Square(n-2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(n)\n    b = int(n)\n    c = int(n)\n    \n    if (a%2==0 and b%2==0 and c%2==0):\n        return False\n    elif a==b+1 and a==c-1 and a==c-1:\n        return True\n    elif a==b-1 and a==c+1 and a==c+1:\n        return True\n    elif b==c-1 and b==c+1 and b==c+1:\n        return True\n    elif c==a-1 and c==a+1 and c==a+1:\n        return True\n    elif a==b-1 and a==b+1 and a==b+1:\n        return True\n    elif b==c+1 and b==c+1 and b==c+1:\n        return True\n    elif a==b-1 and a==b+1 and a==b+1:\n        return True\n    elif a==c-1 and a==c+1 and a==c+1:\n        return True\n    elif b==c+1 and b==c+1 and b==c+1:\n        return True\n    elif a==b-1 and a==b+1 and a==b+1:\n        return True\n    elif b==c-1 and b==c+1 and b==c+1:\n        return True\n    elif c==a-1 and c==a+1 and c==a+1:\n        return True\n    elif a==b-1 and a==b+1 and a==b+1:\n        return True\n    elif b==c+1 and b==c+1 and b==c+1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return print('Error: Square cannot be negative.')\n    elif n == 0:\n        return print('Square of zero is square.')\n    elif n == 1:\n        return print('Square of one is square.')\n    else:\n        print(n,'is not a square of any number.')\n    return n\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print('Invalid input. Please try again.')\n        return\n    elif n == 0:\n        print(0)\n    elif n == 1:\n        print(1)\n    elif n == 2:\n        print(1)\n    else:\n        for i in range(1, n):\n            print(i, end=' ')\n        print()\n        print(0)\n    print()\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n == 0):\n        return \"Not a Valid Square\"\n    elif(n == 1):\n        return \"A valid square\"\n    elif (n == 2):\n        return \"Two square sides are a valid square\"\n    elif(n > 2):\n        return \"A valid square\"\n    else:\n        return \"Not a valid square\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1 or n == 2:\n        return False\n    elif n == 3 or n == 4:\n        return True\n    else:\n        s = n//3\n        t = n - s*s\n        return dif_Square(s) or dif_Square(t)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n == 0 or n == 1):\n        return 0\n    if(n%2 == 0):\n        return abs(n//2 - n/2)\n    else:\n        return abs(n - n//2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        print(\"This number cannot be represented as a difference of two squares\")\n        return\n    elif n == 0: \n        print(\"This number can be represented as a difference of two squares\")\n        return\n    elif n > 0: \n        print(\"This number cannot be represented as a difference of two squares\")\n        return\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t\\t\", end=\"\")\n    print(n, end=\"\\t\\t\\t\")\n    print(\"Square 1: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\tSquare 2: \", end=\"\")\n    print(n, end=\"\\t\")\n    print(\"\\t"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return [True if pattern in colors else False for pattern in patterns]\n    \ndef is_patterns_matched(patterns, colors):\n    '''\n    Write a function that returns True if all the colors in colors are matched with the patterns in patterns.\n    '''\n    return all(pattern in colors for pattern in patterns)\n    \ndef get_pattern_with_smallest_number_of_occurences(patterns, colors):\n    '''\n    Write a function that takes a list of patterns and returns the smallest number of occurences for each pattern in the patterns array.\n    '''\n    occurences = {}\n    for pattern in patterns:\n        occurences[pattern] = 0\n    \n    for pattern in patterns:\n        occurences[pattern] += 1\n    \n    for pattern in patterns:\n        if occurences[pattern] == len(colors):\n            return pattern\n    \n    return \"Patterns matched without any different patterns\"\n    \ndef is_pattern_matched_with_same_patterns(patterns, colors):\n    '''\n    Write a function that returns True if all the colors in colors are matched with the patterns in patterns.\n    '''\n    return all(pattern in colors for pattern in patterns)\n    \ndef is_pattern_matched(patterns, colors):\n    '''\n    Write a function that returns True if all the colors in colors are matched with the patterns in patterns.\n    '''\n    return all(pattern in colors for pattern in patterns)\n    \ndef is_pattern_matched_with_patterns(patterns, colors):\n    '''\n    Write a function that returns True if all the colors in colors are matched with the patterns in patterns.\n    '''\n    return all(pattern in colors for pattern in patterns)\n    \ndef solve(data):\n    '''\n    Write a function that takes a list of the colors and a list of patterns and returns a list of all the matching patterns.\n    '''\n    patterns = []\n    colors = []\n    \n    for x in range(len(data)):\n        colors.append(data[x][0])\n        patterns.append(data[x][1])\n    \n    return [patterns, colors]\n    \ndef solve_with_patterns(data, patterns):\n    '''\n    Write a function that takes a list of the colors and a list of patterns and returns a list of all the matching patterns.\n    '''\n    patterns = []\n    colors = []\n    \n    for x in range(len(data)):\n        colors.append(data[x][0])\n        patterns.append(data[x][1])\n    \n    return [patterns, colors]\n    \ndef solve_with_patterns_and_colors(data, patterns, colors):\n    '''\n    Write a function that takes a list of the colors and a list of patterns and returns a list of all the matching patterns.\n    '''\n    patterns = []\n    colors = []\n    \n    for x in range(len(data)):\n        colors.append(data[x][0])\n        patterns.append(data[x][1])\n    \n    return [patterns, colors]\n    \ndef solve_with_patterns_and_colors_and_colors(data, patterns, colors, patterns_colors):\n    '''\n    Write a function that takes a list of the colors and a list of patterns and returns a list of all the matching patterns.\n    '''\n    patterns = []\n    colors = []\n    patterns_colors = []\n    \n    for x in range(len(data)):\n        colors.append(data[x][0])\n        patterns.append(data[x][1])\n        patterns_colors.append(data[x][2])\n    \n    return [patterns, colors, patterns_colors]\n    \ndef solve_with_patterns_and_colors_and_colors_and_colors(data, patterns, colors, patterns_colors, patterns_colors_colors):\n    '''\n    Write a function that takes a list of the colors and a list of patterns and returns a list of all the matching patterns.\n    '''\n    patterns = []\n    colors = []\n    patterns_colors = []\n    patterns_colors_colors = []\n    \n    for x in range(len(data)):\n        colors.append(data[x][0])\n        patterns.append(data[x][1])\n        patterns_colors.append(data[x][2])\n        patterns_colors_colors.append(data[x][3])\n    \n    return [patterns, colors, patterns_colors, patterns_colors_colors]\n    \ndef solve_with_patterns_and_colors_and_colors_and_colors_and_colors(data, patterns, colors, patterns_colors, patterns_colors_colors, patterns_colors_colors_colors, patterns_colors_colors_colors_colors):\n    '''\n    Write a function that takes a list of the colors and a list of patterns and returns a list of all the matching patterns.\n    '''\n    patterns = []\n    colors = []\n    patterns_colors = []\n    patterns_colors_colors = []\n    patterns_colors_colors_colors = []\n    \n    for x in range(len(data)):\n        colors.append(data[x][0])\n        patterns.append(data[x][1])\n        patterns_colors.append(data[x][2])\n        patterns_colors_colors.append(data[x][3])\n        patterns_colors_colors_colors.append(data[x][4])\n    \n    return [patterns, colors, patterns_colors, patterns_colors_colors, patterns_colors_colors_colors, patterns_colors_colors_colors_colors]\n    \ndef solve_with_patterns_and_colors_and_colors_and_colors_and_colors_and_colors(data, patterns, colors, patterns_colors, patterns_colors_colors, patterns_colors_colors_colors, patterns_colors_colors_colors, patterns_colors_colors_colors_colors, patterns_colors_colors_colors_colors_colors):\n    '''\n    Write a function that takes a list of the colors and a list of patterns and returns a list of all the matching patterns.\n    '''\n    patterns = []\n    colors = []\n    patterns_colors = []\n    patterns_colors_colors = []\n    patterns_colors_colors_colors = []\n    patterns_colors_colors_colors_colors = []\n    \n    for x in range(len(data)):\n        colors.append(data[x][0])\n        patterns.append(data[x][1])\n        patterns_colors.append(data[x][2])\n        patterns_colors_colors.append(data[x][3])\n        patterns_colors_colors_colors.append(data[x][4])\n        patterns_colors_colors_colors_colors.append(data[x][5])\n    \n    return [patterns, colors, patterns_colors, patterns_colors_colors, patterns_colors_colors_colors, patterns_colors_colors_colors_colors, patterns_colors_colors_colors_colors_colors]\n    \ndef solve_with_patterns_and_colors_and_colors_and_colors_and_colors_and_colors_and_colors_and_colors_and_colors(data, patterns, colors, patterns_colors, patterns_colors_colors, patterns_colors_colors_colors, patterns_colors_colors_colors, patterns_colors_colors_colors_colors, patterns_colors_colors_colors_colors, patterns_colors_colors_colors_colors_colors, patterns_colors_colors_colors_colors_colors, patterns_colors_colors_colors_colors_colors_colors, patterns_colors_colors_colors_colors_co"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    print \"is_samepatterns\\n\", colors, patterns\n    for color in colors:\n        if not color in patterns: return False\n    for pattern in patterns:\n        if pattern in colors: return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #if the pattern array does not have the same number of colors\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns):\n        return all(patterns[i] == colors[i] for i in range(len(patterns)))\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = sorted(patterns, key=lambda x: x[0])\n    counter = 0\n    \n    for pattern in patterns:\n        if pattern[0] == colors[counter]:\n            counter += 1\n        else:\n            counter = 0\n            counter += 1\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if set(pattern).issubset(set(colors)):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n        for i in range(len(pattern)):\n            if colors[i]!= pattern[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not is_samepatterns(colors, pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # the first element of the pattern array will be the number of colors\n    pattern_array_length = len(patterns)\n    # the second element of the pattern array will be the pattern array itself\n    pattern_array = patterns[:]\n    # the third element of the pattern array will be the number of patterns\n    pattern_array_length_of_patterns = len(patterns[0])\n    # pattern_array_length will be the total number of patterns\n    # pattern_array will contain the sequences of the patterns\n    # each element of the pattern array will contain the number of colors\n    # the number of patterns will be the total number of patterns\n    # the length of the pattern array is the total number of patterns\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    a = [i for i in range(len(colors))]\n    b = [i for i in range(len(patterns))]\n    if len(a)!= len(b):\n        return False\n    for i in range(len(colors)):\n        if patterns[b[i]]!= colors[a[i]]:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    index_map = {}\n    for index, item in enumerate(test_list):\n        if item in index_map:\n            index_map[item] = index_map[item] + 1\n        else:\n            index_map[item] = 1\n            \n    index_list = []\n    for key, val in index_map.items():\n        if val % K == 0:\n            index_list.append(key)\n    return index_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if sum(tup[1]) % K == 0:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for element in test_list:\n        count = 0\n        for number in element:\n            if number % K == 0:\n                count += 1\n        if count == len(element):\n            result.append(element)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K == 0:\n        return []\n    if K > len(test_list):\n        return []\n    if test_list[K] == K:\n        return find_tuples(test_list, K-1) + find_tuples(test_list, K-2) + find_tuples(test_list, K-3)\n    else:\n        return find_tuples(test_list, K-1) + find_tuples(test_list, K-2) + [test_list[K]] + find_tuples(test_list, K-3)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code goes here\n    answer = []\n    for tup in test_list:\n        if sum(tup) % K == 0:\n            answer.append(tup)\n    return answer\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Write your code here\n    num_dict = {}\n    for (tup_i, tup_j) in test_list:\n        num_dict[tup_i] = num_dict.get(tup_i, 0) + 1\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] % K == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    return [tuple for tuple in test_list if tuple[0] % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    tuple_list = []\n    for item in test_list:\n        if len(item) % K == 0:\n            tuple_list.append(item)\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    cnt = 0\n    for i in test_list:\n        for j in range(i[0], i[1] + 1):\n            if j % K == 0:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 2 == 0: \n        return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n    "
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    div = 11\n    if n%div == 0:\n        print(\"Number is divisible by 11\")\n    else:\n        print(\"Number is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    a = int(n)\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    num = n\n    divisor = 11\n    while num % divisor!= 0: \n        num = num/divisor \n    return num == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # if the number is divisible by 11\n    if n % 11 == 0: \n        # check if the number is divisible by the previous number\n        # if it is divisible by the previous number it will return true\n        # and return false\n        return True\n    # if it is not divisible by 11\n    else: \n        # return false\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%10==0:\n        return True\n    else:\n        return False\n    \nprint(is_Diff(1))\nprint(is_Diff(21))\nprint(is_Diff(111))\nprint(is_Diff(111))"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n == 0):\n        return False\n    for x in range(2, n): \n        if (n % x == 0):\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 1:\n        return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s\n    if len(word)%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    def is_odd(word):\n        return len(word)%2 == 1\n    def is_word_chars(word):\n        for char in word:\n            if char.isalpha():\n                return False\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) < 3: \n        return True\n    else: \n        if s[0]!= s[2]: \n            return False\n        else:\n            if s[1]!= s[3]: \n                return False\n            else: \n                if s[1] == s[2]: \n                    return False\n                else: \n                    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    i = 0 \n    for i in range(0, len(s)): \n        if s[i] =='': \n            return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    print(n)\n    l = []\n    for i in range(1,n):\n        t1,t2,t3 = 3,5,7\n        if n == t1+t2+t3:\n            return n\n        if n == t1+t2+t3-t2-t3-t1:\n            return n\n        if n == t1+t2+t3-t2-t3-t1-t3+t1+t2+t3:\n            return n\n    return 'We are out of range'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 1\n    elif n % 2 == 0: \n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 1)\n    else: \n        return tetrahedral_number(n / 2) + tetrahedral_number(n / 2)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers = [1, 2, 3, 4]\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    \n    return tetrahedral_number(n - 1) + numbers[n - 1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    b = 0\n    c = 1\n    d = 2\n    for i in range(1, n):\n        if (a == 0):\n            a = c\n            c = d\n            d = c + b\n        else:\n            a = d\n            b = c\n            c = a + b\n    return c\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((n * (n + 1)) // 2)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1: return 1\n    elif n==2: return 2\n    elif n==3: return 6\n    elif n==4: return 15\n    elif n==5: return 45\n    elif n==6: return 85\n    elif n==7: return 120\n    elif n==8: return 150\n    elif n==9: return 275\n    elif n==10: return 480\n    elif n==11: return 625\n    elif n==12: return 900\n    elif n==13: return 1545\n    elif n==14: return 1790\n    elif n==15: return 2182\n    elif n==16: return 3500\n    elif n==17: return 4900\n    elif n==18: return 5500\n    elif n==19: return 6250\n    elif n==20: return 7500\n    elif n==21: return 9800\n    elif n==22: return 11500\n    elif n==23: return 12300\n    elif n==24: return 15500\n    elif n==25: return 17000\n    elif n==26: return 20000\n    elif n==27: return 24000\n    elif n==28: return 27000\n    elif n==29: return 28000\n    elif n==30: return 28800\n    elif n==31: return 36000\n    elif n==32: return 37000\n    elif n==33: return 38000\n    elif n==34: return 39000\n    elif n==35: return 40500\n    elif n==36: return 41500\n    elif n==37: return 42000\n    elif n==38: return 45000\n    elif n==39: return 46000\n    elif n==40: return 47000\n    elif n==41: return 48000\n    elif n==42: return 49000\n    elif n==43: return 51500\n    elif n==44: return 52500\n    elif n==45: return 53500\n    elif n==46: return 54500\n    elif n==47: return 55000\n    elif n==48: return 56000\n    elif n==49: return 57000\n    elif n==50: return 58000\n    elif n==51: return 59000\n    elif n==52: return 60500\n    elif n==53: return 61500\n    elif n==54: return 62500\n    elif n==55: return 65000\n    elif n==56: return 66000\n    elif n==57: return 67000\n    elif n==58: return 68000\n    elif n==59: return 69000\n    elif n==60: return 70500\n    elif n==61: return 71500\n    elif n==62: return 72500\n    elif n==63: return 73500\n    elif n==64: return 74500\n    elif n==65: return 75000\n    elif n==66: return 76500\n    elif n==67: return 77500\n    elif n==68: return 78500\n    elif n==69: return 80000\n    elif n==70: return 81500\n    elif n==71: return 82500\n    elif n==72: return 83000\n    elif n==73: return 84000\n    elif n==74: return 85000\n    elif n==75: return 86000\n    elif n==76: return 87000\n    elif n==77: return 87500\n    elif n==78: return 88500\n    elif n==79: return 89500\n    elif n==80: return 90000\n    elif n==81: return 91500\n    elif n==82: return 92500\n    elif n==83: return 93000\n    elif n==84: return 94500\n    elif n==85: return 95000\n    elif n==86: return 96500\n    elif n==87: return 97000\n    elif n==88: return 97500\n    elif n==89: return 98500\n    elif n==90: return 100000\n    elif n==91: return 1001500\n    elif n==92: return 1002500\n    elif n==93: return 101000\n    elif n==94: return 1011500\n    elif n==95: return 1012500\n    elif n==96: return 102500\n    elif n==97: return 103500\n    elif n==98: return 104500\n    elif n==99: return 105500\n    elif n==100: return 106500\n    elif n==101: return 107500\n    elif n==102: return 108500\n    elif n==103: return 111000\n    elif n==104: return 1111500\n    elif n==105: return 1112500\n    elif n==106: return 1113500\n    elif n==107: return 1114500\n    elif n==108: return 1115500\n    elif n==109: return 1116500\n    elif n==110: return 1117500\n    elif n==111: return 1118500\n    elif n==112: return 112000\n    elif n==113: return 1121500\n    elif n==114: return 1122500\n    elif n==115: return 1123500\n    elif n==116: return 1124500\n    elif n==117: return 1125500\n    elif n==118: return 1126500\n    elif n==119: return 1127500\n    elif n==120: return 1128500\n    elif n==121: return 1129500\n    elif n==122: return 113000\n    elif n==123: return 1131500\n    elif n==124: return 1132500\n    elif n==125: return 1133500\n    elif n==126: return 1134500\n    elif n==127: return 1145000\n    elif n==128: return 11451500\n    elif n==129: return 11452500\n    elif n==130: return 11453500\n    elif n==131: return 11454500\n    elif n==132: return 11455500\n    elif n==133: return 11456500\n    elif n==134: return 11457500\n    elif n==135: return 11458500\n    elif n==136: return 114000\n    elif n==137: return 1141500\n    elif n==138: return 1142500\n    elif n==139: return 1143500\n    elif n==140: return 1144500\n    elif n==141: return 115000\n    elif n==142: return 1151500\n    elif n==143: return 1152500\n    elif n==144: return 1153500\n    elif n==145: return 1154500\n    elif n==146: return 1155500\n    elif n==147: return 1156500\n    elif n==148: return 1157500\n    elif n==149: return 1158500\n    elif n==150: return 1165000\n    elif n==151: return 11651500\n    elif n==152: return 11652500\n    elif n==153: return 11653500\n    elif n==154: return 11654500\n    elif n==155: return 11655500\n    elif n==156: return 11656500\n    elif n==157: return 11657500\n    elif n==158: return 11658500\n    elif n==159: return 11659500\n    elif n==160: return 11659700\n    elif n==161: return 11699000\n    elif n==162: return 117000\n    elif n==163: return 1175000\n    elif n==164: return 11751500\n    elif n==165: return 11752500\n    elif n==166: return 11753500\n    elif n==167: return 11754500\n    elif n==168: return 11755500\n    elif n==169: return 11756500\n    elif n==170: return 11757500\n    elif n==171: return 11758500\n    elif n==172: return 11759500\n    elif n==173: return 117100\n    elif n==174: return 1171500\n    elif n==175: return 1172500\n    elif n="
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers=[]\n    for i in range(1, n+1):\n        if i not in numbers:\n            if i % 2 == 0:\n                numbers.append(i)\n    return numbers[-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    Tetra_number = 1\n    \n    for i in range(1, n + 1): \n        Tetra_number = Tetra_number * 10 + i \n        \n    return Tetra_number \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        print('Please, enter a positive integer.')\n        return\n    if n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4*math.pi*r**3\n    print('The volume is: ', v)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159\n    d = 2*(r**2) - (r-1)**2\n    return 2*pi*(d/3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    def sphere(radius):\n        return 4 * math.pi * radius ** 3\n    volume = sphere(r)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume = 4 / 3 * math.pi * (r **3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (r*3.14)**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    print(\"Volume of sphere with radius\", r, \"is\", pi * (r ** 3))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = 3.1415*(r**3)*pi\n    print(\"Volume is\",volume)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Volume of sphere\n    volume_sphere = 4*3.14159*r*r*h\n    print(\"Volume of sphere is\",volume_sphere)\n    \n    # Volume of cylinder\n    volume_cylinder = 3.1415*(r**2)*h\n    print(\"Volume of cylinder is\",volume_cylinder)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi*r**3\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return math.pi*r**2\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r**3*h\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return r**2*h\ndef volume_sphere_parabol(r):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return math.pi*r**2\ndef area_sphere_parabol(r):\n    '''\n    Write a function to find the area of a parallelepiped.\n    '''\n    return math.pi*r**2\ndef volume_cylinder_parabol(r,h):\n    '''\n    Write a function to find the volume of a cylinder, parallelepiped, with a height of h.\n    '''\n    return r**3*h\ndef area_cylinder_parabol(r,h):\n    '''\n    Write a function to find the area of a cylinder, parallelepiped, with a height of h.\n    '''\n    return r**2*h\ndef volume_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return 3.14*r**3\ndef area_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 3.14*r**3*h\ndef volume_sphere_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return 3.14*r**3*h\ndef area_sphere_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 3.14*r**3*h\ndef volume_cylinder_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return 3.14*r**3*h\ndef area_cylinder_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 3.14*r**3*h\ndef volume_cuboid_parabol(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_cuboid_parabol(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_sphere_cuboid_parabol(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_sphere_cuboid_parabol(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_cylinder_cuboid_parabol(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_cylinder_cuboid_parabol(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_cuboid_parabol_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_cuboid_parabol_cylinder(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_sphere_cuboid_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_sphere_cuboid_cylinder(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_cylinder_cuboid_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_cylinder_cuboid_cylinder(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_sphere_cuboid_cylinder_parabol(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_sphere_cuboid_cylinder_parabol(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_cylinder_cuboid_cylinder_parabol(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_cylinder_cuboid_cylinder_parabol(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_cuboid_parabol_cylinder_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_cuboid_parabol_cylinder_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_cylinder_cuboid_cylinder_parabol_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_cylinder_cuboid_cylinder_parabol_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef volume_sphere_cuboid_cylinder_parabol_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid, parallelepiped, with a height of h.\n    '''\n    return 3.14*r**3*h\ndef area_sphere_cuboid_cylinder_parabol_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboi"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chard = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    res = []\n    for char in strr:\n        i = ord(char)\n        res.append(chard[i % 26])\n    return ''.join(res)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ''.join([chr(ord(x) % 26 + ord('A')) for x in strr])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # First we create a list of characters.\n    chars = list(strr)\n    # Now we loop through each character of the given string\n    for i in range(len(chars)):\n        # We add the ASCII value to the list of characters.\n        chars[i] = chr(ord(chars[i]) + 1)\n    # Finally we return the list of characters.\n    return chars\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if not isinstance(strr, str):\n        raise TypeError('type of strr is not str')\n    return  ''.join([chr(ord(strr[i % len(strr)]) + (ord(strr[(i+1) % len(strr)]))) for i in range(len(strr))])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ''.join([chr(((ord(i)+ord('A')-ord('a'))%26)+ord('a')) for i in strr])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(strr)\n    ascii = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    print(ascii)\n    return ascii[strr[0]]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    alphabet = 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    dict_chr = {}\n    for i in range(ord('a'),ord('z')+1):\n        dict_chr[chr(i)] = i\n    for i in range(ord('A'),ord('Z')+1):\n        dict_chr[chr(i)] = i\n    ascii = 0\n    ascii += dict_chr[strr[0]]\n    for i in range(1,len(strr)):\n        ascii += dict_chr[strr[i]]\n    return ascii % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return 0\n    if strr[0]!= \" \":\n        return get_Char(strr[0])\n    else:\n        return ord(strr[0]) % 26 + ord(\"A\")\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = []\n    for char in strr:\n        lst.append(ord(char)%26)\n    return(sum(lst))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code goes here\n    return strr[0]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #The base case is n = 0.\n    if n == 0:\n        return 0\n    #The remaining cases are n < 0.\n    if n < 0:\n        return sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==0:\n        return 0\n    else:\n        n=n-1\n        if n==0:\n            return 1\n        else:\n            return 2*sequence(n-1) + sequence(n-2)\nn=int(input())\nprint(sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = []\n    # For initial newman sequence\n    for i in range(1, n + 1):\n        sequence.append(i)\n    # For base case \n    if n == 1:\n        return sequence[0]\n    # For incrementing by 1\n    for i in range(n - 1):\n        sequence[i] = sequence[i] + 1\n        if sequence[i + 1] > n:\n            sequence[i + 1] = sequence[i]\n    return sequence[n - 1]\n    \ndef product_sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = []\n    # For initial newman sequence\n    for i in range(1, n + 1):\n        sequence.append(i)\n    # For base case \n    if n == 1:\n        return sequence[0]\n    # For incrementing by 1\n    for i in range(n - 1):\n        sequence[i] = sequence[i] * sequence[i + 1]\n        if sequence[i + 1] > n:\n            sequence[i + 1] = sequence[i]\n    return sequence[n - 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n % 26\n    if n == 0:\n        return 26\n    else:\n        return sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    \n    if n % 2 == 0: \n        return sequence(n-1) + 1\n    else: \n        return sequence(n-1) + 2"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # The base case is the end\n    if n == 1:\n        return 1\n    # The possible base cases are:\n    # - there are no moves to make\n    # - there are 0 moves\n    # - there are 1 move possible\n    if n == 0:\n        return 0\n    # There are no moves to make\n    if n == 1:\n        return 1\n    # There are no moves\n    if n == 2:\n        return 1\n    # Check all possible cases\n    if n > 2:\n        #  the number to be returned is the sum of the previous numbers\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        return (sequence(n-1) + sequence(n-2)) % 99\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    p = 0\n    while p!= n: \n        p += 1 \n        print(p) \n        print(n-p) \n        if p == n: \n            print(p) \n    return p\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * (math.pi * (r ** 2))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Input a radius\n    # Output the surface area of the sphere\n    return(4/3.14*3.14*(r**3))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)\ndef surface_area_volume_sphere(r):\n    '''\n    Write a function to find the surface area and volume of a sphere.\n    '''\n    return surface_area_sphere(r) + volume_sphere(r)\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the perimeter of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volume_sphere_perimeter(r):\n    '''\n    Write a function to find the volume and perimeter of a sphere.\n    '''\n    return volume_sphere(r) + perimeter_sphere(r)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 0.5 * math.pi * r * r\n    print (\"The surface area is\", s)\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    s = 4 * math.pi * r ** 2\n    print (\"The surface area is\", s)\ndef surfacearea_triangle(r):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s = (1/2) * (math.pi * r ** 2)\n    print (\"The surface area is\", s)\ndef surfacearea_garea(r):\n    '''\n    Write a function to find the surface area of a garea.\n    '''\n    s = (math.pi * r ** 2)\n    print (\"The surface area is\", s)\ndef surfacearea_diameter(r):\n    '''\n    Write a function to find the surface area of a diameter.\n    '''\n    s = 2 * math.pi * r\n    print (\"The surface area is\", s)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4 * math.pi * r ** 3\n    print (\"The volume is\", v)\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = 4 * math.pi * (r ** 3)\n    print (\"The volume is\", v)\ndef volume_triangle(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v = (1/2) * math.pi * (r ** 2)\n    print (\"The volume is\", v)\ndef volume_garea(r):\n    '''\n    Write a function to find the volume of a garea.\n    '''\n    v = (math.pi * r ** 2)\n    print (\"The volume is\", v)\ndef volume_diameter(r):\n    '''\n    Write a function to find the volume of a diameter.\n    '''\n    v = 2 * math.pi * r\n    print (\"The volume is\", v)\ndef volume_sphere_s(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    s = (1 / 2) * math.pi * r ** 3\n    print (\"The volume is\", s)\ndef volume_cube_s(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    s = (1 / 2) * math.pi * (r ** 3)\n    print (\"The volume is\", s)\ndef volume_triangle_s(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    s = (1 / 2) * math.pi * (r ** 2)\n    print (\"The volume is\", s)\ndef volume_garea_s(r):\n    '''\n    Write a function to find the volume of a garea.\n    '''\n    s = (math.pi * r ** 2)\n    print (\"The volume is\", s)\ndef volume_diameter_s(r):\n    '''\n    Write a function to find the volume of a diameter.\n    '''\n    s = 2 * math.pi * r\n    print (\"The volume is\", s)\ndef volume_sphere_c(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 4 * math.pi * (r ** 3)\n    print (\"The volume is\", c)\ndef volume_cube_c(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    c = 4 * math.pi * (r ** 3)\n    print (\"The volume is\", c)\ndef volume_triangle_c(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    c = 4 * math.pi * (r ** 2)\n    print (\"The volume is\", c)\ndef volume_garea_c(r):\n    '''\n    Write a function to find the volume of a garea.\n    '''\n    c = 4 * math.pi * (r ** 2)\n    print (\"The volume is\", c)\ndef volume_diameter_c(r):\n    '''\n    Write a function to find the volume of a diameter.\n    '''\n    c = 2 * math.pi * r\n    print (\"The volume is\", c)\ndef spherearea(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    s = (1 / 2) * (math.pi * r ** 2)\n    print (\"The surface area is\", s)\ndef cubearea(r):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    s = 4 * math.pi * r ** 2\n    print (\"The surface area is\", s)\ndef trianglearea(r):\n    '''\n    Write a function to calculate the surface area of a triangle.\n    '''\n    s = ((1/2) * (math.pi * r ** 2))\n    print (\"The surface area is\", s)\ndef garea(r):\n    '''\n    Write a function to calculate the surface area of a garea.\n    '''\n    s = (math.pi * r ** 2)\n    print (\"The surface area is\", s)\ndef diameter(r):\n    '''\n    Write a function to calculate the surface area of a diameter.\n    '''\n    s = 2 * math.pi * r\n    print (\"The surface area is\", s)\ndef spherearea_c(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r ** 3)\n    print (\"The surface area is\", s)\ndef cubearea_c(r):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    s = 4 * math.pi * (r ** 3)\n    print (\"The surface area is\", s)\ndef trianglearea_c(r):\n    '''\n    Write a function to calculate the surface area of a triangle.\n    '''\n    s = ((1/2) * (math.pi * r ** 2))\n    print (\"The surface area is\", s)\ndef garea_c(r):\n    '''\n    Write a function to calculate the surface area of a garea.\n    '''\n    s = math.pi * (r ** 2)\n    print (\"The surface area is\", s)\ndef diameter_c(r):\n    '''\n    Write a function to calculate the surface area of a diameter.\n    '''\n    s = 2 * math.pi * r\n    print (\"The surface area is\", s)\ndef spherearea_g(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r ** 3)\n    print (\"The surface area is\", s)\ndef cubearea_g(r):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    s = 4 * math.pi * (r ** 3)\n    print (\"The surface area is\", s)\ndef trianglearea_g(r):\n    '''\n    Write a function to calculate the surface area of a triangle.\n    '''\n    s = ((1/2) * (math.pi * r ** 2))\n    print (\"The surface area is\", s)\ndef garea_g(r):\n    '''\n    Write a function to calculate the surface area of a garea.\n    '''\n    s = math.pi * (r ** 2)\n    print (\"The surface area is\", s)\ndef diameter_g(r):\n    '''\n    Write a function to calculate the surface area of a diameter.\n    '''\n    s = 2 * math.pi * r\n    print (\"The surface area is\", s)\ndef spherearea_d(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r ** 3)\n    print (\"The surface area is\", s)\ndef cubearea_d(r):\n    '''\n    Write a function to calculate th"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r*math.pow(r,2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 2 * 3.14 * (r ** 3)\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14 * (r * r)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    x,y,z = r\n    print(f'The surface area of a sphere with radius {x} is: {math.pi * math.pow(x,2)}')\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 0.5*math.pi*r**2\n    return a\ndef surfacearea_trapezoid(r1,r2):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    delta = r2 - r1\n    if delta < 0.0:\n        print 'ERROR: The trapezoid doesn\\'t have enough space on the boundary'\n    else:\n        a = 0.5*(delta**2)\n        return a\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = r*h\n    a = delta*delta\n    return a\ndef surfacearea_hepta(r,h):\n    '''\n    Write a function to find the surface area of a hepta.\n    '''\n    delta = 2*r*h\n    a = delta*delta\n    return a\ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    delta = 2*r*h\n    a = delta*delta\n    return a\ndef surfacearea_cone2(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r1**2+r2**2)\n    return a\ndef surfacearea_hepta2(r1,r2):\n    '''\n    Write a function to find the surface area of a hepta.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_torus2(r1,r2):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_cone3(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = r*h\n    a = delta*delta\n    return a\ndef surfacearea_hepta3(r,h):\n    '''\n    Write a function to find the surface area of a hepta.\n    '''\n    delta = 2*r*h\n    a = delta*delta\n    return a\ndef surfacearea_torus3(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    delta = 2*r*h\n    a = delta*delta\n    return a\ndef surfacearea_hepta4(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r1**2+r2**2)\n    return a\ndef surfacearea_hepta5(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r1*r2)\n    return a\ndef surfacearea_hepta6(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r1*r2)\n    return a\ndef surfacearea_hepta7(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r1*r2)\n    return a\ndef surfacearea_hepta8(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_hepta9(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_hepta10(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_hepta11(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_hepta12(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_hepta13(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_hepta14(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_hepta15(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_hepta16(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_cone2_minima(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_cone3_minima(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r**2+h**2)\n    return a\ndef surfacearea_cone4_minima(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r1**2+r2**2)\n    return a\ndef surfacearea_cone5_minima(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_cone6_minima(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_cone7_minima(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r**2+h**2)\n    return a\ndef surfacearea_cone8_minima(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = 0.5*(r*h)\n    return a\ndef surfacearea_cone9_minima(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_cone10_minima(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = 2*r1*r2\n    a = delta*delta\n    return a\ndef surfacearea_cone11_minima(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    delta = r1*r2\n    a = delta*delta\n    return "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3 * 3.14159 * r **3)\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi * (r ** 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def is_even(n):\n        return n % 2 == 0\n    def is_odd(n):\n        return n % 2 == 1\n    def get_nth_centered_hexagonal_number(n):\n        if n == 1:\n            return n\n        elif is_odd(n):\n            return n * get_nth_centered_hexagonal_number(n-1)\n        else:\n            return (n * get_nth_centered_hexagonal_number(n-1)) % 256\n    return get_nth_centered_hexagonal_number(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = n//2\n    x = 1 + (a+1)//2\n    y = 1 + (a+1)//2\n    if n==1:\n        return 1\n    else:\n        return (x+y)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # if n is not positive integer\n    if n < 0:\n        return 0\n    # if n is 0\n    if n == 0:\n        return 0\n    # if n is greater than the number of rows\n    if n >= n_rows:\n        return 0\n    # if n is in the square brackets\n    if n in square_brackets:\n        return 0\n    # initialize the result\n    result = 0\n    # if n is divisible by 4\n    if n % 4 == 0:\n        result = n//4\n    # if n is divisible by 6\n    if n % 6 == 0:\n        result = n//6\n    # if n is divisible by 3\n    if n % 3 == 0:\n        result = n//3\n    # if n is divisible by 2\n    if n % 2 == 0:\n        result = n//2\n    # if n is divisible by 1\n    if n % 1 == 0:\n        result = n//1\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(3**0.5))+1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    \n    return n * (n + 1) / 2\n    "
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n > 10**6:\n        return\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    sum_hex_n = 0\n    for i in range(1, n+1):\n        sum_hex_n += i\n        print(sum_hex_n)\n        if i == n+1:\n            break\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**(1/3)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 1:\n        raise ValueError('n must be an odd integer')\n    else:\n        return (n * (n + 1) / 2) + 0.5\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    for key, value in dict2.items():\n        if key in dict1 and key in dict3:\n            dict4[key] = dict1[key] + dict3[key]\n        else:\n            dict4[key] = dict3[key]\n    for key in dict3:\n        dict4[key] = dict2[key]\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict1.copy()\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for key in dict1.keys():\n        merged[key] = dict1[key] + dict2[key] + dict3[key]\n    return merged\n    \ndef merge_dictionaries(dict1, dict2, dict3):\n    '''\n    Write a function to merge dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for key in dict1.keys():\n        merged[key] = dict1[key] + dict2[key] + dict3[key]\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Your Code Here\n    result = {}\n    for i in dict1:\n        if i in dict2:\n            result[i] = dict2[i]\n        else:\n            result[i] = dict3[i]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    dict3 = dict3.copy()\n    \n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n        merged_dict[key].update(dict2[key])\n        merged_dict[key].update(dict3[key])\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_all = dict1.copy()\n    dict_all.update(dict2.copy())\n    dict_all.update(dict3.copy())\n    return dict_all\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary = dict1.copy()\n    dictionary.update(dict2)\n    dictionary.update(dict3)\n    return dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    return dict1\n    # return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    print(freq)\n    \ndef frequency_sorting(list1):\n    '''\n    Write a function to sort the elements of a list.\n    '''\n    sorted_list = sorted(list1)\n    print(sorted_list)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = collections.Counter(list1)\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Creating an empty dictionary, which will map each element in list1 to its frequency\n    frequencies = {}\n    for element in list1:\n        if element in frequencies:\n            frequencies[element] += 1\n        else:\n            frequencies[element] = 1\n    # Iterating over the keys of frequencies dictionary\n    for key in frequencies:\n        # Iterating over the elements of the dictionary\n        for element in frequencies:\n            if frequencies[key] == frequencies[element]:\n                # If both keys are equal, it means that this element is the key itself\n                if element == key:\n                    # If there is a frequency of this element, that frequency is added to the key frequency\n                    if element in frequencies:\n                        frequencies[element] += 1\n                    else:\n                        frequencies[element] = 1\n    return frequencies\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = {}\n    for num in list1:\n        count_dict[num] = list1.count(num)\n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return dict(collections.Counter(list1))\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    my_list = []\n    for value in list1:\n        if value not in my_dict.keys():\n            my_dict[value] = 1\n        else:\n            my_dict[value] += 1\n    for key in my_dict.keys():\n        if my_dict[key] == 1:\n            my_list.append(key)\n    return my_dict, my_list\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    freq_d = dict(freq)\n    return freq_d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # initialize an empty dictionary\n    frequency = {}\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = sorted([int(N), int(N)])[1]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for n in range(1, N+1):\n        if (N-n) < min_num:\n            min_num = n\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    low = -1\n    high = N\n    while high > low:\n        mid = int((high + low) / 2)\n        num = mid\n        if num < N:\n            low = mid\n        else:\n            high = mid\n    return low\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    max_d = 0\n    num = 0\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 2:\n        return N\n    else:\n        return closest_num(N - 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    a = list(N)\n    b = list(N)\n    for i in range(1, len(N)):\n        if b[i] < N[i - 1]:\n            b[i] = N[i]\n        elif b[i] > N[i - 1]:\n            b[i] = N[i - 1]\n    for i in range(1, len(a)):\n        if b[i] < a[i - 1]:\n            a[i] = a[i - 1]\n        elif b[i] > a[i - 1]:\n            a[i] = a[i - 1]\n    return b\n    \n    \n    \n    \ndef find_closest_num(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \ndef closest_num2(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \n    \ndef closest_num3(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \ndef closest_num4(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \ndef closest_num5(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \n    \ndef closest_num6(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \ndef closest_num7(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \ndef closest_num8(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \ndef closest_num9(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \ndef closest_num10(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \ndef closest_num11(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \ndef closest_num12(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] = b[i]\n        elif a[i] > b[i]:\n            a[i] = b[i]\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \ndef closest_num13(N):\n    '''\n    Write a function to find the closest number n that is closest to n.\n    '''\n    a = list(N)\n    b = closest_num(a)\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            a[i] "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    s = list(str(N))\n    closest = s.index(min(s))\n    return min(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = 0\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    smallest = 0\n    for num in num_list:\n        if smallest < num:\n            smallest = num\n        i += 1\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n    elif N % 10 == 0:\n        return closest_num(int(N/10))\n    else:\n        return closest_num(N/10) + 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min = 1000000000\n    for i in range(len(N)):\n        if N[i] < min:\n            min = N[i]\n            closest = i\n    return closest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] + list1[j] > longest:\n                longest = list1[i] + list1[j]\n                return longest\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n            longest_word = word\n    return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for i in list1:\n        if len(i) > count:\n            count = len(i)\n    return count\n        \ndef find_index(str1, words):\n    '''\n    Finds the position of a word in a string\n    '''\n    index = -1\n    for i in range(len(words)):\n        if words[i] == str1:\n            index = i\n            break\n    return index\n        "
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_word = 0\n    for word in list1:\n        if len(word) > max_word:\n            max_word = len(word)\n    return max_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len = 0\n    for i in list1:\n        if len(i) > len:\n            len = len\n    return len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    result = 0\n    for i in list1:\n        result = result + len(i)\n    return result\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    output = 0\n    for x in list1:\n        if len(x) > output:\n            output = len(x)\n    return output\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = []\n    for i in list1:\n        i = i.split()\n        words.append(i)\n    len_word = 0\n    for i in words:\n        if len(i) > len_word:\n            len_word = len(i)\n    return len_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list_len = []\n    for i in list1:\n        len_x = len(i)\n        list_len.append(len_x)\n    return max(list_len)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not sub_str:\n        return False\n    if len(sub_str) == 1:\n        if str1.find(sub_str[0]) == -1:\n            return False\n    else:\n        if str1.find(sub_str[0]) >= 0:\n            return find_substring(str1, sub_str[1:])\n        else:\n            return find_substring(str1, sub_str[1:])\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    m, m_index, n = len(str1), 0, 0\n    for i in range(len(str1)):\n        if str1[i:i+m] == sub_str:\n            m_index = i\n            break\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1[i:i+len(sub_str)] == sub_str for i in range(len(str1)))\n    \n    \ndef find_substring2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1[i:i+len(sub_str)] in sub_str for i in range(len(str1)))\n    \n    \ndef find_substring3(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1[i:i+len(sub_str)] in sub_str for i in range(len(str1)))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = len(str1)\n    s = list(sub_str)\n    for i in s:\n        if i in str1:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # if the string to be searched is present in the list\n    if str1 in sub_str:\n        return True\n    # if the string does not contain the string in the list\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    j = 0\n    for x in sub_str:\n        if x in str1:\n            if j!= len(sub_str)-1:\n                j += 1\n            else:\n                i += 1\n                j = 0\n        else:\n            i += 1\n    if i == len(str1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    # Code here\n    if len(sub_str) > 0:\n        # print(sub_str)\n        for i in range(len(sub_str)):\n            # print(str1)\n            # print(sub_str[i])\n            if str1.find(sub_str[i])!= -1:\n                return True\n    return False\n        \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    j = 0\n    sub_str_set = set(sub_str)\n    while i < len(str1):\n        if str1[i:i+len(sub_str)] in sub_str_set:\n            i = i + len(sub_str)\n            j = j + 1\n        else:\n            i = i + 1\n            sub_str_set.add(str1[i:i+len(sub_str)])\n    return j > len(str1) - 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) < len(str1):\n        return False\n    \n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n%2)==1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True \n    elif n % 2 == 1: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # your code goes here\n    return n%2==0\ndef is_at_position(n):\n    '''\n    Check if the given number is at a specific position in the number.\n    '''\n    # your code goes here\n    if n[0]==0:\n        return True\n    else:\n        if n[1]==0:\n            return True\n        else:\n            return False\ndef find_number(n):\n    '''\n    Find the lowest number in the given array that is neither 0 or 1.\n    '''\n    # your code goes here\n    if n[0]==0:\n        return n[1]\n    else:\n        if n[1]==0:\n            return n[0]\n        else:\n            return find_number(n[1])\ndef check(n):\n    '''\n    Check if the given array is a permutation or not.\n    '''\n    # your code goes here\n    if n[0]!=0 and n[1]!=0:\n        return True\n    else:\n        return False\ndef permutation(n):\n    '''\n    Permute the given array such that all the 0s are at the last position of the array.\n    '''\n    # your code goes here\n    n_a=[]\n    for i in range(len(n)):\n        n_a.append(n[i])\n    for i in range(len(n)):\n        n[i]=n_a[i]\n        n_a[i]=0\n    return n\ndef binary_search(n,start,end,n_value):\n    '''\n    Use binary search to search for the given number in the given array.\n    '''\n    # your code goes here\n    if start<=end:\n        mid=start+(end-start)//2\n        if n[mid]==n_value:\n            return mid\n        elif n[mid]<n_value:\n            return binary_search(n,mid+1,end,n_value)\n        else:\n            return binary_search(n,start,mid-1,n_value)\n    else:\n        return -1\ndef binary_search_recursive(n,start,end,n_value):\n    '''\n    Use binary search to search for the given number in the given array.\n    '''\n    # your code goes here\n    if start<=end:\n        mid=start+(end-start)//2\n        if n[mid]==n_value:\n            return mid\n        elif n[mid]<n_value:\n            return binary_search_recursive(n,mid+1,end,n_value)\n        else:\n            return binary_search_recursive(n,start,mid-1,n_value)\n    else:\n        return -1\ndef binary_search_with_recursion(n,start,end,n_value):\n    '''\n    Use binary search to search for the given number in the given array.\n    '''\n    # your code goes here\n    if start<=end:\n        mid=start+(end-start)//2\n        if n[mid]==n_value:\n            return mid\n        elif n[mid]<n_value:\n            return binary_search_with_recursion(n,mid+1,end,n_value)\n        else:\n            return binary_search_with_recursion(n,start,mid-1,n_value)\n    else:\n        return -1\ndef count_unique_numbers(n):\n    '''\n    Count the number of times the elements of the given array are unique.\n    '''\n    # your code goes here\n    num_unique=0\n    for i in range(len(n)):\n        for j in range(len(n)-i):\n            if n[j]==n[j+1]:\n                num_unique+=1\n    return num_unique\ndef count_unique_numbers_recursive(n,start,end):\n    '''\n    Count the number of times the elements of the given array are unique.\n    '''\n    # your code goes here\n    if start<=end:\n        mid=start+(end-start)//2\n        if n[mid]==n[mid+1]:\n            num_unique+=1\n        if n[mid]==n[mid-1]:\n            num_unique+=1\n        num_unique_recursive(n,mid+1,end,n,n_unique)\n        num_unique_recursive(n,mid,mid-1,n,n_unique)\n    else:\n        return num_unique_recursive(n,0,len(n)-1,n,n_unique)\ndef num_unique_recursive(n,start,end,n_unique,count):\n    '''\n    Count the number of times the elements of the given array are unique.\n    '''\n    # your code goes here\n    if start<=end:\n        mid=start+(end-start)//2\n        if n[mid]==n[mid+1]:\n            count+=1\n        if n[mid]==n[mid-1]:\n            count+=1\n        num_unique_recursive(n,mid+1,end,n_unique,count)\n        num_unique_recursive(n,mid,mid-1,n_unique,count)\n    else:\n        return count\ndef num_unique_list(n,n_list):\n    '''\n    Count the number of times the elements of the given array are unique.\n    '''\n    # your code goes here\n    num_unique=0\n    for i in range(len(n)):\n        for j in range(len(n)):\n            if n[i]==n[j]:\n                num_unique+=1\n    n_list.append(num_unique)\n    return n_list\ndef remove_duplicates(n):\n    '''\n    Remove duplicate numbers from the given array.\n    '''\n    # your code goes here\n    n_new=[]\n    for i in n:\n        if i not in n_new:\n            n_new.append(i)\n    return n_new\ndef merge_sort(n):\n    '''\n    Sort the given array such that all numbers are in the same order as long as they are\n    not already sorted.\n    '''\n    # your code goes here\n    if len(n)>1:\n        mid=len(n)//2\n        left_n=n[:mid]\n        right_n=n[mid:]\n        merge_sort(left_n)\n        merge_sort(right_n)\n        i=0\n        j=0\n        k=0\n        while i<len(left_n) and j<len(right_n):\n            if left_n[i]<=right_n[j]:\n                n[k]=left_n[i]\n                i=i+1\n            else:\n                n[k]=right_n[j]\n                j=j+1\n            k=k+1\n        while i<len(left_n):\n            n[k]=left_n[i]\n            i=i+1\n            k=k+1\n        while j<len(right_n):\n            n[k]=right_n[j]\n            j=j+1\n            k=k+1\n    return n\ndef has_cycle(n,ind):\n    '''\n    Return whether the given array contains a cycle in it.\n    '''\n    # your code goes here\n    if len(n)==0:\n        return False\n    for i in range(len(n)):\n        if ind[i]==-1:\n            return False\n    return True\ndef is_missing(n):\n    '''\n    Find whether the given array contains a missing number.\n    '''\n    # your code goes here\n    for i in range(len(n)):\n        if n[i]!=0:\n            return True\n    return False\ndef is_empty(n):\n    '''\n    Return whether the given array is empty.\n    '''\n    # your code goes here\n    for i in range(len(n)):\n        if n[i]!=0:\n            return False\n    return True\ndef not_empty(n):\n    '''\n    Return whether the given array is not empty.\n    '''\n    # your code goes here\n    fo"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Write your code here\n    if (n % 2) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    def is_under(num): \n        '''\n        Write a function to check whether the given number is under the given limit or not.\n        '''\n        if num < 1: \n            return False\n        if num % 2!= 0: \n            return False\n        else: \n            return True\n        \n    if n <= 2: \n        return True\n    \n    if is_under(n//2): \n        return False\n    \n    if is_under((n+1)//2): \n        return False\n    \n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n+1): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    elif n % 2 == 0: \n        return is_undulating(n//2)\n    else: \n        return is_undulating(3*n+1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 10 == 0 and n % 100!= 0\n    \n    \ndef main():\n    n = int(input())\n    if is_undulating(n):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # YOUR CODE HERE\n    if b == 0:\n        return 1\n    return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        print(a)\n        return a\n    else:\n        return a*power(b,a-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    elif b==1:\n        return a*a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    else:\n        return a*power(a,b-1)\n    "
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = None\n    second = None\n    for item in test_list:\n        if second == None or item[1] < second[1]:\n            second = item\n            second[1] = smallest\n            smallest = second\n        else:\n            smallest = second\n    return smallest[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def minimum(test_list, value):\n        minimum = value\n        for i in range(len(test_list)):\n            if minimum > test_list[i][1]:\n                minimum = test_list[i][1]\n        return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    d=dict()\n    for i in test_list:\n        if i[1] in d.keys():\n            if i[0]<d[i[1]]:\n                d[i[1]]=i[0]\n        else:\n            d[i[1]]=i[0]\n    return min(d.items(), key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Convert tuple to list\n    smallest = []\n    smallest_val = float('inf')\n    for t in test_list:\n        if t[1] < smallest_val:\n            smallest_val = t[1]\n            smallest = [t[0]]\n        elif t[1] == smallest_val:\n            smallest.append(t[0])\n    return smallest[0]\ndef index_minimum_value_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Convert tuple to list\n    smallest = []\n    smallest_val = float('inf')\n    for t in test_list:\n        if t[1] < smallest_val:\n            smallest_val = t[1]\n            smallest = [t[0]]\n        elif t[1] == smallest_val:\n            smallest.append(t[0])\n    return smallest[0]\ndef index_minimum_value_list_n(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Convert tuple to list\n    smallest = []\n    smallest_val = float('inf')\n    for t in test_list:\n        if t[1] < smallest_val:\n            smallest_val = t[1]\n            smallest = [t[0]]\n        elif t[1] == smallest_val:\n            smallest.append(t[0])\n    return smallest[0]\ndef index_minimum_value_list_n_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Convert tuple to list\n    smallest = []\n    smallest_val = float('inf')\n    for t in test_list:\n        if t[1] < smallest_val:\n            smallest_val = t[1]\n            smallest = [t[0]]\n        elif t[1] == smallest_val:\n            smallest.append(t[0])\n    return smallest[0]\ndef index_maximum_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_n(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_n_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_n_2_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_list_n(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_list_n_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_list_n_2_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_list_n_2_2_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_list_n_2_2_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    for t in test_list:\n        if t[1] > maxi_val:\n            maxi_val = t[1]\n            maxi = [t[0]]\n        elif t[1] == maxi_val:\n            maxi.append(t[0])\n    return maxi[0]\ndef index_maximum_value_list_n_2_2_2_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Convert tuple to list\n    maxi = []\n    maxi_val = float('-inf')\n    fo"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        index = 0\n        value = test_list[0]\n        for i in range(1,len(test_list)):\n            if value[1] < test_list[i][1]:\n                value = test_list[i]\n                index = i\n        return value[0]"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort()\n    return test_list[0][0],test_list[0][1]\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = test_list[0][1]\n    index_to_find = 1\n    for index, element in enumerate(test_list):\n        if element[1] < min:\n            min = element[1]\n            index_to_find = index\n    return index_to_find \n    \ndef index_second_largest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the second largest value of the tuple with the smallest first value.\n    '''\n    second_largest = test_list[0][1]\n    index_to_find = 1\n    for index, element in enumerate(test_list):\n        if element[1] > second_largest:\n            second_largest = element[1]\n            index_to_find = index\n    return index_to_find\n    \ndef index_third_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the third smallest value of the tuple with the smallest first value.\n    '''\n    third_smallest = test_list[0][1]\n    index_to_find = 1\n    for index, element in enumerate(test_list):\n        if element[1] < third_smallest:\n            third_smallest = element[1]\n            index_to_find = index\n    return index_to_find\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n    return min_value\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    return min(test_list, key = itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def smallest_second(element):\n        return element[1]\n    result = min(test_list, key=smallest_second)\n    return result[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = []\n    for i in lst:\n        if len(i) < len(min):\n            min = i\n    return min\n    \n    \nlst = [3, 4, 5, 6, 8, 2]\nprint(Find_Min_Length(lst))"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    my_min = lst[0][0]\n    for item in lst:\n        if item[0] < my_min:\n            my_min = item[0]\n    return my_min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    smallest_length = 0\n    for x in lst:\n        if len(x) < smallest_length:\n            smallest_length = len(x)\n    return smallest_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0][1]\n    for i in range(len(lst)):\n        if lst[i][1] < min:\n            min = lst[i][1]\n            index = i\n    return index\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000\n    small_list = lst\n    #print(small_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    #create empty list\n    min_list = []\n    \n    #iterate through all lists\n    for i in lst:\n        #append list elements to array\n        min_list.append(i[0])\n    \n    #get length of array\n    length = len(min_list)\n    \n    #return length\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return (len(lst[0]))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return len(min(lst,key=len))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            lst.append(lst[j]+lst[j])\n    lst.sort()\n    min = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return len(lst)-1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0]\n    for el in lst[1:]:\n        if len(el) < len(min_len):\n            min_len = el\n    return min_len\n    \n    \n    "
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return n/2 if n%2 else n//2\n    \ndef prime_factors(n):\n    '''\n    Write a python function that finds the prime factors of an integer.\n    '''\n    return [i for i in range(1, n+1) if n%i==0]\n    \ndef largest_prime_factor(n):\n    '''\n    Write a python function that finds the largest prime factor of an integer.\n    '''\n    return max(prime_factors(n)) if n%prime_factors(n)==0 else n\n    \ndef smallest_prime_factor(n):\n    '''\n    Write a python function that finds the smallest prime factor of an integer.\n    '''\n    return min(prime_factors(n)) if n%prime_factors(n)==0 else n\n    \ndef power_set(n):\n    '''\n    Write a python function that returns the power set of an integer.\n    '''\n    return set(range(1, n+1)) if n%2 else set(range(1, n//2+1))\n    \ndef common_prefix(seq):\n    '''\n    Write a python function that returns the common prefix of an integer sequence.\n    '''\n    return seq[0] if len(seq)==1 else seq[0] if seq[1]>seq[0] else seq[1]\n    \ndef common_suffix(seq):\n    '''\n    Write a python function that returns the common suffix of an integer sequence.\n    '''\n    return seq[-1] if len(seq)==1 else seq[-1] if seq[0]>seq[-1] else seq[0]\n    \ndef n_ones(n):\n    '''\n    Write a python function that returns the number of ones in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('1')\n    \ndef n_tens(n):\n    '''\n    Write a python function that returns the number of tens in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('10')\n    \ndef n_fives(n):\n    '''\n    Write a python function that returns the number of fives in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('11')\n    \ndef n_twos(n):\n    '''\n    Write a python function that returns the number of twos in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('10')\n    \ndef n_threes(n):\n    '''\n    Write a python function that returns the number of threes in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('11')\n    \ndef n_ones_and_tens(n):\n    '''\n    Write a python function that returns the number of ones and tens in the binary representation of a positive integer n.\n    '''\n    return n_ones(n) + n_tens(n)\n    \ndef n_fives_and_twos(n):\n    '''\n    Write a python function that returns the number of fives and twos in the binary representation of a positive integer n.\n    '''\n    return n_fives(n) + n_twos(n)\n    \ndef n_threes_and_ones(n):\n    '''\n    Write a python function that returns the number of threes and ones in the binary representation of a positive integer n.\n    '''\n    return n_threes(n) + n_ones(n)\n    \ndef n_ones_and_threes(n):\n    '''\n    Write a python function that returns the number of ones and threes in the binary representation of a positive integer n.\n    '''\n    return n_ones(n) + n_threes(n)\n    \ndef n_ones_and_fives(n):\n    '''\n    Write a python function that returns the number of ones and fives in the binary representation of a positive integer n.\n    '''\n    return n_ones(n) + n_fives(n)\n    \ndef n_ones_and_twos_and_threes(n):\n    '''\n    Write a python function that returns the number of ones and threes and fives and twos in the binary representation of a positive integer n.\n    '''\n    return n_ones(n) + n_twos(n) + n_threes(n) + n_fives(n)\n    \ndef n_ones_and_fives_and_twos(n):\n    '''\n    Write a python function that returns the number of ones and fives and twos and threes and fives and twos in the binary representation of a positive integer n.\n    '''\n    return n_ones(n) + n_fives(n) + n_twos(n) + n_threes(n)\n    \ndef n_ones_and_threes_and_fives(n):\n    '''\n    Write a python function that returns the number of ones and threes and fives and twos and threes and fives in the binary representation of a positive integer n.\n    '''\n    return n_ones(n) + n_threes(n) + n_fives(n) + n_twos(n)\n    \ndef n_ones_and_threes_and_twos_and_fives(n):\n    '''\n    Write a python function that returns the number of ones and threes and fives and twos and threes and fives and twos and fives in the binary representation of a positive integer n.\n    '''\n    return n_ones(n) + n_threes(n) + n_twos(n) + n_threes(n) + n_fives(n)\n    \ndef n_zeros(n):\n    '''\n    Write a python function that returns the number of zeroes in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('0')\n    \ndef n_tens_and_ones(n):\n    '''\n    Write a python function that returns the number of ones and tens in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('1')\n    \ndef n_fives_and_twos_and_ones(n):\n    '''\n    Write a python function that returns the number of fives and twos and ones in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('10')\n    \ndef n_fives_and_twos_and_threes(n):\n    '''\n    Write a python function that returns the number of fives and twos and threes and fives and twos in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('11')\n    \ndef n_fives_and_twos_and_fives(n):\n    '''\n    Write a python function that returns the number of fives and twos and fives in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('10') + bin(n).count('11')\n    \ndef n_fives_and_twos_and_twos(n):\n    '''\n    Write a python function that returns the number of fives and twos and twos in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('10') + bin(n).count('11') + bin(n).count('10')\n    \ndef n_fives_and_threes_and_twos_and_ones(n):\n    '''\n    Write a python function that returns the number of fives and threes and twos and ones and fives and twos in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('10') + bin(n).count('11') + bin(n).count('10') + bin(n).count('11')\n    \ndef n_fives_and_twos_and_threes_and_ones(n):\n    '''\n    Write a python function that returns the number of fives and twos and threes and ones and fives and twos and ones in the binary representation of a positive integer n.\n    '''\n    return bin(n).count('10') + bin(n).count('11') + bin"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #Start with 0\n    divisors = 0\n    #Loop through all multiples of the input\n    for i in range(1, n + 1):\n        #If the input is divisible by both 1 and n\n        if n % i == 0 and i!= n:\n            #increment the counter\n            divisors += 1\n    #return the number of divisors\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c=0\n    for i in range(1,n+1):\n        if n%i==0:\n            c+=1\n    return c\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return 2 + sum(divisor(n//2) for n in range(n-1, n//2-1, -1))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, int(n) + 1):\n        if n % i == 0:\n            divisors += 1\n            divisors += 1\n        else:\n            divisors = 1\n    divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    else:\n        return 3\ndef sum_numbers(n):\n    '''\n    Write a python function that calculates the sum of the numbers in a given list\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_numbers(n-1)\ndef main():\n    '''\n    Write a python function to find the sum of the natural numbers in a given list.\n    '''\n    print(sum_numbers(int(input('Enter a number: '))))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n        if count == 2:\n            return count\n    else:\n        return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            div+=1\n    print('The divisors of',n,'are',div)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if j in dict1:\n                dict1[j] += 1\n            else:\n                dict1[j] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    list_length = len(list1)\n    for item in list1:\n        for item1 in item:\n            if item1 in frequency:\n                frequency[item1] += 1\n            else:\n                frequency[item1] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # create an empty dictionary\n    frequency_dict = {}\n    \n    # iterate through each element in the list\n    for el in list1:\n        # iterate through each element\n        for el1 in el:\n            # add to the dictionary if key is not in the dictionary\n            if el1 not in frequency_dict:\n                frequency_dict[el1] = 0\n            # increase the count of this element\n            frequency_dict[el1] += 1\n    \n    # return the dictionary\n    return frequency_dict\n    "
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq_dic:\n                freq_dic[list1[i][j]]+=1\n            else:\n                freq_dic[list1[i][j]]=1\n    return freq_dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # get list of lists\n    list_of_lists = []\n    for item in list1:\n        list_of_lists.append(item)\n    # print(list_of_lists)\n    # get frequency of each item in list_of_lists\n    freq_dict = {}\n    for item in list_of_lists:\n        if item not in freq_dict.keys():\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    # print(freq_dict)\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] = d[item] + 1\n    return d\n    \ndef naive_count(list1):\n    '''\n    Write a function to count the number of occurrences of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] = count[item] + 1\n    return count\n    \ndef vowel_count(list1):\n    '''\n    Write a function to count the number of vowels contained in a string, returned in a dictionary.\n    '''\n    count = 0\n    for item in list1:\n        if item[0] in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i]+=1\n        else:\n            freq[i] = 1\n    return freq\n    "
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_d = {}\n    for i in list1:\n        for j in i:\n            if j not in freq_d:\n                freq_d[j] = 0\n            freq_d[j] += 1\n    return freq_d\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # WRITE YOUR CODE HERE\n    \n    \n    # get the length of the list\n    n = len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    number_list = []\n    for i in range(len(numbers)):\n        number_list.append(numbers[i])\n    temp_list = []\n    for i in range(len(number_list)):\n        temp_list.append(number_list[i])\n    for i in range(len(temp_list)):\n        for j in range(len(temp_list)):\n            if temp_list[i]!= 0:\n                if i < j:\n                    temp_list[i] = temp_list[i] * temp_list[j]\n    return temp_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplication = 1\n    for num in numbers:\n        multiplication *= num\n    return multiplication\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # YOUR CODE HERE\n    # Write your code here\n    if len(numbers) == 0:\n        return 0\n    else:\n        result = numbers[0]\n        for number in numbers[1:]:\n            result = result * number\n        return result\n        \nprint(multiply_num([1, 2, 3, 4, 5]))\nprint(multiply_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(multiply_num([1, 2, 3, 4, 5, 6]))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result*num\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = []\n    l = len(numbers)\n    for num in numbers:\n        res.append(num * l)\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    while numbers:\n        multiply = numbers.pop(0)\n        numbers.append(multiply)\n    return multiply\n        \ndef max_num(numbers):  \n    '''\n    Write a function to return the maximum of all the numbers in a list.\n    '''\n    max = numbers[0]\n    for num in numbers:\n        if num > max:\n            max = num\n    return max\n            \ndef min_num(numbers):  \n    '''\n    Write a function to return the minimum of all the numbers in a list.\n    '''\n    min = numbers[0]\n    for num in numbers:\n        if num < min:\n            min = num\n    return min\n    \ndef sum_of_list(numbers):  \n    '''\n    Write a function to return the sum of all the numbers in a list.\n    '''\n    sum = 0\n    for num in numbers:\n        sum = sum + num\n    return sum\n    \ndef list_sum(numbers):  \n    '''\n    Write a function to return the sum of all the numbers in a list.\n    '''\n    sum = numbers[0]\n    for num in numbers:\n        sum = sum + num\n    return sum\n    \ndef average_of_list(numbers):  \n    '''\n    Write a function to return the average of all the numbers in a list.\n    '''\n    average = 0\n    for num in numbers:\n        average = average + num\n    return average/len(numbers)\n    \ndef do_calc(numbers):  \n    '''\n    Write a function to return the smallest number in a list.\n    '''\n    min = numbers[0]\n    for num in numbers:\n        if num < min:\n            min = num\n    return min\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = []\n    for num in numbers:\n        res.append(num * len(numbers))\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # creating a list to store the numbers\n    result = []\n    # iterating through the list\n    for i in numbers:\n        # iterating through the list\n        for k in range(len(result)):\n            # dividing the list\n            result[k] = result[k] / i\n        # appending the result to the list\n        result.append(result[k])\n    # returning the result\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return \"ERROR: Negative values not allowed\"\n    else:\n        binary = bin(n)\n        return binary[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = str(n)\n    res = []\n    for c in s:\n        if c == '1':\n            res.append('0')\n        else:\n            res.append('1')\n    return ''.join(res)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n!= 0:\n        binary.insert(0, n % 2)\n        n = n // 2\n    return ''.join([str(elem) for elem in binary])"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '' \n    else: \n        return str(bin(n)[2:])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = bin(n)[2:]\n    return s.zfill(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\").zfill(8)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert(isinstance(n, int))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    binary_n = bin(n)[2:]\n    return binary_n.zfill(8)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    converted_num = int(n)\n    result = ''\n    while converted_num!= 0:\n        remainder = converted_num % 2\n        result = str(remainder) + result\n        converted_num = converted_num // 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_str = ''\n    while n: \n        n, mod = divmod(n, 2)\n        if mod: \n            bin_str += '0'\n        else: \n            bin_str += '1'\n    return bin_str\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        p1 = num // 10\n        p2 = num % 10\n        if p1 == p2:\n            return p1\n        else:\n            num = num * 10 + p1\n    return\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    while (i * i <= num):\n        if (num % i == 0):\n            return num // i\n        i += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def next_palindrome(a,b):\n        if a+b==1:\n            return a,b\n        if a+b==2:\n            return a+b,2\n        if a+b==3:\n            return a+b,3\n        return next_palindrome(a,b+1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    dp = [0,1]\n    for i in range(2,num+1):\n        dp.append(dp[i-1]+dp[i-2])\n    return dp[num]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start = 1\n    while start < num:\n        if num % start == 0:\n            return start\n        start += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        print(\"ERROR: Negative numbers are not allowed. Please try again!\")\n        return\n    if num < 100:\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    min_palindrome = None\n    while True:\n        mid = (num - 1) // 2\n        if num % mid == 0:\n            return mid\n        elif num % mid == 1:\n            min_palindrome = mid\n            break\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while num < 999999:\n        num = num * 3 + 1\n        if num % 3 == 0:\n            return num\n        \ndef next_smallest_palindrome_out_of_range(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while num < 1000000:\n        num = num * 3 + 1\n        if num % 3 == 0:\n            return num\n        \ndef test():\n    assert next_smallest_palindrome(10000) == 199\n    assert next_smallest_palindrome(100000) == 299\n    assert next_smallest_palindrome(90000) == 199\n    assert next_smallest_palindrome(90000) == 299\n    assert next_smallest_palindrome(0) == 0\n    assert next_smallest_palindrome_out_of_range(99999) == 99\n    assert next_smallest_palindrome_out_of_range(99999) == 99\n    assert next_smallest_palindrome_out_of_range(99) == 0\n    assert next_smallest_palindrome_out_of_range(9999) == 0\n    assert next_smallest_palindrome_out_of_range(9999) == 0\n    assert next_smallest_palindrome_out_of_range(9) == 0\n    assert next_smallest_palindrome_out_of_range(1) == 0\n    assert next_smallest_palindrome_out_of_range(2) == 0\n    assert next_smallest_palindrome_out_of_range(3) == 0\n    assert next_smallest_palindrome_out_of_range(5) == 0\n    assert next_smallest_palindrome_out_of_range(9) == 0\n    assert next_smallest_palindrome_out_of_range(100) == 0\n    assert next_smallest_palindrome_out_of_range(999) == 0\n    assert next_smallest_palindrome_out_of_range(9999) == 0\n    assert next_smallest_palindrome_out_of_range
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    \n    elif num == 1:\n        return 1\n    \n    elif num == 2:\n        return 2\n    \n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return i\n    \n    return 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # 2. Calculate the largest palindrome of num\n    max_palindrome = (num//2)**2\n    # 3. If num is divisible by 2^i, then i is a palindrome of num\n    # i.e. (2^i) * 2^i = 2^i * 2^i\n    if num > 1:\n        palindrome_divisors = []\n        for i in range(2, int(math.sqrt(num))+1):\n            if (num % i) == 0:\n                palindrome_divisors.append(i)\n                palindrome_divisors.append(int(math.sqrt(num) / i))\n                palindrome_divisors.append((int(math.sqrt(num) / i) * 2)**2)\n        # 4. If num is divisible by 2^i, then i is a palindrome of 2^i\n        # i.e. (2^i) * 2^i = 2^i * 2^i\n        if len(palindrome_divisors) > 1:\n            p_num = sum(palindrome_divisors)\n            if p_num % 2 == 0:\n                if num % p_num == 0:\n                    return 2**num - 1\n                else:\n                    return 2**num\n            else:\n                if num % p_num == 0:\n                    return 2**num - 1\n                else:\n                    return 2**num\n    else:\n        if num % 2 == 0:\n            return num**2\n        else:\n            return 2**num\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # base case\n    if k == 0:\n        return arr[0]\n    elif k == 1:\n        return arr[k-1]\n    else:\n        # set the pivot point to the first element\n        pivot = arr[k//2]\n        # loop through till the end of the array\n        for i in range(k//2,len(arr)):\n            # if the element is smaller than the pivot then swap the index\n            if arr[i] < pivot:\n                arr[i], arr[k-1] = arr[k-1], arr[i]\n                k = k//2\n            else:\n                break\n    # return the kth element in the result array\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    return kth_element(arr[1:], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    if k > len(arr):\n        return\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < k:\n            left = mid + 1\n        elif arr[mid] > k:\n            right = mid\n        else:\n            return arr[mid]\n    return arr[left]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Your code here\n    return arr[k-1]\n    \nprint(kth_element([1,3,4,7,2,5,8,6], 4))\nprint(kth_element([1,3,4,7,2,5,8,6], 4))\nprint(kth_element([1,3,4,7,2,5,8,6], 5)"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, low, high):\n        i = (low-1)        # index of smaller element\n        pivot = arr[high]        # pivot\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # make list of words\n    words = word.split(\"_\")\n    # capitalize first letter\n    return words[0] + \"\".join(x.capitalize() for x in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    switcher = {\n        'A': 'a',\n        'B': 'b',\n        'C': 'c',\n        'D': 'd',\n        'E': 'e',\n        'F': 'f',\n        'G': 'g',\n        'H': 'h',\n        'I': 'i',\n        'J': 'j',\n        'K': 'k',\n        'L': 'l',\n        'M':'m',\n        'N': 'n',\n        'O': 'o',\n        'P': 'p',\n        'Q': 'q',\n        'R': 'r',\n        'S':'s',\n        'T': 't',\n        'U': 'u',\n        'V': 'v',\n        'W': 'w',\n        'X': 'x',\n        'Y': 'y',\n        'Z': 'z'\n    }\n    return ''.join([switcher.get(word[0], word[0].upper()) + word[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:].lower()"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first = word.split('_')[0]\n    return first + ''.join(x.capitalize() for x in word.split('_')[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == \"\":\n        return \"\"\n    else:\n        return word[0].lower() + snake_to_camel(word[1:]"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_', '').replace('-', '')\n    word = word.replace(' ', '').lower()\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camelcase_word = ''\n    for i in word:\n        if i.isupper():\n            camelcase_word += i.lower()\n        elif i.islower():\n            camelcase_word += i.upper()\n        elif i.isdigit():\n            camelcase_word += i\n    return camelcase_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(i.capitalize() for i in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n==0 or m==0): return n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    list_euler = []\n    for i in range(m):\n        for j in range(n-1):\n            if n - 2*i == j:\n                list_euler.append(n - 1)\n    for i in list_euler:\n        if m - 2*i + 1 == n - 1:\n            print(i)\n            break\n    else:\n        print(\"The Eulerian number is\", n - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n == m): \n        return n\n    else: \n        return eulerian_num(n, m + 1) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num_list = []\n    num_list.append(m)\n    while(len(num_list) < n):\n        num_list.append(m + m*(m+1)//2)\n    return num_list[n-1]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    for i in range(n, m):\n        if not find_comb(n, m, i):\n            return -1\n        else:\n            find_comb(n, m, i)\n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    counter = 0\n    if n == m:\n        return counter\n    else:\n        eulerian_nodes = set(map(int, list(str(n))))\n        eulerian_edges = set(map(int, list(str(m))))\n        for elem in eulerian_nodes:\n            for edge in eulerian_edges:\n                if elem == edge:\n                    counter += 1\n        return counter\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    if n == m - 1:\n        return n + 1\n    if n == 0:\n        return 0\n    a = n\n    for _ in range(m - 2):\n        a = (2 * a) % m\n        a = (((2 * a) - 1) % m)\n        a = (((2 * a) + 1) % m)\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    x = []\n    for i in range(m):\n        x.append(i)\n    for i in range(m):\n        x.append(m + i)\n    x.reverse()\n    #print(x)\n    #print(n)\n    #print(m)\n    if (n == m):\n        return n\n    if (m == 0):\n        return m\n    else:\n        #print(x)\n        return eulerian_num(n - 1, x[0]) + eulerian_num(n - 1, x[m])\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # n and m are positive integers\n    if(n < m):\n        return 0\n    # if a(n, m) is 1, return it\n    if(n == m): \n        return 1\n    # find a(n, m) = a(n-1, m-1) + a(n-1, m-1)\n    a = (n-1)*(m-1)\n    # return the result\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    import math\n    eulerian_number = []\n    for i in range(1,n+1):\n        if math.gcd(i, n) == 1:\n            eulerian_number.append(i)\n    if len(eulerian_number) == 1:\n        return eulerian_number[0]\n    else:\n        return eulerian_number[0]**2 + eulerian_number[1] * math.gcd(n,m)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            output_list.append(input_list[i][j])\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = []\n    for sublist in input_list:\n        list_of_lists.append(sublist)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # return a sorted list\n    return sorted(input_list, key = lambda x: x.split() )\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in input_list:\n        new_list.append(i[::-1])\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    sublist_num = len(input_list)\n    for index in range(sublist_num):\n        if index % 2 == 0:\n            sorted_list.append(input_list[index])\n        else:\n            sorted_list.append(input_list[index][::-1])\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l_sorted = []\n    for l in input_list:\n        for i in l:\n            l_sorted.append(i)\n    l_sorted = sorted(l_sorted)\n    input_list = [x for x in input_list if x]\n    return input_list, l_sorted\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        for s in sublist:\n            new_list.append(s)\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(input_list)\n    # Create an empty output list\n    output_list = []\n    # Iterate through each sub-list\n    for index in range(length):\n        # Create a list with every elements of the sub-list sorted\n        sub_list = [str(value) for value in input_list[index]]\n        output_list.append(sub_list)\n    # Return the output list\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # LISTS = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]\n    LISTS = input_list\n    LISTS.sort()\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if i == True:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0 \n    for i in lst:\n        if i:\n            total += 1\n    return total\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    num_of_true = 0\n    for i in range(0, len(lst)):\n        if lst[i] == True:\n            num_of_true += 1\n    return num_of_true\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    t=0\n    for i in lst:\n        if i:\n            t += 1\n    return t\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_list = []\n    for elem in lst:\n        if elem:\n            count_list.append(1)\n        else:\n            count_list.append(0)\n    return count_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    num = 0 \n    for i in range(len(lst)):\n        if(lst[i] == True):\n            num = num+1\n    return num\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Check if the list is not empty\n    if len(lst) <= 0:\n        return 0\n    # Check for 1 in the list\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            return 1 + count(lst[0:i])\n    # Return 0 if the list is empty\n    return 0"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    # initialize count variable\n    count = 0\n    \n    # iterate through list\n    for num in lst:\n        \n        # if true then increment count\n        if num:\n            count += 1\n        \n    # return count\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i == True:\n            c += 1\n    return c\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    # Your code here\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # write your code here\n    if type(test_tup[0]) is tuple:\n        test_list.append(test_tup)\n    else:\n        raise TypeError('tuple must be a tuple')\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(0, len(test_tup)):\n        test_list.append(test_tup[i])\n        print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list)!= len(test_tup):\n        print(\"The given list and tuple have different size.\")\n        return\n    for i in range(len(test_list)):\n        test_list[i] = test_tup[i]\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    add_list = []\n    for i in test_list:\n        add_list.append(i)\n    for j in test_tup:\n        add_list.append(j)\n    add_list.append(test_tup)\n    return add_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        return num2\n    if num2 is None:\n        return num1\n    if num3 is None:\n        return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res=[]\n    while num1 or num2 or num3:\n        if num1:\n            res.append(num1.pop())\n        if num2:\n            res.append(num2.pop())\n        if num3:\n            res.append(num3.pop())\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.append(num2[0])\n    num1.append(num2[1])\n    num1.append(num2[2])\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    merged_list = []\n    for i in range(len(num1)):\n        if i>0:\n            if num1[i] > num2[i]:\n                heapq.heappush(merged_list,[num1[i],num2[i]])\n            else:\n                heapq.heappush(merged_list,[num2[i],num1[i]])\n        elif i==0:\n            heapq.heappush(merged_list,[num1[i],num2[i]])\n        elif i==len(num1)-1:\n            heapq.heappush(merged_list,[num1[i],num2[i]])\n        else:\n            heapq.heappush(merged_list,[num2[i],num1[i]])\n    merged_list.sort()\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_of_numbers = []\n    if(num1!=None):\n        heapq.heappush(list_of_numbers,num1)\n    if(num2!=None):\n        heapq.heappush(list_of_numbers,num2)\n    if(num3!=None):\n        heapq.heappush(list_of_numbers,num3)\n    while(len(list_of_numbers)>1):\n        list_of_numbers[0],list_of_numbers[1] = list_of_numbers[1],list_of_numbers[0]\n        list_of_numbers[1],list_of_numbers[2] = list_of_numbers[2],list_of_numbers[1]\n        list_of_numbers[2],list_of_numbers[3] = list_of_numbers[3],list_of_numbers[2]\n    return list_of_numbers[0]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        return num3\n    if num2 is None:\n        return num3\n    if num3 is None:\n        return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    output = []\n    a = 0\n    b = 0\n    c = 0\n    while a < len(num1) and b < len(num2) and c < len(num3):\n        if num1[a] < num2[b] < num3[c]:\n            output.append(num1[a])\n            a += 1\n            b += 1\n            c += 1\n        elif num1[a] < num2[b] < num3[c]:\n            b += 1\n            output.append(num2[b])\n            c += 1\n        elif num1[a] < num2[b] < num3[c]:\n            output.append(num3[c])\n            c += 1\n            b += 1\n        elif num1[a] < num2[b] < num3[c]:\n            output.append(num3[c])\n            c += 1\n            b += 1\n        elif num1[a] < num2[b] < num3[c]:\n            output.append(num1[a])\n            a += 1\n        else:\n            output.append(num2[b])\n            b += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #Takes three lists.\n    result=[]\n    result.extend(num1)\n    result.extend(num2)\n    result.extend(num3)\n    #Takes the largest and smallest value in the list.\n    min_value=max(result)\n    min_index=result.index(min_value)\n    max_value=min(result)\n    max_index=result.index(max_value)\n    return max_value, min_value, max_index, min_index\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num1\n    elif len(num3) == 0:\n        return num1+num2\n    \n    curr_1 = heapq.heappush(num1,num3[0])\n    curr_2 = heapq.heappush(num2,curr_1)\n    \n    merged_list = curr_1+curr_2\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(num1) and j < len(num2) and len(num3) > 0:\n        if num1[i] > num2[j] and num1[i] > num3[0]:\n            merged_list.append(num1[i])\n            i = i + 1\n        elif num2[j] > num1[i] and num2[j] > num3[0]:\n            merged_list.append(num2[j])\n            j = j + 1\n        elif num3[0] > num1[i] and num3[0] > num2[j]:\n            merged_list.append(num3[0])\n            j = j + 1\n        else:\n            i = i + 1\n            j = j + 1\n            \n    while i < len(num1):\n        merged_list.append(num1[i])\n        i = i + 1\n        \n    while j < len(num2):\n        merged_list.append(num2[j])\n        j = j + 1\n    \n    while num3[0] > num1[i] and num3[0] > num2[j]:\n        merged_list.append(num3[0])\n        i = i + 1\n        \n    while num3[0] > num1[i] and num3[0] > num2[j]:\n        merged_list.append(num3[0])\n        j = j + 1\n    \n    while num3[0] > num1[i] and num3[0] > num2[j]:\n        merged_list.append(num3[0])\n        i = i + 1\n        \n    while num3[0] > num1[i] and num3[0] > num2[j]:\n        merged_list.append(num3[0])\n        j = j + 1\n    \n    return merged_list\ndef merge_sort(num_list):\n    '''\n    Implement a solution to the merge sort problem.\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (s[0]+s[1])%n\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def solve(s,n): \n        if n==1: \n            return 1 \n        if n==2: \n            return 2 \n        if n%2==0: \n            return solve(s,n//2) \n        else: \n            return solve(s,n-1) + solve(s,n-1) \n    \n    return solve(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    output = 0\n    for i in range(0,l):\n        if(s[i]=='1'):\n            output+=2**i\n    if(output<=n):\n        return output\n    else:\n        return (n//2)+(n%2)"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd=0\n    for i in range(0,n):\n        if(s[i]=='0'):\n            odd+=1\n        else:\n            odd=0\n    return od"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code goes here\n    n=n//2\n    count=0\n    for i in s:\n        if i=='0':\n            count+=1\n        elif i=='1':\n            if n>=2:\n                n-=1\n            else:\n                count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    for x in range(n): \n        for i in range(1,len(s)+1,2): \n            a = (x*2) + i \n            if (a % 2)!= 0: \n                s = s + str(a) \n    return s \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == \"\": \n        return 0\n    s = int(s)\n    n = int(n)\n    if s%2!= 0: \n        return 0\n    odd = n//2\n    if odd == 0: \n        return odd\n    else: \n        return odd - 1 + odd"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code goes here\n    n = int(n)\n    l = len(s)\n    n_pairs = 0\n    for i in range(0,l,2):\n        if int(s[i:i+2])%2 == 0:\n            n_pairs = n_pairs + 1\n    print(n_pairs)\n    return n_pairs\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(0, len(s), 2): \n        result += int(s[i:i+2])\n    return result \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = list(str(n))\n    new_l = [0]*len(l)\n    # print(new_l)\n    k = 0\n    for i in range(len(l)):\n        if int(l[i])%2==1:\n            k += 1\n            new_l[i] = k\n    # print(new_l)\n    # print(new_l[i])\n    return(new_l)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j in common:\n                pass\n            else:\n                common.append(j)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # for nested list\n    for innerlist in nestedlist:\n        for index, element in enumerate(innerlist):\n            if innerlist == element:\n                return innerlist[index]\n    return None"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nestedlist2 in nestedlist:\n        if(len(nestedlist2) == 1):\n            if(nestedlist2[0] not in common_elements):\n                common_elements.append(nestedlist2[0])\n            continue\n        common_elements = list(set(nestedlist2).intersection(common_elements))\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here\n    if not nestedlist:\n        return None\n    list1 = nestedlist[0]\n    list2 = nestedlist[1]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #Iterate through nested lists\n    list_of_lists = []\n    for i in nestedlist:\n        list_of_lists.append(i)\n    #Create a new list where each element contains all the elements in the list\n    final_list = []\n    for i in nestedlist:\n        if i not in final_list:\n            final_list.append(i)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        for i in range(len(sublist)):\n            if len(sublist[i]) > 0:\n                common_elements.append(sublist[i][0])\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    i=0\n    j=0\n    j=0\n    while i<len(nestedlist):\n        if nestedlist[i]!=nestedlist[j]:\n            print(nestedlist[i])\n            i=i+1\n            j=j+1\n        else:\n            j=j+1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Example\n    # [[0,1],[1,2]]\n    # [[0,1],[1,2]]\n    # [[0,1],[0,2]]\n    # [[1,2],[1,2]]\n    # [[0,1],[0,2]]\n    \n    # nestedlist = [[0,1],[1,2]]\n    # nestedlist2 = [[0,1],[1,2]]\n    # nestedlist3 = [[0,1],[1,2]]\n    # print(common_in_nested_lists(nestedlist))\n    \n    if len(nestedlist) == 0:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    if len(nestedlist) == 2:\n        return [nestedlist[0]] + common_in_nested_lists(nestedlist[1])\n    \n    result = []\n    for i in range(len(nestedlist[0])):\n        sublist = [nestedlist[j][i] for j in range(len(nestedlist))]\n        result.append(sublist)\n    \n    return result\n    \nnestedlist = [[0,1],[1,2]]\nnestedlist2 = [[0,1],[1,2]]\nnestedlist3 = [[0,1],[1,2]]\nprint(common_in_nested_lists(nestedlist))\nprint(common_in_nested_lists(nestedlist2))\nprint(common_in_nested_lists(nestedlist3)"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_nested_list(nestedlist):\n        '''\n        Write a function to find the common elements in given nested lists.\n        '''\n        if len(nestedlist) <= 1:\n            return nestedlist\n        else:\n            common = set()\n            for sublist in nestedlist:\n                common = common | sublist\n            return common\n        \n    return common_nested_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist:\n        common = set()\n        for elm in nestedlist:\n            common.update(elm)\n        return common\n    else:\n        return set()\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return (text.isdigit() or text.replace(\".\", \"\").isdigit())\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return (text.isdigit())\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isnumeric():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if not type(text) == str:\n        raise TypeError('must be string')\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j == None:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for key, value in i.items():\n            if len(value) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Your code here\n    \n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if type(list1[i][j]) is dict:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for elem in list1:\n        if elem!= {}:\n            count = count + 1\n    if count == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i is not None:\n            for j in i:\n                if j is not None:\n                    if type(j) is dict:\n                        pass\n                    elif j is None:\n                        return True\n                    else:\n                        return False\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = []\n    for i in list1:\n        for j in i:\n            list2.append(j)\n    return list2"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        for key in dict1.keys():\n            if dict1[key] is not None:\n                pass\n            else:\n                print(\"\\033[91m\" + str(key) + \" must be a key\\033[0m\")\n                return False\n        if dict1['Name'] is None or dict1['Name'] == '':\n            print(\"\\033[91m\" + str(key) + \" must be a key\\033[0m\")\n            return False\n        if dict1['Country'] is None or dict1['Country'] == '':\n            print(\"\\033[91m\" + str(key) + \" must be a key\\033[0m\")\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = list(map(lambda x: int(x), nums))\n    return int(sum(int_list))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = set(nums)\n    return sum([(x,) for x in nums])\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_tuple = []\n    for i in nums:\n        int_tuple.append(int(i))\n    return int_tuple\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = []\n    for i in nums:\n        int_list.append(i)\n    return int_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # check if the tuple is empty\n    if nums == []:\n        return None\n    \n    # check if any of the values are negative\n    if any(n < 0 for n in nums):\n        return None\n    \n    # convert each value to its integer representation\n    for i,n in enumerate(nums):\n        if n < 0:\n            return None\n        \n        # map the negative numbers to 0\n        nums[i] = nums[i] * -1\n    \n    # return the result\n    return nums"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        for x in item:\n            try:\n                float(x)\n                x = float(x)\n                new_list.append(x)\n            except ValueError:\n                pass\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def convert(lst):\n        if lst!= []:\n            lst = list(map(float,lst))\n            lst = map(round,lst)\n            return lst\n        else:\n            return [0.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(test_list)\n    float_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j].lower() == 'p':\n                if j == 0:\n                    float_list.append(float('inf'))\n                else:\n                    float_list.append(float(test_list[i][j-1]))\n    return(float_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_1 = []\n    for i in range(len(test_list)):\n        for item in test_list[i]:\n            if type(item) == list:\n                list_1.append([float(x) for x in item])\n    return list_1\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = list(map(float, test_list[i][j]))\n            test_list_list.append(test_list[i][j])\n    return test_list_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for el in item:\n            el.replace(\" \", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"-\", \"\").replace(\",\", \"\")\n            if el.find(\",\") == -1:\n                el = float(el)\n            elif el.find(\",\") == 0:\n                el = float(el.replace(\",\", \".\"))\n            elif el.find(\",\")!= 0:\n                el = float(el)\n            elif el.find(\".\") == 0:\n                el = float(el.replace(\".\", \"\").replace(\",\", \".\"))\n            elif el.find(\".\")!= 0:\n                el = float(el)\n            elif el.find(\"-\") == 0:\n                el = float(el.replace(\"-\", \"\").replace(\",\", \".\"))\n            elif el.find(\"-\")!= 0:\n                el = float(el.replace(\"-\", \"\").replace(\",\", \".\"))\n            elif el.find(\".\")!= 0:\n                el = float(el)\n            elif el.find(\".\") == 0:\n                el = float(el.replace(\".\", \"\").replace(\",\", \".\"))\n            elif el.find(\",\")!= 0:\n                el = float(el)\n            elif el.find(\",\")!= 0:\n                el = float(el.replace(\",\", \"\").replace(\",\", \".\"))\n            elif el.find(\",\")!= 0:\n                el = float(el)\n            elif el.find(\".\") == 0:\n                el = float(el.replace(\".\", \"\").replace(\",\", \".\"))\n            elif el.find(\",\") == 0:\n                el = float(el)\n            elif el.find(\",\")!= 0:\n                el = float(el)\n            elif el.find(\")\") == -1:\n                el = float(el)\n            elif el.find(\")\") == -1:\n                el = float(el.replace(\"(\", \"\").replace(\")\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \"\").replace(\" \",\"\"))\n            elif el.find(\")\")!= -1:\n                el = float(el)\n            elif el.find(\")\")!= -1:\n                el = float(el.replace(\"(\", \"\").replace(\")\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \"\").replace(\" \",\"\"))\n            elif el.find(\")\")!= -1:\n                el = float(el)\n            elif el.find(\")\") == -1:\n                el = float(el.replace(\"(\", \"\").replace(\")\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replace(\"(\", \"\").replac"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_to_float = []\n    for i in test_list:\n        temp = []\n        for j in range(len(i)):\n            if i[j]!= \"\":\n                temp.append(float(i[j]))\n        list_to_float.append(temp)\n    return list_to_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #Pass the test list as a parameter\n    convert_list = []\n    for list in test_list:\n        convert_list.append(list)\n    #Create a dictionary containing the conversions\n    convert_dictionary = {}\n    for i in range(0,len(convert_list)):\n        convert_dictionary[i] = convert_list[i]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_of_lists = []\n    for i in test_list:\n        temp_list = []\n        for j in i:\n            temp_list.append(float(j))\n        test_list_of_lists.append(temp_list)\n    return test_list_of_lists\n    \ndef list_to_list(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to lists.\n    '''\n    test_list_of_lists = []\n    for i in test_list:\n        temp_list = []\n        for j in i:\n            temp_list.append(j)\n        test_list_of_lists.append(temp_list)\n    return test_list_of_lists\n    \ndef num_to_str(test_num):\n    '''\n    Write a function that takes a number and return the string representation of that number.\n    '''\n    test_str = ''\n    if test_num < 0:\n        test_num *= -1\n    for i in range(abs(test_num)):\n        test_str += '0'\n    return test_str\n    \ndef string_to_num(test_str):\n    '''\n    Write a function that takes a string and return the numerical value of that string.\n    '''\n    num_str = 0\n    for i in test_str:\n        num_str += ord(i)\n    num_str /= len(test_str)\n    return num_str\n    \ndef num_to_bytes(test_num):\n    '''\n    Write a function that takes a number and return the binary representation of that number.\n    '''\n    test_bytes = bin(test_num)\n    test_bytes = test_bytes[2:]\n    test_bytes = test_bytes[:-1]\n    return test_bytes\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [string[i:i + 2] for i in range(0, len(string), 2)]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [char for char in string]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.strip().split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [char for char in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = list(string)\n    #print(string_list)\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    mylist = string.split(\" \") \n    return(mylist) \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [string.split(\" \")]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = string.split()\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # 1, 2, 3, 4"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return [n for n in arr if arr.count(n) == 1][0]\n    \ndef merge_sort(arr):\n    '''\n    Write a python function to sort all elements of an unsorted array.\n    '''\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    found_count = 0\n    for index in range(len(arr)):\n        if arr[index] == arr[index+1]:\n            found_count += 1\n        else:\n            return arr[index+1]\n    return arr[index+1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # TODO: implement this function\n    return "
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] == arr[m+1]:\n            if m == 0 or arr[m]!= arr[m-1]:\n                return arr[m]\n            else:\n                m = m-1\n        else:\n            if arr[m] < arr[m+1]:\n                l = m + 1\n            else:\n                r = m - 1\n    return -1\n    \n    "
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    lst = []\n    for i in range(len(arr)):\n        if i!= 0 and arr[i]!= arr[i - 1]:\n            lst.append(arr[i])\n    if len(lst) == 1:\n        print(\"The element that appears only once in the given array is: \", lst[0])\n    else:\n        print(\"The element that appears only once in the given array is: \", lst[0])\n        print(\"Element at index \", len(lst) - 1, \"is: \", lst[-1])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Base Case\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # pass\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #if arr == []:\n    #    return -1\n    #\n    #find position\n    #make list of the current element\n    #return that element\n    #if there is only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n    \n    if arr[0] == arr[-1]:\n        return arr[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = -1\n    for n1 in list1:\n        for n2 in list1:\n            if n1 < n2:\n                max = max if max < n1*n2 else n1*n2\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] > max_product:\n                max_product = list1[i][0] * list1[j][0]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            max = max(max,list1[i][1]*list1[j][1])\n    return max\ndef max_sum_product_tuple(list1):\n    '''\n    Write a function to find the maximum sum product of a tuple in a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            max = max(max,list1[i][0]*list1[j][0])\n    return max\ndef min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product of a tuple in a given list.\n    '''\n    min = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            min = min(min,list1[i][1]*list1[j][1])\n    return min\ndef min_sum_product_tuple(list1):\n    '''\n    Write a function to find the minimum sum product of a tuple in a given list.\n    '''\n    min = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            min = min(min,list1[i][0]*list1[j][0])\n    return min\ndef permutation_tuple(list1):\n    '''\n    Write a function to create a tuple with the same length as a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            yield (list1[i],list1[j])\ndef result_tuple(list1):\n    '''\n    Write a function to create a tuple with the same length as a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            result.append((list1[i][0]+list1[j][0],list1[i][1]+list1[j][1]))\n    return result\ndef product_tuple(list1):\n    '''\n    Write a function to create a tuple with the same length as a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            result.append(list1[i][0]*list1[j][0])\n    return result\ndef list_fibonacci_tuple(list1):\n    '''\n    Write a function to create a tuple with the same length as a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            yield list1[i][1] + list1[j][1],\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    if len(list1) == 1:\n        return list1[0]\n    max_p = list1[0]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i > j:\n                continue\n            else:\n                p = max(list1[i][0] * list1[j][0], list1[i][1] * list1[j][1])\n                if p > max_p:\n                    max_p = p\n    return max_p\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            a = list1[i][0] * list1[j][0]\n            b = list1[i][1] * list1[j][1]\n            c = list1[i][0] * list1[j][1]\n            if a > b and a > c:\n                max_product = max(a, b, c)\n            elif b > a and b > c:\n                max_product = b\n            else:\n                max_product = c\n            list1[i] = list1[i] + list1[j]\n            list1[j] = list1[j] + list1[i]\n    list1.sort()\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = list1[0][0] * list1[0][1] * list1[1][0] * list1[1][1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            list2.append(list1[i][j])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] > list1[j]:\n                maximum = max(list1[i]*list1[j], maximum)\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                if list1[i][0] * list1[j][1] > max_product:\n                    max_product = list1[i][0] * list1[j][1]\n                    \n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    divisors = []\n    \n    for number in range(1, limit):\n        \n        #If the number is divisible by 2, it is not a divisor\n        if(number % 2 == 0):\n            continue\n        \n        #If it is not a divisor, get the divisors of number\n        else:\n            divisors.append(number)\n    \n    #For all the divisors\n    for divisor in divisors:\n        \n        #If the divisor is not divisible by itself, it is not a amicable number\n        if(divisor!= divisor):\n            \n            #If there is no divisor in the list, return the number itself\n            if(len(amicable) == 0):\n                amicable.append(divisor)\n            \n            #If it's a amicable number, add it to the amicable list\n            elif(len(amicable) < 100000 and divisor!= divisor):\n                amicable.append(divisor)\n            \n            #If it's a amicable number, add it to the amicable list\n            else:\n                amicable.append(divisor + divisor)\n        else:\n            #If it's an amicable number, add it to the amicable list\n            amicable.append(divisor + divisor)\n    \n    #Return the sum of all the amicable numbers\n    return sum(amicable"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    num = 1\n    while num <= limit:\n        num = sum([int(num) for num in str(num) if num%2 == 0])\n        if num not in amicable_numbers:\n            amicable_numbers.append(num)\n        num = sum([int(num) for num in str(num) if num%2!= 0])\n    amicable_numbers.sort(reverse=True)\n    for num in amicable_numbers:\n        if num in amicable_numbers_sum:\n            return num\n        else:\n            amicable_numbers_sum += num\n    return None\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i%2 == 0:\n            amicable_sum += i\n        else:\n            if i == 2:\n                continue\n            if i < 2:\n                continue\n            is_amicable = True\n            for j in range(1, i//2 +1):\n                if i % j == 0:\n                    is_amicable = False\n                    break\n            if is_amicable:\n                amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    for num in range(1,limit+1):\n        if is_amicable(num):\n            amicable_numbers_list.append(num)\n    return sum(amicable_numbers_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers=set()\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    sum = 0\n    for num in range(1, limit):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            amicable.append(num)\n            sum += num\n    print(amicable)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    list_sum = []\n    # adding each number in list one by one\n    for i in range(1,limit):\n        is_amicable = True\n        # check if 1 is amicable, that means it is not a number itself\n        for j in range(1,i):\n            if i % j == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            sum_list = i\n            list_sum.append(sum_list)\n    # returning sum of all amicable numbers\n    return list_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for number in range(1, limit + 1):\n        sum = 0\n        for i in range(1, number + 1):\n            if i%2 == 0:\n                sum += i\n        if sum == number:\n            amicable.append(number)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for n in range(limit):\n        if is_amicable(n):\n            sum += n\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(1,limit) if is_amicable(i,limit)]\n    print(amicable_numbers)\n    for i in amicable_numbers:\n        for j in amicable_list:\n            if i == j:\n                amicable_numbers.append(i)\n                break\n    print(amicable_numbers)\n    amicable_list = list(set(amicable_numbers))\n    print(amicable_list)\n    print(sum(amicable_list))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    p=0.5*(a+b)\n    q=complex(a.real, b.imag)/(a.real+b.real)\n    return acos(q)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Since we have a function\n    #of two variables with the same value, we can simply find the angle\n    #between the two variables.\n    a_real = complex(a.real,a.imag)\n    b_real = complex(b.real,b.imag)\n    angle = b_real.angle(a_real)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Get a and b.\n    a = abs(a)\n    b = abs(b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        return 0\n    if a == 0:\n        return cmath.asin(b/a)\n    if b == 0:\n        return cmath.asin(a/b)\n    try:\n        if (b!= 0) and (a!= 0):\n            #a = -b\n            #b = -a\n            try:\n                c = (b*b - a*a)/(2*b)\n                if c < 0:\n                    return - cmath.asin(c)\n                else:\n                    return cmath.asin(c)\n            except:\n                c = (b**2 + a**2 - cmath.sqrt(b**2 + a**2))/(2*b)\n                if c < 0:\n                    return - cmath.asin(c)\n                else:\n                    return cmath.asin(c)\n        elif (b == 0) and (a == 0):\n            #a = -b\n            #b = -a\n            try:\n                c = (b*b - a*a)/(2*b)\n                if c < 0:\n                    return - cmath.asin(c)\n                else:\n                    return cmath.asin(c)\n            except:\n                c = (b**2 + a**2 - cmath.sqrt(b**2 + a**2))/(2*b)\n                if c < 0:\n                    return - cmath.asin(c)\n                else:\n                    return cmath.asin(c)\n        elif (b == 0) and (a!= 0):\n            #a = -b\n            #b = -a\n            try:\n                c = (b*b - a*a)/(2*b)\n                if c < 0:\n                    return - cmath.asin(c)\n                else:\n                    return cmath.asin(c)\n            except:\n                c = (b**2 + a**2 - cmath.sqrt(b**2 + a**2))/(2*b)\n                if c < 0:\n                    return - cmath.asin(c)\n                else:\n                    return cmath.asin(c)\n        elif (a!= 0):\n            try:\n                c = (b*b - a*a)/(2*b)\n                if c < 0:\n                    return - cmath.asin(c)\n                else:\n                    return cmath.asin(c)\n            except:\n                c = (b**2 + a**2 - cmath.sqrt(b**2 + a**2))/(2*b)\n                if c < 0:\n                    return - cmath.asin(c)\n                else:\n                    return cmath.asin(c)\n    except:\n        return \"Error\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(b)+cmath.phase(a))/2\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #checking for zero\n    if a==0 and b==0:\n        return 90\n    #check for real number\n    elif b!=0:\n        if a==0:\n            return 90\n        elif a!=0:\n            return abs(a.real)*60 + abs(a.imag)*60/cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a.real,a.imag)\n    d = complex(b.real,b.imag)\n    return atan2(d.imag,d.real)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if a<0:\n        a = -a\n        b = -b\n    r = (a*b)/(cmath.sqrt(a**2+b**2))\n    return r\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    angle = abs(b)**2-abs(a)**2\n    angle = (angle**0.5)/2.0\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    if len(string) < 1: \n        raise ValueError(\"String must be a non-empty string\")\n    if len(string) == 1: \n        return 1\n    \n    if string[0] == \"0\": \n        sub_string = string[1:]\n    else: \n        sub_string = string[1:]\n    \n    return find_length(sub_string) + find_length(string[0:len(sub_string)]) \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_of_ones = 0\n    num_of_zeros = 0\n    result = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            num_zeros += 1\n        elif string[i] == '1':\n            num_ones += 1\n    return num_zeros - num_ones\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    maxdiff = 0\n    for i in range(0,len(string)):\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                if string[i] == '0' and string[j] == '0':\n                    maxdiff += 1\n    return maxdiff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    result = 0\n    for i in range(n - 2):\n        if string[i] == '1' and string[i + 1] == '0':\n            result += 1\n        elif string[i] == '1' and string[i + 1] == '1':\n            result += 1\n    return max(result, abs(n - result))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #base case, 1, 2, 3, etc,\n    count_zeroes = 0\n    count_ones = 0\n    result = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zeroes += 1\n        if string[i] == '1':\n            count_ones += 1\n        result = max(result, count_zeroes - count_ones)\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    total_zero = string.count(\"0\")\n    total_one = string.count(\"1\")\n    return max(total_zero - total_one, total_zero)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    max_difference = 0\n    for i in range(1, len(string)):\n        if string[0] == '0':\n            temp_difference = find_length(string[1:i])\n        else:\n            temp_difference = find_length(string[1:i]+string[i+1:])\n        max_difference = max(temp_difference, max_difference)\n    return max_difference\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    c = string.count('0')\n    d = string.count('1')\n    return max(c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - d, c - "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    '''\n    Original\n    \n    Input:\n    string = \"111001100111011111010100101101110100101111011101010010111101111011110111101111011110111101111011110111101111011111011011\"\n    Output:\n    2\n    Explanation:\n    string has a length of 24 and contains these characters: \n    '1110011001110111110101001011011101001011110111010100101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011111011011'\n    We need to find the maximum difference of number of 0s and number of 1s in the string.\n    '''\n    str_len = len(string)\n    num_zero = 0\n    num_one = 0\n    for i in range(0,str_len):\n        if string[i]=='0':\n            num_zero += 1\n        else:\n            num_one += 1\n    print(num_zero,num_one)\n    return max(num_zero,num_one)\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    return sum(a%b,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0 or b == 0 :\n        return 0\n    else :\n        return a + b + sum(a,b - 1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # your code goes here\n    # return the two numbers.\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Code here\n    '''\n    return sum([i for i in range(a,b+1) if i%2==0])\n    '''\n    return sum(range(a,b+1),2)\n    \n    \n    \n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def is_divisors(n):\n        if n == 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    if a % 2 == 0 or b % 2 == 0:\n        print(\"Cannot use divisors of two with odd numbers\")\n        return\n    sum = 0\n    for i in range(1,math.floor(math.sqrt(a))+1):\n        if a % i == 0 and b % i == 0:\n            sum = i\n            break\n    print(sum)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    total=0\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            total+=i\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int and type(b)!= int:\n        return (\"invalid arguments\")\n    if type(a) == int and type(b) == int:\n        common_divisors = [i for i in range(2, b+1)]\n        result = 0\n        for divisor in common_divisors:\n            if a % divisor == 0:\n                result += divisor\n            else:\n                pass\n        if result == b:\n            return result\n        else:\n            return (\"wrong answer\")\n    else:\n        return (\"invalid arguments\")\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=0\n    while(a!=0):\n        if a%2==0:\n            s+=a\n        a=a//2\n    while(b!=0):\n        if b%2==0:\n            s+=b\n        b=b//2\n    return s\ndef gcd(a,b):\n    '''\n    Write a python function to calculate the greatest common divisor of two given numbers.\n    '''\n    while(b>=a):\n        if b%a==0:\n            return b\n        a=a//b\n    return a\ndef list(arr):\n    '''\n    Write a python function to return a list of all the elements in arr.\n    '''\n    l=[]\n    for i in arr:\n        l.append(i)\n    return l\ndef fib(n):\n    '''\n    Return a list of n-th Fibonacci numbers.\n    '''\n    a=0\n    b=1\n    l=[]\n    l.append(a)\n    l.append(b)\n    for i in range(n-2):\n        c=a+b\n        a=b\n        b=c\n        l.append(c)\n    return l\ndef factorial(n):\n    '''\n    Return the factorial of n.\n    '''\n    return n*(n+1)\ndef fib_rec(n,a,b):\n    '''\n    Return the factorial of the n-th Fibonacci numbers.\n    '''\n    if n<0:\n        return \"Invalid input\"\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    f=a+b\n    g=a\n    h=b\n    while(n>1):\n        f=a+b\n        g=a\n        h=b\n        a=f\n        b=f+g\n        n=n-1\n    return h\ndef fib_iter(n,a,b):\n    '''\n    Return the factorial of the n-th Fibonacci numbers.\n    '''\n    if n<0:\n        return \"Invalid input\"\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    f=a+b\n    g=a\n    h=b\n    for i in range(1,n+1):\n        f=a+b\n        g=a\n        h=b\n        a=f\n        b=f+g\n    return h\ndef fact_rec(n):\n    '''\n    Return the factorial of the n-th Fibonacci numbers.\n    '''\n    if n<0:\n        return \"Invalid input\"\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    f=1\n    g=1\n    h=1\n    for i in range(1,n+1):\n        f=1\n        g=1\n        h=1\n        a=f\n        b=f+g\n        for j in range(1,i):\n            f=a+b\n            g=a\n            h=b\n            a=f\n            b=f+g\n        return h\ndef fact_iter(n):\n    '''\n    Return the factorial of the n-th Fibonacci numbers.\n    '''\n    if n<0:\n        return \"Invalid input\"\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    f=1\n    g=1\n    h=1\n    for i in range(1,n+1):\n        f=1\n        g=1\n        h=1\n        a=f\n        b=f+g\n        for j in range(1,i):\n            f=a+b\n            g=a\n            h=b\n            a=f\n            b=f+g\n        return h\ndef repeat(l):\n    '''\n    Return a list of the first n elements of the list.\n    '''\n    l=[]\n    for i in range(0,len(l)):\n        l.append(l[i])\n    return l\ndef st():\n    '''\n    Print the string of a given text.\n    '''\n    text=\"\"\"A Python program to print out the smallest possible sub-array of a given array of size 10.\n    It is written in the standard form:\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 7 8 9\n    0 1 2 3 4 5 6 "
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    m = 0\n    n = 0\n    while x > 0:\n        x, y = y, x%10\n        m += x*y\n        n += 1\n        if n % 3 == 0:\n            m += y\n    return m\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # x = int(x)\n    # y = int(y)\n    # return x * y\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = x * y\n    print(z)\n    # return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (x < 0):\n        if y < 0:\n            return -1\n        elif y == 0:\n            return 0\n        else:\n            return -1\n    elif (x == 0):\n        return 0\n    else:\n        return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    mult = x * y\n    return mult\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_word = ''\n    for i in range(len(str)):\n        if len(str[i]) > len(longest_word):\n            longest_word = str[i]\n    return longest_word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in range(0, len(str)):\n        if str[i] not in words:\n            words.append(str[i])\n    for i in range(0, len(words)):\n        if len(words[i]) > n:\n            for j in range(0, len(words)):\n                if words[i] < words[j]:\n                    words[i], words[j] = words[j], words[i]\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    a = []\n    for word in str:\n        if len(word)>=n:\n            a.append(word)\n    return a\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if type(n) is not int:\n        raise TypeError(\"{} is not an integer\".format(type(n)))\n    if n < 0:\n        raise ValueError(\"{} is negative\".format(n))\n    \n    lst = list(str)\n    \n    for i in range(n):\n        if len(lst[i]) > len(lst[i + 1]):\n            lst[i] = lst[i + 1]\n    \n    return ''.join(lst)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if type(n)!= int:\n        return f\"Error: {n} is not a number\"\n    \n    if type(str)!= str:\n        return f\"Error: {str} is not a string\"\n    \n    # Empty list to store words\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in str.split():\n        \n        # Check if word is longer than n characters\n        if len(word) > n:\n            \n            # If word is longer than the n characters, add word to list\n            long_words.append(word)\n            \n    return str.join(long_words)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import string\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = set(str.split())\n    words_to_remove = words\n    if len(words_to_remove) < n:\n        return words_to_remove\n    return set()\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    L = [word for word in str.split() if len(word) >= n]\n    return L\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Write your code here\n    for word in str.split():\n        if len(word) >= n:\n            yield word"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix_size = len(my_matrix)\n    if matrix_size!= 3:\n        return 'Invalid matrix size'\n    if my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2]:\n        return 'Is the square'\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][1] == my_matrix[1][2]:\n        return 'Is the square'\n    else:\n        return 'Is not a magic square'\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # If the matrix is a magic square, return True\n    if not matrix_is_magic_square(my_matrix):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def is_square(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j]!=0:\n                    matrix[i][j]=0\n                    matrix[j][i]=0\n        for i in range(len(matrix)):\n            if matrix[i][i]!=0:\n                matrix[i][i]=0\n        return matrix\n    def is_magic(matrix):\n        size=len(matrix[0])\n        for i in range(size):\n            for j in range(size):\n                if matrix[i][j]!=0:\n                    if matrix[i][j]==1:\n                        return False\n                    matrix[i][j]=0\n        return True\n    def is_solved(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j]!=0:\n                    matrix[i][j]=0\n        for i in range(len(matrix)):\n            if matrix[i][i]!=0:\n                matrix[i][i]=0\n        return True\n    def magic_square(matrix):\n        if is_magic(matrix):\n            return True\n        if is_solved(matrix):\n            return True\n        square=[]\n        size=len(matrix[0])\n        for i in range(size):\n            square.append([])\n            for j in range(size):\n                square[i].append(0)\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j]==0:\n                    square[i][j]=0\n                else:\n                    square[i][j]=1\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j]!=0:\n                    matrix[i][j]=0\n        if is_magic(matrix):\n            return True\n        for i in range(size):\n            if is_solved(matrix):\n                return True\n            for j in range(size):\n                matrix[i][j]=square[i][j]\n        return False\n    def test_matrix(my_matrix):\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix[0])):\n                if my_matrix[i][j]==0:\n                    my_matrix[i][j]=1\n                elif my_matrix[i][j]==1:\n                    my_matrix[i][j]=0\n                else:\n                    my_matrix[i][j]=0\n        return magic_square(my_matrix)\n    return test_matrix(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    is_magic_square = True\n    for row in range(3):\n        for col in range(3):\n            if my_matrix[row][col] % 2 == 0:\n                is_magic_square = False\n    return is_magic_square\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # return is a boolean which is True if the matrix is a magic square\n    return 'Magic Square' in my_matrix\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        sum = 0\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix[i])):\n                sum += my_matrix[i][j]\n        return sum == sum\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # write your code here\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if not all(my_matrix[x][x] for x in range(len(my_matrix))):\n        return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[j][i] or my_matrix[i][j]!= 1:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here\n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"Invalid matrix\")\n        return\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    total_elements = len(my_matrix)\n    if total_elements!= len(my_matrix[0]):\n        return False\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[0])):\n            if abs(my_matrix[row][col])!= 1:\n                return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # return max(dict(sorted(nums.items(), key=lambda x: x[1], reverse=True)))[0]\n    # print(sorted(nums.items(), key=lambda x: x[1], reverse=True))\n    \n    return max(set(nums), key=nums.count)\ndef min_occurrences(nums):\n    '''\n    Write a function to find the item with minimum frequency in a given list.\n    '''\n    # return min(dict(sorted(nums.items(), key=lambda x: x[1], reverse=True)))[0]\n    # print(sorted(nums.items(), key=lambda x: x[1], reverse=True))\n    \n    return min(set(nums), key=nums.count)\ndef replace_with_hash_table(nums):\n    '''\n    Given a non-empty array of integers, return the array elements that have squared values less than or equal to a given value.\n    '''\n    # hash_table = {i: hash(i) for i in nums}\n    # return [hash_table[i] for i in nums if i**2 <= nums[i]]\n    \n    return [hash(i) for i in nums if i**2 <= nums[i]]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = {}\n    for i in nums:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    max_occurrences = 0\n    item = max(freq.items(), key = lambda x:x[1])\n    for i in freq.items():\n        if i[1] == item[1]:\n            max_occurrences += 1\n    return item[0]\nnums = [1,2,3,3,3,3,4,5,6,7]\nprint(max_occurrences(nums))\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums)==0:\n        return -1\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to save the frequency of each items\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # find the max frequency in the dictionary\n    max_freq = max(freq_dict.values())\n    # return the index\n    return [i for i, val in enumerate(freq_dict.values()) if val == max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = defaultdict(int)\n    for num in nums:\n        max_count[num] = max_count.setdefault(num, 0) + 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(lambda: 0)\n    for num in nums:\n        freq[num] += 1\n    return max(freq.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = dict()\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurence = defaultdict(int)\n    for num in nums:\n        occurence[num] += 1\n    return max(occurence.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    return max(freq,key=freq.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_occur = 0\n    for num, freq_num in freq.items():\n        if freq_num == max_occur:\n            return num\n        max_occur = max(max_occur, freq_num)\n    return None\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    l = list(str1)\n    count = 0\n    vowels = 'aeiou'\n    for i in range(len(l)):\n        if l[i] in vowels:\n            l[i] = vowels[vowels.index(l[i])+1]\n            count += 1\n    print(l)\n    print(count)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_str = \"\"\n    for i in str1:\n        if i in vowels:\n            vowels.remove(i)\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    rev_str = ''\n    for i in str1:\n        if i in 'aeiouAEIOU':\n            rev_str += i\n    return rev_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #remove punctuations and keep only alphabets\n    new_str = ''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    print(new_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            str1[i] = vowels[str1[i].lower()]\n        else:\n            str1[i] = str1[i].lower()\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = {'a','e','i','o','u','y'}\n    str1_len = len(str1)\n    reverse_list = []\n    for i in range(str1_len):\n        if str1[i].lower() in vowel:\n            if str1[i+1].lower() in vowel:\n                reverse_list.append(str1[i].lower() + str1[i+1].lower())\n            else:\n                reverse_list.append(str1[i].lower())\n        else:\n            reverse_list.append(str1[i])\n    return \"\".join(reverse_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l=list(str1)\n    for i in l:\n        if i in ['a','e','i','o','u']:\n            l.remove(i)\n    str1=''.join(l)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if str1 == '' or len(str1) == 0:\n        return ''\n    list_str = []\n    for index, char in enumerate(str1):\n        if char in 'AEIOU':\n            list_str.append(char)\n        else:\n            list_str.append(' ')\n    vowel_str = ''.join(list_str)\n    return vowel_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    my_str=''\n    for x in str1:\n        if x.lower() in vowels:\n            my_str+=x.upper()\n        else:\n            my_str+=x\n    return my_str\n    \nprint(reverse_vowels(\"hello world\"))\nprint(reverse_vowels(\"Hello world\"))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    temp = ''\n    for i in str1:\n        if i in vowels:\n            temp += i\n        else:\n            temp +=''\n    return temp\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for element in tup1:\n        string = string + str(element) + ','\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return f\"{tup1[0]:<10}\" + \"\".join(f\"{elem:>10}\" for elem in tup1[1:])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"(\"\n    for i in tup1:\n        str1 += str(i)\n        str1 += \", \"\n    str1 = str1[:-2] + \")\"\n    return str1\n    \ndef delete_tuple(tup1):\n    '''\n    Write a function to delete a tuple.\n    '''\n    tup1 = (tup1[0],tup1[1],tup1[2],tup1[3])\n    return tup1\n    \ndef set_tuple(tup1):\n    '''\n    Write a function to set a tuple.\n    '''\n    tup1 = (tup1[0],tup1[1],tup1[2],tup1[3],tup1[4])\n    return tup1\n    \ndef double_tuple(tup1):\n    '''\n    Write a function to combine the two tuples into one tuple.\n    '''\n    tup1 = (tup1[0],tup1[1],tup1[2],tup1[3],tup1[4],tup1[5])\n    return tup1\n    \ndef get_tuple(tup1):\n    '''\n    Write a function to return the length of the tuple.\n    '''\n    return len(tup1)\n    \ndef one_tuple(tup1):\n    '''\n    Write a function to return the tuple itself.\n    '''\n    return tup1\n    \ndef get_first_and_last(tup1):\n    '''\n    Write a function to return the tuple first and last element.\n    '''\n    return tup1[0],tup1[len(tup1)-1]\n    \ndef append_tuple(tup1):\n    '''\n    Write a function to append a tuple to the end of a list.\n    '''\n    return tup1+[tup1[-1]]\n    \ndef insert_tuple(tup1):\n    '''\n    Write a function to insert a tuple at a specified position.\n    '''\n    return tup1+[tup1[1]]\n    \ndef tuple_list(tup1):\n    '''\n    Write a function to return the list of elements of a tuple.\n    '''\n    return tup1[0],tup1[1],tup1[2],tup1[3],tup1[4],tup1[5]\n    \ndef tupl_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"(\"\n    for i in tup1:\n        str1 += str(i)\n        str1 += \", \"\n    str1 = str1[:-2] + \")\"\n    return str1\n    \ndef get_string(tup1):\n    '''\n    Write a function to return the string of a tuple.\n    '''\n    str1 = str(tup1)\n    return str1[1:-1]\n    \ndef swap_tuple(tup1):\n    '''\n    Write a function to swap two tuples.\n    '''\n    tup1 = (tup1[1],tup1[0])\n    return tup1\n    \ndef list_string(tup1):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    str1 = \"[\"\n    for i in tup1:\n        str1 += str(i)\n        str1 += \", \"\n    str1 = str1[:-2] + \"]\"\n    return str1\n    \ndef get_last_index(tup1):\n    '''\n    Write a function to return the last index of a tuple.\n    '''\n    return tup1[-1]\n    \ndef get_last_element(tup1):\n    '''\n    Write a function to return the last element of a tuple.\n    '''\n    return tup1[-1]\n    \ndef get_last_element_index(tup1):\n    '''\n    Write a function to return the last element index of a tuple.\n    '''\n    return tup1.index(tup1[-1])\n    \ndef get_first_and_last_index(tup1):\n    '''\n    Write a function to return the first and last element index of a tuple.\n    '''\n    return tup1[0],tup1[len(tup1)-1]\n    \ndef insert_index(tup1,index):\n    '''\n    Write a function to insert an element at a specified position.\n    '''\n    tup1[index] = tup1[-1]\n    return tup1\n    \ndef list_append(tup1,tup2):\n    '''\n    Write a function to append a tuple to a list.\n    '''\n    return tup1+tup2\n    \ndef list_delete(tup1):\n    '''\n    Write a function to delete a tuple.\n    '''\n    return tup1[1:-1]\n    \ndef list_count(tup1):\n    '''\n    Write a function to return the number of elements in a tuple.\n    '''\n    return len(tup1)\n    \ndef list_string(tup1):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    str1 = \"[\"\n    for i in tup1:\n        str1 += str(i)\n        str1 += \", \"\n    str1 = str1[:-2] + \"]\"\n    return str1\n    \ndef list_tuple(tup1):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup1 = (tup1[0],tup1[1])\n    return tup1\n    \ndef tuple_tuple(tup1):\n    '''\n    Write a function to create a tuple from two or more tuples.\n    '''\n    return (tup1[0],tup1[1],tup1[2],tup1[3])\n    \ndef tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"(\"\n    for i in tup1:\n        str1 += str(i)\n        str1 += \", \"\n    str1 = str1[:-2] + \")\"\n    return str1\n    \ndef get_tuple_index(tup1,index):\n    '''\n    Write a function to get the tuple index of a tuple.\n    '''\n    return tup1.index(index)\n    \ndef get_first_and_last_index(tup1,index):\n    '''\n    Write a function to get the first and last index of a tuple.\n    '''\n    return tup1.index(index),tup1.index(tup1[-1])\n    \ndef get_first_and_last_element(tup1,index):\n    '''\n    Write a function to get the first and last element of a tuple.\n    '''\n    return tup1[0],tup1[len(tup1)-1]\n    \ndef get_first_and_last_element_index(tup1,index):\n    '''\n    Write a function to get the first and last element index of a tuple.\n    '''\n    return tup1.index(index),tup1.index(tup1[-1])\n    \ndef get_first_and_last_index(tup1,index):\n    '''\n    Write a function to get the first and last index of a tuple.\n    '''\n    return tup1.index(index),tup1.index(tup1[-1])\n    \ndef get_first_and_last_index_and_element(tup1,index):\n    '''\n    Write a function to get the first and last index of a tuple.\n    '''\n    return tup1.index(index),tup1.index(tup1[-1])\n    \ndef get_first_and_last_index_and_element_index(tup1,index):\n    '''\n    Write a function to get the first and last index of a tuple.\n    '''\n    return tup1"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = \"\"\n    for i in tup1:\n        tup2 = tup2 + str(i)\n    return tup2\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for t in tup1:\n        s += str(t)\n    return s\n    \nprint(tup_string(('1', '2', '3', '4', '5', '6', '7')))"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for i in range(0,len(tup1)):\n        tup_string += str(tup1[i]) +''\n    return tup_string\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(map(str, tup1))\n    \n    "
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '('+', '.join(map(str, tup1))+')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string=''\n    for i in tup1:\n        string+=str(i)\n    return string\n    \n    \ndef tup_to_list(tup):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    lst=[]\n    for i in tup:\n        lst.append(i)\n    return lst\n    \n    \ndef get_length(tup):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    length=len(tup)\n    return length\n    \ndef get_min(tup):\n    '''\n    Write a function to return the minimum element in a tuple.\n    '''\n    if len(tup)==0:\n        return None\n    elif len(tup)==1:\n        return tup[0]\n    elif len(tup)==2:\n        if tup[0]+tup[1]<=tup[1]:\n            return tup[0]\n        else:\n            return tup[1]\n    else:\n        min_element=tup[0]\n        for i in tup[1:]:\n            if i<min_element:\n                min_element=i\n        return min_element\n    \n    \ndef get_max(tup):\n    '''\n    Write a function to return the maximum element in a tuple.\n    '''\n    if len(tup)==0:\n        return None\n    elif len(tup)==1:\n        return tup[0]\n    elif len(tup)==2:\n        if tup[0]+tup[1]>tup[1]:\n            return tup[0]\n        else:\n            return tup[1]\n    else:\n        max_element=tup[0]\n        for i in tup[1:]:\n            if i>max_element:\n                max_element=i\n        return max_element\n    \n    \ndef get_average(tup):\n    '''\n    Write a function to return the average of a tuple.\n    '''\n    if len(tup)==0:\n        return None\n    elif len(tup)==1:\n        return tup[0]\n    elif len(tup)==2:\n        if tup[0]+tup[1]==tup[0]*tup[1]:\n            return tup[0]\n        else:\n            return tup[1]\n    else:\n        sum=0\n        for i in tup:\n            sum+=i\n        return sum/len(tup)\n    \n    \ndef print_tuple(tup):\n    '''\n    Write a function that prints a tuple in a specific format.\n    '''\n    string=''\n    for i in tup:\n        string+=str(i)\n    return string\n    \n    \ndef get_fives(tup):\n    '''\n    Write a function that returns the first five elements of a tuple.\n    '''\n    fives=[]\n    for i in range(0,5):\n        fives.append(tup[i])\n    return fives\n    \n    \ndef check_tuples(tup1):\n    '''\n    Write a function that returns True if tup1 is a tuple, False otherwise.\n    '''\n    if len(tup1)==0:\n        return False\n    elif len(tup1)==1:\n        return True\n    elif len(tup1)==2:\n        if tup1[0]+tup1[1]<tup1[1]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(tup1)-2):\n            if tup1[i]+tup1[i+1]+tup1[i+2]<=tup1[i+2]:\n                return True\n        return False\n    \ndef main():\n    print('------------------------------------------')\n    print('Hello, World!')\n    print('------------------------------------------')\n    # tuple_str=tup_string(tup)\n    print('tuples in a tuple:',tup_string(tup))\n    print('---------------------------')\n    print('tuples in a list:',tup_to_list(tup))\n    print('---------------------------')\n    # print('length of the tuples:',len(tup))\n    # print('tuples in a tuple:',tup_to_list(tup))\n    print('-----------------')\n    print('get_length of the tuples:',get_length(tup))\n    print('-----------------')\n    print('get_min of the tuples:',get_min(tup))\n    print('-----------------')\n    print('get_max of the tuples:',get_max(tup))\n    print('-----------------')\n    print('get_average of the tuples:',get_average(tup))\n    print('-----------------')\n    print('fives of the tuples:',get_fives(tup))\n    print('-----------------')\n    print('is tuple in a tuple:',check_tuples(tup))\n    print('-----------------')\n    print('---------------------------')\n    print('-----------------')\n    \n    \n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join([str(elem) for elem in tup1]) + ')'\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num<0])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # base case\n    if not nums:\n        return 0\n    return -sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # positive_nums = []\n    # negative_nums = []\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum=0\n    for i in nums:\n        if i<0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative = 0\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n        else:\n            negative += num\n    return sum + negative\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [n for n in nums if n < 0]\n    return sum(negatives)\n    # your code\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return sum(nums)-sum(nums)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0: \n        return 0\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    else: \n        return hexagonal_num(n - 1) + hexagonal_num(n - 2) \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n == 0):\n        return 0\n    elif (n % 2 == 0):\n        return (n + 1) ** 2\n    else:\n        return (n - 1) ** 2 + (n + 1) ** 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 1:\n        return n\n    return (n*(n+1)) // 6\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return ((n*n + n)//2) + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # your code goes here\n    num = 0\n    while n > 0:\n        if (n % 6) == 0:\n            return num\n        elif (n % 2) == 1:\n            num = num * 3 + 1\n        elif (n % 2) == 0:\n            num = num * 3 + 2\n        n = n//6\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n in range(0, n):\n        return n\n    return hexagonal_num(n//2) + n**2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    elif (n == 2):\n        return 3\n    else:\n        return (3 * n**2 + 1) ** 2"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n == 0): \n        return n\n    elif (n == 1): \n        return 3\n    elif (n == 2): \n        return 6\n    else: \n        return 5 * 3 + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Your code here\n    return n**2\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len(array(nums)) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_count = {}\n    zeroes_count = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                count += 1\n        return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # The idea is to construct a binary tree where we will evaluate the number of zeros in left subtree, right subtree and sum\n    # of the values in the subtree.\n    # We will not need to check for zero because we know the sum of all the zeroes will be zero or non-zero\n    # at the end of the subtree.\n    # When there are no zeros we will have a number of 1, otherwise the sum of zeros is the same as the number of zeros\n    # Only one subtree will be created for each zeros and each subtree is evaluated for the sum\n    zero_sum = sum(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums == []:\n        return None\n    else:\n        start = 0\n        end = 0\n        num_len = len(nums)\n        arr = array(str)\n        while start <= end:\n            if nums[start]!= 0:\n                end += 1\n            else:\n                start += 1\n        return (num_len) / (end - start)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_counts = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_counts += 1\n    return zero_counts/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Write your code here\n    count=0\n    for i in nums:\n        if i==0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(n): \n        if n == 1: \n            return True\n        elif n == 0 or n == 1: \n            return False\n        else: \n            for i in range(2, n // 2 + 1): \n                if (n % i == 0): \n                    return False\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    elif n<0:\n        return False\n    elif n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n+1):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #HINT: You can use your built in function for is_prime or has_factor.\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = str(n) \n    if int(n) == 0: \n        return False \n    elif len(n) == 1: \n        return True\n    elif n[0] == '0': \n        return False\n    elif n[0] == n[1]: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while n > 1:\n        if n % 2 == 0:\n            common_term += n\n        n //= 2\n    if common_term == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    #Common terms\n    common_term = 1\n    # n = int(input(\"Enter number\"))\n    while "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<=0):\n        return False\n    else:\n        if(n==0 or n==1):\n            return True\n        else:\n            if(n>=2):\n                return is_Sum_Of_Powers_Of_Two(n//2) and is_Sum_Of_Powers_Of_Two(n//2+1)\n            else:\n                return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    elif n == 1:\n        return False\n    elif n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return False\n    if n==1: \n        return True\n    if n%2==0: \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n < 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        pow = 3\n        while pow <= n:\n            if n % pow == 0:\n                return False\n            pow += 2\n        return True\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #Hint - Remember the math.pi value\n    return 3.14159*(r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    a_list = test_list[0]\n    for l in test_list:\n        a_list = a_list + l\n    return a_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Write your code here.\n    flattened = []\n    for test_set in test_list:\n        for item in test_set:\n            flattened.append(item)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for list in test_list:\n        res.extend(list)\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    results = []\n    # max_result = max(results)\n    max_list = len(test_list)\n    for i in range(0, max_list):\n        temp = []\n        for j in range(i, max_list):\n            temp.append(test_list[j])\n        results.append(temp)\n    # print(results)\n    return results\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    l = []\n    for i in test_list:\n        l += i\n    for i in l:\n        if type(i) is not int and type(i) is not float:\n            return \"ERROR\"\n    else:\n        return l\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for element in test_list:\n        if type(element) == list:\n            flat_list.extend(element)\n        else:\n            flat_list.append(element)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Iterate through the given list and append each item\n    # to a new list\n    flattened_list = []\n    for i in test_list:\n        # Append each item to the list\n        flattened_list.append(i)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    numbers_set = set()\n    for i in test_list:\n        numbers_set = numbers_set.union(set(i))\n    return numbers_set\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for item in test_list:\n        if type(item) is list:\n            item = extract_singly(item)\n        output.extend(item)\n    return output\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def quick_sort(array, start, end):\n        if start >= end:\n            return \n        pivot = start\n        left = start+1\n        right = end\n        while left <= right:\n            while left <= end and array[left] > array[pivot]:\n                left += 1\n            while right > start and array[right] > array[pivot]:\n                right -= 1\n            if left <= right:\n                array[left], array[right] = array[right], array[left]\n                left += 1\n                right -= 1\n        array[pivot], array[left] = array[left], array[pivot]\n        quick_sort(array, start, left-1)\n        quick_sort(array, right+1, end)\n    \n    quick_sort(nums, 0, len(nums)-1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    temp = []\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if j!= i and nums[j] > nums[i]:\n                temp.append(nums[j])\n    nums[:] = temp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # sort the list in increasing order.\n    # a) The first element is always the biggest.\n    # b) This is done by repeatedly sorting elements until the \n    #    first element is already at the end.\n    # c) The last element is always at the end.\n    # d) In other words, the last element is always after the smallest \n    #    element.\n    # e) For example, if the list is [5, 4, 2, 1, 3]\n    #     then the first element is at position 2 because\n    #     the second element is at position 1.\n    # f) In this case, we need to sort by position 3.\n    \n    def sort_arr(nums):\n        for i in range(len(nums)-1, -1, -1):\n            for j in range(i):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return nums\n    \n    def sort(nums):\n        # initialize the last index.\n        last_index = len(nums)-1\n        \n        # now begin to sort.\n        for i in range(last_index, -1, -1):\n            # recur for each element in the list\n            for j in range(i):\n                if nums[j] > nums[i]:\n                    # swap if current element is greater\n                    # than the next element.\n                    nums[i], nums[j] = nums[j], nums[i]\n        \n        # return the sorted array.\n        return nums\n    \n    # find the smallest element in the original array.\n    smallest_index = 0\n    for i in range(len(nums)):\n        if smallest_index < i:\n            smallest_index = i\n    \n    # sort the array in ascending order.\n    # a) If the smallest element is the first element\n    #    after it, then we can skip it.\n    # b) Otherwise, a) sort by the last element, and then b)\n    #    sort by the smallest element, and so on.\n    return sort_arr(nums[:smallest_index]) + sort_arr(nums[smallest_index:])"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(list, indices):\n        '''\n        It takes a list as an input and returns the sorted list.\n        '''\n        list_sorted = sorted(list)\n        sorted_list = []\n        for i in range(len(indices)):\n            if indices[i] < len(list):\n                if list[indices[i]] < list_sorted[indices[i]]:\n                    sorted_list.append(list_sorted[indices[i]])\n                else:\n                    sorted_list.append(list[indices[i]])\n            else:\n                sorted_list.append(list[indices[i]])\n        return sorted_list\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_len = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    start = 0\n    end = len(nums) - 1\n    while start + 1 < end:\n        # Get the middle element\n        mid = (start + end) // 2\n        # Swap elements at the end and the middle\n        nums[mid], nums[end] = nums[end], nums[mid]\n        # Check if the next element is the biggest\n        if nums[mid] > nums[start]:\n            # Swap the next element with the middle element\n            nums[start], nums[mid] = nums[mid], nums[start]\n            start = mid + 1\n        end = mid - 1\n    return nums\n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    #Write your code here.\n    #Use python.\n    n = len(nums)\n    for i in range(n-1,0,-1):\n        for j in range(n-i,0,-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(lst):\n        start = 0\n        end = len(lst) - 1\n        while start <= end:\n            if start < end:\n                if lst[start] > lst[end]:\n                    temp = lst[start]\n                    lst[start] = lst[end]\n                    lst[end] = temp\n                    start += 1\n                    end -= 1\n                elif lst[start] < lst[end]:\n                    start += 1\n            else:\n                return lst\n    def reverse(lst):\n        start = 0\n        end = len(lst) - 1\n        while start < end:\n            temp = lst[start]\n            lst[start] = lst[end]\n            lst[end] = temp\n            start += 1\n            end -= 1\n        return lst\n    if not nums:\n        return []\n    # Sort based on the number\n    lst = sort(nums)\n    # Reverse the list\n    lst = reverse(lst)\n    # return the sorted list\n    return lst\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    #declare list1 as an empty list\n    list1_copy = list1\n    #declare list2 as an empty list\n    list2_copy = list2\n    #declare list3 as an empty list\n    list3_copy = list3\n    #loop through each list\n    for i in range(len(list1)):\n        #if the list is the same\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            #increment the count\n            list3_copy[i] += 1\n        elif list2[i] == list3[i] and list1[i] == list3[i]:\n            #increment the count\n            list3_copy[i] += 1\n        else:\n            #increment the count\n            list3_copy[i] += 1\n    return list3_copy\n    "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            continue\n        elif list2[i] == list1[i] and list1[i] == list3[i]:\n            continue\n        elif list1[i] == list2[i] and list2[i]!= list3[i]:\n            continue\n        else:\n            return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    \n    n=len(list1)\n    m=len(list2)\n    k=len(list3)\n    \n    count=0\n    \n    for i in range(n):\n        for j in range(m):\n            for k in range(k):\n                if list1[i]==list2[j] and list2[j]==list3[k]:\n                    count+=1\n    \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if(list1[i]==list2[i] and list1[i]==list3[i]):\n            count+=1\n    return count\n    \ndef count_lesspair(list1,list2,list3):\n    '''\n    Write a function to count number items that are less in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if(list1[i]<list2[i] and list1[i]<list3[i]):\n            count+=1\n    return count\n    \ndef count_greaterpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are greater in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if(list1[i]>list2[i] and list1[i]>list3[i]):\n            count+=1\n    return count\n    \ndef list_size(list1):\n    '''\n    Write a function to return the length of a list.\n    '''\n    return len(list1)\n    \ndef list_length(list1):\n    '''\n    Write a function to return the length of a list.\n    '''\n    return len(list1)\n    \ndef list_reverse(list1):\n    '''\n    Write a function to return a list in reverse order.\n    '''\n    return list1[::-1]\n    \ndef list_sort(list1):\n    '''\n    Write a function to sort a list using bubble sort.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1)-1):\n            if(list1[j]>list1[j+1]):\n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\n    \ndef list_join(list1,list2):\n    '''\n    Write a function to join two lists into a single list using concatenation.\n    '''\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list1.append(list1[i])\n    return list1\n    \ndef list_isempty(list1):\n    '''\n    Write a function to return whether or not a list is empty.\n    '''\n    return list1==[]\n    \ndef list_isnotempty(list1):\n    '''\n    Write a function to return whether or not a list is not empty.\n    '''\n    return list1!=[]\n    \ndef list_getitem(list1,index):\n    '''\n    Write a function to get the value at a particular index in a list.\n    '''\n    return list1[index]\n    \ndef list_setitem(list1,index,value):\n    '''\n    Write a function to set the value at a particular index in a list.\n    '''\n    list1[index]=value\n    return list1\n    \ndef list_pop(list1):\n    '''\n    Write a function to remove the last element in a list.\n    '''\n    list1.pop()\n    return list1\n    \ndef list_reverse(list1):\n    '''\n    Write a function to return a reversed list.\n    '''\n    return list1[::-1]\n    \ndef list_sort(list1):\n    '''\n    Write a function to sort a list using insertion sort.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(0,len(list1)-1-i):\n            if(list1[j]<list1[j+1]):\n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\n    \ndef list_pop_inplace(list1):\n    '''\n    Write a function to remove an item from the end of a list.\n    '''\n    list1.pop()\n    return list1\n    \ndef list_pop_inplace_2(list1,value):\n    '''\n    Write a function to remove an item from the end of a list.\n    '''\n    list1.pop(len(list1)-1)\n    return list1\n    \ndef list_append(list1,value):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    list1.append(value)\n    return list1\n    \ndef list_remove(list1,value):\n    '''\n    Write a function to remove a value from a list.\n    '''\n    list1.remove(value)\n    return list1\n    \ndef list_join_inplace(list1,list2):\n    '''\n    Write a function to join two lists into a single list using concatenation.\n    '''\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list1[i],list2[i]=list2[i],list1[i]\n    return list1\n    \ndef list_isnotempty(list1):\n    '''\n    Write a function to return whether or not a list is not empty.\n    '''\n    return list1!=[]\n    \ndef list_isempty(list1):\n    '''\n    Write a function to return whether or not a list is empty.\n    '''\n    return list1==[]\n    \ndef list_isempty_2(list1):\n    '''\n    Write a function to return whether or not a list is not empty.\n    '''\n    return list1==[]\n    \ndef list_remove_inplace(list1,value):\n    '''\n    Write a function to remove an item from the end of a list.\n    '''\n    list1.pop(list1.index(value))\n    return list1\n    \ndef list_remove_inplace_2(list1,value):\n    '''\n    Write a function to remove an item from the end of a list.\n    '''\n    list1.pop(list1.index(value))\n    return list1\n    \ndef list_append_inplace(list1,value):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    list1.insert(list1.index(value),value)\n    return list1\n    \ndef list_insert_inplace(list1,index,value):\n    '''\n    Write a function to insert a value into a list.\n    '''\n    list1.insert(index,value)\n    return list1\n    \ndef list_sort_inplace(list1):\n    '''\n    Write a function to sort a list using insertion sort.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(0,len(list1)-1-i):\n            if(list1[j]<list1[j+1]):\n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\n    \ndef list_sort_inplace_2(list1):\n    '''\n    Write a function to sort a list using insertion sort.\n    '''\n    for i in range(len(list1)):\n        for j in range(0,len(list1)-1-i):\n            if(list1[j]<list1[j+1]):\n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\n    \ndef list_search(list1,value):\n    '''\n    Write a function to search a value in a list.\n    '''\n    for i in range(len(list1)):\n        if(list1[i]==value):\n            return i\n    return -1\n    \ndef list_search_inplace(list1,value):\n    '''\n    Write a function to search a value in a list.\n    '''\n    for i in range(len(list1)):\n        if(list1[i]==value):\n            return i\n    return -1\n    \nde"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return list1[0] == list2[0] and list1[1] == list2[1] and list1[2] == list2[2]\n    "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i = 0\n    for item in list1:\n        if item == list2[i]:\n            i+=1\n    return i\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_list = 0\n    i = 0\n    while i < len(list1):\n        if list1[i] == list2[i]:\n            if list3[i] == list2[i]:\n                same_list += 1\n            else:\n                same_list += 2\n        else:\n            same_list += 1\n        i += 1\n    return same_list\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i] == list2[j] and list2[i] in list3:\n                same=same+1\n    return(same)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c1=0\n    c2=0\n    c3=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]:\n            c1+=1\n        if list1[i]==list3[i]:\n            c2+=1\n        if list2[i]==list3[i]:\n            c3+=1\n    return [c1,c2,c3]\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if list1[0] == list2[0] and list1[1] == list2[1] and list1[2] == list2[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    from collections import Counter\n    dict1=Counter(Input)\n    count=0\n    for i in range(len(Input)):\n        if(Input[i]==\"{\"):\n            count+=1\n        elif(Input[i]==\"}\"):\n            count-=1\n    return(count)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # convert the tuple to a list\n    list_tuple = list(tuple(Input))\n    # create a dictionary to count the number of list items\n    dict = {}\n    for i in list_tuple:\n        dict[i] = list_tuple.count(i)\n    return dict\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #create variable\n    #change 1 to 2\n    \n    #if length is 0\n    if len(Input) == 0:\n        return 0\n    \n    #if length is less than 2\n    elif len(Input) == 1:\n        return 1\n    \n    #else if length is 1\n    elif len(Input) == 2:\n        return 1 + find_lists(Input[1:])\n    \n    #else if length is 2\n    elif len(Input) == 3:\n        return 1 + find_lists(Input[1:2])\n    \n    #else if length is 3\n    else:\n        return 1 + find_lists(Input[1:3]) + find_lists(Input[2:])\n    "
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List1 = []\n    List2 = []\n    List3 = []\n    List4 = []\n    for i in range(len(Input)):\n        if Input[i][0] == \"C\":\n            List1.append(Input[i])\n        elif Input[i][0] == \"T\":\n            List2.append(Input[i])\n        elif Input[i][0] == \"M\":\n            List3.append(Input[i])\n        elif Input[i][0] == \"K\":\n            List4.append(Input[i])\n    return len(List1), len(List2), len(List3), len(List4)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    #pass\n    \n    \n    # Remove pass and write your code here\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    lst = []\n    for elem in Input:\n        if elem[1]!= \"1\":\n            lst.append(elem)\n        else:\n            break\n    return len(lst)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum([1 for x in range(len(Input)) if Input[x] == ','])\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    def countLists(lst):\n        return len(set(lst))\n    \n    n=len(Input)\n    count=0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            count=count+countLists(Input[i:j])\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    temp = []\n    for i in range(len(Input)):\n        temp.append(len(Input[i]))\n    return temp\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    arr.sort()\n    \n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_abs_diff:\n            max_abs_diff = diff\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff = -float('inf')\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            curr_diff = abs(arr[i] - arr[j])\n            if curr_diff > max_Diff: \n                max_Diff = curr_diff\n    return max_Diff \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(1,len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs = arr[0]\n    for i in range(1, len(arr)):\n        max_abs = max(abs(arr[i][0] - arr[i][1]), max_abs)\n    return max_abs\n    \narr = [ [ -1, -1, -2, -2 ],\n    [ 5, 2, 2, 2 ],\n    [ 1, 2, 2, 2 ],\n    [ -1, -1, -2, -2 ] ]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Check if the array contains only numbers\n    if not isinstance(arr, list): \n        raise TypeError('arr must be a list')\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    max_diff = arr[0]\n    for i in range(n):\n        if arr[i] > max_diff:\n            max_diff = arr[i]\n    for i in range(n-1):\n        if arr[i] < max_diff:\n            max_diff = arr[i]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2,len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        max_diff = max(max_diff, diff)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # write your code here\n    if len(arr)<=1:\n        return 0\n    \n    arr.sort()\n    max_value = 0\n    for i in range(1,len(arr)):\n        diff_value = abs(arr[i]-arr[i-1])\n        max_value = max(diff_value,max_value)\n    return max_value\n        \n    # @lc code=end\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2: \n        return 0\n    else:\n        return max(arr[0],arr[1]) - min(arr[0],arr[1])\n    \ndef min_Abs_Diff(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2: \n        return 0\n    else:\n        return max(arr[0],arr[1]) - min(arr[0],arr[1])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff = abs(arr[0] - arr[1]) \n    for i in range(1, len(arr)): \n        max_Diff = max(max_Diff, abs(arr[i] - arr[i-1])) \n    return max_Diff\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    if b < a:\n        return None\n    if n == 1:\n        return (b, a)\n    else:\n        x, y = find_solution(a, b // 10, n // 2)\n        if x == None:\n            return None\n        if x == b // 10:\n            return (x, y)\n        if y == a:\n            return (x, y)\n        return None\n        \ndef main():\n    print(find_solution(1, 1, 25))\n    print(find_solution(1, 2, 25))\n    print(find_solution(6, 15, 40))\n    print(find_solution(2, 3, 5))\n    print(find_solution(1, 2, 0))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solution(1, 2, 1))\n    print(find_solutio"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return a, b\n    for x in range(1, n + 1):\n        if is_solution(a, x, b):\n            return x, b\n        else:\n            for y in range(1, n + 1):\n                if is_solution(x, y, n):\n                    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    assert a!= None and b!= None and n!= None\n    if a == None and b == None and n == None:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (n == 0):\n        return None\n    elif (n % 2 == 0):\n        x = (a//n)\n        y = (b//n)\n    else:\n        x = (b//n)\n        y = (a//n)\n    return x,y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        x = a[0] + b[0]\n        y = a[1] + b[1]\n    except:\n        return None\n    if x*x + y*y == n:\n        return x, y\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    i = 1\n    while i < n:\n        j = 1\n        while j <= i:\n            if a * j + b == n:\n                return j\n            elif a * j + b < n:\n                j = j + 1\n        i = i + 1\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n+1):\n        if b**i >= a**i:\n            return i, b**i\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return (a, b)\n    if a[0] + b[0] == n:\n        return (a[0], b[0])\n    if a[1] + b[1] == n:\n        return (a[1], b[1])\n    if a[0] + b[1] > n:\n        return (a[0], b[0])\n    if a[0] + b[1] < n:\n        return (a[1], b[1])\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(dict.fromkeys(list1).keys())\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            list2.remove(list1[i])\n        i += 1\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # if list1 is empty then return list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list2 is empty then return list1\n    if len(list2) == 0:\n        return list1\n    \n    # if list2 is not empty then first get index of list2\n    # and then use that index to remove elements from list1\n    #\n    # if both lists are not empty then use.remove() method\n    #\n    # return updated list1\n    \n    # if there are no elements in list2 then return list1\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list1 is empty then use.remove() method\n    # to remove elements from list2 using index\n    # of list1\n    \n    # return updated list1\n    \n    \n    # if both lists are not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list1 is empty then use.remove() method\n    # to remove elements from list2 using index\n    # of list1\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0:\n        return []\n    if len(list2) == 0:\n        return []\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is empty then use.remove() method\n    # to remove elements from list2 using index\n    # of list1\n    \n    # return updated list1\n    \n    \n    # if both lists are not empty then return empty list\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    \n    # if list1 is empty then return list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list2 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list2) == 0:\n        return list1\n    \n    # if list2 is empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list2 using index\n    # of list1\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    \n    # if list1 is empty then return list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list2 is empty then return list1\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    \n    # if list1 is empty then return list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list2 is empty then return list1\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    \n    # if list1 is empty then return list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list2 is empty then return list1\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0:\n        return []\n    if len(list2) == 0:\n        return []\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    \n    # if list1 is empty then return list2\n    if len(list1) == 0:\n        return list2\n    \n    # if list2 is empty then return list1\n    if len(list2) == 0:\n        return list1\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0:\n        return []\n    if len(list2) == 0:\n        return []\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0:\n        return []\n    if len(list2) == 0:\n        return []\n    \n    # if list1 is not empty then use.remove() method\n    # to remove elements from list1 using index\n    # of list2\n    \n    # return updated list1\n    \n    \n    # if both lists are empty then return empty list\n    if len(list1) == 0:\n    "
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = []\n    for i in list1:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list2.remove(j)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = list(list1)\n    for i in new_list:\n        if i in list2:\n            list2.remove(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # base case\n    if len(list1) == 0:\n        return list2\n    # loop\n    else:\n        # loop through both lists\n        for i in range(len(list1)):\n            # set the condition to check\n            if list1[i] in list2:\n                # remove the element\n                list2.remove(list1[i])\n        return list"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #Create an empty list to store the index values from the given list\n    index = []\n    #Create a for loop to iterate through the given list\n    for i in range(len(list1)):\n        #Add the index value to the empty list of index\n        index.append(list1[i])\n    #Create an empty list to store the index values from the given list\n    index2 = []\n    #Iterate through the index values\n    for i in index:\n        #Iterate through the list\n        for j in range(len(list2)):\n            #If the element in the given list is found in the index\n            if list2[j] == i:\n                #Delete the element from the index\n                index2.remove(j)\n    #Return the index values from the list2 to the original list\n    return index2\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_n_2 = 0\n    n = int(n)\n    for i in range(n, 0, -1):\n        sum_n_2 += i\n    return sum_n_2\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return n\n    if n == 2:\n        return n - 2\n    if n == 3:\n        return n - 4\n    return (n - 2) + (n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return (n-2)*(n-2)+sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_n = 0\n    i = 1\n    while i <= n:\n        sum_n += i\n        i += 2\n    return sum_n\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum = 0\n    while i <= n:\n        sum += i + 2 * i\n        i += 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        print(\"error: sum_series can't be negative\")\n        return\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    i = 0\n    while i <= n // 2:\n        sum_ = sum_ + (n - 2*i) + (n-4*i)\n        i = i + 1\n    return sum_\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    res = []\n    while n > 0:\n        res.append(n % 10)\n        n = int(n / 10)\n    sum = 0\n    for i in range(len(res)):\n        sum += res[i] * 10**(len(res)-i-1)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    return sum_series(n-2)+sum_series(n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print('Area of the polygon is:', end=' ')\n    for i in range(0, len(s)):\n        print(s[i], end=' ')\n        print(f' and is {l[i]} meters long')\n    print('Calculating...')\n    return f'{len(s)} sides'\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * (l ** 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # compute the area of the polygon\n    area = 0\n    if len(l)!= len(s):\n        raise ValueError('Lengths of sides must be the same')\n    for i in range(len(l)):\n        area += l[i] * (s[i] + s[i + 1])\n    return area * (4 / 3)\ndef area_triangle(a, b, c):\n    '''\n    Write a function to compute the area of a triangle given its base and its height.\n    '''\n    # compute the area of the triangle\n    area = (a + b + c) / 2\n    return area\ndef area_circle(r):\n    '''\n    Write a function to compute the area of a circle given its radius.\n    '''\n    # compute the area of the circle\n    area = pi * r * r\n    return area\ndef area_ellipse(a, b, c):\n    '''\n    Write a function to compute the area of an elliptical shape given its major and minor axes.\n    '''\n    # compute the area of the shape\n    area = (a * (a + b)) / 2\n    area += (a * b) / 2\n    area += (2 * b * c) / 4\n    return area\ndef area_rectangle(x, height):\n    '''\n    Write a function to compute the area of a rectangle given its width and height.\n    '''\n    # compute the area of the rectangle\n    area = height * width\n    return area\ndef area_hexa_rectangle(a, b, c, d):\n    '''\n    Write a function to compute the area of a rectangular shape given its width and height.\n    '''\n    # compute the area of the rectangle\n    area = a * b * c / d\n    return area\ndef area_triangle_with_pythagorean(a, b, c):\n    '''\n    Write a function to compute the area of a triangle given its base and its height.\n    '''\n    # compute the area of the triangle\n    area = a * b * c\n    return area\ndef area_circle_with_pythagorean(r):\n    '''\n    Write a function to compute the area of a circle given its radius.\n    '''\n    # compute the area of the circle\n    area = pi * r ** 2\n    return area\ndef perimeter_rectangle(x, height):\n    '''\n    Write a function to compute the perimeter of a rectangle given its width and height.\n    '''\n    # compute the perimeter of the rectangle\n    area = width * height\n    return area\ndef perimeter_rectangle_with_pythagorean(a, b, c):\n    '''\n    Write a function to compute the perimeter of a rectangular shape given its width and height.\n    '''\n    # compute the perimeter of the rectangle\n    area = (a + b + c) / 2\n    return area\ndef perimeter_hexa_rectangle(a, b, c, d):\n    '''\n    Write a function to compute the perimeter of a rectangular shape given its width and height.\n    '''\n    # compute the perimeter of the rectangle\n    area = a * b * c / d\n    return area\ndef perimeter_circle(r):\n    '''\n    Write a function to compute the perimeter of a circle given its radius.\n    '''\n    # compute the perimeter of the circle\n    area = 2 * r\n    return area\ndef perimeter_circle_with_pythagorean(r):\n    '''\n    Write a function to compute the perimeter of a circle given its radius.\n    '''\n    # compute the perimeter of the circle\n    area = (r ** 2) + (4 * pi * r * r)\n    return area\ndef perimeter_ellipse(a, b, c):\n    '''\n    Write a function to compute the perimeter of an elliptical shape given its major and minor axes.\n    '''\n    # compute the perimeter of the shape\n    area = (a * b) / 2\n    area += (a * b) / 2\n    area += (a * c) / 4\n    area += (b * c) / 4\n    return area\ndef perimeter_rectangle_with_pythagorean(x, height):\n    '''\n    Write a function to compute the perimeter of a rectangle given its width and height.\n    '''\n    # compute the perimeter of the rectangle\n    area = x * height\n    return area\ndef perimeter_hexa_rectangle_with_pythagorean(a, b, c, d):\n    '''\n    Write a function to compute the perimeter of a rectangular shape given its width and height.\n    '''\n    # compute the perimeter of the rectangle\n    area = (a * b) / 2\n    area += (a * b) / 2\n    area += (a * c) / 4\n    area += (b * c) / 4\n    area += (a * d) / 4\n    area += (b * d) / 4\n    return area\ndef perimeter_triangle_with_pythagorean(a, b, c):\n    '''\n    Write a function to compute the perimeter of a triangle given its base and its height.\n    '''\n    # compute the perimeter of the triangle\n    area = (a + b + c) / 2\n    return area\ndef perimeter_circle_with_pythagorean(r):\n    '''\n    Write a function to compute the perimeter of a circle given its radius.\n    '''\n    # compute the perimeter of the circle\n    area = (4 * pi * r)\n    return area\ndef perimeter_circle_with_pythagorean(r):\n    '''\n    Write a function to compute the perimeter of a circle given its radius.\n    '''\n    # compute the perimeter of the circle\n    area = (2 * r) ** 2\n    return area\ndef perimeter_ellipse(a, b, c):\n    '''\n    Write a function to compute the perimeter of an elliptical shape given its major and minor axes.\n    '''\n    # compute the perimeter of the shape\n    area = (2 * pi * a) * (2 * b * c)\n    return area\ndef perimeter_rectangle_with_pythagorean(x, height):\n    '''\n    Write a function to compute the perimeter of a rectangular shape given its width and height.\n    '''\n    # compute the perimeter of the rectangle\n    area = x * height\n    return area\ndef perimeter_hexa_rectangle_with_pythagorean(a, b, c, d):\n    '''\n    Write a function to compute the perimeter of a rectangular shape given its width and height.\n    '''\n    # compute the perimeter of the rectangle\n    area = (a * b) / 2\n    area += (a * b) / 2\n    area += (a * c) / 4\n    area += (b * c) / 4\n    area += (a * d) / 4\n    area += (b * d) / 4\n    return area\ndef perimeter_triangle_with_pythagorean(a, b, c):\n    '''\n    Write a function to compute the perimeter of a triangle given its base and its height.\n    '''\n    # compute the perimeter of the triangle\n    area = (a + b + c) / 2\n    return area\ndef perimeter_circle_with_pythagorean(r):\n    '''\n    Write a function to compute the perimeter of a circle given its radius.\n    '''\n    # compute the perimeter of the circle\n    area = 2 * (pi * r)\n    return area\ndef perimeter_circle_with_pythagorean(r):\n    '''\n    Write a function to compute the perimeter of a circle given its radius.\n    '''\n    # compute the perimeter of the circle\n    area = (r ** 2) + (4 * pi * r * r)\n    return area\ndef perimeter_ellipse(a, b, c):\n    '''\n    Write a function to compute the perimeter of an elliptical shape given its major and minor axes.\n    '''\n    # compute the perimeter of the shape\n    area = (2 * pi * a) * (2 * b * c)\n    return area\ndef perimeter_rectangle_with_pythagorean(x, height):\n    '''\n    Write a function to compute the perimeter of a rectangle given its width and height.\n    '''\n    # compute the perimeter of the rectangle\n    area = x * height\n    return area\ndef perimeter_hexa_rectangle_with"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # TODO\n    # Calculate the area of the polygon using basic trigonometry.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # s: int\n    #     Side length.\n    # l: int\n    #     Number of sides.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the polygon.\n    \n    return pi*s*s\n    \ndef area_circle(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    # TODO\n    # Calculate the area of the circle using basic trigonometry.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # r: int\n    #     Radius of the circle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the circle.\n    \n    return pi*(r**2)\n    \ndef area_diamond(r, s):\n    '''\n    Write a function that calculates the area of a diamond given its radius and thickness.\n    '''\n    # TODO\n    # Calculate the area of the diamond given its radius and thickness.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # r: int\n    #     Radius of the diamond.\n    # s: int\n    #     Thickness of the diamond.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the diamond.\n    \n    return 2*pi*(r**2)*s\n    \ndef area_sphere(r):\n    '''\n    Write a function that calculates the area of a sphere given its radius.\n    '''\n    # TODO\n    # Calculate the area of the sphere given its radius.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # r: int\n    #     Radius of the sphere.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the sphere.\n    \n    return 3.14*(r**2)\n    \ndef area_triangle(a, b):\n    '''\n    Write a function that calculates the area of a triangle given its base and height.\n    '''\n    # TODO\n    # Calculate the area of a triangle given its base and height.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Base of the triangle.\n    # b: int\n    #     Height of the triangle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the triangle.\n    \n    return a*b/2\n    \ndef area_rectangle(a, b):\n    '''\n    Write a function that calculates the area of a rectangle given its base and height.\n    '''\n    # TODO\n    # Calculate the area of a rectangle given its base and height.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Base of the rectangle.\n    # b: int\n    #     Height of the rectangle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the rectangle.\n    \n    return (a*b)/2\n    \ndef area_circle_bw(a, b):\n    '''\n    Write a function that calculates the area of a circle given its radius and its diameter.\n    '''\n    # TODO\n    # Calculate the area of a circle given its radius and its diameter.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Radius of the circle.\n    # b: int\n    #     Diameter of the circle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the circle.\n    \n    return (a*b)/2\n    \ndef area_triangle_bw(a, b):\n    '''\n    Write a function that calculates the area of a triangle given its base and height.\n    '''\n    # TODO\n    # Calculate the area of a triangle given its base and height.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Base of the triangle.\n    # b: int\n    #     Height of the triangle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the triangle.\n    \n    return (a*b)/2\n    \ndef area_rectangle_bw(a, b):\n    '''\n    Write a function that calculates the area of a rectangle given its base and height.\n    '''\n    # TODO\n    # Calculate the area of a rectangle given its base and height.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Base of the rectangle.\n    # b: int\n    #     Height of the rectangle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the rectangle.\n    \n    return (a*b)/2\n    \ndef area_circle_and_triangle(a, b):\n    '''\n    Write a function that calculates the area of a circle and a triangle given their diameter.\n    '''\n    # TODO\n    # Calculate the area of a circle and a triangle given their diameter.\n    # Note: for this task, the function has to return the area.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Diameter of the circle.\n    # b: int\n    #     Diameter of the triangle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Area of the circle and triangle.\n    \n    return (a*b)/2\n    \ndef perimeter_triangle(a, b):\n    '''\n    Write a function that calculates the perimeter of a triangle given its base and height.\n    '''\n    # TODO\n    # Calculate the perimeter of a triangle given its base and height.\n    # Note: for this task, the function has to return the perimeter.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Base of the triangle.\n    # b: int\n    #     Height of the triangle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Perimeter of the triangle.\n    \n    return a*b\n    \ndef perimeter_rectangle(a, b):\n    '''\n    Write a function that calculates the perimeter of a rectangle given its base and height.\n    '''\n    # TODO\n    # Calculate the perimeter of a rectangle given its base and height.\n    # Note: for this task, the function has to return the perimeter.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Base of the rectangle.\n    # b: int\n    #     Height of the rectangle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Perimeter of the rectangle.\n    \n    return (a*b)/2\n    \ndef perimeter_circle(a, b):\n    '''\n    Write a function that calculates the perimeter of a circle given its radius.\n    '''\n    # TODO\n    # Calculate the perimeter of a circle given its radius.\n    # Note: for this task, the function has to return the perimeter.\n    # \n    # Params\n    # --------\n    # a: int\n    #     Radius of the circle.\n    #\n    # Returns\n    # -------\n    # float\n    #     Perimeter of the circle.\n    \n    return (a*b)/2\n    \ndef perimeter_sphere(r):\n    '''"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 0:\n        return 0\n    else:\n        return l*(s+tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if not l:\n        return 0\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area_sum = 0\n    for i in range(0, s):\n        for j in range(0, l):\n            area_sum += i * j\n    return area_sum\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return sum([((l - (l - s)) / 2) ** 2) for s in range(0, l + 1)])\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    m = len(s) #number of sides\n    if m!= len(l):\n        raise Exception(\"Incorrect number of sides\")\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(0, l):\n        area += (s ** 2) * i\n    return area\ndef length(s, l):\n    '''\n    Write a function to calculate the length of a regular polygon given the side lengths.\n    '''\n    area = area_polygon(s, l)\n    return area\ndef perimeter(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the side lengths.\n    '''\n    area = area_polygon(s, l)\n    return 2 * (area ** 2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return \"Error\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum += i\n            if n/i == i:\n                sum += 1\n    return sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return False\n    elif n == 0: \n        return True\n    else:\n        for i in range(1, math.floor(math.sqrt(n)) + 1): \n            if n%i == 0: \n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return False\n    elif n == 3: \n        return True\n    else: \n        for i in range(1, int(math.sqrt(n))+1): \n            if n % i == 0: \n                return False \n                \n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        return True\n    elif n % 2 == 1: \n        return False\n    i = 3\n    if n > 1: \n        while i < (n / 2) + 1:\n            if n % i == 0: \n                return False\n            i = i + 2\n    else: \n        return False\n    return True\ndef main():\n    '''\n    1. Prompt the user for the number of elements in an array, and store it in an integer variable named arr_size.\n    2. Prompt the user for the elements of an array and store them in an array, using a while loop.\n    3. Display the result of the while loop.\n    '''\n    #Prompt user for number of elements and store it as an integer variable \n    \n    #Input\n    arr_size = int(input(\"Enter the number of elements in an array: \"))\n    arr = []\n    #Print the beginning of the array\n    print(arr_size)\n    #Print the beginning of the array\n    for i in range(0,arr_size):\n        arr.append(int(input()))\n    #Print the end of the array\n    print(arr)\n    #Print the end of the array\n    for i in range(arr_size-1, -1, -1):\n        print(arr[i])\n    #If the array is even and odd, prompt the user to enter the elements of an odd array and store them in an array.\n    if arr_size % 2 == 0:\n        #Ask the user to enter the elements of an odd array and store them in an array\n        arr_odd = []\n        for i in range(0,arr_size,2):\n            arr_odd.append(int(input()))\n        #Display the array\n        print(arr_odd)\n        #Display the end of the array\n        for i in range(0,arr_size-1,2):\n            print(arr[i])\n        #If the array is even, prompt the user to enter the elements of an even array and store them in an array\n        if arr_size % 2 == 1:\n            #Ask the user to enter the elements of an even array and store them in an array\n            arr_even = []\n            for i in range(0,arr_size,2):\n                arr_even.append(int(input()))\n            #Display the array\n            print(arr_even)\n            #Display the end of the array\n            for i in range(0,arr_size-1,2):\n                print(arr[i])\n        #If the array is odd, prompt the user to enter the elements of an odd array and store them in an array\n        else:\n            #Ask the user to enter the elements of an even array and store them in an array\n            arr_even = []\n            for i in range(arr_size-1, 0, -2):\n                arr_even.append(int(input()))\n            #Display the array\n            print(arr_even)\n            #Display the end of the array\n            for i in range(0,arr_size-1,2):\n                print(arr[i])\n    #If the array is odd, prompt the user to enter the elements of an even array and store them in an array\n    else:\n        #Ask the user to enter the elements of an odd array and store them in an array\n        arr_even = []\n        for i in range(0,arr_size,2):\n            arr_even.append(int(input()))\n        #Display the array\n        print(arr_even)\n        #Display the end of the array\n        for i in range(0,arr_size-1,2):\n            print(arr[i])\n    #If the array is even, prompt the user to enter the elements of an odd array and store them in an array\n    if arr_size % 2 == 1:\n        #Ask the user to enter the elements of an odd array and store them in an array\n        arr_odd = []\n        for i in range(arr_size-1, 0, -2):\n            arr_odd.append(int(input()))\n        #Display the array\n        print(arr_odd)\n        #Display the end of the array\n        for i in range(0,arr_size-1,2):\n            print(arr[i])\n    #If the array is odd, prompt the user to enter the elements of an odd array and store them in an array\n    else:\n        #Ask the user to enter the elements of an odd array and store them in an array\n        arr_odd = []\n        for i in range(arr_size-1, arr_size+1, 2):\n            arr_odd.append(int(input()))\n        #Display the array\n        print(arr_odd)\n        #Display the end of the array\n        for i in range(0,arr_size-1,2):\n            print(arr[i])\n    #If the array is odd, prompt the user to enter the elements of an even array and store them in an array\n    if arr_size % 2 == 0:\n        #Ask the user to enter the elements of an even array and store them in an array\n        arr_even = []\n        for i in range(arr_size-1, 0, -2):\n            arr_even.append(int(input()))\n        #Display the array\n        print(arr_even)\n        #Display the end of the array\n        for i in range(0,arr_size-1,2):\n            print(arr[i])\n    #If the array is even, prompt the user to enter the elements of an even array and store them in an array\n    else:\n        #Ask the user to enter the elements of an even array and store them in an array\n        arr_even = []\n        for i in range(arr_size-1, arr_size+1, 2):\n            arr_even.append(int(input()))\n        #Display the array\n        print(arr_even)\n        #Display the end of the array\n        for i in range(0,arr_size-1,2):\n            print(arr[i])\n    #If the array is odd, prompt the user to enter the elements of an odd array and store them in an array\n    if arr_size % 2 == 1:\n        #Ask the user to enter the elements of an even array and store them in an array\n        arr_odd = []\n        for i in range(arr_size-1, 0, -2):\n            arr_odd.append(int(input()))\n        #Display the array\n        print(arr_odd)\n        #Display the end of the array\n        for i in range(0,arr_size-1,2):\n            print(arr[i])\n    #If the array is odd, prompt the user to enter the elements of an odd array and store them in an array\n    else:\n        #Ask the user to enter the elements of an odd array and store them in an array\n        arr_odd = []\n        for i in range(arr_size-1, arr_size+1, 2):\n            arr_odd.append(int(input()))\n        #Display the array\n        print(arr_odd)\n        #Display the end of the array\n        for i in range(0,arr_size-1,2):\n            print(arr[i])\n    #Print the list of elements of an even array\n    print(\"The even elements of an even array are: \")\n    print(arr_even)\n    #Print the list of elements of an odd array\n    print(\"The odd elements of an odd array are: \")\n    print(arr_odd)\n    #Print the list of elements of an even array\n    print(\"The even elements of an even array are: \")\n    print(arr_even)\n    #Print the list of elements of an odd array\n    print(\"The odd elements of an odd array are: \")\n    print(arr_odd)\n    #Print the list of elements of an odd array\n    print(\"The odd elements of an even array are: \")\n    print(arr_even)\n    #Print the end of the array\n    print(\"The end of the array is: \")\n    print(arr_even)\n    #If the array is odd, prompt the user to enter the elements of an odd array and store them in an array\n    if arr_size % 2 == 0:\n        #Ask the user to enter the elements of an odd array and store them in an array\n        arr_odd = []\n        for i in range(0, arr_size, 2):\n            arr_odd.appen"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return False\n    elif n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i=2\n    total=0\n    while i<=n:\n        if n%i==0:\n            total+=i\n            n//=i\n        else:\n            i+=1\n    if total!=n:\n        return False\n    else:\n        return True\ndef div_add(n):\n    '''\n    Write a function that takes an integer as a parameter. It should return the sum of the divisors of that number.\n    '''\n    i=2\n    total=0\n    while i<=n:\n        if n%i==0:\n            total+=i\n            n//=i\n        else:\n            i+=1\n    if total!=n:\n        return False\n    else:\n        return total\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for d in range(1,int(math.sqrt(n)) + 1):\n        if n % d == 0:\n            s += d\n    return s == n\n    "
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%2 == 0:\n        return n//2\n    else:\n        return div_sum(n-1)\n    \ndef is_prime(n): \n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n < 2: \n        return False\n    if n % 3 == 0: \n        return False\n    i = 5\n    while i*i <= n: \n        if n%i == 0: \n            return False\n        i = i+6\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    if n % 2 == 0: \n        return False\n    return div_sum(n//2)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            c += 1\n    return c\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    '''\n    For example:\n    >>> count_char_position(\"AbCdEfGhHiJjKLmNoOpqRsStUuVwXzY\")\n    1\n    >>> count_char_position(\"AbCdEfGhHiJjKLmNoOpqRsStUuVwXzY\")\n    2\n    '''\n    str1=str1.lower()\n    count=0\n    for char in str1:\n        if char not in alphabet:\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for char in str1:\n        if char.isupper():\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import re\n    result = 0\n    str1 = str1.lower()\n    result += len(re.findall('[a-z]+',str1))\n    result += len(re.findall('[A-Z]+',str1))\n    result += len(re.findall('[0-9]+',str1))\n    result += len(re.findall('[!#$%&]',str1))\n    result += len(re.findall('\\d',str1))\n    result += len(re.findall('[^!#$%&]+',str1))\n    result += len(re.findall('[^!#$%&+]+',str1))\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if not str1: \n        return 0\n    \n    count = 0\n    for char in str1: \n        if char.lower() in alphabet:\n            count += 1\n    return count\n    \n    \n    \ndef count_words(str1, alphabet):\n    '''\n    Write a function that prints the number of occurrences of each word in a string. \n    The word should be specified by the user.\n    '''\n    if not str1: \n        return 0\n    \n    characters_in_string = 0\n    word = ''\n    for char in str1:\n        if char in alphabet:\n            characters_in_string += 1\n            word += char\n        \n        if characters_in_string > 1:\n            break\n    \n    print(word, '\\'s in the word list: ', count_char_position(word))\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for c in str1:\n        if c.isalpha():\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Your code here\n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count += 1\n        else:\n            count += 0\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = dict()\n    \n    for char in str1: \n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1: \n        if char == char.lower(): \n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pair_count += 1\n    return even_pair_count\n    #if find_even_pair(A) == 0:\n    #    return 0\n    #else:\n    #    return "
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    evens = 0\n    for i in range(0, len(A)):\n        if A[i] % 2 == 0:\n            evens += 1\n    return evens\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    i = 0\n    n = len(A)\n    m = len(A[0])\n    even_count = 0\n    \n    # i - 1 because it is the highest index, i - m because it is the minimum index\n    for i in range(i, n-m):\n        # i + m because it is the highest index, i + m - 1 because it is the minimum index\n        for j in range(i+m, n-i, m):\n            if A[i][j] == A[i][j-m]:\n                # if the same element was counted\n                even_count += 1\n                break\n    \n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in range(len(A)):\n        if A[i]%2==0:\n            count=count+1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    lst = []\n    for num in A:\n        if num == 2:\n            lst.append(1)\n        else:\n            lst.append(0)\n    lst = [num for num in lst if num % 2 == 0]\n    \n    return lst\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] & A[j] == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    pair_num = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                pair_num += 1\n            else:\n                pair_count += 1\n    return pair_num, pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    xor = 0\n    for i in A:\n        xor ^= i\n        \n    return xor ^ 2\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    lst = list(A)\n    even_pair = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] ^ lst[j] == 0:\n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)):\n            if A[i] == A[j]:\n                counter += 1\n    print(counter)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    n = int(n)\n    for i in range(2,n): \n        while (n % i == 0): \n            print(i, end=' ') \n            n = n // i \n    print(n) \n    "
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = []\n    for i in range(1, n):\n        if n % i == 0:\n            l.append(i)\n    l.sort(reverse = True)\n    print(l)\n    return(l[0])\n    #  Return smallest power of 2 greater than or equal to n\n    #  DO NOT MODIFY THE EXECUTED CODE IN BETWEEN\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if n%i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if (n <= 1):\n        return 1\n    if (n % 2 == 0):\n        return n*2\n    if (n % 2!= 0):\n        return n*2+1\n    while (n > 0):\n        if (n%2 == 0):\n            return n*2\n        n = n//2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    def next_power_of_2(n): \n        '''\n        Write a python function to find the smallest power of 2 greater than or equal to n.\n        '''\n        return 2**n \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = []\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            l.append(i)\n    return min(l)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n % 2 == 0:\n        return 2**n\n    else:\n        return 2**n + 1\n        \nn=int(input(\"Enter a number: \"))\nprint(\"The smallest power of 2 greater than or equal to:\",n,\"is:\",next_power_of_2(n)"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    for i in range(2, n):\n        if (i**2).bit_length() <= n:\n            return i**2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    i = 2\n    while i**2 <= n:\n        if i**2 == n:\n            return res\n        else:\n            res += 1\n            i += 1\n    return res\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l=[]\n    while n!=0:\n        if n%2==0:\n            l.append(n//2)\n        n=n//2\n    return l\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # your code goes here\n    count=0\n    for i in a:\n        if i==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in a:\n        if i == x:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # write your code here\n    if a in x:\n        count = x.count(a)\n        return count\n    else:\n        return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    from collections import Counter \n    freq = Counter(a) \n    return freq.get(x,0) \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    n = len(a) \n    count = 0 \n    for i in range(n): \n        if a[i] == x: \n            count += 1 \n    return count \n  \n  "
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    l = len(a)\n    i = 0\n    if x == 0:\n        return 0\n    elif x == l:\n        return 1\n    else:\n        while i < l:\n            if a[i] == x:\n                i+=1\n            else:\n                break\n        return i - l + 1"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if type(a) is not list:\n        raise TypeError('a should be a list')\n    d = {}\n    for i in a:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    dic={}\n    for i in a:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    return dic\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    def create_new_list(index_one, index_two):\n        '''\n        Create a new list with the specified index.\n        '''\n        list_one = []\n        for i in range(index_one, index_two+1):\n            list_one.append(i)\n        return list_one\n    \n    def calculate_sum(list_one):\n        '''\n        Return the sum of the numbers in the list.\n        '''\n        \n        sum = 0\n        for i in list_one:\n            sum += i\n        return sum\n    \n    def partition_list(list_one):\n        '''\n        Return a new list containing all numbers in the list that are divisible by 3.\n        '''\n        \n        divided_list = []\n        for i in range(len(list_one)):\n            if list_one[i] % 3 == 0:\n                divided_list.append(list_one[i])\n        \n        return divided_list\n    \n    def divide_range(list_one):\n        '''\n        Return a new list containing all numbers in the list that are divisible by 3.\n        '''\n        divided_list = []\n        for i in range(len(list_one)):\n            if list_one[i] % 3 == 0:\n                divided_list.append(list_one[i])\n        \n        return divided_list\n    \n    def find_max(list_one):\n        '''\n        Return the index of the largest number in the list.\n        '''\n        \n        max = 0\n        for i in range(len(list_one)):\n            if list_one[i] > max:\n                max = list_one[i]\n        return max\n    \n    def sum_in_range(list_one):\n        '''\n        Return the sum of the numbers in a list within a range.\n        '''\n        \n        sum = 0\n        for i in range(len(list_one)):\n            sum += list_one[i]\n        return sum\n    \n    def delete_max(list_one):\n        '''\n        Return a new list containing all numbers in the list that are greater than the largest number in the list.\n        '''\n        \n        greater_list = []\n        for i in range(len(list_one)):\n            if list_one[i] > list_one[0]:\n                greater_list.append(list_one[i])\n        \n        return greater_list\n    \n    def find_largest_list(list_one):\n        '''\n        Return the index of the largest list in a list.\n        '''\n        \n        index = 0\n        for i in range(len(list_one)):\n            if list_one[i] > list_one[index]:\n                index = i\n        return index\n    \n    def find_smallest_list(list_one):\n        '''\n        Return the index of the smallest list in a list.\n        '''\n        \n        index = 0\n        for i in range(len(list_one)):\n            if list_one[i] < list_one[index]:\n                index = i\n        return index\n    \n    def find_index_of_a_num(list_one):\n        '''\n        Return the index of the first occurrence of a number in the list.\n        '''\n        \n        count = 0\n        for i in range(len(list_one)):\n            if list_one[i] == list_one[count]:\n                count += 1\n            else:\n                break\n        return count\n    \n    def check_list_is_empty(list_one):\n        '''\n        Return true if the list is empty, false otherwise.\n        '''\n        \n        if len(list_one) == 0:\n            return True\n        return False\n    \n    def length_of_list(list_one):\n        '''\n        Return the length of a list.\n        '''\n        \n        length = 0\n        for i in range(len(list_one)):\n            length += 1\n        return length\n    \n    def sort_list(list_one):\n        '''\n        Return a new list containing all numbers in the list in sorted order.\n        '''\n        \n        new_list = []\n        for i in range(len(list_one)):\n            new_list.append(list_one[i])\n        new_list.sort()\n        \n        return new_list\n    \n    def sum_list(list_one):\n        '''\n        Return the sum of all numbers in a list.\n        '''\n        \n        sum = 0\n        for i in range(len(list_one)):\n            sum += list_one[i]\n        return sum\n    \n    def main():\n        '''\n        Call the main function.\n        '''\n        \n        list_one = [2, 7, 9, 0, 4, 2, 4, 8, 3, 6, 10, 15, 9]\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        \n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n        print(\"The sum of the numbers in the list is \" + str(sum_range_list(list_one, 0, len(list_one)-1)))\n    "
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    if (n < 0):\n        n = -n\n    if (m < 0):\n        m = -m\n    for i in range(m, n):\n        result = result + list1[i]\n    return result"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return list1[m]\n    return sum_range_list(list1, m+1, n) + list1[m] + sum_range_list(list1, m+1, n-1)\n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0\n    for i in range(m, n):                                                                                                                                                                                                        \n        sum += list1[i]\n    return sum\n    \nprint(sum_range_list([1,2,3,4,5,6,7,8,9], 2, 4)"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list = []\n    for i in range(m, n+1):\n        list.append(i)\n    return sum(list)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[index: index + m])\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Convert to float\n    a = float(a)\n    #Finding the area of the regular pentagon\n    area = round(math.sqrt(a**2 - 4*a),2)\n    return area\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # write your code here\n    return (a*5) + (a/2) + (a/5)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    result = 0\n    for i in range(3):\n        result += a * 5 / 4 * math.sin(math.pi * (i + 0.5))\n    return result\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return 2*math.pi*a*a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = math.sqrt(a)\n    return a * 3.14159 * 4\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4*a*math.sqrt(3)\ndef volume_pentagon(a):\n    '''\n    Write a function that calculates the volume of a regular pentagon.\n    '''\n    return 4*a*math.sqrt(3)\ndef area_pentagon(a):\n    '''\n    Write a function that calculates the area of a regular pentagon.\n    '''\n    return 4*a\ndef chord_pentagon(a):\n    '''\n    Write a function that calculates the chord of a regular pentagon.\n    '''\n    return math.sqrt(3)*a\ndef is_on_circle(a, b):\n    '''\n    Write a function that determines whether a point lies inside the circle defined by the three points a, b and c.\n    '''\n    return math.sqrt(((a[0]-b[0])**2)+((a[1]-b[1])**2)) <= math.sqrt(((a[0]-c[0])**2)+((a[1]-c[1])**2))\ndef is_on_square(a, b):\n    '''\n    Write a function that determines whether a point lies inside the square defined by the three points a, b and c.\n    '''\n    return math.sqrt(((a[0]-b[0])**2)+((a[1]-b[1])**2)) < math.sqrt(((a[0]-c[0])**2)+((a[1]-c[1])**2))\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function that calculates the perimeter of a triangle defined by its vertices a, b and c.\n    '''\n    return (math.sqrt(3)*a[0] + math.sqrt(3)*a[1] + math.sqrt(3)*a[2])\ndef volume_tetrahedron(a):\n    '''\n    Write a function that calculates the volume of a triangle defined by its vertices a, b and c.\n    '''\n    return (math.sqrt(3)*a[0]*a[1] + math.sqrt(3)*a[1]*a[2] + math.sqrt(3)*a[2]*a[0])\ndef area_tetrahedron(a):\n    '''\n    Write a function that calculates the area of a triangle defined by its vertices a, b and c.\n    '''\n    return (math.sqrt(3)*a[0]*a[1] + math.sqrt(3)*a[1]*a[2] + math.sqrt(3)*a[2]*a[0])\ndef is_on_sphere(a, b, c):\n    '''\n    Write a function that determines whether a point lies inside the sphere defined by the three points a, b, c.\n    '''\n    return (math.sqrt((a[0]-b[0])**2)+math.sqrt((a[1]-b[1])**2)+math.sqrt((a[2]-b[2])**2)) <= (math.sqrt((a[0]-c[0])**2)+math.sqrt((a[1]-c[1])**2)+math.sqrt((a[2]-c[2])**2))\ndef is_on_circle(a, b, c, d):\n    '''\n    Write a function that determines whether a point lies inside the circle defined by the three points a, b and c, d.\n    '''\n    return (math.sqrt((a[0]-b[0])**2)+math.sqrt((a[1]-b[1])**2)+math.sqrt((a[2]-b[2])**2)) <= (math.sqrt((a[0]-c[0])**2)+math.sqrt((a[1]-c[1])**2)+math.sqrt((a[2]-c[2])**2)) <= (math.sqrt((a[0]-d[0])**2)+math.sqrt((a[1]-d[1])**2)+math.sqrt((a[2]-d[2])**2))\ndef is_on_square(a, b, c, d, e, f):\n    '''\n    Write a function that determines whether a point lies inside the square defined by the three points a, b, and c, d, and e, f.\n    '''\n    return (math.sqrt((a[0]-b[0])**2)+math.sqrt((a[1]-b[1])**2)+math.sqrt((a[2]-b[2])**2)) <= (math.sqrt((a[0]-c[0])**2)+math.sqrt((a[1]-c[1])**2)+math.sqrt((a[2]-c[2])**2)) <= (math.sqrt((a[0]-d[0])**2)+math.sqrt((a[1]-d[1])**2)+math.sqrt((a[2]-d[2])**2)) <= (math.sqrt((a[0]-e[0])**2)+math.sqrt((a[1]-e[1])**2)+math.sqrt((a[2]-e[2])**2)) <= (math.sqrt((a[0]-f[0])**2)+math.sqrt((a[1]-f[1])**2)+math.sqrt((a[2]-f[2])**2))\ndef perimeter_square(a, b, c, d, e, f):\n    '''\n    Write a function that calculates the perimeter of a square defined by its vertices a, b, c and d.\n    '''\n    return (math.sqrt((a[0]-b[0])**2)+math.sqrt((a[1]-b[1])**2)+math.sqrt((a[2]-b[2])**2)) + (math.sqrt((a[0]-c[0])**2)+math.sqrt((a[1]-c[1])**2)+math.sqrt((a[2]-c[2])**2)) + (math.sqrt((a[0]-d[0])**2)+math.sqrt((a[1]-d[1])**2)+math.sqrt((a[2]-d[2])**2)) + (math.sqrt((a[0]-e[0])**2)+math.sqrt((a[1]-e[1])**2)+math.sqrt((a[2]-e[2])**2)) + (math.sqrt((a[0]-f[0])**2)+math.sqrt((a[1]-f[1])**2)+math.sqrt((a[2]-f[2])**2)))\ndef volume_square(a, b, c, d, e, f, g, h):\n    '''\n    Write a function that calculates the volume of a square defined by its vertices a, b, c and d.\n    '''\n    return (math.sqrt(((a[0]-b[0])**2)+((a[1]-b[1])**2)+((a[2]-b[2])**2))) + (math.sqrt(((a[0]-c[0])**2)+((a[1]-c[1])**2)+((a[2]-c[2])**2))) + (math.sqrt(((a[0]-d[0])**2)+((a[1]-d[1])**2)+((a[2]-d[2])**2))) + (math.sqrt(((a[0]-e[0])**2)+((a[1]-e[1])**2)+((a[2]-e[2])**2))) + (math.sqrt(((a[0]-f[0])**2)+((a[1]-f[1])**2)+((a[2]-f[2])**2))) + (math.sqrt(((a[0]-g[0])**2)+((a[1]-g[1])**2)+((a[2]-g[2])**2))) + (math.sqrt(((a[0]-h[0])**2)+((a[1]-h[1])**2)+((a[2]-h[2])**2)))\ndef is_in_circle(a, b, c, d, e, f, g, h, i):\n    '''\n    Write a function that determines whether a point lies inside the circle defined by the three points "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 0.5 * (math.pow(a,3) + math.pow(a,2) + math.pow(a,1) + math.pow(a,0))\n    return p\ndef area_of_curve(c):\n    '''\n    Write a function to find the area of a curve given its center, radius and tip point.\n    '''\n    r = math.sqrt(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    area = (r*r*(c[2] - c[0])*(c[1] - c[0]))/(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    return area\ndef perimeter_cube(c):\n    '''\n    Write a function to find the perimeter of a cube given its center, radius and tip point.\n    '''\n    r = math.sqrt(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    area = (r*r*(c[1] - c[0])*(c[2] - c[0]))/(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    return area\ndef area_of_regular(r):\n    '''\n    Write a function to find the area of a regular polygon given its center, radius and tip point.\n    '''\n    area = 0\n    a = []\n    for i in range(0,r):\n        a.append(i)\n    for i in range(0,r):\n        area = area + perimeter_regular(a)\n    return area\ndef perimeter_regular(a):\n    '''\n    Write a function to find the perimeter of a regular polygon given its center, radius and tip point.\n    '''\n    p = 0\n    for i in range(0,len(a)):\n        p = p + math.pow(a[i],2)\n    return math.pow(p,1/2)\ndef area_of_regular(r):\n    '''\n    Write a function to find the area of a regular polygon given its center, radius and tip point.\n    '''\n    area = 0\n    a = []\n    for i in range(0,r):\n        a.append(i)\n    for i in range(0,r):\n        area = area + area_regular(a)\n    return area\ndef area_of_pentagon(a):\n    '''\n    Write a function to find the area of a pentagon given its center, radius and tip point.\n    '''\n    p = 0\n    for i in range(0,len(a)):\n        p = p + math.pow(a[i],2)\n    return math.pow(p,1/3)\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a pentagon given its center, radius and tip point.\n    '''\n    p = 0\n    for i in range(0,len(a)):\n        p = p + math.pow(a[i],2)\n    return math.pow(p,1/3)\ndef area_of_curve(c):\n    '''\n    Write a function to find the area of a curve given its center, radius and tip point.\n    '''\n    r = math.sqrt(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    area = (r*r*(c[2] - c[0])*(c[1] - c[0]))/(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    return area\ndef perimeter_cube(c):\n    '''\n    Write a function to find the perimeter of a cube given its center, radius and tip point.\n    '''\n    r = math.sqrt(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    area = (r*r*(c[1] - c[0])*(c[2] - c[0]))/(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    return area\ndef area_of_regular(r):\n    '''\n    Write a function to find the area of a regular polygon given its center, radius and tip point.\n    '''\n    area = 0\n    a = []\n    for i in range(0,r):\n        a.append(i)\n    for i in range(0,r):\n        area = area + area_regular(a)\n    return area\ndef perimeter_regular(a):\n    '''\n    Write a function to find the perimeter of a regular polygon given its center, radius and tip point.\n    '''\n    p = 0\n    for i in range(0,len(a)):\n        p = p + math.pow(a[i],2)\n    return math.pow(p,1/2)\ndef area_of_regular(r):\n    '''\n    Write a function to find the area of a regular polygon given its center, radius and tip point.\n    '''\n    area = 0\n    a = []\n    for i in range(0,r):\n        a.append(i)\n    for i in range(0,r):\n        area = area + area_regular(a)\n    return area\ndef area_of_pentagon(a):\n    '''\n    Write a function to find the area of a pentagon given its center, radius and tip point.\n    '''\n    p = 0\n    for i in range(0,len(a)):\n        p = p + math.pow(a[i],2)\n    return math.pow(p,1/3)\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a pentagon given its center, radius and tip point.\n    '''\n    p = 0\n    for i in range(0,len(a)):\n        p = p + math.pow(a[i],2)\n    return math.pow(p,1/3)\ndef area_of_curve(c):\n    '''\n    Write a function to find the area of a curve given its center, radius and tip point.\n    '''\n    r = math.sqrt(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    area = (r*r*(c[2] - c[0])*(c[1] - c[0]))/(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    return area\ndef perimeter_cube(c):\n    '''\n    Write a function to find the perimeter of a cube given its center, radius and tip point.\n    '''\n    r = math.sqrt(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    area = (r*r*(c[1] - c[0])*(c[2] - c[0]))/(math.pow(c[0] - c[1],2) + math.pow(c[0] - c[2],2))\n    return area\ndef area_of_regular(r):\n    '''\n    Write a function to find the area of a regular polygon given its center, radius and tip point.\n    '''\n    area = 0\n    a = []\n    for i in range(0,r):\n        a.append(i)\n    for i in range(0,r):\n        area = area + area_regular(a)\n    return area\ndef area_of_pentagon(a):\n    '''\n    Write a function to find the area of a pentagon given its center, radius and tip poin"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 4*a\n    return perimeter\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    perimeter = 3*a\n    return perimeter\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    perimeter = math.sqrt(2*a)\n    return perimeter\ndef perimeter_parallele(a):\n    '''\n    Write a function to find the perimeter of a regular parallele from the length of its sides.\n    '''\n    perimeter = a*a*math.sqrt(3)\n    return perimeter\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a regular square.\n    '''\n    area = 4*a*math.pi\n    return area\ndef area_of_parallele(a):\n    '''\n    Write a function to find the area of a regular parallele.\n    '''\n    area = 3*a*a*math.pi\n    return area\ndef area_of_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle.\n    '''\n    area = a*a\n    return area\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a circle from its centre.\n    '''\n    perimeter = 2*a*math.pi\n    return perimeter\ndef perimeter_circle2(a):\n    '''\n    Write a function to find the perimeter of a circle from its centre.\n    '''\n    perimeter = a*math.pi\n    return perimeter\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi*a**2\n    return area\ndef area_circle2(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a\n    return area\ndef area_circle3(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*math.sqrt(a**2)\n    return area\ndef area_circle4(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a\n    return area\ndef area_circle5(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*math.sqrt(a**2)\n    return area\ndef area_circle6(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a\n    return area\ndef area_circle7(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a\n    return area\ndef area_circle8(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a\n    return area\ndef area_circle9(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a\n    return area\ndef area_circle10(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a\n    return area\ndef area_circle11(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a\n    return area\ndef area_circle12(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a\n    return area\ndef area_circle13(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a\n    return area\ndef area_circle14(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a\n    return area\ndef area_circle15(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a*a\n    return area\ndef area_circle16(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a*a\n    return area\ndef area_circle17(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a*a*a\n    return area\ndef area_circle18(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a*a*a\n    return area\ndef area_circle19(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a*a*a\n    return area\ndef area_circle20(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a*a\n    return area\ndef area_circle21(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a\n    return area\ndef area_circle22(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a*a\n    return area\ndef area_circle23(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a\n    return area\ndef area_circle24(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a\n    return area\ndef area_circle25(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a\n    return area\ndef area_circle26(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a\n    return area\ndef area_circle27(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a\n    return area\ndef area_circle28(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a*a\n    return area\ndef area_circle29(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a*a\n    return area\ndef area_circle30(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a\n    return area\ndef area_circle31(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi*a*a*a\n    return area\ndef area_circle32(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = a*math.pi"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pentagon_length = 6 * math.pi * a / 2\n    return pentagon_length\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #import math\n    print(math.pi)\n    return 4 * (a**2)\ndef area_square(r):\n    '''\n    Write a function that computes the area of a square of a given radius r.\n    '''\n    print(r**2)\n    return r**2\ndef area_circle(r):\n    '''\n    Write a function that computes the area of a circle with given radius r.\n    '''\n    pi=3.14\n    print(round(pi*(r**2),1))\n    return round(pi*(r**2),1)\ndef area_triangle(a):\n    '''\n    Write a function that computes the area of a triangle with sides a and b.\n    '''\n    return round(a*(a+b))\ndef area_square_triangle(a,b):\n    '''\n    Write a function that computes the area of a square triangle with sides a and b.\n    '''\n    print(round(a*(a+b),1))\n    return round(a*(a+b),1)\ndef area_sphere(r):\n    '''\n    Write a function that computes the area of a sphere with given radius r.\n    '''\n    return round(2*math.pi*r*r,1)\ndef area_parallelogram(a,b):\n    '''\n    Write a function that computes the area of a parallelogram with sides a and b.\n    '''\n    return round((a*b)/2,1)\ndef area_circle_square(r):\n    '''\n    Write a function that computes the area of a circle with given radius r.\n    '''\n    pi=3.14\n    return round(r*r*pi,1)\ndef area_circle_triangle(a,b):\n    '''\n    Write a function that computes the area of a circle triangle with sides a and b.\n    '''\n    return round(a*b*math.sqrt(1-b**2))\ndef area_circle_square_triangle(a,b,c):\n    '''\n    Write a function that computes the area of a circle triangle with sides a, b, and c.\n    '''\n    return round(a*b*c*math.sqrt(1-b**2-c**2))\ndef area_square_parallelogram(a,b):\n    '''\n    Write a function that computes the area of a parallelogram with sides a and b.\n    '''\n    return round((a*b)/2,1)\ndef area_square_circle(a,b):\n    '''\n    Write a function that computes the area of a square triangle with sides a and b.\n    '''\n    pi=3.14\n    return round(a*b*pi,1)\ndef area_triangle_parallelogram(a,b):\n    '''\n    Write a function that computes the area of a parallelogram triangle with sides a and b.\n    '''\n    return round(a*b*math.sqrt(1-b**2))\ndef area_square_circle_square(a,b):\n    '''\n    Write a function that computes the area of a square triangle with sides a and b.\n    '''\n    pi=3.14\n    return round(a*b*pi*(a+b+1)/4)\ndef area_triangle_circle_square(a,b):\n    '''\n    Write a function that computes the area of a triangle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))/2,1)\ndef area_triangle_parallelogram(a,b):\n    '''\n    Write a function that computes the area of a parallelogram triangle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_square_triangle_square(a,b):\n    '''\n    Write a function that computes the area of a square triangle with sides a and b.\n    '''\n    return round((a*b)*(a+b+1)/2,1)\ndef area_triangle_circle_square(a,b):\n    '''\n    Write a function that computes the area of a triangle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_circle_square_square(a,b):\n    '''\n    Write a function that computes the area of a circle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_circle_triangle_square(a,b):\n    '''\n    Write a function that computes the area of a circle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_circle_parallelogram_square(a,b):\n    '''\n    Write a function that computes the area of a parallelogram triangle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_circle_square_parallelogram_square(a,b):\n    '''\n    Write a function that computes the area of a circle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_square_parallelogram_circle(a,b):\n    '''\n    Write a function that computes the area of a parallelogram triangle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_triangle_parallelogram_circle(a,b):\n    '''\n    Write a function that computes the area of a parallelogram triangle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_circle_circle_square(a,b):\n    '''\n    Write a function that computes the area of a circle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_triangle_circle_square_square(a,b):\n    '''\n    Write a function that computes the area of a triangle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_circle_square_triangle_square(a,b):\n    '''\n    Write a function that computes the area of a circle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_square_circle_triangle_square(a,b):\n    '''\n    Write a function that computes the area of a circle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_triangle_circle_triangle_square(a,b):\n    '''\n    Write a function that computes the area of a triangle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*(a+b+1)/2,1)\ndef area_circle_square_parallelogram_circle(a,b):\n    '''\n    Write a function that computes the area of a circle triangle with sides a and b.\n    '''\n    return round((a*b*math.sqrt(1-b**2))*("
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i]=='g':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return len(s.replace('std','').count('std'))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n    '''\n    # Python program to count the number of\n    # occurence of the string'std' in\n    # a given string\n    \n    # define function to count the number\n    # of occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # occurs in a given string\n    \n    # method to count the number of occurence\n    # of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # occurs in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pass\n    '''\n    # Python program to count the\n    # number of times the string'std'\n    # appears in a given string\n    \n    # method to count the number of\n    # occurence of the string'std'\n    \n    # input: string,\n    # keyword: string\n    # output: count\n    '''\n    pass\n    '''\n    \n    pas"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count_occurance_c(s):\n        a = 0\n        for i in s:\n            if i =='std':\n                a += 1\n        return a\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count_occurance(s, std):\n        m = {}\n        for i in std:\n            if i in m:\n                m[i] += 1\n            else:\n                m[i] = 1\n        return len(m)\n    if len(s) == 0:\n        return 0\n    for i in s:\n        m = count_occurance(s, i)\n        return m\n    \nprint(count_occurance(\"std\", \"std\"))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #Your code here\n    pass\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = 0\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        if s =='std':\n            occurance = 1\n        return occurance\n    else:\n        for i in range(1, len(s) + 1):\n            if s[i] =='s' and s[i - 1] == 'd':\n                occurance += 1\n            if s[i] == 'd' and s[i - 1] =='s':\n                occurance += 1\n            if s[i] == 'd' and s[i - 1] == 't':\n                occurance += 1\n            if s[i] == 't' and s[i - 1] =='s':\n                occurance += 1\n            if s[i] == 't' and s[i - 1] == 'd':\n                occurance += 1\n            if s[i] =='s' and s[i - 1] == 't':\n                occurance += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import collections\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # print(test_tuple)\n    check_list = [bool, int, float]\n    for x in test_tuple:\n        try:\n            check_list.remove(x)\n        except:\n            pass\n    print(check_list)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return tuple(test_tuple) == tuple(tuple(test_tuple))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def check_type_x(test_tuple):\n        n=len(test_tuple)\n        for i in range(0,n):\n            if type(test_tuple[i])!=int and type(test_tuple[i])!=float:\n                print(\"Invalid data type in tuple data type is \",type(test_tuple[i]))\n                break\n        else:\n            return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple_type_str = list(test_tuple[0])\n    test_tuple_type = [x for x in test_tuple_type_str if x!= 'None']\n    test_tuple_type = [int(x) if type(x) is int else x for x in test_tuple_type]\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    my_type = test_tuple[2]\n    for i in range(0,len(test_tuple[0])):\n        if my_type!= test_tuple[0][i].type():\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_dict = {}\n    for test_el in test_tuple:\n        try:\n            test_dict[test_el] = test_el.get('data-type')\n        except:\n            test_dict[test_el] = test_el.get('type')\n    return test_dict == test_tuple\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if test_tuple == None:\n        return None\n    for i in test_tuple:\n        if isinstance(i, int) == False:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_type = tuple(type(element) for element in test_tuple)\n    for i in range(len(test_tuple)):\n        if tuple_type[i]!= test_tuple[i]:\n            raise TypeError(f'type of element {test_tuple[i]} does not match type of tuple')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_check = [isinstance(i, int) for i in test_tuple]\n    return all(type_check)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print('-- Checking type')\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str) or isinstance(test_tuple[i], float) or isinstance(test_tuple[i], int):\n            print(' ->', test_tuple[i])\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    c=0\n    for i in range(len(arr)):\n        if arr[i]==x:\n            c+=1\n        if c==n/2:\n            return True\n        else:\n            c=0\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n    \n    mid = int(len(arr)/2)\n    if mid < n and x in arr[mid]:\n        return True\n    elif mid > n and x in arr[:mid]:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # declare the variables\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count >= n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        else:\n            count = 0\n        if count > n/2:\n            return x\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n <= 0:\n        return False\n    \n    # Sort the array.\n    for i in range(n):\n        arr[i] = int(arr[i])\n    \n    # Find the number of occurrences of the element.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # Compute the percentage of occurrences.\n    return count/n > 0.5\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Start at the first element\n    pivot = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] == pivot:\n            # We found the pivot, so we know the element is the majority element\n            return True\n    # Did not find the pivot, so the element is the majority element\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Print out the elements\n    if n == 0:\n        return False\n    if x >= arr[n]:\n        return is_majority(arr, n-1, x)\n    return is_majority(arr, n-1, x) or x in arr[n]\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # O(n) time complexity, O(n) space complexity\n    # We will check if we have hit n/2 even numbers, and if so, we'll check if the element is the majority element.\n    # O(n) space complexity\n    # time complexity O(1) as we only need to check if the n/2 is the last element\n    # space complexity O(n)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    while (i<j):\n        if arr[i] == arr[j]:\n            i+=1\n            j-=1\n        else:\n            if arr[i] > arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    ans=0\n    while(n!=0):\n        ans+=n%2\n        n=n//2\n    return ans\ndef count_Set_Bits_List(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given list of numbers.\n    '''\n    ans=0\n    lst=[]\n    while(n!=0):\n        lst.append(n%2)\n        n=n//2\n    for x in lst:\n        ans+=x\n    return ans\ndef count_Set_Bits_Mul(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given list of numbers.\n    '''\n    ans=0\n    for x in range(1,n):\n        ans+=x\n    return ans\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Your code here\n    from math import log\n    sum = 0\n    for i in range(n):\n        sum += 1\n        if n % 2 == 0:\n            if i == 0:\n                # return -1\n                # sum += n//2\n                # if n%2 == 0:\n                #     sum += n//2\n                # else:\n                #     sum += n//2-1\n                # n = n//2\n            elif i == 1:\n                sum += n//2\n                # if n%2 == 1:\n                #     sum += n//2\n                # else:\n                #     sum += n//2+1\n                # n = n//2\n            else:\n                sum += 1\n    return sum\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    total = 0\n    for i in range(n):\n        if n % 2 == 1:\n            total += 1\n    return total\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n):\n        if n%2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1: \n            count += 1 \n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        num = n % 2\n        return count_Set_Bits(n // 2) + num\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits = 0\n    while (n!= 0): \n        if (n & 1): \n            bits = bits + 1\n        n = n >> 1\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if (n & 1) == 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    if n < 0:\n        print(\"Invalid input!\")\n        return 0\n    while n!= 0:\n        if n % 2:\n            count += 1\n        n = n // 2\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return (str[0])*3\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(',','').replace('.','').replace('!','').replace('?','').replace('#','').replace('$','').replace('%','').replace('+','').replace('-','').replace('*','').replace('(','').replace(')','').replace('_','').replace('{','').replace('}','').replace('[','').replace(']','').replace('{','').replace('}','')\n    \n    \n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string =''\n    # begin by checking if odd\n    for i in range(0, len(str) - 1, 2):\n        if str[i] % 2 == 1:\n            odd_string = odd_string + str[i]\n        else:\n            continue\n    # if it's not a third number add it before the first one\n    if odd_string =='':\n        odd_string ='' + str[0]\n    # return the string\n    return odd_string\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    even_index_list = []\n    odd_index_list = []\n    for i in range(0, len(str)):\n        if str[i % 2] % 2 == 1:\n            even_index_list.append(i)\n        else:\n            odd_index_list.append(i)\n    return even_index_list, odd_index_list\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([s[i] for i, x in enumerate(str) if x % 2 == 1])\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    even = []\n    odd = []\n    for i in range(0,len(str)):\n        if i%2 == 0:\n            even.append(str[i])\n        else:\n            odd.append(str[i])\n    return \"\".join(even+odd)\n    \nprint(odd_values_string(str))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s = \"\"\n    for i in range(len(str)):\n        if (i % 2) == 0:\n            s += str[i]\n    return s\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    odd = list(str)\n    if len(odd)%2 == 1:\n        return str\n    for i in range(len(odd)):\n        if odd[i]%2!= 0:\n            lst.append(odd[i])\n    return ''.join(lst)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    odd_elements = []\n    for i in str:\n        if i%2!= 0:\n            odd_elements.append(i)\n    return ''.join(odd_elements)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c: \n        return a\n    if a>b: \n        return b\n    if b>c: \n        return c\n    return a\ndef solution(A, B, C): \n    if A==0 or B==0 or C==0: \n        return 0\n    elif min_of_three(A,B,C)==A or min_of_three(B,A,C)==B or min_of_three(C,B,A)==C: \n        return A+B+C \n    elif min_of_three(A,B,C)==A or min_of_three(B,A,C)==B or min_of_three(C,B,A)==C: \n        return A+B+C \n    else: \n        return A+B+C+min_of_three(A,B,C)\nA=list(map(int, input().split()))\nB=list(map(int, input().split()))\nC=list(map(int, input().split()))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a if a<b else b\n    min = min if a<=b else b\n    min = min if a<=b else b\n    min = min if a<=b else b\n    min = min if a<=b else b\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a+b+c\n    if minimum<0:\n        minimum = 0\n    if minimum == 0:\n        return 0\n    elif minimum ==1:\n        return 1\n    else:\n        return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c:\n        return a\n    elif b<c and a<c:\n        return b\n    else:\n        return c\n    \n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>b and b>c:\n        return a\n    elif b>c and a>c:\n        return b\n    else:\n        return c\n    \n    \ndef sum_of_three(a,b,c): \n    '''\n    Write a function to find sum of three numbers.\n    '''\n    if a+b+c>0:\n        return a+b+c\n    else:\n        return 0\n    \n    \n    \ndef squar(a,b): \n    '''\n    Write a function to compute square of a number.\n    '''\n    return a**2\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    if c > a and c > b:\n        return c\n    return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\nprint(min_of_three(10,20,30))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b:\n        return a\n    elif a == c:\n        return a\n    elif b == c:\n        return b\n    elif a + b + c == 0:\n        return 0\n    elif a + b + c > 0:\n        return (min_of_three(a,b,c-a-b-c) + (a+b+c)/2)\n        \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a == b:\n        return a\n    elif a == c:\n        return a\n    elif b == c:\n        return b\n    elif a + b + c == 0:\n        return 0\n    elif a + b + c > 0:\n        return (max_of_three(a,b,c-a-b-c) + (a+b+c)/2)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    if a>b and a>c:\n        return c\n    if b>a and b>c:\n        return c\n    if c>a and c>b:\n        return b\n    return a\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (r>=l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (((l < n) and (r >= 0)) and ((r <= n) and (l > n)))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return 1\n    if n < 0 or n > 2**(n-1):\n        return 0\n    if n > 2**(n-1) - 1:\n        return 0\n    if n > 2**(n-1) - 2:\n        return 0\n    if l < 1:\n        return 0\n    if l > r:\n        return 0\n    if l <= n <= r:\n        return 0\n    for i in range(l,r+1):\n        if all_Bits_Set_In_The_Given_Range(n-1,i,r):\n            return 1\n    return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(r<l):\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n-1,l,r) or all_Bits_Set_In_The_Given_Range(n,l,r-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    assert l <= r\n    def checkBits(x):\n        if n & x:\n            return False\n        if n & (n - 1):\n            return True\n        return False\n    return all([checkBits(i) for i in range(l,r+1)])\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bits = l-r\n    bin_1 = bin(n)\n    for i in range(0,8):\n        if (bin_1[i] == '0'):\n            bits = bits - 1\n    if (bits == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bits=n>>l-r+1\n    bin_str=bin(bits)\n    bin_str=bin_str.replace('0b','')\n    if not bin_str:\n        return False\n    else:\n        bin_str=bin_str.replace('0b','')\n        for i in range(len(bin_str)):\n            if (bin_str[i]!=bin_str[i+1]) and (bin_str[i]!=bin_str[i-1]):\n                return False\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if l<= n <= r:\n        return False\n    \n    if n==0:\n        return True\n    \n    return all_Bits_Set_In_The_Given_Range(n-1,l,r)\n        \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if n==l or l==0 or r==n:\n        return True\n    \n    for i in range(l,r+1):\n        if n&i==0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if n < l or n > r:\n        return False\n    else:\n        for i in range(l,r+1):\n            if (bin(i).count(\"1\")):\n                return True\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    temp = n >> l \n    temp = temp & (1 << r)\n    return not temp \n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_copy = arr.copy()\n    for i in range(n):\n        if arr[i] > 0:\n            arr_copy[i] = -arr[i]\n    arr_copy = arr_copy[:n] + [-arr[i] for i in range(n, len(arr)) if arr[i] < 0]\n    return arr_copy\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # print(arr)\n    if n == 0:\n        return arr\n    if n < 0:\n        arr[0] = -1 * arr[0]\n        arr[n:] = -1 * arr[:n:]\n        return arr\n    if arr[-1] < 0:\n        arr[-1] = -1 * arr[-1]\n        arr[:n] = -1 * arr[:n:]\n        return arr\n    arr[:n] = -1 * arr[:n]\n    arr[-1] = -1 * arr[-1]\n    # print(arr)\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0: return arr\n    res = [0]*n\n    res[0] = arr[0]\n    for i in range(1,n):\n        res[i] = arr[i]\n        if arr[i] < 0:\n            res[i] = -1 * arr[i]\n    return res\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr.copy()\n    arr.sort()\n    return arr[n-1::-1]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    ans = [[] for i in range(n)]\n    for i in range(n):\n        ans[i] = list(map(int, arr[i]))\n    for i in range(n):\n        if arr[i][0] < 0:\n            ans[i] = ans[i][::-1]\n            for k in range(n):\n                if ans[i][k] < 0:\n                    ans[i][k] *= -1\n            arr[i] = [abs(x) for x in arr[i]]\n    return ans\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    for index, value in enumerate(arr):\n        if value < 0:\n            result.append(-value)\n        else:\n            result.append(value)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0: return arr\n    if n == 1: return [arr[0]] + re_arrange_array(arr[1:], n)\n    arr.reverse()\n    arr[:0] = [arr[0]] + re_arrange_array(arr[1:], n-1)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort(reverse = True)\n    if n == 1:\n        return arr\n    if arr[0] < 0:\n        arr[0] = -arr[0]\n        arr = arr[1:] + arr[:1]\n    elif arr[0] > 0:\n        arr[0] = -arr[0]\n        arr = arr[:-1] + arr[:len(arr)-1]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_length = len(arr)\n    zero_count = n - arr_length\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for x in range(len(arr)):\n        if arr[x] < 0:\n            arr[x] = -arr[x]\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,'')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\r\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\r\",\"\")\n    str1 = str1.replace(\"  \",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\r\",\"\")\n    str1 = str1.replace(\"  \",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\r\",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str1 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == char:\n            new_str1 += char\n        else:\n            new_str1 += \" \"\n    return new_str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace('\\t',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    repl = char\n    \n    new_str = \"\"\n    for char in str1:\n        if char == \" \":\n            new_str += repl\n        else:\n            new_str += char\n    \n    return new_str\n    \ndef reverse_string(str1):\n    '''\n    Write a function that takes a string and reverses it, returning a new string.\n    '''\n    \n    new_str = str1[::-1]\n    return new_str\n    \ndef int_to_str(int1):\n    '''\n    Write a function that takes an integer and returns a string containing that number.\n    '''\n    \n    new_str = str(int1)\n    return new_str\n    \ndef is_palindrome(str1):\n    '''\n    Write a function that takes a string and checks if the string is a palindrome, or not.\n    '''\n    \n    new_str = str1.replace(\" \",\"\")\n    \n    if new_str == new_str[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == \"\":\n        return str1\n    else:\n        str2 = \"\"\n        for i in str1:\n            if i == char:\n                str2 = str2 + char\n            else:\n                str2 = str2 + i\n        return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str=str1.replace(\" \",\"\")\n    new_str=new_str.replace(char,\"\")\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=''\n    for ch in str1:\n        if ch==' ':\n            str2+=char\n        else:\n            str2+=ch\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char == \" \":\n        str1 = str1.replace(\" \",\"\")\n        return str1.replace(char,char.upper())\n    else:\n        return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_larg=[]\n    heapq.heapify(list_larg)\n    for i in range(0,n):\n        heapq.heappush(list_larg,list1[i])\n    return list_larg\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = sorted(list1)\n    list2 = []\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    list1.append(n)\n    return list1\ndef f(x,n):\n    '''\n    Write a function that takes in two numbers and returns the sum of the numbers that are bigger than the number passed in.\n    '''\n    if x > n:\n        return x\n    else:\n        return f(x,n-1) + n\ndef f(x,n):\n    '''\n    Write a function that takes in two numbers and returns the sum of the numbers that are bigger than the number passed in.\n    '''\n    if x == n:\n        return 0\n    else:\n        return x + f(x,n-1)\ndef sorting(list1):\n    '''\n    Write a function that takes in a list and returns it in a sorted form.\n    '''\n    heapq.heapify(list1)\n    for x in range(len(list1)-1):\n        for y in range(len(list1)-x-1):\n            if list1[y][1]>list1[y+1][1]:\n                temp = list1[y]\n                list1[y] = list1[y+1]\n                list1[y+1] = temp\n    return list1\ndef main():\n    '''\n    Write a function that takes in two numbers and returns the sum of the numbers that are bigger than the number passed in.\n    '''\n    l = []\n    list1 = []\n    while True:\n        n = int(input(\"Enter the number of elements: \"))\n        if n == -1:\n            break\n        else:\n            l.append(n)\n    print(f(l[0],l[1]))\n    l = sort(l)\n    print(l)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Write your code here.\n    heap=[]\n    for i in list1:\n        heapq.heappush(heap,[i,len(list1)])\n    heapq.heapify(heap)\n    output=[]\n    for i in heap:\n        if(len(list1)==i[1]):\n            output.append(i[0])\n        heapq.heapify(heap)\n    return output\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    size = len(list1)\n    \n    if size < n:\n        print(\"Error: n must be greater than or equal to the length of the list.\")\n        return\n        \n    heap = []\n    \n    for i in range(0,n):\n        heapq.heappush(heap,(list1[i],i))\n        \n    heapq.heappush(heap,(list1[size-1],size-1))\n    \n    count = n\n    \n    while len(heap)!= 0:\n        \n        if len(heap) > 0:\n            count -= 1\n            \n        temp = heapq.heappop(heap)\n        \n        if count == 0:\n            break\n            \n        if count > 0:\n            print(temp[1],temp[0])\n            count -= 1\n            \n        heapq.heappush(heap,(list1[temp[1]],temp[1]))\n    \n    return heap\n            \n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res=[]\n    for i in range(len(list1)):\n        heapq.heappush(res,list1[i])\n    return res\ndef sort_list(list1):\n    '''\n    Write a function that takes a list of n integers and returns the n largest items in the list.\n    '''\n    n=len(list1)\n    res=[]\n    for i in range(n):\n        heapq.heappush(res,list1[i])\n    return res\ndef median(list1):\n    '''\n    Write a function that takes a list of n integers and returns the n middle items.\n    '''\n    median=[]\n    for i in range(len(list1)):\n        median.append(list1[i])\n    median=sorted(median)\n    return median\ndef median_value(list1):\n    '''\n    Write a function that takes a list of n integers and returns the n median values.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    median=median(list2)\n    return median\ndef floor(x,y):\n    '''\n    Write a function that takes in two numbers x and y and returns the floor of x divided by y.\n    '''\n    return x//y\ndef ceiling(x,y):\n    '''\n    Write a function that takes in two numbers x and y and returns the ceiling of x divided by y.\n    '''\n    return x%y\ndef even_odd_check(list1):\n    '''\n    Write a function that takes a list of numbers and returns a list of 2 numbers whose elements are even and odd.\n    '''\n    even=[]\n    odd=[]\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return even,odd\ndef odd_even_check(list1):\n    '''\n    Write a function that takes a list of numbers and returns a list of 2 numbers whose elements are odd and even.\n    '''\n    even=[]\n    odd=[]\n    for i in range(len(list1)):\n        if list1[i]%2==1:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return even,odd\ndef list_check(l):\n    '''\n    Write a function that takes a list l and returns a list containing only the values from the first element of the list.\n    '''\n    first=l[0]\n    return l[1:len(l)]\ndef counter(list1):\n    '''\n    Write a function that takes a list of numbers and returns the count of each number.\n    '''\n    l=[]\n    for i in list1:\n        l.append(i)\n    return l\ndef check(list1):\n    '''\n    Write a function that takes a list of n integers and returns a boolean value representing whether or not all the elements of the list are unique.\n    '''\n    d=0\n    for i in list1:\n        if i in list1:\n            d+=1\n    return d==len(list1)\ndef is_perfect(l):\n    '''\n    Write a function that takes a list and returns a boolean value representing whether or not the list is a perfect number.\n    '''\n    l1=[]\n    for i in l:\n        if i in l1:\n            continue\n        else:\n            l1.append(i)\n    return len(l1)==len(l)\ndef count(list1):\n    '''\n    Write a function that takes a list and returns a dictionary containing each number in the list as a key, and the number of times it appears as a value.\n    '''\n    count={}\n    for i in list1:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n    return count\ndef is_in_list(list1,item):\n    '''\n    Write a function that takes a list and an item and returns a boolean value representing whether or not the item is in the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==item:\n            return True\n    return False\ndef num_in_list(list1,item):\n    '''\n    Write a function that takes a list and an item and returns a boolean value representing whether or not the item is in the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==item:\n            return True\n    return False\ndef is_in_list2(list1,item):\n    '''\n    Write a function that takes a list and an item and returns a boolean value representing whether or not the item is in the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==item:\n            return True\n    return False\ndef num_in_list2(list1,item):\n    '''\n    Write a function that takes a list and an item and returns a boolean value representing whether or not the item is in the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==item:\n            return True\n    return False\ndef list_check_2(l):\n    '''\n    Write a function that takes a list of numbers and returns a boolean value representing whether or not all the elements of the list are unique.\n    '''\n    l1=[]\n    for i in l:\n        if i in l1:\n            continue\n        else:\n            l1.append(i)\n    return len(l1)==len(l)\ndef list_check_3(l):\n    '''\n    Write a function that takes a list of numbers and returns a boolean value representing whether or not all the elements of the list are unique.\n    '''\n    l1=[]\n    for i in l:\n        if i not in l1:\n            l1.append(i)\n    return len(l1)==len(l)\ndef list_check_4(l):\n    '''\n    Write a function that takes a list of numbers and returns a boolean value representing whether or not all the elements of the list are unique.\n    '''\n    l1=[]\n    for i in l:\n        if i not in l1:\n            l1.append(i)\n    return len(l1)==len(l)\ndef list_check_5(l):\n    '''\n    Write a function that takes a list of numbers and returns a boolean value representing whether or not all the elements of the list are unique.\n    '''\n    l1=[]\n    for i in l:\n        if i not in l1:\n            l1.append(i)\n    return len(l1)==len(l)\ndef list_check_6(l):\n    '''\n    Write a function that takes a list of numbers and returns a boolean value representing whether or not all the elements of the list are unique.\n    '''\n    l1=[]\n    for i in l:\n        if i not in l1:\n            l1.append(i)\n    return len(l1)==len(l)\ndef list_check_7(l):\n    '''\n    Write a function that takes a list of numbers and returns a boolean value representing whether or not all the elements of the list are unique.\n    '''\n    l1=[]\n    for i in l:\n        if i not in l1:\n            l1.append(i)\n    return len(l1)==len(l)\ndef list_check_8(l):\n    '''\n    Write a function that takes a list of numbers and returns a boolean value representing whether or not all the elements of the list are unique.\n    '''\n    l1=[]\n    for i in l:\n        if i not in l1:\n            l1.append(i)\n    return len(l1)==len(l)\ndef list_check_9(l):\n    '''\n    Write a function that takes a list of numbers and returns a boolean value representing whether or not all the elements of the list are unique.\n    ''"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(list1[i])\n        heapq.heapify(result)\n    return result\ndef nlargest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(list1[i])\n        heapq.heapify(result)\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # your code here\n    return sorted(list1, reverse=True, key=len)\n    # or\n    # return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    newlist=[]\n    for i in range(0,n):\n        print(\"List before append \",list1)\n        newlist.append(list1.pop(0))\n    print(\"List after append \",newlist)\n    return newlist\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    def inbetween_rad(r,h):\n        '''\n        Returns in between radius.\n        '''\n        return r + (h / 2)\n    def fuction_intersection_of_face(L,R):\n        '''\n        Returns the point on the circle L where the\n        circle R intersects the face.\n        '''\n        theta = math.atan2(R[1] - L[1],R[0] - L[0])\n        delta = math.fabs(math.atan2(R[1] - L[1],R[0] - L[0])) - \\\n                math.atan2(L[1] - R[1],L[0] - R[0])\n        if delta < 0:\n            theta = 0\n        return (L[0] + math.cos(theta) * L[3] * h * math.sin(theta) * math.cos(h),\\\n                L[1] + math.sin(theta) * L[3] * h * math.sin(theta) * math.cos(h),\\\n                L[2] + math.sin(theta) * L[3] * h * math.cos(theta))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print('\\n\\n*** LATERAL SURFACE AREA OF A CYLINDER ***\\n')\n    h_factor = 0.6\n    z = 0.26\n    theta = np.linspace(0, 2*np.pi, 100)\n    x = r*np.cos(theta)\n    y = r*np.sin(theta)\n    z1 = z*np.cos(theta)\n    z2 = z*np.sin(theta)\n    # print('x, y, z1, z2, theta, r, h')\n    # print(x, y, z1, z2, theta, r, h)\n    # print(x[100], y[100], z1[100], z2[100], theta[100], r[100], h[100])\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (3/2)*(r**2)*(h**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A=h/2*np.pi\n    x = np.tan(A)*r\n    y = np.tan(A)*(r**2)*np.cos(A)\n    z = np.tan(A)*(r**2)*np.sin(A)\n    print('\\nLatitudinal surface area = ', A)\n    print('Lateral surface area = ', x,y,z)\n    return A\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r**2 * h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*(h*r)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    c = (2*r*h)/((4*np.pi*r*r*h) + (4*np.pi*r*h*r))\n    return c\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    a=l**3\n    return a\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    side_length = l\n    volume = 1\n    while side_length > 0:\n        volume = volume * side_length\n        side_length -= 1\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # store the side lengths of the cube\n    side_l = [l**3,l**2,l]\n    # calculate the volume\n    vol = 4 * side_l[0] * side_l[1] * side_l[2]\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print('The volume of a cube is:',l*l*3.14)\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l < 3:\n        print(\"Error: Invalid side length. Side length must be greater than 3.\")\n    elif l > 6:\n        print(\"Error: Invalid side length. Side length must be less than 6.\")\n    else:\n        side_length = 3 * l ** 0.5\n        print(\"Side length =\", side_length)\n        volume = side_length ** 3\n        print(\"Volume of a cube =\", volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    if l == 0:\n        return 0\n    elif l == 1:\n        return math.sqrt(3)\n    elif l == 2:\n        return math.sqrt(6)\n    elif l == 3:\n        return math.sqrt(9)\n    elif l == 4:\n        return math.sqrt(12)\n    elif l == 5:\n        return math.sqrt(15)\n    elif l == 6:\n        return math.sqrt(18)\n    elif l == 7:\n        return math.sqrt(21)\n    elif l == 8:\n        return math.sqrt(24)\n    elif l == 9:\n        return math.sqrt(27)\n    elif l == 10:\n        return math.sqrt(30)\n    elif l == 11:\n        return math.sqrt(33)\n    elif l == 12:\n        return math.sqrt(36)\n    elif l == 13:\n        return math.sqrt(39)\n    elif l == 14:\n        return math.sqrt(42)\n    elif l == 15:\n        return math.sqrt(45)\n    elif l == 16:\n        return math.sqrt(48)\n    elif l == 17:\n        return math.sqrt(51)\n    elif l == 18:\n        return math.sqrt(54)\n    elif l == 19:\n        return math.sqrt(57)\n    elif l == 20:\n        return math.sqrt(60)\n    elif l == 21:\n        return math.sqrt(63)\n    elif l == 22:\n        return math.sqrt(66)\n    elif l == 23:\n        return math.sqrt(69)\n    elif l == 24:\n        return math.sqrt(72)\n    elif l == 25:\n        return math.sqrt(75)\n    elif l == 26:\n        return math.sqrt(78)\n    elif l == 27:\n        return math.sqrt(81)\n    elif l == 28:\n        return math.sqrt(84)\n    elif l == 29:\n        return math.sqrt(87)\n    elif l == 30:\n        return math.sqrt(90)\n    elif l == 31:\n        return math.sqrt(93)\n    elif l == 32:\n        return math.sqrt(96)\n    elif l == 33:\n        return math.sqrt(99)\n    elif l == 34:\n        return math.sqrt(102)\n    elif l == 35:\n        return math.sqrt(105)\n    elif l == 36:\n        return math.sqrt(108)\n    elif l == 37:\n        return math.sqrt(111)\n    elif l == 38:\n        return math.sqrt(114)\n    elif l == 39:\n        return math.sqrt(117)\n    elif l == 40:\n        return math.sqrt(120)\n    elif l == 41:\n        return math.sqrt(123)\n    elif l == 42:\n        return math.sqrt(126)\n    elif l == 43:\n        return math.sqrt(129)\n    elif l == 44:\n        return math.sqrt(132)\n    elif l == 45:\n        return math.sqrt(135)\n    elif l == 46:\n        return math.sqrt(138)\n    elif l == 47:\n        return math.sqrt(141)\n    elif l == 48:\n        return math.sqrt(144)\n    elif l == 49:\n        return math.sqrt(147)\n    elif l == 50:\n        return math.sqrt(150)\n    elif l == 51:\n        return math.sqrt(153)\n    elif l == 52:\n        return math.sqrt(156)\n    elif l == 53:\n        return math.sqrt(159)\n    elif l == 54:\n        return math.sqrt(162)\n    elif l == 55:\n        return math.sqrt(165)\n    elif l == 56:\n        return math.sqrt(168)\n    elif l == 57:\n        return math.sqrt(171)\n    elif l == 58:\n        return math.sqrt(174)\n    elif l == 59:\n        return math.sqrt(177)\n    elif l == 60:\n        return math.sqrt(180)\n    elif l == 61:\n        return math.sqrt(183)\n    elif l == 62:\n        return math.sqrt(186)\n    elif l == 63:\n        return math.sqrt(189)\n    elif l == 64:\n        return math.sqrt(192)\n    elif l == 65:\n        return math.sqrt(195)\n    elif l == 66:\n        return math.sqrt(198)\n    elif l == 67:\n        return math.sqrt(201)\n    elif l == 68:\n        return math.sqrt(204)\n    elif l == 69:\n        return math.sqrt(207)\n    elif l == 70:\n        return math.sqrt(210)\n    elif l == 71:\n        return math.sqrt(213)\n    elif l == 72:\n        return math.sqrt(216)\n    elif l == 73:\n        return math.sqrt(219)\n    elif l == 74:\n        return math.sqrt(222)\n    elif l == 75:\n        return math.sqrt(225)\n    elif l == 76:\n        return math.sqrt(228)\n    elif l == 77:\n        return math.sqrt(231)\n    elif l == 78:\n        return math.sqrt(234)\n    elif l == 79:\n        return math.sqrt(237)\n    elif l == 80:\n        return math.sqrt(240)\n    elif l == 81:\n        return math.sqrt(243)\n    elif l == 82:\n        return math.sqrt(246)\n    elif l == 83:\n        return math.sqrt(249)\n    elif l == 84:\n        return math.sqrt(252)\n    elif l == 85:\n        return math.sqrt(255)\n    elif l == 86:\n        return math.sqrt(258)\n    elif l == 87:\n        return math.sqrt(261)\n    elif l == 88:\n        return math.sqrt(264)\n    elif l == 89:\n        return math.sqrt(267)\n    elif l == 90:\n        return math.sqrt(270)\n    elif l == 91:\n        return math.sqrt(273)\n    elif l == 92:\n        return math.sqrt(276)\n    elif l == 93:\n        return math.sqrt(279)\n    elif l == 94:\n        return math.sqrt(282)\n    elif l == 95:\n        return math.sqrt(285)\n    elif l == 96:\n        return math.sqrt(288)\n    elif l == 97:\n        return math.sqrt(291)\n    elif l == 98:\n        return math.sqrt(294)\n    elif l == 99:\n        return math.sqrt(297)\n    elif l == 100:\n        return math.sqrt(310)\n    elif l == 101:\n        return math.sqrt(313)\n    elif l == 102:\n        return math.sqrt(316)\n    elif l == 103:\n        return math.sqrt(319)\n    elif l == 104:\n        return math.sqrt(322)\n    elif l == 105:\n        return math.sqrt(335)\n    elif l == 106:\n        return math.sqrt(338)\n    elif l == 107:\n        return math.sqrt(341)\n    elif l == 108:\n        return math.sqrt(344)\n    elif l == 109:\n        return math.sqrt(347)\n    elif l == 110:\n        return math.sqrt(350)\n    elif l == 111:\n        return math.sqrt(353)\n    e"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    assert isinstance(l, int), \"Side length must be an integer.\"\n    assert l > 0, \"Side length must be greater than 0.\"\n    volume = 0\n    for i in range(l, 0, -1):\n        volume += i**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0:\n        n &= n - 1\n        for i in range(32):\n            if n & 1:\n                print(\"even_bit_set_number({}) = 0\".format(i + 1))\n            n = n >> 1\n    else:\n        n &= n - 1\n        for i in range(32):\n            if n & 1:\n                print(\"even_bit_set_number({}) = 1\".format(i + 1))\n            n = n >> 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (bin(n)[2:])\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    output = \"\"\n    for i in range(0, n):\n        if i % 2 == 0:\n            output = output + '1'\n        else:\n            output = output + '0'\n    return output\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    for i in range(0, n):\n        if (i % 2 == 0):\n            even_bits.append(1)\n        else:\n            even_bits.append(0)\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n <= 0: \n        return 0\n    else: \n        return n & 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n & 2:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n >= 0:\n        n = n & 255\n        if n > 0:\n            for i in range(0, n):\n                if (n & 1) == 0:\n                    t = '0'\n                else:\n                    t = '1'\n                bin_string = bin(n)[2:]\n                string_string = t + bin_string\n                string_string = string_string[2:]\n                n = int(string_string, 2)\n        else:\n            n = -1 * n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Declare variables\n    count = 0\n    zero_count = 0\n    while count < n:\n        if (count % 2 == 0):\n            count += 1\n        else:\n            zero_count += 1\n    # Return the number\n    return count + zero_count\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = []\n    for i in range(0, len(n), 2):\n        result.append(n >> i)\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    f = bin(n)\n    new_f = f[2:]\n    while len(new_f) < 8:\n        new_f = \"0\" + new_f\n    return int(new_f,2)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counts = {}\n    for a,b,c in test_list:\n        counts[(a,b,c)] = counts.get( (a,b,c), 0) + 1\n    return counts\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for item in test_list:\n        occurences[item[0]] = item[1]\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    #print(test_list)\n    for tup in test_list:\n        #print(tup)\n        if tup[0] in dictionary.keys():\n            dictionary[tup[0]] = dictionary[tup[0]] + 1\n        else:\n            dictionary[tup[0]] = 1\n    #print(dictionary)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #print(\"hello\")\n    counts = dict()\n    for i in test_list:\n        if i[0] in counts:\n            counts[i[0]] += 1\n        else:\n            counts[i[0]] = 1\n    return counts\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dic = {}\n    for i in test_list:\n        if i[0] in dic:\n            dic[i[0]] = dic[i[0]] + 1\n        else:\n            dic[i[0]] = 1\n    return dic\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for x in test_list:\n        if x[0] in result:\n            result[x[0]] += 1\n        else:\n            result[x[0]] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    returnCounter = Counter(test_list)\n    return dict(returnCounter)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #define the dictionary \n    counter = {}\n    for i in test_list:\n        if i not in counter:\n            counter[i] = 1\n        else:\n            counter[i] += 1\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for tup in test_list:\n        output[tup[0]] = tup[1]\n    return output\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= str[i:j+1][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    c = 0\n    for i in lst:\n        for j in range(len(i)-1):\n            if i[j] == i[j+1]:\n                c+=1\n        if c==0:\n            print(c,\"\\n\",i)\n        c = 0\n    print(c)\n    \ndef number_of_substrings2(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            count+=1\n    print(count)\n    \ndef number_of_substrings3(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)<=1:\n            count+=1\n    print(count)\n    \ndef number_of_substrings4(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>1:\n            count+=1\n    print(count)\n    \ndef number_of_substrings5(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        for j in range(len(i)-1):\n            if i[j] == i[j+1]:\n                count+=1\n        if count==0:\n            print(count,\"\\n\",i)\n        count=0\n    print(count)\n    \ndef number_of_substrings6(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>1:\n            count+=1\n    print(count)\n    \ndef number_of_substrings7(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)<2:\n            count+=1\n    print(count)\n    \ndef number_of_substrings8(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>1:\n            count+=1\n    print(count)\n    \ndef number_of_substrings9(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)<1:\n            count+=1\n    print(count)\n    \ndef number_of_substrings10(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=1:\n            count+=1\n    print(count)\n    \ndef number_of_substrings11(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=2:\n            count+=1\n    print(count)\n    \ndef number_of_substrings12(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=3:\n            count+=1\n    print(count)\n    \ndef number_of_substrings13(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=4:\n            count+=1\n    print(count)\n    \ndef number_of_substrings14(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=5:\n            count+=1\n    print(count)\n    \ndef number_of_substrings15(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=6:\n            count+=1\n    print(count)\n    \ndef number_of_substrings16(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=7:\n            count+=1\n    print(count)\n    \ndef number_of_substrings17(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=8:\n            count+=1\n    print(count)\n    \ndef number_of_substrings18(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=9:\n            count+=1\n    print(count)\n    \ndef number_of_substrings19(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=10:\n            count+=1\n    print(count)\n    \ndef number_of_substrings20(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=11:\n            count+=1\n    print(count)\n    \ndef number_of_substrings21(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    lst = str.split(' ')\n    count = 0\n    for i in lst:\n        if len(i)>=12:\n            count+=1\n    print(count)\n    \ndef number_of_substrings22(str): \n    '''\n    Write a python function to count the number of non-empty substrings o"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(str)-1):\n        \n        if str[i] == str[i+1]:\n            count += 1\n        \n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    d = {}\n    for ch in str: \n        if ch in d: \n            d[ch] += 1\n        else: \n            d[ch] = 1\n    s = 0\n    for k in d.values(): \n        s += k * (k - 1) // 2\n    return s\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def check_empty_string(str): \n        '''\n        Function to check if the string is empty or not. \n        '''\n        if len(str) == 0: \n            return True\n        return False\n    def count_substrings(str): \n        '''\n        Function to count all substrings of a given string. \n        '''\n        n = 0\n        lst = []\n        for i in range(len(str)): \n            if str[i]!= str[i + 1]: \n                n += 1\n                lst.append(str[i: i + 2])\n        return n, lst\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        return sum(1 for i in range(0, len(str)) if str[i] == str[i+1])\n    \ndef main():\n    print(\"Welcome to the LeetCode Password Checker.\")\n    print(\"You can use any password you like, but only contain digits and English letters. Letters should be considered as special.\")\n    print(\"There are 15 weak passwords you can use. You can use up to 15 per hour. For example, if you have 15 weak passwords with a minimum of 1 password and 10 strong ones, you can use 5, 15, 20, 25, and 30. Note that, you can only use one strong password at a time.\")\n    print(\"This is only intended to help you with debugging and testing. Your solution should be on a scale from 1 to 1000, so your results are not very sensitive to errors.\")\n    print(\"So, if your password is too long, you should change the password to a shorter version. For example, if your password is 10,10,10,10,10,10,10,10,10,10, and you have 15 weak passwords, you can use every 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, and you have 15 strong ones. You can only use one strong password at a time.\")\n    print(\"Here's an example of your input: \")\n    print(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\")\n    print(\"You can use up to 15 at a time. For example, if you have 15 weak passwords with a minimum of 1 password and 10 strong ones, you can use 5, 15, 20, 25, and 30. Note that, you can only use one strong password at a time.\")\n    \n    def get_password(str):\n        '''\n        Function for getting a password from a string.\n        '''\n        passwords = []\n        for i in range(0, len(str)):\n            passwords.append(str[i])\n        passwords.sort()\n        return passwords\n    \n    def get_weak_passwords(password):\n        '''\n        Function for getting weak passwords from a given password.\n        '''\n        weak = []\n        for i in range(0, len(password)):\n            if (password[i] == '0') or (password[i] == '1'):\n                weak.append(password[i])\n        weak = list(set(weak))\n        return weak\n    \n    def get_strong_passwords(weak_passwords):\n        '''\n        Function for getting strong passwords from a given weak password.\n        '''\n        strong = []\n        for i in range(0, len(weak_passwords)):\n            if weak_passwords[i] not in strong:\n                strong.append(weak_passwords[i])\n        strong = list(set(strong))\n        return strong\n    \n    def generate_strong_passwords():\n        '''\n        Function for generating strong passwords.\n        '''\n        strong_passwords = []\n        weak_passwords = get_weak_passwords(get_password(str))\n        for i in range(0, len(weak_passwords)):\n            strong_passwords.append(get_strong_passwords(weak_passwords[i]))\n        return strong_passwords\n    \n    def generate_weak_passwords():\n        '''\n        Function for generating weak passwords.\n        '''\n        strong_passwords = []\n        weak_passwords = get_weak_passwords(get_password(str))\n        for i in range(0, len(weak_passwords)):\n            strong_passwords.append(get_strong_passwords(weak_passwords[i]))\n        return strong_passwords\n    \n    def is_weak(weak_passwords):\n        '''\n        Function for verifying if a given weak password is weak.\n        '''\n        for i in range(0, len(weak_passwords)):\n            if weak_passwords[i] not in strong_passwords:\n                return False\n        return True\n    \n    def is_strong(strong_passwords):\n        '''\n        Function for verifying if a given strong password is strong.\n        '''\n        for i in range(0, len(strong_passwords)):\n            if strong_passwords[i] not in weak_passwords:\n                return False\n        return True\n    \n    print(\"Is strong? (y/n): \")\n    answer = input().lower()\n    if answer == \"y\":\n        print(\"Is strong? (y/n): \")\n        answer = input().lower()\n        if answer == \"y\":\n            print(\"Is weak? (y/n): \")\n            answer = input().lower()\n            if answer == \"y\":\n                print(\"Strong passwords: \")\n                for i in range(0, len(strong_passwords)):\n                    print(strong_passwords[i])\n                print(\"Weak passwords: \")\n                for i in range(0, len(weak_passwords)):\n                    print(weak_passwords[i])\n                print(\"Strong passwords: \")\n                for i in range(0, len(strong_passwords)):\n                    print(strong_passwords[i])\n            else:\n                print(\"Weak passwords: \")\n                for i in range(0, len(weak_passwords)):\n                    print(weak_passwords[i])\n                print(\"Strong passwords: \")\n                for i in range(0, len(strong_passwords)):\n                    print(strong_passwords[i])\n    else:\n        print(\"Weak passwords: \")\n        for i in range(0, len(weak_passwords)):\n            print(weak_passwords[i])\n        print(\"Strong passwords: \")\n        for i in range(0, len(strong_passwords)):\n            print(strong_passwords[i])\n    print(\"Strong passwords: \")\n    for i in range(0, len(strong_passwords)):\n        print(strong_passwords[i])\n    print(\"Weak passwords: \")\n    for i in range(0, len(weak_passwords)):\n        print(weak_passwords[i])\n    print(\"Weak passwords: \")\n    for i in range(0, len(weak_passwords)):\n        print(weak_passwords[i])\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    \n    for i in range(len(str)-1):\n        for j in range(i, len(str)):\n            if str[i:j]!= str[i+1:j+1] and str[i:j]!= str[i+1:j+2]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    # Create a dictionary of length of substring\n    sub_dict = {}\n    for i in range(0,len(str)-1):\n        if str[i] not in sub_dict:\n            sub_dict[str[i]] = 1\n        else:\n            sub_dict[str[i]] += 1\n    # Get values of the dictionary\n    for key,value in sub_dict.items():\n        count += value*(key.find(str[i])+1)\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    # loop through the string to count the number of non-empty substring\n    for i in range(len(str) - 1):\n        # check if the current substring is empty\n        if (str[i] == str[i + 1]):\n            count = count + 1\n    # return the number of non-empty substring\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if str[i:j]==str[i:j].replace('','',1):\n                count=count+1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from math import factorial \n    #get the factorial of n \n    n_factorial = factorial(n)\n    #find the numbers to be reduced by the factorial \n    lower = 2 * m - n \n    #find the numbers to be reduced by the factorial \n    higher = factorial(m) - factorial(n) \n    #get the total number of sequences \n    total = (n_factorial // (lower * higher)) \n    #print out the result \n    print(\"Total number of sequences is: \" + str(total)) \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    possible_sequences = 0\n    i = 0\n    while i <= n:\n        total = m*(m + 1)\n        if m == 2:\n            total = (total / 2) + 1\n            possible_sequences += 1\n        elif i == 1:\n            total = (total / 2) + 1\n            possible_sequences += 1\n        else:\n            total = (total / 2) + 1\n            possible_sequences += 1\n        i += 1\n    return possible_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 1\n    for i in range(2, m + 1):\n        for j in range(2, n + 1):\n            total *= i\n            total //= j\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    answer = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            answer += 2\n        else:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num_of_sequences = 0\n    #num_of_sequences = (m * (m - 1)) // 2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 1\n    for j in range(n):\n        total *= (m - j)\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_num = 0\n    for i in range(1,m+1):\n        for j in range(1,i+1):\n            if j <= n:\n                total_num += 1\n    return total_num\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    Use recursion to find the total number of sequences that might be made of m elements that are greater than or equal to the previous element.\n    '''\n    def get_total_number_of_sequences(m,n, seq):\n        if m < 0 or n < 0 or m > n: \n            return 0\n        if m == 0 or n == 0: \n            return 1\n        if m > n: \n            return get_total_number_of_sequences(m-1, n, seq)\n        else: \n            return get_total_number_of_sequences(m-1, n, seq) + get_total_number_of_sequences(m-1, n-1, seq)\n    return get_total_number_of_sequences(m, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    \n    for i in range(m,n+1):\n        seq = 1\n        for j in range(2,i):\n            if(i % j == 0):\n                break\n            if(i % j == 0):\n                seq = seq + 1\n        count = count + seq\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return sum(sum(range(m,n+1))//3)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        if i!= len(list1) - 1:\n            list1[i] = list2[i]\n        else:\n            list1[i] = list2[0]\n    return list1\n    \nprint(replace_list(['a','b','c','d','e','f'],['z','y','x','w','v','u']))\nprint(replace_list([],['z','y','x','w','v','u']))\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        new_list.append(list2[i])\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2.pop()\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    while len(list1)>0:\n        list1.pop()\n    while len(list2)>0:\n        list2.pop()\n    \n    if len(list1)==0:\n        return list2\n    elif len(list2)==0:\n        return list1\n    else:\n        return list1+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # create a temporary list, then replace the last item with the second item\n    temp = list1[len(list1)-1]\n    list1[len(list1)-1] = list2[len(list2)-1]\n    # then remove the last element\n    list1.pop()\n    # return the temporary list\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3 = list1 + list2\n    print(list3)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #Define list1\n    list1_copy = list1.copy()\n    #Define list2\n    list2_copy = list2.copy()\n    #Check if there are less than two lists\n    if len(list1_copy) < len(list2_copy):\n        #Add elements to new list\n        for i in range(len(list2_copy)):\n            list1_copy.append(list2_copy[i])\n    else:\n        for i in range(len(list1_copy)):\n            list2_copy.append(list1_copy[i])\n    #Return list\n    return list1_copy\n    \n    \n    \n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1,len(list2)):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    counter = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_of_char = 0\n    for char in str1:\n        num_of_char += 1\n    return num_of_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count_char = 0\n    for i in str1:\n        count_char += 1\n    return count_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for char in str1:\n        c = c + 1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    s = 0\n    for i in str1:\n        s += 1\n    return s\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i == \" \":\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    d=dict()\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    return len(d)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    res = 0\n    for char in str1:\n        res += 1\n    return res\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    try:\n        N = int(N)\n    except ValueError:\n        print(\"Invalid Input\")\n        return 0\n    return math.sqrt(N) + 1\n    \ndef next_Perfect_Square_helper(N, last, count):\n    '''\n    Use a helper function to get the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    if count == 0:\n        return\n    if N == 1:\n        return next_Perfect_Square(N)\n    else:\n        count = count - 1\n        next_Perfect_Square_helper(N // 2, last, count)\n        next_Perfect_Square_helper(N // 2, last, count)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i=1\n    sum=0\n    sq_n=N*N\n    while i<=sq_n:\n        i=i+1\n        sum=sum+(i*i)\n        if i**2==sum:\n            return i**2\n    return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return (N**2)%N==next_Perfect_Square(N+1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N % 2 == 1:\n        if N == 1:\n            return 2\n        else:\n            return int(N/2) + 1\n    else:\n        if N == 1:\n            return int(N/2)\n        else:\n            return int(N/2) + 1\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # define the equation of a perfect square\n    a = N * (N + 1) / 2 \n    # define the number of squares that can be obtained using the formula\n    k = math.sqrt(a) \n    # check if square of a is perfect square\n    if k == int(k):\n        return k \n    # if not a perfect square return the square larger than a\n    elif k > a:\n        return k\n    else:\n        return a\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    print(N)\n    ans = N\n    k = N\n    while True:\n        if k%2==0:\n            k = k//2\n            print(k)\n            print(N)\n            print(ans)\n            ans = ans//2\n            if ans == N:\n                print(\"The next perfect square is\",ans)\n                break\n        k += 1\n    return ans\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Base case. The number is in the first case. Return it.\n    if N == 1: \n        return N\n    # Find the square of the number.\n    return N * N + math.sqrt(N) \n    \n    # Base case for the recursive function. The number is in the second case.\n    # If it is not the last number, call the recursive function.\n    if N <= 1: \n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    if N<=1:\n        return 1\n    \n    n1 = N//2\n    n2 = n1+1\n    \n    for i in range(n1,n2):\n        if (N-i*i)==(N+i*i):\n            return i\n    \n    return (N+1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 1: \n        return 0\n    if N == 1: \n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) == i: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) < i: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Even(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) % 2 == 0: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Large(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) % 4 == 0: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Equal(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) % 8 == 0: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_Equal(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) < N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_NotEqual(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) < N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) > N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_NotEqual(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) > N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_Smaller(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) > N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_Smaller_NotEqual(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) > N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_NotEqual_Even(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) < N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_NotEqual_Equal(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) < N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_Equal_Bigger(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) >= N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_Equal_Bigger_NotEqual(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) >= N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_Equal_Bigger_Smaller(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) >= N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_Equal_Bigger_Smaller_NotEqual(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) >= N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Smaller_Equal_Bigger_Smaller_Equal(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) >= N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_Smaller_NotEqual_Equal(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) > N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_Smaller_NotEqual_Equal_Smaller(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) > N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_Smaller_NotEqual_Equal_Smaller_NotEqual(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) > N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_Smaller_NotEqual_Equal_Smaller_NotEqual_Equal(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) > N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_Smaller_Equal_Equal(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**2) >= N: \n            return i \n    return N+1 \n \ndef next_Perfect_Square_Bigger_Smaller_Equal_Equal_NotEqual(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1, N+1): \n        if (i**"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: \n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    dp = []\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            dp.append(arr[i])\n        else:\n            dp.append(arr[i]+arr[i+1])\n    # print(dp)\n    max_sum = 0\n    for i in range(len(dp)-1):\n        max_sum = max(max_sum,dp[i+1])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if arr[0] > arr[1]:\n        return arr[0]\n    \n    if arr[0] == arr[1]:\n        return arr[0]\n    \n    if arr[0] < arr[1]:\n        if arr[1] < arr[0] + arr[1]:\n            return arr[0] + arr[1]\n        \n        return arr[1] + max_sum(arr[1:])\n    \n    if arr[0] < arr[1]:\n        return max_sum(arr[1:])\n    \n    return arr[0] + arr[1]\n    \ndef count_1bit(arr): \n    '''\n    Write a function that counts the number of 1's in a bitonic subsequence for the given array.\n    '''\n    \n    count = 0\n    \n    for i in range(len(arr)-1):\n        if arr[i] == 1:\n            count += 1\n    \n    return count\n    \ndef count_2bit(arr): \n    '''\n    Write a function that counts the number of 2's in a bitonic subsequence for the given array.\n    '''\n    \n    count = 0\n    \n    for i in range(len(arr)-1):\n        if arr[i] == 2:\n            count += 1\n    \n    return count\n    \ndef min_max(arr): \n    '''\n    Write a function that takes an array and returns the minimum and maximum value in the array.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0], arr[0]\n    \n    if arr[0] > arr[1]:\n        return arr[0], arr[0]\n    \n    if arr[0] < arr[1]:\n        return arr[0], arr[1]\n    \n    return arr[0], arr[1]\n    \ndef sum_bit(arr): \n    '''\n    Write a function that takes an array and returns the sum of the bitonic subsequences for the given array.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if arr[0] > arr[1]:\n        return sum_bit(arr[1:])\n    \n    if arr[0] < arr[1]:\n        return arr[0] + sum_bit(arr[1:])\n    \n    return arr[0] + arr[1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # count = arr.count(0)\n    # if count == len(arr):\n    #     return 0\n    # else:\n    #     for i in range(1, len(arr)):\n    #         if arr[i] > arr[i - 1]:\n    #             return arr[i]\n    #     return 0\n    # for i in range(0, len(arr) - 1):\n    #     if arr[i] > arr[i + 1]:\n    #         return arr[i]\n    # return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    j = 0\n    for i in range(len(arr)):\n        if i == 0:\n            i += 1\n            j = 0\n        if arr[i] > arr[i-1]:\n            j += 1\n        max_sum = max(max_sum,arr[i-1] + arr[i])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #returns maximum sum of bitonic subsequence, so sum of bitonic subsequences is always the maximum\n    return max([sum(sub) for sub in zip(arr[1:], arr[:-1])]"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    t = 0\n    m = 0\n    n = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # The function we are looking for is known as the 'bitonic subsequence'.\n    # When the longest subsequence of a bitonic subsequence has at least one bit, then we can just return the sum of that bit.\n    # The bitonic subsequence has a sequence of length n that is of type :\n    # {1, 1, 2, 4}\n    # {1, 1, 2, 3, 4, 3}\n    # {1, 1, 2, 3, 4, 5}\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    else:\n        previous = arr[0]\n        index_of_previous = 0\n        max_sum = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] < previous:\n                index_of_previous = i\n                previous = arr[i]\n            else:\n                max_sum = max(max_sum, arr[i] + arr[index_of_previous] + arr[i-1])\n                index_of_previous = i\n        return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = 0\n    max_val = arr[0]\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square = number\n    while square > 0:\n        sqrt = square / 2\n        if sqrt % 1 == 0:\n            break\n        square = sqrt\n    return square\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = math.sqrt(number)\n    return root\n    \ndef main():\n    '''\n    First, we use the babylonian square root function.\n    We ask the user for a number.\n    '''\n    number = int(input('Enter a number: '))\n    root = babylonian_squareroot(number)\n    print(f'The square root of {number} is {root:.2f}.')\n    \n    '''\n    Now we take the square root of the number and compute the square root.\n    '''\n    root = math.sqrt(number)\n    print(f'The square root of {number} is {root:.2f}.')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # The computation of square roots is a recursive function and can be repeated. \n    # In other words, it is a function that has to perform recursions. \n    # Therefore, it should be written in a recursive function that performs a computations on \n    # a given number.\n    # The recursive function should use a dictionary to store the function's results. \n    # In this case, the function's results are stored in an array.\n    # The only advantage of this is that it works with large input numbers.\n    \n    # If the input is an odd number, the result will be the square root of 2. \n    # If it's an even number, the result will be the square root of 3.\n    # If the number is even, the result will be the square root of 5.\n    # If it's odd, the result will be the square root of 7.\n    # The recursive function is called a function of the number.\n    \n    if(type(number) is not int):\n        raise TypeError('Input number is not a number')\n        return\n        \n    if (number <= 0):\n        raise ValueError('Number must be positive')\n        return\n    \n    if(number % 2 == 0):\n        return babylonian_squareroot(number//2)\n    elif(number % 2!= 0):\n        return babylonian_squareroot(3*number + 1)\n    \n    \ndef interval_search(interval_low, interval_high):\n    '''\n    Write a function to find the lowest value in an interval.\n    '''\n    # The function takes a tuple representing the lower and upper bound for the interval and returns the index.\n    # The function's runtime should be O(log(low to high bound))\n    # \n    # The time complexity of this function is O(log(low to high bound) - (low + high) + 1)\n    # The space complexity of this function is O(low + high)\n    \n    low = interval_low[0]\n    high = interval_high[1]\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if(mid == 0):\n            return mid\n        elif(mid >= mid[0] and mid < mid[1]):\n            return mid\n        elif(mid[0] <= mid[1]):\n            low = mid[0]\n        else:\n            high = mid[0]\n    \n    return -1\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Your code here\n    result = None\n    for _ in range(1, int(math.sqrt(number))):\n        if result is None:\n            result = number\n        elif number == result:\n            break\n        elif number % result == 0:\n            result += 1\n            continue\n    return result\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    if number <= 0:\n        raise ValueError('The number must be greater than 0.')\n    \n    try:\n        return babylonian_squareroot_int(number)\n        \n    except TypeError:\n        return babylonian_squareroot_float(number)\n    \n    except ValueError:\n        return babylonian_squareroot_string(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**(1/2)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return round(math.sqrt(number))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"The square root of a negative number is not defined!\")\n    elif number == 0:\n        print(\"The square root of a 0 is 1.\")\n    elif number == 1:\n        print(\"The square root of a 1 is 2.\")\n    else:\n        print(\"The square root of a\", number, \"is\", babylonian_squareroot(number/2))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    assert(number >= 0)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        print('The square root of {} is 0'.format(number))\n        return 0\n    else:\n        root = 1.0\n        while abs(number) > 0.000001:\n            if number < root:\n                number = number * 2\n                root = (root + number) / 2\n            elif number > root:\n                number = number * -1\n                root = (root + number) / 2\n        return root\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #define the length to be 0\n    lps = 0\n    #define the string to be empty\n    s = []\n    #loop over the string and append to list\n    for i in range(len(str)):\n        s.append(str[i])\n    #loop over string length\n    for i in range(len(str)):\n        #loop over the index of the starting index\n        for j in range(i, len(str)):\n            #if the list element is not equal to the list element at the current index\n            if str[i]!= str[j]:\n                #add to the current longest palindrome sequence and the current length of the subsequence\n                lps = max(lps, j - i + 1)\n                #delete the list index at the current index\n                s.pop(j)\n                #add the current element to the list at the end of the list\n                s.append(str[i])\n                #break the loop\n                break\n    #return the length of the longest palindromic subsequence\n    return lps"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        count = [0] * 256\n        dp = [0] * len(str)\n        dp[0] = 1\n        for i in range(1, len(str)):\n            count[ord(str[i])] += 1\n            for j in range(i):\n                if str[i] == str[j] and count[ord(str[j])] > count[ord(str[i])]:\n                    count[ord(str[j])] = count[ord(str[i])]\n                    dp[i] += 1\n                    if dp[i] == dp[j] + 1:\n                        count[ord(str[i])] -= 1\n                    break\n        return max(dp)\nstr = \"abccbca\"\nprint(lps(str))\nstr = \"aba\"\nprint(lps(str))\nstr = \"acb\"\nprint(lps(str))\nstr = \"abc\"\nprint(lps(str))\nstr = \"aa\"\nprint(lps(str))\nstr = \"ac\"\nprint(lps(str))\nstr = \"b\"\nprint(lps(str))\nstr = \"ab\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"abca\"\nprint(lps(str))\nstr = \"bab\"\nprint(lps(str))\nstr = \"bcabc\"\nprint(lps(str))\nstr = \"bac\"\nprint(lps(str))\nstr = \"ba\"\nprint(lps(str))\nstr = \"bab\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"abc\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"abc\"\nprint(lps(str))\nstr = \"bc\"\nprint(lps(str))\nstr = \"ab\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint(lps(str))\nstr = \"a\"\nprint("
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # code here\n    lps_result = []\n    \n    def lps(str):\n        if not str:\n            return 0\n        elif not str[0] == str[-1]:\n            return 1 + lps(str[1:-1])\n        else:\n            return max(lps(str[1:-1]),lps(str))\n    return lps(str)\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str==None or len(str)<1:\n        return 0\n    n=len(str)\n    maxLen=0\n    sub=0\n    for i in range(n):\n        for j in range(i,n):\n            if str[i]==str[j] and (i-j+1>maxLen):\n                maxLen=i-j+1\n                sub=i\n    return maxLen\n        "
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #Step 1 : if the string is empty, return 0\n    if len(str) == 0: \n        return 0\n    #Step 2 : stores the index of the first occurence of the first 1 in str[i-1]\n    #If the first 1 in str[i-1] is 1, the length of the subsequence will be 1 (1 index)\n    #Step 3 : stores the index of the last occurence of the last 1 in str[i]\n    #If the last 1 in str[i] is 1, the length of the subsequence will be 2 (2 index)\n    #Step 4 : stores the index of the first occurence of the first 0 in str[i-1]\n    #If the first 0 in str[i-1] is 1, the length of the subsequence will be 3 (3 index)\n    #Step 5 : stores the index of the last occurence of the last 0 in str[i]\n    #If the last 0 in str[i] is 1, the length of the subsequence will be 4 (4 index)\n    #Step 6 : The result will be the length of the longest palindromic subsequence in str[i-1] to str[i]\n    #Step 7 : The result will be the index of the first occurence of the first 1 in str[i-1]\n    #Step 8 : The result will be the index of the last occurence of the last 1 in str[i]\n    #Step 9 : The result will be the index of the first occurence of the first 0 in str[i-1]\n    #Step 10 : The result will be the index of the last occurence of the last 0 in str[i]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    i=0\n    j=0\n    max_len=0\n    while i<len(str): \n        while j<len(str) and str[i]==str[j]: \n            j+=1\n        if j-i-1>max_len: \n            max_len=j-i-1\n        i+=1\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: \n        return len(str)\n    elif str[0] == str[-1]: \n        return lps(str[1:-1])\n    else:\n        return max(lps(str[1:]), lps(str[:-1]), key=len"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0 or str =='':\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_helper(n):\n        if n == 0:\n            return 1\n        else:\n            return (n*harmonic_sum_helper(n-1))\n    return harmonic_sum_helper(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 1\n    for i in range(1,n+1):\n        sum = sum + 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (1/n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    #find the sum of the harmonic numbers\n    sum = 0\n    for i in range(n-1):\n        sum += (n-i) * (2*i + 1)\n    \n    #return the result\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n * sum(range(2,n+1))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n/harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum = sum + n - i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    j = 0\n    res = []\n    while(i < len(array_nums1) and j < len(array_nums2)):\n        if array_nums1[i] < array_nums2[j]:\n            res.append(array_nums1[i])\n            i+=1\n        else:\n            res.append(array_nums2[j])\n            j+=1\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_numbers = []\n    for element in array_nums1:\n        if element in array_nums2:\n            intersection_numbers.append(element)\n    return intersection_numbers\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = set(array_nums1) & set(array_nums2)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [num for num in array_nums1 if num in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i_nums1=0\n    i_nums2=0\n    j_nums1=0\n    j_nums2=0\n    array_intersection=[]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Converts the array to int, if not already.\n    array_nums1 = list(map(int,array_nums1))\n    array_nums2 = list(map(int,array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return intersection(array_nums1,array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    array_nums1_set = set(array_nums1)\n    array_nums2_set = set(array_nums2)\n    \n    intersection = array_nums1_set & array_nums2_set\n    \n    return intersection\n    \n    \n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection_list.append(array_nums1[i])\n    return intersection_list\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    x = tup.count(x)\n    return x\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    y = tup.count(y)\n    return y\n    \ndef count_V(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    v = tup.count(v)\n    return v\n    \ndef count_B(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    b = tup.count(b)\n    return b\n    \ndef count_R(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    r = tup.count(r)\n    return r\n    \ndef count_T(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    t = tup.count(t)\n    return t\n    \ndef count_G(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    g = tup.count(g)\n    return g\n    \ndef count_C(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    c = tup.count(c)\n    return c\n    \ndef count_H(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    h = tup.count(h)\n    return h\n    \ndef count_L(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    l = tup.count(l)\n    return l\n    \ndef count_W(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    w = tup.count(w)\n    return w\n    \ndef count_N(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    n = tup.count(n)\n    return n\n    \ndef count_A(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    a = tup.count(a)\n    return a\n    \ndef count_Y_C_L(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    y = tup.count(y)\n    c = tup.count(c)\n    l = tup.count(l)\n    return y, c, l\n    \ndef count_Y_G_R(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    y = tup.count(y)\n    g = tup.count(g)\n    r = tup.count(r)\n    return y, g, r\n    \ndef count_Z_A_N(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    a = tup.count(a)\n    n = tup.count(n)\n    return z, a, n\n    \ndef count_Z_Y_L_W(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    l = tup.count(l)\n    w = tup.count(w)\n    return z, l, w\n    \ndef count_Z_G_C(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    g = tup.count(g)\n    c = tup.count(c)\n    return z, g, c\n    \ndef count_Z_C_G(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    c = tup.count(c)\n    g = tup.count(g)\n    return z, c, g\n    \ndef count_Z_Y_R(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    r = tup.count(r)\n    return z, r\n    \ndef count_Z_Y_N(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    n = tup.count(n)\n    return z, n\n    \ndef count_Z_L_W(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    l = tup.count(l)\n    w = tup.count(w)\n    return z, l, w\n    \ndef count_Z_W(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    w = tup.count(w)\n    return z, w\n    \ndef count_Z_N(tup): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    z = tup.count(z)\n    n = tup.count(n)\n    return z, n\n    \ndef count_Z_A(tup): \n    '''"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tuple(tup)\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counts = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            counts += 1\n    return counts\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = tuple(tup)\n    return (x.count(x))\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #pass\n    count = 0\n    #for index, element in enumerate(tup):\n    for index, element in enumerate(tup):\n        if element == x:\n            count += 1\n    return count\n    \n    #return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count\n    \nprint(count_X((\"python\", \"programming\", \"is\", \"so\", \"Python\", \"programmer\"), \"is\"))"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if x == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(x) \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if y == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(y) \ndef count_Z(tup, z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if z == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(z) \ndef count_N(tup, n): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if n == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(n) \ndef count_O(tup, o): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if o == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(o) \ndef count_P(tup, p): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if p == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(p) \ndef count_Q(tup, q): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if q == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(q) \ndef count_R(tup, r): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if r == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(r) \ndef count_S(tup, s): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if s == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(s) \ndef count_T(tup, t): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if t == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(t) \ndef count_U(tup, u): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if u == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(u) \ndef count_V(tup, v): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if v == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(v) \ndef count_W(tup, w): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if w == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(w) \ndef count_X_P(tup, x, p): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if x == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(x, p) \ndef count_X_Q(tup, x, q): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if x == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(x, q) \ndef count_X_R(tup, x, r): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if x == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(x, r) \ndef count_X_S(tup, x, s): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if x == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(x, s) \ndef count_Y_P(tup, y, p): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if y == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(y, p) \ndef count_Y_Q(tup, y, q): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # total_count = 0\n    # for i in tup:\n        # if y == i:\n            # total_count += 1\n        # else:\n            # total_count = 0\n    return tup.count(y, q) \ndef count_Y_R(tup, y, r): \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup) > 1:\n        tup.remove(x)\n        y = count_X(tup, x)\n        return y\n    else:\n        return 0\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum([1 for i in tup if i == x])\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp = list.copy()\n    temp.insert(0, element)\n    return temp\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for i in range(len(list)-1,-1,-1):\n        result.append(list[i])\n    result.append(element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i+1,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return sorted(list,key=lambda x:x[0])+[element]+sorted(list,key=lambda x:x[1])\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for index in range(len(list)):\n        new_list.insert(index,element)\n    return new_list\n    \ndef get_min_max(list):\n    '''\n    Write a function that takes in a list and returns a tuple of min and max.\n    '''\n    min_element = None\n    max_element = None\n    for element in list:\n        if min_element == None or element < min_element:\n            min_element = element\n        if max_element == None or element > max_element:\n            max_element = element\n    return (min_element,max_element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    list.sort()\n    for i in list:\n        result.append(i)\n    for i in range(len(result)):\n        result[i] = element\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_element=[]\n    for i in range(len(list)):\n        list_element.append(list[i])\n    for i in range(len(list)):\n        list_element.insert(i,element)\n    return list_element\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            return list\n    list.append(element)\n    return list\n    \ndef merge_lists(list1,list2):\n    '''\n    Write a function that takes as input two lists and returns a merged list. \n    '''\n    i = 0\n    j = 0\n    list3 = []\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            list3.append(list1[i])\n            i += 1\n        else:\n            list3.append(list2[j])\n            j += 1\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        list.append(element)\n    else:\n        insert_element(list[:-1],element)\n        list.append(element)\n    return list\n    \n    \n    \n    \ndef reverse_string(str):\n    '''\n    Write a function that takes in a string, and returns the reversed string, using a for loop.\n    '''\n    str = str.strip()\n    return ''.join(reversed(str))\n    \n    \n    \n    \n    \ndef remove_digit(num):\n    '''\n    Write a function that takes in an integer and returns the string that contains the digits that were removed.\n    '''\n    return str(num)\n    \n    \n    \n    \ndef count_twos(num):\n    '''\n    Write a function that takes in an integer and returns the number of times 2 was found in the string, if the number is less than or equal to 4, return 0.\n    '''\n    if int(num) == int(num[1]) or int(num) <= 4:\n        return 0\n    else:\n        return 1\n    \n    \n    \n    \ndef make_digit_list(num):\n    '''\n    Write a function that takes in a string representing a number and returns the list of all digits in the string, excepting the digits of the string.\n    '''\n    result = []\n    result.append(int(num[:-1]))\n    return result\n    \n    \n    \n    \ndef add_digit_to_digit(str):\n    '''\n    Write a function that takes in a string and returns a string that has all of the digits in the same position.\n    '''\n    return ''.join(str[i] for i in range(len(str)-1,len(str),1))+str[-1]\n    \n    \n    \n    \ndef make_num_list(num):\n    '''\n    Write a function that takes in a number and returns the list of all digits of the number.\n    '''\n    result = []\n    result.append(int(num[:-1]))\n    return result\n    \n    \n    \n    \ndef num_to_str(num):\n    '''\n    Write a function that takes in an integer and returns a string representing the number.\n    '''\n    return str(num)\n    \n    \n    \n    \ndef is_palindrome(num):\n    '''\n    Write a function that takes in a string and returns True if the number is palindrome and False otherwise.\n    '''\n    str1 = str(num)\n    return str1 == str1[::-1]\n    \n    \n    \n    \ndef palindrome(num):\n    '''\n    Write a function that takes in a number and returns True if the number is palindrome and False otherwise.\n    '''\n    str1 = str(num)\n    return str1[::-1] == str1\n    \n    \n    \n    \ndef reverse_string_helper(string, start):\n    '''\n    Write a function that takes in a string, and returns a string where each character is reversed.\n    '''\n    if len(string) <= 1:\n        return string\n    else:\n        return string[:len(string)-start]+string[:len(string)-start][::-1]+string[:len(string)-start]\n        \n    \n    \n    \n    \ndef reverse_string(str):\n    '''\n    Write a function that takes in a string and returns the reversed string, using a for loop.\n    '''\n    if len(str) <= 1:\n        return str\n    else:\n        return str[:len(str)-1]+str[:len(str)-1][::-1]+str[:len(str)-1]\n        \n    \n    \n    \n    \ndef find_even(num):\n    '''\n    Write a function that takes in an integer and returns the number of even numbers in the list.\n    '''\n    result = 0\n    if int(num) == 0:\n        return result\n    else:\n        result = len([i for i in range(int(num),int(num)+2) if i%2==0])\n        return result\n    \n    \n    \n    \ndef find_odd(num):\n    '''\n    Write a function that takes in an integer and returns the number of odd numbers in the list.\n    '''\n    result = 0\n    if int(num) == 0:\n        return result\n    else:\n        result = len([i for i in range(int(num),int(num)+2) if i%2==1])\n        return result\n    \n    \n    \n    \ndef digit_to_number(num):\n    '''\n    Write a function that takes in a number and returns its digits.\n    '''\n    result = []\n    for i in range(len(num)-1,-1,-1):\n        result.append(int(num[i]))\n    return result\n    \n    \n    \n    \ndef add_digit_to_number(num):\n    '''\n    Write a function that takes in a number and returns its digits.\n    '''\n    result = []\n    for i in range(len(num)-1,-1,-1):\n        result.append(int(num[i])+i)\n    return result\n    \n    \n    \n    \ndef add_digit_to_number2(num):\n    '''\n    Write a function that takes in a number and returns its digits.\n    '''\n    result = []\n    for i in range(len(num)-1,0,-1):\n        result.append(int(num[i])+i)\n    return result\n    \n    \n    \n    \n    \ndef positive_num(num):\n    '''\n    Write a function that takes in a number and returns True if the number is positive and False otherwise.\n    '''\n    if int(num) >= 0:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef add_digit_to_number3(num):\n    '''\n    Write a function that takes in a number and returns its digits.\n    '''\n    result = []\n    for i in range(len(num)-1,-1,-1):\n        result.append(int(num[i])+i)\n    return result\n    \n    \n    \n    \ndef get_number_type(num):\n    '''\n    Write a function that takes in a number and returns its type.\n    '''\n    result = type(num)\n    return result\n    \n    \n    \n    \n    \ndef not_int(num):\n    '''\n    Write a function that takes in a number and returns True if the number is not an integer, and False otherwise.\n    '''\n    if int(num) > 0:\n        return False\n    else:\n        return True\n    \n    \n    \n    \ndef multiply_list_by(num):\n    '''\n    Write a function that takes in a list and returns a new list that contains all of the multiplication of the first list element by the second list element.\n    '''\n    result = []\n    for i in num:\n        result.append(i*num[0])\n    return result\n    \n    \n    \n    \n    \n    \ndef remove_digits(num):\n    '''\n    Write a function that takes in a number and returns a new list that contains only the numbers from the original list that are divisible by 7,8,9, and not more than 50.\n    '''\n    if num > 0:\n        result = []\n        for i in num:\n            if i%7 == 0 and i%8 == 0 and i%9 == 0:\n                continue\n            else:\n                result.append(i)\n        return result\n    else:\n        print(\"You cannot divide by 0!\")\n        \n        \n    \n    \n    \ndef is_prime(num):\n    '''\n    Write a function that takes in a number and returns True if the number is a prime number, and False otherwise.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    else:\n        return True\n    \n    \n    \n    \ndef is_prime(num):\n    '''\n    Write a function that takes in a number and returns True if the number is "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Unpack the complex numbers\n    real, imag = numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers) == 0:\n        return None\n    else:\n        num = float(numbers)\n        return complex(cmath.sqrt(num.real**2 + num.imag**2), 0)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    ans = []\n    for i in range(len(numbers)):\n        if numbers[i].real == 0 and numbers[i].imag == 0:\n            ans.append(complex(1,0))\n        elif numbers[i].real == 0 and numbers[i].imag!= 0:\n            ans.append(complex(0,complex(1,-1*numbers[i].imag/numbers[i].real)))\n        elif numbers[i].real!= 0 and numbers[i].imag == 0:\n            ans.append(complex(0,complex(1,-1*numbers[i].real/numbers[i].imag)))\n        elif numbers[i].real == 0 and numbers[i].imag!= 0:\n            ans.append(complex(0,complex(1,-1*numbers[i].imag/numbers[i].real)))\n        elif numbers[i].real!= 0 and numbers[i].imag!= 0:\n            ans.append(complex(complex(1,-1*numbers[i].imag/numbers[i].real),-1*numbers[i].imag/numbers[i].real))\n    return ans\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # your code goes here\n    '''\n    # return complex number using the built-in abs function\n    # for example:\n    complex_number = cmath.sqrt(2 * 10 ** 3 + 3 * 10 ** 2)\n    print(complex_number.real, complex_number.imag)\n    '''\n    # if you want to convert numbers from a complex to a polar coordinate\n    # you can use cmath.polar()\n    print(numbers.real, numbers.imag)\n    # if you want to convert numbers from polar to complex numbers\n    # you can use cmath.complex()\n    print(numbers.real, numbers.imag, cmath.polar(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers)==2:\n        return (cmath.rect(cmath.pi/2,cmath.sqrt(numbers[0])),cmath.rect(cmath.pi/2,cmath.sqrt(numbers[1])))\n    elif len(numbers)==3:\n        return (cmath.rect(cmath.pi/2,cmath.sqrt(numbers[0])),cmath.rect(cmath.pi/2,cmath.sqrt(numbers[1])),cmath.rect(cmath.pi/2,cmath.sqrt(numbers[2])))\n    else:\n        return (cmath.rect(cmath.pi/2,cmath.sqrt(numbers[0])),cmath.rect(cmath.pi/2,cmath.sqrt(numbers[1])),cmath.rect(cmath.pi/2,cmath.sqrt(numbers[2])),cmath.rect(cmath.pi/2,cmath.sqrt(numbers[3])))"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # variables for conversion\n    c2polar = []\n    polar_angle = []\n    coordinates = []\n    \n    # loop through all complex numbers\n    for i in numbers:\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    answer = cmath.polar(numbers)\n    \n    #convert from radians to degrees\n    answer = answer * (180/math.pi)\n    \n    return answer\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    return (cmath.polar(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c=cmath.sqrt(numbers.real**2 + numbers.imag**2)\n    return (c.real, c.imag)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radians = float(numbers[0])    \n    convert_radians = cmath.rect(radians)\n    convert_degrees = convert_radians.real    \n    convert_radians_to_degrees = convert_radians.imag\n    convert_degrees_to_radians = cmath.degrees(convert_radians)\n    return [convert_degrees, convert_radians_to_degrees]\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    '''\n    Below Python code is the evaluation of the number of integers in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if item.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for item in list1:\n        if type(item) == int:\n            i += 1\n    return i\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in range(0, len(list1)):\n        if list1[i].isdigit():\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i].isdigit():\n            count = count + 1\n    return count\n    \ndef list_to_string(list):\n    '''\n    Write a python function that returns a string in the form of a list.\n    '''\n    string = ''\n    for i in range(0,len(list)):\n        if list[i] == '(' or list[i] == ')':\n            if list[i-1] == ')':\n                string = string + list[i]\n            else:\n                string = string +'' + list[i]\n        else:\n            string = string + list[i]\n    return string\n    \ndef split_in_pairs(string):\n    '''\n    Write a python function that splits a given string in pairs.\n    '''\n    a = string.split()\n    return a\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num = 0\n    for i in list1:\n        if type(i) == int:\n            num = num + 1\n    return num\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return [(l[0],)]\n    \n    elif len(l) == 2:\n        return [(l[0], l[1])]\n        \n    elif len(l) > 2:\n        if not l[0:2]:\n            return [(l[0], l[1])]\n        elif not l[0:2]:\n            return [(l[0], l[1], l[2])]\n        else:\n            return combinations_colors(l[0:2], n-2) + combinations_colors(l[1:], n-2)\n    else:\n        return combinations_colors(l, n-2)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return list(combinations_with_replacement(l, 1))\n    else:\n        return combinations_colors(l, n//2) + combinations_colors(l, n//2)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(1, n+1):\n        combs.extend(combinations_with_replacement(l, i))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(combination_colors(l, i)) for i in range(n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(l) for l in list(itertools.combinations(l, n))]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_colors = []\n    for i in range(l):\n        comb_colors.append(tuple([i] + list(combinations_with_replacement([i],l-1))))\n    return comb_colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations_colors = list()\n    \n    for i in range(len(l) - n + 1):\n        combinations_colors.append((l[i:i + n]))\n    \n    return combinations_colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    # If the length of the list is less than the required length, generate all combinations without repetition\n    if len(l) < n:\n        l = list(l)\n        for i in range(len(l),n):\n            l.append(l[i-1])\n        return l\n    # Otherwise, continue to generate all combinations with repetition\n    else:\n        return combinations_colors(l, n-len(l))\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def count(n):\n        prime_num = [False, False]\n        prime_num[0] = True\n        prime_num[1] = True\n        for i in range(2,n+1):\n            if prime_num[0]:\n                for j in range(2, i+1):\n                    prime_num[j] = True\n        return len(prime_num[1:])\n    return count(n)"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n <= 1:\n        return 0\n    count = 0\n    for num in range(1, n+1):\n        if is_prime(num):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    #Create an empty list that will hold the prime numbers less than n.\n    primes = []\n    \n    #For each number n, check if the number is prime or not and add it to the list if so.\n    for n in range(2, n):\n        for x in range(2, int(n**0.5)):\n            if n % x == 0:\n                break\n        else:\n            primes.append(n)\n    \n    #Return the number of primes < n\n    return len(primes) - "
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list = [0]*(n+1)\n    num_list[0] = 1\n    num_list[1] = 0\n    for i in range(2, n+1):\n        if num_list[i] == 1:\n            for j in range(i+i, n+1, i):\n                num_list[j] = 0\n    return len(num_list)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your Code here\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(1, n+1):\n        # checks if i divides the input by every number between 2 to the input\n        if i % 2 == 0:\n            # if it divides by every number between 2 and input, it is not a prime number\n            continue\n        if n%i == 0:\n            # if it divides the number by i, it is not a prime number\n            count += 1\n    return count\n    "
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    counter = 0\n    \n    for i in range(2,n+1):\n        if is_prime(i):\n            counter+=1\n    \n    return counter\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    counter = 0\n    for num in range(1, n+1):\n        if(is_prime(num)):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if len(a) > len(b):\n        return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # YOUR CODE HERE\n    first_number = a\n    second_number = b\n    tuple = (second_number, first_number)\n    return tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if b == a:\n        return(0,0)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    d = b\n    return (c,d)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Your code here\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # add your code here\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    b=a+b\n    a=b-a\n    return(b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element1 = max(test_tup1)\n    max_element2 = max(test_tup2)\n    return tuple([max_element1, max_element2])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # create a list of tuples\n    tuple_list = [test_tup1, test_tup2]\n    # sort list by decreasing order\n    tuple_list.sort(reverse=True)\n    # return the tuple with greatest score\n    return tuple_list[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def func1(a, b):\n        return a if a[0] > b[0] else b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = max(test_tup1, key=lambda x: x[1])\n    tup2 = max(test_tup2, key=lambda x: x[1])\n    return tup1, tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    x1, x2 = test_tup1\n    y1, y2 = test_tup2\n    if x1 > x2:\n        return (x1, x2)\n    if x2 > x1:\n        return (x2, x1)\n    if y1 > y2:\n        return (y1, y2)\n    if y2 > y1:\n        return (y2, y1)\n    return (y1, y2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)>len(test_tup2):\n        return test_tup2\n    elif len(test_tup1)<len(test_tup2):\n        return test_tup1\n    elif test_tup1[0]<test_tup2[0]:\n        return test_tup1\n    elif test_tup2[0]<test_tup1[0]:\n        return test_tup2\n    else:\n        raise Exception('The tuple is not maximized.')\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # your code here\n    test_tup = test_tup1 + test_tup2\n    tuple_to_return = (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n    return tuple_to_return\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Creating a tuple and copying it into a variable\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    \n    # Making a copy of the first tuple\n    tuple1_copy = tuple1\n    \n    # Initializing the maximum_score variable to 0\n    max_score = 0\n    \n    # Iterating through both tuples to find the maximum\n    for i in range(len(tuple1_copy)):\n        for j in range(len(tuple2)):\n            # If the difference between the current\n            # element and the next element is\n            # greater than the maximum score\n            # then update the maximum\n            if tuple1_copy[i] - tuple2[j] > max_score:\n                max_score = tuple1_copy[i] - tuple2[j]\n                # Updating the tuple1_copy variable\n                tuple1_copy = tuple1_copy[:j] + tuple1_copy[j+1:]\n    # Return the maximum score if it is greater than\n    # the maximum_score\n    if max_score == 0:\n        max_score = tuple1_copy[len(tuple1_copy)-1]\n    return max_score\n    "
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    return max(test_tup1, test_tup2)\n    \n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            max_elements = (test_tup1[i], test_tup2[i])\n    return max_elements\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while(i < n):\n        if(n%i == 0):\n            break\n        i = i+1\n    return i\ndef get_newman_prime(n): \n    '''\n    Return the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while(i < n):\n        if(n%i == 0):\n            return i\n        i = i+1\n    return -1\ndef newman(n):\n    '''\n    Return the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while(i < n):\n        if(n%i == 0):\n            return i\n        i = i+1\n    return -1\ndef check_prime(n):\n    '''\n    Return True if the nth newman\u2013shanks\u2013williams prime number is prime, and False otherwise.\n    '''\n    prime = newman_prime(n)\n    if(n!= 1 and prime!= -1):\n        return True\n    else:\n        return False\ndef isprime(n):\n    '''\n    Return True if the nth newman\u2013shanks\u2013williams prime number is prime, and False otherwise.\n    '''\n    prime = get_newman_prime(n)\n    if(n!= 1 and prime!= -1):\n        return True\n    else:\n        return False\ndef check_prime_consecutive(n):\n    '''\n    Return True if the nth newman\u2013shanks\u2013williams prime number is prime, and False otherwise.\n    '''\n    prime = get_newman_prime(n)\n    if(n!= 1 and prime!= -1):\n        for i in range(1, n):\n            if(prime%i == 0):\n                break\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        for i in range(3,n): \n            if n % i == 0: \n                return 0\n        return i \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    l = 2\n    while l <= n:\n        if n % l == 0:\n            return 0\n        l += 1\n    return 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 0\n    else:\n        n -= 2\n        while n % 2 == 0:\n            n //= 2\n        m = 3\n        while m <= n:\n            if m % 2 == 0 and n % m == 0:\n                return m\n            m += 2\n    return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1 or n == 2: \n        return 1\n    else: \n        for i in range(2, n): \n            if n % i == 0: \n                break\n        else: \n            return 1\n        return n % i \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize primes\n    primes = []\n    for p in range(2, n):\n        # Prime check\n        if is_prime(p):\n            primes.append(p)\n    # Check if primes list is not empty\n    if primes == []:\n        return False\n    # Create a variable to hold the prime number\n    current_prime = primes[0]\n    # While there is still a prime number\n    while len(primes) > 1:\n        # Find the next prime number\n        next_prime = primes[1]\n        # If next prime number is one\n        if next_prime == current_prime:\n            # Return\n            return primes[0]\n        # If next prime number is not one\n        else:\n            # Set new prime\n            primes.pop(1)\n            # Increase current prime number\n            current_prime = next_prime\n    # If there are no primes, return False\n    return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_numbers = []\n    for i in range(2, n + 1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    temp = 2\n    while (n % temp == 0):\n        n = n//temp\n    return n \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize answer\n    prime_answer = 3\n    # create 2 lists\n    lst = []\n    # find the nth prime\n    for i in range(2,n):\n        lst.append(2)\n    # if the next prime is not in lst, then add it to lst\n    for j in range(3,n+1):\n        if j % 3 == 0 and j % 5 == 0:\n            lst.append(j)\n    # return the answer\n    return lst[j-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # your code here\n    f=[]\n    for i in range(1,n+1):\n        f.append(i)\n        \n    f.sort()\n    \n    for i in range(1,n):\n        if(f[i]==f[i-1]+1):\n            return(f[i])\n    return None\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    # Define a function called divide_elements\n    def divide_elements(x, y):\n        '''\n        Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        # Add a variable to the given tuple to perform the operation of the corresponding element\n        result = x/y\n        print(result)\n        # Return the result\n        return result\n    # Call the divide_elements function\n    result = divide_elements(test_tup1, test_tup2)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    res = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            res += test_tup1[i]\n        else:\n            res -= test_tup1[i]\n    return res\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        result = []\n        for i in test_tup1:\n            result.append(i/test_tup2[0])\n        return result\n    \n    # write your logic here\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    num1 = test_tup1[0]\n    num2 = test_tup2[0]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the given tuples is not the same.')\n    if test_tup1[0]!= test_tup2[0]:\n        raise ValueError('Two tuples are not equal.')\n    divided_by_tup1 = tuple([i / j for i,j in zip(test_tup1, test_tup2)])\n    return divided_by_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup = test_tup1 + test_tup2\n    for i in range(len(test_tup)):\n        test_tup[i] = float(test_tup[i])\n    return test_tup\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(f\"The first tuple is: {test_tup1}\")\n    print(f\"The second tuple is: {test_tup2}\")\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    output_tup = []\n    for i in range(len(test_tup1)):\n        output_tup.append((test_tup1[i] + test_tup2[i])/2)\n    return output_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_dict = {}\n    for elem in test_tup1:\n        if elem in test_tup2:\n            try:\n                test_dict[elem] = test_dict[elem]/test_dict[test_tup2[elem]]\n            except KeyError:\n                test_dict[elem] = 0\n        else:\n            test_dict[elem] = 0\n    return test_dict\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == L:\n        return tuple(list1[:L//2]), tuple(list1[L//2:])\n    elif len(list1) > L:\n        return tuple(list1[:L]), tuple(list1[L:])\n    else:\n        return tuple(), ()\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #return tuple(list1[:L])\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        print(\"The length of the first part of the list must be a multiple of L\")\n        return None\n    list1_len = len(list1) // L\n    return tuple([list1[i:i+L] for i in range(0,list1_len*L,L)])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    x = 0\n    y = 0\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    while x < L:\n        new_list.append(list1[x])\n        x += 1\n    return new_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    print('function called')\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L//2], list1[L//2:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return 'It is a single year.'\n    elif h_age <= 2:\n        return 'It is a two year.'\n    elif h_age <= 4:\n        return 'It is a four year.'\n    elif h_age <= 6:\n        return 'It is a six year.'\n    elif h_age <= 8:\n        return 'It is a eight year.'\n    elif h_age <= 10:\n        return 'It is a ten year.'\n    elif h_age <= 12:\n        return 'It is a twenty year.'\n    else:\n        return 'It is a fifty or sixty year."
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 1 and h_age <= 2:\n        return f\"{h_age} is a dog.\"\n    elif h_age >= 3 and h_age <= 5:\n        return f\"{h_age} is a dog.\"\n    elif h_age >= 6 and h_age <= 10:\n        return f\"{h_age} is a dog.\"\n    else:\n        return f\"{h_age} is not a dog.\""
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >=0:\n        return int(h_age)\n    else:\n        return 0\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=1:\n        return 0\n    elif h_age<=2:\n        return (h_age-1)*5\n    elif h_age<=3:\n        return (h_age-2)*7\n    elif h_age<=4:\n        return (h_age-3)*9\n    else:\n        return (h_age-4)*11"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return \"Invalid Input\"\n    if h_age <= 6:\n        return \"No\"\n    if h_age <= 13:\n        return \"Young\"\n    if h_age <= 18:\n        return \"Middle-aged\"\n    if h_age <= 24:\n        return \"Old\"\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_dog_age = h_age * 365\n    dogs_cat_age = h_age * 12\n    dogs_cat_year = dogs_cat_age / 4\n    dogs_cat_year = dogs_cat_year + dogs_cat_year * dogs_cat_year * 4\n    print(f\"{dogs_dog_age:.2f} dogs have {dogs_cat_year:.2f} years of dog's age\")\n    return dogs_dog_age\n    \n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*1.0/12.0\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 6:\n        return 'The dog is {0} years old'.format(h_age)\n    elif 6 <= h_age <= 8:\n        return 'The dog is {0} years old'.format(h_age)\n    elif 8 <= h_age <= 12:\n        return 'The dog is {0} years old'.format(h_age)\n    else:\n        return 'The dog is {0} years old'.format(h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs = int(h_age)\n    cats = 0\n    for x in range(dogs+1):\n        if x % 4 == 0:\n            cats += 1\n        if x % 8 == 0:\n            cats += 1\n        if x % 2 == 0:\n            cats += 1\n    print(f\"{h_age} dogs are {cats} cats and {dogs} dogs.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 3:\n        return 'Returned: less than 3.'\n    elif 3 < h_age < 4:\n        return 'Returned: 3-4.'\n    elif 4 < h_age < 6:\n        return 'Returned: 4-6.'\n    elif 6 < h_age < 8:\n        return 'Returned: 6-8.'\n    elif 8 < h_age < 10:\n        return 'Returned: 8-10.'\n    elif h_age > 10:\n        return 'Returned: greater than 10.'\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # write your code here\n    return [S[i*step:i*step+step] for i in range(len(S)//step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S)<=step:\n        return [S]\n    elif step<0:\n        return [S[:step]]\n    elif step==1:\n        return [S]\n    elif step==2:\n        return [S[i:i+step] for i in range(len(S)-step)]\n    else:\n        result=list_split(S,step//2)\n        if step%2==0:\n            result.extend(result[::-1])\n        return result\n        \n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: Write the function\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    splits = []\n    for i in range(0,len(S),step):\n        splits.append(S[i:i+step])\n    return splits\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Write your code here\n    return []\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = [[]]\n    for i in range(0,len(S),step):\n        res = [i+1] + res + [S[i]]\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i : i + step])\n    return result\n    \ndef list_remove(S, element):\n    '''\n    Write a function that takes in a list and an element, and returns the list with only the elements that were removed.\n    '''\n    result = []\n    for i in S:\n        if element in i:\n            result.append(i)\n    return result\n    \ndef list_sum(L, step):\n    '''\n    Write a function that takes in a list and an integer n, and returns a list of the list of the sum of every nth element.\n    '''\n    result = []\n    for i in range(0, len(L), step):\n        result.append(sum(L[i : i + step]))\n    return result\n    \ndef list_permutation(L):\n    '''\n    Write a function that takes in a list, and returns a list where the values in the list are in lexicographically sorted order.\n    '''\n    result = []\n    for i in range(len(L)):\n        new_list = []\n        for j in range(i, len(L)):\n            new_list.append(L[j])\n        result.append(new_list)\n    return result\n    \ndef reverse_string(S):\n    '''\n    Write a function that takes in a string, and returns the string with the first and last characters reversed.\n    '''\n    result = \"\"\n    for i in S:\n        result += i\n    return result[::-1]\n    \ndef count_letters(S):\n    '''\n    Write a function that takes in a string and returns the number of times that each letter appears.\n    '''\n    result = {}\n    for i in S:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a number, and returns True if it is a prime number and False otherwise.\n    '''\n    if n <= 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef main():\n    S = input(\"Enter a string: \")\n    \n    print(f\"Input String : {S}\")\n    \n    step = int(input(\"Enter an integer for the step : \"))\n    \n    print(f\"List : {list_split(S, step)}\")\n    \n    print(f\"List with the first and last elements removed : {list_remove(list_split(S, step), 'first_last')}\")\n    \n    print(f\"Sum of every element : {list_sum(list_split(S, step), step)}\")\n    \n    print(f\"List with the sum of the first element : {list_sum(list_split(S, step), step)}\")\n    \n    print(f\"The permutation of the list : {list_permutation(list_split(S, step))}\")\n    \n    print(f\"The sum of the elements : {list_sum(list_split(S, step), step)}\")\n    \n    print(f\"The element at position n : {S[n]}\" if is_prime(n) else \"The element not found\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # write your code here\n    l=[]\n    n=int(len(S)/step)\n    for i in range(n):\n        l.append(S[(i*step):(i+1)*step])\n    return l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l*6\n    return surface\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the surface area of the cube\n    # A tuple is returned, (area, perimeter), where area is the area of the cube in square units,\n    # and perimeter is the perimeter of the cube in square units\n    l = float(l)\n    return l*4, (l*6-l*3)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 0.5*l*(l**2-l*(3**0.5))\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    x0, x1, x2, x3, x4, x5, x6 = -l, l, l, l, l, l, l\n    s1 = x0**2 + x1**2 + x2**2 + x3**2 + x4**2 + x5**2 + x6**2\n    s2 = x1**2 + x2**2 + x3**2 + x4**2 + x5**2 + x6**2\n    s3 = x2**2 + x3**2 + x4**2 + x5**2 + x6**2\n    s4 = x3**2 + x4**2 + x5**2 + x6**2\n    s5 = x4**2 + x5**2 + x6**2\n    s6 = x5**2 + x6**2\n    s7 = x6**2\n    s8 = x4**2 + x3**2 + x2**2 + x1**2\n    s9 = x1**2 + x2**2 + x3**2 + x4**2 + x5**2\n    s10 = x4**2 + x5**2 + x6**2 + x7**2\n    s11 = x7**2 + x6**2\n    s12 = x5**2 + x6**2\n    s13 = x2**2 + x3**2 + x4**2 + x5**2\n    s14 = x3**2 + x4**2 + x5**2\n    s15 = x3**2 + x4**2 + x5**2\n    s16 = x2**2 + x3**2 + x4**2 + x5**2\n    s17 = x3**2 + x4**2 + x5**2\n    s18 = x2**2 + x4**2 + x5**2\n    s19 = x4**2 + x5**2\n    s20 = x5**2\n    s21 = x6**2\n    s22 = x7**2\n    s23 = x7**2\n    s24 = x6**2\n    s25 = x6**2\n    s26 = x7**2\n    s27 = x7**2\n    s28 = x7**2\n    s29 = x7**2\n    s30 = x6**2\n    s31 = x6**2\n    s32 = x7**2\n    s33 = x7**2\n    s34 = x7**2\n    s35 = x6**2\n    s36 = x6**2\n    s37 = x7**2\n    s38 = x7**2\n    s39 = x7**2\n    s40 = x6**2\n    s41 = x6**2\n    s42 = x7**2\n    s43 = x7**2\n    s44 = x6**2\n    s45 = x7**2\n    s46 = x7**2\n    s47 = x7**2\n    s48 = x7**2\n    s49 = x6**2\n    s50 = x6**2\n    s51 = x7**2\n    s52 = x7**2\n    s53 = x7**2\n    s54 = x6**2\n    s55 = x6**2\n    s56 = x7**2\n    s57 = x7**2\n    s58 = x7**2\n    s59 = x6**2\n    s60 = x7**2\n    s61 = x6**2\n    s62 = x7**2\n    s63 = x6**2\n    s64 = x7**2\n    s65 = x7**2\n    s66 = x6**2\n    s67 = x7**2\n    s68 = x7**2\n    s69 = x6**2\n    s70 = x6**2\n    s71 = x7**2\n    s72 = x7**2\n    s73 = x7**2\n    s74 = x6**2\n    s75 = x7**2\n    s76 = x7**2\n    s77 = x7**2\n    s78 = x6**2\n    s79 = x7**2\n    s80 = x7**2\n    s81 = x7**2\n    s82 = x6**2\n    s83 = x7**2\n    s84 = x7**2\n    s85 = x7**2\n    s86 = x6**2\n    s87 = x7**2\n    s88 = x7**2\n    s89 = x7**2\n    s90 = x6**2\n    s91 = x7**2\n    s92 = x7**2\n    s93 = x7**2\n    s94 = x6**2\n    s95 = x7**2\n    s96 = x7**2\n    s97 = x6**2\n    s98 = x7**2\n    s99 = x7**2\n    s100 = x6**2\n    s101 = x7**2\n    s102 = x7**2\n    s103 = x7**2\n    s104 = x7**2\n    s105 = x6**2\n    s106 = x7**2\n    s107 = x7**2\n    s108 = x7**2\n    s109 = x6**2\n    s110 = x7**2\n    s111 = x7**2\n    s112 = x7**2\n    s113 = x7**2\n    s114 = x6**2\n    s115 = x7**2\n    s116 = x7**2\n    s117 = x7**2\n    s118 = x7**2\n    s119 = x7**2\n    s120 = x6**2\n    s121 = x7**2\n    s122 = x7**2\n    s123 = x7**2\n    s124 = x7**2\n    s125 = x6**2\n    s126 = x7**2\n    s127 = x7**2\n    s128 = x7**2\n    s129 = x7**2\n    s130 = x7**2\n    s131 = x6**2\n    s132 = x7**2\n    s133 = x7**2\n    s134 = x7**2\n    s135 = x6**2\n    s136 = x7**2\n    s137 = x7**2\n    s138 = x7**2\n    s139 = x6**2\n    s140 = x7**2\n    s141 = x7**2\n    s142 = x7**2\n    s143 = x6**2\n    s144 = x7**2\n    s145 = x7**2\n    s146 = x6**2\n    s147 = x7**2\n    s148 = x7**2\n    s149 = x7**2\n    s150 = x6**2\n    s151 = x7**2\n    s152 = x7**2\n    s153 = x7**2\n    s154 = x6**2\n    s155 = x7**2\n    s156 = x7**2\n    s157 = x7**2\n    s158 = x7**2\n    s159 = x6**2\n    s160 = x7**2\n    s161 = x7**2\n    s162 = x7**2\n    s163 = x7**2\n    s164 = x7**2\n    s165 = x6**2\n    s166 = x7**2\n    s167 = x7**2\n    s168 = x7**2\n    s169 = x7**2\n    s170 = x6**2\n    s171 = x7**2\n    s172 = x7**2\n    s173 = x7**2\n    s174 = x7**2\n    s175 = x6**2\n    s176 = x7**2\n    s177 = x7**2\n    s178 = x7**2\n    s179 = x7**2\n    s180 = x7**2\n    s181 = x7**2\n    s182 = x7**2\n    s183 = x7**2\n    s184 = x7**2\n    s185 = x7**2\n    s186 = x6**2\n    s187 = x7**2\n    s188 = x7**2\n    s189 = x7**2\n    s190 = x7**2\n    s191 = x6**2\n    s192 = x7**2\n    s193 = "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = (4*l*math.pi)**2\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    l_unit = math.pow(l, 1/3)\n    f_square = 2 * l_unit * math.pow(math.e, -1/3)\n    return f_square\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print'side length: ', l\n    from mpl_toolkits.mplot3d import Axes3D\n    import matplotlib.pyplot as plt\n    from matplotlib import cm\n    from mpl_toolkits.mplot3d.axes3d import get_test_data\n    from mpl_toolkits.mplot3d.axes3d import proj3d\n    from matplotlib.ticker import LinearLocator\n    from mpl_toolkits.mplot3d.proj3d import proj_transform\n    import matplotlib.colors as mcolors\n    from matplotlib.tri import Triangulation\n    import numpy as np\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #total_area = 0\n    #for i in range(3):\n        #for j in range(3):\n            #total_area = total_area + l[i][j]**2\n    #return total_area\n    return sum(x*l[i][j] for i in range(3) for j in range(3))**0.5\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    #print(type(n))\n    if n<0:\n        print(\"Invalid Input\")\n    elif n<3:\n        print(\"Invalid Input\")\n    elif n>100:\n        print(\"Invalid Input\")\n    elif n<10:\n        print(\"Invalid Input\")\n    else:\n        for i in range(0,n):\n            a = a + b\n            b = c\n            c = a+b\n        print(c)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += i**2\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Base case\n    if n == 1: \n        return n\n    \n    # Calculate each odd number\n    odd_numbers = []\n    for i in range(1, n+1):\n        if (i % 2 == 1):\n            continue\n        else:\n            even_numbers = (i ** 2)\n            even_numbers.append(even_numbers)\n            odd_numbers.append(even_numbers)\n    \n    # Sum\n    sum = 0\n    for i in range(len(odd_numbers)):\n        sum += odd_numbers[i][i]\n        \n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x=0\n    while x<n:\n        x+=1\n        if x%2==0:\n            y=square_Sum(x)\n            print(x,y)\n    return square_Sum(n)\nprint(square_Sum(2))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        sum = sum + (i ** 2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #print(n)\n    #print(sum(range(n)))\n    #print(sum(range(n, 0, -2)))\n    #print(sum(range(n, 0, -1)))\n    #print(sum(range(n, 0, -2)))\n    #print(sum(range(n, 0, -3)))\n    #print(sum(range(n, 0, -4)))\n    #print(sum(range(n, 0, -5)))\n    #print(sum(range(n, 0, -6)))\n    #print(sum(range(n, 0, -7)))\n    #print(sum(range(n, 0, -8)))\n    #print(sum(range(n, 0, -9)))\n    #print(sum(range(n, 0, -10)))\n    #print(sum(range(n, 0, -11)))\n    #print(sum(range(n, 0, -12)))\n    #print(sum(range(n, 0, -13)))\n    #print(sum(range(n, 0, -14)))\n    #print(sum(range(n, 0, -15)))\n    #print(sum(range(n, 0, -16)))\n    #print(sum(range(n, 0, -17)))\n    #print(sum(range(n, 0, -18)))\n    #print(sum(range(n, 0, -19)))\n    #print(sum(range(n, 0, -20)))\n    #print(sum(range(n, 0, -21)))\n    #print(sum(range(n, 0, -22)))\n    #print(sum(range(n, 0, -23)))\n    #print(sum(range(n, 0, -24)))\n    #print(sum(range(n, 0, -25)))\n    #print(sum(range(n, 0, -26)))\n    #print(sum(range(n, 0, -27)))\n    #print(sum(range(n, 0, -28)))\n    #print(sum(range(n, 0, -29)))\n    #print(sum(range(n, 0, -30)))\n    #print(sum(range(n, 0, -31)))\n    #print(sum(range(n, 0, -32)))\n    #print(sum(range(n, 0, -33)))\n    #print(sum(range(n, 0, -34)))\n    #print(sum(range(n, 0, -35)))\n    #print(sum(range(n, 0, -36)))\n    #print(sum(range(n, 0, -37)))\n    #print(sum(range(n, 0, -38)))\n    #print(sum(range(n, 0, -39)))\n    #print(sum(range(n, 0, -40)))\n    #print(sum(range(n, 0, -41)))\n    #print(sum(range(n, 0, -42)))\n    #print(sum(range(n, 0, -43)))\n    #print(sum(range(n, 0, -44)))\n    #print(sum(range(n, 0, -45)))\n    #print(sum(range(n, 0, -46)))\n    #print(sum(range(n, 0, -47)))\n    #print(sum(range(n, 0, -48)))\n    #print(sum(range(n, 0, -49)))\n    #print(sum(range(n, 0, -50)))\n    #print(sum(range(n, 0, -51)))\n    #print(sum(range(n, 0, -52)))\n    #print(sum(range(n, 0, -53)))\n    #print(sum(range(n, 0, -54)))\n    #print(sum(range(n, 0, -55)))\n    #print(sum(range(n, 0, -56)))\n    #print(sum(range(n, 0, -57)))\n    #print(sum(range(n, 0, -58)))\n    #print(sum(range(n, 0, -59)))\n    #print(sum(range(n, 0, -60)))\n    #print(sum(range(n, 0, -61)))\n    #print(sum(range(n, 0, -62)))\n    #print(sum(range(n, 0, -63)))\n    #print(sum(range(n, 0, -64)))\n    #print(sum(range(n, 0, -65)))\n    #print(sum(range(n, 0, -66)))\n    #print(sum(range(n, 0, -67)))\n    #print(sum(range(n, 0, -68)))\n    #print(sum(range(n, 0, -69)))\n    #print(sum(range(n, 0, -70)))\n    #print(sum(range(n, 0, -71)))\n    #print(sum(range(n, 0, -72)))\n    #print(sum(range(n, 0, -73)))\n    #print(sum(range(n, 0, -74)))\n    #print(sum(range(n, 0, -75)))\n    #print(sum(range(n, 0, -76)))\n    #print(sum(range(n, 0, -77)))\n    #print(sum(range(n, 0, -78)))\n    #print(sum(range(n, 0, -79)))\n    #print(sum(range(n, 0, -80)))\n    #print(sum(range(n, 0, -81)))\n    #print(sum(range(n, 0, -82)))\n    #print(sum(range(n, 0, -83)))\n    #print(sum(range(n, 0, -84)))\n    #print(sum(range(n, 0, -85)))\n    #print(sum(range(n, 0, -86)))\n    #print(sum(range(n, 0, -87)))\n    #print(sum(range(n, 0, -88)))\n    #print(sum(range(n, 0, -89)))\n    #print(sum(range(n, 0, -90)))\n    #print(sum(range(n, 0, -91)))\n    #print(sum(range(n, 0, -92)))\n    #print(sum(range(n, 0, -93)))\n    #print(sum(range(n, 0, -94)))\n    #print(sum(range(n, 0, -95)))\n    #print(sum(range(n, 0, -96)))\n    #print(sum(range(n, 0, -97)))\n    #print(sum(range(n, 0, -98)))\n    #print(sum(range(n, 0, -99)))\n    #print(sum(range(n, 0, -100)))\n    #print(sum(range(n, 0, -101)))\n    #print(sum(range(n, 0, -102)))\n    #print(sum(range(n, 0, -103)))\n    #print(sum(range(n, 0, -104)))\n    #print(sum(range(n, 0, -105)))\n    #print(sum(range(n, 0, -106)))\n    #print(sum(range(n, 0, -107)))\n    #print(sum(range(n, 0, -108)))\n    #print(sum(range(n, 0, -109)))\n    #print(sum(range(n, 0, -110)))\n    #print(sum(range(n, 0, -111)))\n    #print(sum(range(n, 0, -112)))\n    #print(sum(range(n, 0, -113)))\n    #print(sum(range(n, 0, -114)))\n    #print(sum(range(n, 0, -115)))\n    #print(sum(range(n, 0, -116)))\n    #print(sum(range(n, 0, -117)))\n    #print(sum(range(n, 0, -118)))\n    #print(sum(range(n, 0, -119)))\n    #print(sum(range(n, 0, -120)))\n    #print(sum(range(n, 0, -121)))\n    #print(sum(range(n, 0, -122)))\n    #print(sum(range(n, 0, -123)))\n    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n, 2):\n        total += i**2\n    return total\n    \n    #for i in range(1, n, 2):\n        #total += i**2\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    square_sum = 0\n    for i in range(0, n):\n        square_sum = square_sum + (i * i)\n    return square_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    square_sum = 0\n    for i in range(1, n, 2):\n        square_sum += i ** 2\n    return square_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    '''\n    BASE CASE: \n        If n is 0 or negative return 0.\n        Else return n * n.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        square = 0\n        for i in range(1, n, 2):\n            square += i * i\n        return square\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # write your code here\n    for i in range(n, 0, -1):\n        if (n + i) % 2 == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # 1. Create a variable that stores the first\n    # 3 numbers from the array\n    first_three = int(n) // 3\n    # 2. Create a variable that stores the second\n    # 3 numbers from the array\n    second_three = int(n) // 2\n    # 3. Create a variable that stores the third\n    # number from the array\n    third_three = int(n) - first_three - second_three\n    # 4. Create a loop that will iterate\n    # through the array until the second number\n    # is found\n    while second_three > 0:\n        if int(n) % 3 == 1:\n            n = int(n) // 3\n        elif int(n) % 2 == 1:\n            n = int(n) // 2\n        else:\n            return n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return 9\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n, 0, -1):\n        if i*i >= n:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1 or n == 0:\n        return n\n    elif n % 5 == 0:\n        return find_star_num(n//5) + 1\n    else:\n        return find_star_num(n//5)\n    \ndef find_stars(n):\n    '''\n    Write a function to find then'th stars in a given matrix.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return find_stars(n-1)+find_stars(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    lst = list(range(n))\n    for i in range(1,n):\n        if lst[i-1]%2==1:\n            lst[i]=lst[i-1]\n        else:\n            lst[i]=lst[i+1]\n    return lst[-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def stars(n): \n        if n == 0: \n            return [] \n        else: \n            if n % 3 == 0: \n                return [n//3, n//3*2] \n            else: \n                return [n//3, n//3] \n    ans = [] \n    for i in stars(n): \n        ans += [i[0]+1] \n        ans += [i[1]+1] \n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_list = []\n    for num in range(1, n + 1):\n        num_list.append(num)\n    print(num_list)\n    return num_list[n]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n - 1) + 2\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    nums = list(range(1, n+1))\n    for i in range(1, len(nums)):\n        if nums[i-1] > nums[i]:\n            nums[i] = nums[i-1]\n    return nums[n-1]\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return unichr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(ord(k) - ord('a'))\n    except:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if not isinstance(k, bytes):\n        raise TypeError('only bytes are allowed for k')\n    return sum([ord(i) for i in k])\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 97 and k <= 122:\n        return k\n    else:\n        return 0\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert to lower case\n    k = k.lower()\n    # check if k is a valid character\n    if not k.isalpha():\n        raise ValueError('Invalid character:'+ k)\n    # convert to number and raise exception\n    return ord(k) - ord('a')\n    "
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # YOUR CODE HERE\n    if k==0:\n        return 0\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # TODO: Write your code here\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            sum += arr[i]\n    print(sum)\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if(len(arr) < 2):\n        return 0\n    else:\n        even = 0\n        even_index = 0\n        for i in range(0, len(arr)):\n            if(arr[i] % 2 == 0):\n                even += arr[i]\n                even_index += 1\n                if(i == 0):\n                    even_index += 1\n        return sum(arr[0:even_index])\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_list.append(arr[i])\n    sum_even = sum(even_list)\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            sum += arr[index]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0) and (arr[i] % 2 == 0):\n            sum_even = sum_even + arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0 \n    for i in range(0, len(arr)):\n        if i % 2 == 0 and i > 0:\n            sum += arr[i]\n    print(sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_index = 0\n    for even in arr:\n        if even % 2 == 0:\n            sum += even\n            even_index += 1\n    print(sum, even_index)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    if n==0:\n        return 0\n    else:\n        for i in range(1,n+1,2):\n            sum+=i**5\n        return sum\nprint(even_Power_Sum(5))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # if n < 0:\n    #     print(\"N must be greater than or equal to 0\")\n    # elif n == 0:\n    #     print(\"Sum of all the even numbers is 0\")\n    # else:\n    #     for i in range(1, n):\n    #         if i%3 == 0:\n    #             print(i)\n    #     print(sum([i**5 for i in range(1, n+1) if i%3==0]))\n    #\n    # if n < 10:\n    #     print(sum([i**5 for i in range(1, n+1)]))\n    # else:\n    #     sum_ = 0\n    #     for i in range(1, n+1):\n    #         if i%5 == 0:\n    #             sum_ += i\n    #     print(sum_)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    # iterate through each number\n    for num in range(1, n): \n        # check if power of a number is even\n        if num % 2 == 0:\n            # add to the sum\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([n for n in range(1, n) if n%2!=0 and n%3==0]"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    power=0\n    while n>0:\n        sum=sum+n%10**power\n        power=power+1\n        n=n//10**power\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n = abs(n)\n    if n == 0:\n        return 0\n    else:\n        return n * n * n * n * n * n\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n_even = 0\n    n_power = 5\n    for i in range(1, n+1):\n        power = i**n_power\n        if power % 5 == 0:\n            n_even += power\n    print(\"The sum of the first\", n, \"natural numbers that are raised to the fifth power is: \", n_even)\nn = int(input(\"Enter the integer number: \"))\neven_Power_Sum(n)"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #raise NotImplementedError\n    return sum(x*x**5 for x in range(1,n+1))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # code here\n    result = 0\n    for i in range(n):\n        result += i**3\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        power = int(n/3)\n        sum = 0\n        for i in range(1, power + 1):\n            sum += i**i\n        return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for i in test_list:\n        rear_extracted.append(i[1])\n    return rear_extracted\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_tuples = []\n    for item in test_list:\n        list_of_tuples.append(item[1])\n    return list_of_tuples\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for element in test_list:\n        rear.append(element[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    out_list = []\n    for element in test_list:\n        out_list.append(element[1])\n    return out_list\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = test_list[:-1]\n    # Use.append to append the last element of the list to the list\n    for x in test_list:\n        test_list.append(x[-1])\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    def rear_extract_util(tuple_list):\n        rear = []\n        for tup in tuple_list:\n            rear.append(tup[0])\n        return rear\n    rear_extract = rear_extract_util(test_list)\n    return rear_extract\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][0])\n    return rear_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if (type(test_tup1) is not tuple) and (type(test_tup2) is not tuple):\n        return \"Invalid input\"\n    if (len(test_tup1)!= len(test_tup2)) or (type(test_tup1[0]) is not tuple) or (type(test_tup2[0]) is not tuple):\n        return \"Invalid input\"\n    for i in range(len(test_tup1)):\n        if i < len(test_tup1):\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert isinstance(test_tup1, tuple), \"First parameter must be a tuple\"\n    assert isinstance(test_tup2, tuple), \"Second parameter must be a tuple\"\n    assert len(test_tup1) == len(test_tup2), \"The length of the first tuple must be the same as the second tuple\"\n    assert set(test_tup1).issubset(test_tup2), \"The first tuple must be a subset of the second tuple\"\n    assert set(test_tup2).issubset(test_tup1), \"The second tuple must be a subset of the first tuple\"\n    assert test_tup2[0] in test_tup1, \"The first element of the second tuple is not in the first tuple\"\n    assert test_tup1[1] in test_tup2, \"The second element of the first tuple is not in the second tuple\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list = []\n    for x in range(len(test_tup1)):\n        test_list.append(test_tup1[x][1])\n        test_list.append(test_tup1[x][0])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Your code here\n    return None\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if (type(test_tup1[0]) == int and type(test_tup2[0]) == int):\n        for i in range(0, len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n    else:\n        print(\"Not implemented yet.\")\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # Define the return_tuple function to return the sum of the two tuples\n    def return_tuple(tup):\n        '''\n        Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n        '''\n        return tup[0] - tup[1]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    i = 0\n    #check the two tuples are equal or not\n    while i < len(test_tup1):\n        if test_tup1[i]!= test_tup2[i]:\n            print(\"The elements are not equal\")\n            break\n        i = i + 1\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tuple1 = test_tup1[:]\n    tuple2 = test_tup2[:]\n    tuple1.pop(test_tup2.index(tuple2[0]))\n    tuple1.pop(test_tup2.index(tuple2[1]))\n    tuple1.pop(test_tup2.index(tuple2[2]))\n    return tuple1\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n):\n        s += math.pow( (math.factorial(n) - (1 - 2*(n/n))*(math.factorial(n-(i+1)) - (2*(n-(i+1)))))/ (math.factorial(i) - (1 - 2*(n-(i+1))*(math.factorial(n-(i+1)) - (2*(n-(i+1)))))))\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert n > 0\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff_sum += math.comb(i, 2) * math.factorial(i)\n    return coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(n+1):\n        if (i % 2 == 0):\n            total = total + i\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coeff(n):\n        '''\n        n : positive integer\n        '''\n        if n==0:\n            return 1\n        elif n==1:\n            return 1\n        elif n==2:\n            return 2\n        elif n==3:\n            return 4\n        elif n==4:\n            return 8\n        elif n==5:\n            return 16\n        elif n==6:\n            return 24\n        elif n==7:\n            return 32\n        elif n==8:\n            return 64\n        elif n==9:\n            return 128\n        elif n==10:\n            return 256\n        elif n==11:\n            return 512\n        elif n==12:\n            return 1024\n        elif n==13:\n            return 2048\n        elif n==14:\n            return 4096\n        elif n==15:\n            return 8192\n        elif n==16:\n            return 16384\n        elif n==17:\n            return 32768\n        elif n==18:\n            return 65536\n        elif n==19:\n            return 131072\n        elif n==20:\n            return 262144\n        elif n==21:\n            return 524288\n        elif n==22:\n            return 1048576\n        elif n==23:\n            return 2097152\n        elif n==24:\n            return 4194304\n        elif n==25:\n            return 8388608\n        elif n==26:\n            return 16777216\n        elif n==27:\n            return 33554432\n        elif n==28:\n            return 67108864\n        elif n==29:\n            return 134217728\n        elif n==30:\n            return 268435456\n        elif n==31:\n            return 536870912\n        elif n==32:\n            return 1073741824\n        elif n==33:\n            return 524288\n        elif n==34:\n            return 1048576\n        elif n==35:\n            return 2097152\n        elif n==36:\n            return 4194304\n        elif n==37:\n            return 8388608\n        elif n==38:\n            return 16777216\n        elif n==39:\n            return 33554432\n        elif n==40:\n            return 67108864\n        elif n==41:\n            return 134217728\n        elif n==42:\n            return 268435456\n        elif n==43:\n            return 536870912\n        elif n==44:\n            return 1048576\n        elif n==45:\n            return 2097152\n        elif n==46:\n            return 4194304\n        elif n==47:\n            return 8388608\n        elif n==48:\n            return 16777216\n        elif n==49:\n            return 33554432\n        elif n==50:\n            return 536870912\n        elif n==51:\n            return 1073741824\n        elif n==52:\n            return 2097152\n        elif n==53:\n            return 4194304\n        elif n==54:\n            return 8388608\n        elif n==55:\n            return 16777216\n        elif n==56:\n            return 33554432\n        elif n==57:\n            return 67108864\n        elif n==58:\n            return 134217728\n        elif n==59:\n            return 268435456\n        elif n==60:\n            return 536870912\n        elif n==61:\n            return 1048576\n        elif n==62:\n            return 2097152\n        elif n==63:\n            return 4194304\n        elif n==64:\n            return 8388608\n        elif n==65:\n            return 16777216\n        elif n==66:\n            return 33554432\n        elif n==67:\n            return 536870912\n        elif n==68:\n            return 1048576\n        elif n==69:\n            return 2097152\n        elif n==70:\n            return 4194304\n        elif n==71:\n            return 8388608\n        elif n==72:\n            return 16777216\n        elif n==73:\n            return 33554432\n        elif n==74:\n            return 536870912\n        elif n==75:\n            return 1073741824\n        elif n==76:\n            return 2097152\n        elif n==77:\n            return 4194304\n        elif n==78:\n            return 8388608\n        elif n==79:\n            return 16777216\n        elif n==80:\n            return 33554432\n        elif n==81:\n            return 536870912\n        elif n==82:\n            return 1048576\n        elif n==83:\n            return 2097152\n        elif n==84:\n            return 4194304\n        elif n==85:\n            return 8388608\n        elif n==86:\n            return 16777216\n        elif n==87:\n            return 33554432\n        elif n==88:\n            return 536870912\n        elif n==89:\n            return 1073741824\n        elif n==90:\n            return 2097152\n        elif n==91:\n            return 4194304\n        elif n==92:\n            return 8388608\n        elif n==93:\n            return 16777216\n        elif n==94:\n            return 33554432\n        elif n==95:\n            return 536870912\n        elif n==96:\n            return 1073741824\n        elif n==97:\n            return 2097152\n        elif n==98:\n            return 4194304\n        elif n==99:\n            return 8388608\n        elif n==100:\n            return 16777216\n        elif n==101:\n            return 33554432\n        elif n==102:\n            return 536870912\n        elif n==103:\n            return 1073741824\n        elif n==104:\n            return 2097152\n        elif n==105:\n            return 4194304\n        elif n==106:\n            return 8388608\n        elif n==107:\n            return 16777216\n        elif n==108:\n            return 33554432\n        elif n==109:\n            return 536870912\n        elif n==110:\n            return 1073741824\n        elif n==111:\n            return 2097152\n        elif n==112:\n            return 4194304\n        elif n==113:\n            return 8388608\n        elif n==114:\n            return 16777216\n        elif n==115:\n            return 33554432\n        elif n==116:\n            return 536870912\n        elif n==117:\n            return 1073741824\n        elif n==118:\n            return 2097152\n        elif n==119:\n            return 4194304\n        elif n==120:\n            return 8388608\n        elif n==121:\n            return 16777216\n        elif n==122:\n            return 33554432\n        elif n==123:\n            return 536870912\n        elif n==124:\n            return 1073741824\n        elif n==125:\n            return 2097152\n        elif n==126:\n            return 4194304\n        elif n==127:\n            return 8388608\n        elif n==128:\n            return 16777216\n        elif n==129:\n            return 33554432\n        elif n==130:\n            return 536870912\n        elif n==131:\n            return 1073741824\n        elif n==132:\n            return 2097152\n        elif n==133:\n            return 4194304\n        elif n==134:\n            return 8388608\n        elif n==135:\n            return 16777216\n        elif n==136:\n            return 33554432\n        elif n==137:\n            return 536870912\n        elif n==138:\n            return 10"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        sum=0\n        for i in range(1,n+1):\n            sum=sum+math.pow(2,i)*even_binomial_Coeff_Sum(n-i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n > 0:\n        #assuming n is a positive integer\n        #calculate n_2 = n*(n-1)/2\n        n_2 = int(math.pow(n, 2))\n        \n        #calculate the correct sum\n        #using the formula n_2 = (n-1)^2\n        #n_2 = n*(n-1)/2\n        return (int(n_2) + n_2*(n_2-1)/2)\n    else:\n        raise Exception('n must be a positive integer')\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(1, n + 1):\n        sum_even_binomial += math.factorial(i) / math.factorial(i - 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%2 == 0:\n        return n*even_binomial_Coeff_Sum(n-1)\n    else:\n        return n*even_binomial_Coeff_Sum(n-1)+even_binomial_Coeff_Sum(n//2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    if(n==0): return 0\n    elif(n%2==0): result = even_binomial_Coeff_Sum(n//2)\n    else: result = even_binomial_Coeff_Sum(n//2+1)\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    for i in range(n, n+2): \n        n = (2 ** i) * (2 ** (i-n))\n        if n % 2 == 0: \n            return n \n    return 0\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3*math.pi*(r**3)*(h**3)\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4*3.14*r*h)/3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = r**2 * h\n    print(f\"The volume of the cylinder is: {vol:.2f}\")\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*(pi*r**3)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # TODO: Write the function that calculates the volume.\n    return 0.5*r*h*h/3.14\n    "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r * h * 3.14 * 2 * math.pi\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #Hint: you may want to use pi, but you don't have to.\n    #You can calculate the volume of a cylinder with the formula:\n    #volume = pi r^2\n    #In other words:\n    #volume = pi r^2 * r^2\n    return (pi * r**2)*(2*(h/r))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3*r*(4/3)\n    return v\n    #return 3*r**3"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key in dict:\n        if dict[key] >= n:\n            result[key] = dict[key]\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for k,v in dict.items():\n        if v > n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict.keys():\n        new_dict[key] = [i for i in dict[key] if i >= n]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = []\n    for key in dict:\n        if dict[key] >= n:\n            filtered.append(key)\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #print(dict)\n    #print(n)\n    filtered_dict = {}\n    for key in dict:\n        if key >= n:\n            #print(key)\n            #print(dict[key])\n            filtered_dict[key] = dict[key]\n        else:\n            pass\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            d[key] = dict[key]\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d={}\n    for k,v in dict.items():\n        if v>n:\n            d[k]=v\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = dict.copy()\n    filtered_dict.pop(n)\n    return filtered_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code here\n    dict1 = {}\n    # iterate through each value in the given tuple and store its position in dictionary.\n    for i in range(len(test_tup)):\n        if test_tup[i] not in dict1.keys():\n            dict1[test_tup[i]] = i\n    return dict1[test_tup[0]]\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(len(t) for t in test_tup)\n    \n    \ndef count_second_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(len(t) for t in test_tup)\n    \n    \ndef count_first_elements_iterative(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup)\n    \n    \ndef count_second_elements_iterative(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup)\n    \n    \ndef first_element(test_tup):\n    '''\n    Write a function to find the first element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[0]\n    \n    \ndef second_element(test_tup):\n    '''\n    Write a function to find the second element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[1]\n    \n    \ndef third_element(test_tup):\n    '''\n    Write a function to find the third element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[2]\n    \n    \ndef count_third_elements(test_tup):\n    '''\n    Write a function that takes a tuple as its sole argument, and returns the number of elements in the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup if t[2] == 1)\n    \n    \ndef find_nth_to_last_occurrence_of_value(tup, n):\n    '''\n    Write a function that, given a tuple, returns the nth to the last occurrence of the value.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return tup[n]\n    \n    \ndef count_third_elements_iterative(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the number of elements in the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup if t[2] == 1)\n    \n    \ndef find_nth_to_last_occurrence_of_value_iterative(tup, n):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the number of elements in the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return tup[n]\n    \n    \ndef count_nth_to_last_occurrence_of_value(tup, n):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the number of elements in the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup if t[2] == 1)\n    \n    \ndef first_in_first_out(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the first element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[0]\n    \n    \ndef last_in_first_out(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the last element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[-1]\n    \n    \ndef count_first_in_first_out(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the number of elements that occur before the tuple element in the given tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup if t[0] == 1)\n    \n    \ndef count_last_in_first_out(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the number of elements that occur after the tuple element in the given tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup if t[-1] == 1)\n    \n    \ndef count_all_elements(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the total number of elements in the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup if t[0] == 1 and t[-1] == 1)\n    \n    \ndef count_all_elements_iterative(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the total number of elements in the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return sum(1 for t in test_tup if t[0] == 1 and t[-1] == 1)\n    \n    \ndef second_last_in_first_out(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the second element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[-2]\n    \n    \ndef count_second_last_in_first_out(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the second element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[-2]\n    \n    \ndef second_last_in_first_out_iterative(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the second element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[-2]\n    \n    \ndef first_last_in_first_out_iterative(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the first element of the tuple.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement for this challenge.')\n    return test_tup[0]\n    \n    \ndef find_first_in_first_out(test_tup):\n    '''\n    Write a function that, given a tuple as its sole argument, returns the first element of the tuple.\n    '''\n    # YOUR COD"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elements_list = []\n    for i in range(len(test_tup) - 1):\n        if test_tup[i][0] < test_tup[i + 1][0]:\n            first_elements_list.append(test_tup[i][1])\n    return len(first_elements_list)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0, len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i - 1] < test_tup[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(list(filter(lambda x: x == test_tup[0], test_tup)))\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count\n    "
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup_length = len(test_tup)\n    start_index = 0\n    for index in range(tup_length):\n        if test_tup[index] == test_tup[start_index]:\n            start_index += 1\n    return start_index\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        if (i == n) or (sum < (i - 1) * (n - i)):\n            sum = i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    else: \n        return is_num_decagonal(n-1) + is_num_decagonal(n-2) + is_num_decagonal(n-3)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #Your code goes here\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    return n * (n - 1) * (n - 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    nth = 1\n    while n >= 1:\n        if n == 1:\n            return num\n        elif n % 2 == 1:\n            num = num * 10 + num\n            nth = nth * 10\n        else:\n            num = num * 10 + num\n            nth = nth * 10\n        n = n - 1\n    return num * 10 + nth\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return is_num_decagonal(n-1)\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    if (n == 0 or n == 1 or n == 2):\n        return n\n    elif (n == 3 or n == 4 or n == 5 or n == 6):\n        return (n-1)\n    elif (n == 7 or n == 8 or n == 9 or n == 10):\n        return n\n    else:\n        return (n-1)\n    \n    # SOLUTION\n    \ndef is_prime(x):\n    '''\n    Write a function that returns true if x is prime, otherwise returns false.\n    '''\n    if x <= 1:\n        return False\n    if x == 2 or x == 3:\n        return True\n    if x % 2 == 0 or x % 3 == 0:\n        return False\n    i = 5\n    while i <= x ** 0.5:\n        if x % i == 0 or x % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n % 2 == 0: \n        return 2\n    if n % 2 == 1: \n        return 3\n    return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # write your code here\n    a = list(str(n))\n    if n % 2 == 0:\n        return int(''.join(a[1:]))\n    else:\n        return int(''.join(a[:-1]))\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if (i**2-1)/i >= n:\n            continue\n        sum = sum + int(i**2-1/i)\n    return sum\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n%4\n    if n==0: return 0\n    elif n==1: return 3\n    elif n==2: return 4\n    elif n==3: return 6\n    elif n==4: return 9\n    \n    \n    \ndef get_prime(x):\n    '''\n    x = number for which the number of primes is to be calculated\n    '''\n    prime = 1\n    for i in range(2, x):\n        if is_prime(i):\n            prime += 1\n    return prime\n    \n    \n    \ndef is_prime(x):\n    '''\n    x = number for which the number of primes is to be calculated\n    '''\n    if x == 2 or x == 3 or x == 5 or x == 7:\n        return True\n    if x % 2 == 0 or x % 3 == 0 or x % 5 == 0 or x % 7 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i, item\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Loop through each element\n    for i in range(len(dlist)):\n        # If the item is found, return a tuple\n        if dlist[i] == item:\n            return (True, i)\n    # If the item is not found\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for x in range(len(dlist)):\n        if dlist[x] == item:\n            return (True, x)\n    else:\n        return (False, -1)\n    \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, e in enumerate(dlist):\n        if e == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n    return pos,dlist[pos]\n    # or\n    # dlist.index(item)\n    # return pos\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True,i)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    unique_elements = []\n    # empty list to store unique elements\n    for item in test_list:\n        if item not in unique_elements:\n            unique_elements.append(item)\n    \n    return unique_elements\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # I assume list is sorted\n    test_list_1 = list(test_list)\n    test_list_2 = []\n    for i in range(len(test_list_1)):\n        if test_list_1[i] not in test_list_2:\n            test_list_2.append(test_list_1[i])\n    return test_list_2 == test_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    test_list_uniq = list(set(test_list))\n    return len(test_list)==len(test_list_uniq)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for i in test_list:\n        temp.append(i)\n    for i in temp:\n        if i not in temp:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        if x in test_list:\n            return False\n    return True\n    \nprint(all_unique([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]))\nprint(all_unique([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5])"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    for key in count_dict:\n        if count_dict[key] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Add any additional code here\n    test_list = [1,1,1,2,3,3,3]\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    counter = {}\n    \n    for element in test_list:\n        if element not in counter:\n            counter[element] = 1\n        else:\n            counter[element] += 1\n    \n    return counter == {}\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize list\n    unique = []\n    # Loop through all elements in the list\n    for item in test_list:\n        # Check if element is not in the list\n        if item not in unique:\n            unique.append(item)\n    # Print the unique elements\n    print(unique)\n    return\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Initialise an empty list to store the result\n    if len(test_list) == 1:\n        print(test_list)\n    else:\n        for i in range(1,len(test_list)):\n            if test_list[i-1] == test_list[i]:\n                print(test_list[i-1],\"is already in the list\")\n            else:\n                print(test_list[i-1],\"is not already in the list\")\n                \n                "
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1-nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result=[]\n    for i in nums1:\n        for j in nums2:\n            result.append(i-j)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub=[]\n    nums1.sort()\n    nums2.sort()\n    m=len(nums1)\n    for i in range(m):\n        if(nums1[i]==nums2[i]):\n            sub.append(nums1[i])\n        else:\n            sub.append(nums1[i]+nums2[i])\n    return(sub)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if nums2 == None:\n        return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 + num2 == 2020:\n                result.append(num1)\n                result.append(num2)\n    return result\n    "
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [[i - j for i,j in zip(nums1,nums2)] for j in range(len(nums1[0]))]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1 - nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums2 if num not in nums1]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n    for i in str(n):\n        if int(i) > 9:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [] \n    num = []\n    for i in range(len(str(n))): \n        digits.append(n % 10) \n        n = n // 10\n    num.append(digits)\n    return num \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def is_valid(n):\n        # Given a number, find the list of factors that divide it\n        factors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        return factors\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = ''\n    for i in str(n):\n        d += i\n    if(int(d)<=n):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in str(n):\n        if i.isalpha():\n            count += 1\n    if count > n:\n        return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #raise NotImplementedError\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(n, 0, -1): \n        if n % i == 0: \n            print(i, end ='') \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 1: return 0\n    elif n % 10 == 0: return 0\n    elif n % 10 == 9: return 0\n    else: return n % 10\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0: \n        raise ValueError('Please enter a positive integer')\n    elif n == 1: \n        return True\n    else: \n        p = 0\n        for i in range(0, n): \n            if n % 10 == i: \n                p += 1\n            else: \n                p = 0\n        if p == 1: \n            return False\n        else: \n            return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for el in list:\n        if el!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(e == element for e in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    result = True\n    for item in list:\n        if item!= element:\n            result = False\n    return result\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    element = element\n    \n    if element == list[0]:\n        return list[0]\n    elif element in list:\n        index = list.index(element)\n        return list[index]\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if (list[i]!= element):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if(element in list):\n        return True\n    else:\n        return False\ndef check_mult(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if(x == element):\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        for i in range(0,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) % 2!= 0:\n        return False\n    for i in range(0, len(text) - (len(text) % 2)):\n        if text[i]!= 'a' and text[i]!= 'b':\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match1 = re.search(r'(?:a)(?:\\b)+(?:\\w)', text)\n    match2 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match3 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    if match1:\n        return True\n    elif match2:\n        return True\n    elif match3:\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    match1 = re.search(r'(?:a)(?:\\w)+(?:\\b)', text)\n    match2 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match3 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match4 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    if match1:\n        return True\n    elif match2:\n        return True\n    elif match3:\n        return True\n    elif match4:\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    match1 = re.search(r'(?:a)(?:\\w)+(?:\\b)', text)\n    match2 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match3 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match4 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match5 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    if match1:\n        return True\n    elif match2:\n        return True\n    elif match3:\n        return True\n    elif match4:\n        return True\n    elif match5:\n        return True\n    else:\n        return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    match1 = re.search(r'(?:a)(?:\\w)+(?:\\b)', text)\n    match2 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match3 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match4 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match5 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    if match1:\n        return True\n    elif match2:\n        return True\n    elif match3:\n        return True\n    elif match4:\n        return True\n    elif match5:\n        return True\n    else:\n        return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    match1 = re.search(r'(?:a)(?:\\w)+(?:\\b)', text)\n    match2 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match3 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match4 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match5 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match6 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match7 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    if match1:\n        return True\n    elif match2:\n        return True\n    elif match3:\n        return True\n    elif match4:\n        return True\n    elif match5:\n        return True\n    elif match6:\n        return True\n    elif match7:\n        return True\n    else:\n        return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    match1 = re.search(r'(?:a)(?:\\w)+(?:\\b)', text)\n    match2 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match3 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match4 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match5 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match6 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match7 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    if match1:\n        return True\n    elif match2:\n        return True\n    elif match3:\n        return True\n    elif match4:\n        return True\n    elif match5:\n        return True\n    elif match6:\n        return True\n    elif match7:\n        return True\n    else:\n        return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    match1 = re.search(r'(?:a)(?:\\w)+(?:\\b)', text)\n    match2 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match3 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match4 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match5 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match6 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    match7 = re.search(r'(?:a)(?:\\b)(?:\\w|\\s)+(?:\\w)+(?:\\b)', text)\n    match8 = re.search(r'(?:b)(?:\\w)+(?:\\b)', text)\n    if match1:\n        return True\n    elif match2:\n        return True\n    elif match3:\n        return True\n    elif match4:\n        return True\n    elif match5:\n        return True\n    elif match6:\n        return True\n    elif match7:\n        return True\n    elif match8:\n        return True\n    else:\n        return False\n    \ndef text_match_ten(text):\n    '''\n    Write a function that checks whether "
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    my_list = list(text)\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'b':\n            my_list[i] = 'b'\n    new_string = ''.join(my_list)\n    print(text)\n    print(new_string)\n    if len(new_string) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_seventeen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_eighteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_nineteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_thirty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_forty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_fifty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_hundred(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_hundreds(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_thousands(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_ones(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_twos(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_tens(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_ones_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_twos_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_thousands_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_fives_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_sixties_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_sextens_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_tens_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_ones_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_twos_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_thousands_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_fives_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_match_two_three_sixties_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\ndef text_matc"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.search('a([bc])(\\d+)(b)',text)\n    if not m:\n        return False\n    num = m.group(1)\n    if num[0] == 'b':\n        return True\n    else:\n        return False\n    # num = re.search('(a)([bc])',text)\n    # if not num:\n    #     return False\n    # return True\n    # if num[1] == 'b':\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '^([a-z])([a-z])([a-z])([a-z])$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    def remove_a(text):\n        '''\n        Remove 'a' character from text.\n        '''\n        if text.count('a')!= 1:\n            return ''\n        text = text.replace('a', '')\n        return text\n    '''\n    Remove 'a' character from text.\n    '''\n    def remove_a(text):\n        '''\n        Remove 'a' character from text.\n        '''\n        if text.count('a')!= 1:\n            return ''\n        text = text.replace('a', '')\n        return text\n    '''\n    Remove 'b' character from text.\n    '''\n    def remove_b(text):\n        '''\n        Remove 'b' character from text.\n        '''\n        if text.count('b')!= 1:\n            return ''\n        text = text.replace('b', '')\n        return text\n    '''\n    Remove 'b' character from text.\n    '''\n    def remove_b(text):\n        '''\n        Remove 'b' character from text.\n        '''\n        if text.count('b')!= 1:\n            return ''\n        text = text.replace('b', '')\n        return text\n    '''\n    Remove 'c' character from text.\n    '''\n    def remove_c(text):\n        '''\n        Remove 'c' character from text.\n        '''\n        if text.count('c')!= 1:\n            return ''\n        text = text.replace('c', '')\n        return text\n    '''\n    Remove 'c' character from text.\n    '''\n    def remove_c(text):\n        '''\n        Remove 'c' character from text.\n        '''\n        if text.count('c')!= 1:\n            return ''\n        text = text.replace('c', '')\n        return text\n    '''\n    Remove 'd' character from text.\n    '''\n    def remove_d(text):\n        '''\n        Remove 'd' character from text.\n        '''\n        if text.count('d')!= 1:\n            return ''\n        text = text.replace('d', '')\n        return text\n    '''\n    Remove 'd' character from text.\n    '''\n    def remove_d(text):\n        '''\n        Remove 'd' character from text.\n        '''\n        if text.count('d')!= 1:\n            return ''\n        text = text.replace('d', '')\n        return text\n    '''\n    Remove 'e' character from text.\n    '''\n    def remove_e(text):\n        '''\n        Remove 'e' character from text.\n        '''\n        if text.count('e')!= 1:\n            return ''\n        text = text.replace('e', '')\n        return text\n    '''\n    Remove 'e' character from text.\n    '''\n    def remove_e(text):\n        '''\n        Remove 'e' character from text.\n        '''\n        if text.count('e')!= 1:\n            return ''\n        text = text.replace('e', '')\n        return text\n    '''\n    Remove 'f' character from text.\n    '''\n    def remove_f(text):\n        '''\n        Remove 'f' character from text.\n        '''\n        if text.count('f')!= 1:\n            return ''\n        text = text.replace('f', '')\n        return text\n    '''\n    Remove 'f' character from text.\n    '''\n    def remove_f(text):\n        '''\n        Remove 'f' character from text.\n        '''\n        if text.count('f')!= 1:\n            return ''\n        text = text.replace('f', '')\n        return text\n    '''\n    Remove 'g' character from text.\n    '''\n    def remove_g(text):\n        '''\n        Remove 'g' character from text.\n        '''\n        if text.count('g')!= 1:\n            return ''\n        text = text.replace('g', '')\n        return text\n    '''\n    Remove 'g' character from text.\n    '''\n    def remove_g(text):\n        '''\n        Remove 'g' character from text.\n        '''\n        if text.count('g')!= 1:\n            return ''\n        text = text.replace('g', '')\n        return text\n    '''\n    Remove 'h' character from text.\n    '''\n    def remove_h(text):\n        '''\n        Remove 'h' character from text.\n        '''\n        if text.count('h')!= 1:\n            return ''\n        text = text.replace('h', '')\n        return text\n    '''\n    Remove 'h' character from text.\n    '''\n    def remove_h(text):\n        '''\n        Remove 'h' character from text.\n        '''\n        if text.count('h')!= 1:\n            return ''\n        text = text.replace('h', '')\n        return text\n    '''\n    Remove 'i' character from text.\n    '''\n    def remove_i(text):\n        '''\n        Remove 'i' character from text.\n        '''\n        if text.count('i')!= 1:\n            return ''\n        text = text.replace('i', '')\n        return text\n    '''\n    Remove 'i' character from text.\n    '''\n    def remove_i(text):\n        '''\n        Remove 'i' character from text.\n        '''\n        if text.count('i')!= 1:\n            return ''\n        text = text.replace('i', '')\n        return text\n    '''\n    Remove 'j' character from text.\n    '''\n    def remove_j(text):\n        '''\n        Remove 'j' character from text.\n        '''\n        if text.count('j')!= 1:\n            return ''\n        text = text.replace('j', '')\n        return text\n    '''\n    Remove 'j' character from text.\n    '''\n    def remove_j(text):\n        '''\n        Remove 'j' character from text.\n        '''\n        if text.count('j')!= 1:\n            return ''\n        text = text.replace('j', '')\n        return text\n    '''\n    Remove 'k' character from text.\n    '''\n    def remove_k(text):\n        '''\n        Remove 'k' character from text.\n        '''\n        if text.count('k')!= 1:\n            return ''\n        text = text.replace('k', '')\n        return text\n    '''\n    Remove 'k' character from text.\n    '''\n    def remove_k(text):\n        '''\n        Remove 'k' character from text.\n        '''\n        if text.count('k')!= 1:\n            return ''\n        text = text.replace('k', '')\n        return text\n    '''\n    Remove 'l' character from text.\n    '''\n    def remove_l(text):\n        '''\n        Remove 'l' character from text.\n        '''\n        if text.count('l')!= 1:\n            return ''\n        text = text.replace('l', '')\n        return text\n    '''\n    Remove 'l' character from text.\n    '''\n    def remove_l(text):\n        '''\n        Remove 'l' character from text.\n        '''\n        if text.count('l')!= 1:\n            return ''\n        text = text.replace('l', '')\n        return text\n    '''\n    Remove'm' character from text.\n    '''\n    def remove_m(text):\n        '''\n        Remove'm' character from text.\n        '''\n        if text.count('m')!= 1:\n            return ''\n        text = text.replace('m', '')\n        return text\n    '''\n    Remove'm' character from text.\n    '''\n    def remove_m(text):\n        '''\n        Remove'm' character from text.\n        '''\n        if text.count('m')!= 1:\n            return ''\n        text = text.replace('m', '')\n        return text\n    '''\n    Remove 'n' character from text.\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if not re.search(r'(?:a){2,3}', text) == None:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(a){2,3}'\n    return re.search(pattern,text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    i=0\n    start=0\n    end=0\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'b':\n            start=i+1\n        if text[i] == 'b' and text[i+1] == 'a':\n            end=i+1\n    if start == end:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # declare the array to be modified\n    mod_array = [None] * n\n    mod_array[0] = a[0]\n    \n    # for every remaining element in the array\n    for i in range(1, n):\n        mod_array[i] = mod_array[i-1] + a[i]\n        \n    # find the max sum of a and the remaining elements in the array\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, (i + 1) * mod_array[i])\n    \n    # return the max sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 1\n    j = 1\n    count = 0\n    total = 0\n    while(i <= n):\n        total += a[i]\n        i += k\n        count += 1\n        if count % (k*k) == 0:\n            j += 1\n            count = 0\n    return total\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n_var = 1\n    k_var = 1\n    sum_curr = 0\n    max_sum = 0\n    # A recursive function to find the largest sum of a contiguous array.\n    def find_max_sum(a, n, k):\n        # Base case:\n        if n == 0 or k == 0:\n            return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    if (k > len(a)):\n        return 0\n    else:\n        for i in range(len(a)):\n            max_sum += a[i] * k\n        return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    k = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if(n < k):\n        return 0\n    if(n == k):\n        return a[n]\n    m = (k - 1) // 2\n    if(n % m == 0):\n        return max(a[n//m] + max_sub_array_sum_repeated(a, n//m, k),\n                   max_sub_array_sum_repeated(a, n//m, k) + a[n])\n    else:\n        return max(a[n//m] + max_sub_array_sum_repeated(a, n//m, k),\n                   max_sub_array_sum_repeated(a, n//m, k) + a[n])\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_arrays_sum = []\n    max_sub_arrays_sum = 0\n    for i in range(n):\n        sub_arrays_sum.append(a[i])\n    for i in range(k):\n        sub_arrays_sum = sub_arrays_sum + a[i*n:(i+1)*n]\n    for i in range(n):\n        max_sub_arrays_sum = max(max_sub_arrays_sum, sum(sub_arrays_sum[i:]))\n    return max_sub_arrays_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -2*k\n    for i in range(k):\n        max_sum += a[i]\n    for i in range(k, n):\n        max_sum += a[i]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a)\n    k = 1\n    \n    for i in range(n):\n        a[i] = k\n        k+=1\n    \n    res = 0\n    \n    for i in range(n):\n        res += a[i]\n        if (res > k):\n            return res\n        \n    return 0\n    \n    \na = [1, 5, 2, 2, 3, 4]\nn = len(a)\nk = 1\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + (i**2)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i ** 2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n * (n + 1) / 2)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    squared = 0\n    i = 0\n    while i < n:\n        squared = squared + (i**2)\n        i = i + 1\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n * n\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum = sum + i ** 2\n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n * n \n    \n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for element in list1:\n        lengths.append(len(element))\n    print(f\"The maximum length in a list of lists is {max(lengths)}\")\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    def find_length(l):\n        count = 0\n        for item in l:\n            if len(item) > count:\n                count = len(item)\n        return count\n    \n    return find_length(list1)"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        for j in i:\n            if len(j) > max_length:\n                max_length = len(j)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # TODO: Create a function called max_length that takes a list of lists as a parameter.\n    #       The function should return the number of items in the longest list in the list.\n    #\n    #       For example, the following code should return 5:\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       The function you should return None if there is no longest list in the list.\n    #       Return a number (integer) or raise an exception in any case.\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       For example, the following code:\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       The function you should return None if there is no longest list in the list.\n    #       Return a number (integer) or raise an exception in any case.\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       Note:\n    #\n    #       This function is not case sensitive!\n    #\n    #       For example:\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       For example:\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       Return None if there is no longest list in the list.\n    #       Return a number (integer) or raise an exception in any case.\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       For example:\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       For example:\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       Note:\n    #\n    #       This function is not case sensitive!\n    #\n    #       For example:\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       For example:\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]]\n    #       >>> longest_list = longest_list_of_lists(longest_list_of_lists)\n    #       >>> longest_list\n    #       [10, 11, 12]\n    #       >>> longest_list_of_lists\n    #       [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #\n    #       Return None if there is no longest list in the list.\n    #       Return a number (integer) or raise an exception in any case.\n    #\n    #       >>> longest_list = [\n    #      ... [1, 2, 3],\n    #      ... [4, 5, 6],\n    #      ... [7, 8, 9],\n    #      ... [10, 11, 12]"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max=0\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if len(list1[x][y])>max:\n                max=len(list1[x][y])\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = list1[0]\n    for x in list1:\n        if x > max:\n            max = x\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in list1:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #Return the number of items with the longest\n    #elements in a list of lists\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == k:\n        return 1\n    elif n < k:\n        return 0\n    elif n == k:\n        return 0\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return calculate_ways(n, k, 0, 0, 0, 0, 0, 0)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k <= 2: \n        return n*k\n    else: \n        return (count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-2)) % (10**9 + 7)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Get the height of the fence \n    h = len(str(n))\n    \n    # Pick up the height of the fence \n    # Iterate through the height of the fence \n    # For each of the adjacent posts (h-1 adjacent to h-2 adjacent to h-3 adjacent to h-4) \n    #   Pick up the colour of the adjacent posts \n    #   If the number of the colour of the adjacent posts is same as the number of the current colour, add 1 to the current colour\n    #   If the colour is different of the current colour and that colour is not an adjacent post, do not repeat. \n    #   Otherwise repeat\n    # Return the total number of ways possible to paint the fence with n posts and k colours\n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence has to be rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    \n    # Step 1: Build the height of the fence \n    # This is the width of the fence with n posts and k colours\n    # Fill in the height of the fence \n    # Pick up the height of the fence \n    # Iterate through the height of the fence \n    # For each of the adjacent posts (h-1 adjacent to h-2 adjacent to h-3 adjacent to h-4) \n    #   Pick up the colour of the adjacent posts \n    #   If the number of the colour of the adjacent posts is same as the number of the current colour, add 1 to the current colour\n    #   If the colour is different of the current colour and that colour is not an adjacent post, do not repeat. \n    #   Otherwise repeat\n    # Return the total number of ways possible to paint the fence with n posts and k colours\n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 2: Go through the height of the fence \n    # Write a recursive formula that uses the formula to calculate the height of the fence \n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 3: Return the total number of ways possible to paint the fence with n posts and k colours\n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 4: return the total number of ways possible to paint the fence with n posts and k colours\n    \n    # Step 1: Build the height of the fence \n    # This is the width of the fence with n posts and k colours\n    # Fill in the height of the fence \n    # Pick up the height of the fence \n    # Iterate through the height of the fence \n    # For each of the adjacent posts (h-1 adjacent to h-2 adjacent to h-3 adjacent to h-4) \n    #   Pick up the colour of the adjacent posts \n    #   If the number of the colour of the adjacent posts is same as the number of the current colour, add 1 to the current colour\n    #   If the colour is different of the current colour and that colour is not an adjacent post, do not repeat. \n    #   Otherwise repeat\n    # Return the total number of ways possible to paint the fence with n posts and k colours\n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 2: Go through the height of the fence \n    # Write a recursive formula that uses the formula to calculate the height of the fence \n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 3: Return the total number of ways possible to paint the fence with n posts and k colours\n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 4: return the total number of ways possible to paint the fence with n posts and k colours\n    \n    # Step 1: Build the height of the fence \n    # This is the width of the fence with n posts and k colours\n    # Fill in the height of the fence \n    # Pick up the height of the fence \n    # Iterate through the height of the fence \n    # For each of the adjacent posts (h-1 adjacent to h-2 adjacent to h-3 adjacent to h-4) \n    #   Pick up the colour of the adjacent posts \n    #   If the number of the colour of the adjacent posts is same as the number of the current colour, add 1 to the current colour\n    #   If the colour is different of the current colour and that colour is not an adjacent post, do not repeat. \n    #   Otherwise repeat\n    # Return the total number of ways possible to paint the fence with n posts and k colours\n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 2: Go through the height of the fence \n    # Write a recursive formula that uses the formula to calculate the height of the fence \n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 3: Return the total number of ways possible to paint the fence with n posts and k colours\n    \n    # Step 1: Build the height of the fence \n    # This is the width of the fence with n posts and k colours\n    # Fill in the height of the fence \n    # Pick up the height of the fence \n    # Iterate through the height of the fence \n    # For each of the adjacent posts (h-1 adjacent to h-2 adjacent to h-3 adjacent to h-4) \n    #   Pick up the colour of the adjacent posts \n    #   If the number of the colour of the adjacent posts is same as the number of the current colour, add 1 to the current colour\n    #   If the colour is different of the current colour and that colour is not an adjacent post, do not repeat. \n    #   Otherwise repeat\n    # Return the total number of ways possible to paint the fence with n posts and k colours\n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 2: Go through the height of the fence \n    # Write a recursive formula that uses the formula to calculate the height of the fence \n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 3: Return the total number of ways possible to paint the fence with n posts and k colours\n    # K is the maximum number of adjacent posts of the fence \n    # Note that the fence is rectangular with the length of n and width of k\n    # Step 4: return the total number of ways possible to paint the fence with n posts and k colours\n    \n    # Step 1: Build the height of the fence \n    # This is the width of the fence with n posts and k colours\n    # Fill in the height of the fence \n    # Pick up the height of the fence \n    # Iterate through the height of the fence \n    # For each of the adjacent posts (h-1 adjacent to h-2 adjacent to h-3 adjacent to h-4) \n    #   Pick up the colour of the adjacent posts \n    #   If the number of the colour of the adjacent posts is same as the number of the current colour, add 1 to the current colour\n    #   If the colour i"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            count += 2\n        if 0 < k and i < k:\n            count += 1\n        if count >= n - 2:\n            return count\n    \n    return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0: \n        return 0\n    if k == 1: \n        return 1\n    if k > n: \n        return 0 \n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    \n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j < 4:\n                dp[i][j] = (dp[i-1][j] if j % 2 == 0 else dp[i-1][j//2] + dp[i-1][j//2 + 1])\n            else:\n                dp[i][j] = (dp[i-1][j] if j % 2 == 0 else dp[i-1][j//2] + dp[i-1][j//2 + 1] + dp[i-1][j//2 + 2])\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0 or n < 2 or k < 1: \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==2:\n        return 2\n    if n<2:\n        return n\n    if k==1:\n        return 1\n    ways=0\n    ways+=count_no_of_ways(n-1,k-1)\n    ways+=count_no_of_ways(n-1,k)\n    ways+=count_no_of_ways(n-1,k-1)\n    return ways\ndef main():\n    n,k = map(int,input().split())\n    print(count_no_of_ways(n,k))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0 or k==0: \n        return 1\n    if n<0 or k<0: \n        return 0\n    \n    def count_ways(left_side, right_side, color): \n        if left_side == right_side: \n            return 1\n        \n        return count_ways(left_side+color, right_side, color)+count_ways(left_side, right_side-color, color)+count_ways(left_side, right_side+color, color)\n    return count_ways(0, n-1, 1)\n    \nprint(count_no_of_ways(4, 3))\nprint(count_no_of_ways(5, 3))\nprint(count_no_of_ways(3, 3))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n == m):\n        return m\n    if(n < m):\n        return find(n, m + 1)\n    else:\n        return find(n + 1, m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > 0 and m > 0:\n        if n < m:\n            a = n - m\n            b = n + m\n        elif n > m:\n            b = m - n\n            a = n + m\n        else:\n            b = m - n\n            a = n + m\n        if n >= 0 and m >= 0:\n            if n >= a and n >= b:\n                return a\n            elif n <= a and n <= b:\n                return b\n            elif n < a and n < b:\n                return n\n            elif n > a and n > b:\n                return n + a\n    else:\n        return None\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m > n:\n        m,n = n,m \n    if n == 0:\n        return 0\n    if n%m == 0:\n        return m\n    else:\n        return find(n,m-1) + m\n    \n    \ndef quadratic(a,b,c):\n    '''\n    Write a python function to find the quadratic equation ax^2 + bx + c = 0.\n    '''\n    a = a**2\n    b = b**2\n    c = c**2\n    d = a + b + c\n    e = b**2 - 4*a*c\n    f = -b**2 + 4*a*c\n    return d,e,f\n    \n    \ndef find_quad(a,b,c):\n    '''\n    Write a python function to find the quadratic equation ax^2 + bx + c = 0.\n    '''\n    a = a**2\n    b = b**2\n    c = c**2\n    d = a + b + c\n    e = b**2 - 4*a*c\n    f = -b**2 + 4*a*c\n    return d,e,f\n    \ndef bb(m,n,a):\n    '''\n    Write a python function to find the bb value of two numbers.\n    '''\n    if m > n:\n        m,n = n,m\n    if n == 0:\n        return 0\n    if n%m == 0:\n        return m\n    else:\n        return bb(m,n,a)\n    \ndef factors(n):\n    '''\n    Write a python function to find the factors of a natural number.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    else:\n        return [2,2] + factors(n//2)\n    \ndef primeFactors(n):\n    '''\n    Write a python function to find the prime factors of a natural number.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    else:\n        if n%2 == 0:\n            return primeFactors(n//2)\n        elif n % 2 == 1:\n            return [3] + primeFactors(n//2)\n        \ndef squares(n):\n    '''\n    Write a python function to find the squares of a natural number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return squares(n-1) + squares(n-2)\n    \ndef main():\n    '''\n    To run this file, enter python myapp.py\n    '''\n    n = input('n = ')\n    m = input('m = ')\n    a = input('a = ')\n    b = input('b = ')\n    c = input('c = ')\n    print('quadratic equation ax^2 + bx + c = 0 = ', quadratic(int(a),int(b),int(c)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find(n,m) = ', find(int(n),int(m)))\n    print('find"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m<n:\n        return -1\n    if n==m:\n        return n\n    if m<0:\n        return -1\n    \n    x=m//n\n    y=m%n\n    if n%2==0:\n        if x!=0:\n            return n*find(n-1,x)+find(x+1,y)\n        else:\n            return n*find(x,y)+find(y+1,n-1)\n    else:\n        return n*find(x,y)+find(y,n-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    if n < m:\n        return n + find(n,m-1)\n    return find(n-1,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Initialize variables\n    quotient = 0\n    remainder = 1\n    \n    # Check if the input is valid\n    if n < 1 or m < 1:\n        print('Invalid input, try again')\n        return None\n    \n    # Check if the input is a whole number\n    if n > m:\n        print('Invalid input, try again')\n        return None\n    \n    # Initialize quotient\n    quotient = n % m\n    \n    # Check if remainder is zero\n    if remainder == 0:\n        print('Invalid input, try again')\n        return None\n    \n    # Check if remainder is not a multiple of two\n    if remainder % 2 == 0:\n        print('Invalid input, try again')\n        return None\n    \n    # Check if quotient is less than or equal to one\n    if quotient == 1:\n        print('Invalid input, try again')\n        return None\n    \n    # Check if quotient is in the form of decimal\n    if quotient.is_integer():\n        print('Invalid input, try again')\n        return None\n    \n    # Check if quotient is in the form of floating point\n    if quotient.is_floating_point():\n        print('Invalid input, try again')\n        return None\n    \n    # Check if quotient is not an integer\n    if quotient.is_integer():\n        print('Invalid input, try again')\n        return None\n    \n    # Return the quotient\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n, m = map(int,str(n).split())\n    if m%2==0:\n        if n%2==0:\n            if n+m==0:\n                return 'NO'\n            else:\n                return n+m\n        else:\n            return 'NO'\n    else:\n        if n+m==0:\n            return 'NO'\n        else:\n            return n+m\nn=int(input())\nm=int(input())\nprint(find(n,m))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    for i in range(m,n+1):\n        quotient = i/2\n        if(abs(quotient-int(quotient))<0.00001):\n            print(quotient)\n            return(quotient)\n    return(None)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    if n<=0 or m<=0:\n        print(\"n/m must be an integer greater than 0.\")\n        return\n    else:\n        return math.floor(n/m)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return int(w/2)*math.sin(math.radians(45))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        w,h = h,w\n    if h<w:\n        return 'Tris not possible'\n    else:\n        h=math.ceil(h/2)\n        return otherside_rightangle(w,h)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return ((math.sqrt((w**2+h**2)-(w*h)))*(2))/((w*h)**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h) - (w/2)*(h/2) - (h/4)*(math.sqrt(2)**3)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = w*h\n    peri = (w*h)/2\n    side1 = math.sqrt(area/peri)\n    side2 = math.sqrt(area/peri)\n    side3 = math.sqrt(area/peri)\n    \n    return side1, side2, side3\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #The third side is calculated by finding the dot product between the unit vectors.\n    #(http://www.softuni.org/systems/analitics/singles/triangle.htm)\n    vector_1 = w*h\n    vector_2 = w*h/2\n    vector_3 = h*h\n    vector_4 = h*w\n    vector_5 = w*h/2\n    #The angle between the two vectors is calculated\n    angle = math.acos(vector_1*vector_2*vector_3 + vector_4*vector_5*vector_1*vector_2 - vector_4*vector_3*vector_5 - vector_2*vector_3*vector_1)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle=math.degrees(math.atan2(w,h))\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        a = w\n        b = h\n        c = a + b\n        return c\n    else:\n        a = h\n        b = a + b\n        c = a + b\n        return c\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    sides = math.sqrt(w*w+h*h)\n    return sides\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # correct the values\n    a = w/2\n    b = h/2\n    c = w*h/2\n    # get the length of triangle\n    l = math.sqrt(a*a + b*b)\n    # get the center of triangle\n    cx = a+b\n    cy = c/2\n    # find the angle\n    angles = math.atan2(cy,l)\n    angles = math.degrees(angles)\n    return angles\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # find the max value in a given list\n    maxval = 0\n    for i in listval:\n        if i > maxval:\n            maxval = i\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        if listval[i] > listval[i + 1]:\n            listval[i], listval[i + 1] = listval[i + 1], listval[i]\n    return listval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for element in listval:\n        if element > maxval:\n            maxval = element\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # find max value in given heterogeneous list\n    l = max(listval)\n    # create new list of all max values\n    newlist = []\n    for i in range(len(listval)):\n        if listval[i] == l:\n            newlist.append(listval[i])\n    return l, newlist\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize sum to 0\n    sum = 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for divisor in range(1, int(number / 2) + 1):\n        if number % divisor == 0:\n            divisors += divisor\n    return divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return number * sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # the function should return a single integer\n    if number < 2:\n        return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 0:\n        raise ValueError\n    s = 0\n    while number % 2 == 0:\n        s += 2\n        number = number / 2\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            result += i\n    return resul"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    if number == 0:\n        return 0\n    for i in range(1, number):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # start at 1, because we want the first number to be 1,\n    # because we want the sum of all divisors of this number to be 0\n    divisors = [1]\n    \n    # while this number is divisible by any number more than 1\n    while number % 2 == 0:\n        divisors.append(2)\n        number /= 2\n        \n    # for any number less than or equal to the next number,\n    # we have to skip that number since it is divisible by two\n    # until it is divisible by exactly one\n    # till it is divisible by another number\n    while number > 1:\n        if number % 2 == 0:\n            divisors.append(3)\n            number /= 2\n        else:\n            divisors.append(2)\n            number = int(number/2)\n            \n    # return the sum of the divisors\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Your code here\n    # Determine if number is an integer\n    # if not, you will need to return \"Please enter a number\".\n    return number % 2 == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inv_count = inv_count + 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)):\n        if (i == 0) or (arr[i-1] < arr[i]):\n            Inv_Count += 1\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        inv_count += arr[i]\n        if arr[i] < inv_count:\n            return inv_count\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    m = len(arr)\n    if m < 2: \n        return 0\n    \n    count = 0\n    pivot = m // 2 \n    for i in range(0, pivot): \n        if arr[i] > arr[pivot]: \n            count += 1 \n            arr[i], arr[pivot] = arr[pivot], arr[i] \n    print(arr)\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    i = 0\n    j = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    if n < 2:\n        return 0\n    \n    # An array has only 1 element\n    if arr[0] > arr[1]:\n        left = arr[0]\n        right = arr[1]\n    else:\n        left = arr[0]\n        right = arr[1]\n        \n    # Store the index of left and right indexes\n    l = 0\n    r = n - 2\n    \n    # Count the number of elements in array left to right\n    # and store in a array\n    count = 0\n    while l < r:\n        if arr[l] > arr[r]:\n            # Set left index\n            if arr[l] < left:\n                left = arr[l]\n            # Set right index\n            if arr[r] > right:\n                right = arr[r]\n            # Update the count\n            count += r - l + 1\n            l += 1\n        else:\n            if arr[l] < right:\n                # Update the right index\n                right = arr[r]\n            # Set left index\n            if arr[l] > left:\n                left = arr[l]\n            # Update the count\n            count += r - l + 1\n            r -= 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # approach 1: sort the array and count inversions\n    # O(n^2)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Code here\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    arr = sorted(arr)\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for x in list1:\n        if isinstance(x, list):\n            flattened.extend(flatten_list(x))\n        else:\n            flattened.append(x)\n    return flattened\n    \ndef is_prime(num):\n    '''\n    Write a function that takes in an integer and returns True if it is a prime number, or False if it is not a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    \n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n        \ndef is_prime_list(list1):\n    '''\n    Write a function that takes in a nested list and returns True if it is a prime list, or False if it is not.\n    '''\n    if len(list1) == 1:\n        return True\n    if is_prime(list1[0]):\n        for x in list1[1:]:\n            if is_prime_list(x):\n                return True\n    return False\n    \ndef is_divisible(number, divisor):\n    '''\n    Write a function that takes in two integers and returns True if the first integer is a divisor of the second integer, or False if it is not.\n    '''\n    if number % divisor == 0:\n        return True\n    return False\n        \ndef is_divisible_list(list1, divisor):\n    '''\n    Write a function that takes in a nested list and returns True if the first element is a divisor of the second element, or False if it is not.\n    '''\n    if len(list1) == 1:\n        return True\n    if is_divisible_list(list1[1:], divisor):\n        return True\n    return False\n    \ndef is_divisible_list_2(list1, divisor):\n    '''\n    Write a function that takes in a nested list and returns True if the first element is a divisor of the second element, or False if it is not.\n    '''\n    if len(list1) == 1:\n        return True\n    if is_divisible_list_2(list1[1:], divisor):\n        return True\n    return False\n    \ndef is_pangram(word):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, or False if not.\n    '''\n    for ch in word:\n        if ch in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\n        \ndef is_pangram_list(list1):\n    '''\n    Write a function that takes in a nested list and returns True if the first element is a pangram, or False if it is not.\n    '''\n    if len(list1) == 1:\n        return True\n    if is_pangram_list(list1[1:]) and is_pangram(list1[0]):\n        return True\n    return False\n    \ndef is_in(word, list1):\n    '''\n    Write a function that takes in a string and returns True if it is contained in the given list, or False if it is not.\n    '''\n    if len(list1) == 0:\n        return False\n    if word in list1:\n        return True\n    else:\n        return is_in(word, list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_to_flatten = []\n    for item in list1:\n        if isinstance(item, list):\n            list_to_flatten.extend(flatten_list(item))\n        else:\n            list_to_flatten.append(item)\n    return list_to_flatten\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list):\n        # If list is only one element\n        if len(list1) == 1:\n            return list1[0]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten_list = []\n    for element in list1:\n        if type(element) == list:\n            flatten_list.extend(flatten_list + element)\n        else:\n            flatten_list.append(element)\n    return flatten_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    for ele in list1:\n        if type(ele) == list:\n            flatten_list(ele)\n        else:\n            list1.append(ele)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in range(len(list1)):\n        if type(list1[i]) is list:\n            list1[i] = flatten_list(list1[i])\n        else:\n            list1[i] = [list1[i]]\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == list:\n        for i in range(len(list1)):\n            if type(list1[i]) == list:\n                list1[i] = flatten_list(list1[i])\n            elif type(list1[i]) == set:\n                list1[i] = flatten_list(list1[i])\n            elif type(list1[i]) == dict:\n                list1[i] = flatten_list(list1[i])\n    return list"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Your code here\n    if len(list1) > 0:\n        list2 = []\n        for i in range(len(list1)):\n            list2.append(list1[i])\n            if len(list1) > 1:\n                list2.append(list1[i])\n        list3 = [list1[0]]\n        for i in range(len(list1) - 1):\n            list3.append(list1[i + 1])\n        list2.append(list3)\n        return list2\n    else:\n        return None\n        \n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    flatten_list = []\n    if len(list1) == 0:\n        return flatten_list\n    \n    for i in list1:\n        if type(i) == list:\n            flatten_list.extend(flatten_list)\n            flatten_list = flatten_list + flatten_list(i)\n        elif type(i) == dict:\n            flatten_list.extend(flatten_list)\n            flatten_list = flatten_list + flatten_list(i)\n        else:\n            flatten_list.append(i)\n    \n    return flatten_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for l in list1:\n        if type(l) is list:\n            flattened_list.extend(flatten_list(l))\n        else:\n            flattened_list.append(l)\n    return flattened_list\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize the aggregate value\n    max_aggregate = 0\n    # initialize the max_aggregate_key\n    max_aggregate_key = None\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = stdata[0]\n    for i in range(len(stdata) - 1):\n        if stdata[i][1] > stdata[i + 1][1]:\n            result = stdata[i + 1]\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    return max(stdata, key=lambda x: x[2])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = -1\n    agg = 0\n    for i in range(len(stdata)):\n        agg = agg + stdata[i][1]\n        if max_agg < agg:\n            max_agg = agg\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Define the default output\n    output = 0\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = 0\n    for key, val in stdata.items():\n        if key in ['count','median','mean']:\n            # calculate max\n            max += val\n            # update\n            stdata[key] = max\n        else:\n            # calculate mean\n            stdata[key] = (val * len(stdata)) / len(stdata)\n    return stdata\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    max_value = stdata[0][1]\n    for row in stdata:\n        if max_value < row[1]:\n            max_value = row[1]\n            max_aggregate_list.append(row)\n    return max_aggregate_list\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # First calculate the max aggregate\n    max_aggregate_list = []\n    for key in stdata:\n        value = stdata[key][0]\n        for i in range(1, len(stdata[key])):\n            value = value + stdata[key][i]\n        max_aggregate_list.append(value)\n    # Second, sort the aggregate\n    aggregate = sorted(max_aggregate_list, reverse=True)\n    # Third, return the max aggregate\n    return aggregate[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregated_st = []\n    for stdata_tuple in stdata:\n        aggregated_st.append(sum(stdata_tuple))\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to count the items in the list\n    dic_items = dict(Counter(stdata))\n    # Create a list of tuples where each tuple is a pair of an item and its count\n    list_items = [tup for tup in stdata]\n    # Initialize the maximum aggregated\n    max_agg = 0\n    # Loop over the items in the dictionary\n    for key, value in dic_items.items():\n        # Add the value of the item to the maximum aggregated\n        max_agg = max(max_agg, value)\n    # Return the maximum aggregated\n    return max_agg\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1: return 1\n    #p=0\n    #for i in range(2,n+1):\n    #    p=p+1\n    #    if (n%2)==0:\n    #        p=p+1\n    #    else:\n    #        p=p-1\n    #    #print(p)\n    #return p\n    #print(n%2)\n    #count=0\n    #n=n+1\n    #p=0\n    #for i in range(n):\n    #    if n%2==0:\n    #        p+=1\n    #    else:\n    #        p-=1\n    #    #print(p)\n    #return p\n    #n=n+1\n    #p=0\n    #for i in range(n):\n    #    if n%2==0:\n    #        p+=1\n    #    else:\n    #        p-=1\n    #    #print(p)\n    #return p\n    \n    d=[0]*n\n    for i in range(2,n+1):\n        d[i]=d[i-2]+1\n    #d[2]=d[2]+1\n    #print(d)\n    \n    for i in range(n):\n        if d[i]==1:\n            print(i)\n            \ncount_binary_seq(1)\ncount_binary_seq(2)\ncount_binary_seq(3)\ncount_binary_seq(4)\ncount_binary_seq(5)\ncount_binary_seq(6)\ncount_binary_seq(7)\ncount_binary_seq(8)\ncount_binary_seq(9)\ncount_binary_seq(10)\ncount_binary_seq(11)\ncount_binary_seq(12)\ncount_binary_seq(13)\ncount_binary_seq(14)\ncount_binary_seq(15)\ncount_binary_seq(16)\ncount_binary_seq(17)\ncount_binary_seq(18)\ncount_binary_seq(19)\ncount_binary_seq(20)\ncount_binary_seq(21)\ncount_binary_seq(22)\ncount_binary_seq(23)\ncount_binary_seq(24)\ncount_binary_seq(25)\ncount_binary_seq(26)\ncount_binary_seq(27)\ncount_binary_seq(28)\ncount_binary_seq(29)\ncount_binary_seq(30)\ncount_binary_seq(31)\ncount_binary_seq(32)\ncount_binary_seq(33)\ncount_binary_seq(34)\ncount_binary_seq(35)\ncount_binary_seq(36)\ncount_binary_seq(37)\ncount_binary_seq(38)\ncount_binary_seq(39)\ncount_binary_seq(40)\ncount_binary_seq(41)\ncount_binary_seq(42)\ncount_binary_seq(43)\ncount_binary_seq(44)\ncount_binary_seq(45)\ncount_binary_seq(46)\ncount_binary_seq(47)\ncount_binary_seq(48)\ncount_binary_seq(49)\ncount_binary_seq(50)\ncount_binary_seq(51)\ncount_binary_seq(52)\ncount_binary_seq(53)\ncount_binary_seq(54)\ncount_binary_seq(55)\ncount_binary_seq(56)\ncount_binary_seq(57)\ncount_binary_seq(58)\ncount_binary_seq(59)\ncount_binary_seq(60)\ncount_binary_seq(61)\ncount_binary_seq(62)\ncount_binary_seq(63)\ncount_binary_seq(64)\ncount_binary_seq(65)\ncount_binary_seq(66)\ncount_binary_seq(67)\ncount_binary_seq(68)\ncount_binary_seq(69)\ncount_binary_seq(70)\ncount_binary_seq(71)\ncount_binary_seq(72)\ncount_binary_seq(73)\ncount_binary_seq(74)\ncount_binary_seq(75)\ncount_binary_seq(76)\ncount_binary_seq(77)\ncount_binary_seq(78)\ncount_binary_seq(79)\ncount_binary_seq(80)\ncount_binary_seq(81)\ncount_binary_seq(82)\ncount_binary_seq(83)\ncount_binary_seq(84)\ncount_binary_seq(85)\ncount_binary_seq(86)\ncount_binary_seq(87)\ncount_binary_seq(88)\ncount_binary_seq(89)\ncount_binary_seq(90)\ncount_binary_seq(91)\ncount_binary_seq(92)\ncount_binary_seq(93)\ncount_binary_seq(94)\ncount_binary_seq(95)\ncount_binary_seq(96)\ncount_binary_seq(97)\ncount_binary_seq(98)\ncount_binary_seq(99)\ncount_binary_seq(100)\ncount_binary_seq(101)\ncount_binary_seq(102)\ncount_binary_seq(103)\ncount_binary_seq(104)\ncount_binary_seq(105)\ncount_binary_seq(106)\ncount_binary_seq(107)\ncount_binary_seq(108)\ncount_binary_seq(109)\ncount_binary_seq(110)\ncount_binary_seq(111)\ncount_binary_seq(112)\ncount_binary_seq(113)\ncount_binary_seq(114)\ncount_binary_seq(115)\ncount_binary_seq(116)\ncount_binary_seq(117)\ncount_binary_seq(118)\ncount_binary_seq(119)\ncount_binary_seq(120)\ncount_binary_seq(121)\ncount_binary_seq(122)\ncount_binary_seq(123)\ncount_binary_seq(124)\ncount_binary_seq(125)\ncount_binary_seq(126)\ncount_binary_seq(127)\ncount_binary_seq(128)\ncount_binary_seq(129)\ncount_binary_seq(130)\ncount_binary_seq(131)\ncount_binary_seq(132)\ncount_binary_seq(133)\ncount_binary_seq(134)\ncount_binary_seq(135)\ncount_binary_seq(136)\ncount_binary_seq(137)\ncount_binary_seq(138)\ncount_binary_seq(139)\ncount_binary_seq(140)\ncount_binary_seq(141)\ncount_binary_seq(142)\ncount_binary_seq(143)\ncount_binary_seq(144)\ncount_binary_seq(145)\ncount_binary_seq(146)\ncount_binary_seq(147)\ncount_binary_seq(148)\ncount_binary_seq(149)\ncount_binary_seq(150)\ncount_binary_seq(151)\ncount_binary_seq(152)\ncount_binary_seq(153)\ncount_binary_seq(154)\ncount_binary_seq(155)\ncount_binary_seq(156)\ncount_binary_seq(157)\ncount_binary_seq(158)\ncount_binary_seq(159)\ncount_binary_seq(160)\ncount_binary_seq(161)\ncount_binary_seq(162)\ncount_binary_seq(163)\ncount_binary_seq(164)\ncount_binary_seq(165)\ncount_binary_seq(166)\ncount_binary_seq(167)\ncount_binary_seq(168)\ncount_binary_seq(169)\ncount_binary_seq(170)\ncount_binary_seq(171)\ncount_binary_seq(172)\ncount_binary_seq(173)\ncount_binary_seq(174)\ncount_binary_seq(175)\ncount_binary_seq(176)\ncount_binary_seq(177)\ncount_binary_seq(178)\ncount_binary_seq(179)\ncount_binary_seq(180)\ncount_binary_seq(181)\ncount_binary_seq(182)\ncount_binary_seq(183)\ncount_binary_seq(184)\ncount_binary_seq(185)\ncount_binar"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # create a binary array with the first 2n bit values \n    # we need the sum of the first 2n bit values and a sum of the last 2n bit values\n    # and add them to the sum\n    binary_arr = []\n    for bit in range(2, n+1, 2):\n        binary_arr.append(bin(bit)[2:].zfill(n))\n    \n    # keep the first 2n bit values in the binary array \n    first_binary_arr = []\n    for bit in binary_arr:\n        first_binary_arr.append(bit[0])\n    \n    # find the sum of the first 2n bit values in the binary array\n    first_sum = 0\n    for bit in first_binary_arr:\n        first_sum += int(bit, 2)\n    \n    # find the sum of the last 2n bit values in the binary array\n    last_binary_arr = []\n    for bit in binary_arr:\n        last_binary_arr.append(bit[-1])\n    \n    # find the sum of the last 2n bit values in the binary array\n    last_sum = 0\n    for bit in last_binary_arr:\n        last_sum += int(bit, 2)\n    \n    # sum of the sum of the first 2n bit values, the last 2n bit values and the sum of the last 2n bit values\n    # are the same\n    return first_sum + last_sum - first_sum\n    \ndef count_binary_seq_faster(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # create a binary array with the first 2n bit values \n    # we need the sum of the first 2n bit values and a sum of the last 2n bit values and add them to the sum\n    binary_arr = []\n    for bit in range(2, n+1, 2):\n        binary_arr.append(bin(bit)[2:].zfill(n))\n    \n    # keep the first 2n bit values in the binary array \n    first_binary_arr = []\n    for bit in binary_arr:\n        first_binary_arr.append(bit[0])\n    \n    # find the sum of the first 2n bit values in the binary array\n    first_sum = 0\n    for bit in first_binary_arr:\n        first_sum += int(bit, 2)\n    \n    # find the sum of the last 2n bit values in the binary array\n    last_binary_arr = []\n    for bit in binary_arr:\n        last_binary_arr.append(bit[-1])\n    \n    # find the sum of the last 2n bit values in the binary array\n    last_sum = 0\n    for bit in last_binary_arr:\n        last_sum += int(bit, 2)\n    \n    # sum of the sum of the first 2n bit values, the last 2n bit values and the sum of the last 2n bit values\n    # are the same\n    return first_sum + last_sum - first_sum\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    while n:\n        n >>= 1\n        count += n\n    return count\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def encode_bits(x, n): \n        a = bin(x & n).replace('0b', '') \n        b = bin(x >> n).replace('0b', '')\n        if len(a) < n: \n            return encode_bits(x, n - len(a)) + a \n        else: \n            return a + b \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**n\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq(n):\n        if n < 2:\n            return n\n        mid = n // 2\n        bit_sum = 0\n        for i in range(1, mid+1):\n            bit_sum += (2**i) * i\n        return bit_sum - n\n    #     start = mid - 2**i\n    #     end = n // 2 + 2**i\n    #     return start + (end-start) * 2**i\n        #     return 2**n * n\n    \n    count = 0\n    for i in range(1, n):\n        count += count_binary_seq(i)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c = 0\n    for i in range(n): \n        a = bin(i).replace('0b','')\n        if (len(a) >= 2):\n            if (sum(a[:2]) == sum(a[-2:])):\n                c += 1\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Step 1: Calculate the sum of first 2n bits\n    total = 0\n    for i in range(0,n):\n        total += pow(2, i)\n    # Step 2: Find the sum of last n bits.\n    last_n_bits = (n-1) & 0xFF\n    return total - pow(2, last_n_bits)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth_check(d):\n        if '_' in d:\n            depth = 0\n            for i in d.keys():\n                if d[i] is None:\n                    depth += 1\n            return depth\n        else:\n            return -1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d, depth = 1):\n        if 'None' in d:\n            return depth\n        for k in d:\n            depth += depth(d[k], depth)\n        return depth\n    return depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        d = d.keys()\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return len(d)\n    return -1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # If the dictionary is empty, return 0.\n    if not d:\n        return 0\n    # Initialize variables to keep track of the length.\n    l = 0\n    # Loop over the keys and values.\n    for k, v in d.items():\n        # If the value of the key is a dictionary.\n        if isinstance(v, dict):\n            # Call the function to recurse on each key in the\n            # value of the dictionary.\n            l = max(l, dict_depth(v))\n        # If the value of the key is a string.\n        else:\n            # If the key is a list, loop through the key in the\n            # list and append the length of the value.\n            if isinstance(k, list):\n                for i in k:\n                    l = max(l, dict_depth(v))\n            # If the key is a dictionary, call the function to recurse\n            # on each key in the value.\n            else:\n                l = max(l, dict_depth(v))\n    # Return the maximum depth.\n    return l + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # define a function that prints the depth of a dictionary\n    def depth(d):\n        depth = 0\n        # iterate through all keys\n        for key in d:\n            # define a function that prints the depth of a dictionary\n            def depth(d):\n                depth = depth + 1\n                # iterate through all values\n                for value in d[key]:\n                    # define a function that prints the depth of a dictionary\n                    def depth(d):\n                        depth = depth + 1\n                        # iterate through all values\n                        for value2 in d[key][value]:\n                            # define a function that prints the depth of a dictionary\n                            def depth(d):\n                                depth = depth + 1\n                                # iterate through all values\n                                for value3 in d[key][value][value2]:\n                                    # define a function that prints the depth of a dictionary\n                                    def depth(d):\n                                        depth = depth + 1\n                                    # iterate through all values\n                                    for value4 in d[key][value][value2][value3]:\n                                        # define a function that prints the depth of a dictionary\n                                        def depth(d):\n                                            depth = depth + 1\n                                        # iterate through all values\n                                        for value5 in d[key][value][value2][value3][value4]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value6 in d[key][value][value2][value3][value4][value5]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value7 in d[key][value][value2][value3][value4][value5][value6]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value8 in d[key][value][value2][value3][value4][value5][value6][value7]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value9 in d[key][value][value2][value3][value4][value5][value6][value7][value8]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value10 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value11 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value12 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value13 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value14 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value15 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value16 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14][value15]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value17 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14][value15][value16]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value18 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14][value15][value16][value17]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value19 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14][value15][value16][value17][value18]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value20 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14][value15][value16][value17][value18][value19]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value21 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14][value15][value16][value17][value18][value19][value20]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value22 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14][value15][value16][value17][value18][value19][value20][value21]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value23 in d[key][value][value2][value3][value4][value5][value6][value7][value8][value9][value10][value11][value12][value13][value14][value15][value16][value17][value18][value19][value20][value21][value22]:\n                                            # define a function that prints the depth of a dictionary\n                                            def depth(d):\n                                                depth = depth + 1\n                                        # iterate through all values\n                                        for value24 in d[key][value][value2][value3][value4][value5][value6][value7][value8][valu"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '_' in d:\n        d = d[:d.find('_')]\n    if d in results:\n        results[d] += 1\n    else:\n        results[d] = 1\n    return results[d]\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) is dict:\n        depth += 1\n    if type(d) is list:\n        depth += 1\n    if type(d) is str:\n        depth += 1\n    if type(d) is bytes:\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == None:\n        return 0\n    else:\n        d = d.items()\n        d = sorted(d, key=lambda x: x[1])\n        d = [i[0] for i in d]\n        return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        raise TypeError('d must be a dictionary')\n    if type(d) is not dict:\n        raise TypeError('d must be a dictionary')\n    if len(d) == 0:\n        raise TypeError('d must not be empty')\n    depth = 0\n    for key in d:\n        depth += 1\n        print('{}:\\t{}'.format(key, d[key]))\n        depth += dict_depth(d[key])\n    return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) > 0 :\n        for i in range(len(ranges)) :\n            if ranges[i][0] <= arr[index] <= ranges[i][1] :\n                index = i\n                break\n        if index == -1 :\n            raise Exception(str(index) + \" is not valid index.\")\n    else :\n        return -1\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(ranges) or rotations < 1 :\n        raise ValueError\n    return arr[ranges[index] + ranges[index-rotations] + 1:ranges[index+1]]\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        ranges[i] = ranges[i][:index] + '*' + ranges[i][index:]\n    \n    return arr[(ranges[0] >= arr) & (ranges[0] <= arr) & (ranges[1] >= arr) & (ranges[1] <= arr)]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Loop till the end of the list\n    for i in range(ranges[index], ranges[index + 1]):\n        # If no element at the index is found then return the index\n        if arr[i]!= i :\n            return i\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    result = arr[index]\n    rotations = rotations -1\n    rotations = rotations % len(arr)\n    if rotations == 0:\n        index = (index + 1) % len(arr)\n        return find_Element(arr,ranges,rotations,index)\n    else :\n        return result\n        \ndef rotate(arr,rotations) : \n    '''\n    Write a python function to rotate a given array.\n    '''\n    result = []\n    for element in arr:\n        result.append(element)\n    for rotate in range(rotations) :\n        for i in range(len(arr)):\n            arr[i] = arr[i] + result[i]\n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr) == 0 :\n        return None\n    if len(arr) == 1 :\n        return arr[0]\n    if index % len(ranges)!=0 :\n        return None\n    index_range = ranges[index]\n    return_index = index + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations_count = rotations\n    return arr[ranges[index][0]:ranges[index][1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index == len(arr) - 1) :\n        return arr[index]\n    else :\n        return find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #find the first and last element in the list and return the index\n    for i in range(ranges[0],ranges[1]):\n        if arr[i] == ranges[2]:\n            index = i\n            break\n    for i in range(ranges[1],ranges[2]):\n        if arr[i] == ranges[3]:\n            index = i\n            break\n    for i in range(ranges[2],ranges[3]):\n        if arr[i] == ranges[4]:\n            index = i\n            break\n    for i in range(ranges[3],ranges[4]):\n        if arr[i] == ranges[5]:\n            index = i\n            break\n    for i in range(ranges[4],ranges[5]):\n        if arr[i] == ranges[6]:\n            index = i\n            break\n    return index\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, 'p'\n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # if the list is empty, return the empty word\n    if len(words) == 0:\n        return (None, None)\n    # if the list is just one word, return the word\n    elif len(words) == 1:\n        return words\n    # if there are two words, return one word with p\n    elif len(words) == 2:\n        return (words[0], words[1])\n    else:\n        # if the word has more than two letters, find the word with the most words\n        word_list = []\n        for word in words:\n            if len(word) > len(set(word)):\n                word_list.append(word)\n        return (word_list[0], word_list[1])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if(words[0] == 'p'):\n        words = words[1:]\n        return start_withp(words)\n    else:\n        return words\n    \ndef start_withs(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    if(words[0] =='s'):\n        words = words[1:]\n        return start_withs(words)\n    else:\n        return words\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [w for w in words if w[0] == 'p'][:2]\n    \ndef lemmatize(words):\n    '''\n    Write a function to return a list of words with a single letter after the first letter.\n    '''\n    return [w for w in words if w[0]!= 'p' and w[1]!= 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if(words == []):\n        return False\n    else:\n        first = words[0][0:1]\n        if(first == 'p'):\n            return True, words[0]\n        else:\n            for i in range(1,len(words)):\n                if(words[i][0:1] == 'p'):\n                    if(words[i] == words[i-1]):\n                        return True, words[i]\n            return False, words[0]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for w in words:\n        if w[0]=='p':\n            return w[1:]\ndef endingp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    for w in words:\n        if w[-1]=='p':\n            return w[:-1]\ndef not_p(words):\n    '''\n    Write a function to return a list of words from a list of words that does not start with 'p'.\n    '''\n    for w in words:\n        if w[1]!='p':\n            return w[2:]\ndef startswith_p(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'p'\n    '''\n    for w in words:\n        if w[0]=='p':\n            return w[1:]\ndef endswith_p(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'p'.\n    '''\n    for w in words:\n        if w[-1]=='p':\n            return w[:-1]\ndef notendswith_p(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'p'.\n    '''\n    for w in words:\n        if w[-1]!='p':\n            return w[:-1]\ndef startswith_n(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'n'\n    '''\n    for w in words:\n        if w[0]=='n':\n            return w[1:]\ndef endswith_n(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'n'.\n    '''\n    for w in words:\n        if w[-1]=='n':\n            return w[:-1]\ndef notendswith_n(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'n'.\n    '''\n    for w in words:\n        if w[-1]!='n':\n            return w[:-1]\ndef startswith_l(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'l'\n    '''\n    for w in words:\n        if w[0]=='l':\n            return w[1:]\ndef endswith_l(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'l'.\n    '''\n    for w in words:\n        if w[-1]=='l':\n            return w[:-1]\ndef notendswith_l(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'l'.\n    '''\n    for w in words:\n        if w[-1]!='l':\n            return w[:-1]\ndef startswith_q(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'q'\n    '''\n    for w in words:\n        if w[0]=='q':\n            return w[1:]\ndef endswith_q(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'q'.\n    '''\n    for w in words:\n        if w[-1]=='q':\n            return w[:-1]\ndef notendswith_q(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'q'.\n    '''\n    for w in words:\n        if w[-1]!='q':\n            return w[:-1]\ndef startswith_z(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'z'\n    '''\n    for w in words:\n        if w[0]=='z':\n            return w[1:]\ndef endswith_z(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'z'.\n    '''\n    for w in words:\n        if w[-1]=='z':\n            return w[:-1]\ndef notendswith_z(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'z'.\n    '''\n    for w in words:\n        if w[-1]!='z':\n            return w[:-1]\ndef startswith_x(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'x'\n    '''\n    for w in words:\n        if w[0]=='x':\n            return w[1:]\ndef endswith_x(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'x'.\n    '''\n    for w in words:\n        if w[-1]=='x':\n            return w[:-1]\ndef notendswith_x(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'x'.\n    '''\n    for w in words:\n        if w[-1]!='x':\n            return w[:-1]\ndef startswith_c(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'c'\n    '''\n    for w in words:\n        if w[0]=='c':\n            return w[1:]\ndef endswith_c(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'c'.\n    '''\n    for w in words:\n        if w[-1]=='c':\n            return w[:-1]\ndef notendswith_c(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'c'.\n    '''\n    for w in words:\n        if w[-1]!='c':\n            return w[:-1]\ndef startswith_y(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'y'\n    '''\n    for w in words:\n        if w[0]=='y':\n            return w[1:]\ndef endswith_y(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'y'.\n    '''\n    for w in words:\n        if w[-1]=='y':\n            return w[:-1]\ndef notendswith_y(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'y'.\n    '''\n    for w in words:\n        if w[-1]!='y':\n            return w[:-1]\ndef startswith_i(words):\n    '''\n    Write a function to return a list of words from a list of words that have a start with letter 'i'\n    '''\n    for w in words:\n        if w[0]=='i':\n            return w[1:]\ndef endswith_i(words):\n    '''\n    Write a function to return a list of words from a list of words that has an end with letter 'i'.\n    '''\n    for w in words:\n        if w[-1]=='i':\n            return w[:-1]\ndef notendswith_i(words):\n    '''\n    Write a function to return a list of words from a list of words that does not end with 'i'.\n    '''\n    for w in words:\n        if w[-1]!='i':\n            return w[:-1]\ndef startswith_o(words):\n    '"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i = 0\n    while i < len(words):\n        if words[i][0] == 'p':\n            return words[i], words[i + 1]\n        else:\n            i += 1\n    return words[0], None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # First word is always the starting word \n    firstword= words[0]\n    # Second word is always the last word\n    lastword= words[len(words)-1]\n    # Loop over the words\n    for word in words:\n        # If the first word is not the starting word and the last word is not the last word\n        # then continue to the next word in the list\n        if not word == firstword and not word == lastword:\n            return word\n    \n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split()\n    return words[0] + words[1][1:]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        if index == 0:\n            return a[n-1]\n        return max(a[index], a[index+k]) + max_sum_increasing_subseq(a, n, index+1, k-1)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index] > k:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[index]\n    elif index == n:\n        return sum(a[index:])\n    else:\n        if k == 0:\n            return max(a[index:]) + max_sum_increasing_subseq(a, n-1, index+1, k)\n        else:\n            return a[index] + max_sum_increasing_subseq(a, n-1, index+1, k-1)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return sum(a[index:])\n    \n    if k == 1:\n        return max(a[index], a[index+k])\n    \n    return max(max_sum_increasing_subseq(a, n, index+k, k-1),\n                min(max_sum_increasing_subseq(a, n, index+k, k),\n                    max_sum_increasing_subseq(a, n, index+k-1, k-1)))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    a = [i for i in range(n)]\n    previous = a[index]\n    for i in range(index, n):\n        if a[i] - previous > k:\n            break\n        a[i] = a[i] - previous\n    return sum(a) + max(previous, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    l = 0\n    r = 0\n    if k < n:\n        return -1\n    while index < n:\n        if a[index] > a[index+k]:\n            a[index], a[index+k] = a[index+k], a[index]\n            l += 1\n            r += 1\n        index += 1\n    return (l, r)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return max_sum_increasing_subseq(a, n, index, k)\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    elif index == k:\n        return a[index]\n    else:\n        return max(a[index], a[index]+max_sum_increasing_subseq(a, n, index+1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # import all the classes\n    import sys\n    import os\n    dir_path = os.path.dirname(os.path.realpath(__file__))\n    sys.path.append(dir_path)\n    from heaps import Heap, Iterative\n    from heaps_stack import HeapStack\n    from binary_search_tree import BinarySearchTree\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == 0:\n        return tuplex\n    elif n < 0:\n        return colon_tuplex((tuplex[0],tuplex[-1]),m,n+1)\n    else:\n        return colon_tuplex((tuplex[0],tuplex[1]),m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    # print(tuplex)\n    i = 0\n    while i < m:\n        j = 0\n        while j < n:\n            tuplex_copy[i][j] = tuplex[i][j] + tuplex[i][j+1]\n            j = j + 2\n        i = i + 1\n    return tuplex_copy\ndef xor_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to get a xor of two tuples.\n    '''\n    tuplex_copy = deepcopy(tuplex1)\n    # print(tuplex1)\n    i = 0\n    j = 0\n    while i < len(tuplex1) and j < len(tuplex2):\n        # print(tuplex1[i],tuplex2[j])\n        tuplex_copy[i][j] = (tuplex1[i][j]^tuplex2[j])\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef zxor_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to get a zxor of two tuples.\n    '''\n    tuplex_copy = deepcopy(tuplex1)\n    # print(tuplex1)\n    i = 0\n    j = 0\n    while i < len(tuplex1) and j < len(tuplex2):\n        # print(tuplex1[i],tuplex2[j])\n        tuplex_copy[i][j] = (tuplex1[i][j]^tuplex2[j])\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef rot_tuplex(tuplex):\n    '''\n    Write a function to get a rot of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    # print(tuplex)\n    i = 0\n    j = 0\n    while i < len(tuplex) and j < len(tuplex):\n        # print(tuplex[i],tuplex[j])\n        tuplex_copy[i][j],tuplex_copy[j][i] = tuplex_copy[j][i],tuplex_copy[i][j]\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef drot_tuplex(tuplex):\n    '''\n    Write a function to get a drot of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    # print(tuplex)\n    i = 0\n    j = 0\n    while i < len(tuplex) and j < len(tuplex):\n        # print(tuplex[i],tuplex[j])\n        tuplex_copy[i][j],tuplex_copy[j][i] = tuplex_copy[j][i],tuplex_copy[i][j]\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef rotr_tuplex(tuplex):\n    '''\n    Write a function to get a rot of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    # print(tuplex)\n    i = 0\n    j = 0\n    while i < len(tuplex) and j < len(tuplex):\n        # print(tuplex[i],tuplex[j])\n        tuplex_copy[i][j],tuplex_copy[j][i] = tuplex_copy[j][i],tuplex_copy[i][j]\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef drot_tuplex(tuplex):\n    '''\n    Write a function to get a drot of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    # print(tuplex)\n    i = 0\n    j = 0\n    while i < len(tuplex) and j < len(tuplex):\n        # print(tuplex[i],tuplex[j])\n        tuplex_copy[i][j],tuplex_copy[j][i] = tuplex_copy[j][i],tuplex_copy[i][j]\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef drotr_tuplex(tuplex):\n    '''\n    Write a function to get a drot of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    # print(tuplex)\n    i = 0\n    j = 0\n    while i < len(tuplex) and j < len(tuplex):\n        # print(tuplex[i],tuplex[j])\n        tuplex_copy[i][j],tuplex_copy[j][i] = tuplex_copy[j][i],tuplex_copy[i][j]\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef xor_tuplex_copy(tuplex_copy):\n    '''\n    Write a function to get a xor of two tuples.\n    '''\n    i = 0\n    j = 0\n    while i < len(tuplex_copy) and j < len(tuplex_copy):\n        # print(tuplex_copy[i],tuplex_copy[j])\n        tuplex_copy[i][j] = tuplex_copy[i][j]^tuplex_copy[i][j+1]\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef zxor_tuplex_copy(tuplex_copy):\n    '''\n    Write a function to get a zxor of two tuples.\n    '''\n    i = 0\n    j = 0\n    while i < len(tuplex_copy) and j < len(tuplex_copy):\n        # print(tuplex_copy[i],tuplex_copy[j])\n        tuplex_copy[i][j] = tuplex_copy[i][j]^tuplex_copy[i][j+1]\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef rot_tuplex_copy(tuplex_copy):\n    '''\n    Write a function to get a rot of a tuple.\n    '''\n    i = 0\n    j = 0\n    while i < len(tuplex_copy) and j < len(tuplex_copy):\n        # print(tuplex_copy[i],tuplex_copy[j])\n        tuplex_copy[i][j],tuplex_copy[j][i] = tuplex_copy[j][i],tuplex_copy[i][j]\n        i = i + 1\n        j = j + 1\n    # print(tuplex_copy)\n    return tuplex_copy\ndef drot_tuplex_copy(tuplex_copy):\n    '''\n    Write a function to get a drot of a tuple.\n    '''\n    i = 0\n    j = 0\n    while i < len(tuplex_copy) and j < len(tuplex_copy):\n        # print(tuplex_copy[i],tuplex_copy[j])\n        tuplex_copy[i][j],tuplex_copy[j][i] = tuplex_copy[j][i],tuplex"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = 0\n    for i in range(len(tuplex)):\n        c += m[i]\n    c += n\n    return c\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # itertools.chain\n    m_a, n_a, m_b, n_b = map(int,m[1:])\n    tuplex_a = deepcopy(tuplex)\n    tuplex_a[1] = tuplex_a[1][m_a:]\n    tuplex_b = deepcopy(tuplex)\n    tuplex_b[1] = tuplex_b[1][n_a:]\n    tuplex_a.append(tuplex_b)\n    return tuplex_a\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    while len(tuplex)<m:\n        tuplex.append(n)\n    return tuplex\ndef c_tuple(tuplex):\n    '''\n    Write a function to get the tuple.\n    '''\n    return tuple(tuplex)\ndef calc_tuple(tuplex,s,i,m,n):\n    '''\n    Write a function to calculate the sum of a tuple.\n    '''\n    while len(tuplex)<m:\n        tuplex.append(n)\n    while len(tuplex)<m:\n        tuplex.append(s)\n    return tuplex\ndef sort_tuple(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]<tuplex[i+1]:\n            tuplex[i],tuplex[i+1]=tuplex[i+1],tuplex[i]\n            i+=1\n    return tuplex\ndef min_tuple(tuplex):\n    '''\n    Write a function to get the smallest tuple.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]<tuplex[i+1]:\n            tuplex[i],tuplex[i+1]=tuplex[i+1],tuplex[i]\n            i+=1\n    return tuplex\ndef max_tuple(tuplex):\n    '''\n    Write a function to get the largest tuple.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]>tuplex[i+1]:\n            tuplex[i],tuplex[i+1]=tuplex[i+1],tuplex[i]\n            i+=1\n    return tuplex\ndef mul_tuple(tuplex):\n    '''\n    Write a function to get a product of a tuple.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=0:\n            tuplex[i]*=tuplex[i]\n        i+=1\n    return tuplex\ndef add_tuple(tuplex,num):\n    '''\n    Write a function to add a number in a tuple.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=num:\n            tuplex[i]=num\n            i+=1\n    return tuplex\ndef sum_tuple(tuplex,s,i,m,n):\n    '''\n    Write a function to get the sum of a tuple.\n    '''\n    while len(tuplex)<m:\n        tuplex.append(n)\n    while len(tuplex)<m:\n        tuplex.append(s)\n    return tuplex\ndef prod_tuple(tuplex,p,i,m,n):\n    '''\n    Write a function to get the product of a tuple.\n    '''\n    while len(tuplex)<m:\n        tuplex.append(p)\n    while len(tuplex)<m:\n        tuplex.append(n)\n    return tuplex\ndef divide_tuple(tuplex,d):\n    '''\n    Write a function to divide a tuple.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]<tuplex[i+1]:\n            tuplex[i],tuplex[i+1]=tuplex[i+1],tuplex[i]\n            i+=1\n    return tuplex\ndef rang_tuple(tuplex,s,i,m,n):\n    '''\n    Write a function to get the smallest, greatest and largest tuples.\n    '''\n    while len(tuplex)>i:\n        if tuplex[i]<s or tuplex[i]>s:\n            tuplex[i],tuplex[i+1]=tuplex[i+1],tuplex[i]\n            i+=1\n    while len(tuplex)>i:\n        if tuplex[i]>s and tuplex[i]<s:\n            tuplex[i],tuplex[i+1]=tuplex[i+1],tuplex[i]\n            i+=1\n    while len(tuplex)>i:\n        if tuplex[i]>s:\n            tuplex[i],tuplex[i+1]=tuplex[i+1],tuplex[i]\n            i+=1\n    return tuplex\ndef bs_tuple(tuplex):\n    '''\n    Write a function to get a tuple with a break statement.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]==0:\n            tuplex[i]+=tuplex[i+1]\n            tuplex[i+1]=0\n            i+=2\n        else:\n            tuplex[i]+=tuplex[i+1]\n            tuplex[i+1]=0\n            i+=2\n    return tuplex\ndef mul_tuple_bs(tuplex,s):\n    '''\n    Write a function to get a tuple with a mulitplication of a tuple.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=0:\n            tuplex[i]*=s\n        i+=1\n    return tuplex\ndef div_tuple_bs(tuplex,p):\n    '''\n    Write a function to get a tuple with a divide.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=0:\n            tuplex[i]/=p\n        i+=1\n    return tuplex\ndef div_tuple_bs_s(tuplex,d):\n    '''\n    Write a function to get a tuple with a divide by a number.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=0:\n            tuplex[i]/=d\n        i+=1\n    return tuplex\ndef sub_tuple_bs(tuplex,s):\n    '''\n    Write a function to get a tuple with a subtraction of a tuple.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=0:\n            tuplex[i]-=s\n        i+=1\n    return tuplex\ndef add_tuple_bs(tuplex,num):\n    '''\n    Write a function to get a tuple with a add.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=num:\n            tuplex[i]=num\n            i+=1\n    return tuplex\ndef sub_tuple_bs_s(tuplex,num):\n    '''\n    Write a function to get a tuple with a subtraction by a number.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=num:\n            tuplex[i]-=num\n        i+=1\n    return tuplex\ndef add_tuple_bs_s(tuplex,num):\n    '''\n    Write a function to get a tuple with a add by a number.\n    '''\n    i=0\n    while len(tuplex)>i:\n        if tuplex[i]!=num:\n            tuplex[i]=num\n            i+=1\n    return tuplex\ndef scale_tuple(tuplex,s):\n    '''\n    Write a function to get a tuple with a multiplication by a number.\n    '''\n    i=0\n    while len(tuplex)>i"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if m==i:\n            for j in range(len(tuplex[i])):\n                if n==j:\n                    return tuplex[i][j]\n    return \"0\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if not m or not n or (len(tuplex) % 2 == 1):\n        return None\n    \n    colon = [[] for i in range(len(tuplex))]\n    for i in range(len(tuplex) / 2):\n        colon[i] = tuplex[i * 2] + tuplex[i * 2 + 1]\n    \n    return colon\n    \ndef split_tuplex(tuplex,m,n):\n    '''\n    Write a function that takes a tuple and returns a list.\n    '''\n    if not m or not n or (len(tuplex) % 2 == 1):\n        return None\n    \n    list_ = [[] for i in range(len(tuplex))]\n    for i in range(len(tuplex) / 2):\n        list_[i] = tuplex[i * 2] + tuplex[i * 2 + 1]\n    \n    return list_\n    \ndef sum_list(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the sum of their elements.\n    '''\n    sum = 0\n    for i in range(len(list_1)):\n        sum = sum + list_1[i] + list_2[i]\n    \n    return sum\n    \ndef calc_sum(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the sum of their elements.\n    '''\n    sum = 0\n    for i in range(len(list_1)):\n        sum = sum + list_1[i] + list_2[i]\n    \n    return sum\n    \ndef min_list(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the minimum of their elements.\n    '''\n    if list_1 == list_2:\n        return list_1[0]\n    \n    min_val = list_1[0]\n    min_index = 0\n    for i in range(len(list_1)):\n        if list_1[i] < list_2[i]:\n            min_val = list_1[i]\n            min_index = i\n            \n    return min_val + min_list(list_1[min_index+1:],list_2)\n    \ndef merge_list(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the merged list.\n    '''\n    if list_1 == list_2:\n        return list_1\n    \n    merged_list = []\n    for i in range(len(list_1)):\n        merged_list.append(list_1[i])\n        merged_list.append(list_2[i])\n        \n    return merged_list\n    \ndef separate_list(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the separate list.\n    '''\n    if list_1 == list_2:\n        return list_1\n    \n    separate_list = []\n    for i in range(len(list_1)):\n        separate_list.append(list_1[i])\n        separate_list.append(list_2[i])\n        \n    return separate_list\n    \ndef diff_list(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the difference of their elements.\n    '''\n    difference = 0\n    for i in range(len(list_1)):\n        difference = difference + list_1[i] - list_2[i]\n    \n    return difference\n    \ndef sub_list(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the difference of their elements.\n    '''\n    sub_list = []\n    for i in range(len(list_1)):\n        sub_list.append(list_1[i])\n        sub_list.append(list_2[i])\n        \n    return sub_list\n    \ndef dict_hash_function(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the hash of their elements.\n    '''\n    return tuple(sorted(list_1)) + tuple(sorted(list_2))\n    \ndef test_merge_list():\n    '''\n    Write a function that takes a list, and returns a list of the same length with the same data.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return list_1 + list_2\n    \ndef test_split_tuplex():\n    '''\n    Write a function that takes a tuple and returns a list.\n    '''\n    tuplex = (1,2,3)\n    list_1 = split_tuplex(tuplex,1,1)\n    \n    list_2 = (4,5,6)\n    list_3 = split_tuplex(tuplex,1,1)\n    \n    return list_1 + list_2 + list_3\n    \ndef test_colon_tuplex():\n    '''\n    Write a function that takes a tuple and returns a list.\n    '''\n    tuplex = (1,2,3)\n    colon_tuplex = colon_tuplex(tuplex,2,2)\n    \n    list_1 = split_tuplex(tuplex,1,1)\n    list_2 = split_tuplex(tuplex,1,1)\n    \n    return list_1 + colon_tuplex + list_2\n    \ndef test_split_list():\n    '''\n    Write a function that takes a list and returns a list of the same length with the same data.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return list_1 + list_2\n    \ndef test_sum_list():\n    '''\n    Write a function that takes a list and returns the sum of their elements.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return sum_list(list_1,list_2)\n    \ndef test_min_list():\n    '''\n    Write a function that takes a list and returns the minimum of their elements.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return min_list(list_1,list_2)\n    \ndef test_merge_list():\n    '''\n    Write a function that takes a list and returns a list of the same length with the same data.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return list_1 + list_2\n    \ndef test_separate_list():\n    '''\n    Write a function that takes a list and returns a list of the same length with the same data.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return separate_list(list_1,list_2)\n    \ndef test_diff_list():\n    '''\n    Write a function that takes a list and returns the difference of their elements.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return diff_list(list_1,list_2)\n    \ndef test_sub_list():\n    '''\n    Write a function that takes a list and returns the difference of their elements.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return sub_list(list_1,list_2)\n    \ndef test_dict_hash_function():\n    '''\n    Write a function that takes a list and returns a list of the same length with the same data.\n    '''\n    list_1 = [1,2,3]\n    list_2 = [4,5,6]\n    \n    return dict_hash_functio"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n==0:\n        m=len(tuplex)\n        n=len(m[0])\n        \n    if n>1:\n        print(len(m),len(tuplex),n)\n        return -1\n        \n    if tuplex==m[0]:\n        return 0\n        \n    for i in range(len(tuplex)):\n        if n==len(m[i]):\n            return i\n            break\n        \n    m=m[0]\n    n=n[0]\n    if m==n:\n        n=0\n        \n    for i in range(n,len(tuplex),n):\n        if tuplex[i]!=m[i]:\n            return -1\n    \n    return 0\n        "
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    return tuplex[0][0][m][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def check_matrix(a,m,n):\n        '''\n        Return True if the first row of the matrix is equal to the second row.\n        '''\n        if len(a)!= m:\n            return False\n        else:\n            if a[0]!= a[m-1]:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #index by 1 to make the lists with positive indexes\n    index = [0 for i in range(len(nums1))]\n    index[0] = 1\n    index[-1] = -1\n    \n    #initialise the lists\n    l, r = [], []\n    \n    #check if list is equal to nums2\n    if len(nums2)!= len(nums1):\n        return \"Elements not equal\"\n    \n    #calculate the product using the following function\n    def product(nums, index):\n        \n        #if the number of index is less than 2, return the product of the remaining factors\n        if len(index) < 2:\n            return nums[index[0]] * product(nums, index[1:])\n        \n        #go through the factors\n        for i in range(len(index)):\n            #if the index is positive and the factors are equal to nums[index[i]], combine the product\n            if index[i] > 0 and nums[index[i]] == nums[index[i]-1]:\n                #update the product\n                product[index[i]] *= nums[index[i]-1]\n            \n            #if the index is negative and the factors are equal to nums[index[i]], combine the product\n            elif index[i] < 0 and nums[index[i]] == nums[index[i]+1]:\n                #update the product\n                product[index[i]] *= nums[index[i]+1]\n        \n        #return product\n        return product[0]\n    \n    #find the product of two lists\n    product = product(nums1, index)\n    \n    #check if the product is equal to one of the products of the lists\n    if product == nums2[0]:\n        return nums2[0]\n    \n    #find the index where the product is equal to the product of the lists\n    for i in range(1, N):\n        if product == nums1[i]*product:\n            return nums2[i-1]\n    \n    #return the product of the lists\n    return product\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # get length of all lists\n    l = len(nums1)\n    r = len(nums2)\n    # print(l, r)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factors = []\n    n = N\n    \n    # Find the largest product for each nums1 and nums2\n    for num in nums1:\n        prod = 1\n        for i in range(n):\n            if num * i > nums2[i]:\n                prod *= nums2[i]\n            else:\n                prod *= nums1[i]\n        factors.append(prod)\n    \n    # Return the number of largest products\n    return max(factors)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lengths of two lists must be equal\")\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import math\n    if N < 1:\n        return\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    for i in range(N):\n        nums1[i], nums2[i] = nums2[i], nums1[i]\n    l, r = 0, N\n    while l < r:\n        m = (l + r) // 2\n        if nums1[m] < nums2[m]:\n            l = m + 1\n        else:\n            r = m\n    return nums1[l] * nums2[l] * nums1[r] * nums2[r]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 1:\n        return nums1, nums2\n    else:\n        m = 1\n        m_nums1, m_nums2 = nums1, nums2\n        while N > m:\n            m_nums1, m_nums2 = nums2, m_nums1\n            N -= m\n        if len(nums1) < len(nums2):\n            m_nums1, m_nums2 = m_nums2, m_nums1\n            N -= m\n        elif len(nums1) > len(nums2):\n            m_nums1, m_nums2 = m_nums1, m_nums2\n            N -= m\n        else:\n            print(\"Array are both non-negative and non-monotonic.\")\n        ans1 = large_product(m_nums1, m_nums2, N - 1)\n        ans2 = large_product(m_nums1, m_nums2, N)\n        return ans1[0]*ans2[0], ans1[1]*ans2[1]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # If we know the product of each list, then we can save the largest product to a variable\n    # And we can return it\n    \n    # Two for loops to traverse all the lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # If we find a list item that is greater than the previous item\n            # Then we can increase the product by 1\n            # If we find a list item that is less than the previous item\n            # Then we can decrease the product by 1\n            if nums1[i] > nums2[j]:\n                # We can save the largest product using this condition\n                if i == j:\n                    # If this is the first list item, then we will have nums1[i] * nums2[i]\n                    product = nums1[i] * nums2[j]\n                else:\n                    # If this is not the first list item, then we will have nums1[j] * nums2[i]\n                    product = nums1[i] * nums2[j]\n                # We can save the product from the above condition\n                return product\n            # If this is not the first list item, then we will have nums1[i] * nums2[j]\n            # then we will have nums1[j] * nums2[i]\n            else:\n                product = nums1[i] * nums2[j]\n                return product\n    # If we get here, then all of the lists are equal\n    return 0"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    k = 0\n    for i in range(N):\n        if nums1[i]>nums2[i]:\n            k = k +1\n    return k\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # TODO: Write your code here\n    nums1_sorted_by_size = sorted(nums1, reverse=True)\n    nums2_sorted_by_size = sorted(nums2, reverse=True)\n    \n    for i in range(N):\n        for j in range(N):\n            if nums1_sorted_by_size[j] > nums2_sorted_by_size[i]:\n                nums1_sorted_by_size[i], nums2_sorted_by_size[j] = nums2_sorted_by_size[j], nums1_sorted_by_size[i]\n    \n    for i in range(N):\n        if nums1[i] > nums2[i]:\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from itertools import combinations\n    \n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        maximum = a\n    else:\n        maximum = b\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\nprint(maximum(5,10)"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    if b>a:\n        return b\n    if a==b:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return a\n    # a = float(input(\"Enter first number: \"))\n    # b = float(input(\"Enter second number: \"))\n    # if a>b:\n    #     return a\n    # elif b>a:\n    #     return b\n    # else:\n    #     return a\n    # return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if (a>b):\n        a,b = b,a\n        \n    return a\n    \nprint(maximum(12,1))\nprint(maximum(5,9))\nprint(maximum(2,4))\nprint(maximum(3,3))\nprint(maximum(7,10))\nprint(maximum(2,4))\nprint(maximum(3,9))\nprint(maximum(9,10))\nprint(maximum(10,9)"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # YOUR CODE HERE\n    a = []\n    temp = []\n    temp2 = []\n    for i in str1:\n        if i in temp:\n            continue\n        else:\n            temp.append(i)\n    for i in range(len(temp)):\n        temp2.append(temp[i])\n    return temp2\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    a = []\n    for x in str1:\n        a.append(x)\n    return tuple(a)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if not str1:\n        return ()\n    else:\n        return tuple(map(int,str1.split()))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code goes here\n    import string\n    return tuple(string.ascii_lowercase)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = ()\n    for i in str1:\n        tuple1 += (i,)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if type(str1)!= str:\n        raise TypeError(\"The string argument must be a string\")\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    print('this is a function')\n    print(str1)\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #This takes as input a string and returns a tuple of characters\n    def convert(str1):\n        return tuple(str1.split())\n    return convert(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0xFFFFFFFFL: \n        return 0xFFFFFFFFL\n    else: \n        return n & 0xFFFFFFFFL\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (1 << n.bit_length()) - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    s = bin(n)\n    s = s[2:]\n    n = int(s, 2)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    unset = ~(1<<n)\n    return unset\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    s = bin(n) \n    l = s[2:len(s)-1] #list\n    for i in range(len(l)):\n        if (l[i] == '1'):\n            l[i] = '0'\n        else:\n            l[i] = '1'\n    return int(''.join(l), 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    ## your code here\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert type(n) == int\n    assert n >= 0\n    assert n <= 2**32\n    assert n & 1 == 0\n    assert n & n == 0\n    \n    return n\n    \ndef get_left_most_unset_bit(n): \n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    assert type(n) == int\n    assert n >= 0\n    assert n <= 2**32\n    assert n & 1 == 1\n    assert n & n == 1\n    \n    return n\n    \ndef read_from_file(f): \n    '''\n    Read the content of a file. \n    '''\n    assert type(f) == str\n    assert f.endswith(\".bin\")\n    \n    return file_to_bytes(f)\n    \ndef file_to_bytes(f): \n    '''\n    Read the file content. \n    '''\n    with open(f, 'rb') as f: \n        assert type(f) == io.BufferedReader\n        data = f.read()\n        \n    return data\n    \ndef encrypt(msg, key): \n    '''\n    Encrypt a string. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_bytes(msg, key)\n    \ndef decrypt(enc_msg, key): \n    '''\n    Decrypt a string. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_bytes(enc_msg, key)\n    \ndef encrypt_bytes(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == bytes\n    assert type(key) == int\n    \n    return encrypt_bit(msg, key)\n    \ndef decrypt_bytes(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_bit(enc_msg, key)\n    \ndef encrypt_bit(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_byte(msg, key)\n    \ndef decrypt_bit(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_byte(enc_msg, key)\n    \ndef encrypt_byte(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_byte_by_word(msg, key)\n    \ndef decrypt_byte(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_byte_by_word(enc_msg, key)\n    \ndef encrypt_byte_by_word(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_byte_by_word_by_word(msg, key)\n    \ndef decrypt_byte_by_word(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_byte_by_word_by_word(enc_msg, key)\n    \ndef encrypt_byte_by_word_by_word(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_byte_by_word_by_word_by_word(msg, key)\n    \ndef decrypt_byte_by_word_by_word(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_byte_by_word_by_word_by_word(enc_msg, key)\n    \ndef encrypt_byte_by_word_by_word_by_word(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_byte_by_word_by_word_by_word(msg, key)\n    \ndef decrypt_byte_by_word_by_word_by_word(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_byte_by_word_by_word_by_word(enc_msg, key)\n    \ndef encrypt_bit_by_word(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_bit_by_word(msg, key)\n    \ndef decrypt_bit_by_word(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_bit_by_word(enc_msg, key)\n    \ndef encrypt_bit_by_word_by_word(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_bit_by_word_by_word(msg, key)\n    \ndef decrypt_bit_by_word_by_word(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_bit_by_word_by_word(enc_msg, key)\n    \ndef encrypt_byte_by_word_by_word(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_byte_by_word_by_word(msg, key)\n    \ndef decrypt_byte_by_word_by_word(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_byte_by_word_by_word(enc_msg, key)\n    \ndef encrypt_byte_by_word_by_word_by_word(msg, key): \n    '''\n    Encrypt a message using the given key. \n    '''\n    assert type(msg) == str\n    assert type(key) == int\n    \n    return encrypt_byte_by_word_by_word_by_word(msg, key)\n    \ndef decrypt_byte_by_word_by_word_by_word(enc_msg, key): \n    '''\n    Decrypt a message using the given key. \n    '''\n    assert type(enc_msg) == bytes\n    assert type(key) == int\n    \n    return decrypt_byte_by_word_by_word_by_word(enc_msg, key)\n    \ndef decrypt_bit_by_word_by_word_by_word(msg, key): \n    '''\n    Decrypt "
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & -n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #print \"set_left_most_unset_bit(%d)\" % n\n    set_bit = (1 << n) - 1\n    return set_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # n is a number.\n    # return the number after setting the leftmost unset bit.\n    if n > 0:\n        return n - 1\n    else:\n        return n\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r <= 0 or h <= 0:\n        raise ValueError('Radius and height must be positive')\n    volume = 4 * (math.pi * (r**2))\n    volume = (volume * (h**3)) / 3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if r <= 0:\n        raise ValueError('Radius must be positive')\n    volume = math.pi * (r**2)\n    volume = (volume * h)\n    return volume\ndef volumn_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        volume = a * b\n        return volume\n    else:\n        raise ValueError('a and b must be positive')\ndef volumn_triangle(a,b):\n    '''\n    Write a function that calculates the volume of a triangle.\n    '''\n    if a > 0 and b > 0 and a <= b:\n        volume = a * b\n        return volume\n    else:\n        raise ValueError('a and b must be positive')\ndef area_of_square(a,b):\n    '''\n    Write a function that calculates the area of a square.\n    '''\n    if a > 0 and b > 0:\n        return a * b\n    else:\n        raise ValueError('a and b must be positive')\ndef area_of_rectangle(a,b):\n    '''\n    Write a function that calculates the area of a rectangle.\n    '''\n    if a > 0 and b > 0:\n        return (a*b)/2\n    else:\n        raise ValueError('a and b must be positive')\ndef area_of_circle(r):\n    '''\n    Write a function that calculates the area of a circle.\n    '''\n    pi = 3.14159\n    return pi * (r**2)\ndef area_of_cylinder(r,h):\n    '''\n    Write a function that calculates the area of a cylinder.\n    '''\n    volume = volume_cone(r,h)\n    return volume\ndef area_of_rectangle(a,b):\n    '''\n    Write a function that calculates the area of a rectangle.\n    '''\n    volume = volumn_rectangle(a,b)\n    return volume\ndef area_of_triangle(a,b):\n    '''\n    Write a function that calculates the area of a triangle.\n    '''\n    volume = volumn_triangle(a,b)\n    return volume\ndef perimeter_of_square(a,b):\n    '''\n    Write a function that calculates the perimeter of a square.\n    '''\n    return a*b\ndef perimeter_of_rectangle(a,b):\n    '''\n    Write a function that calculates the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef perimeter_of_circle(r):\n    '''\n    Write a function that calculates the perimeter of a circle.\n    '''\n    return 3.14*(r**2)\ndef perimeter_of_cylinder(r,h):\n    '''\n    Write a function that calculates the perimeter of a cylinder.\n    '''\n    volume = volume_cylinder(r,h)\n    return volume\ndef perimeter_of_rectangle(a,b):\n    '''\n    Write a function that calculates the perimeter of a rectangle.\n    '''\n    volume = volumn_rectangle(a,b)\n    return volume\ndef perimeter_of_triangle(a,b):\n    '''\n    Write a function that calculates the perimeter of a triangle.\n    '''\n    volume = volumn_triangle(a,b)\n    return volume\ndef volume_of_circle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    return math.pi*(r**2)\ndef volume_of_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    return volumn_rectangle(a,b)\ndef volume_of_circle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    return area_of_circle(r)\ndef volume_of_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    volume = area_of_rectangle(a,b)\n    return volume\ndef volume_of_circle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    return area_of_circle(r)\ndef volume_of_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    volume = area_of_rectangle(a,b)\n    return volume\ndef volume_of_circle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    return area_of_circle(r)\ndef volume_of_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    volume = area_of_rectangle(a,b)\n    return volume\ndef volume_of_circle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    return area_of_circle(r)\ndef volume_of_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    volume = area_of_rectangle(a,b)\n    return volume\ndef volume_of_circle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    return area_of_circle(r)\ndef volume_of_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    volume = area_of_rectangle(a,b)\n    return volume\ndef volume_of_circle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    return area_of_circle(r)\ndef volume_of_circle_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_circle(a)\n    return volume\ndef volume_of_circle_rectangle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_circle(r)\n    return volume\ndef volume_of_circle_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_rectangle(a,b)\n    return volume\ndef volume_of_circle_rectangle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_rectangle(r)\n    return volume\ndef volume_of_circle_rectangle(a,b):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_rectangle(a,b)\n    return volume\ndef volume_of_circle_rectangle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_rectangle(r)\n    return volume\ndef volume_of_circle_triangle(a,b):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_circle(a)\n    return volume\ndef volume_of_circle_triangle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_circle(r)\n    return volume\ndef volume_of_circle_triangle(a,b):\n    '''\n    Write a function that calculates the volume of a circle.\n    '''\n    volume = area_of_circle(a)\n    return volume\ndef volume_of_circle_triangle(r):\n    '''\n    Write a function that calculates the volume of a circle.\n    ''"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2*r*math.pi*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = 4 * math.pi * (r**3) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*h*r*(3/4)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a = 2*math.pi*r\n    b = 2*h\n    c = math.pi*a\n    volume = b*b*c\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * (math.pi * r ** 2) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2 * math.pi * r ** 2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    num_of_sides = 4\n    a = (2*math.pi*r*h)/(4*r)\n    for i in range(num_of_sides):\n        volume = volume + (math.sin(a*i))**2\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**3/h**2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = 0\n    power = 1\n    while n >= power:\n        power = power + 1\n    while n >= max:\n        n = n - power\n        if n == max:\n            return power\n        max = max + 1\n    return max\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n <= 1):\n        return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    \n    while i <= n:\n        if (n & i) == 0:\n            return i\n        i += 2\n    return -1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        l.append(i)\n    print(l)\n    for i in range(len(l)-1,-1,-1):\n        if l[i]>l[i+1]:\n            temp=l[i]\n            l[i]=l[i+1]\n            l[i+1]=temp\n    print(l)\n    return(l[0])\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Your code here\n    if n <= 2:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            if i**2 <= n:\n                return i**2\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return n % 2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    output = 2\n    if n <= 0:\n        return output\n    while output <= n:\n        output *= 2\n    return output\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n <= 0): \n        return 0\n    elif (n == 1): \n        return 1\n    elif (n == 2): \n        return 2\n    else: \n        pow_of_2 = 2 ** (n-1) \n        if (pow_of_2 < n): \n            return pow_of_2\n        else: \n            return highest_Power_of_2(n-1) + 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    i = 1\n    while n % i == 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n<=1: \n        return 1\n    elif n==2: \n        return 2\n    elif n==3: \n        return 3\n    elif n%2==1: \n        return 4\n    else: \n        return 4+find_lucas(n//2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        return\n    \n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    \n    lucas_number = 1\n    for k in range(5,n+1):\n        if k % 2 == 0:\n            lucas_number *= 2\n        else:\n            lucas_number *= 3\n    return lucas_number\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        print(\"Number must be greater than or equal to 1.\")\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return (find_lucas(n - 2) + find_lucas(n - 1))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 32\n    elif n == 6:\n        return 64\n    elif n == 7:\n        return 128\n    elif n == 8:\n        return 256\n    elif n == 9:\n        return 512\n    elif n == 10:\n        return 1024\n    elif n == 11:\n        return 2048\n    elif n == 12:\n        return 4096\n    elif n == 13:\n        return 8192\n    elif n == 14:\n        return 16384\n    elif n == 15:\n        return 32768\n    elif n == 16:\n        return 65536\n    elif n == 17:\n        return 131072\n    elif n == 18:\n        return 262144\n    elif n == 19:\n        return 524288\n    elif n == 20:\n        return 1048576\n    elif n == 21:\n        return 2097152\n    elif n == 22:\n        return 4194304\n    elif n == 23:\n        return 8388608\n    elif n == 24:\n        return 16777216\n    elif n == 25:\n        return 33554432\n    elif n == 26:\n        return 67108864\n    elif n == 27:\n        return 134217728\n    elif n == 28:\n        return 268435456\n    elif n == 29:\n        return 536870912\n    elif n == 30:\n        return 1073741824\n    elif n == 31:\n        return 2097152\n    elif n == 32:\n        return 4194304\n    elif n == 33:\n        return 8388608\n    elif n == 34:\n        return 16777216\n    elif n == 35:\n        return 33554432\n    elif n == 36:\n        return 67108864\n    elif n == 37:\n        return 134217728\n    elif n == 38:\n        return 268435456\n    elif n == 39:\n        return 536870912\n    elif n == 40:\n        return 1073741824\n    elif n == 41:\n        return 2097152\n    elif n == 42:\n        return 4194304\n    elif n == 43:\n        return 8388608\n    elif n == 44:\n        return 16777216\n    elif n == 45:\n        return 33554432\n    elif n == 46:\n        return 67108864\n    elif n == 47:\n        return 134217728\n    elif n == 48:\n        return 268435456\n    elif n == 49:\n        return 536870912\n    elif n == 50:\n        return 1073741824\n    elif n == 51:\n        return 2097152\n    elif n == 52:\n        return 4194304\n    elif n == 53:\n        return 8388608\n    elif n == 54:\n        return 16777216\n    elif n == 55:\n        return 33554432\n    elif n == 56:\n        return 67108864\n    elif n == 57:\n        return 134217728\n    elif n == 58:\n        return 268435456\n    elif n == 59:\n        return 536870912\n    elif n == 60:\n        return 1073741824\n    elif n == 61:\n        return 2097152\n    elif n == 62:\n        return 4194304\n    elif n == 63:\n        return 8388608\n    elif n == 64:\n        return 16777216\n    elif n == 65:\n        return 33554432\n    elif n == 66:\n        return 67108864\n    elif n == 67:\n        return 134217728\n    elif n == 68:\n        return 268435456\n    elif n == 69:\n        return 536870912\n    elif n == 70:\n        return 1073741824\n    elif n == 71:\n        return 2097152\n    elif n == 72:\n        return 4194304\n    elif n == 73:\n        return 8388608\n    elif n == 74:\n        return 16777216\n    elif n == 75:\n        return 33554432\n    elif n == 76:\n        return 67108864\n    elif n == 77:\n        return 134217728\n    elif n == 78:\n        return 268435456\n    elif n == 79:\n        return 536870912\n    elif n == 80:\n        return 1073741824\n    elif n == 81:\n        return 2097152\n    elif n == 82:\n        return 4194304\n    elif n == 83:\n        return 8388608\n    elif n == 84:\n        return 16777216\n    elif n == 85:\n        return 33554432\n    elif n == 86:\n        return 67108864\n    elif n == 87:\n        return 134217728\n    elif n == 88:\n        return 268435456\n    elif n == 89:\n        return 536870912\n    elif n == 90:\n        return 1073741824\n    elif n == 91:\n        return 2097152\n    elif n == 92:\n        return 4194304\n    elif n == 93:\n        return 8388608\n    elif n == 94:\n        return 16777216\n    elif n == 95:\n        return 33554432\n    elif n == 96:\n        return 67108864\n    elif n == 97:\n        return 134217728\n    elif n == 98:\n        return 268435456\n    elif n == 99:\n        return 536870912\n    elif n == 100:\n        return 1073741824\n    elif n == 101:\n        return 2097152\n    elif n == 102:\n        return 4194304\n    elif n == 103:\n        return 8388608\n    elif n == 104:\n        return 16777216\n    elif n == 105:\n        return 33554432\n    elif n == 106:\n        return 67108864\n    elif n == 107:\n        return 134217728\n    elif n == 108:\n        return 268435456\n    elif n == 109:\n        return 536870912\n    elif n == 110:\n        return 1073741824\n    elif n == 111:\n        return 2097152\n    elif n == 112:\n        return 4194304\n    elif n == 113:\n        return 8388608\n    elif n == 114:\n        return 16777216\n    elif n == 115:\n        return 33554432\n    elif n == 116:\n        return 67108864\n    elif n == 117:\n        return 134217728\n    elif n == 118:\n        return 268435456\n    elif n == 119:\n        return 536870912\n    elif n == 120:\n        return 1073741824\n    elif n == 121:\n        return 2097152\n    elif n == 122:\n        return 4194304\n    elif n == 123:\n        return 8388608\n    elif n == 124:\n        return 16777216\n    elif n == 125:\n        return 33554432\n    elif n == 126:\n        return 67108864\n    elif n == 127:\n        return 134217728\n    elif n == 128:\n        return 268435456\n    elif n == 129:\n        return 536870912\n    elif n == 130:\n        return 1073741824\n    elif n == 131:\n        return 2097152\n    elif n == 132:\n        return 4194304\n    elif n == 133:\n        return 8388608\n    elif n == 134:\n        return 16777216\n    elif n == 135:\n        return 33554432\n    elif n == 136:\n        return 67108864\n    elif n == 137:\n        return 134217728\n    elif n == 138:\n        return 268435456\n    elif n == 139:\n        return 536870912\n    elif "
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    else:\n        return find_lucas(n-3) + find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucas_numbers.append(1)\n        elif i == 2:\n            lucas_numbers.append(1)\n        elif i == 3:\n            lucas_numbers.append(1)\n        else:\n            lucas_numbers.append(1)\n            lucas_numbers.append(1)\n            lucas_numbers.append(1)\n    return lucas_numbers"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 1\n    for i in range(2, n+1):\n        a = (a*i) % mod\n    return a\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    i = 1\n    while True:\n        if n == i:\n            return i\n        i += 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    return lucas_numbers[n]"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for el in list_:\n        el.format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_[list_.index(element)] = element.format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # if list is not empty\n    if list_ is not None:\n        # create a new list\n        new_list = []\n        # loop through list\n        for i in list_:\n            # for each element\n            for char in string:\n                # add the element to the string\n                new_list.append(i[char])\n        return new_list\n    # if list is None\n    else:\n        # return an empty list\n        return []\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for i in range(len(list_)):\n        result.append(str(list_[i]) +'' + string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace(\"{{{0}}}\".format(string), str(string))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n        \n    return list_\n    \ndef apply_format_string_to_list(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n        \n    return list_\n    \ndef get_amount_of_elements_in_list(list_):\n    '''\n    Get the number of elements in a list.\n    '''\n    \n    amount_of_elements = 0\n    for element in list_:\n        amount_of_elements += 1\n    \n    return amount_of_elements\n    \ndef get_amount_of_elements_in_list_from_string(string):\n    '''\n    Get the number of elements in a list from a string.\n    '''\n    \n    amount_of_elements = 0\n    for element in string:\n        amount_of_elements += 1\n    \n    return amount_of_elements\n    \ndef get_amount_of_elements_in_list_from_string_to_list(string):\n    '''\n    Get the number of elements in a list from a string to a list.\n    '''\n    \n    amount_of_elements = []\n    for element in string:\n        amount_of_elements.append(get_amount_of_elements_in_list(element))\n    \n    return amount_of_elements\n    \ndef print_list(list_):\n    '''\n    Print all the elements in a list.\n    '''\n    \n    for i in range(len(list_)):\n        print(list_[i])\n        \ndef print_list_with_format_strings(list_, format_strings):\n    '''\n    Print all the elements in a list.\n    '''\n    \n    for i in range(len(list_)):\n        print(format_strings[i].format(list_[i]))\n        \ndef get_amount_of_elements_in_list_with_format_strings(list_, format_strings):\n    '''\n    Get the number of elements in a list with a list of format strings.\n    '''\n    \n    amount_of_elements = 0\n    for element in list_:\n        amount_of_elements += get_amount_of_elements_in_list_with_format_strings(element, format_strings)\n    \n    return amount_of_elements\n    \ndef print_format_strings_string(format_strings):\n    '''\n    Print all the format strings in a list.\n    '''\n    \n    for format_string in format_strings:\n        print(format_string)\n        \ndef add_to_list(list_, element):\n    '''\n    Add an element to a list.\n    '''\n    \n    list_.append(element)\n    \n    return list_\n    \ndef add_to_string(list_, string):\n    '''\n    Add an element to a list.\n    '''\n    \n    list_.append(string)\n    \n    return list_\n    \ndef reverse_string(string):\n    '''\n    Reverses the elements in a string.\n    '''\n    \n    new_string = string[::-1]\n    \n    return new_string\n    \ndef reverse_string_to_list(string):\n    '''\n    Reverses the elements in a string to a list.\n    '''\n    \n    new_list = []\n    for i in range(len(string)):\n        new_list.append(string[i])\n    \n    return new_list\n    \ndef replace_string_with_list(string, element, list_):\n    '''\n    Replaces an element in a list with another element.\n    '''\n    \n    list_ = add_to_list(list_, element)\n    return list_\n    \ndef print_list_with_format_strings_to_file(list_, file_name):\n    '''\n    Print all the elements in a list.\n    '''\n    \n    with open(file_name, 'w') as file_object:\n        for i in range(len(list_)):\n            file_object.write(str(list_[i]) + '\\n')\n            \ndef get_amount_of_elements_in_list_with_format_strings_to_file(list_, file_name):\n    '''\n    Get the number of elements in a list with a list of format strings.\n    '''\n    \n    amount_of_elements = 0\n    with open(file_name, 'w') as file_object:\n        for i in range(len(list_)):\n            file_object.write(str(list_[i]) + '\\n')\n            amount_of_elements += get_amount_of_elements_in_list_with_format_strings(list_[i], format_strings)\n    \n    return amount_of_elements\n    \ndef get_amount_of_elements_in_list_with_format_strings_to_file_to_list(list_, file_name):\n    '''\n    Get the number of elements in a list with a list of format strings to a list of elements.\n    '''\n    \n    amount_of_elements = []\n    for element in list_:\n        amount_of_elements.append(get_amount_of_elements_in_list_with_format_strings_to_file_to_list(list_[element], file_name))\n    \n    return amount_of_elements\n    \ndef convert_list_to_dict(list_):\n    '''\n    Convert a list of elements to a dictionary.\n    '''\n    \n    dict_ = {}\n    for element in list_:\n        dict_[element] = 1\n        \n    return dict_\n    \ndef convert_list_to_dict_to_list(list_):\n    '''\n    Convert a list of elements to a dictionary.\n    '''\n    \n    dict_ = []\n    for element in list_:\n        dict_[element] = 1\n        \n    return dict_\n    \ndef create_dict_from_list(list_):\n    '''\n    Create a dictionary from a list.\n    '''\n    \n    dict_ = {}\n    for element in list_:\n        dict_[element] = 1\n        \n    return dict_\n    \ndef create_dict_from_string(string):\n    '''\n    Create a dictionary from a string.\n    '''\n    \n    dict_ = {}\n    for element in string:\n        dict_[element] = 1\n        \n    return dict_\n    \ndef add_dict_to_list(list_, dict_):\n    '''\n    Add a dictionary to a list.\n    '''\n    \n    list_.append(dict_)\n    \n    return list_\n    \ndef add_dict_to_string(string, dict_):\n    '''\n    Add a dictionary to a string.\n    '''\n    \n    string = string.format(dict_)\n    \n    return string\n    \ndef convert_list_to_dict_to_string(list_):\n    '''\n    Convert a list of elements to a string.\n    '''\n    \n    string = ''\n    for element in list_:\n        string += str(element) + ','\n        \n    return string\n    \ndef convert_string_to_list(string):\n    '''\n    Convert a string to a list.\n    '''\n    \n    list_ = []\n    for element in string.split(','):\n        list_.append(element)\n    \n    return list_\n    \ndef list_to_string(list_):\n    '''\n    Convert a list to a string.\n    '''\n    \n    string = ''\n    for element in list_:\n        string += element + ','\n    \n    return string\n    \ndef count_elements(list_):\n    '''\n    Count the number of elements in a list.\n    '''\n    \n    amount_of_elements = 0\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace('{','').replace('}','')\n        list_[i] = list_[i].replace('$','')\n        list_[i] = list_[i].replace('\\n','')\n        list_[i] = list_[i].replace('\\t','')\n        list_[i] = list_[i].replace('\\xa0','')\n        list_[i] = list_[i].replace('\\u200b','')\n        list_[i] = list_[i].replace('|','').replace('|','&').replace('\\u200b','')\n        list_[i] = list_[i].replace('\\u200c','')\n        list_[i] = list_[i].replace('\\u200d','')\n        list_[i] = list_[i].replace('\\xa1','')\n        list_[i] = list_[i].replace('\\u200b','')\n        list_[i] = list_[i].replace('\\u200c','')\n        list_[i] = list_[i].replace('\\u200d','')\n        list_[i] = list_[i].replace('\\u200e','')\n        list_[i] = list_[i].replace('\\u200f','')\n        list_[i] = list_[i].replace('\\u2000','')\n        list_[i] = list_[i].replace('\\u2001','')\n        list_[i] = list_[i].replace('\\u2002','')\n        list_[i] = list_[i].replace('\\u2003','')\n        list_[i] = list_[i].replace('\\u2004','')\n        list_[i] = list_[i].replace('\\u2005','')\n        list_[i] = list_[i].replace('\\u2006','')\n        list_[i] = list_[i].replace('\\u2007','')\n        list_[i] = list_[i].replace('\\u2008','')\n        list_[i] = list_[i].replace('\\u2009','')\n        list_[i] = list_[i].replace('\\u200a','')\n        list_[i] = list_[i].replace('\\u200b','')\n        list_[i] = list_[i].replace('\\u200c','')\n        list_[i] = list_[i].replace('\\u200d','')\n        list_[i] = list_[i].replace('\\u200e','')\n        list_[i] = list_[i].replace('\\u200f','')\n        list_[i] = list_[i].replace('\\u2021','')\n        list_[i] = list_[i].replace('\\u2022','')\n        list_[i] = list_[i].replace('\\u2023','')\n        list_[i] = list_[i].replace('\\u2024','')\n        list_[i] = list_[i].replace('\\u2025','')\n        list_[i] = list_[i].replace('\\u2026','')\n        list_[i] = list_[i].replace('\\u2027','')\n        list_[i] = list_[i].replace('\\u2028','')\n        list_[i] = list_[i].replace('\\u2029','')\n        list_[i] = list_[i].replace('\\u202a','')\n        list_[i] = list_[i].replace('\\u202b','')\n        list_[i] = list_[i].replace('\\u202c','')\n        list_[i] = list_[i].replace('\\u202d','')\n        list_[i] = list_[i].replace('\\u202e','')\n        list_[i] = list_[i].replace('\\u202f','')\n        list_[i] = list_[i].replace('\\u2030','')\n        list_[i] = list_[i].replace('\\u2031','')\n        list_[i] = list_[i].replace('\\u2032','')\n        list_[i] = list_[i].replace('\\u2033','')\n        list_[i] = list_[i].replace('\\u2034','')\n        list_[i] = list_[i].replace('\\u2035','')\n        list_[i] = list_[i].replace('\\u2036','')\n        list_[i] = list_[i].replace('\\u2037','')\n        list_[i] = list_[i].replace('\\u2038','')\n        list_[i] = list_[i].replace('\\u2039','')\n        list_[i] = list_[i].replace('\\u203a','')\n        list_[i] = list_[i].replace('\\u203b','')\n        list_[i] = list_[i].replace('\\u203c','')\n        list_[i] = list_[i].replace('\\u203d','')\n        list_[i] = list_[i].replace('\\u203e','')\n        list_[i] = list_[i].replace('\\u203f','')\n        list_[i] = list_[i].replace('\\u2040','')\n        list_[i] = list_[i].replace('\\u2041','')\n        list_[i] = list_[i].replace('\\u2042','')\n        list_[i] = list_[i].replace('\\u2043','')\n        list_[i] = list_[i].replace('\\u2044','')\n        list_[i] = list_[i].replace('\\u2045','')\n        list_[i] = list_[i].replace('\\u2046','')\n        list_[i] = list_[i].replace('\\u2047','')\n        list_[i] = list_[i].replace('\\u2048','')\n        list_[i] = list_[i].replace('\\u2049','')\n        list_[i] = list_[i].replace('\\u204a','')\n        list_[i] = list_[i].replace('\\u204b','')\n        list_[i] = list_[i].replace('\\u204c','')\n        list_[i] = list_[i].replace('\\u204d','')\n        list_[i] = list_[i].replace('\\u204e','')\n        list_[i] = list_[i].replace('\\u204f','')\n        list_[i] = list_[i].replace('\\u2050','')\n        list_[i] = list_[i].replace('\\u2051','')\n        list_[i] = list_[i].replace('\\u2052','')\n        list_[i] = list_[i].replace('\\u2053','')\n        list_[i] = list_[i].replace('\\u2054','')\n        list_[i] = list_[i].replace('\\u2055','')\n        list_[i] = list_[i].replace('\\u2056','')\n        list_[i] = list_[i].replace('\\u2057','')\n        list_[i] = list_[i].replace('\\u2058','')\n        list_[i] = list_[i].replace('\\u2059','')\n        list_[i] = list_[i].replace('\\u205a','')\n        list_[i] = list_[i].replace('\\u205b','')\n        list_[i] = list_[i].replace('\\u205c','"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace('{', '')\n        list_[i] = list_[i].replace('}', '')\n        list_[i] = list_[i].replace(',','')\n        list_[i] = list_[i].replace('/','')\n        list_[i] = list_[i].replace(';','')\n        list_[i] = list_[i].replace('.','')\n        list_[i] = list_[i].replace('\\n','')\n        list_[i] = list_[i].replace('\\t','')\n    \n    new_str = ''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace(string, '')\n        list_[i] = list_[i].replace('-','')\n        list_[i] = list_[i].replace(']', '')\n        list_[i] = list_[i].replace('[', '')\n        list_[i] = list_[i].replace(':','')\n        list_[i] = list_[i].replace('\\'','')\n        list_[i] = list_[i].replace('\\\"','')\n        list_[i] = list_[i].replace('\\n','')\n        list_[i] = list_[i].replace('\\t','')\n        list_[i] = list_[i].replace('\\x0b','')\n        list_[i] = list_[i].replace('\\x0c','')\n        list_[i] = list_[i].replace('\\x0e','')\n        list_[i] = list_[i].replace('\\x0d','')\n        list_[i] = list_[i].replace('\\x0f','')\n        list_[i] = list_[i].replace('\\x10','')\n        list_[i] = list_[i].replace('\\x11','')\n        list_[i] = list_[i].replace('\\x12','')\n        list_[i] = list_[i].replace('\\x13','')\n        list_[i] = list_[i].replace('\\x14','')\n        list_[i] = list_[i].replace('\\x15','')\n        list_[i] = list_[i].replace('\\x16','')\n        list_[i] = list_[i].replace('\\x17','')\n        list_[i] = list_[i].replace('\\x18','')\n        list_[i] = list_[i].replace('\\x19','')\n        list_[i] = list_[i].replace('\\x1a','')\n        list_[i] = list_[i].replace('\\x1b','')\n        list_[i] = list_[i].replace('\\x1c','')\n        list_[i] = list_[i].replace('\\x1d','')\n        list_[i] = list_[i].replace('\\x1e','')\n        list_[i] = list_[i].replace('\\x1f','')\n    new_str = new_str + ''.join(list_)\n    return new_str\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print(list_)\n    for i in range(len(list_)):\n        if string.lower() == list_[i].lower():\n            list_[i] = string\n    print(list_)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_ = str(element).replace('\\n','')\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if type(l1)!= list:\n        raise TypeError(\"Unable to convert list to dictionary.\")\n    dictionary = {}\n    for index in l1:\n        if type(index) == list:\n            for item in index:\n                if type(item) == dict:\n                    dictionary[index[item]] = item\n                elif type(item) == str:\n                    dictionary[index[item]] = item\n            continue\n        if type(index) == str:\n            dictionary[index] = {}\n    for index in l2:\n        if type(index) == list:\n            for item in index:\n                if type(item) == dict:\n                    dictionary[index[item]] = item\n                elif type(item) == str:\n                    dictionary[index[item]] = item\n            continue\n        if type(index) == str:\n            dictionary[index] = {}\n    for index in l3:\n        if type(index) == list:\n            for item in index:\n                if type(item) == dict:\n                    dictionary[index[item]] = item\n                elif type(item) == str:\n                    dictionary[index[item]] = item\n            continue\n        if type(index) == str:\n            dictionary[index] = {}\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[i] = l1[i]\n    for j in range(len(l2)):\n        d1[j] = l2[j]\n    for k in range(len(l3)):\n        d1[k] = l3[k]\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError(\"Lengths of lists must be the same\")\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for l in l1:\n        for k in l:\n            d1[k] = l[k]\n    for l in l3:\n        for k in l:\n            d1[k] = l[k]\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for item in l1:\n        if item not in res:\n            res[item] = {}\n        for item2 in l2:\n            if item2 not in res[item]:\n                res[item][item2] = []\n            for item3 in l3:\n                if item3 not in res[item][item2]:\n                    res[item][item2].append(item3)\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # TODO: convert list to dictionary\n    #assert type(l1) == type(l2) == type(l3)\n    #assert len(l1) == len(l2) == len(l3)\n    \n    # TODO: output dictionary\n    return {\n        'key1': l1,\n        'key2': l2,\n        'key3': l3\n    }\n    \n    \n    \ndef main():\n    '''\n    Example:\n        >>> main()\n    '''\n    #assert 'output' not in globals()\n    #print('output')\n    \n    #example:\n    #>>> main()\n    \n    #example:\n    #>>> main(list1=['one', 'two'])\n    \n    #example:\n    #>>> main(list1=['one', 'two'], list2=[2, 4])\n    #assert 'output' not in globals()\n    \n    l1 = ['one', 'two']\n    l2 = ['one', 'two', 'three']\n    l3 = ['one', 'two', 'three', 'four', 'five','six']\n    \n    #print('converted list', convert_list_dictionary(l1, l2, l3))\n    #assert 'output' not in globals()\n    \n    l = convert_list_dictionary(l1, l2, l3)\n    print('converted list:', l)\n    \n    l = ['one', 'two', 'three', 'four', 'five','six']\n    print('converted list:', convert_list_dictionary(l1, l2, l3))\n    \n    #assert 'output' not in globals()\n    \n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in l1:\n        d1[i] = convert_list_dictionary(l1[i], l2[i], l3[i])\n    for i in l2:\n        d2[i] = convert_list_dictionary(l1[i], l3[i], d1[i])\n    for i in l3:\n        d3[i] = convert_list_dictionary(d1[i], d2[i], d3[i])\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    for i in range(len(l1)):\n        if l2[i] not in dic:\n            dic[l2[i]] = []\n        if l3[i] not in dic[l2[i]]:\n            dic[l2[i]].append(l3[i])\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out_dict = {}\n    out_dict['a'] = l1\n    out_dict['b'] = l2\n    out_dict['c'] = l3\n    return out_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1[i] = l3[i]\n    return d1\n    \ndef convert_string_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1[i] = {}\n        for j in l2:\n            d1[i][j] = l3[j]\n    return d1\n    \ndef replace_dictionary_value(d,d1,d2):\n    '''\n    Write a function to replace a value in a dictionary using\n    replace function.\n    '''\n    for i in d1:\n        if(i in d2):\n            d[i] = d1[i]\n        \ndef get_fibonacci_numbers(n):\n    '''\n    Write a function to return the nth Fibonacci number for a given number n.\n    '''\n    a = 0\n    b = 1\n    if(n < 0):\n        print('Invalid Input.')\n        return None\n    elif(n == 0):\n        return 0\n    elif(n == 1):\n        return 1\n    else:\n        while(a < n):\n            a = a + b\n            b = a\n        return b\n    \ndef check_list_recursive(a, l1, l2):\n    '''\n    Write a function to check if l1 is a list of fibonacci numbers.\n    '''\n    if(len(l2) == 0):\n        return True\n    if(l2[0]!= l1[0]):\n        return False\n    else:\n        return check_list_recursive(a, l1, l2[1:])\n    \ndef is_even(n):\n    '''\n    Write a function to check if a number is even or not.\n    '''\n    return (n % 2) == 0\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_recursive(n):\n        if n == 1:\n            return n\n        return max( get_max_sum_recursive(n/2), get_max_sum_recursive(n/3), get_max_sum_recursive(n/4), get_max_sum_recursive(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    m = max (n)\n    max_sum = 0\n    for n in range (1, m+1):\n        max_sum = max_sum + (m/n)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # YOUR CODE HERE\n    f_n = 0\n    for n in range (1,n+1):\n        f_n += (f(n)/2) + f(n/2) + f(n/3) + f(n/4) + f(n/5)\n        print (f_n)\n    return f_n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    MAX = 0\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2 or n % 2 == 0:\n        return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n):\n        max_sum = max(f(i), max_sum)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (n*(n+1)*(2*n+1)*(3*n+1)*(4*n+1)*(5*n+1)).__float__()\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (\n    (\n        ((f(n/2) + f(n/3) + f(n/4) + f(n/5))**2)**0.5\n    )\n    + n\n    )\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n%2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4)\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f_max = max(abs(n), n**2)\n    if n % 2 == 0:\n        f_max = (f_max * 2) + n\n    elif n % 3 == 0:\n        f_max = (f_max * 3) + n\n    elif n % 4 == 0:\n        f_max = (f_max * 4) + n\n    elif n % 5 == 0:\n        f_max = (f_max * 5) + n\n    return f_max\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    longest_list = []\n    for x in input_list:\n        if len(x) > len(longest_list):\n            longest_list = x\n    return longest_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    # iterate over the list and determine if its the longest\n    for length in input_list:\n        # if the length is greater than the current length, update the value of the max\n        if length > max_length:\n            max_length = length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return [item for item in input_list if len(item) > len(item[0])]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(list(map(len,input_list)))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum_length = input_list[0]\n    for item in input_list:\n        if item > maximum_length:\n            maximum_length = item\n    return maximum_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Create a list of items\n    max_length = []\n    for item in input_list:\n        if len(item) > len(max_length):\n            max_length = item\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return input_list\n    return max(map(len, input_list), key=len)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    flag = True\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                continue\n            else:\n                flag = False\n                break\n    if flag == True:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #Write your code here\n    duplicate = set()\n    for i in test_tup:\n        if i in duplicate:\n            return False\n        else:\n            duplicate.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return set(test_tup)!= set(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i)>1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for x in test_tup:\n        if test_tup.count(x) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # TODO: Modify this function to work with Tuples\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for item in test_tup:\n        if item in test_tup:\n            raise ValueError('Duplicate item in given tuple')\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for item in test_tup:\n        if item in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    lst = []\n    for i in test_tup:\n        if i not in lst:\n            lst.append(i)\n    return len(lst) == len(set(lst))\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Write your code here\n    \n    str1 = str1.lower()\n    counts = {}\n    \n    for char in str1:\n        if char in counts:\n            counts[char] = counts[char] + 1\n        else:\n            counts[char] = 1\n            \n    for char in counts:\n        if counts[char] == 1:\n            return char\n    \n    return ''\n    \n    '''\n    TEST CASE:\n    >>> first_non_repeating_character('The quick Brown Fox jumps over the lazy dog.')\n    'j'\n    >>> first_non_repeating_character('The quick brown fox jumps over the lazy dog. ')\n    '''\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code here\n    \n    non_repeating = str1[0]\n    i = 1\n    while i < len(str1):\n        if str1[i] == str1[i-1]:\n            i += 1\n        else:\n            non_repeating = str1[i]\n            break\n    return non_repeating\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #declaring the variable\n    lst_str=list(str1)\n    #declaring the counter to 0\n    count=0\n    #declaring a loop counter\n    for i in range(len(lst_str)):\n        if lst_str[i]==lst_str[i+1]:\n            count=count+1\n        else:\n            count=0\n    if count==len(lst_str):\n        return lst_str[0]\n    else:\n        return \"error\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #write your code here\n    if not str1:\n        return ''\n    \n    str1 = str1.lower()\n    if len(str1) == 1:\n        return ''\n    \n    return str1[0]\n        "
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counter = 0\n    for char in str1:\n        if char == str1[counter]:\n            counter += 1\n        else:\n            break\n    return char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    else:\n        counts = {}\n        for letter in str1:\n            if letter not in counts:\n                counts[letter] = 1\n            else:\n                counts[letter] += 1\n        \n        for letter, count in counts.items():\n            if count > 1:\n                return letter\n        \n        return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = []\n    for char in str1:\n        if char not in char_list:\n            char_list.append(char)\n    print(char_list)\n    return char_list[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dictionary = {}\n    count = 0\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"'str1' must be of type str\")\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    raise ValueError(\"No character repeats found\")\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    num = dict()\n    for i in str1:\n        if i not in num:\n            num[i] = 1\n        else:\n            num[i] += 1\n    #print(num)\n    for key, value in num.items():\n        if value == 1:\n            return key\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$'\n    if re.search(pattern, string)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 3:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 0 and string[0]!= '.':\n        return False\n    if len(string) < 1:\n        return False\n    for char in string:\n        if char!= '.':\n            return False\n    return True\ndef check_binary(string):\n    '''\n    Write a function to check whether the given string is binary or not.\n    '''\n    if string == '':\n        return True\n    if not string[0] in ['0', '1']:\n        return False\n    if string[-1] not in ['0', '1']:\n        return False\n    string = string[::-1]\n    for i in range(len(string)-1):\n        if string[i]!= string[i+1]:\n            return False\n    return True\ndef is_number(s):\n    '''\n    Write a function to check whether the given string is a number or not.\n    '''\n    if re.match(r'^\\d+$', s):\n        return True\n    else:\n        return False\ndef is_valid(string):\n    '''\n    Write a function to check whether the given string is a valid string or not.\n    '''\n    if string == '':\n        return True\n    if not string[0] in ['0', '1']:\n        return False\n    if not string[-1] in ['0', '1']:\n        return False\n    string = string[::-1]\n    for i in range(len(string)-1):\n        if string[i]!= string[i+1]:\n            return False\n    return True\ndef count_uniq(string):\n    '''\n    Write a function to count the number of uniqe characters in a given string.\n    '''\n    uniq = 0\n    for char in string:\n        if string.count(char) == 1:\n            uniq += 1\n    return uniq\ndef is_number_part(string):\n    '''\n    Write a function to check whether the given string is a number part or not.\n    '''\n    if re.match(r'^\\d+$', string):\n        return True\n    else:\n        return False\ndef is_valid_number(s):\n    '''\n    Write a function to check whether the given string is a valid number or not.\n    '''\n    if is_number(s):\n        if not is_number_part(s):\n            return True\n    else:\n        return False\ndef count_digits(string):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    digits = 0\n    for char in string:\n        if char in ['0', '1']:\n            digits += 1\n    return digits\ndef is_valid_digit(s):\n    '''\n    Write a function to check whether the given string is a valid digit or not.\n    '''\n    if not is_number(s):\n        if not is_number_part(s):\n            return True\n    else:\n        return False\ndef count_lower_case(string):\n    '''\n    Write a function to count the number of lower case letters in a given string.\n    '''\n    lower_case = 0\n    for char in string:\n        if char in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            lower_case += 1\n    return lower_case\ndef count_upper_case(string):\n    '''\n    Write a function to count the number of upper case letters in a given string.\n    '''\n    upper_case = 0\n    for char in string:\n        if char in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n            upper_case += 1\n    return upper_case\ndef count_lower_and_upper(string):\n    '''\n    Write a function to count the number of lower and upper case letters in a given string.\n    '''\n    lower = 0\n    upper = 0\n    for char in string:\n        if char in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            lower += 1\n        if char in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n            upper += 1\n    return lower, upper\ndef count_digit(string):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    digit = 0\n    for char in string:\n        if char in ['0', '1']:\n            digit += 1\n    return digit\ndef count_special_char(string):\n    '''\n    Write a function to count the number of special characters in a given string.\n    '''\n    special = 0\n    for char in string:\n        if char == '.':\n            special += 1\n    return special\ndef is_valid_pattern(string):\n    '''\n    Write a function to check whether the given string is valid or not.\n    '''\n    if not string:\n        return True\n    if not string[0] in ['0', '1']:\n        return False\n    if not string[-1] in ['0', '1']:\n        return False\n    pattern = '^[a-z]+$'\n    if not re.match(pattern, string):\n        return False\n    return True\ndef count_subsequence(string):\n    '''\n    Write a function to count the number of subsequence in a given string.\n    '''\n    sub = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i:j] in string[i:j]:\n                sub += 1\n    return sub\ndef is_valid_num(s):\n    '''\n    Write a function to check whether the given string is a valid number or not.\n    '''\n    if is_number(s):\n        if not is_number_part(s):\n            return True\n    else:\n        return False\ndef count_subsequence_num(string):\n    '''\n    Write a function to count the number of subsequence in a given string.\n    '''\n    sub = 0\n    for i in range(len(string)-1):\n        if string[i:i+2] in string[i:i+2]:\n            sub += 1\n    return sub\ndef is_valid_sequence(string):\n    '''\n    Write a function to check whether the given string is a valid sequence or not.\n    '''\n    if not string:\n        return True\n    if not string[0] in ['0', '1']:\n        return False\n    if not string[-1] in ['0', '1']:\n        return False\n    sequence = ['0','1']\n    if not re.match(sequence, string):\n        return False\n    return True\ndef is_valid_pattern_sequence(string):\n    '''\n    Write a function to check whether the given string is a valid pattern sequence or not.\n    '''\n    pattern = '^[a-z]+$'\n    if not re.match(pattern, string):\n        return False\n    if not re.match(pattern, string[::-1]):\n        return False\n    return True\ndef count_word_sequences(string):\n    '''\n    Write a function to coun"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    if string[0] in ['A', 'a'] and string[-1] in ['A', 'a']:\n        return True\n    if string[0] in ['A', 'a'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['T', 't']:\n        return True\n    if string[0] in ['T', 't'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['C', 'c']:\n        return True\n    if string[0] in ['C', 'c'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['G', 'g']:\n        return True\n    if string[0] in ['G', 'g'] and string[-1] in ['T', 't']"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    check_all = []\n    for i in string:\n        check_all.append(i.lower())\n    if len(check_all) < 1:\n        return False\n    else:\n        check_all.sort()\n        return check_all[0] == check_all[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    l = len(string)\n    if len(string) == 0 or len(string) > l: \n        return True\n    for i in range(l):\n        if string[i]!= string[i + 1]: \n            return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]==string[-1]:\n        return True\n    elif len(string)<2 or len(string)>4:\n        return False\n    else:\n        for i in string:\n            if i==string[0]:\n                return True\n            if i==string[-1]:\n                return False\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if regex.search(string):\n        return True\n    else:\n        return False\ndef check_special_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with special character or not.\n    '''\n    if regex.search(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    temp = re.sub(regex, \"\", string) \n    if temp.startswith(temp[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    char = re.match(regex, string)\n    if char!= None:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import math\n    if len(a) == len(b) == len(c):\n        median = (a+b+c)//3\n        if median % 2 == 0:\n            return median\n        else:\n            return (median + (median+a)//2)//2\n    else:\n        return \"Error: Numbers are not of equal length.\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if len(a) < 3 or len(b) < 3 or len(c) < 3:\n        return 'Input not valid'\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==b==c==0:\n        return None\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return (a+b+c)//3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x=len(a)\n    if x%2==0:\n        if a[(x//2)-1]==a[(x//2)]:\n            if b[(x//2)-1]==b[(x//2)]:\n                if c[(x//2)-1]==c[(x//2)]:\n                    return a[(x//2)]\n                else:\n                    return c[(x//2)]\n            else:\n                return c[(x//2)]\n        else:\n            return c[(x//2)]\n    else:\n        if a[(x//2)-1]==a[(x//2)]:\n            if b[(x//2)-1]==b[(x//2)]:\n                if c[(x//2)-1]==c[(x//2)]:\n                    return a[(x//2)]\n                else:\n                    return c[(x//2)]\n            else:\n                return c[(x//2)]\n        else:\n            return c[(x//2)]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = []\n    numbers.append(a)\n    numbers.append(b)\n    numbers.append(c)\n    x = sorted(numbers)\n    n = len(x)\n    if n%2 == 0:\n        return (x[n//2]+x[n//2-1])/2\n    else:\n        return x[n//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b == c == 0:\n        return 0\n    if a == b == c == 1:\n        return 1\n    else:\n        return int((a + b + c) / 3)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==0:\n        return a[0]\n    if len(b)==0:\n        return b[0]\n    if len(c)==0:\n        return c[0]\n    \n    if len(a)<=len(b) and len(b)<len(c):\n        return (a+b+c)[len(a)//2]\n    elif len(a)<=len(b) and len(b)<len(c):\n        return (b+c)[len(b)//2]\n    else:\n        return (c+b)[len(c)//2]\n    \ndef median_numbers_w_intervals(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==0:\n        return a[0]\n    if len(b)==0:\n        return b[0]\n    if len(c)==0:\n        return c[0]\n    \n    a.sort()\n    b.sort()\n    c.sort()\n    \n    mid_1=len(a)//2\n    mid_2=len(b)//2\n    mid_3=len(c)//2\n    \n    if mid_1<mid_2 and mid_2<mid_3:\n        return (a[mid_1]+b[mid_2]+c[mid_3])/3\n    elif mid_1<mid_2 and mid_2<mid_3:\n        return (b[mid_1] + c[mid_2]) / 2\n    elif mid_1<mid_2 and mid_3<mid_1:\n        return (c[mid_3] + a[mid_3]) / 2\n    else:\n        return (a[mid_1] + b[mid_2] + c[mid_3])/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c:\n        a,b,c=b,c,a\n    if b<a<c:\n        b,a,c=a,c,b\n    if c<a<b:\n        c,a,b=a,b,c\n    if a<b<c:\n        a,b,c=b,c,a\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if not a or not b or not c:\n        return None\n    median = (a + b + c)//3\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_median = a.append(a.sort()[int(len(a)/2)])\n    b_median = b.append(b.sort()[int(len(b)/2)])\n    c_median = c.append(c.sort()[int(len(c)/2)])\n    median = a_median + b_median + c_median\n    median.sort()\n    return median[len(median)//2]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # YOUR CODE HERE\n    digits = []\n    for num in nums:\n        digits.append(num % 10)\n    sum = 0\n    for i in range(len(digits)):\n        sum += digits[i]\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += int(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Code here\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    # TODO: Write your code here\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums_sum = 0\n    for i in range(len(nums)):\n        nums_sum += int(nums[i])\n    return nums_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Approach 1: Using a Stack\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # Runtime: 52 ms (76.88%)\n    # Memory Usage: 14.5 MB (53.11%)\n    # Result: [5, 1, 0, 8, 2, 7, 2]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = nums if type(nums) == list else [nums]\n    total = 0\n    for num in nums:\n        total += num if type(num) == int else num*10\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # return sum([int(i) for i in str(nums)])\n    return sum(int(i) for i in nums if type(i) == int)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = 0\n    for num in nums:\n        res += num % 10\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for num in test_tup1:\n        result = result ^ num\n    for num in test_tup2:\n        result = result ^ num\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = test_tup1[::-1]\n    test_tup2 = test_tup2[::-1]\n    return tuple([x & y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = list()\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i] ^ test_tup2[i]) & 0xff)\n    return res\n    \ndef word_shuffle(arr):\n    '''\n    Write a function to shuffle an array of bytes of the given length.\n    '''\n    res = list()\n    for i in range(len(arr)):\n        res.append(arr[i])\n        for j in range(len(arr)):\n            res[j] = (res[j] >> 8) | (arr[i] & 0xFF)\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    solution = 0\n    for index in range(len(test_tup1)):\n        solution |= test_tup1[index] << (index+1)\n    for index in range(len(test_tup2)):\n        solution ^= test_tup2[index]\n    return solution\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Write your code here.\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    xor = []\n    for i in range(0, len(test_tup1)):\n        xor.append(test_tup1[i] ^ test_tup2[i])\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if not (type(test_tup1) == type(test_tup2) == tuple):\n        raise TypeError(\"The first argument to bitwise_xor must be a tuple\")\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length\")\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i]\n        xor_result = xor_result ^ test_tup2[i]\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Declare tuples as ints to make calculations easier\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    output_tup = []\n    for a in test_tup1:\n        for b in test_tup2:\n            output_tup.append(a ^ b)\n    return output_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # this is just a test case for your implementation\n    assert len(test_tup1) == len(test_tup2)\n    assert len(test_tup1[0]) == len(test_tup2[0])\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #pass\n    \n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    test_list = test_list.copy()\n    for i in test_list:\n        if i in freq_dict.keys():\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = collections.Counter(test_list)\n    print(freq)\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup[0] in freq:\n            freq[tup[0]] += 1\n        else:\n            freq[tup[0]] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    \n    # Create a Counter object\n    counter = Counter()\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    from string import punctuation\n    from math import factorial\n    def counter(a):\n        return Counter(a)\n    def f(b):\n        return factorial(len(b))\n    print(f(test_list))\n    from itertools import groupby\n    c = []\n    for g in groupby(sorted(test_list), key=len):\n        l = list(g)\n        print(len(l),l)\n        # print(list(g))\n        # print(len(l))\n        # print(l)\n        # print(c)\n        # c.extend(list(g))\n        # c.extend(l)\n        c.append(list(g))\n    print(c)\n    print(len(c))\n    # print(len(c))\n    \n    \n    # print(len(c))\n    # print(c)\n    \n    # print(len(c))\n    # print(c)\n    \n    # print(len(c))\n    # print(c)\n    # print(len(c))\n    # print(c)\n    \n    \n    # for i in c:\n    #     print(i)\n    # print(len(c))\n    # print(c)\n    # # print(len(c))\n    # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # # print(c)\n    # # print(len(c))\n    # "
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = dict()\n    for element in test_list:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for i in range(len(test_list)):\n        freq.append(len(test_list[i]))\n    return freq\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = [test_tup1[i][0] for i in range(len(test_tup1))]\n    test_tup2 = [test_tup2[i][0] for i in range(len(test_tup2))]\n    add_tup1 = tuple([x + y for x,y in zip(test_tup1,test_tup2)])\n    return add_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create a tuple of the two tuples\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            result.append(test_tup1[i]+test_tup2[j])\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            test_tup3 = test_tup1[i] + test_tup2[j]\n            print(test_tup3)\n    print('\\n')\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_element(t1,t2):\n        if t1[0] == t2[0]:\n            return t1[1] + t2[1]\n        if t1[1] == t2[0]:\n            return t1[0] + t2[1]\n        if t1[1] == t2[1]:\n            return t1[0] + t2[0]\n        if t1[0] == t2[1]:\n            return t1[0] + t2[0]\n        \n    test_tup1 = list(test_tup1)\n    test_tup1.append(tuple([tuple(test_tup1[i][j] + test_tup2[i][j] for j in range(len(test_tup2[i]))) for i in range(len(test_tup1))]))\n    return tuple(map(add_element,test_tup1, test_tup2))\n    \ndef multiply_element(t1,t2):\n    '''\n    Write a function to multiply two elements in a tuple.\n    '''\n    def multiply(t1,t2):\n        if len(t1) == 1 and len(t2) == 1:\n            return t1[0] * t2[0]\n        if len(t1) == 1 and len(t2) == 2:\n            return t1[0] * t2[1]\n        if len(t1) == 2 and len(t2) == 1:\n            return t1[0] * t2[0]\n        if len(t1) == 2 and len(t2) == 2:\n            return t1[0] * t2[0] * t2[1]\n        \n    t1 = list(t1)\n    t1.append(tuple([tuple(t1[i] * t2[i] for i in range(len(t2))) for t2 in t2]))\n    return tuple(map(multiply,t1,t2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # get the first nested tuple\n    nested_tuple_1 = test_tup1[0]\n    # get the second nested tuple\n    nested_tuple_2 = test_tup2[0]\n    # iterate through both tuples\n    for i in range(len(test_tup1)):\n        # get the first nested tuple\n        nested_tuple_1 = nested_tuple_1[0]\n        # get the second nested tuple\n        nested_tuple_2 = nested_tuple_2[0]\n        # iterate through both tuples\n        for j in range(len(test_tup2)):\n            # get the first nested tuple\n            nested_tuple_1 = nested_tuple_1[0]\n            # get the second nested tuple\n            nested_tuple_2 = nested_tuple_2[0]\n            # iterate through both tuples\n            if j == len(test_tup2)-1:\n                # return tuple\n                return(nested_tuple_1, nested_tuple_2)\n            # add to the tuple\n            else:\n                # add to the tuple\n                nested_tuple_1 = nested_tuple_1[j] + nested_tuple_1[j+1]\n                nested_tuple_2 = nested_tuple_2[j] + nested_tuple_2[j+1]\n    # return tuple\n    return(nested_tuple_1, nested_tuple_2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Base Case\n    if len(test_tup1) == 0:\n        return test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create new tuples\n    tup_1 = tuple([test_tup1[i] for i in range(0,len(test_tup1))])\n    tup_2 = tuple([test_tup2[i] for i in range(0,len(test_tup2))])\n    # Create the new lists from the tuple\n    new_list_1 = list(tup_1)\n    new_list_2 = list(tup_2)\n    # Add the new lists to the tuple\n    new_tup = tuple(new_list_1 + new_list_2)\n    # Return the new tuple\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup1[1], test_tup2[0] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not test_tup1 or not test_tup2:\n        return None\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    result = list(zip(*test_tup1))\n    for i in range(len(result)):\n        for j in range(len(result[i])):\n            result[i][j] = test_tup2[i][j]\n    return tuple(result)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        smaller=a\n    else:\n        smaller=b\n    while(True):\n        if a<=smaller and b>=smaller:\n            return min(a,b)\n        elif a<=smaller:\n            smaller=a\n        elif b<=smaller:\n            smaller=b\n        else:\n            return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        if a==b:\n            return a\n        elif a>b:\n            return b\n        else:\n            return a\n    else:\n        if a==b:\n            return b\n        elif a<b:\n            return a\n        else:\n            return b\n    return 0\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b \n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #print(a,b)\n    if a>b:\n        return b\n    elif a<b:\n        return a\n    else:\n        return "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if (a<b) else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b==None:\n        return a\n    else:\n        if a<b:\n            return a\n        else:\n            return b\n    return None\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return a + b\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Write your code here.\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n    \ndef main():\n    '''\n    Read the txt file with lists of words and check for duplicates.\n    '''\n    # Read the file\n    file = open(\"words_to_check.txt\", \"r\")\n    \n    # Create a list\n    tuplex = []\n    \n    # Iterate the lines\n    for line in file:\n        # Split the line into words\n        words = line.split()\n        # Iterate through the words\n        for word in words:\n            # Check if the word is a duplicate\n            if check_tuplex(tuplex, word) == True:\n                # Add it to the list\n                tuplex.append(word)\n    # Print the list\n    print(tuplex)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #check if element is in tuple\n    if tuplex[0] in tuple1:\n        return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (tuplex[0] == tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Initialize the return value \n    tuple2 = []\n    # Iterate through the tuple \n    for i in range(len(tuplex)): \n        # Add to the return value \n        tuple2.append(tuplex[i])\n    # Check if the element is in the tuple \n    if tuple1 in tuple2: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex)>1:\n        for x in tuplex:\n            if x == tuple1:\n                return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n    \ndef check_dict(dict,key,value):\n    '''\n    Write a function to check whether an element exists within a dictionary.\n    '''\n    if dict.get(key) == value:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] in tuple1:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple2 = []\n    for i in tuplex:\n        tuple2.append(i)\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_list(list,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple2 = []\n    for i in list:\n        tuple2.append(i)\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_list1(tuple1,list1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple2 = []\n    for i in list1:\n        tuple2.append(i)\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_list2(list,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple2 = []\n    for i in list:\n        tuple2.append(i)\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_tuple1(tuple1,tuplex): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple2 = []\n    for i in tuplex:\n        tuple2.append(i)\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef list_to_tuple(list):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = []\n    for i in list:\n        tuple_list.append(i)\n    return tuple_list\ndef list_to_str(list):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    string = \"\"\n    for i in list:\n        string += str(i)\n    return string\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    for i in range(1, x, 2):\n        if i % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(x, 'is even.') \n    else: \n        print(x, 'is odd.') \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(len(x)-1):\n        if x[i]!= x[i+1]:\n            parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return x%2==0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return 'even'\n    else: \n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = 0\n    if x % 2 == 0:\n        if x < 15:\n            return 1\n        else:\n            if x % 4 == 0:\n                odd = 1\n            else:\n                odd = 0\n            if odd:\n                return 1\n    else:\n        if x % 4 == 0:\n            odd = 1\n        else:\n            odd = 0\n        if odd:\n            return 1\n    return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # assuming we have a base case and we only have 1 value\n    # pass in this assumption\n    if x == 1:\n        return True\n    \n    if (x % 2 == 0):\n        return False\n    \n    # return the case where it is even\n    return find_Parity(x//2)\n    # base case, could be where we have a base case\n    # but I could not figure it out\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Insert code here\n    #the numbers can be easily rearranged\n    n = str(n)\n    n = n + str(1)\n    n = n + str(n[-1])\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(\"\".join(str(int(i)) for i in str(n)[::-1]))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    b = str(n)\n    a = [int(i) for i in b[::-1]]\n    return sum(a)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = n\n    if n == 0:\n        return 0\n    for i in range(1, 9):\n        while n % 10!= 0:\n            n //= 10\n        if n > res:\n            res = n\n    return res\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    temp = []\n    for i in range(len(n)):\n        temp.append(int(n[i]))\n    temp = list(map(str, temp))\n    return int(\"\".join(temp))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    print(f'Number {n} has digits: {n}')\n    digits = [int(d) for d in str(n)]\n    print(f'Rearranging digits of {n}...')\n    print(f'{digits}')\n    digits.reverse()\n    print(f'Reverse digits of {n}...')\n    print(f'{digits}')\n    n = int(''.join(map(str, digits)))\n    print(f'Bigger number has {n}')\n    print(f'Bigger number has {n}')\n    print(f'Rearranging digits of {n}...')\n    print(f'{digits}')\n    print(f'Reverse digits of {n}...')\n    print(f'{digits}')\n    n = int(''.join(map(str, digits)))\n    print(f'Bigger number has {n}')\n    print(f'Bigger number has {n}')\n    print(f'Rearranging digits of {n}...')\n    print(f'{digits}')\n    print(f'Reverse digits of {n}...')\n    print(f'{digits}')\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Hint: https://www.geeksforgeeks.org/rearrangement-for-smaller-and-larger-numbers-in-python/\n    '''\n    If given an integer x, and the number y is 0, then return y\n    If given an integer x, and the number y is 1, then return y+1\n    If given an integer x, and the number y is 2, then return y+2\n    If given an integer x, and the number y is 3, then return y+3\n    If given an integer x, and the number y is 4, then return y+4\n    If given an integer x, and the number y is 5, then return y+5\n    If given an integer x, and the number y is 6, then return y+6\n    If given an integer x, and the number y is 7, then return y+7\n    If given an integer x, and the number y is 8, then return y+8\n    If given an integer x, and the number y is 9, then return y+9\n    If given an integer x, and the number y is 10, then return y+10\n    If given an integer x, and the number y is 11, then return y+11\n    If given an integer x, and the number y is 12, then return y+12\n    If given an integer x, and the number y is 13, then return y+13\n    If given an integer x, and the number y is 14, then return y+14\n    If given an integer x, and the number y is 15, then return y+15\n    If given an integer x, and the number y is 16, then return y+16\n    If given an integer x, and the number y is 17, then return y+17\n    If given an integer x, and the number y is 18, then return y+18\n    If given an integer x, and the number y is 19, then return y+19\n    If given an integer x, and the number y is 20, then return y+20\n    If given an integer x, and the number y is 21, then return y+21\n    If given an integer x, and the number y is 22, then return y+22\n    If given an integer x, and the number y is 23, then return y+23\n    If given an integer x, and the number y is 24, then return y+24\n    If given an integer x, and the number y is 25, then return y+25\n    If given an integer x, and the number y is 26, then return y+26\n    If given an integer x, and the number y is 27, then return y+27\n    If given an integer x, and the number y is 28, then return y+28\n    If given an integer x, and the number y is 29, then return y+29\n    If given an integer x, and the number y is 30, then return y+30\n    If given an integer x, and the number y is 31, then return y+31\n    If given an integer x, and the number y is 32, then return y+32\n    If given an integer x, and the number y is 33, then return y+33\n    If given an integer x, and the number y is 34, then return y+34\n    If given an integer x, and the number y is 35, then return y+35\n    If given an integer x, and the number y is 36, then return y+36\n    If given an integer x, and the number y is 37, then return y+37\n    If given an integer x, and the number y is 38, then return y+38\n    If given an integer x, and the number y is 39, then return y+39\n    If given an integer x, and the number y is 40, then return y+40\n    If given an integer x, and the number y is 41, then return y+41\n    If given an integer x, and the number y is 42, then return y+42\n    If given an integer x, and the number y is 43, then return y+43\n    If given an integer x, and the number y is 44, then return y+44\n    If given an integer x, and the number y is 45, then return y+45\n    If given an integer x, and the number y is 46, then return y+46\n    If given an integer x, and the number y is 47, then return y+47\n    If given an integer x, and the number y is 48, then return y+48\n    If given an integer x, and the number y is 49, then return y+49\n    If given an integer x, and the number y is 50, then return y+50\n    If given an integer x, and the number y is 51, then return y+51\n    If given an integer x, and the number y is 52, then return y+52\n    If given an integer x, and the number y is 53, then return y+53\n    If given an integer x, and the number y is 54, then return y+54\n    If given an integer x, and the number y is 55, then return y+55\n    If given an integer x, and the number y is 56, then return y+56\n    If given an integer x, and the number y is 57, then return y+57\n    If given an integer x, and the number y is 58, then return y+58\n    If given an integer x, and the number y is 59, then return y+59\n    If given an integer x, and the number y is 60, then return y+60\n    If given an integer x, and the number y is 61, then return y+61\n    If given an integer x, and the number y is 62, then return y+62\n    If given an integer x, and the number y is 63, then return y+63\n    If given an integer x, and the number y is 64, then return y+64\n    If given an integer x, and the number y is 65, then return y+65\n    If given an integer x, and the number y is 66, then return y+66\n    If given an integer x, and the number y is 67, then return y+67\n    If given an integer x, and the number y is 68, then return y+68\n    If given an integer x, and the number y is 69, then return y+69\n    If given an integer x, and the number y is 70, then return y+70\n    If given an integer x, and the number y is 71, then return y+71\n    If given an integer x, and the number y is 72, then return y+72\n    If given an integer x, and the number y is 73, then return y+73\n    If given an integer x, and the number y is 74, then return y+74\n    If given an integer x, and the number y is 75, then return y+75\n    If given an integer x, and the number y is 76, then return y+76\n    If given an integer x, and the number y is 77, then return y+77\n    If given an integer x, and the number y is 78, then return y+78\n    If given an integer x, and the number y is 79, then return y+79\n    If given an integer x, and the number y is 80, then return y+80\n    If given an integer x, and the number y is 81, then return y+81\n    If given an integer x, and the number y is 82, then return y+82\n    If given an integer x, and the number y is 83, then return y+83\n    If given an integer x, and the number y is 84, then return y+84\n    If given an integer x, and the number y is 85, then return y+85\n    If given an integer x, and the number y is 86, then return y+86\n    If given an integer x, and the number y is 87, then return y+87\n    If given an integer x, and the number y is 88, then return y+88\n    If given an integer x, and the number y is 89, then return y+89\n    If given an integer x, and the number y is 90, then return y+90\n    If given an integer x, and the number y is 91, then return y+91\n    If given an integer x, and the number y is 92, then return y+92\n    If given an integer x, and the number y is 93, then return y+93\n    If given an integer x, and the number y is 94, then return y+94\n    If given an integer x, and the number y is 95, then return y+95\n    If given an integer x, and the number y is 96, then return y+96\n    If given an integer x, and the number y is 97, then return y+97\n    If given an integer x, an"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return f\"{n//10**(n%10)}({n%10})\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = []\n    if n <= 9:\n        arr.append(n)\n    else:\n        arr.append(10)\n        n //= 10\n        while n:\n            arr.append(n % 10)\n            n //= 10\n        arr.append(10)\n    arr.reverse()\n    return int(''.join(str(x) for x in arr))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n // 10 * 10 + n % 10\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Idea: Try to find k numbers as sorted in ascending order,\n    # when you find the smallest pair, you'll have the k number of pairs (i,j)\n    # and the smallest pair will be i,j\n    # We are only need to explore the remaining nums1 and nums2\n    # to find the smallest pair, we need to make sure to check that they are sorted\n    # the min number between all the smallest pairs is at least the second element\n    # find all pairs\n    # return the min number\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    d = {}\n    for i in range(len(nums1)):\n        d[nums1[i]] = i\n    for j in range(len(nums2)):\n        d[nums2[j]] = j\n    max_heap = []\n    max_heapq.heapify(max_heap)\n    min_heap = []\n    min_heapq.heapify(min_heap)\n    for _ in range(k):\n        a, b = min_heapq.heappop(min_heap), max_heapq.heappop(max_heap)\n        while a < b:\n            d[a] = b\n            d[b] = a\n            a, b = b, a\n        max_heapq.heappush(max_heap, d[a])\n        min_heapq.heappush(min_heap, d[b])\n    return [a for a, b in sorted(list(d.items())) if b not in max_heap]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    output_list = []\n    print(\"array1 : \",nums1)\n    print(\"array2 : \",nums2)\n    #iterate the first array and add it to the heap\n    for i in nums1:\n        heapq.heappush(h, (i, nums1.count(i)))\n    print(\"heap : \", h)\n    #iterate the second array and add it to the heap\n    for j in nums2:\n        heapq.heappush(h, (j, nums2.count(j)))\n    print(\"heap : \", h)\n    #iterate through all the elements of both arrays and calculate the smallest pairs\n    while len(h)>0:\n        #extract the first element from the heap\n        smallest_pair_index = heapq.heappop(h)[1]\n        smallest_pair_value = heapq.heappop(h)[0]\n        print(\"smallest_pair : \",smallest_pair_value)\n        #extract the second element from the heap\n        second_pair_index = heapq.heappop(h)[1]\n        second_pair_value = heapq.heappop(h)[0]\n        output_list.append(smallest_pair_value)\n        output_list.append(second_pair_value)\n        print(\"output_list : \",output_list)\n        #update the heap of the smallest pair\n        heapq.heapify(h)\n        heapq.heappush(h, (second_pair_value, second_pair_index))\n        heapq.heappush(h, (smallest_pair_value, smallest_pair_index))\n        print(\"heap : \", h)\n    #return the output list\n    return output_list\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1)>len(nums2):\n        nums1, nums2 = nums2, nums1\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] < nums2[i]:\n            count += 1\n        elif nums1[i] == nums2[i]:\n            count += 1\n            count += 1\n    return count\ndef main():\n    '''\n    Write a function that returns the k smallest numbers from the array nums.\n    '''\n    nums = [3,2,2,3]\n    k = 2\n    print(k_smallest_pairs(nums, nums, k))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1:\n        return []\n    if not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    nums1.sort()\n    nums2.sort()\n    if len(nums1) <= 1:\n        return [nums1[0], nums1[0]]\n    if len(nums2) <= 1:\n        return [nums2[0], nums2[0]]\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] + nums2[j] == k:\n                pairs.append([nums1[i], nums2[j]])\n    return pairs\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    min_heap = []\n    count = 0\n    \n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (nums1[i], i))\n        \n    for j in range(len(nums2)):\n        heapq.heappush(min_heap, (nums2[j], j))\n    \n    for i in range(k):\n        if min_heap:\n            min_i, min_j = heapq.heappop(min_heap)\n            count += 1\n            if count == len(nums1) * len(nums2):\n                return count\n            elif count == len(nums1) + len(nums2):\n                return count\n        else:\n            return count\n            "
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Copy the first array.\n    first_array = list(nums1)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    min_tuple = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i][0] < list1[i-1][0] and list1[i][1] < list1[i-1][1]:\n            min_tuple = list1[i]\n            break\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[1][0]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if (list1[i][0] * list1[j][1]) < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product=list1[0][0]*list1[1][1]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            min_product=min(min_product,list1[i][0]*list1[j][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # print(list1)\n            # print(min_product)\n            min_product = list1[j]*list1[i]\n            if(min_product < min_product):\n                min_product = min_product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    p_min = float(\"inf\")\n    p_min_pairs = []\n    for item in list1:\n        if item[1] < p_min:\n            p_min = item[1]\n            p_min_pairs = [item]\n        elif item[1] == p_min:\n            p_min_pairs.append(item)\n    return p_min_pairs\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        min_product_tuple = list1[0]\n        for i in range(1, len(list1)):\n            min_product_tuple = (list1[i][0] * min_product_tuple[1], min_product_tuple[1])\n        return min_product_tuple"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0]\n    elif len(list1) == 2:\n        return min(list1[0][0], list1[1][0])\n    else:\n        small_list = sorted(list1, key = lambda x : x[0])\n        small_tuple = sorted(small_list, key = lambda x : x[1])\n        res = smallest_product(small_tuple)\n        return res\n        \n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = 0\n    for item in list1:\n        minimum_product = item[1] * item[0]\n    return minimum_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    print(list1)\n    # return the minimum pair\n    return min(list1)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum_val = listval[0]\n    for element in listval:\n        if element < minimum_val:\n            minimum_val = element\n    return minimum_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = None\n    for item in listval:\n        if minimum == None or minimum > item:\n            minimum = item\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for num in listval:\n        if num < min_val:\n            min_val = num\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval:\n        if minval > val:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for item in listval:\n        if item < 0:\n            return -1\n    return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for item in listval:\n        if item > 0:\n            return item\n    return max(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=listval[0]\n    for i in range(len(listval)):\n        if listval[i]<min_val:\n            min_val=listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    for value in listval:\n        if value < min_val:\n            min_val = value\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0].isupper():\n        return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    else:\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # if word is not a string\n    if not isinstance(word,str):\n        raise TypeError('word must be a string')\n    # if input is empty\n    if not word:\n        raise ValueError('word must not be empty')\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower().replace(\"_\",\"\").replace(\" \", \"\")\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_to_camel_dict = {\"_.\": \"__\", \"-\" : \"--\", \".\" : \"-\", \"*\" : \"*\", \"(\": \")\", \")\": \"(\",\n    \"+\" : \"+\", \"-\": \"-\"}\n    return (re.sub(r'([a-z]+)([A-Z])','\\g<1>\\g<2>', word.lower()))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word.endswith('y'):\n        word += 'ies'\n    if not word.endswith('y'):\n        word = word + 'y'\n    if not word.endswith('y'):\n        word = word + 'ies'\n    if not word.endswith('ies'):\n        word = word + 'y'\n    if word.endswith('ies'):\n        word = word[:-2] + 'y'\n    if word.endswith('y'):\n        word = word[:-1] + 'ies'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all '_' with '-'\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # Replace all '-' with '_'\n    word = re.sub('-([a-z])', r'\\1_\\2', word)\n    # Replace all '-' with '-'\n    word = re.sub('-([a-z])', r'\\1_\\2', word)\n    # Replace all '_' with '_'\n    word = re.sub('(_)', r'\\1_\\2', word)\n    # Replace all '_' with '_'\n    word = re.sub('(_)', r'\\1_\\2', word)\n    # Replace all '-' with '_'\n    word = re.sub('(-)([a-z])', r'\\1_\\2', word)\n    # Replace all '-' with '_'\n    word = re.sub('(-)([a-z])', r'\\1_\\2', word)\n    # Replace all '_' with '_'\n    word = re.sub('_([a-z])', r'\\1_\\2', word)\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('-', '_')\n    word = word.replace(' ', '_')\n    word = word.replace('.', '_')\n    word = word.lower()\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    def detect_first_upper(string):\n        '''\n        Converts a given string to upper case.\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"[A-Z](?=[A-Z][a-z])\", \"\\\\1_\\\\2\", word).lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1\", word).lower()\ndef camel_case_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1\", word).lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"[A-Z](?=[A-Z][a-z])\", \"\\\\1_\\\\2\", word).lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1\", word).lower()\ndef camel_case_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_case_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_case_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r\"(?<!^)(?=[A-Z])_?\", \"\\\\1_\", word).lower()\ndef snake_to_snake(word):\n    '''\n    Write a function to convert th"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Base case\n    if len(l) == 0:\n        return []\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # remove the odd numbers\n    return list(filter(lambda x: x % 2 == 0, l))\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # 1st, check if the list is empty\n    if len(l) == 0:\n        return l\n    \n    # 2nd, if odd, the index number of the last item is 1 so remove it\n    if l[len(l)-1] % 2 == 1:\n        l = l[:-1]\n    # 3rd, if even, remove the index number of the first element\n    else:\n        l = l[:-len(l)-1]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    sorted_list = []\n    for i in range(len(l)):\n        if (l[i]%2) == 1:\n            sorted_list.append(l[i])\n    sorted_list.sort()\n    return sorted_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Your code here\n    l = [int(x) for x in l]\n    l.sort()\n    print(l)\n    i = 0\n    while(i<len(l)-1):\n        if l[i]%2!=0:\n            del l[i]\n            i-=1\n        i+=1\n    print(l)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    def remove_odd_numbers(l):\n        if len(l) == 0:\n            return []\n        if len(l) % 2!= 0:\n            return remove_odd(l[:-1])\n        else:\n            i = 0\n            output = []\n            while i < len(l):\n                if l[i] % 2 == 0:\n                    l.pop(i)\n                else:\n                    output.append(l.pop(i))\n                i = i+1\n            return output\n    return remove_odd_numbers(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for item in l:\n        if item % 2!= 0:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num%2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    print(l)\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for el in l:\n        if el % 2 == 0:\n            new_l.append(el)\n    return new_l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \ndef parse_input(lines):\n    '''\n    Return a dictionary of data in the format\n    {\n    'name': string,\n    'email': string\n    }\n    '''\n    \n    names = {}\n    emails = {}\n    for line in lines:\n        line = line.strip()\n        parts = line.split(' ')\n        name = parts[0]\n        email = ''.join(parts[1:])\n        names[name] = email\n        emails[email] = name\n    \n    return names, emails\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError\n    raise NotImplementedError\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = list1[n][1]\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # your code here\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        if list1 == list2:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list3=[]\n    list1=list(list1)\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                list3.append(list1[i])\n    return list3\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    if len(list1) == 0 or len(list2) == 0:\n        return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)>=len(list2):\n        a=len(list2)\n    else:\n        a=len(list1)\n    for i in range(a):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!=len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(0,len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = list1\n    for i in range(len(list1)):\n        if result[i] in list2:\n            result[i] = \"appears in \" + list2[i] + \" (\" + str(list1[i]) + \")\"\n        else:\n            result[i] = \"appears in \" + list2[i] + \" (NOT \" + str(list1[i]) + \")\"\n    return result\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in range(0,len(list1)-1):\n        if list1[i] in list2:\n            return True\n        else:\n            return False\n    \ndef intersection(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in range(0,len(list1)-1):\n        if list1[i] in list2:\n            return list1[i]\n        else:\n            return False\n    \ndef size(list1):  \n    '''\n    Write a python function to calculate the number of elements in a sequence.\n    '''\n    size = 0\n    for i in range(0,len(list1)):\n        size = size + 1\n    return size\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    intersection = set(list1).intersection(set(list2))\n    if len(intersection)> 0:\n        print('any value in sequence',intersection)\n    else:\n        print('sequence does not contain any value')\n    return\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #create a variable to hold the maximum product and an empty list to store the first element of the array\n    max_product = 0\n    product_arr = []\n    #find the product of the first element and append it in the product_arr variable\n    for x in arr:\n        product_arr.append(x * x)\n        \n    #print the product_arr variable to find the highest product\n    print(product_arr)\n    #iterate over the product_arr list to find the highest product from the product_arr list\n    for i in product_arr:\n        if i > max_product:\n            max_product = i\n    #return the highest product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2: \n        return None\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_prod = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                p_pos = i\n                q_pos = j\n    return arr[p_pos], arr[q_pos]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # if input array is empty or not a list, return None\n    if arr==[] or len(arr)==0:\n        return None\n    # if input array is not in ascending order, return None\n    if (len(arr) < 2) or (not arr.sort()):\n        return None\n    # initialize array of product values\n    arrProd = [0]*len(arr)\n    # at first iterate through all elements and fill array\n    for i in range(0, len(arr)):\n        arrProd[i] = arr[i]*arr[i]\n    # find largest product from array, which is always smaller than the\n    # current product\n    for i in range(0, len(arrProd)):\n        max_val = max(arrProd[0:i])\n        arrProd[i] = max_val\n        # if the product is bigger, then update array of products\n        if (arrProd[i] > arrProd[i+1]):\n            arrProd[i+1] = arrProd[i]\n    # return the index of the largest product\n    return (arrProd.index(max(arrProd)))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = len(arr)\n    # maximum product of the elements \n    max_prod = -1\n    # index to store the element with largest product\n    max_index = 0\n    for i in range(l-1):\n        for j in range(i+1,l):\n            prod = arr[i]*arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_index = i\n                max_index = j\n    print(\"Index of element with largest product : \",max_index)\n    return max_index\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # If the given array is empty, return an empty tuple (None).\n    if len(arr) == 0:\n        return ()\n    \n    # Create a dictionary for the pair and corresponding values.\n    dict = {}\n    \n    # Add each integer in the array in the dictionary with the product of its\n    # corresponding values. \n    for num in arr:\n        dict[num] = num * arr[num]\n        \n    # Return a tuple (product, integer), where product is the product of the \n    # two most common integers.\n    return dict.items()[0]\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    max_idx = -1\n    for i in range(len(arr)):\n        product = arr[i] * arr[max_idx]\n        if product > max_product:\n            max_product = product\n            max_idx = i\n    return max_idx, max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                index_product = i\n                index_j = j\n    return arr[index_product], arr[index_j]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_Product = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_Product:\n                max_Product = arr[i]*arr[j]\n                res = arr[i]*arr[j]\n    return res"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    temp=1\n    for i in range(1,len(arr)):\n        temp*=arr[i]\n    \n    return temp\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    tuple_list = []\n    tuple_list.append(tuple(Input))\n    if len(tuple_list) == 1:\n        return tuple_list[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    try:\n        from collections import Counter\n        my_list = Counter(Input)\n        top_k_elements = my_list.most_common(10)\n        return top_k_elements[0][0]\n    except:\n        pass\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = {}\n    for e in Input:\n        if e[0] not in d:\n            d[e[0]] = 1\n        else:\n            d[e[0]] += 1\n    s = sum(d.values())\n    for k in d.keys():\n        if s == d[k]:\n            return k\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return None\n    if len(Input) == 1:\n        return Input[0]\n    else:\n        first = Input[0]\n        for i in range(len(Input)):\n            if Input[i] == first:\n                return Input[i]\n        return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Hint: this could be a very simple solution with a single for loop\n    # and a list comprehension.\n    # Check the point:\n    # https://stackoverflow.com/questions/38522226/what-is-a-simple-way-to-check-if-two-tuple-values-are-equal\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = [tuple(x) for x in Input]\n    common_element = tuple(set(Input).intersection(*Input))\n    return common_element\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = []\n    for i in range(len(Input)):\n        a.append(Input[i][0])\n    b = list(dict.fromkeys(a))\n    #print(b)\n    return b\ndef is_only_numbers(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if all(isinstance(elem, int) for elem in Input):\n        return True\n    else:\n        return False\ndef is_unique_str(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_invalid_str(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_unique(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef in_lists(Input, L):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if all(isinstance(elem, int) for elem in Input):\n        return True\n    else:\n        return False\ndef is_empty(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_string(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_2(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_3(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_4(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_5(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_6(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_7(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_8(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_9(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_10(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_11(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_12(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_13(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_14(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_15(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_16(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_17(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_18(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_19(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_20(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_21(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_22(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_23(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_24(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_25(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_26(Input):\n    '''\n    Write a function to check if a list of tuple is only numbers.\n    '''\n    if len(Input)==0:\n        return True\n    else:\n        return False\ndef is_empty_tuple_27(Input):\n    '''\n    Write a functio"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    x = []\n    for i in Input:\n        if i not in x:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for item in Input:\n        if item not in common_element:\n            common_element.append(item)\n    return common_element\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #if len(Input) > 0:\n        #return Input[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = lst[0]\n    for i in range(len(lst)):\n        if lst[i] > maximum:\n            maximum = lst[i]\n    return maximum\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x=0\n    for i in lst:\n        if len(lst)>x:\n            print(lst[x])\n        x=x+1\n    print(\"Max Length:\",x)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=lst[0]\n    max_index=0\n    for i in range(0,len(lst)):\n        if(lst[i]>max_len):\n            max_index=i\n            max_len=lst[i]\n    return max_index\ndef Insert_Max(lst,new_ele):\n    '''\n    Write a python function to insert a new element into the list at the given position.\n    '''\n    for i in range(0,len(lst)):\n        if(new_ele<lst[i]):\n            lst.insert(i,new_ele)\n            return \n    lst.append(new_ele)\ndef remove_max(lst):\n    '''\n    Write a python function to remove the maximum element from a list.\n    '''\n    if(len(lst)==0):\n        return \"Error: list is empty\"\n    if(Find_Max(lst)==0):\n        return \"Error: maximum element not present in the list\"\n    for i in range(0,len(lst)-1):\n        if(lst[i]>lst[i+1]):\n            lst[i],lst[i+1]=lst[i+1],lst[i]\n    return lst\ndef insert_max(lst,new_ele):\n    '''\n    Write a python function to insert a new element into the list at the given position.\n    '''\n    lst.insert(Find_Max(lst),new_ele)\ndef Delete_Max(lst):\n    '''\n    Write a python function to delete the maximum element from a list.\n    '''\n    for i in range(0,len(lst)-1):\n        if(lst[i]>lst[i+1]):\n            lst[i],lst[i+1]=lst[i+1],lst[i]\n    return lst\ndef Max_Len(lst):\n    '''\n    Write a python function to find the length of the largest element in a list.\n    '''\n    if(len(lst)==0):\n        return 0\n    if(Find_Max(lst)==0):\n        return 0\n    return lst[0]\ndef Sort(lst):\n    '''\n    Write a python function to sort a list.\n    '''\n    if(len(lst)<=1):\n        return lst\n    for i in range(0,len(lst)-1):\n        for j in range(0,len(lst)-i-1):\n            if(lst[j]>lst[j+1]):\n                lst[j],lst[j+1]=lst[j+1],lst[j]\n    return lst\ndef Sort_by_Max(lst):\n    '''\n    Write a python function to sort a list by its maximum length.\n    '''\n    if(len(lst)<=1):\n        return lst\n    max_len=0\n    for i in range(0,len(lst)):\n        if(lst[i]>max_len):\n            max_len=lst[i]\n    for i in range(0,len(lst)):\n        if(lst[i]==max_len):\n            for j in range(0,len(lst)-1):\n                if(lst[j]>lst[j+1]):\n                    lst[j],lst[j+1]=lst[j+1],lst[j]\n    return lst\n    \n        "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_value = lst[0] #initialize the maximum value as 0\n    for i in range(1,len(lst)): #iterate over the list\n        if max_value < lst[i]: #if the element is smaller than the previous, update the max value\n            max_value = lst[i]\n    return max_value\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = -1\n    for el in lst: \n        if el > max_element:\n            max_length = el \n            max_element = el \n    return max_length \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(str(i)) > max:\n            max = len(str(i))\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if max < lst[i]:\n            max = lst[i]\n            \n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max_value = lst[0]\n    for i in lst:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total += number\n    print(total)\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    print(sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    total = 0\n    for num in list1:\n        total += num\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = 0\n    for i in list1:\n        s = s + i\n    print(s)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Write your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum = sum + list1[i]\n    return su"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    l = len(list1)\n    for i in list1:\n        round = round(i,l)\n    return round * l\n    pass\n    \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(round_and_sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # empty list to store the result\n    result = []\n    # looping over the elements\n    for i in list1:\n        # round each number and add to the result\n        result.append(round(i*(len(list1))))\n    # returning the result\n    return result\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if not list1:\n        return 0\n    total_sum = 0\n    list1.sort()\n    #finding the index of the element to be rounded\n    for i in list1:\n        #the index of the element\n        index = list1.index(i)\n        #round the number of element\n        if index > 0:\n            total_sum = total_sum + index\n    print(total_sum)\n    return total_sum\n    \nlist1 = [9,8,7,6,5,4,3,2,1]\nprint(round_and_sum(list1))"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Get the list of numbers\n    my_list = list(range(1,10))\n    my_list = [int(x) for x in my_list]\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in list1:\n        i=round(i,2)\n    return i\n    \ndef main():\n    '''\n    Write a function that takes a list of numbers and returns the list with the squares of the numbers.\n    '''\n    list1 = list(map(int, input().split()))\n    print(round_and_sum(list1))\n    \nmain()    "
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Do not change the code below \ud83d\udc47\n    cube = []\n    for i in range(1,n+1):\n        cube.append(i**3)\n    cube = sum(cube)\n    #Do not change the code above \ud83d\udc46\n    return cube\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        return (n*(n+1)//2) * cube_Sum(n-1)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    answer = 0\n    for i in range(1, n + 1):\n        answer = answer + i ** 3\n    return answer\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n1 = 0\n    n2 = 1\n    sum = 0\n    while (n1 < n):\n        sum = sum + n1\n        n1 = n1 * n\n    return sum\n    \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n**3\n    \nn = int(input(\"Enter Number: \"))\nprint(\"Cube Sum: \", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 2:\n        return n\n    else:\n        return (n*(n+1))//2\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<0:\n        print(\"No more Sums\")\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n*(n*cube_Sum(n-1))\n    \nprint(cube_Sum(6))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    # Write your code here.\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(i*i)\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for el in test_tup:\n        result += el\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #Define list to hold concatenated values\n    output_list = []\n    #Define loop to iterate through each element of tuple and append it to output list\n    for each_element in test_tup:\n        output_list.append(each_element)\n    return output_list\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Check if tuple is empty\n    if len(test_tup) == 0:\n        raise TypeError(\"Tuple cannot be empty\")\n    return tuple(map(lambda x: str(x), test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(map(lambda x: x+test_tup[1], test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = test_tup[0]\n    test_str = test_str.strip()\n    test_str = test_str.split(' ', 1)\n    test_str = test_str[0]\n    if len(test_str) == 0:\n        return test_tup\n    else:\n        return (test_tup[0] +'' + test_str).strip()\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(map(str, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n + 1):\n        cube = (i**3)\n        cubes.append(cube)\n    return sum(cubes) / len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n + 1):\n        cubes.append(i ** 3)\n    avg = 0\n    for i in cubes:\n        avg += i\n    return avg / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total = total + i**3\n    return total / (n**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += i ** 3\n    return result / (n * n)\n    \nprint(find_Average_Of_Cube(5))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    return (sum(cubes))/len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # your code here\n    list_of_numbers = []\n    list_of_numbers.extend(range(1, n))\n    list_of_numbers.extend(range(2, n))\n    list_of_numbers.extend(range(3, n))\n    list_of_numbers.sort()\n    result = sum(list_of_numbers)/len(list_of_numbers)\n    return result\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    avg = sum / n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(n):\n        avg = avg + i * i\n    return avg/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = []\n    for i in range(n):\n        cube.append(int(i**3))\n    average = sum(cube) / len(cube)\n    return average\n    \nprint(find_Average_Of_Cube(int(input(\"Enter the number of cubes: \"))))"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear = string[0]\n        rear_list.append(rear)\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple=tuple(test_tuple)\n    return (new_tuple[:new_tuple.index('rear')+1])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0][-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_index, rear_index = 0, 0\n    for string in test_tuple:\n        if string[rear_index] == '-':\n            rear_index += 1\n        else:\n            front_index = -1\n    return front_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front, rear = test_tuple\n    # front ='str'\n    # rear = '_'\n    front = front.strip('_')\n    rear = rear.strip('_')\n    return (front,rear)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #Define a function to split the string into a list\n    def split_string(test_tuple):\n        #Split the string\n        return [word for word in test_tuple if word!= '']\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output = list()\n    for i in test_tuple:\n        output.append(i[0])\n    return output\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output_string = \"\".join([str(i) for i in test_tuple[0]])\n    return output_string\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front, rear = test_tuple\n    # print(f'\\nFront: {front}')\n    # print(f'Rear: {rear}')\n    rear_list = list(rear)\n    # print(f'Rear List: {rear_list}')\n    front_list = list(front)\n    # print(f'Front List: {front_list}')\n    return (front_list, rear_list)"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Create a list of tuples containing elements from the tuple.\n    rear_indexes = []\n    for i in test_tuple:\n        rear_indexes.append(i.index('rear'))\n    # Return the list of the tuples.\n    return rear_indexes"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(0, len(list1)-1):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for i in list1:\n        if i == x:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # I made this a function to be more readable\n    # Python's built in functions are dunder functions\n    count = 0\n    for item in list1:\n        if item == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if x in i])\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    \n    for i in range(len(list1)):\n        \n        if x in list1[i]:\n            count += 1\n    \n    return coun"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count \n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    else:\n        odd = []\n        for i in range(len(nums)):\n            if nums[i] % 2 == 1:\n                odd.append(nums[i])\n        return od"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = nums[i]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            nums.remove(i)\n        else:\n            pass\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Time: O(N) - O(N)  \n    # Space: O(N)\n    return [x for x in nums if not x % 2 == 1]\n        \n    \n    # Time: O(N) - O(N)  \n    # Space: O(1)\n    # Filter the odd numbers to be true.\n    # return [x for x in nums if x % 2!= 0]\n        \n        \n    # Time: O(N) - O(N)  \n    # Space: O(1)\n    # Add one to each element and return the filtered list.\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums_odd = []\n    for num in nums:\n        if num % 2!= 0:\n            nums_odd.append(num)\n    return nums_odd\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_list = []\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # if nums[0] % 2 == 0:\n    #     return nums\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    days= dt[0:2]\n    months= dt[3:5]\n    years= dt[6:8]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(?P<year>\\d{4})[-](?P<month>\\d{2})(?P<day>\\d{2})(?P<date>[\\d]{2})\"\n    match = re.search(pattern, dt)\n    if match:\n        d_t = str(match.group('year')) + '-' + str(match.group('month')) + '-' + str(match.group('day'))\n        d_t = d_t[2:] + d_t[3:5] + d_t[0:2]\n        return d_t\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(dt)\n    date = dt.split(\"-\")\n    day = date[0]\n    month = date[1]\n    year = date[2]\n    day = day.zfill(2)\n    month = month.zfill(2)\n    year = year.zfill(4)\n    print(\"date in YYYY-MM-DD format is: \" + day + \"-\" + month + \"-\" + year)\n    return day, month, year\n    \ndef change_time_format(dt):\n    '''\n    Write a function to convert a time of HH:MM:SS format to HH:MM:SS-hhmmss format.\n    '''\n    print(dt)\n    date = dt.split(\"-\")\n    time = date[3]\n    h = time.split(\":\")\n    print(\"time in HH:MM:SS format is: \" + h[0] + \":\" + h[1] + \":\" + h[2])\n    return h[0], h[1], h[2]\n    \ndef change_time_format2(dt):\n    '''\n    Write a function to convert a time of HH:MM:SS format to HH:MM:SS-hhmmss format.\n    '''\n    print(dt)\n    date = dt.split(\"-\")\n    time = date[3]\n    h = time.split(\":\")\n    print(\"time in HH:MM:SS format is: \" + h[0] + \":\" + h[1] + \":\" + h[2])\n    return h[0], h[1], h[2]\n    \ndef time_convert(h, m, s):\n    '''\n    Write a function to convert HH:MM:SS to HH:MM:SS-hhmmss format.\n    '''\n    print(h, m, s)\n    h = h.zfill(2)\n    m = m.zfill(2)\n    s = s.zfill(2)\n    print(\"time in HH:MM:SS format is: \" + h + \":\" + m + \":\" + s)\n    return h, m, s\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    regex = r\"(\\d{4})-(\\d{2})-(\\d{2})$\"\n    match = re.search(regex, dt)\n    if match:\n        new_date = \"20\" + match.group(2)+\"-\"+match.group(1)+\"-\"+match.group(3)\n        return new_date\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(^\\d{4}-\\d{2}-\\d{2}$)\"\n    m = re.search(pattern, dt)\n    d = m.group(1)\n    m = re.search(r\"(\\d{4})-(\\d{2})-(\\d{2})$\", d)\n    m = m.group(1)\n    return d + \"-\" + m + \"-\" + dt[-2:]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    dt_lst = dt.split('-')\n    str_lst = []\n    for d in dt_lst:\n        d = d.split(' ')\n        if len(d) == 2:\n            d = d[0]+'-'+d[1]+'-'+d[2]\n        else:\n            d = d[0]+'-'+d[1]+'-'+d[3]\n        str_lst.append(d)\n    str_lst.sort()\n    return''.join(str_lst)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove the leading zeros, if any\n    if dt[2:4] == \"0\" and dt[4:6] == \"0\" and dt[6:8] == \"0\":\n        dt = dt[0:4] + \"-\" + dt[4:6] + \"-\" + dt[6:8]\n        print(dt)\n    # remove the extra zeros\n    if dt[4:6] == \"0\" and dt[6:8] == \"0\":\n        dt = dt[0:4] + \"-\" + dt[4:6]\n        print(dt)\n    # remove the missing day\n    if dt[6:8] == \"-\":\n        dt = dt[0:6] + dt[7:9]\n        print(dt)\n    # if the day is not a month, we need to add the days of the month\n    if dt[6:8]!= \"0\":\n        # convert the year to int\n        dt = int(dt[0:4])\n        # convert the month to int\n        dt = int(dt[4:6])\n        # if the day is a month, the month becomes the day of the month\n        if dt < 10:\n            dt = dt + 31\n        # if the day is a month, the month becomes the day of the year\n        if dt < 10:\n            dt = dt + 31\n        # convert the month to int and day to month days\n        dt = int(dt)\n    # if the day is a month, the month becomes the day of the year\n        if dt < 10:\n            dt = dt + 31\n    # convert the month to int and day to month days\n        dt = int(dt)\n    # remove the day of the month\n    if dt < 10:\n        dt = dt + 31\n    # convert the month to int and day to month days\n        dt = int(dt)\n    # convert the year to int\n        dt = int(dt)\n    # if the day of the month is a leap year, we need to add the leap year days\n    if dt % 400 == 0:\n        if dt % 100!= 0:\n            dt = dt + 366\n    # if the day of the month is a leap year, we need to add the leap year days\n    else:\n        if dt % 100!= 0:\n            dt = dt + 366\n    # convert the year to int\n        dt = int(dt)\n    # if the day of the month is a leap year, we need to add the leap year days\n    if dt % 100!= 0:\n        dt = dt + 366\n    # convert the year to int\n        dt = int(dt)\n    # if the day of the month is a leap year, we need to add the leap year days\n    if dt % 100!= 0:\n        dt = dt + 366\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    return \"{0}-{1}-{2}\".format(date[2], date[0], date[1])\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #split the date\n    date_list = dt.split('-')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove the leading zero, if any\n    dt = re.sub('^0', '', dt)\n    # create an empty string of the same length as the year plus the month\n    year = dt.split('-')[0]\n    # split the year into two parts. The second part is the month and the first part is the year\n    month, year = year.split('-')\n    # remove leading zero to make the year numbers easier to read\n    year = year[2:]\n    # convert the date to a date object and then convert it to dd-mm-yyyy format\n    return f'{month}-{year}-{dt}'\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length//2\n    while gap >= 1:\n        for i in range(gap, length):\n            j = i\n            while j >= gap and my_list[j] > my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n            gap = int(gap/2)\n        gap = gap-1\n        #print(my_list)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sorted_list = []\n    for i in range(0,len(my_list)):\n        for j in range(1, len(my_list) - i):\n            if my_list[j-1] > my_list[j] :\n                my_list[j - 1], my_list[j] = my_list[j], my_list[j - 1]\n            else:\n                break\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    while True:\n        for i in range(1,len(my_list)):\n            j = i\n            while j > 0 and my_list[j-1] > my_list[j]:\n                my_list[j-1], my_list[j] = my_list[j], my_list[j-1]\n                j -= 1\n        if j == 0: break\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    def shell_sort_iter(my_list, low, high):\n        '''\n        Computes the insertion sort of a given array.\n        The shell sort is a divide and conquer algorithm.\n        '''\n        \n        def iter_arr(lst, n):\n            '''\n            Sorts the given array by using insertion sort.\n            '''\n            \n            for i in range(n, 0, -1):\n                j = i\n                while j > 0 and lst[j] < lst[j - 1]:\n                    lst[j], lst[j - 1] = lst[j - 1], lst[j]\n                    j -= 1\n                lst[j]\n            return lst\n        \n        def insert(lst, n, x):\n            '''\n            Sorts the given array by using insertion sort.\n            '''\n            \n            for i in range(n, x, -1):\n                j = i - 1\n                while j >= 0 and lst[j] < lst[j - 1]:\n                    lst[j], lst[j - 1] = lst[j - 1], lst[j]\n                    j -= 1\n                lst[j]\n            return lst\n        \n        def recursive_shell_sort_iter(lst, n):\n            '''\n            Sorts the given array by using shell sort.\n            '''\n            if n < 1:\n                return\n            recursive_shell_sort_iter(lst, n//2)\n            iter_arr(lst, n)\n            recursive_shell_sort_iter(lst, n//2)\n            \n        recursive_shell_sort_iter(my_list, len(my_list))\n        \n    iter_arr(my_list, len(my_list))\n    \n    return my_list\n    \ndef bubble_sort(my_list):\n    '''\n    Write a function to sort the given array by using bubble sort.\n    '''\n    \n    def bubble_sort_iter(my_list, n):\n        '''\n        Sorts the given array by using bubble sort.\n        '''\n        for i in range(n):\n            for j in range(n-i-1):\n                if my_list[j] > my_list[j+1]:\n                    my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n        return my_list\n    \n    def bubble_sort_recursive(my_list, n):\n        '''\n        Sorts the given array by using bubble sort.\n        '''\n        for i in range(n):\n            for j in range(n-i-1):\n                if my_list[j] > my_list[j+1]:\n                    my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n        return my_list\n    \n    def recursive_bubble_sort_iter(my_list, n):\n        '''\n        Sorts the given array by using bubble sort.\n        '''\n        for i in range(n):\n            for j in range(n-i-1):\n                if my_list[j] > my_list[j+1]:\n                    my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n        return my_list\n    \n    def recursive_bubble_sort_recursive(my_list, n):\n        '''\n        Sorts the given array by using bubble sort.\n        '''\n        for i in range(n):\n            for j in range(n-i-1):\n                if my_list[j] > my_list[j+1]:\n                    my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n        return my_list\n    \n    recursive_bubble_sort_iter(my_list, len(my_list))\n    \n    return my_list\n    \ndef heap_sort(my_list):\n    '''\n    Write a function to sort the given array by using heap sort.\n    '''\n    \n    def heap_sort_iter(my_list, low, high):\n        '''\n        Sorts the given array by using heap sort.\n        '''\n        \n        def insert(low, high, x):\n            '''\n            Sorts the given array by using heap sort.\n            '''\n            \n            i = low\n            j = high\n            p = i\n            while i < high and x < my_list[i]:\n                i += 1\n            while j > low and my_list[j] < my_list[p]:\n                j -= 1\n            if i > j:\n                my_list[i], my_list[j] = my_list[j], my_list[i]\n            else:\n                my_list[i], my_list[j] = my_list[j], my_list[i]\n            \n            return my_list\n        \n        def partition(my_list, low, high):\n            '''\n            Sorts the given array by using heap sort.\n            '''\n            \n            for i in range(low, high):\n                if my_list[i] < my_list[high]:\n                    my_list[i], my_list[high] = my_list[high], my_list[i]\n            \n            my_list[low], my_list[high] = my_list[high], my_list[low]\n            \n            return low\n        \n        def heap_sort_recursive(my_list, low, high):\n            '''\n            Sorts the given array by using heap sort.\n            '''\n            for i in range(low, high):\n                insert(low, i, i)\n            p = low\n            for i in range(low, high):\n                j = i\n                while j > p and my_list[j] < my_list[p]:\n                    insert(j, p, j)\n                    j -= 1\n                my_list[j], my_list[p] = my_list[p], my_list[j]\n            \n            return my_list\n        \n        for i in range(len(my_list) - 1, -1, -1):\n            insert(i, i, i)\n        \n        return my_list\n    \n    for i in range(len(my_list)):\n        for j in range(len(my_list)):\n            if my_list[i] < my_list[j]:\n                my_list[i], my_list[j] = my_list[j], my_list[i]\n        \n        heap_sort_recursive(my_list, i, len(my_list) - 1)\n    \n    return my_list\n    \ndef quick_sort(my_list):\n    '''\n    Write a function to sort the given array by using quick sort.\n    '''\n    \n    def quick_sort_recursive(my_list, n):\n        '''\n        Sorts the given array by using quick sort.\n        '''\n        \n        def partition(my_list, low, high):\n            '''\n            Sorts the given array by using quick sort.\n            '''\n            \n            def sort(my_list, low, high):\n                '''\n                Sorts the given array by using quick sort.\n                '''\n                \n                if low >= high:\n                    return\n                p = low\n                q = high\n                while p < q:\n                    while p < q and my_list[p] <= my_list[q]:\n                        p += 1\n                    while p < q and my_list[p] >= my_list[q]:\n                        q -= 1\n                    if p < q:\n                        my_list[p], my_list[q] = my_list[q], my_list[p]\n                my_list[p], my_list[q] = my_list[q], my_list[p]\n                \n                sort(my_list, low, p - 1)\n                sort(my_list, p + 1, high)\n                \n            sort(my_list, low, n - 1)\n            sort(my_list, n + 1, high)\n        \n        def insert(low, high, x):\n            '''\n            Sorts the given array by using quick sort.\n            '''\n            \n        "
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # the size of the array is always a power of 2\n    # we'll create a list that will contain all the elements\n    # regardless of their index in the array\n    arr = []\n    # create an empty list that will contain the elements\n    # of the given list\n    for index, item in enumerate(my_list):\n        arr.append(item)\n        # handle the case where the array is not filled yet\n        if index >= len(my_list) // 2:\n            # we're done\n            # save the sorted list\n            pass\n        # we'll go to the next index\n        # in the while loop\n        # until the index is less than the length of the array\n        # or we've reached the end of the array\n        # put the rest in place\n            pass\n        # we'll add this element to the end of the\n        # array\n        pass\n    # create a copy of the array\n    copy_of_list = arr\n    copy_length = len(arr)\n    # repeat the code above until we have enough space\n    while copy_length > 1:\n        # we will always have at least one element left\n        # in the array\n        # there may be copies of that element\n        for i in range(copy_length-1):\n            # we will compare this element with the\n            # next element\n            # in the next iteration\n            # we'll either go to the next index\n            # in the loop or we'll have reached the end\n            # of the array\n            pass\n        # if we've got enough space to insert this element\n        # in the array, we will move to the next index\n        # and repeat\n        pass\n        # if we've reached the end of the array\n        # we'll add this element to the end of the array\n        # we'll add this element to the end of the array\n        # so we'll end up with 2 arrays (two copies of the first\n        # array, and 2 copies of the second array)\n        pass\n    # add the elements to the end of the array\n    for i in range(copy_length):\n        # we will then add the first element to the end of the\n        # array\n        pass\n    # add the first element to the end of the array\n    pass\n    # create a second array that will contain all the\n    # elements of the array\n    for index, item in enumerate(arr):\n        # if we've reached the end of the array\n        # we'll add this element to the end of the\n        # array\n        pass\n    # add this element to the end of the second array\n    pass\n    # put the second array in place\n    pass\n    pass\n    # repeat the code above until we have enough space\n    while copy_length > 1:\n        # we will always have at least one element left\n        # in the array\n        # there may be copies of that element\n        for i in range(copy_length-1):\n            # we will compare this element with the\n            # next element\n            # in the next iteration\n            # we'll either go to the next index\n            # in the loop or we'll have reached the end\n            # of the array\n            pass\n        # if we've got enough space to insert this element\n        # in the array, we will move to the next index\n        # and repeat\n        pass\n        # if we've reached the end of the array\n        # we'll add this element to the end of the array\n        # we'll add this element to the end of the array\n        # so we'll end up with 2 arrays (two copies of the first\n        # array, and 2 copies of the second array)\n        pass\n        # if we've reached the end of the array\n        # we'll add this element to the end of the array\n        # we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n        # so we'll add this element to the end of the array\n    "
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # remove this once you have writeable tuples\n    # e.g. list1 = [1, 2, 3, 4]\n    #     list2 = (1, 2, 3, 4)\n    #     return list1 and list2\n    # e.g.\n    #  (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #  (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)\n    #    (1, 2, 3, 4)"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 or test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # 1. Declare a function called and_tuples to extract the elements\n    #    of the two tuples using the is_a_tuple() function.\n    #    We also want to return the values in a tuple.\n    #    The tuple should be a list of tuples and the elements are of the same type as the\n    #    tuples.\n    # 2. Call the is_a_tuple() function on the two tuples using the is_a_tuple() function.\n    #    We want to return a tuple of tuples.\n    # 3. Call the extract() function on the two tuples using the extract() function.\n    #    We want to return a tuple of tuples.\n    # 4. Call the is_a_tuple() function on the two tuples using the is_a_tuple() function.\n    #    We want to return a tuple of tuples.\n    # 5. Call the extract() function on the two tuples using the extract() function.\n    #    We want to return a tuple of tuples.\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1 and test_tup2) or (test_tup1 or test_tup2)\n    \n    \ntest_tup1 = [1, 2, 3]\ntest_tup2 = [4, 5, 6]\nprint(and_tuples(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup3 = test_tup1.copy()\n    test_tup3.extend(test_tup2)\n    return test_tup3\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    print(type(test_tup1))\n    print(type(test_tup2))\n    test_tup3 = test_tup1 + test_tup2\n    print(test_tup3)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # YOUR CODE HERE\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    test_tup1.append(1)\n    test_tup2.append(2)\n    test_tup2.append(3)\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup = test_tup1[1]\n    test_tup_2 = test_tup2[1]\n    if test_tup == test_tup_2:\n        return test_tup_2, test_tup_2, test_tup_2\n    else:\n        return test_tup_2, test_tup, test_tup_2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Write your code here.\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    import math2 as math\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if abs(b) == 0:\n        return c\n    else:\n        return (b*(a**2))/(2*a) + (c*a) + ((b**2) - (2*a*c))/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a * (c ** 2)) - (b * c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return lambda x: a*x**2 + b*x + c\n    \ndef parabola_quadratic(a, b, c, d): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return lambda x: a*x**2 + b*x**2 + c*x + d\n    \ndef parabola_cubic(a, b, c, d, e): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return lambda x: a*x**3 + b*x**2 + c*x + d + e\n    \ndef unit_cube(a, b, c, d): \n    '''\n    Write a function to find the unit cube of a given side of a cube.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**3) + d\n    \ndef sphere(radius): \n    '''\n    Write a function that returns the sphere area of a given radius.\n    '''\n    return lambda x: (pi*radius**2)*2*(x**3)\n    \ndef rectangle(a, b, c, d): \n    '''\n    Write a function that returns the rectangle area of a given side and bottom height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**4) + d\n    \ndef triangle(a, b, c, d): \n    '''\n    Write a function that returns the triangle area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**3) + d\n    \ndef parallelogram(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**4) + d\n    \ndef parallelogram_square(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**4) + d\n    \ndef parallelogram_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_square(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_square_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_square_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a given side and base height.\n    '''\n    return lambda x: a*(x**2) + b*(x**2) + c*(x**6) + d\n    \ndef parallelogram_cube_cube_cube(a, b, c, d): \n    '''\n    Write a function that returns the parallelogram area of a give"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a < 0 and b < 0 and c < 0):\n        print(\"There is no directrix of a parabola.\")\n    elif (a <= 0 and b <= 0 and c <= 0):\n        print(\"A directrix of a parabola is equal to the zero.\")\n    elif (a >= 0 and b >= 0 and c >= 0):\n        print(\"A directrix of a parabola is equal to the quadrilateral.\")\n    elif (a >= 0 and b >= 0 and c >= 0):\n        print(\"A directrix of a parabola is equal to the rectangle.\")\n    elif (a >= 0 and b >= 0 and c <= 0):\n        print(\"A directrix of a parabola is equal to the triangle.\")\n    elif (a >= 0 and b >= 0 and c >= 0):\n        print(\"A directrix of a parabola is equal to the parallelogram.\")\n    else:\n        print(\"A directrix of a parabola is equal to the circle.\")"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b * (b**2)) - (4 * a * c) \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a * b * b - 4 * a * c - 4 * b * c\n    y = 2 * a * b - 4 * a * c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return [a*x**2 + b*x + c for x in range(0, 200)]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    if a < 0:\n        a = -a\n        b = -b\n        c = -c\n    \n    x0, x1, x2 = a, b, c\n    if c!= 0:\n        delta = b*b - 4*a*c\n        x3 = (-b + delta**0.5)/2*a\n        x4 = (-b - delta**0.5)/2*a\n    else:\n        x3 = 0\n        x4 = 0\n    return x0, x1, x2, x3, x4\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a <= 0:\n        raise ValueError(\"a must be positive\")\n    if b <= 0:\n        raise ValueError(\"b must be positive\")\n    if c <= 0:\n        raise ValueError(\"c must be positive\")\n    x1 = a\n    x2 = b\n    x3 = c\n    result = [x1, x2, x3]\n    return result\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n    elif len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # find the length of both lists\n    length_list1 = len(list1)\n    length_list2 = len(list2)\n    # calculate the sum of both lists\n    sum = 0\n    for i in range(length_list1):\n        sum = sum + list1[i]\n    for i in range(length_list2):\n        sum = sum + list2[i]\n    # if sum is equal to one, then they have at least one common element\n    if sum == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = True\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            common = False\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        if len(list1) == 0 or len(list2) == 0:\n            return False\n        return list1[0] in list2 and common_element(list1[1:], list2[1:])\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return True\n    else:\n        for i in range(0, len(list2)):\n            if list1[i] == list2[i]:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    if count == len(list1):\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    if len(list1) == 1:\n        return list1[0] == list2[0]\n    if len(list2) == 1:\n        return list2[0] == list1[0]\n    if len(list1) < len(list2):\n        return common_element(list1[1:len(list1)], list2)\n    if len(list2) < len(list1):\n        return common_element(list1, list2[1:len(list2)])\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        if set(list1) == set(list2):\n            return True\n    else:\n        return False\n    \n    \nlist1 = [1,2,3,4,5,6,7,8,9]\nlist2 = [1,2,3,4,5,6,7,8,9]\nprint(common_element(list1, list2))"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # first determine if all the lists are of equal length\n    length = len(list1)\n    if length < 1:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(base,height):\n        return 2 * base + height / 3\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 + height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Write your code here\n    h=height\n    if h<base1:\n        h=base1\n    if h<base2:\n        h=base2\n    \n    if h>=base1:\n        return base1\n    if h>=base2:\n        return base2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    n = height\n    if base1<base2:\n        n = base1\n        base2 = base1\n    elif base2<base1:\n        n = base2\n        base1 = base2\n    else:\n        n = base1 + base2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height = float(height)\n    x = float(base1)\n    y = float(base2)\n    if (height<=0):\n        height=0\n    if (height<x):\n        x=float(height)\n    if (height<y):\n        y=float(height)\n    x1=float(x)\n    x2=float(y)\n    if (x<=0 or x>x2):\n        x=0\n    if (y<=0 or y>x1):\n        y=0\n    a=float(x1+x2)/2\n    a_1=float(y-a)\n    if (a_1==0):\n        a_1=0.000001\n    if (a_1<0):\n        a_1=a_1*(-1)\n    a_2=float(a_1+a)\n    if (a_2==0):\n        a_2=0.000001\n    if (a_2<0):\n        a_2=a_2*(-1)\n    a_3=float(a_2+a_1)\n    if (a_3==0):\n        a_3=0.000001\n    if (a_3<0):\n        a_3=a_3*(-1)\n    a_4=float(a_3+a_2)\n    if (a_4==0):\n        a_4=0.000001\n    if (a_4<0):\n        a_4=a_4*(-1)\n    a_5=float(a_4+a_3)\n    if (a_5==0):\n        a_5=0.000001\n    if (a_5<0):\n        a_5=a_5*(-1)\n    a_6=float(a_5+a_4)\n    if (a_6==0):\n        a_6=0.000001\n    if (a_6<0):\n        a_6=a_6*(-1)\n    a_7=float(a_6+a_5)\n    if (a_7==0):\n        a_7=0.000001\n    if (a_7<0):\n        a_7=a_7*(-1)\n    a_8=float(a_7+a_6)\n    if (a_8==0):\n        a_8=0.000001\n    if (a_8<0):\n        a_8=a_8*(-1)\n    a_9=float(a_8+a_7)\n    if (a_9==0):\n        a_9=0.000001\n    if (a_9<0):\n        a_9=a_9*(-1)\n    a_10=float(a_9+a_8)\n    if (a_10==0):\n        a_10=0.000001\n    if (a_10<0):\n        a_10=a_10*(-1)\n    a_11=float(a_10+a_9)\n    if (a_11==0):\n        a_11=0.000001\n    if (a_11<0):\n        a_11=a_11*(-1)\n    a_12=float(a_11+a_10)\n    if (a_12==0):\n        a_12=0.000001\n    if (a_12<0):\n        a_12=a_12*(-1)\n    a_13=float(a_12+a_11)\n    if (a_13==0):\n        a_13=0.000001\n    if (a_13<0):\n        a_13=a_13*(-1)\n    a_14=float(a_13+a_12)\n    if (a_14==0):\n        a_14=0.000001\n    if (a_14<0):\n        a_14=a_14*(-1)\n    a_15=float(a_14+a_13)\n    if (a_15==0):\n        a_15=0.000001\n    if (a_15<0):\n        a_15=a_15*(-1)\n    a_16=float(a_15+a_14)\n    if (a_16==0):\n        a_16=0.000001\n    if (a_16<0):\n        a_16=a_16*(-1)\n    a_17=float(a_16+a_15)\n    if (a_17==0):\n        a_17=0.000001\n    if (a_17<0):\n        a_17=a_17*(-1)\n    a_18=float(a_17+a_16)\n    if (a_18==0):\n        a_18=0.000001\n    if (a_18<0):\n        a_18=a_18*(-1)\n    a_19=float(a_18+a_17)\n    if (a_19==0):\n        a_19=0.000001\n    if (a_19<0):\n        a_19=a_19*(-1)\n    a_20=float(a_19+a_18)\n    if (a_20==0):\n        a_20=0.000001\n    if (a_20<0):\n        a_20=a_20*(-1)\n    a_21=float(a_20+a_19)\n    if (a_21==0):\n        a_21=0.000001\n    if (a_21<0):\n        a_21=a_21*(-1)\n    a_22=float(a_21+a_20)\n    if (a_22==0):\n        a_22=0.000001\n    if (a_22<0):\n        a_22=a_22*(-1)\n    a_23=float(a_22+a_21)\n    if (a_23==0):\n        a_23=0.000001\n    if (a_23<0):\n        a_23=a_23*(-1)\n    a_24=float(a_23+a_22)\n    if (a_24==0):\n        a_24=0.000001\n    if (a_24<0):\n        a_24=a_24*(-1)\n    a_25=float(a_24+a_23)\n    if (a_25==0):\n        a_25=0.000001\n    if (a_25<0):\n        a_25=a_25*(-1)\n    a_26=float(a_25+a_24)\n    if (a_26==0):\n        a_26=0.000001\n    if (a_26<0):\n        a_26=a_26*(-1)\n    a_27=float(a_26+a_25)\n    if (a_27==0):\n        a_27=0.000001\n    if (a_27<0):\n        a_27=a_27*(-1)\n    a_28=float(a_27+a_26)\n    if (a_28==0):\n        a_28=0.000001\n    if (a_28<0):\n        a_28=a_28*(-1)\n    a_29=float(a_28+a_27)\n    if (a_29==0):\n        a_29=0.000001\n    if (a_29<0):\n        a_29=a_29*(-1)\n    a_30=float(a_29+a_28)\n    if (a_30==0):\n        a_30=0.000001\n    if (a_30<0):\n        a_30=a_30*(-1)\n    a_31=float(a_30+a_29)\n    if (a_31==0):\n        a_31=0.000001\n    if (a_31<0):\n        a_31=a_31*(-1)\n    a_32=float(a_31+a_30)\n    if (a_32==0):\n        a_32=0.000001\n    if (a_32<"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #calculate the medians\n    #left border\n    left_trapezium=int(height/2)+1\n    left_trapezium_base=base1+left_trapezium\n    left_trapezium_height=int(height/2)\n    #right border\n    right_trapezium=height-left_trapezium\n    right_trapezium_base=base2+right_trapezium\n    right_trapezium_height=int(height/2)-1\n    #calculate the trapezium\n    trapezium=left_trapezium_base+right_trapezium_base\n    #calculate the medians\n    left_median=int(left_trapezium/2)+1\n    right_median=int(right_trapezium/2)+1\n    left_median_height=int(left_trapezium_height/2)\n    right_median_height=int(right_trapezium_height/2)-1\n    #calculate the medians\n    left_median_height=int(left_median_height/2)\n    right_median_height=int(right_median_height/2)\n    #calculate the trapezium\n    trapezium=left_median_height+right_median_height\n    #return the median\n    return trapezium/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        high = base1\n        low = base2\n    else:\n        high = base2\n        low = base1\n    if height > high and height < low:\n        return median_trapezium(high,low,height)\n    else:\n        return high if height < low else low\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #print('base1:', base1)\n    #print('base2:', base2)\n    #print('height:', height)\n    #print()\n    if (base1 < 0):\n        return -1\n    if (base2 < 0):\n        return -1\n    if (base1 == base2):\n        #print('base1 is base2')\n        #print()\n        return base1\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1>base2:\n        a,b = base1,base2\n        m = int(height/2)\n    else:\n        a,b = base2,base1\n        m = int(height/2)\n    m = int(m)\n    res = 0\n    if a<m:\n        print(\"invalid input\")\n    elif a>b:\n        print(\"invalid input\")\n    else:\n        for i in range(m,a):\n            res += 1/2\n            res += (i/2)**2\n            res += (i/2)**3\n            res += (i/2)**4\n        res /= (2*(m-a))\n        res *= (m-a)\n        res *= (m-a)\n        res *= (m-a)\n        res /= (2*(m-a))\n        print(\"%.0f\" % res)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    if arr[0] < number:\n        return False\n    return check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return False\n    else:\n        if arr[0] >= number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    if number >= arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number in arr:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 1 and arr[0] > number:\n        return False\n    else:\n        return check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    try:\n        if arr[number] > arr[number+1]:\n            return True\n        else:\n            return False\n    except IndexError:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return False\n    if number > arr[-1]:\n        return False\n    for i in range(len(arr)-1):\n        if number > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    \n    elif number > arr[0]:\n        return check_greater(arr[1:], number)\n    \n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def text_match_recursive(text):\n        if text.startswith('a') and text.endswith('b'):\n            return True\n        elif text.startswith('a'):\n            if text.endswith('b'):\n                return True\n            else:\n                return False\n        else:\n            if text.endswith('b'):\n                return True\n            else:\n                return False\n    return text_match_recursive(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # pattern = re.compile('a')\n    # print(pattern.search(text))\n    # pattern = re.compile('a', re.IGNORECASE)\n    # print(pattern.search(text))\n    # pattern = re.compile('a', re.ASCII)\n    # print(pattern.search(text))\n    # pattern = re.compile('a', re.IGNORECASE)\n    # print(pattern.search(text))\n    # pattern = re.compile('a', re.ASCII)\n    # print(pattern.search(text))\n    pattern = re.compile('a', re.I)\n    print(pattern.search(text))\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # this does not work in Python 3.3+\n    #pattern = re.compile(r'^a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(z(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(x(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s("
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return text.find(\"a\")!= -1 or text.find(\"b\")!= -1\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub(\"a[bc]\", \"b\", text)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n    # DO NOT TOUCH anything in this function\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace('\\n','')\n    if 'a' in text or 'b' in text:\n        text = re.findall(r'(?<!\\w)(?<=[a-zA-Z0-9])\\b', text)\n        for i in text:\n            if i[0] not in 'abcdefghijklmnopqrstuvwxyz':\n                return False\n    return text.upper() == text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # What would a b's be so that it won't match a b, if it was left alone?\n    # All b's have a?\n    # b should match a b in the middle of the string.\n    # A single 'a' should match a b.\n    # a should match b.\n    # The problem here is that a b is a non-deterministic thing, so\n    # we might match a b, and b c.  We do that by doing a wrong match.\n    # And we'll find a b c.  We can then match b c and b a.\n    # So we get something like:\n    # a??b??c\n    # b??a??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??b??c\n    # b??a??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??c\n    # b??b??"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"(a)(b)(c)\")\n    matches = pattern.findall(text)\n    print(matches)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.finditer(r'\\b[a-zA-Z]*\\b', text)\n    for match in matches:\n        print(\"{:<25}\".format(match.group()))\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    n = n % 10\n    n = n // 10\n    n = n % 10\n    n = n // 10\n    return n\ndef log(x) :\n    '''\n    Write a python function to find the logarithm of the input.\n    '''\n    x = abs(x)\n    x = x % 10\n    x = x // 10\n    return x\ndef test(x) :\n    '''\n    Write a python function to check whether the input is an Armstrong number.\n    '''\n    x = abs(x)\n    x = x % 10\n    x = x // 10\n    temp = 0\n    for i in range(10) :\n        temp = temp*10 + x\n    temp = temp % 10\n    temp = temp // 10\n    if temp == x :\n        return True\n    else :\n        return False\ndef main() :\n    '''\n    Write a python function to find the logarithm of the input.\n    '''\n    x = input(\"Give a number : \")\n    x = abs(int(x))\n    if x == 0 :\n        print(\"The given number is an Armstrong number\")\n        return\n    elif x < 0 :\n        print(\"The given number is not Armstrong number\")\n        return\n    elif not is_int(x) :\n        print(\"The given number is not an integer\")\n        return\n    x = log(x)\n    if test(x) :\n        print(\"The given number is an Armstrong number\")\n    else :\n        print(\"The given number is not an Armstrong number\")\n    return\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) is not int :\n        raise TypeError('n must be an integer')\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    i = len(str(n))\n    while i > 0 :\n        n = str(n)\n        last = n[len(n)-1]\n        n = n[:-1]\n        if int(last) > 9 :\n            break\n        i -= 1\n    return last\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    if last_digit > 9 :\n        last_digit = last_digit - 9\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n!= 0 :\n        n = n // 10\n        last_digit = n % 10\n        \n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) is not int : return None\n    n=str(n)\n    if n[-1]==\"0\" : return None\n    else : return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for i in range(len(list1)):\n        neg_nums.append(list1[i] * -1)\n    return neg_nums\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for i in range(len(list1)):\n        neg_num.append(abs(list1[i]))\n    return neg_num\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    def negative(num):\n        '''\n        To calculate the negative numbers of a list.\n        '''\n        neg = []\n        for i in num:\n            neg.append(-i)\n        return neg\n    return negative(list1)\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Your code here\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    newlist = []\n    for num in list1:\n        newlist.append(-num)\n    return newlist\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_nos.append(-list1[i])\n        else:\n            pass\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list=[]\n    for i in list1:\n        if i>0:\n            neg_nos_list.append(i)\n    return neg_nos_list\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if(str1[0]!=str1[-1]):\n        return str1\n    else:\n        return str1[1:-1]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1 or len(str1)<=1:\n        return str1\n    else:\n        end_pos = -1\n        index = 0\n        while index < len(str1):\n            if index % 2 == 0:\n                end_pos = index\n                break\n            index += 1\n        if end_pos >=0:\n            str1 = str1[:end_pos] + str1[end_pos+1:]\n        return str1\n        \nprint(remove_odd('pddi'))\nprint(remove_odd('pqw'))\nprint(remove_odd('pqw'))\nprint(remove_odd('dss'))\nprint(remove_odd('ppu'))\nprint(remove_odd('dss'))\nprint(remove_odd('ppu')"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    l = len(str1)\n    for i in range(l):\n        if str1[i] % 2!= 0:\n            str1[i] = str1[i] + str(i)\n    return str1\n    \ndef reverse_string(str1):\n    '''\n    Write a function that takes in a string and reverses the order of the characters.\n    '''\n    l = len(str1)\n    for i in range(l):\n        str1[i] = str1[l-1-i]\n    return str1\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function that takes in a string and removes punctuation.\n    '''\n    l = len(str1)\n    for i in range(l):\n        if str1[i] in \"!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\":\n            str1[i] = str1[i].replace(\"!\", \"\")\n            str1[i] = str1[i].replace(\"\\\"\", \"\")\n            str1[i] = str1[i].replace(\"$\", \"\")\n            str1[i] = str1[i].replace(\"%\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str1[i] = str1[i].replace(\"*\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"(\", \"\")\n            str1[i] = str1[i].replace(\")\", \"\")\n            str1[i] = str1[i].replace(\"?\", \"\")\n            str1[i] = str1[i].replace(\":\", \"\")\n            str1[i] = str1[i].replace(\";\", \"\")\n            str1[i] = str1[i].replace(\"<\", \"\")\n            str1[i] = str1[i].replace(\">\", \"\")\n            str1[i] = str1[i].replace(\"=\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str1[i] = str1[i].replace(\"!\", \"\")\n            str1[i] = str1[i].replace(\"-\", \"\")\n            str1[i] = str1[i].replace(\"*\", \"\")\n            str1[i] = str1[i].replace(\"/\", \"\")\n            str1[i] = str1[i].replace(\"@\", \"\")\n            str1[i] = str1[i].replace(\"$\", \"\")\n            str1[i] = str1[i].replace(\"%\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str1[i] = str1[i].replace(\"*\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"(\", \"\")\n            str1[i] = str1[i].replace(\")\", \"\")\n            str1[i] = str1[i].replace(\"_\", \"\")\n            str1[i] = str1[i].replace(\".\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"#\", \"\")\n            str1[i] = str1[i].replace(\"@\", \"\")\n            str1[i] = str1[i].replace(\"$\", \"\")\n            str1[i] = str1[i].replace(\"%\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str1[i] = str1[i].replace(\"!\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str1[i] = str1[i].replace(\"=\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"*\", \"\")\n            str1[i] = str1[i].replace(\"@\", \"\")\n            str1[i] = str1[i].replace(\"[\", \"\")\n            str1[i] = str1[i].replace(\"]\", \"\")\n            str1[i] = str1[i].replace(\"?\", \"\")\n            str1[i] = str1[i].replace(\"-\", \"\")\n            str1[i] = str1[i].replace(\"$\", \"\")\n            str1[i] = str1[i].replace(\"%\", \"\")\n            str1[i] = str1[i].replace(\"_\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\" \", \"\")\n            str1[i] = str1[i].replace(\"(\", \"\")\n            str1[i] = str1[i].replace(\")\", \"\")\n            str1[i] = str1[i].replace(\".\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"@\", \"\")\n            str1[i] = str1[i].replace(\"[\", \"\")\n            str1[i] = str1[i].replace(\"]\", \"\")\n            str1[i] = str1[i].replace(\"?\", \"\")\n            str1[i] = str1[i].replace(\"*\", \"\")\n            str1[i] = str1[i].replace(\"#\", \"\")\n            str1[i] = str1[i].replace(\"$\", \"\")\n            str1[i] = str1[i].replace(\"%\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str1[i] = str1[i].replace(\"!\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str1[i] = str1[i].replace(\"=\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"*\", \"\")\n            str1[i] = str1[i].replace(\"@\", \"\")\n            str1[i] = str1[i].replace(\"$\", \"\")\n            str1[i] = str1[i].replace(\"%\", \"\")\n            str1[i] = str1[i].replace(\"_\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\" \", \"\")\n            str1[i] = str1[i].replace(\"_\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"@\", \"\")\n            str1[i] = str1[i].replace(\"[\", \"\")\n            str1[i] = str1[i].replace(\"]\", \"\")\n            str1[i] = str1[i].replace(\".\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"_\", \"\")\n            str1[i] = str1[i].replace(\"@\", \"\")\n            str1[i] = str1[i].replace(\"[\", \"\")\n            str1[i] = str1[i].replace(\"]\", \"\")\n            str1[i] = str1[i].replace(\"?\", \"\")\n            str1[i] = str1[i].replace(\"_\", \"\")\n            str1[i] = str1[i].replace(\"+\", \"\")\n            str1[i] = str1[i].replace(\"$\", \"\")\n            str1[i] = str1[i].replace(\"%\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str1[i] = str1[i].replace(\"!\", \"\")\n            str1[i] = str1[i].replace(\"&\", \"\")\n            str"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    num_of_odd = 0\n    output = ''\n    for i in range(len(str1)):\n        if str1[i] % 2 == 1:\n            num_of_odd += 1\n        output += str1[i]\n        if num_of_odd == 2:\n            output += str1[i]\n            num_of_odd = 0\n    return output\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 is None or str1 == \"\":\n        return\n    i = 0\n    str1 = list(str1)\n    while i < len(str1):\n        if str1[i] % 2!= 0:\n            i += 1\n        else:\n            str1.pop(i)\n            i = 0\n    return ''.join(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # use list comprehension\n    # concat string with '#' and add each char to set\n    # remove '#'\n    # use set comprehension\n    # return string\n    return '#'.join([char for char in str1 if char % 2 == 1])\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(['a' if char % 2 == 1 else'' for char in str1])\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    str2 = str1.split(' ')\n    for i in range(len(str2)):\n        str2[i] = str2[i][-1]\n    str2 =''.join(str2)\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str(len(str1))[-1], '')\n    \ndef main():\n    \"\"\"\n    Do the job.\n    \"\"\"\n    str1 = '1, 2, 3, 4, 5, 6, 7, 8, 9, 10'\n    print(str1)\n    str2 = remove_odd(str1)\n    print(str2)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_new = ''\n    for i in str1:\n        if i % 2 == 1:\n            str_new += i\n    return str_new\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for bid_pair in test_list:\n        if bid_pair[0] > bid_pair[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_tuple = 0\n    counter = 0\n    for item in test_list:\n        if item[0] == item[1]:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_count = 0\n    for pair in test_list:\n        if pair[0] > pair[1]:\n            tuple_count += 1\n    return tuple_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[0] > pair[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Write your code here\n    count = 0\n    for x in test_list:\n        count += 1 if x == x[::-1] else 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item in test_list:\n        if item[1]!= item[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            if len(item)!= 2:\n                count = count + 1\n    return count\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    directions = 0\n    for i in range(len(test_list)-1):\n        if test_list[i+1][0] > test_list[i][0] and test_list[i+1][1] > test_list[i][1]:\n            directions += 1\n    return directions\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list_set = set(test_list)\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i] == test_list[j]):\n                continue\n            elif(test_list[i] < test_list[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # write your code here\n    return L[0]*(10**len(L)) + L[1]*(10**len(L)) + L[2]*(10**len(L)) + L[3]*(10**len(L)) + L[4]*(10**len(L)) + L[5]*(10**len(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [int(x) for x in L]\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    m = len(L)\n    result = 0\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    assert L, 'empty list'\n    if L:\n        assert len(L)>0, 'empty list'\n        return sum(L)\n    else:\n        return 0\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def convert_to_int_from_list(list):\n        '''\n        Convert each integer in the list to an integer.\n        '''\n        return [int(x) for x in list]\n    \n    return [convert_to_int_from_list(L[i:i+2]) for i in range(0,len(L),2)]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # count = L.count(0)\n    # print(f\"count: {count}\")\n    # return sum(L) - count\n    # # if L.count(0)!= len(L) :\n    # #     print(f\"{L} has duplicate 0's\")\n    # return sum(L) - sum(L[L.index(0):])\n    return sum(map(sum, zip(*L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    L = list(L)\n    L.sort()\n    return ''.join(L)\n    \ndef int_to_str(L, tab=False):\n    '''\n    Write a function that converts a list of integers into a string.\n    tab will add a tab in front of each element.\n    '''\n    \n    if tab:\n        return '\\t'.join(str(i) for i in L)\n    else:\n        return ''.join(str(i) for i in L)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #match the whole sentence\n    find_adverb=re.compile(\"[a-z]+s\")\n    find_adverb_positions=find_adverb.findall(text)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    tokens = text.split()\n    sentence_words = []\n    for token in tokens:\n        token = token.lower()\n        for i in range(len(token)):\n            if token[i] == \"a\" or token[i] == \"e\" or token[i] == \"i\" or token[i] == \"o\" or token[i] == \"u\":\n                sentence_words.append(token[i])\n        for i in range(len(token) - 1):\n            if token[i] == \"a\" or token[i] == \"e\" or token[i] == \"i\" or token[i] == \"o\" or token[i] == \"u\":\n                sentence_words.append(token[i])\n    adverb_position_count = 0\n    for word in sentence_words:\n        adverb_position = text.find(word)\n        if adverb_position!= -1:\n            adverb_position_count = adverb_position_count + 1\n    return adverb_position_count\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = re.findall(r'([A-Za-z]{1,})([A-Z]{1,})',text)\n    for word in words:\n        if word[0] == 'ADV':\n            return [word[1], word[2]]\n    return [-1, -1]\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb =''\n    adverb_positions = []\n    adverb_start_positions = []\n    first_adverb = True\n    i = 0\n    for i in range(len(text)):\n        if text[i] == \"a\" or text[i] == \"e\" or text[i] == \"i\" or text[i] == \"o\" or text[i] == \"u\" or text[i] == \"A\" or text[i] == \"E\" or text[i] == \"I\" or text[i] == \"O\" or text[i] == \"U\":\n            if first_adverb == True:\n                first_adverb = False\n            adverb = text[i]\n            adverb_positions.append((i, text.find(adverb)))\n            adverb_start_positions.append(i)\n        i += 1\n    return adverb_positions, adverb_start_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    ADVERB_R = re.compile('[a-z]+(?=[0-9])')\n    ADVERB_S = re.compile('[a-z]+(?=[0-9])')\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split('.')\n    adverb_list = ['e','i','o','u','ou','or','th','thi','tho','d','di','r','er','er']\n    adverb_positions = []\n    \n    for i in range(len(sentence)):\n        word = sentence[i]\n        word_pos = []\n        \n        if word[0] == 'a':\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'a' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'e' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'e' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'i' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'i' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'o' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'o' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'u' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'u' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'ou' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'ou' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'or' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'or' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'r' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'r' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'er' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'er' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'er' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'th' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'th' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'thi' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'thi' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'tho' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'tho' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'di' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'di' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'er' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'er' and word[1] in adverb_list:\n            for j in range(len(adverb_list)):\n                word_pos.append((i,j))\n            adverb_positions.append(word_pos)\n            \n        elif word[0] == 'th"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find adverbs\n    re_find_adverbs = re.compile(r'\\b(a|e|i|o|u|A|E|I|O|U)')\n    re_find_adverbs_positions = re.compile(r'^([1-9]\\d*[a-z]{2}[.]?)')\n    re_find_adverbs_positions_1 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.?!])')\n    re_find_adverbs_positions_2 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]?!])')\n    re_find_adverbs_positions_3 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_4 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??)')\n    re_find_adverbs_positions_5 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??)')\n    re_find_adverbs_positions_6 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]?)')\n    re_find_adverbs_positions_7 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??)')\n    re_find_adverbs_positions_8 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??)')\n    re_find_adverbs_positions_9 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_10 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_11 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_12 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_13 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_14 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_15 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_16 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_17 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_18 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_19 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_20 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_21 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_22 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_23 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_24 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_25 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_26 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_27 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_28 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_29 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_30 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_31 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_32 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_33 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_34 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_35 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_36 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_37 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_38 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_39 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_40 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_41 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_42 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_43 = re.compile(r'^([1-9]\\d*[A-Z]{2}[.]??!])')\n    re_find_adverbs_positions_44 = re.compile(r'^([1-9]\\d*[A-"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove the last part of the sentence\n    text = text[:-1]\n    \n    # Create a regular expression to find the adverbs\n    # adverb_pattern = r'(\\d+) ([a-z]+)'\n    # re.sub(adverb_pattern, r'\\1 \\2', text)\n    \n    # Call the re.sub() function\n    new_text = re.sub(r'\\b(\\d+)([a-z]+)', r'\\1 \\2', text)\n    \n    # Extract the first adverb, remove the space, convert to a list\n    adverbs = new_text.split()[:-1]\n    \n    # Initialise a dictionary to keep the position of the adverb\n    adverb_positions = {}\n    \n    # Loop through all the adverbs\n    for adverb in adverbs:\n        # Find the position of the adverb\n        pos = re.search(r'\\b(\\d+)([a-z]+)', adverb).group(1)\n        # Store the position\n        adverb_positions[adverb] = int(pos)\n        \n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regexp = r'\\b(adverb|verb|preposition|auxiliary|amod|mood|phrase|color|use|imperative|enhanced|explicit|attribute|useful|verb|determiner|arbiter|other)'\n    pattern = re.compile(regexp, re.IGNORECASE)\n    count = 0\n    for sentence in text:\n        count = count + 1\n        found = pattern.search(sentence)\n        if found:\n            return found.start()+1, count\n    return -1, -1\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # An adverb may be preceded or followed by an adjective\n    # e.g. \"a man\" is preceded by \"a man\" followed by \"a new person\"\n    # e.g. \"the apple\" is followed by \"the new apple\"\n    # e.g. \"a pipe\" is followed by \"a pipe\" followed by \"a gate\"\n    # e.g. \"a man\" is followed by \"a man\" followed by \"the new person\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*3\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 4*l*(l-1)*math.pi\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    area = (4/3)*(l*l*l)\n    print (\"The surface area of a cube of size {0} is {1}\".format(l, area))\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l == 0:\n        return 0\n    else:\n        return l * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # your code here\n    return 0"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                s += (i + 1) ** 3 * j + 2 * (i + 1) ** 2 * k + 1\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(0,l):\n        for j in range(0,l):\n            for k in range(0,l):\n                if (i!=j) and (i!=k) and (j!=k):\n                    area += (((i+1)*(j+1))*(l-1))\n    return(area)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # define the area of the cube\n    s = 0\n    # iterate through the y values of l\n    for y in l:\n        # iterate through the x values of l\n        for x in l:\n            # if y is negative, the cube is positive\n            if y < 0:\n                # add y to the s value\n                s += y\n            # if y is positive, the cube is negative\n            elif y > 0:\n                # subtract y to the s value\n                s -= y\n    # return the result\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s=0\n    if len(l)==4:\n        s=l[0]*l[1]*l[2]\n    elif len(l)==3:\n        s=l[0]*l[1]*l[2]*l[3]\n    elif len(l)==2:\n        s=l[0]*l[1]*l[2]\n    else:\n        s=0\n    return s\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    for i in range(0, n):\n        if nums[i] >= 0:\n            nums[i] = nums[i]/nums[i]\n    return nums\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = array('i', nums)\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    import math\n    # assert len(nums) > 0, 'array of integers is empty'\n    assert len(nums) % 2 == 0, 'array of integers must have even length'\n    \n    # if length of array is odd, there is no positive number\n    if len(nums) == 1:\n        return 0\n    \n    # step 1: get size of array\n    n = len(nums)\n    # step 2: put all negative numbers in the first half of the array\n    p1 = 0\n    for i in range(0, n, 2):\n        p1 = (p1 + nums[i])\n        # if the current index is less than or equal to the last index,\n        # remove the last positive number in the array\n        if p1 < nums[i]:\n            p1 = (p1 - nums[i])\n            # if the current index is greater than the last index,\n            # remove the last negative number in the array\n            if p1 > nums[i+1]:\n                p1 = (p1 - nums[i+1])\n                # print(p1)\n    \n    # step 3: calculate ratio of positive numbers\n    # start with the first positive number\n    p1 = (p1 + nums[0])\n    # step 4: go through the array to the last index and find the number of positive numbers\n    # by the length of the array\n    i = 1\n    while i < n:\n        if nums[i] >= p1:\n            p1 = p1 + nums[i]\n        i = i + 1\n    \n    return p1 / n\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # 1. arr2: positive numbers in an array, arr[0..n-1]\n    # 2. arr3: array of positive numbers\n    # 3. arr4: minimum positive numbers in an array\n    # 4. arr5: maximum positive numbers in an array\n    arr2 = []\n    arr3 = []\n    arr4 = []\n    arr5 = []\n    for num in nums:\n        if num > 0:\n            arr2.append(num)\n    for num in arr2:\n        arr3.append(num)\n    for num in arr3:\n        if num > 0:\n            arr4.append(num)\n    for num in arr4:\n        arr5.append(num)\n    arr6 = []\n    for num in arr5:\n        if num > 0:\n            arr6.append(num)\n    max = max(arr6)\n    arr6.remove(max)\n    min = min(arr6)\n    arr6.remove(min)\n    arr7 = []\n    for num in arr6:\n        arr7.append(num)\n    for num in arr7:\n        if num > 0:\n            arr7.remove(num)\n    arr8 = []\n    for num in arr7:\n        if num > 0:\n            arr8.append(num)\n    arr8.remove(max)\n    arr8.remove(min)\n    arr9 = []\n    for num in arr8:\n        arr9.append(num)\n    arr9.remove(max)\n    arr9.remove(min)\n    arr10 = []\n    for num in arr9:\n        arr10.append(num)\n    arr10.remove(max)\n    arr10.remove(min)\n    arr11 = []\n    for num in arr10:\n        arr11.append(num)\n    arr11.remove(max)\n    arr11.remove(min)\n    arr12 = []\n    for num in arr11:\n        arr12.append(num)\n    arr12.remove(max)\n    arr12.remove(min)\n    arr13 = []\n    for num in arr12:\n        arr13.append(num)\n    arr13.remove(max)\n    arr13.remove(min)\n    arr14 = []\n    for num in arr13:\n        arr14.append(num)\n    arr14.remove(max)\n    arr14.remove(min)\n    arr15 = []\n    for num in arr14:\n        arr15.append(num)\n    arr15.remove(max)\n    arr15.remove(min)\n    arr16 = []\n    for num in arr15:\n        arr16.append(num)\n    arr16.remove(max)\n    arr16.remove(min)\n    arr17 = []\n    for num in arr16:\n        arr17.append(num)\n    arr17.remove(max)\n    arr17.remove(min)\n    arr18 = []\n    for num in arr17:\n        arr18.append(num)\n    arr18.remove(max)\n    arr18.remove(min)\n    arr19 = []\n    for num in arr18:\n        arr19.append(num)\n    arr19.remove(max)\n    arr19.remove(min)\n    arr20 = []\n    for num in arr19:\n        arr20.append(num)\n    arr20.remove(max)\n    arr20.remove(min)\n    arr21 = []\n    for num in arr20:\n        arr21.append(num)\n    arr21.remove(max)\n    arr21.remove(min)\n    arr22 = []\n    for num in arr21:\n        arr22.append(num)\n    arr22.remove(max)\n    arr22.remove(min)\n    arr23 = []\n    for num in arr22:\n        arr23.append(num)\n    arr23.remove(max)\n    arr23.remove(min)\n    arr24 = []\n    for num in arr23:\n        arr24.append(num)\n    arr24.remove(max)\n    arr24.remove(min)\n    arr25 = []\n    for num in arr24:\n        arr25.append(num)\n    arr25.remove(max)\n    arr25.remove(min)\n    arr26 = []\n    for num in arr25:\n        arr26.append(num)\n    arr26.remove(max)\n    arr26.remove(min)\n    arr27 = []\n    for num in arr26:\n        arr27.append(num)\n    arr27.remove(max)\n    arr27.remove(min)\n    arr28 = []\n    for num in arr27:\n        arr28.append(num)\n    arr28.remove(max)\n    arr28.remove(min)\n    arr29 = []\n    for num in arr28:\n        arr29.append(num)\n    arr29.remove(max)\n    arr29.remove(min)\n    arr30 = []\n    for num in arr29:\n        arr30.append(num)\n    arr30.remove(max)\n    arr30.remove(min)\n    arr31 = []\n    for num in arr30:\n        arr31.append(num)\n    arr31.remove(max)\n    arr31.remove(min)\n    arr32 = []\n    for num in arr31:\n        arr32.append(num)\n    arr32.remove(max)\n    arr32.remove(min)\n    arr33 = []\n    for num in arr32:\n        arr33.append(num)\n    arr33.remove(max)\n    arr33.remove(min)\n    arr34 = []\n    for num in arr33:\n        arr34.append(num)\n    arr34.remove(max)\n    arr34.remove(min)\n    arr35 = []\n    for num in arr34:\n        arr35.append(num)\n    arr35.remove(max)\n    arr35.remove(min)\n    arr36 = []\n    for num in arr35:\n        arr36.append(num)\n    arr36.remove(max)\n    arr36.remove(min)\n    arr37 = []\n    for num in arr36:\n        arr37.append(num)\n    arr37.remove(max)\n    arr37.remove(min)\n    arr38 = []\n    for num in arr37:\n        arr38.append(num)\n    arr38.remove(max)\n    arr38.remove(min)\n    arr39 = []\n    for num in arr38:\n        arr39.append(num)\n    arr39.remove(max)\n    arr39.remove(min)\n    arr40 = []\n    for num in arr39:\n        arr40.append(num)\n    arr40.remove(max)\n    arr40.remove(min)\n    arr41 = []\n    for num in arr40:\n        arr41.append(num)\n    arr41.remove(max)\n    arr41.remove(min)\n    arr42 = []\n    for num in arr41:\n        arr42.append(num)\n    arr42.remove(max)\n    arr42.remove(min)\n    arr43 = []\n    for num in arr42:\n        arr43.append(num)\n    arr43.remove(max)\n    arr43.remove(min)\n    arr44 = []\n    for num in arr43:\n        arr44.append(num)\n    arr44.remove(max)\n    arr44.remove(min)\n    arr45 = []\n    for num in arr44:\n        arr45.append(num)\n    arr45.remove(max)\n    arr45.remove(min)\n    arr46 = []\n    for num in arr45:\n        arr46.append(num)\n    arr46.remove(max)\n    arr46.remove(min)\n    arr47 = []\n    for num in arr46:\n        arr47.append(num)\n    arr47.remove(max)\n    arr47.remove(min)\n    arr48 = []\n    for num in arr47:\n        arr48.append(num)\n    arr48.remove(max)\n    arr48.remove(min)\n    arr49 = []\n    for num in arr48:\n        arr49.append(num)\n    arr49.remove(max)\n    arr49.remove(mi"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total=0\n    for num in nums:\n        if num > 0:\n            total+=1\n    return total/len(nums)\ndef sum_range(nums, x, y):\n    '''\n    Write a function that takes an array of integers and calculates the sum\n    of the elements between the given ranges.\n    '''\n    # O(n) time\n    # O(1) space\n    # O(1) time complexity\n    # O(1) space complexity\n    total=0\n    for num in nums:\n        if x <= num <= y:\n            total+=num\n    return total\ndef filter_even_numbers(nums):\n    '''\n    Write a function that takes an array of numbers and returns only those\n    numbers that are divisible by 7.\n    '''\n    # O(n) time\n    # O(1) space\n    # O(1) time complexity\n    # O(1) space complexity\n    filter=[]\n    for num in nums:\n        if num%7==0:\n            filter.append(num)\n    return filter\ndef find_prime_numbers(nums):\n    '''\n    Write a function that takes an array of integers and returns\n    the prime numbers in the array.\n    '''\n    # O(n) time\n    # O(n) space\n    # O(1) time complexity\n    # O(1) space complexity\n    # O(1) time complexity\n    prime_nums=[]\n    for num in nums:\n        if num > 1:\n            for i in range(2,num):\n                if (num%i)==0:\n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums\ndef filter_prime_numbers(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    only those numbers that are prime numbers.\n    '''\n    # O(n) time\n    # O(1) space\n    # O(1) time complexity\n    # O(1) space complexity\n    prime_nums=[]\n    for num in nums:\n        if num > 1:\n            for i in range(2,num):\n                if (num%i)==0:\n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums\ndef main():\n    print('What numbers are positive?')\n    print('Enter positive numbers separated by a comma:')\n    nums=[]\n    n=int(input())\n    print('Enter positive numbers separated by a comma:')\n    for i in range(n):\n        nums.append(int(input()))\n    print(f'The total sum of positive numbers is {sum_range(nums,0,1)}.')\n    print(f'The ratio of positive numbers is {positive_count(nums)}.')\n    print(f'The sum of even numbers is {sum_range(nums,2,5)}.')\n    print(f'The ratio of positive numbers is {filter_even_numbers(nums)}.')\n    print(f'The sum of prime numbers is {sum_range(nums,0,1)}.')\n    print(f'The ratio of prime numbers is {filter_prime_numbers(nums)}.')\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    ratio = 0\n    for i in nums:\n        ratio = ratio + 1/i\n    return ratio\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    ratio = 0\n    for i in nums:\n        ratio = ratio + 1/i\n    return ratio\ndef is_pos(nums):\n    '''\n    Check if a number is positive.\n    '''\n    ratio = positive_count(nums)\n    if ratio > 0:\n        return True\n    elif ratio == 0:\n        return False\n    return False\ndef is_neg(nums):\n    '''\n    Check if a number is negative.\n    '''\n    ratio = negative_count(nums)\n    if ratio > 0:\n        return True\n    elif ratio == 0:\n        return False\n    return False\ndef neg_num(nums):\n    '''\n    Return a list of negative numbers.\n    '''\n    negative_list = array('d')\n    for i in nums:\n        if is_neg(nums):\n            negative_list.append(i)\n    return negative_list\ndef pos_num(nums):\n    '''\n    Return a list of positive numbers.\n    '''\n    positive_list = array('d')\n    for i in nums:\n        if is_pos(nums):\n            positive_list.append(i)\n    return positive_list\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    max_val = max(nums)\n    total_val = sum(nums)\n    \n    \n    \n    if(total_val%2!= 0):\n        total_val = total_val + 1\n        \n    return total_val/max_val\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    max_val = max(nums)\n    total_val = sum(nums)\n    \n    \n    \n    if(total_val%2!= 0):\n        total_val = total_val - 1\n        \n    return total_val/max_val\n    \n    \ndef mean(nums):\n    '''\n    Write a function to find the mean of an array of numbers.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total/len(nums)\n    \n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    counter=0\n    for i in range(len(nums)):\n        if nums[i]>=0:\n            counter+=1\n        else:\n            pass\n    if counter==0:\n        return 1\n    else:\n        return counter/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += num\n    \n    return positive_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p = sum(nums)\n    # if the sum of all positive numbers is greater than 0 then the ration should be\n    # (n - p) / (n - p)\n    if p > 0:\n        return (p - sum(nums)) / (n - p)\n    # if sum of all positive numbers is less than 0 then return 0.\n    else:\n        return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = max(list1)\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # your code goes here\n    max_num = -math.inf\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_num:\n                max_num = list1[i]\n    return max_num\n    \n    \nlist1 = [-7, 1, 2, 3, -4, 5, -10, -20]\nprint(largest_neg(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for number in list1:\n        if number < 0:\n            return number\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg=0\n    for i in list1:\n        if i < 0:\n            max_neg=max(max_neg,i)\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # create a new array\n    new_arr = []\n    \n    # loop through the array\n    for x in list1:\n        # add each value to the new array\n        new_arr.append(x)\n    \n    # sort the array\n    new_arr.sort()\n    \n    # return the new array\n    return new_arr[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    smallest = -10000000000\n    \n    for element in list1:\n        if(element < smallest):\n            smallest = element\n            \n    return smallest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    max = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n            if max < list1[i]:\n                max = list1[i]\n                \n    return max\n    \ndef find_even(list1): \n    '''\n    Write a python function to find the even numbers in the given list.\n    '''\n    \n    evens = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            evens.append(list1[i])\n    \n    return evens\n    \ndef find_even_neg(list1): \n    '''\n    Write a python function to find the even numbers in the given list.\n    '''\n    \n    evens = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 1:\n            evens.append(list1[i])\n    \n    return evens\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = 0\n    for i in list1:\n        if i < 0:\n            if largest_negative < i:\n                largest_negative = i\n    return largest_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    def largest_neg_num(list1):\n        '''\n        Write a python function to find the largest negative number from the given list.\n        '''\n        n = len(list1)\n        max_val = 0\n        max_i = 0\n        for i in range(0,n):\n            for j in range(0,n-i-1):\n                if list1[j] > list1[j+1] and list1[j] > max_val:\n                    max_val = list1[j]\n                    max_i = j+1\n        return max_val, max_i\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    i = 1\n    max = -sys.maxsize\n    while i < len(list1):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n            if list1[i] > max:\n                max = list1[i]\n        i += 1\n    return max\n        \n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    test_list_copy = test_list.copy()\n    for element in test_list_copy:\n        test_list_copy.remove(element)\n        test_list_copy.insert(0, element)\n    \n    trimmed = []\n    for element in test_list_copy:\n        if element not in trimmed:\n            trimmed.append(element)\n    \n    return trimmed\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    for t in test_list:\n        if len(t) <= K:\n            t = t[:K]\n        \n        test_list.remove(t)\n        \n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output_list = []\n    for item in test_list:\n        if len(item) == K:\n            output_list.append(item[:K])\n        elif len(item) < K:\n            output_list.append(item)\n        elif len(item) > K:\n            item = item[:K]\n            output_list.append(item)\n    return output_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i = 0\n    while i < len(test_list):\n        while i < len(test_list) and test_list[i][0] == test_list[i+1][0]:\n            test_list.pop(i)\n            i = i + 1\n        i = i + 1\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        if len(item)!= K:\n            new_list.append(item)\n        else:\n            new_list.append(item[:K])\n    return tuple(new_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # your code goes here\n    temp = []\n    for item in test_list:\n        temp.append(item[:K])\n    test_list = temp\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    if not test_list:\n        return\n    \n    if len(test_list) == 1:\n        return test_list[0]\n    \n    result = []\n    for i in range(len(test_list)):\n        if i!= 0:\n            result.append(test_list[i])\n            \n        if i + 1 < len(test_list):\n            result.append(test_list[i + 1])\n    \n    return tuple(result)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        test_list.remove(i)\n    return test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) < K:\n        test_list = test_list[:len(test_list)-K]\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #first get the length of the tuple\n    size1 = len(test_tup1)\n    size2 = len(test_tup2)\n    \n    #create an empty tuple\n    tuple_ = []\n    \n    #create an empty tuple for addition\n    for i in range(size1):\n        tuple_.append(0)\n    \n    #create an empty tuple for subtraction\n    for i in range(size2):\n        tuple_.append(0)\n    \n    for i in range(size1):\n        for j in range(size2):\n            tuple_[j] += test_tup1[i] * test_tup2[j]\n    \n    return tuple_\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Declare tuple\n    tup_1 = (1, 2, 3)\n    tup_2 = (4, 5, 6)\n    # Add tuple element 1 to tuple element 2\n    tup_2 = tup_2 + tup_1\n    # Print index wise result\n    print(tup_2)\n    return tup_2\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('ERROR: index_multiplication: length of tuple 1 is not equal to length of tuple 2')\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    print('\\nIndex wise multiplication:')\n    print('-------------------\\n')\n    for i in range(len(tup1)):\n        print(tup1[i])\n        print(tup2[i])\n        print(tup1[i]*tup2[i])\n    print('\\n-------------------\\n')\n    return\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # pass the test cases and get the result\n    test_tup1_sorted = sorted(test_tup1)\n    test_tup2_sorted = sorted(test_tup2)\n    print(test_tup1_sorted, test_tup2_sorted)\n    # get the number of elements of the tuples to be multiplied\n    n = len(test_tup1)\n    # declare empty lists to store the result of each operation\n    multi_tuple = []\n    # generate a tuple of all the elements of the two tuples\n    multi_tuple = test_tup1_sorted + test_tup2_sorted\n    # iterate over the whole tuple, and get the result of the operation\n    # add all the results together\n    for element in multi_tuple:\n        print(element)\n        print(type(element))\n        print('-----------------------------------')\n        print('',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')\n        print(' ',' ',' ',' ')"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1 = 0\n    index2 = 0\n    res = ()\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99\n    '''\n    return 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1, index2 = 0, 0\n    final_result = (0, 0)\n    while index1 < len(test_tup1) and index2 < len(test_tup2):\n        index1_result = test_tup1[index1]*test_tup2[index2]\n        final_result = (final_result[0] + index1_result, final_result[1] + index2_result)\n        index1 += 1\n        index2 += 1\n    return final_result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    def index_multiplication_function(tup1, tup2):\n        '''\n        Finds the index of each element in the tuple, and then multiplies them by the tuple's second element.\n        '''\n        index_mul = []\n        \n        for i in range(len(tup1)):\n            index_mul.append(tup1[i]*tup2[i])\n        return index_mul\n    \n    index_mul = index_multiplication_function(test_tup1, test_tup2)\n    return index_mul\n    \n    \n    "
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in lst:\n        count+=i\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur_count = Counter(tup)\n    for ele in occur_count: \n        lst.append(ele)\n    return lst \n    "
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = 0\n    for i in range(len(tup)):\n        occ += lst[tup[i]]\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_counter = Counter(lst)\n    occur = 0\n    for element in tup:\n        occur += tup_counter[element]\n    return occur\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup[0]) \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # TODO: Write your code here\n    #lst=tup.split(\",\")\n    # if not lst : raise ValueError\n    # counter = Counter(lst)\n    # for i in counter.values():\n    #     if i == 1 :\n    #         print(tup,i)\n    #     else :\n    #         print(tup,i,i*i)\n    \n    # if len(tup) < 2:\n    #     for i in tup:\n    #         print(i)\n    # else:\n    #     # print(tup)\n    #     if tup[0] == tup[-1]:\n    #         print(tup)\n    #     else:\n    #         # print(tup)\n    #         for i in tup:\n    #             if i == tup[0]:\n    #                 print(i)\n    #             else:\n    #                 print(i, end=\" \")\n    #     # print(tup)\n    #     for i in tup:\n    #         print(i,end=\" \")\n    #     # print(tup)\n    #     for i in tup:\n    #         print(i, end=\" \")\n    #         print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # print(tup)\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i in tup:\n    #     #     print(i, end=\" \")\n    #     # print()\n    #     # print(tup)\n    #     # print()\n    #     # for i i"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = dict(Counter(lst))\n    occ.clear()\n    for key in tup:\n        occ[key] = tup.count(key)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = dict() \n    for i in tup: \n        occurrence[i] = occurrence.get(i, 0) + 1 \n    return occurrence \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            lst.remove(tup[i])\n    return len(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i in lst:\n            count += 1\n    return count\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube_num(n):\n        cubes = 0\n        for i in nums:\n            cubes += i**3\n        return cubes\n    return cube_num(nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if len(nums) < 1:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]*3\n    if len(nums) == 2:\n        return [nums[0]**2,nums[1]**3]\n    if len(nums) == 3:\n        return [nums[0]**3,nums[1]**2,nums[2]]\n    # Fibonacci\n    l,r = [],[]\n    for x in range(len(nums)):\n        if x == 0:\n            l.append(nums[x])\n        elif x == 1:\n            r.append(nums[x])\n        else:\n            l.append(nums[x] + l[x-1] + r[x-2])\n            r.append(nums[x] + l[x-1] + r[x-2])\n    return [l[n]**2 for n in range(len(l))] + [r[n]**3 for n in range(len(l))]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [0,0,0]\n    cube[0] = nums[0]*nums[0]*nums[0]\n    cube[1] = nums[1]*nums[1]*nums[1]\n    cube[2] = nums[2]*nums[2]*nums[2]\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for i in range(len(nums)):\n        cube.append(nums[i]*nums[i]*nums[i])\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num*num*num)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num*num*num)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # My solution\n    # def cube_nums(nums):\n    #     return [n**3 for n in nums]\n    # return cube_nums(nums)\n    \n    # better solution\n    def cube_nums(nums):\n        cube_list = [num ** 3 for num in nums]\n        return cube_list\n    \n    return cube_nums(nums)\n    \n    \nprint(cube_nums([1,2,3,4,5]))\nprint(cube_nums([1,2,3,4]))\nprint(cube_nums([-6,-9,12,18,22,42]))\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return sum([num**3 for num in nums])**3\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_nums = []\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += i\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num_list = []\n    for i in range(n):\n        num_list.append(i)\n    total = 0\n    for i in range(n):\n        total += num_list[i]\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    print(sum)\n    \ncal_sum(100)\ncal_sum(200)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(n): \n        sum+=i \n    return sum \n    \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        print(\"You cannot divide by zero\")\n        return \"Error\"\n    else:\n        sum = 0\n        for i in range(1, n + 1):\n            sum += i\n        return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #initialize sum\n    sum = 0\n    #loop through the numbers\n    for i in range(n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 0\n    sum = 0\n    while(i<=n):\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        sum += num\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n > 0:\n        return n + sum(range(1,n+1))\n    else:\n        return -1\n        \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        l_split = l.split(str)\n        if len(l_split) == 0:\n            return 0\n        elif len(l_split) == 1:\n            return int(l_split[0])\n        else:\n            return l_split[1].split(',')[0]\n    except:\n        return 0\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l.sort()\n    for i in range(len(l)):\n        j = str.index(l[i])\n        l[i] = str[j:j+l[i]]\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not isinstance(l, list):\n        l = [l]\n    \n    if not isinstance(str, list):\n        str = [str]\n    \n    if len(str) == 0:\n        return\n    \n    if len(str) == 1:\n        return str[0]\n    \n    l.sort(key = lambda x: x[:l.index(str[0])])\n    \n    if len(l) > 1:\n        return extract_string(str[1:], l)\n    \n    return str[0]"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return \"\"\n    s = \"\"\n    for i in range(len(str)):\n        s += str[i]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    while True:\n        if len(str) < l:\n            break\n        else:\n            yield str[:l]\n            str = str[l:]\n    yield str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str.split(\" \")\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_string = ''\n    for index in range(len(str)):\n        if index >= l:\n            new_string += str[index]\n    return new_string\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str = str.replace('\\n','')\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 'end' or l == 'end of list':\n        return 'end'\n    elif l[0] == '[' and l[-1] == ']':\n        return extract_string(str, l[1:-1])\n    else:\n        return str[l[0]:l[-1]]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(0, len(l), l):\n        str[i] = l[i]\n    return str\n    \ndef remove_tuple(t):\n    '''\n    Remove a tuple from a given list\n    '''\n    tmp = t[1]\n    t[1] = t[0]\n    t[0] = tmp\n    return t\n    \ndef get_indexes(string,substring):\n    '''\n    Get all indexes where substring is in a string\n    '''\n    tmp = []\n    for i in range(len(string)):\n        if string[i] == substring:\n            tmp.append(i)\n    return tmp\n    \ndef get_nums(str):\n    '''\n    Get all numbers from a string\n    '''\n    nums = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            nums.append(str[i])\n    return nums\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    s = re.sub(r'\\s+','', text1)\n    return s.strip()\ndef extract_int_from_string(s):\n    '''\n    Write a function to extract the first integer from the given string.\n    '''\n    num = re.findall('\\d+', s)\n    if len(num) == 0:\n        return None\n    else:\n        num = num[0]\n        return int(num)\ndef extract_int_from_string_list(s):\n    '''\n    Write a function to extract the first integer from the given string.\n    '''\n    num = re.findall('\\d+', s)\n    if len(num) == 0:\n        return None\n    else:\n        num = num[0]\n        return num\ndef extract_int_from_string_list_and_remove_whitespaces(s):\n    '''\n    Write a function to extract the first integer from the given string.\n    '''\n    num = re.findall('\\d+', s)\n    if len(num) == 0:\n        return None\n    else:\n        num = num[0]\n        return extract_int_from_string(num)\ndef is_valid_int(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid integer and False otherwise.\n    '''\n    try:\n        s = extract_int_from_string(s)\n        return s is not None\n    except:\n        return False\ndef is_valid_float(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid floating point number and False otherwise.\n    '''\n    try:\n        s = extract_float(s)\n        return s is not None\n    except:\n        return False\ndef extract_float(s):\n    '''\n    Write a function that takes a string as input and returns a floating point number.\n    '''\n    num = re.findall('\\d+\\.\\d+', s)\n    if len(num) == 0:\n        return None\n    else:\n        num = num[0]\n        return float(num)\ndef extract_string(s):\n    '''\n    Write a function that takes a string as input and returns it as a string.\n    '''\n    return s\ndef is_valid_string(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid string and False otherwise.\n    '''\n    try:\n        s = extract_string(s)\n        return s is not None\n    except:\n        return False\ndef extract_data_from_string(s):\n    '''\n    Write a function that takes a string as input and returns it as a string.\n    '''\n    return s\ndef extract_data_from_string_list(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef get_data_from_string_list(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef get_int_from_data_from_string_list(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef remove_int_from_string_list(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef is_valid_float_list(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid list of floats and False otherwise.\n    '''\n    try:\n        s = extract_float_list(s)\n        return s is not None\n    except:\n        return False\ndef extract_float_list(s):\n    '''\n    Write a function that takes a string as input and returns a list of floats.\n    '''\n    num = re.findall('\\d+\\.\\d+', s)\n    if len(num) == 0:\n        return None\n    else:\n        num = num[0]\n        return num\ndef is_valid_float_list(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid list of floats and False otherwise.\n    '''\n    try:\n        s = extract_float_list(s)\n        return s is not None\n    except:\n        return False\ndef is_valid_bool(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid boolean and False otherwise.\n    '''\n    try:\n        s = extract_bool(s)\n        return s is not None\n    except:\n        return False\ndef extract_bool(s):\n    '''\n    Write a function that takes a string as input and returns it as a boolean.\n    '''\n    num = re.findall('\\d+', s)\n    if len(num) == 0:\n        return None\n    else:\n        num = num[0]\n        return bool(int(num))\ndef extract_bool_list(s):\n    '''\n    Write a function that takes a string as input and returns a list of booleans.\n    '''\n    num = re.findall('\\d+', s)\n    if len(num) == 0:\n        return None\n    else:\n        num = num[0]\n        return num\ndef get_bool_from_data_from_string_list(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef get_bool_from_data_from_string_list_and_remove_whitespaces(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef is_valid_bool_list(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid list of booleans and False otherwise.\n    '''\n    try:\n        s = extract_bool_list(s)\n        return s is not None\n    except:\n        return False\ndef is_valid_bool_list_and_remove_whitespaces(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid list of booleans and False otherwise.\n    '''\n    try:\n        s = extract_bool_list_and_remove_whitespaces(s)\n        return s is not None\n    except:\n        return False\ndef remove_bool_from_string_list(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef get_bool_from_data_from_string_list_and_remove_whitespaces(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef get_bool_from_data_from_string_list_and_remove_whitespaces(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef remove_bool_from_string_list_and_remove_whitespaces(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef is_valid_bool_list_and_remove_whitespaces(s):\n    '''\n    Write a function that takes a string as input and returns True if it is a valid list of booleans and False otherwise.\n    '''\n    try:\n        s = extract_bool_list_and_remove_whitespaces(s)\n        return s is not None\n    except:\n        return False\ndef get_bool_from_data_from_string_list_and_remove_whitespaces(s):\n    '''\n    Write a function that takes a string as input and returns it as a list.\n    '''\n    return s\ndef get_bool_from_data_from_string_list_and_remove_whitespaces(s):\n    '''\n    Write a function that takes a string as input and return"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # using regular expressions\n    result = re.sub(r'\\s+','', text1)\n    # remove all whitespaces\n    result = re.sub(r'\\s+','', result)\n    # return the result\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.replace('\\n',' ')\n    return text2.replace('\\t',' ')\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    text2=text1.replace(',',' ')\n    text2=text2.replace('.',' ')\n    text2=text2.replace('!',' ')\n    text2=text2.replace('?',' ')\n    text2=text2.replace(':',' ')\n    text2=text2.replace(';',' ')\n    text2=text2.replace('\"',' ')\n    text2=text2.replace('(','')\n    text2=text2.replace(')',' ')\n    text2=text2.replace('-',' ')\n    return text2.replace('\\n',' ')\ndef remove_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text2=text1.replace('.',' ')\n    text2=text2.replace('!',' ')\n    text2=text2.replace('?',' ')\n    text2=text2.replace(':',' ')\n    text2=text2.replace(';',' ')\n    text2=text2.replace('\"',' ')\n    text2=text2.replace('(',' ')\n    text2=text2.replace(')',' ')\n    return text2.replace('-',' ')\ndef remove_words(text1):\n    '''\n    Write a function to remove all words from the given string.\n    '''\n    text2=text1.replace('.',' ')\n    text2=text2.replace('!',' ')\n    text2=text2.replace('?',' ')\n    text2=text2.replace(':',' ')\n    text2=text2.replace(';',' ')\n    text2=text2.replace('\"',' ')\n    text2=text2.replace('(',' ')\n    text2=text2.replace(')',' ')\n    return text2.replace('\\n',' ')\ndef remove_punctuation2(text1):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    text2=text1.replace(',',' ')\n    text2=text2.replace('.',' ')\n    text2=text2.replace('!',' ')\n    text2=text2.replace('?',' ')\n    text2=text2.replace(':',' ')\n    text2=text2.replace(';',' ')\n    text2=text2.replace('\"',' ')\n    text2=text2.replace('(',' ')\n    text2=text2.replace(')',' ')\n    return text2.replace('-',' ')\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove newlines\n    text1 = text1.replace(\"\\n\", \"\")\n    # Remove spaces\n    text1 = text1.replace(\"  \", \" \")\n    # Remove punctuation\n    text1 = text1.replace(\".\", \"\")\n    text1 = text1.replace(\"?\", \"\")\n    text1 = text1.replace(\"!\",\"\")\n    text1 = text1.replace(\"(\",\"\")\n    text1 = text1.replace(\")\",\"\")\n    text1 = text1.replace(\",\",\" \")\n    text1 = text1.replace(\";\",\"\")\n    text1 = text1.replace(\"-\",\"\")\n    text1 = text1.replace(\"\\t\",\"\")\n    text1 = text1.replace(\"\\n\",\"\")\n    # Remove numbers\n    text1 = re.sub(r\"\\d+\", \"\", text1)\n    # Remove emojis\n    text1 = re.sub(r\"\\*\\*\", \"\", text1)\n    # Remove twitter handles\n    text1 = re.sub(r\"http\\S+\", \"\", text1)\n    # Remove numbers\n    text1 = re.sub(r\"\\d+\", \"\", text1)\n    # Remove urls\n    text1 = re.sub(r\"http\\S+\", \"\", text1)\n    # Remove digits\n    text1 = re.sub(r\"\\D\", \"\", text1)\n    # Remove letters\n    text1 = re.sub(r\"\\W\", \"\", text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' +','', text1).replace('  ', '').replace('  \\n', '').replace('  \\t', '').replace('  \\r', '')\n    text1 = re.sub('^\\s+', '', text1).replace('\\s+', '')\n    text1 = re.sub('$\\n$', '', text1).replace('\\n\\n', '')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # create a new string that does not contain whitespace\n    new_text = \"\"\n    # iterate over the string\n    for char in text1:\n        if char not in'\\n\\t':\n            new_text += char\n    # remove whitespace\n    new_text = new_text.replace(\" \",\"\")\n    # return the new string\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = \"\"\n    text3 = \"\"\n    for char in text1:\n        if char!= \" \":\n            text2 += char\n        else:\n            text3 += char\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Your code here\n    #print(text1)\n    text1=text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions\n    # Replace all whitespaces with a single space\n    return re.sub(\"\\s+\", \" \", text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    sale_amount = sale_amount*0.30\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == 0:\n        return 0.0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    elif actual_cost < sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return actual_cost\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n / math.factorial(n) if n % 2 == 0 else n\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    while n % 2 == 0:\n        n = n / 2\n        factors.append(2)\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        while n % 2 == 0:\n            n = n / 2\n            factors.append(2)\n        if n == 3:\n            return 4\n        else:\n            while n % 3 == 0:\n                n = n / 2\n                factors.append(3)\n            if n == 4:\n                return 8\n            else:\n                while n % 4 == 0:\n                    n = n / 2\n                    factors.append(4)\n                return n \ndef perfect_square(n) : \n    '''\n    Write a python function to find the perfect square of a number.\n    '''\n    sq = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            sq.append(i)\n            sq.append(n // i)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    else:\n        for i in sq:\n            if i * i == n:\n                return i\ndef isprime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 2:\n        return True\n    if n < 2 or n%2 == 0:\n        return False\n    if n <= 3:\n        return True\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef isprime_check(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n < 2 or n%2 == 0:\n        return False\n    if n <= 3:\n        return True\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef check_permutations(n):\n    '''\n    Write a python function to find all permutations of a given number.\n    '''\n    permutations = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        permutations.append(i)\n        permutations.append(n-i)\n    return permutations\ndef check_permutation(n, k):\n    '''\n    Write a python function to check if a given permutation is a permutation of a given number.\n    '''\n    if len(k) == 0:\n        return True\n    if len(k) == 1:\n        return n - k[0] == 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if check_permutation(n-i, k[1:]) == True:\n            return True\n    return False\ndef palindrome(n):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n%i == 0:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n%i == 0:\n            return False\n    return True\ndef is_palindrome_check(n):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n%i == 0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef factorize(n):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    p = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            p.append(i)\n            p.append(n//i)\n    return p\ndef prime_factors_check(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            return False\n    return True\ndef prime_factors_check_check(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            return False\n    return True\ndef prime_factors_check_check2(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_check(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            return False\n    return True\ndef check_perfect_square(n):\n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n%i == 0:\n            return False\n    return True\ndef perfect_square_check(n):\n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n%i == 0:\n            return False\n    return True\ndef perfect_squar"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    if n == 0 :\n        return 0\n    elif n % 2 == 0 :\n        return 2 * sumofFactors(n // 2)\n    else :\n        return math.floor(math.sqrt(n)) * math.floor(math.sqrt(n)) + sumofFactors(n//2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    ans = 0\n    for i in range(1, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans += i\n    if ans == 0 : \n        ans = 1\n    return ans \ndef hasEqualDigits(n): \n    '''\n    Write a python function that takes a number as an input \n    and returns True if it has only one digit that is a multiple of 3, \n    otherwise False is returned.\n    '''\n    ans = 0\n    for i in range(1, int(math.sqrt(n))) : \n        if (n % i == 0) : \n            ans += 1\n        if (ans == 1) : \n            return True\n    return False\ndef isHarmonic(n): \n    '''\n    Write a python function that takes a number as an input \n    and returns True if it is a harmonic number otherwise False is returned.\n    '''\n    ans = 0\n    for i in range(1, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans += 1\n        if ans == 1 : \n            return True\n    return False\ndef isPermutation(n): \n    '''\n    Write a python function that takes a number as an input \n    and returns True if it is a permutation of numbers, otherwise False is returned.\n    '''\n    n = int(n) \n    ans = True\n    for i in range(1, n): \n        if n % i == 0: \n            ans = False\n            break\n    return ans \ndef isUnique(num): \n    '''\n    Write a python function that takes a number as an input \n    and returns True if it is unique otherwise False is returned.\n    '''\n    num = int(num) \n    ans = False\n    if num <= 0 : \n        return False\n    for i in range(2, int(math.sqrt(num))+1): \n        if num % i == 0: \n            ans = True \n            break\n    return ans \ndef isEqual(n1, n2) : \n    '''\n    Write a python function that takes two number as an input and return True if one is equal to the other else return False.\n    '''\n    ans = n1 == n2 \n    return ans \ndef isprime(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a prime number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isPerfect(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a perfect number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isDivisible(n, d): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a divisible number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 and d % i == 0 : \n            ans = False\n            break\n    return ans \ndef isTautology(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a tautology number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isFractional(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a fractional number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isPrimeNumber(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a prime number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef checkPrime(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is prime else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isPerfectNumber(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a perfect number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isCompact(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a compact number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isPrimeNumber(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is prime number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))) : \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isParabola(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a parabola number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))): \n        if (n % i == 0) and (i > 1) : \n            ans = False\n            break\n    return ans \ndef isGreater(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a higher number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isSmaller(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a smaller number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isDecimal(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is a decimal number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isEven(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is an even number else False is returned.\n    '''\n    ans = True\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 : \n            ans = False\n            break\n    return ans \ndef isOdd(n): \n    '''\n    Write a python function that takes a number as an input and returns True if it is an odd number else False is returned."
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 0\n    j = 1\n    k = n\n    sum = 0\n    while (k>0):\n        if(k%2 == 0):\n            sum = sum + j\n        i = i + 1\n        j = j + (k//2)\n        k = k//2\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, n+1) :\n        if(n%i==0) : \n            s = s + i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1 : \n        return 1\n    elif n % 2 == 0 : \n        return n + sumofFactors(n//2) \n    else : \n        return sumofFactors(n//2) + (n%2)\ndef gcd(a,b) : \n    '''\n    Write a python function to find the GCD of a number.\n    '''\n    if a == b : \n        return a \n    if (a % b) == 0 : \n        return b \n    else : \n        return gcd(b,a%b) \ndef lcm(a,b) : \n    '''\n    Write a python function to find the LCM of a number.\n    '''\n    if a == b : \n        return a \n    if (a % b) == 0 : \n        return b \n    else : \n        return (a*b)/gcd(a,b) \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1,n) : \n        fact = fact * (i+1)\n    return fact\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 2 : \n        return True \n    if n == 1 : \n        return False \n    if (n % 2 == 0) : \n        return False\n    if n > 2 and n % 2 == 0 : \n        for i in range(3, n, 2) : \n            if n % i == 0 : \n                return False\n    else : \n        for i in range(3, n, 2) : \n            if n % i == 0 : \n                return False\n    return True\ndef f(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if isPrime(n) : \n        fact = 1 \n        for i in range(1,t+1) : \n            fact = fact * n \n        return fact \n    else : \n        return \"Factorial does not exist\"\ndef multiple(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,t+1) : \n        fact = fact * n \n    return fact \ndef sequence(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * n \n    return fact \ndef deg_of_factorial(n) : \n    '''\n    Write a python function to calculate the degrees of factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,n+1) : \n        fact = fact * (i+1)\n    deg = fact / factorial(n)\n    return deg \ndef polynomial(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * n \n    return fact \ndef quadratic(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)\n    return fact \ndef quadratic_square(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)**2\n    return fact \ndef cubic_root(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)**3\n    return fact \ndef cube_root(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)**3\n    return fact \ndef euclidean_distance(n,t) : \n    '''\n    Write a python function to calculate the euclidean distance of a given number.\n    '''\n    dist = 0 \n    for i in range(1,n+1) : \n        dist = dist + (i+1)**2\n    dist = math.sqrt(dist)\n    return dist\ndef harmonic_mean(n,t) : \n    '''\n    Write a python function to calculate the harmonic mean of a given number.\n    '''\n    mean = 1 \n    for i in range(1,t+1) : \n        mean = mean * (i+1)**2\n    mean = mean / (n**2)\n    return mean \ndef fahm(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)\n    return fact \ndef fibonacci(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)\n    return fact \ndef fibonacci_square(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)**2\n    return fact \ndef fibonacci_cube(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)**3\n    return fact \ndef fibonacci_prime(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)**2\n    fact = fact * (math.sqrt(n))\n    return fact \ndef factorial_prime(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)**2\n    fact = fact * (math.sqrt(n))\n    return fact \ndef factorial_square(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)\n    fact = fact * (math.pow(n,2))\n    return fact \ndef factorial_cube(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    fact = 1 \n    for i in range(1,t+1) : \n        fact = fact * (i+1)**3\n    fact = fact * (math.pow(n,3))\n    return fact \ndef factorial_prime_square(n,t) : \n    '''\n    Write a python function to calculate the factorial of a given number"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # defining factors \n    for i in range(2,int(math.sqrt(n))+1):\n        if (n%i == 0):\n            return n//i \n    return -1\n    \ndef sub(n) : \n    '''\n    Write a python function to calculate the sum of sub of an integer number.\n    '''\n    return n-sumofFactors(n)\n    \ndef mul(n) :\n    '''\n    Write a python function to find the product of a integer number.\n    '''\n    return n*sub(n)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n) + 1)) :\n        if (n % i == 0) :\n            if i % 2 == 0 :\n                sum = sum + i\n            else :\n                sum = sum + 2 * i\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search('z', text)\n    if match:\n        return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Create a regex string\n    wordz_regex = r'[a-z]'\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # split the string into list of words\n    words = re.split('[^\\w]', text)\n    # initialize a dictionary of words, keyed by their start positions\n    d = {}\n    for i in range(len(words)):\n        if words[i].lower() in d:\n            d[words[i].lower()].append(i)\n        else:\n            d[words[i].lower()] = [i]\n    # initialize an empty set of counts\n    counts = {}\n    # loop through each key, value pair in the dictionary, and add it to counts\n    for k in d:\n        counts[k] = len(d[k])\n    # iterate through counts, and if it matches a word, add it to the result\n    for c in counts:\n        if counts[c] == 1:\n            result.append(c)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Check if the string is in the dictonary of the text\n    if text in text_dict:\n        return True\n    # If there is not the word 'z' in the text\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern_search = re.findall(r'[a-z]{1}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_char(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{1}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern_search = re.findall(r'[a-zA-Z0-9]{2}',text)\n    if pattern_search:\n        return True\n    else:\n        return False\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    matches = [word for word in text.split() if word.startswith(\"z\")]\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if not re.match(r'^[A-Za-z]+$',text):\n        return False\n    \n    return True\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)):\n        if text[i] == \"z\":\n            return \"word\"\n    return \"word not found\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # YOUR CODE HERE\n    z=\"z\"\n    t=re.findall(z,text)\n    if t==[] :\n        return False\n    else:\n        return True"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # ^  -> The start of the match.\n    # $  -> The end of the match.\n    # \\w  -> a single word (a non-word character).\n    # \\W  -> a word that has been quoted (but not a single word character).\n    # \\s  -> a space (or tab), or whitespace.\n    # \\d  -> a digit (or other character).\n    # \\D  -> any other character.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\S  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\w  -> a word with no special characters.\n    # \\W  -> a word that has been quoted.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\S  -> any other whitespace.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\w  -> a word with no special characters.\n    # \\W  -> a word that has been quoted.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\w  -> a word with no special characters.\n    # \\W  -> a word that has been quoted.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), or whitespace.\n    # \\S  -> a space (or tab), or any other character.\n    # \\S  -> a whitespace.\n    # \\s  -> whitespace\n    # \\d  -> a digit.\n    # \\D  -> any other digit.\n    # \\s  -> a space (or tab), o"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 31:\n        return False\n    elif monthnum2 == 31:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        raise ValueError('The given month number should be between 1 and 12')\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # if monthnum2 <= 12 and monthnum2 >= 1:\n    if 0 < monthnum2 <= 12:\n        return True\n    return False\n    \ndef check_monthnumb_number2(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12:\n        return True\n    return False\n        \ndef check_yearnumb_number(yearnum2):\n    '''\n    Write a function to check whether the given year number contains 6 or not.\n    '''\n    if yearnum2 <= 0 and yearnum2 >= -12:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 2:\n            return True\n        elif monthnum2 == 3:\n            return True\n        elif monthnum2 == 4:\n            return True\n        elif monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 7:\n            return True\n        elif monthnum2 == 8:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:31, 10:30, 11:31, 12:31}\n    for i in monthnumb:\n        if monthnum2 == i:\n            return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 0<=monthnum2<=12:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = ['January','February','March','April','May','June','July','August','September','October','November','December']\n    month = months[monthnum2]\n    if month == 'February' or month == 'December':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #check for only 31 days\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    #check for only 28 days\n    if monthnum2 in [4,6,9,11]:\n        return True\n    #check for 1st days of February\n    if monthnum2 in [2]:\n        if monthnum2==2 and [2,3,4,5,6]:\n            return True\n        else:\n            return False\n    #check for 1st days of March\n    if monthnum2 in [3]:\n        if monthnum2==3 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of April\n    if monthnum2 in [4]:\n        if monthnum2==4 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of May\n    if monthnum2 in [5]:\n        if monthnum2==5 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of June\n    if monthnum2 in [6]:\n        if monthnum2==6 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of July\n    if monthnum2 in [7]:\n        if monthnum2==7 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of August\n    if monthnum2 in [8]:\n        if monthnum2==8 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of September\n    if monthnum2 in [9]:\n        if monthnum2==9 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of October\n    if monthnum2 in [10]:\n        if monthnum2==10 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of November\n    if monthnum2 in [11]:\n        if monthnum2==11 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    #check for 1st days of December\n    if monthnum2 in [12]:\n        if monthnum2==12 and [1,2,3,4,5]:\n            return True\n        else:\n            return False\n    \n    #check for 1st days of January, February, March, April, May, June, July, August, September, October, November, December\n    if monthnum2 in [1,4,7,8,9,11]:\n        if monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:\n            return True\n        elif monthnum2==1 and [4,5,6,7,8,9]:\n            return True\n        elif monthnum2==1 and [1,2,3,4,5]:"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #'F' == 'g'\n    #'C' =='m'\n    #'a' == 'h'\n    #'E' == 'i'\n    #'b' == 'j'\n    #'A' == 'k'\n    #'Z' == 'l'\n    #'B' == 'N'\n    #'M' == 'o'\n    #'R' == 't'\n    #'S' == 'u'\n    #'E' == 'g'\n    #'A' == 'c'\n    #'T' == 'h'\n    #'H' == 'i'\n    #'C' == 'a'\n    #'T' == 'i'\n    #'S' == 'y'\n    #'L' == 'n'\n    #'Y' == 'k'\n    #'E' == 'p'\n    #'e' == 'l'\n    #'b' == 'n'\n    #'a' == 'g'\n    #'H' == 'i'\n    #'e' == 'l'\n    #'S' == 'u'\n    #'Y' == 'c'\n    #'T' == 'h'\n    #'T' == 'j'\n    #'a' == 'b'\n    #'C' == 'r'\n    #'a' == 'd'\n    #'T' == 't'\n    #'E' == 'd'\n    #'a' == 'j'\n    #'h' == 'i'\n    #'a' == 'j'\n    #'S' == 'c'\n    #'I' == 't'\n    #'h' == 'a'\n    #'G' == 'r'\n    #'a' == 'l'\n    #'E' == 'g'\n    #'h' == 'a'\n    #'j' == 'i'\n    #'E' == 'p'\n    #'a' == 'd'\n    #'l' == 'n'\n    #'c' == 'u'\n    #'H' == 'n'\n    #'g' == 'o'\n    #'E' == 'a'\n    #'e' == 'c'\n    #'a' == 'y'\n    #'a' =='m'\n    #'A' == 'p'\n    #'k' == 'o'\n    #'T' == 'u'\n    #'r' == 't'\n    #'y' == 'i'\n    #'E' == 'h'\n    #'r' == 'i'\n    #'a' =='s'\n    #'G' == 'e'\n    #'E' == 'e'\n    #'g' == 'l'\n    #'c' == 'u'\n    #'A' == 'c'\n    #'B' == 'p'\n    #'e' == 'o'\n    #'g' == 'g'\n    #'i' == 'n'\n    #'T' == 't'\n    #'y' == 'a'\n    #'k' == 'o'\n    #'h' == 'l'\n    #'e' == 'i'\n    #'a' =='s'\n    #'y' == 'c'\n    #'E' == 'n'\n    #'a' == 'e'\n    #'c' == 't'\n    #'B' == 'c'\n    #'i' == 'a'\n    #'T' == 't'\n    #'l' == 'j'\n    #'r' == 'u'\n    #'k' == 'a'\n    #'a' == 'l'\n    #'Y' == 'n'\n    #'E' == 'a'\n    #'a' == 'g'\n    #'C' == 'i'\n    #'y' =='m'\n    #'T' == 't'\n    #'E' == 'p'\n    #'e' == 'h'\n    #'B' == 'i'\n    #'g' == 'o'\n    #'a' == 'r'\n    #'h' == 'y'\n    #'G' == 'a'\n    #'E' == 'a'\n    #'B' == 'r'\n    #'l' == 'y'\n    #'g' == 'e'\n    #'E' == 'a'\n    #'e' == 'g'\n    #'a' == 'y'\n    #'l' == 'j'\n    #'G' == 'h'\n    #'E' == 'h'\n    #'g' == 't'\n    #'E' == 'e'\n    #'G' == 'e'\n    #'E' == 'g'\n    #'a' == 'i'\n    #'T' == 't'\n    #'G' == 'i'\n    #'g' == 'l'\n    #'G' == 'a'\n    #'i' == 'r'\n    #'y' == 'e'\n    #'E' == 'g'\n    #'E' == 'h'\n    #'r' == 'i'\n    #'C' == 'i'\n    #'e' == 'e'\n    #'a' == 'i'\n    #'C' == 'r'\n    #'r' == 't'\n    #'E' == 'e'\n    #'c' == 't'\n    #'l' == 'j'\n    #'k' == 'a'\n    #'r' == 'y'\n    #'h' == 'i'\n    #'T' == 't'\n    #'e' == 'i'\n    #'c' == 't'\n    #'a' == 'n'\n    #'G' == 'i'\n    #'E' == 'h'\n    #'E' == 'i'\n    #'a' == 'r'\n    #'c' == 't'\n    #'a' =='s'\n    #'l' == 'j'\n    #'T' == 't'\n    #'E' == 'h'\n    #'E' == 'g'\n    #'e' == 'r'\n    #'E' == 'h'\n    #'R' == 'u'\n    #'t' == 't'\n    #'G' == 'c'\n    #'a' == 'a'\n    #'G' == 'i'\n    #'e' == 'e'\n    #'E' == 'h'\n    #'r' == 'e'\n    #'T' == 't'\n    #'S' == 'u'\n    #'h' == 'y'\n    #'E' == 'e'\n    #'e' == 'i'\n    #'g' == 't'\n    #'E' == 'h'\n    #'E' == 'g'\n    #'a' =='s'\n    #'S' == 'c'\n    #'E' == 'g'\n    #'e' == 'h'\n    #'T' == 't'\n    #'e' == 'e'\n    #'g' == 'g'\n    #'E' == 'e'\n    #'g' == 'c'\n    #'c' == 't'\n    #'T' == 't'\n    #'E' == 'h'\n    #'h' == 'y'\n    #'E' == 'a'\n    #'E' == 'e'\n    #'g' == 'e'\n    #'E' == 'h'\n    #'T' == 't'\n    #'h' == 'e'\n    #'a' == 'n'\n    #'S' == 'r'\n    #'g' == 'i'\n    #'G' == 'r'\n    #'g' == 'h'\n    #'E' == 'r'\n    #'E' == 'i'\n    #'G' == 'i'\n    #'g' == 'h'\n    #'E' == 'c'\n    #'E' == 'e'\n    #'e' == 'h'\n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # if stringlist is empty or contains only one string value then return\n    if not stringlist:\n        return stringlist\n    # if list is not empty then iterate over stringlist to reverse it\n    else:\n        string_list = list(stringlist)\n        for index in range(len(string_list)):\n            string_list[index] = string_list[index][::-1]\n        # append list to string and return\n        return string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # reverse the list in place\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed = []\n    for s in stringlist:\n        reversed.append(s[::-1])\n    return reversed"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_str = []\n    for i in stringlist:\n        rev_str.append(i[::-1])\n    return rev_str\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = []\n    for string in stringlist:\n        stringlist.append(string[::-1])\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    slist = []\n    #loop through stringlist to fill a list of strings\n    for string in stringlist:\n        slist.append(string)\n        #loop through string list to iterate through each string\n        #loop through string list to reverse each string and add to list\n    for i in range(len(stringlist)):\n        stringlist[i] = slist[i]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    if len(stringlist) <= 0:\n        return None\n    else:\n        for i in range(len(stringlist)):\n            temp = stringlist[i]\n            if i < (len(stringlist)-1):\n                stringlist[i] = stringlist[i+1]\n            stringlist[i] = temp\n        return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for x in stringlist:\n        stringlist[stringlist.index(x)] = x[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return \"\"\n    else:\n        # reverse each string in the list\n        print(stringlist)\n        stringlist[-1], stringlist[0] = stringlist[0], stringlist[-1]\n        # reversing each string in the list\n        reverse_string_list(stringlist[1:])\n        # return the reversed list\n        return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = list(range(len(lst)))\n    l.sort(reverse=True)\n    x = [lst[i] for i in l]\n    return min(x)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst:\n        return None\n    \n    minimum_length = len(lst)\n    for i in range(len(lst)-1):\n        if lst[i] < lst[i+1]:\n            minimum_length = i+1\n            \n    return minimum_length\n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    if not lst:\n        return None\n    \n    maximum_length = len(lst)\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            maximum_length = i+1\n            \n    return maximum_length\n    \ndef Find_Mean(lst): \n    '''\n    Write a python function to find the sublist having mean length.\n    '''\n    if not lst:\n        return None\n    \n    sum = 0\n    for i in lst:\n        sum = sum + i\n    \n    mean = sum / len(lst)\n    \n    return mean\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=lst[0]\n    for i in lst:\n        if i<min_len:\n            min_len=i\n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst, reverse=True)\n    for i in range(len(lst)):\n        if lst[i]!= 0:\n            for j in range(i+1, len(lst)):\n                if lst[j] == lst[i]:\n                    lst[i] = -1\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = []\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst)):\n            if lst[i][j] < min[0]:\n                min = lst[i][j]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=lst[0] \n    for i in range(1, len(lst)): \n        if lst[i]<min: \n            min=lst[i] \n    return min \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minLength = lst[0]\n    index_min = 0\n    for i in range(1, len(lst)):\n        if lst[i] < minLength:\n            minLength = lst[i]\n            index_min = i\n    return index_min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst: \n        return []\n    return sorted(lst, key=len, reverse=True)[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    count=0\n    for i in range(0,len(lst)-1):\n        if lst[i]<lst[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] < min:\n            min=lst[i]\n    return min\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print('\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0440\u0430\u0432\u043d\u0430: ', l*b)\n    print('\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0440\u0430\u0432\u043d\u0430: ', (l+b)*2)\n    print('\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0440\u0430\u0432\u043d\u0430: ', l*b*2)\n    print('\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0440\u0430\u0432\u043d\u0430: ', l*b*4)\n    print('\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u0440\u0430\u0432\u043d\u0430: ', l*b*6)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # calculate the area of a rectangle\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # calculate the length and width of the rectangle\n    l = l/2\n    b = b/2\n    # calculate the area\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\nprint(rectangle_area(5,4))\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1 = str1.replace(str1[i], '', 1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','', string.punctuation))\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_space(str1):\n    '''\n    Write a function to remove all white spaces from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.whitespace.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_digit(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.digits.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_stop_words(str1):\n    '''\n    Write a function to remove stop words from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_currency_sign(str1):\n    '''\n    Write a function to remove currency sign from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.currency.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remove_backspace(str1):\n    '''\n    Write a function to remove all back spaces from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.whitespace.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remove_punctuation_maketrans(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_non_alphanumeric_maketrans(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_digit_maketrans(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.digits.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remove_special_chars_maketrans(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_stop_words_maketrans(str1):\n    '''\n    Write a function to remove stop words from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_currency_maketrans(str1):\n    '''\n    Write a function to remove currency sign from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.currency.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remove_backspace_maketrans(str1):\n    '''\n    Write a function to remove all back spaces from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.whitespace.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remove_punctuation_backspace_maketrans(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_non_alphanumeric_backspace_maketrans(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_digit_backspace_maketrans(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.digits.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remove_special_chars_backspace_maketrans(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_stop_words_backspace_maketrans(str1):\n    '''\n    Write a function to remove stop words from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation.replace('\u00b4','n').replace('\u201c','w').replace('\u201d','j').replace('\u00b4\u00b4','n').replace('\u00b4\u00b4','w')))\ndef remove_currency_backspace_maketrans(str1):\n    '''\n    Write a function to remove currency sign from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.currency.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')))\ndef remov"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile(\"[A-Z]\")\n    return regex.sub(\"\", str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # regex\n    pattern = r\"[A-Z]\"\n    return re.sub(pattern, \"\", str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # TODO: write your code here\n    lst = []\n    for i in str1:\n        if i.isupper():\n            lst.append(i.lower())\n        else:\n            lst.append(i)\n    return \"\".join(lst)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def remove_uppercase_2(str1):\n        '''\n        This function should remove all uppercase substrings from the given string.\n        '''\n        str2=''\n        str2=str1.strip()\n        for i in str2:\n            if i.isupper():\n                str2=str2.replace(i,'')\n        return str2\n    # Write your code here\n    return remove_uppercase_2(str1)\ndef remove_special_char(str1):\n    '''\n    This function should remove special characters from the given string.\n    '''\n    special_char_pattern = re.compile(r'[^a-zA-Z0-9]+')\n    # Write your code here\n    return special_char_pattern.sub(' ', str1)\ndef remove_url_link(str1):\n    '''\n    This function should remove url links from the given string.\n    '''\n    pattern = re.compile(r'http(s)?:\\/\\/[^\\\"]*\\.[^\\\"]*')\n    # Write your code here\n    return pattern.sub('',str1)\ndef remove_email(str1):\n    '''\n    This function should remove emails from the given string.\n    '''\n    email_pattern = re.compile(r'''(\n        (\\w|\\.|\\_|\\-)+\\@\n        [\\w]+(\\.[\\w]+)*\\@\n        [\\w]*\n    )''', re.IGNORECASE)\n    # Write your code here\n    return email_pattern.sub('',str1)\ndef remove_phone(str1):\n    '''\n    This function should remove phone numbers from the given string.\n    '''\n    phone_pattern = re.compile(r'''(\n        \\d{3}\n        \\d{3}\n        \\d{4}\n    )''', re.IGNORECASE)\n    # Write your code here\n    return phone_pattern.sub('',str1)\ndef remove_space(str1):\n    '''\n    This function should remove spaces from the given string.\n    '''\n    space_pattern = re.compile(r'''(\n        \\s+\n        \\n\\s+\n        \\n\\n\\n\n    )''', re.IGNORECASE)\n    # Write your code here\n    return space_pattern.sub(' ', str1)\ndef remove_newline(str1):\n    '''\n    This function should remove new line characters from the given string.\n    '''\n    newline_pattern = re.compile(r'\\n')\n    # Write your code here\n    return newline_pattern.sub(' ', str1)\ndef remove_html(str1):\n    '''\n    This function should remove html from the given string.\n    '''\n    html_pattern = re.compile(r'''<.*?>''')\n    # Write your code here\n    return html_pattern.sub(' ', str1)\ndef remove_quotes(str1):\n    '''\n    This function should remove quotes from the given string.\n    '''\n    quotes_pattern = re.compile(r'(?:[\\'\"])(.*?[\\'\"])')\n    # Write your code here\n    return quotes_pattern.sub(' ', str1)\ndef remove_comments(str1):\n    '''\n    This function should remove comments from the given string.\n    '''\n    comment_pattern = re.compile(r'<!--.*?-->')\n    # Write your code here\n    return comment_pattern.sub(' ', str1)\ndef remove_newline_comments(str1):\n    '''\n    This function should remove new line comments from the given string.\n    '''\n    newline_pattern = re.compile(r'\\n\\n')\n    # Write your code here\n    return newline_pattern.sub(' ', str1)\ndef remove_carriage_breaks(str1):\n    '''\n    This function should remove newline characters from the given string.\n    '''\n    newline_pattern = re.compile(r'\\n')\n    # Write your code here\n    return newline_pattern.sub(' ', str1)\ndef remove_formatting(str1):\n    '''\n    This function should remove formatting characters from the given string.\n    '''\n    format_pattern = re.compile(r'\\((.*?)\\)')\n    # Write your code here\n    return format_pattern.sub(' ', str1)\ndef remove_processing_script(str1):\n    '''\n    This function should remove processing scripts from the given string.\n    '''\n    processing_script_pattern = re.compile(r'\\s*<script(.*?)>.*</script>')\n    # Write your code here\n    return processing_script_pattern.sub(' ', str1)\ndef remove_script(str1):\n    '''\n    This function should remove script from the given string.\n    '''\n    processing_script_pattern = re.compile(r'<script(.*?)>.*</script>')\n    # Write your code here\n    return processing_script_pattern.sub(' ', str1)\ndef remove_links(str1):\n    '''\n    This function should remove links from the given string.\n    '''\n    link_pattern = re.compile(r'''(\n        (https?://[^\\s]+)\n        (?:\\s|$)\n    )''', re.IGNORECASE)\n    # Write your code here\n    return link_pattern.sub(' ', str1)\ndef remove_html_tags(str1):\n    '''\n    This function should remove HTML tags from the given string.\n    '''\n    html_tag_pattern = re.compile(r'''<(.*?)>''')\n    # Write your code here\n    return html_tag_pattern.sub(' ', str1)\ndef remove_space_between_brackets(str1):\n    '''\n    This function should remove spaces between brackets.\n    '''\n    space_between_brackets_pattern = re.compile(r'\\(.*?\\)')\n    # Write your code here\n    return space_between_brackets_pattern.sub(' ', str1)\ndef remove_comments_and_numbers(str1):\n    '''\n    This function should remove comments from the given string.\n    '''\n    comment_pattern = re.compile(r'\\s+')\n    # Write your code here\n    return comment_pattern.sub(' ', str1)\ndef remove_pound(str1):\n    '''\n    This function should remove pound signs from the given string.\n    '''\n    pound_pattern = re.compile(r'\u00a3')\n    # Write your code here\n    return pound_pattern.sub(' ', str1)\ndef remove_number(str1):\n    '''\n    This function should remove numbers from the given string.\n    '''\n    number_pattern = re.compile(r'''((\\d|\\.|\\_|\\-)+)(\\d+)''')\n    # Write your code here\n    return number_pattern.sub('', str1)\ndef remove_pound_sign(str1):\n    '''\n    This function should remove pound signs from the given string.\n    '''\n    pound_sign_pattern = re.compile(r'\u00a3')\n    # Write your code here\n    return pound_sign_pattern.sub('', str1)\ndef remove_special_characters(str1):\n    '''\n    This function should remove special characters from the given string.\n    '''\n    special_char_pattern = re.compile(r'[^a-zA-Z0-9]+')\n    # Write your code here\n    return special_char_pattern.sub(' ', str1)\ndef remove_url_link_and_email(str1):\n    '''\n    This function should remove url links and emails from the given string.\n    '''\n    url_link_pattern = re.compile(r'(http(s)?:\\/\\/[^\\\"]*\\.[^\\\"]*\\.[^\\\"]*\\b[^\\\"]+\\b[^\\\"]+)((.*))')\n    # Write your code here\n    return url_link_pattern.sub(' ', str1)\ndef remove_email_and_phone(str1):\n    '''\n    This function should remove email and phone numbers fro"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for x in str1:\n        if x.isupper():\n            new_str += x.lower()\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lower_string = str1.lower()\n    regex = r'[A-Z]'\n    regex1 = r'[a-z]'\n    return str1.replace(lower_string, regex1)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Your code here\n    i = 0\n    while i < len(lst):\n        if lst[i][0] == lst[i-1][0]:\n            lst.pop(i)\n        else:\n            i += 1\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        if len(i) == 1: \n            return(i[0]) \n    else: \n        return False\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    my_list = []\n    for item in lst:\n        if len(item)!= 0:\n            my_list.append(item[0])\n    return my_list"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    elements = []\n    for item in lst:\n        elements.append(item[0])\n    return elements\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort the list.\n    '''\n    for i in range(0,len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i][2] > lst[j][2]:\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\n    return lst\n    \ndef Counting_Even(lst):\n    '''\n    Write a python function to count the number of even integers in a list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i][2] % 2 == 0:\n            count += 1\n    return count\n    \ndef Counting_Odd(lst):\n    '''\n    Write a python function to count the number of odd integers in a list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i][2] % 2 == 1:\n            count += 1\n    return count\n    \ndef Add_Even(lst):\n    '''\n    Write a python function to add even integers in a list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i][2] % 2 == 0:\n            count += 1\n    return count\n    \ndef Add_Odd(lst):\n    '''\n    Write a python function to add odd integers in a list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i][2] % 2 == 1:\n            count += 1\n    return count\n    \ndef main():\n    '''\n    Function for main function.\n    '''\n    print(Counting_Odd(Extract([[1,3,7,10],[2,4,8,11],[12,13,14,15],[18,20,21,22]])))\n    print(Counting_Even(Extract([[1,3,7,10],[2,4,8,11],[12,13,14,15],[18,20,21,22]])))\n    print(Add_Odd(Extract([[1,3,7,10],[2,4,8,11],[12,13,14,15],[18,20,21,22]])))\n    print(Add_Even(Extract([[1,3,7,10],[2,4,8,11],[12,13,14,15],[18,20,21,22]])))\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n    "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0] \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    arr = []\n    for i in range(len(lst)):\n        arr.append(lst[i][0])\n    return arr\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def getFirst(i,lst):\n        if len(lst) == 0:\n            return None\n        else:\n            return lst[0]\n    # Create an empty list for the result\n    result = []\n    # Create a for-loop to iterate through each sublist\n    for i in range(len(lst)):\n        # Try to find the first element\n        try:\n            # Extract the first element\n            res = getFirst(i,lst)\n        # If the element was not found, we can simply add it to the empty list\n        # This is fine as soon as we find the element\n        except:\n            result.append(lst[i][0])\n            # Next, add the rest of the sublist to the empty list\n            for j in range(i+1,len(lst)):\n                lst[j][0] = result[-1]\n                result.append(lst[j][0])\n    # Return the list\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        print (lst[0])\n        lst.pop(0)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if str[i].isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for char in str:\n        if char.isupper():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_chars = []\n    for char in str:\n        if char.isupper():\n            upper_chars.append(char)\n    return len(upper_chars)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    res = ''\n    for ch in str:\n        if ch.isupper():\n            res += ch.upper()\n        else:\n            res += ch\n    return res\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    # Let a be the first character\n    a = str[0]\n    for i in range(1, len(str)):\n        # If the current character is uppercase\n        if a.isupper():\n            # Increment count\n            count = count + 1\n        # Otherwise, if the current character is lowercase\n        elif a.islower():\n            # Increment count\n            count = count + 1\n        # Else, if the current character is a space\n        elif a == \" \":\n            count = count + 1\n        # Else, if the current character is a new line character\n        elif a == \"\\n\":\n            count = count + 1\n        # Otherwise, reset the current character\n        else:\n            a = str[i]\n    # Return the count\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Initialize an empty string\n    str_l = []\n    # Loop through string and append each character to a list\n    for i in str:\n        if i.isupper():\n            str_l.append(i)\n        else:\n            pass\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr = ctr + 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combs = []\n    for x in range(len(list1)):\n        for y in combinations(list1, x+1):\n            combs.append(y)\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = len(list1)\n    list2 = []\n    for i in range(l):\n        list2.append([list1[i], i])\n    return list2\n    \ndef make_combinations_from_lists(lists):\n    '''\n    Write a function to return all combinations of the elements of a given list.\n    '''\n    l = len(lists)\n    list3 = []\n    for i in range(l):\n        list3.append([lists[i][0], i])\n    return list3\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    if len(list1) > 1:\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                combos.append(list1[i] + list1[j])\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    elif len(list1) == 2:\n        return [[list1[0],list1[1]]]\n    else:\n        li = combinations_list(list1[1:])\n        result = []\n        for i in li:\n            for j in combinations_list(list1[1:]):\n                result.append([i[0]+j[0],i[1]+j[1]])\n        return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result.append(list(itertools.combinations(list1, i)))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        result.append(list1)\n    elif len(list1) == 2:\n        for i in range(1, len(list1)):\n            temp = list1[:i]\n            result.append(temp + list1[i:])\n    else:\n        for i in range(0, len(list1)):\n            temp = list1[:i]\n            for j in range(i+1, len(list1)):\n                result.append(temp + list1[i:j])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1[0]]\n    if list1[0] == list1[1]:\n        return list(combinations_list(list1[1:]))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            all_list.append(list1[i]+list1[j])\n    return all_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            comb_list.append(list1[i] + list1[j])\n    return comb_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    if arr == []:\n        return 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j == i:\n                continue\n            \n            max_product = max(max_product, arr[i]*arr[j])\n    \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_sum = arr[0]\n    sub = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    \n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            \n            if arr[j-1] > arr[j]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            else:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n    return arr\n    \ndef main():\n    arr = [1, 2, 3, 4]\n    print(max_subarray_product(arr))\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = 1\n    i = 0\n    j = 0\n    result = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    sub_sum = 0\n    max_sum = float('-inf')\n    max_left = 0\n    max_right = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return max(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    sub_array_product = []\n    \n    for i in range(len(arr)):\n        sub_array = arr[i:]\n        product = 1\n        for j in range(i, len(arr)):\n            product *= sub_array[j]\n        sub_array_product.append(product)\n    \n    return max(sub_array_product)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        subarray_product = arr[0]\n        subarray_length = 1\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                subarray_product = max(subarray_product * arr[i], arr[i])\n                subarray_length += 1\n            else:\n                subarray_length += 1\n        return subarray_product * subarray_length\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if (dict[i][j] == dict[i][n]):\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if len(dict[key])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.get(k)==v for k,v in dict.items())\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if type(v)!= dict:\n            return False\n        if not v:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if key == n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if len(dict[key])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if type(dict)!= dict:\n        raise TypeError(\"The type of the input must be a dictionary\")\n    \n    if type(n)!= int:\n        raise TypeError(\"The type of the input must be an integer\")\n    \n    if n < 1:\n        raise ValueError(\"The value of the input must be a positive integer\")\n    \n    for k in dict.keys():\n        if type(dict[k]) == dict:\n            check_value(dict[k], n-1)\n        elif type(dict[k]) == int and dict[k]!= 0:\n            check_value(dict[k], n-1)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for key in dict.keys():\n        if isinstance(dict[key], dict) == False:\n            count += 1\n    if count == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(0,n):\n        if not (dict.get(i)==dict.get(n-1-i)):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        raise TypeError(\"Length of dict is not equal to n.\")\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict=dict()\n    for key,value in dict1.items():\n        if value=='':\n            pass\n        else:\n            new_dict[key]=value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for x in dict1:\n        if len(x) > 0:\n            result[x] = 1\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # return dictionary without empty items\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value is None or value == \"\":\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Go through the dictionary items and remove the items that are empty\n    for item in dict1:\n        if dict1[item] == \"\":\n            # If the item is not empty, drop it and update the dictionary\n            del dict1[item]\n            break\n        else:\n            # If the item is not empty, keep it and update the dictionary\n            continue\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if not v:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == \"\":\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1 is None:\n        return dict1\n    elif len(dict1) == 0:\n        return dict1\n    else:\n        return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == \"\":\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize the result array\n    result = []\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_sum=0\n    for i in range(len(arr)-1):\n        max_sum=max(max_sum,arr[i]+arr[i+1])\n    return max_sum\narr=[1,2,3,4,5,6,7,8,9]\nprint(max_product(arr)"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n=len(arr)\n    product=1\n    for i in range(n):\n        product=product*arr[i]\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    left, right = arr[0], arr[1]\n    for i in range(2, len(arr)):\n        left = arr[i]\n        right = arr[i]*left\n        arr[i] = left\n        arr[i] = right\n    \n    return arr[0]\n    \nprint(max_product([1, 2, 3]))\nprint(max_product([3, 4, 5, 6]))\nprint(max_product([5, 6, 2, 1, 4])"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_value = arr[0]\n    product = 1\n    for i in range(1, len(arr)):\n        product = arr[i] * product\n        max_product_value = max(max_product_value, product)\n    return max_product_value\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr == []:\n        return []\n    n = len(arr)\n    if n==1:\n        return arr[0]\n    if n==2:\n        return max(arr[0],arr[1])\n    \n    p = arr[0]\n    l = 1\n    r = 1\n    res = []\n    while l<n and r<n:\n        if arr[l]<arr[r]:\n            p = p*arr[l]\n            l+=1\n        else:\n            p = p*arr[r]\n            r+=1\n        res.append(p)\n    return max(res)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr.sort()\n    if len(arr) < 2:\n        return arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            arr[i] = arr[i - 1] + arr[i]\n        else:\n            arr[i] = arr[i - 1]\n    return max(arr)"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = 1\n    for i in range(1,n):\n        for j in range(i):\n            max_prod = max(max_prod, arr[i]*arr[j])\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr=sorted(arr)\n    max_product=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            temp_max=arr[i]*arr[j]\n            if temp_max>max_product:\n                max_product=temp_max\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    s = 1\n    n = len(arr)\n    l = 1\n    for i in range(0,n-1):\n        s += arr[i]*l\n        l *= arr[i]\n    return s\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    if len(test_tup) % 2 == 0:\n        temp = list(zip(*test_tup))\n        return temp\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if test_tup[0] > test_tup[1]:\n        tmp = test_tup[0]\n        test_tup[0] = test_tup[1]\n        test_tup[1] = tmp\n        return add_pairwise(test_tup)\n    if test_tup[0] < test_tup[1]:\n        tmp = test_tup[1]\n        test_tup[1] = test_tup[0]\n        test_tup[0] = tmp\n        return add_pairwise(test_tup)\n    \n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO: Complete this function.\n    return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    tup_left = test_tup[:n//2]\n    tup_right = test_tup[n//2+1:]\n    return tuple(tup_left + tup_right)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def sum_neighboring_element(tup):\n        return tup[1] + tup[2]\n    \n    a, b = test_tup[0], test_tup[1]\n    test_tup = test_tup[0] + (sum_neighboring_element(tuple(test_tup)),)\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return((test_tup[0]+test_tup[1], test_tup[1]+test_tup[0]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairs = 0\n    n = len(test_tup)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if test_tup[i] + test_tup[j] == test_tup[i]+test_tup[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get pairwise elements\n    a = test_tup[0]\n    b = test_tup[1]\n    c = test_tup[2]\n    # Check if element is in both arrays\n    if a == b:\n        # Return element\n        return c\n    # Else return None\n    else:\n        return None\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the product of the array \n    # Divide n into 2 \n    # multiply the array \n    # multiply the product \n    # modulo the n \n    # return the product \n    return int(n % 2 * (arr[0] * arr[1] % n))\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    index=0\n    while index < len(arr):\n        # print(index, \" \", arr[index], \" \", arr[index] * arr[index], \" \", arr[index] * arr[index] * arr[index])\n        temp=arr[index] * arr[index] * arr[index]\n        if temp%n == 0:\n            # print(temp)\n            remainder=temp%n\n            # print(remainder)\n            arr[index]=remainder\n            index+=1\n        else:\n            index+=1\n    # print(arr)\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, n):\n        prod = prod * arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (arr[-1]*arr[0]) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n==1:\n        return arr[0]\n    else:\n        return find_remainder(arr,n-1) * arr[n-1]\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(1, n):\n        product = product * arr[i-1]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Create a variable that is the product of the array, n and the modulo number\n    product=1\n    for i in range(len(arr)):\n        product=product*arr[i]\n    return product%n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    a=arr[0:n]\n    for i in range(1,n):\n        a[i]*=a[i-1]\n    return a\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i=0\n    num=1\n    while i<n:\n        num*=arr[i]\n        i+=1\n    return num\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #Assume that input is a list of integers\n    \n    l_1 = []\n    for i in l:\n        l_1.append(i)\n    \n    if (l_1[0] == l_1[1]):\n        print(l_1)\n    else:\n        print(\"no consecutive numbers\")\n        "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) % 2!= 0: \n        print(\"The list is not a valid list of numbers\")\n        return \n    count = 0 \n    for i in range(len(l)): \n        if l[i] == l[i+1] and l[i] == l[i-1]: \n            count += 1\n        else: \n            return False\n    return count == "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l:\n        if (i + 1) % 10 == 0:\n            if i + 1 < 10:\n                return False\n        elif i % 10 == 0:\n            if i + 1 < 10:\n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l: \n        if i % 2 == 1: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(l)\n    count = 0\n    for i in l:\n        if i%2!= 0:\n            count += 1\n    if count == len(l)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    length = len(l)\n    if(length == 0): \n        return False\n    else: \n        counter = 1\n        for i in range(length-1):\n            if l[i] > l[i+1]:\n                counter += 1\n        if counter == 1: \n            return True\n        else: \n            return False\n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    s = 0\n    for i in range(n):\n        s += l[i]\n        if s > 9:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i]==l[i+1]:\n            print(i,end=\" \")\n    print(l)\ndef main():\n    print(\"consecutive numbers in a list are\")\n    check_Consecutive([1,2,3,5,8,9])\n    print(\"\\n\")\n    print(\"all the numbers in a list are\")\n    check_Consecutive(list(range(1,101)))\n    print(\"\\n\")\n    print(\"all the numbers in a list are\")\n    check_Consecutive([1,2,3,5,8,9])\n    print(\"\\n\")\n    print(\"consecutive numbers in a list are\")\n    check_Consecutive([1,2,3,5,8,9])\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8]) \n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l):\n        if l[i]!= l[i-1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #\u00a0Returns list of tuples\n    intersection = []\n    #\u00a0Check order\n    if(test_list1[0][1] < test_list2[0][1]):\n        test_list1, test_list2 = test_list2, test_list1\n    #\u00a0Loop through lists\n    for x in test_list1:\n        for y in test_list2:\n            if x[1] == y[1]:\n                intersection.append(x)\n                #\u00a0If tuple is in list, add it\n                if x[0] == y[0]:\n                    return intersection\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    if len(test_list1) == len(test_list2):\n        for i in range(len(test_list1)):\n            if test_list1[i] in test_list2:\n                intersection_list.append(test_list1[i])\n    else:\n        print(\"Tuple intersection error: two tuples must be of the same length.\")\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection = test_list1[i]\n            break\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n    # x = []\n    # for x in range(len(test_list1)):\n    #     for y in range(len(test_list2)):\n    #         if test_list1[x] == test_list2[y]:\n    #             x.append(test_list1[x])\n    # print(x)\n    return test_list1[0]\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = tuple(sorted(test_list1))\n    test_list2 = tuple(sorted(test_list2))\n    i = 0\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            test_list1.remove(test_list1[i])\n            test_list2.remove(test_list2[i])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    t1 = tuple(test_list1)\n    t2 = tuple(test_list2)\n    \n    if t1 == t2:\n        return t1\n    elif t2 in t1:\n        return t1\n    else:\n        return t2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = []\n    for i in range(0, len(test_list1)):\n        if test_list1[i] in test_list2:\n            tuple_list.append(test_list1[i])\n    return tuple_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(0, len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    return tuple(intersection)\n    \n    \ndef tuple_intersection_sort(test_list1, test_list2):\n    '''\n    Write a function to sort the given tuple in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] not in sorted_list:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_remove(test_list1, test_list2):\n    '''\n    Write a function to remove the intersection of elements in the given tuple list.\n    '''\n    intersection = []\n    for i in range(0, len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    return tuple(intersection)\n    \n    \ndef tuple_intersection_remove_sort(test_list1, test_list2):\n    '''\n    Write a function to sort the given tuple in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] not in sorted_list:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_remove_remove(test_list1, test_list2):\n    '''\n    Write a function to remove the intersection of elements in the given tuple list.\n    '''\n    intersection = []\n    for i in range(0, len(test_list1)):\n        if test_list1[i] not in test_list2:\n            intersection.append(test_list1[i])\n    return tuple(intersection)\n    \n    \ndef tuple_intersection_remove_remove_sort(test_list1, test_list2):\n    '''\n    Write a function to sort the given tuple in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] not in test_list1:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_set_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the intersection of elements in the given set, irrespective of their order.\n    '''\n    intersection = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            intersection.append(test_list2[i])\n    return tuple(intersection)\n    \n    \ndef tuple_intersection_set_intersection_sort(test_list1, test_list2):\n    '''\n    Write a function to sort the given set in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_set_intersection_remove(test_list1, test_list2):\n    '''\n    Write a function to remove the intersection of elements in the given set, irrespective of their order.\n    '''\n    intersection = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            intersection.append(test_list2[i])\n    return tuple(intersection)\n    \n    \ndef tuple_intersection_set_intersection_remove_sort(test_list1, test_list2):\n    '''\n    Write a function to sort the given set in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_set_intersection_remove_remove(test_list1, test_list2):\n    '''\n    Write a function to remove the intersection of elements in the given set, irrespective of their order.\n    '''\n    intersection = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            intersection.append(test_list2[i])\n    return tuple(intersection)\n    \n    \ndef tuple_intersection_set_intersection_remove_remove_sort(test_list1, test_list2):\n    '''\n    Write a function to sort the given set in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_set_intersection_remove_remove_sort(test_list1, test_list2):\n    '''\n    Write a function to sort the given set in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_set_intersection_remove_remove_sort_1(test_list1, test_list2):\n    '''\n    Write a function to sort the given set in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_set_intersection_remove_remove_sort_2(test_list1, test_list2):\n    '''\n    Write a function to sort the given set in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_set_intersection_remove_remove_sort_3(test_list1, test_list2):\n    '''\n    Write a function to sort the given set in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for i in range(0, len(test_list2)):\n        if test_list2[i] in test_list1:\n            sorted_list.append(test_list2[i])\n    \n    return tuple(sorted_list)\n    \n    \ndef tuple_intersection_set_intersection_remove_remove_sort_4(test_list1, test_list2):\n    '''\n    Write a function to sort the given set in ascending order and return the sorted list of tuples.\n    '''\n    sorted_list = []\n    for "
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_copy = test_list1[:]\n    test_list2_copy = test_list2[:]\n    if test_list1 == test_list2:\n        return tuple(test_list1)\n    if len(test_list1) < len(test_list2):\n        test_list2 = sorted(test_list2)\n    else:\n        test_list1 = sorted(test_list1)\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                test_list2 = test_list2[:j] + test_list2[j+1:]\n                break\n    return tuple(test_list1 + test_list2)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    l=list(str1)\n    l[0]=l[0].replace(ch,newch)\n    return ''.join(l)"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str1 = \"\"\n    for i in str1:\n        if i.lower() == ch:\n            new_str1 += newch\n        else:\n            new_str1 += i\n    return new_str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if newch not in str1:\n        return str1\n    else:\n        str1=str1.replace(newch,'#')\n        return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            new_str = new_str + newch\n        else:\n            new_str = new_str + str1[i]\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for x in str1:\n        if x == ch:\n            str1 = str1.replace(x,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            str1 = str1.replace(str1[i], newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    # using int() for string length, not str()\n    for i in range(len(str1)):\n        if (ord(str1[i]) == 48 or ord(str1[i]) == 46) and str1[i]!= ch:\n            new_str += chr(ord(str1[i]) - 48 + ord(ch))\n        else:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.lower()\n    \n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1.replace(str1[i],newch)\n        else:\n            continue\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_string = str1\n    \n    for i in range(len(str1)):\n        new_string = new_string[:i]+newch+new_string[i+1:]\n        \n    return new_string\n        \n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary into a list\n    my_list = []\n    for key in dict1:\n        my_list.append(key)\n    my_list.sort()\n    # print(my_list)\n    # the loop will go through the list and try to sort it\n    for key in my_list:\n        # the key will be the value in the dictionary and it will be sorted\n        dict1[key] = sorted(dict1[key])\n    return dict1\ndef flatten(dict1):\n    '''\n    Write a function to flatten a nested dictionary.\n    '''\n    # create an empty list\n    result = []\n    # traverse through the key and value pairs\n    for key in dict1:\n        # convert each key and value to a list\n        key_list = list(key)\n        value_list = list(dict1[key])\n        # combine each key and value for the new list\n        for i in range(len(key_list)):\n            key_list[i] = str(key_list[i])\n            key_list[i] = str(key_list[i])\n        for i in range(len(value_list)):\n            value_list[i] = str(value_list[i])\n            value_list[i] = str(value_list[i])\n        # concatenate the lists for the new dictionary\n        new_key = ''.join(key_list)\n        new_value = ''.join(value_list)\n        # build the new dictionary\n        dict1[new_key] = new_value\n    return dict1\ndef flatten_list(list1):\n    '''\n    Write a function that flattens a list of lists.\n    '''\n    # flatten the list\n    flattened_list = []\n    for el in list1:\n        for i in range(len(el)):\n            flattened_list.append(el[i])\n    return flattened_list\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    keys_sorted_by_value = Counter(dict1.values())\n    print(keys_sorted_by_value)\n    return keys_sorted_by_value.most_common(1)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # first, make an ordered dictionary\n    dict_nested = {}\n    for key, value in dict1.items():\n        if type(value) is dict:\n            dict_nested[key] = sort_counter(value)\n        else:\n            dict_nested[key] = value\n    \n    # now, put the values into a list\n    list_of_keys = list(dict_nested.keys())\n    list_of_values = list(dict_nested.values())\n    \n    # now, create a new dictionary with values swapped to each other and list of keys swapped to each other\n    dict_with_values = {}\n    for i in range(0, len(list_of_keys)):\n        dict_with_values[list_of_keys[i]] = list_of_values[i]\n    \n    # now, sort the dictionary\n    return sort_by_value(dict_with_values)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key, value in dict1.items():\n        if type(value) == dict:\n            sort_counter(value)\n            dict1[key] = sorted(dict1[key].items(), key=lambda item: item[1])\n        else:\n            dict1[key] = sorted(dict1[key].items(), key=lambda item: item[1], reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # # Declare variables\n    dict1_sorted = {}\n    dict1_counter = Counter(dict1)\n    for key in dict1_counter:\n        # Count all values in dictionary\n        dict1_sorted[key] = dict1_counter[key]\n    # Sort\n    dict1_sorted = sorted(dict1_sorted.items(), key=lambda x: x[1], reverse=True)\n    return dict1_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict1.copy()\n    sorted_dict.sort()\n    print(sorted_dict)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Your code here\n    # create a list of the keys\n    # sort the list\n    # insert the sorted list at the end of the list\n    # update the dictionary with the sorted list\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # loop through the dictionary, add each key and each value to a list\n    for x in dict1.values():\n        yield x\n    \n    \ndef sort_by_key(dict1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    \n    # loop through the dictionary, add each key and each value to a list\n    for x in dict1.keys():\n        yield x\n        \ndef make_dict(keys):\n    '''\n    Write a function to make a dictionary.\n    '''\n    \n    # loop through the dictionary, add each key and each value to a list\n    for x in keys:\n        yield x\n        \ndef create_dict():\n    '''\n    Write a function to create a dictionary.\n    '''\n    \n    # create a dictionary of words\n    d = {}\n    \n    # open the file\n    file1 = open(\"words.txt\",\"r\")\n    \n    # read each line of the file\n    for x in file1:\n        # split the line into words\n        word = x.split()\n        # if the word doesn't already exist in the dictionary, add it\n        if word[0] not in d:\n            d[word[0]] = 1\n        else:\n            d[word[0]] = d[word[0]] + 1\n            \n    # sort the dictionary by words\n    l1 = list(sort_counter(d))\n    # the result is a dictionary that includes the top words\n    print(l1)\n    \n    # save the dictionary to a file\n    f = open(\"dictionary.txt\",\"w\")\n    \n    # write the dictionary to the file\n    for x in l1:\n        f.write(x)\n        f.write(\"\\n\")\n    \n    f.close()\n    \ndef create_dict_with_key():\n    '''\n    Write a function to create a dictionary of words and their index.\n    '''\n    \n    # create a dictionary of words\n    d = {}\n    \n    # open the file\n    file1 = open(\"words.txt\",\"r\")\n    \n    # read each line of the file\n    for x in file1:\n        # split the line into words\n        word = x.split()\n        # if the word doesn't already exist in the dictionary, add it\n        if word[0] not in d:\n            d[word[0]] = word[1]\n        else:\n            d[word[0]] = d[word[0]] + word[1]\n            \n    # sort the dictionary by words\n    l1 = list(sort_key(d))\n    # the result is a dictionary that includes the top words\n    print(l1)\n    \n    # save the dictionary to a file\n    f = open(\"dictionary_with_key.txt\",\"w\")\n    \n    # write the dictionary to the file\n    for x in l1:\n        f.write(x)\n        f.write(\"\\n\")\n    \n    f.close()\n    \ndef sort_dict(d):\n    '''\n    Write a function to sort a dictionary.\n    '''\n    \n    # loop through the dictionary, add each key and each value to a list\n    for x in d.keys():\n        yield x\n        \n        \ndef uniq(seq):\n    '''\n    Write a function to uniq the sequence.\n    '''\n    \n    # loop through the sequence, add each element to a list\n    for x in seq:\n        yield x\n        \ndef create_dictionary():\n    '''\n    Write a function to create a dictionary.\n    '''\n    \n    # open the file\n    file1 = open(\"words.txt\",\"r\")\n    \n    # read each line of the file\n    for x in file1:\n        # split the line into words\n        word = x.split()\n        # if the word doesn't already exist in the dictionary, add it\n        if word[0] not in uniq(word[1:]):\n            # add the word and its index to the dictionary\n            d[word[0]] = [word[1:]]\n        else:\n            d[word[0]].append(word[1:])\n    \n    # sort the dictionary by words\n    l1 = list(sort_counter(d))\n    # the result is a dictionary that includes the top words\n    print(l1)\n    \n    # save the dictionary to a file\n    f = open(\"dictionary.txt\",\"w\")\n    \n    # write the dictionary to the file\n    for x in l1:\n        f.write(x)\n        f.write(\"\\n\")\n    \n    f.close()\n    \ndef create_dictionary_with_key():\n    '''\n    Write a function to create a dictionary of words and their index.\n    '''\n    \n    # create a dictionary of words\n    d = {}\n    \n    # open the file\n    file1 = open(\"words.txt\",\"r\")\n    \n    # read each line of the file\n    for x in file1:\n        # split the line into words\n        word = x.split()\n        # if the word doesn't already exist in the dictionary, add it\n        if word[0] not in d:\n            d[word[0]] = word[1:]\n        else:\n            d[word[0]] = d[word[0]] + word[1:]\n            \n    # sort the dictionary by words\n    l1 = list(sort_key(d))\n    # the result is a dictionary that includes the top words\n    print(l1)\n    \n    # save the dictionary to a file\n    f = open(\"dictionary_with_key.txt\",\"w\")\n    \n    # write the dictionary to the file\n    for x in l1:\n        f.write(x)\n        f.write(\"\\n\")\n    \n    f.close()\n    \ndef top_words(d, n):\n    '''\n    Write a function to top n words in a dictionary.\n    '''\n    \n    # create a dictionary of words\n    d = d.copy()\n    \n    # loop through the dictionary, add each key and each value to a list\n    for x in d.keys():\n        # create a list of the words in the dictionary\n        l = list(d[x])\n        # sort the words by the number of times they appear in the dictionary\n        l.sort(key=len, reverse=True)\n        # loop through the words, add them to a new list\n        for y in l[:n]:\n            yield y\n    \ndef create_dictionary_and_index():\n    '''\n    Write a function to create a dictionary of words and their index.\n    '''\n    \n    # open the file\n    file1 = open(\"words.txt\",\"r\")\n    \n    # read each line of the file\n    for x in file1:\n        # split the line into words\n        word = x.split()\n        # if the word doesn't already exist in the dictionary, add it\n        if word[0] not in uniq(word[1:]):\n            # add the word and its index to the dictionary\n            d[word[0]] = [word[1:]]\n        else:\n            d[word[0]].append(word[1:])\n    \n    # sort the dictionary by words\n    l1 = list(sort_counter(d))\n    # the result is a dictionary that includes the top words\n    print(l1)\n    \n    # save the dictionary to a file\n    f = open(\"dictionary_with_key.txt\",\"w\")\n    \n    # write the dictionary to the file\n    for x in l1:\n        f.write(x)\n        f.write(\"\\n\")\n    \n    f.close()\n    \ndef top_dict(d):\n    '''\n    Write a function to top n words in a dictionary.\n    '''\n    \n    # create a dictionary of words\n    d = d.copy()\n    \n    # loop through the dictionary, add each key and each value to a list\n    for x in d.keys():\n        # create a list of the words in the dictionary\n        l = list(d[x])\n        # sort the words by the number of times they appear in the dictionary\n        l.sort(key=len, reverse=True)\n        # loop through the words, add them to a new list\n        for y in l[:d[x]]:\n            yield y\n    \ndef create_dictionary_and_index_with"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1=[]\n    d1={}\n    for i in dict1:\n        d1[dict1[i]]=i\n    list1=sorted(d1)\n    return list1\ndef main():\n    my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    my_list_sorted = sort_counter(my_list)\n    print(my_list_sorted)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=dict1.__getitem__)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest value\n    large_val = max(nums)\n    small_val = min(nums)\n    # Determine sum of the largest and smallest value\n    sum = large_val + small_val\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums),min(nums)])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # if there are no elements in the array, return 0\n    if len(nums) == 0:\n        return 0\n    # if there are just numbers in the array, return the sum\n    elif len(nums) == 1:\n        return nums[0]\n    # if there are no numbers in the array, return the sum of all the values in the array\n    else:\n        return nums[0] + nums[1]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #my_list = [1,2,3,4,5,6,7,8,9,10]\n    # my_list.sort()\n    # my_sum = my_list[-1] + my_list[-2]\n    # return my_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    total = 0\n    for num in nums:\n        total = num + total\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n    if s < 0:\n        return 'The smallest number is -', s, 'while the largest is', nums[0]\n    elif s > 0:\n        return 'The largest number is', s, 'while the smallest is', nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in range(0,len(nums)):\n        sum += nums[i]\n        \n    print(sum)\n    \n    sum = 0\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            sum += nums[i+1] - nums[i]\n        else:\n            sum = nums[i+1] - nums[i]\n    \n    print(sum)\n    return sum\n    \n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    if len(nums) < 1:\n        return 'No Numbers'\n    \n    return nums[0] + sum(nums[1:])\n    \n    "
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = string.lower()\n    return lower\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    result = \"\"\n    for i in string:\n        if i.islower():\n            result += i.lower()\n    return result\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = ''\n    for char in string:\n        if char.islower():\n            lower_string += char.lower()\n        else:\n            lower_string += char.upper()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        return string.lower()\n    elif type(string) == list:\n        return [s.lower() for s in string]\n    else:\n        return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    def lower_case_sub_to_upper(str1):\n        '''\n        Write a function to replace all lowercase\n        substrings with uppercase versions.\n        '''\n        # TODO: complete this function\n        return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if(str1==str1):\n        return str1\n    else:\n        return str1.lower()\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation in a given string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char not in punctuation:\n            str2 = str2 + char\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(str1.lower(),'').replace(' ','').replace('-','')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #Remove_lowercase(str1) # Should return str1 without any substrings\n    new_str = re.sub(r'[^a-zA-Z]', '', str1.lower()).replace(' ','')\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l = list(str1)\n    for i in range(len(l)):\n        if l[i].islower():\n            l[i] = l[i].lower()\n    return \"\".join(l)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(str1.lower(), '')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_string=''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            new_string += str1[i].lower()\n        else:\n            new_string += str1[i]\n    return new_string\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10\n    #Check if the number is even or odd\n    #if the number is even, return the next number in the list\n    #if the number is odd, return next number in the list\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n) == str :\n        if n.isnumeric() == True :\n            return int(n)\n    else :\n        if n.isdigit() == True :\n            return int(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n>0:\n        if n%10 == 0 :\n            return n//10\n        else:\n            n = n//10\n    return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (type(n)!= int) :\n        return \"Invalid Input\"\n    elif (n < 0) :\n        return \"Invalid Input\"\n    elif (n == 0) :\n        return \"0\"\n    elif (n == 1) :\n        return \"1\"\n    elif (n == 2) :\n        return \"2\"\n    elif (n == 3) :\n        return \"3\"\n    elif (n == 4) :\n        return \"4\"\n    elif (n == 5) :\n        return \"5\"\n    elif (n == 6) :\n        return \"6\"\n    elif (n == 7) :\n        return \"7\"\n    elif (n == 8) :\n        return \"8\"\n    elif (n == 9) :\n        return \"9\"\n    elif (n == 10) :\n        return \"10\"\n    elif (n == 11) :\n        return \"11\"\n    elif (n == 12) :\n        return \"12\"\n    elif (n == 13) :\n        return \"13\"\n    elif (n == 14) :\n        return \"14\"\n    elif (n == 15) :\n        return \"15\"\n    elif (n == 16) :\n        return \"16\"\n    elif (n == 17) :\n        return \"17\"\n    elif (n == 18) :\n        return \"18\"\n    elif (n == 19) :\n        return \"19\"\n    elif (n == 20) :\n        return \"20\"\n    elif (n == 21) :\n        return \"21\"\n    elif (n == 22) :\n        return \"22\"\n    elif (n == 23) :\n        return \"23\"\n    elif (n == 24) :\n        return \"24\"\n    elif (n == 25) :\n        return \"25\"\n    elif (n == 26) :\n        return \"26\"\n    elif (n == 27) :\n        return \"27\"\n    elif (n == 28) :\n        return \"28\"\n    elif (n == 29) :\n        return \"29\"\n    elif (n == 30) :\n        return \"30\"\n    elif (n == 31) :\n        return \"31\"\n    elif (n == 32) :\n        return \"32\"\n    elif (n == 33) :\n        return \"33\"\n    elif (n == 34) :\n        return \"34\"\n    elif (n == 35) :\n        return \"35\"\n    elif (n == 36) :\n        return \"36\"\n    elif (n == 37) :\n        return \"37\"\n    elif (n == 38) :\n        return \"38\"\n    elif (n == 39) :\n        return \"39\"\n    elif (n == 40) :\n        return \"40\"\n    elif (n == 41) :\n        return \"41\"\n    elif (n == 42) :\n        return \"42\"\n    elif (n == 43) :\n        return \"43\"\n    elif (n == 44) :\n        return \"44\"\n    elif (n == 45) :\n        return \"45\"\n    elif (n == 46) :\n        return \"46\"\n    elif (n == 47) :\n        return \"47\"\n    elif (n == 48) :\n        return \"48\"\n    elif (n == 49) :\n        return \"49\"\n    elif (n == 50) :\n        return \"50\"\n    elif (n == 51) :\n        return \"51\"\n    elif (n == 52) :\n        return \"52\"\n    elif (n == 53) :\n        return \"53\"\n    elif (n == 54) :\n        return \"54\"\n    elif (n == 55) :\n        return \"55\"\n    elif (n == 56) :\n        return \"56\"\n    elif (n == 57) :\n        return \"57\"\n    elif (n == 58) :\n        return \"58\"\n    elif (n == 59) :\n        return \"59\"\n    elif (n == 60) :\n        return \"60\"\n    elif (n == 61) :\n        return \"61\"\n    elif (n == 62) :\n        return \"62\"\n    elif (n == 63) :\n        return \"63\"\n    elif (n == 64) :\n        return \"64\"\n    elif (n == 65) :\n        return \"65\"\n    elif (n == 66) :\n        return \"66\"\n    elif (n == 67) :\n        return \"67\"\n    elif (n == 68) :\n        return \"68\"\n    elif (n == 69) :\n        return \"69\"\n    elif (n == 70) :\n        return \"70\"\n    elif (n == 71) :\n        return \"71\"\n    elif (n == 72) :\n        return \"72\"\n    elif (n == 73) :\n        return \"73\"\n    elif (n == 74) :\n        return \"74\"\n    elif (n == 75) :\n        return \"75\"\n    elif (n == 76) :\n        return \"76\"\n    elif (n == 77) :\n        return \"77\"\n    elif (n == 78) :\n        return \"78\"\n    elif (n == 79) :\n        return \"79\"\n    elif (n == 80) :\n        return \"80\"\n    elif (n == 81) :\n        return \"81\"\n    elif (n == 82) :\n        return \"82\"\n    elif (n == 83) :\n        return \"83\"\n    elif (n == 84) :\n        return \"84\"\n    elif (n == 85) :\n        return \"85\"\n    elif (n == 86) :\n        return \"86\"\n    elif (n == 87) :\n        return \"87\"\n    elif (n == 88) :\n        return \"88\"\n    elif (n == 89) :\n        return \"89\"\n    elif (n == 90) :\n        return \"90\"\n    elif (n == 91) :\n        return \"91\"\n    elif (n == 92) :\n        return \"92\"\n    elif (n == 93) :\n        return \"93\"\n    elif (n == 94) :\n        return \"94\"\n    elif (n == 95) :\n        return \"95\"\n    elif (n == 96) :\n        return \"96\"\n    elif (n == 97) :\n        return \"97\"\n    elif (n == 98) :\n        return \"98\"\n    elif (n == 99) :\n        return \"99\"\n    elif (n == 100) :\n        return \"100\"\n    elif (n == 101) :\n        return \"101\"\n    elif (n == 102) :\n        return \"102\"\n    elif (n == 103) :\n        return \"103\"\n    elif (n == 104) :\n        return \"104\"\n    elif (n == 105) :\n        return \"105\"\n    elif (n == 106) :\n        return \"106\"\n    elif (n == 107) :\n        return \"107\"\n    elif (n == 108) :\n        return \"108\"\n    elif (n == 109) :\n        return \"109\"\n    elif (n == 110) :\n        return \"110\"\n    elif (n == 111) :\n        return \"111\"\n    elif (n == 112) :\n        return \"112\"\n    elif (n == 113) :\n        return \"113\"\n    elif (n == 114) :\n        return \"114\"\n    elif (n == 115) :\n        return \"115\"\n    elif (n == 116) :\n        return \"116\"\n    elif (n == 117) :\n        return \"117\"\n    elif (n == 118) :\n        return \"118\"\n    elif (n == 119) :\n        return \"119\"\n    elif (n == 120) :\n        return \"120\"\n    elif (n == 121) :\n        return \"121\"\n    elif (n == 122) :\n        return \"122\"\n    elif (n == 123) "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    import math\n    x = int(math.floor(math.log10(abs(n))))\n    return int(str(n)[0:x])\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n<10:\n        return n\n    else:\n        return n%10\n    \ndef main():\n    '''\n    Create a program to find the first digit of a given number.\n    '''\n    n = int(input(\"Enter a number:\"))\n    print(\"First digit of\", n, \"is\", first_Digit(n))\n    \nif __name__==\"__main__\":\n    main()\n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = n\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n < 10) :\n        return n\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if(len(list)%2==0):\n        for i in range(len(list)//2):\n            yield list[i]\n    else:\n        for i in range(len(list)//2):\n            yield list[i+len(list)//2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_result = []\n    for i in list: \n        if i % 2 == 0:\n            list_result.append(i)\n    return list_result\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = []\n    for i in list:\n        if i % 2!= 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    for i in range(len(list)):\n        if list[i] % 2 == 1:\n            list[i] = list[i]\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [] \n    odd = [] \n    for i in range(0, len(list), 2): \n        result.append(list[i]) \n    for i in range(0, len(result), 2): \n        odd.append(result[i]) \n    return od"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] % 2!= 0:\n            list.remove(list[i])\n            i = i + 1\n        i = i + 1\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = list[0::2]\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for x in list: \n        if x%2 == 0: \n            odd_list.append(x)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    output = []\n    # Code here\n    for num in list:\n        if num % 2!= 0:\n            output.append(num)\n    return output\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total_n = 0\n    for i in range(n):\n        total_n += (3 * (i + 1))\n    return total_n\n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    print (n)\n    cube = n * n * n\n    return (cube)\n    \nprint(difference(9))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(n):\n        cubes.append(i**3)\n    return sum(cubes) - sum(cubes[0:n])\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n+difference(n-1)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(f\"Difference of sum of cubes of first {n} natural numbers and sum of cubes of first {n} natural numbers : \",end=\" \")\n    for i in range(1,n+1):\n        print(i**3,\" \",end=\" \")\n    print(0)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cube = (n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5))\n    print(cube)\n    return cube\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    list_of_cubes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65]\n    numbers = []\n    for i in range(len(list_of_cubes) - 1):\n        numbers.append((list_of_cubes[i] + list_of_cubes[i + 1]))\n    difference = sum(numbers)\n    print(\"The difference between the sum of cubes of the first \" + str(n) + \" natural numbers and the sum of the \" + str(n) + \" natural numbers is \" + str(difference))\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_n=0\n    for i in range(0,n) : \n        sum_n=sum_n+i**3\n    return sum_n\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n < 1 :\n        raise ValueError ('n must be greater than or equal to 1')\n    elif n == 1 :\n        return 1\n    else :\n        return n * (n - 1) * 3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1=0\n    sum2=0\n    for i in range(n) :\n        sum1+=i**3\n        sum2+=i**2\n    return sum1-sum2\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(1,N) :\n        if A[i] == A[i-1] :\n            odd_pairs += 1\n    \n    return odd_pairs\n    \nprint(find_Odd_Pair([0, 1, 2, 3, 4], 5)) # Should be 1\nprint(find_Odd_Pair([0, 1, 2, 3, 4], 6)) # Should be 2\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(0,N) : \n        xor = A[i] ^ 0xF\n        if xor!= A[i] : \n            return 2\n    return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    num_odd = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] & A[j] == 0:\n                num_odd += 1\n    return num_odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # count pairs with xor value odd\n    odd = 0\n    # for each row\n    for i in range(N) :\n        # for each col\n        for j in range(N) :\n            # if xor value odd\n            if (A[i][j]%2)!= (A[j][i]%2) :\n                # add to odd\n                odd = odd + 1\n    # return the number of odd pairs\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] == 0 :\n                count += 1\n            \n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #Initializing the variables\n    odd_pairs = 0\n    #checking if the values of x and y are odd or not\n    for i in range(0,N):\n        if (A[i]&1) == 1:\n            odd_pairs+=1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd=0\n    for i in range(0,N) : \n        for j in range(i+1,N) :\n            if (A[i]^A[j]==1) : \n                if A[i]&A[j]==0 : \n                    odd+=1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd=0\n    for i in range(N-1) : \n        if A[i]&A[i+1]==0 : \n            odd=odd+1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    counter = 0\n    for i in range(1,N) : \n        xor = A[i]\n        if xor!= A[i-1] : \n            counter += 1\n    return counter \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] == A[j] or (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for c in string:\n        if c =='':\n            result += '_'\n        elif c.isupper():\n            result += '_'\n        elif c.islower():\n            result += '_'\n        elif c.isdigit():\n            result += '_'\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for c in string:\n        if c == c.lower():\n            result += c.upper()\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.lower().swapcase()\n    \ndef test_toggle_string():\n    '''\n    Test function for toggle_string\n    '''\n    assert toggle_string(\"abcd\") == \"bcd\"\n    assert toggle_string(\"ab\") == \"a\"\n    assert toggle_string(\"a\") == \"a\"\n    assert toggle_string(\"aA\") == \"aA\"\n    assert toggle_string(\"AAAAAAAAAAA\") == \"AaA\"\n    assert toggle_string(\"\") == \"\"\n    \nif __name__ == '__main__':\n    test_toggle_string()"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return string\n    else:\n        return string.upper()\n    \nprint(toggle_string(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(toggle_string(\"abefghijklmnopqrstuvwxyz\"))\nprint(toggle_string(\"abefghijklmnopqrstuvwxyz\"))\nprint(toggle_string(\"Abefeghijklmnopqrstuvwxyz\"))\nprint(toggle_string(\"Abefeghijklmnopqrstuvwxyz\"))\nprint(toggle_string(\"Abefeghijklmnopqrstuvwxyz\")"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for c in string:\n        if c.isupper():\n            new_string += \" \"\n            new_string += \"U\"\n        elif c.islower():\n            new_string += \" \"\n            new_string += \"L\"\n        else:\n            new_string += \" \"\n            new_string += \"C\"\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    # Initialize two variables to store differences\n    diff = 0\n    \n    # Loop over the digit of n1\n    for n in str(n1):\n        \n        # If the n1 value is less than the n2, we\n        # have an error. Go to the next digit\n        if int(n) < int(n2):\n            \n            # Add the difference to the sum\n            diff = diff + int(n)\n            \n        # If the n1 value is greater than or equal to the\n        # n2, we have an error. Go to the next digit\n        else:\n            \n            # Add the difference to the sum\n            diff = diff + int(n)\n    \n    # Return the sum of differences\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(n1)):\n        sum += (int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #print(n1, n2)\n    dig = 0\n    if n1 < n2:\n        dig = 1\n        n1, n2 = n2, n1\n    s = 0\n    while n1 < 10 ** (dig - 1):\n        #print(n1, n2)\n        s += n1 * 10 ** (dig - 1)\n        #print(s)\n        n1 *= 10\n        dig += 1\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # check that n1 and n2 are integers\n    try:\n        int(n1)\n        int(n2)\n    except:\n        return \"Please enter digits separated by spaces\"\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return int((n2-n1)/2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = []\n    for i in range(10):\n        distance.append(0)\n    for i in range(n1,n2):\n        distance[i-n1] += 1\n    return sum(distance)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # TODO: COMPLETE THIS FUNCTION\n    return sum([abs(n1-n2), n1 - n2])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for x in range(10):\n        diff += abs(n1 - n2)\n        n2 = n2 * 10\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def digit_difference(n):\n        return abs(n%10 - n%10)\n    return sum([digit_difference(int(digit)) for digit in str(abs(n1-n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = abs(n1 - n2)\n    s = 0\n    while d1 > 1:\n        s = s + d1 % 10\n        d1 //= 10\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = 0\n    max_sub_sum_idx = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #Approach 1:\n    #    [0,0,0,0]\n    #    [0,0,1,0]\n    #    [0,0,0,1]\n    #    [0,0,1,1]\n    #    [0,0,0,2]\n    #    [0,0,1,2]\n    #    [0,0,0,3]\n    #    [0,0,1,3]\n    #    [0,0,0,4]\n    #    [0,0,1,4]\n    #    [0,0,0,5]\n    #    [0,0,1,5]\n    #    [0,0,0,6]\n    #    [0,0,1,6]\n    #    [0,0,0,7]\n    #    [0,0,1,7]\n    #    [0,0,0,8]\n    #    [0,0,1,8]\n    #    [0,0,0,9]\n    #    [0,0,1,9]\n    #    [0,0,0,10]\n    #    [0,0,1,10]\n    #    [0,0,0,11]\n    #    [0,0,1,11]\n    #    [0,0,0,12]\n    #    [0,0,1,12]\n    #    [0,0,0,13]\n    #    [0,0,1,13]\n    #    [0,0,0,14]\n    #    [0,0,1,14]\n    #    [0,0,0,15]\n    #    [0,0,1,15]\n    #    [0,0,0,16]\n    #    [0,0,1,16]\n    #    [0,0,0,17]\n    #    [0,0,1,17]\n    #    [0,0,0,18]\n    #    [0,0,1,18]\n    #    [0,0,0,19]\n    #    [0,0,1,19]\n    #    [0,0,0,20]\n    #    [0,0,1,20]\n    #    [0,0,0,21]\n    #    [0,0,1,21]\n    #    [0,0,0,22]\n    #    [0,0,1,22]\n    #    [0,0,0,23]\n    #    [0,0,1,23]\n    #    [0,0,0,24]\n    #    [0,0,1,24]\n    #    [0,0,0,25]\n    #    [0,0,1,25]\n    #    [0,0,0,26]\n    #    [0,0,1,26]\n    #    [0,0,0,27]\n    #    [0,0,1,27]\n    #    [0,0,0,28]\n    #    [0,0,1,28]\n    #    [0,0,0,29]\n    #    [0,0,1,29]\n    #    [0,0,0,30]\n    #    [0,0,1,30]\n    #    [0,0,0,31]\n    #    [0,0,1,31]\n    #    [0,0,0,32]\n    #    [0,0,1,32]\n    #    [0,0,0,33]\n    #    [0,0,1,33]\n    #    [0,0,0,34]\n    #    [0,0,1,34]\n    #    [0,0,0,35]\n    #    [0,0,1,35]\n    #    [0,0,0,36]\n    #    [0,0,1,36]\n    #    [0,0,0,37]\n    #    [0,0,1,37]\n    #    [0,0,0,38]\n    #    [0,0,1,38]\n    #    [0,0,0,39]\n    #    [0,0,1,39]\n    #    [0,0,0,40]\n    #    [0,0,1,40]\n    #    [0,0,0,41]\n    #    [0,0,1,41]\n    #    [0,0,0,42]\n    #    [0,0,1,42]\n    #    [0,0,0,43]\n    #    [0,0,1,43]\n    #    [0,0,0,44]\n    #    [0,0,1,44]\n    #    [0,0,0,45]\n    #    [0,0,1,45]\n    #    [0,0,0,46]\n    #    [0,0,1,46]\n    #    [0,0,0,47]\n    #    [0,0,1,47]\n    #    [0,0,0,48]\n    #    [0,0,1,48]\n    #    [0,0,0,49]\n    #    [0,0,1,49]\n    #    [0,0,0,50]\n    #    [0,0,1,50]\n    #    [0,0,0,51]\n    #    [0,0,1,51]\n    #    [0,0,0,52]\n    #    [0,0,1,52]\n    #    [0,0,0,53]\n    #    [0,0,1,53]\n    #    [0,0,0,54]\n    #    [0,0,1,54]\n    #    [0,0,0,55]\n    #    [0,0,1,55]\n    #    [0,0,0,56]\n    #    [0,0,1,56]\n    #    [0,0,0,57]\n    #    [0,0,1,57]\n    #    [0,0,0,58]\n    #    [0,0,1,58]\n    #    [0,0,0,59]\n    #    [0,0,1,59]\n    #    [0,0,0,60]\n    #    [0,0,1,60]\n    #    [0,0,0,61]\n    #    [0,0,1,61]\n    #    [0,0,0,62]\n    #    [0,0,1,62]\n    #    [0,0,0,63]\n    #    [0,0,1,63]\n    #    [0,0,0,64]\n    #    [0,0,1,64]\n    #    [0,0,0,65]\n    #    [0,0,1,65]\n    #    [0,0,0,66]\n    #    [0,0,1,66]\n    #    [0,0,0,67]\n    #    [0,0,1,67]\n    #    [0,0,0,68]\n    #    [0,0,1,68]\n    #    [0,0,0,69]\n    #    [0,0,1,69]\n    #    [0,0,0,70]\n    #    [0,0,1,70]\n    #    [0,0,0,71]\n    #    [0,0,1,71]\n    #    [0,0,0,72]\n    #    [0,0,1,72]\n    #    [0,0,0,73]\n    #    [0,0,1,73]\n    #    [0,0,0,74]\n    #    [0,0,1,74]\n    #    [0,0,0,75]\n    #    [0,0,1,75]\n    #    [0,0,0,76]\n    #    [0,0,1"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    for i in range(0, size):\n        sum += a[i]\n        if sum > size:\n            break\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    memo = [-1 for _ in range(size)]\n    # define a helper function to find the max sublist\n    def max_sub_array_sum_helper(index, current_sum):\n        # if we've reached the last index, return the current sum\n        if index == size - 1:\n            return current_sum\n        # if we haven't yet reached the last index, return the sum of the previous sublist\n        elif index == 0:\n            return current_sum + a[index]\n        else:\n            # pick the maximum of the two sublists so far\n            sub_list_a = max_sub_array_sum_helper(index + 1, current_sum)\n            sub_list_b = max_sub_array_sum_helper(index + 1, current_sum + a[index])\n            # if sublists are the same, return the sublist's sum\n            if sub_list_a == sub_list_b:\n                return sub_list_a\n            else:\n                return max(sub_list_a, sub_list_b)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = 0\n    current_sum = 0\n    max_sub = [0]\n    max_index = 0\n    for index in range(size):\n        current_sum += a[index]\n        if current_sum > max_sub_sum:\n            max_sub_sum = current_sum\n            max_sub = [a[index]]\n            max_index = index\n        elif current_sum == max_sub_sum:\n            max_sub.append(a[index])\n            if index < len(a)-1:\n                current_sum = 0\n                max_sub_sum = 0\n                max_index = -1\n                \n    return max_sub[max_index]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    summ = 0\n    k = 0\n    for i in range(0, len(a)):\n        summ += a[i]\n        if summ == size:\n            k += 1\n            summ = 0\n            if k == size:\n                print(summ)\n                return summ\n    print(summ)\n    return summ\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = -sys.maxsize\n    max_index = 0\n    for i in range(size):\n        if (a[i] < 0):\n            continue\n        sub_sum = a[i]\n        for j in range(i, size):\n            if a[j] > 0:\n                sub_sum += a[j]\n                if sub_sum > max_sub_sum:\n                    max_sub_sum = sub_sum\n                    max_index = j\n    return max_sub_sum, max_index\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    def next_sum(a, length):\n        '''\n        Finds the next sum of the largest contiguous sublist in a, where a is a list of integers.\n        '''\n        total = 0\n        \n        for i in range(length):\n            total += sum(a[i:])\n        \n        return total\n    \n    max_sum = 0\n    \n    length = 0\n    \n    for i in range(size):\n        length += 1\n        \n        max_sum = max(next_sum(a, length), max_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # max_sum = 0\n    # prev_sum = 0\n    # # a = [0,1,2,3,4,5]\n    # # size = 5\n    # for i in range(0, size):\n    #     # max_sum += a[i]\n    #     prev_sum = prev_sum + a[i]\n    #     if prev_sum > 0:\n    #         max_sum = max(max_sum, prev_sum)\n    # return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    size = len(a)\n    sum_ = 0\n    for i in range(size):\n        if sum_ < 0:\n            sum_ = 0\n        sum_ += a[i]\n        if sum_ > size * size:\n            return sum_\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted([test_tup1[0] + test_tup2[0] + test_tup1[1] + test_tup2[1]])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    i,j,k = 0,0,0\n    #nested loops\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            i+=1\n        else:\n            j+=1\n    #swapping\n    while i < len(test_tup1):\n        test_tup1[k]=test_tup1[i]\n        i+=1\n        k+=1\n    while j < len(test_tup2):\n        test_tup2[k]=test_tup2[j]\n        j+=1\n        k+=1\n    return tuple(sorted(test_tup1+test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_tuple = []\n    elements_set1 = set(test_tup1)\n    elements_set2 = set(test_tup2)\n    result_tuple.extend(list(elements_set1 & elements_set2))\n    result_tuple.extend(list(elements_set1 - elements_set2))\n    result_tuple.extend(list(elements_set2 - elements_set1))\n    return result_tuple\n    \ndef find_common_element(test_tup1, test_tup2):\n    '''\n    Write a function to find the common element of two given tuples.\n    '''\n    result_tuple = []\n    result_tuple.extend(list(test_tup1 & test_tup2))\n    result_tuple.extend(list(test_tup1 - test_tup2))\n    result_tuple.extend(list(test_tup2 - test_tup1))\n    return result_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    print(\"*\"*50)\n    if test_tup1 == [] or test_tup2 == []:\n        return []\n    else:\n        test_tup1.sort()\n        test_tup2.sort()\n        union_tuple = test_tup1 + test_tup2\n        print(union_tuple)\n        return union_tuple"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return tuple(sorted(test_tup1))\n    else:\n        return tuple(sorted(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the minimum element of each list.\n    # Use min() to find the minimum element of each list.\n    # Use max() to find the maximum element of each list.\n    min1 = min(test_tup1[0], test_tup2[0])\n    max1 = max(test_tup1[1], test_tup2[1])\n    # Find the minimum element of each list.\n    # Use min() to find the minimum element of each list.\n    # Use max() to find the maximum element of each list.\n    min2 = min(test_tup1[2], test_tup2[2])\n    max2 = max(test_tup1[3], test_tup2[3])\n    # Sort each list in ascending order.\n    # Use min() to find the minimum element of each list.\n    # Use max() to find the maximum element of each list.\n    return (min1, min2, max1, max2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_tup1 = sorted(test_tup1)\n    sorted_tup2 = sorted(test_tup2)\n    if len(sorted_tup1) == 0 or len(sorted_tup2) == 0:\n        return sorted_tup1\n    elif sorted_tup1[0] < sorted_tup2[0]:\n        return union_elements(sorted_tup1, sorted_tup2)\n    else:\n        return union_elements(sorted_tup2, sorted_tup1)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    newlist = []\n    new_list = []\n    i = 0\n    j = 0\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    if len(test_tup1) > len(test_tup2):\n        return list(set(test_tup1) | set(test_tup2))\n    elif len(test_tup1) < len(test_tup2):\n        return list(set(test_tup2) | set(test_tup1))\n    else:\n        return test_tup1 + test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(test_tup1 + test_tup2))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    lst_max = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if lst[i] == lst[j]:\n                lst_max += 1\n    return lst_max\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0\n    index_length = 0\n    if len(lst) < 2:\n        return 1\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] == lst[i+1]:\n                index_length += 1\n            else:\n                break\n        \n        if index_length > max_length:\n            max_length = index_length\n        else:\n            index_length = 0\n        \n        for i in range(len(lst) - 1):\n            if lst[i]!= lst[i+1]:\n                break\n            index_length += 1\n        \n        return max_length\n    \ndef find_max_length_rec(lst):\n    if len(lst) < 2:\n        return 1\n    \n    max_length = 0\n    index_length = 0\n    if len(lst) % 2 == 0:\n        for i in range(len(lst)):\n            if lst[i] == lst[i+1]:\n                index_length += 1\n            else:\n                break\n        \n        if index_length > max_length:\n            max_length = index_length\n        else:\n            index_length = 0\n        \n        for i in range(len(lst) - 1):\n            if lst[i]!= lst[i+1]:\n                break\n            index_length += 1\n        \n        return max_length\n    else:\n        return 1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublist = []\n    sublist_len = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] == lst[j]:\n                sublist.append(i)\n                sublist.append(j)\n                if len(sublist) > len(sublist_len):\n                    sublist_len = sublist\n    print(sublist_len)\n    \n    '''\n    Output:\n        [0, 0, 0]\n        [0, 0, 0, 1]\n        [0, 0, 0, 1, 2]\n    '''\n    return max(sublist_len)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    elif len(lst)==1:\n        return 1\n    elif lst[0]==lst[1]:\n        return 2\n    else:\n        return Find_Max_Length(lst[1:])+1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    def LCS(x, y):\n        M = len(x)\n        N = len(y)\n        if M > N:\n            return Find_Max_Length(y)\n        if M == 0:\n            return 0\n        if N == 0:\n            return 0\n        if x[0] == y[0]:\n            return 1 + LCS(x[1:], y[1:])\n        else:\n            return max(LCS(x[1:], y), LCS(x, y[1:]))\n    if len(lst) == 0:\n        return 0\n    else:\n        return LCS(lst[0], lst[1:])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if(lst[i] < lst[j]):\n                if(len(lst[i:j+1]) > maxLen):\n                    maxLen = len(lst[i:j+1])\n    return maxLen\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize an array to store max sublists\n    max_sublist = []\n    # Traverse through all the sublists\n    for i in range(len(lst)):\n        # Loop through all the sublists and find max\n        for j in range(i, len(lst)):\n            # If sublist is not empty and the length of sublist is greater than the max sublist\n            if len(lst[i]) > len(lst[j]) and max_sublist == []:\n                # Add max sublist and it's length to a list\n                max_sublist = [len(lst[i]), lst[i]]\n            # If sublist is empty and the length of sublist is greater than the max sublist\n            elif len(lst[i]) > len(lst[j]) and len(lst[j]) > max_sublist:\n                # Update max_sublist\n                max_sublist = [len(lst[i]), lst[i]]\n    # Return max_sublist\n    return max_sublist[0]\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        max_len = max(max_len,len(i))\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    l = len(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_Length = 0\n    List = []\n    for i in range(len(lst)):\n        List.append(lst[i])\n    for i in range(len(List)):\n        for j in range(i+1,len(List)):\n            if(len(List[i])>len(List[j])):\n                if(len(List[i])>Max_Length):\n                    Max_Length=len(List[i])\n    return Max_Length\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.split('[',text)\n    for i in range(len(values)):\n        values[i] = values[i].strip()\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # extract the values from the string using the regular expressions\n    # and place them in an array\n    values = re.findall(r\"(?<=' )(.+)(?=')\", text, flags=re.DOTALL)\n    # remove the trailing quotes\n    values = [value.strip(\"'\") for value in values]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    split = text.split('\"')\n    print(split)\n    return split\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.split('\"')[1]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'(\\w+)[,]\\s*(.+)', text)\n    if values:\n        return values\n    else:\n        return []\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    s=re.findall(\"\\'(.+)\\'\",text)\n    return s\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    for char in text:\n        if char!= '\"' and char!= \"'\":\n            values.append(char)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted_values = []\n    for match in re.finditer('\"', text):\n        extracted_values.append(match.group())\n    return extracted_values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    s = re.findall(r'\"([^\"]*)\"', text)\n    if s!= []:\n        return s[0].strip('\"')\n    else:\n        return ''\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # pattern = re.compile(r'[(](.*?)[)]')\n    pattern = re.compile(r'[(](.*?)[)](.*)')\n    # The pattern is a regular expression that matches the pattern in the string.\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j] or arr[i]%2==arr[j]%2:\n                c+=1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j] and arr[i] <= n:\n                total = total + 1\n    return total\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) < 2: \n        return 0\n    \n    c = 0\n    for i in range(0, n-2): \n        for j in range(i+1, n-1): \n            if arr[i] == arr[j]: \n                c += 1\n            else: \n                break\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==1:\n        return 1\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] == arr[j]):\n                count +=1\n    return count\ndef sum(arr,n):\n    '''\n    Write a python function which returns the sum of the numbers in arr.\n    '''\n    if n==1:\n        return arr[0]\n    sum = 0\n    for i in range(n):\n        sum +=arr[i]\n    return sum\ndef sort(arr):\n    '''\n    Use the sort function to sort the list.\n    '''\n    if n==1:\n        return arr\n    l = arr[:n//2]\n    r = arr[n//2:]\n    return sort(l)+[r[0]]+sort(r)\ndef getSum(arr):\n    '''\n    Write a python function which returns the sum of the numbers in arr.\n    '''\n    if n==1:\n        return arr[0]\n    return arr[0]+getSum(arr[1:])\ndef maxPairs(arr,n):\n    '''\n    Write a python function which returns the maximum number of pairs.\n    '''\n    return count_Pairs(arr,n)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                c+=1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n = len(arr)\n    out = 0\n    for i in range(n):\n        for j in range(i):\n            if (arr[i]!=arr[j]):\n                out+=1\n    return out\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    out = 0\n    \n    for i in range(n):\n        for j in range(i):\n            if arr[i] < arr[j] and arr[i]!= arr[j]:\n                out += 1\n    return out\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    p=0\n    for i in arr:\n        for j in arr:\n            if i!=j:\n                if i+j==n:\n                    p=p+1\n    return p\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = {}\n    nums = list(set(arr))\n    for i in range(n):\n        for j in range(i):\n            if(arr[i]!= arr[j]):\n                res[(arr[i],arr[j])] = 1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    #print(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    char = word\n    splits = []\n    while len(char) > 1:\n        splits.append(char[:2])\n        char = char[2:]\n    splits.append(char)\n    return splits\n    \ndef print_words(split_word):\n    '''\n    Write a python function to print all the words in the string\n    to the console.\n    '''\n    for word in split_word:\n        print(word)\n        \n    \ndef is_subsequence(word_a, word_b):\n    '''\n    Write a python function to check if one word is a subsequence\n    of another. \n    '''\n    return [word_a[i:i+len(word_b)] == word_b for i in range(len(word_a))]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower() \n    return word.split(' ') \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    try: \n        return [char for char in word]\n    except TypeError: \n        print(\"This is not a string\")\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word.isalpha():\n        return word.split(\" \")\n    else:\n        return word\n    \ndef to_int(word): \n    '''\n    Convert a string to an integer.\n    '''\n    return int(word)\n    \ndef to_float(word): \n    '''\n    Convert a string to a float.\n    '''\n    return float(word)\n    \ndef find_index(list, word): \n    '''\n    Find a specific index from a list.\n    '''\n    for index, letter in enumerate(list): \n        if letter == word: \n            return index\n    return -1\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    splited_string = [ word[i:i+len(word)] for i in range(0, len(word), len(word)) ]\n    return splited_string\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        rem = n % 10\n        sum = sum + rem\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n if n >= 0 else 0\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if type(n)!= int:\n        raise TypeError('please use int')\n    if n < 0:\n        raise ValueError('please use int only')\n    res = 0\n    while n!= 0:\n        res += n % 10\n        n = n // 10\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        r = n % 10\n        s += r\n        n = n // 10\n    return s\n    \n    \ndef compress(x):\n    '''\n    Given a positive integer x, return its inverse as a positive integer.\n    '''\n    i = 0\n    while x!= 0:\n        i = i * 10 + x % 10\n        x = x // 10\n    return i\n    \n    \ndef invert_power_of_2(x):\n    '''\n    Given an integer x, return its inverse as a power of 2.\n    '''\n    i = 1\n    while i <= x:\n        if x % i == 0:\n            x = x // i\n        else:\n            i += 1\n    return x\n        \n        \ndef solution(n):\n    '''\n    Given an integer n, return its inverse as a power of 2.\n    '''\n    return (invert_power_of_2(compress(sum_digits(n)))"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum\n    sum = 0\n    # check if the number is negative\n    if n < 0:\n        # reverse the number\n        n = abs(n)\n        # get the number of digits\n        num_of_digits = len(str(n))\n        # iterate through the number\n        for i in range(num_of_digits):\n            # get the number from the string\n            n_number = int(str(n)[-1-i])\n            # add the number of digits to the sum\n            sum += n_number\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num = n\n    while n > 0:\n        num = num * 10\n        n = n / 10\n    return num\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n%10) + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    # raise NotImplementedError\n    sum = 0\n    while n>0:\n        sum = sum + n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return list1[0] == list1[-1]\n    elif len(list1) == 2:\n        return list1[0] == list1[1] and list1[1] == list1[-1]\n    else:\n        mid = len(list1) // 2\n        return issort_list(list1[:mid]) and issort_list(list1[mid:]) and issort_list(list1[:mid])\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n        \ndef sort_list_by_distance(list1,list2):\n    '''\n    Write a function to sort a list by distance to the other list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] < list1[j]:\n                temp = list1[i]\n                list1[i] = list1[j]\n                list1[j] = temp\n    return list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1) - i - 1):\n            if list1[j] > list1[j + 1]:\n                list1[j], list1[j + 1] = list1[j + 1], list1[j]\n    return list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check = True\n    for i in range(0,len(list1)-1):\n        if list1[i] > list1[i+1]:\n            check = False\n    return check\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Write your code here.\n    for i in range(0, len(list1) - 1):\n        if list1[i] < list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return False\n    else:\n        if list1[0] > list1[1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n    \nlist1 = [2,3,5,1,4,6,0]\nprint(issort_list(list1)"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length > 0:\n        empty = []\n        return empty\n    else:\n        return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n    #create empty list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if type(list1)!= list:\n        return \"input type error\"\n    \n    def sort_helper(lst):\n        if len(lst) == 1:\n            return lst\n        else:\n            pivot = lst[0]\n            i,j = 0,0\n            while j < len(lst) and i < len(lst):\n                if lst[i] < pivot:\n                    lst[i], lst[j] = lst[j], lst[i]\n                    i+=1\n                    j+=1\n                elif lst[i] > pivot:\n                    lst[i], lst[j] = lst[j], lst[i]\n                    j+=1\n                elif lst[i] == pivot:\n                    lst[i], lst[j] = lst[j], lst[i]\n                    i+=1\n                    j+=1\n            if j == len(lst):\n                j = 0\n                for k in range(len(lst)):\n                    lst[k],lst[j] = lst[j],lst[k]\n                    j+=1\n            return lst\n    \n    def merge_sort(lst):\n        if len(lst) <= 1:\n            return lst\n        mid = len(lst)//2\n        list1 = merge_sort(lst[:mid])\n        list2 = merge_sort(lst[mid:])\n        return merge(list1,list2)\n    \n    def merge(list1,list2):\n        i,j = 0,0\n        sorted_list = []\n        while i < len(list1) and j < len(list2):\n            if list1[i] < list2[j]:\n                sorted_list.append(list1[i])\n                i+=1\n            else:\n                sorted_list.append(list2[j])\n                j+=1\n        if i == len(list1):\n            while j < len(list2):\n                sorted_list.append(list2[j])\n                j+=1\n        if i == len(list2):\n            while i < len(list1):\n                sorted_list.append(list1[i])\n                i+=1\n        return sorted_list\n    \n    def merge_sort(lst):\n        if len(lst) <= 1:\n            return lst\n        mid = len(lst)//2\n        list1 = merge_sort(lst[:mid])\n        list2 = merge_sort(lst[mid:])\n        return merge(list1,list2)\n    \n    lst = sort_helper(list1)\n    lst = sort_helper(list2)\n    lst = merge_sort(lst)\n    return lst\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(lambda x: sorted(x), zip(*list1)))\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    if len(list1) == 0:\n        return\n    \n    count = 0\n    i = 0\n    while i < len(list1[0]):\n        if list1[0][i]!= list1[1][i]:\n            count += 1\n            i = 0\n            if count == len(list1):\n                break\n            else:\n                i += 1\n        else:\n            i += 1\n    \n    # Convert to list so you can loop over it\n    list2 = []\n    for sublist in list1:\n        list2.append(sublist)\n    \n    # Loop through the list\n    while i < len(list2):\n        # Check that the index doesn't go out of range\n        if i > len(list2)-1:\n            i = 0\n            continue\n        # Check that the string matches the one it is at\n        if list2[i]!= list2[i+1]:\n            count += 1\n            # Reverse the list\n            list2.append(list2.pop(i))\n        # Make sure the count isn't more than the number of indices\n        # by adding one to the end\n        if count > len(list2)-1:\n            count = 0\n            list2.append(list2.pop())\n        i += 1\n    \n    return list2\n        \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort(list1):\n        print(\"Performing sorting of the input lists\")\n        for i in range(len(list1)):\n            for j in range(len(list1[i])):\n                if list1[i][j]!= \" \":\n                    list1[i][j] = list1[i][j].replace(\"-\", \" \")\n                    list1[i][j] = list1[i][j].replace(\"(\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\" \", \"\")\n                    list1[i][j] = list1[i][j].replace(\",\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"(\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", \"\")\n                    list1[i][j] = list1[i][j].replace(\"  \", \" \").replace(\" \", \"\").replace(\"\\n\", "
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) < 2:\n        return list1\n    else:\n        a = len(list1)\n        for i in range(a):\n            a = a - 1\n            for j in range(len(list1[i])):\n                list1[i][j] = list1[i][j].lower()\n                if list1[i][j] == '.':\n                    list1[i][j] = ''\n        return sort_sublists(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort the list of lists\n    list2 = sorted(list1, key=len)\n    # list2 = sorted(list1, key=lambda x: len(x), reverse=True)\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i][j] =='':\n                list1[i][j] = '#'\n            elif list1[i][j] == ',':\n                list1[i][j] = '.'\n            elif list1[i][j] == '.':\n                list1[i][j] = '#'\n            elif list1[i][j] == '>':\n                list1[i][j] = '@'\n            elif list1[i][j] == '<':\n                list1[i][j] = '@'\n            elif list1[i][j] == '@':\n                list1[i][j] =''\n            elif list1[i][j] == '=':\n                list1[i][j] = '!'\n            elif list1[i][j] == '=!':\n                list1[i][j] = '=!'\n            elif list1[i][j] == '=!=':\n                list1[i][j] = '='\n            elif list1[i][j] == '=&':\n                list1[i][j] = '&'\n            elif list1[i][j] == '=&=':\n                list1[i][j] = '&='\n            elif list1[i][j] == '=<':\n                list1[i][j] = '<'\n            elif list1[i][j] == '=<=':\n                list1[i][j] = '<='\n            elif list1[i][j] == '=>':\n                list1[i][j] = '>'\n            elif list1[i][j] == '=>=':\n                list1[i][j] = '>='\n            elif list1[i][j] == '=!=':\n                list1[i][j] = '!='\n            elif list1[i][j] == '=!=!':\n                list1[i][j] = '!='\n            elif list1[i][j] == '=!=!=':\n                list1[i][j] = '!='\n            elif list1[i][j] == '=&!':\n                list1[i][j] = '&!'\n            elif list1[i][j] == '=&!=':\n                list1[i][j] = '&!'\n            elif list1[i][j] == '=&!=!':\n                list1[i][j] = '!='\n            elif list1[i][j] == '=&!=!=':\n                list1[i][j] = '!='\n            elif list1[i][j] == '=&!=!=!':\n                list1[i][j] = '!='\n            elif list1[i][j] == '=&!=!=!=':\n                list1[i][j] = '!='\n            elif list1[i][j] == '=':\n                list1[i][j] = '!'\n            elif list1[i][j] == '!=':\n                list1[i][j] = '!'\n            elif list1[i][j] == '!=':\n                list1[i][j] = '!'\n            elif list1[i][j] == '!=!':\n                list1[i][j] = '!'\n            elif list1[i][j] == '!=!=!':\n                list1[i][j] = '!'\n            elif list1[i][j] == '!':\n                list1[i][j] = '!'\n            else:\n                pass\n        \n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = list1[i][j].lower()\n        list1[i] = [item.lower() for item in list1[i]]\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        for i in range(len(sublist)):\n            if isinstance(sublist[i], list) or isinstance(sublist[i], tuple):\n                if isinstance(sublist[i][0], list) or isinstance(sublist[i][0], tuple):\n                    for item in range(len(sublist[i])):\n                        if isinstance(sublist[i][item], list) or isinstance(sublist[i][item], tuple):\n                            sublist[i] = sorted(sublist[i], key=lambda x:x[item])\n                else:\n                    if isinstance(sublist[i], list) or isinstance(sublist[i], tuple):\n                        if isinstance(sublist[i][0], list) or isinstance(sublist[i][0], tuple):\n                            sublist[i] = sorted(sublist[i], key=lambda x:x[0])\n    for i in range(len(list1)):\n        result.append(list1[i])\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #loop through each sublist and sort it according to the first letter of the string\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j].lower() == 'a':\n                list1[i][j] = 'A'\n            elif list1[i][j].lower() == 'b':\n                list1[i][j] = 'B'\n            elif list1[i][j].lower() == 'c':\n                list1[i][j] = 'C'\n            elif list1[i][j].lower() == 'd':\n                list1[i][j] = 'D'\n            elif list1[i][j].lower() == 'e':\n                list1[i][j] = 'E'\n            elif list1[i][j].lower() == 'f':\n                list1[i][j] = 'F'\n            elif list1[i][j].lower() == 'g':\n                list1[i][j] = 'G'\n            elif list1[i][j].lower() == 'h':\n                list1[i][j] = 'H'\n            elif list1[i][j].lower() == 'i':\n                list1[i][j] = 'I'\n            elif list1[i][j].lower() == 'j':\n                list1[i][j] = 'J'\n            elif list1[i][j].lower() == 'k':\n                list1[i][j] = 'K'\n            elif list1[i][j].lower() == 'l':\n                list1[i][j] = 'L'\n            elif list1[i][j].lower() =='m':\n                list1[i][j] = 'M'\n            elif list1[i][j].lower() == 'n':\n                list1[i][j] = 'N'\n            elif list1[i][j].lower() == 'o':\n                list1[i][j] = 'O'\n            elif list1[i][j].lower() == 'p':\n                list1[i][j] = 'P'\n            elif list1[i][j].lower() == 'q':\n                list1[i][j] = 'Q'\n            elif list1[i][j].lower() == 'r':\n                list1[i][j] = 'R'\n            elif list1[i][j].lower() =='s':\n                list1[i][j] = 'S'\n            elif list1[i][j].lower() == 't':\n                list1[i][j] = 'T'\n            elif list1[i][j].lower() == 'u':\n                list1[i][j] = 'U'\n            elif list1[i][j].lower() == 'v':\n                list1[i][j] = 'V'\n            elif list1[i][j].lower() == 'w':\n                list1[i][j] = 'W'\n            elif list1[i][j].lower() == 'x':\n                list1[i][j] = 'X'\n            elif list1[i][j].lower() == 'y':\n                list1[i][j] = 'Y'\n            elif list1[i][j].lower() == 'z':\n                list1[i][j] = 'Z'\n    #sort sublists according to their first letter in string\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j].lower() == 'a':\n                list1[i][j] = 'A'\n            elif list1[i][j].lower() == 'b':\n                list1[i][j] = 'B'\n            elif list1[i][j].lower() == 'c':\n                list1[i][j] = 'C'\n            elif list1[i][j].lower() == 'd':\n                list1[i][j] = 'D'\n            elif list1[i][j].lower() == 'e':\n                list1[i][j] = 'E'\n            elif list1[i][j].lower() == 'f':\n                list1[i][j] = 'F'\n            elif list1[i][j].lower() == 'g':\n                list1[i][j] = 'G'\n            elif list1[i][j].lower() == 'h':\n                list1[i][j] = 'H'\n            elif list1[i][j].lower() == 'i':\n                list1[i][j] = 'I'\n            elif list1[i][j].lower() == 'j':\n                list1[i][j] = 'J'\n            elif list1[i][j].lower() == 'k':\n                list1[i][j] = 'K'\n            elif list1[i][j].lower() == 'l':\n                list1[i][j] = 'L'\n            elif list1[i][j].lower() =='m':\n                list1[i][j] = 'M'\n            elif list1[i][j].lower() == 'n':\n                list1[i][j] = 'N'\n            elif list1[i][j].lower() == 'o':\n                list1[i][j] = 'O'\n            elif list1[i][j].lower() == 'p':\n                list1[i][j] = 'P'\n            elif list1[i][j].lower() == 'q':\n                list1[i][j] = 'Q'\n            elif list1[i][j].lower() == 'r':\n                list1[i][j] = 'R'\n            elif list1[i][j].lower() =='s':\n                list1[i][j] = 'S'\n            elif list1[i][j].lower() == 't':\n                list1[i][j] = 'T'\n            elif list1[i][j].lower() == 'u':\n                list1[i][j] = 'U'\n            elif list1[i][j].lower() == 'v':\n                list1[i][j] = 'V'\n            elif list1[i][j].lower() == 'w':\n                list1[i][j] = 'W'\n            elif list1[i][j].lower() == 'x':\n                list1[i][j] = 'X'\n            elif list1[i][j].lower() == 'y':\n                list1[i][j] = 'Y'\n            elif list1[i][j].lower() == 'z':\n                list1[i][j] = 'Z'\n    #sort sublists according to their first letter in string\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j].lower() == 'a':\n                list1[i][j] = 'A'\n            elif list1[i][j].lower() == 'b':\n                list1[i][j] = 'B'\n            elif list1[i][j].lower() == 'c':\n                list1[i][j] = 'C'\n            elif list1[i][j].lower() == 'd':\n                list1[i][j] = 'D'\n            elif list1[i][j].lower() == 'e':\n                list1[i][j] = 'E'\n            elif list1[i][j].lower() == 'f':\n                list1[i][j] = 'F'\n            elif list1[i][j].lower() == 'g':\n                list1[i][j] = 'G'\n            elif list1[i][j].lower() == 'h':\n                list1[i][j] = 'H'\n            elif list1[i][j].lower() == 'i':\n                list1[i][j] = 'I'\n            elif list1[i][j].lower() == 'j':\n                list1[i][j] = 'J'\n            elif list1[i][j].lower() == 'k':\n                list1[i][j"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    from collections import Counter\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    import copy\n    nums_copy = copy.deepcopy(nums)\n    \n    nums_list = []\n    for i in range(len(nums)):\n        num = nums[i]\n        if num in nums_copy:\n            nums_copy.remove(num)\n        else:\n            nums_list.append(num)\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Initialize the final list of unique numbers\n    final_list = []\n    \n    # Loop through the nums array\n    for i in range(len(nums)):\n        \n        # Add the current number to the final list if it is not already in the list\n        if i not in final_list:\n            final_list.append(nums[i])\n        \n    # Remove the duplicates from the final list\n    final_list.sort()\n    return final_list\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(set(nums))\n    return nums\n    \nnums = [3,1,1,1,2,2,3]\nprint(two_unique_nums(nums)"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in new_nums:\n            new_nums.append(nums[i])\n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    # Define a function that returns the number of unique numbers in a list.\n    def count_unique_nums(nums):\n        # Create an empty list to store unique numbers.\n        unique_nums = []\n        # Loop through the given list and count the number of unique numbers\n        # in it.\n        for i in range(0, len(nums)):\n            if nums[i] not in unique_nums:\n                unique_nums.append(nums[i])\n        return len(unique_nums)\n    # Return the number of unique numbers in a list.\n    return count_unique_nums(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # declare a empty set\n    set_of_nums = set()\n    # iterate through each list, and check each number in list and add number to the set if not already added\n    for n in nums:\n        # if the number is already in the set, delete it\n        if n in set_of_nums:\n            set_of_nums.remove(n)\n        # else, add it to the set\n        else:\n            set_of_nums.add(n)\n    return set_of_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set_nums = set(nums)\n    if len(set_nums) == len(nums):\n        return list(set_nums)\n    else:\n        return \"We failed to detect the duplicate number\"\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # if there are no duplicates, return None\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return list(nums_set)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    max = max(list_data)\n    min = min(list_data)\n    list_data.sort()\n    return (list_data[-1] * list_data[-2]) / (max - min)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_num = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_num:\n            unique_num.append(list_data[i])\n    return sum(unique_num)"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    return list_data.map(lambda x: x * x).collect()\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for number in list_data:\n        product *= number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # pass\n    new_list = []\n    for i in list_data:\n        for j in range(1,i):\n            if i%j == 0:\n                new_list.append(j)\n    return new_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    a = list()\n    for i in list_data:\n        a.append(i)\n    unique_numbers = list(set(a))\n    return sum(map(lambda x:x*x,unique_numbers))"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    tot_product = 1\n    for i in list_data:\n        tot_product = tot_product * i\n    return tot_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 0\n    for x in list_data:\n        total += x\n    return total\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from collections import Counter\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_product = 1\n    for number in list_data:\n        total_product = total_product * number\n    print(total_product)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print(\"This program calculates the surface area of a cylinder.\")\n    print(\"\\nYou must enter a positive number for the radius of the cylinder.\")\n    print(\"\\nYou must enter a positive number for the height of the cylinder.\")\n    print(\"\\nYou must enter 'q' to quit the program.\")\n    print()\n    a = input(\"Enter a positive number for radius: \")\n    b = input(\"Enter a positive number for height: \")\n    if a == \"q\":\n        return 0\n    elif float(a) > 0 and float(b) > 0:\n        print(\"\\nThe radius of the cylinder is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a cylinder is\",surfacearea(float(a),float(b)))\n    else:\n        print(\"\\nThe radius of the cylinder is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a cylinder is\",surfacearea(float(a),float(b)))\n        return\n        \ndef surfacearea_sphere(r,h):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print(\"This program calculates the surface area of a sphere.\")\n    print(\"\\nYou must enter a positive number for the radius of the sphere.\")\n    print(\"\\nYou must enter a positive number for the height of the sphere.\")\n    print(\"\\nYou must enter 'q' to quit the program.\")\n    print()\n    a = input(\"Enter a positive number for radius: \")\n    b = input(\"Enter a positive number for height: \")\n    if a == \"q\":\n        return 0\n    elif float(a) > 0 and float(b) > 0:\n        print(\"\\nThe radius of the sphere is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a sphere is\",surfacearea(float(a),float(b)))\n    else:\n        print(\"\\nThe radius of the sphere is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a sphere is\",surfacearea(float(a),float(b)))\n        return\n        \ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    print(\"This program calculates the surface area of a torus.\")\n    print(\"\\nYou must enter a positive number for the radius of the torus.\")\n    print(\"\\nYou must enter a positive number for the height of the torus.\")\n    print(\"\\nYou must enter 'q' to quit the program.\")\n    print()\n    a = input(\"Enter a positive number for radius: \")\n    b = input(\"Enter a positive number for height: \")\n    if a == \"q\":\n        return 0\n    elif float(a) > 0 and float(b) > 0:\n        print(\"\\nThe radius of the torus is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a torus is\",surfacearea(float(a),float(b)))\n    else:\n        print(\"\\nThe radius of the torus is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a torus is\",surfacearea(float(a),float(b)))\n        return\n        \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    print(\"This program calculates the surface area of a cone.\")\n    print(\"\\nYou must enter a positive number for the radius of the cone.\")\n    print(\"\\nYou must enter a positive number for the height of the cone.\")\n    print(\"\\nYou must enter 'q' to quit the program.\")\n    print()\n    a = input(\"Enter a positive number for radius: \")\n    b = input(\"Enter a positive number for height: \")\n    if a == \"q\":\n        return 0\n    elif float(a) > 0 and float(b) > 0:\n        print(\"\\nThe radius of the cone is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a cone is\",surfacearea(float(a),float(b)))\n    else:\n        print(\"\\nThe radius of the cone is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a cone is\",surfacearea(float(a),float(b)))\n        return\n        \ndef surfacearea_disc(r,h):\n    '''\n    Write a function to find the surface area of a disc.\n    '''\n    print(\"This program calculates the surface area of a disc.\")\n    print(\"\\nYou must enter a positive number for the radius of the disc.\")\n    print(\"\\nYou must enter a positive number for the height of the disc.\")\n    print(\"\\nYou must enter 'q' to quit the program.\")\n    print()\n    a = input(\"Enter a positive number for radius: \")\n    b = input(\"Enter a positive number for height: \")\n    if a == \"q\":\n        return 0\n    elif float(a) > 0 and float(b) > 0:\n        print(\"\\nThe radius of the disc is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a disc is\",surfacearea(float(a),float(b)))\n    else:\n        print(\"\\nThe radius of the disc is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a disc is\",surfacearea(float(a),float(b)))\n        return\n        \ndef surfacearea_heptagon(r,h):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    print(\"This program calculates the surface area of a hexagon.\")\n    print(\"\\nYou must enter a positive number for the radius of the hexagon.\")\n    print(\"\\nYou must enter a positive number for the height of the hexagon.\")\n    print(\"\\nYou must enter 'q' to quit the program.\")\n    print()\n    a = input(\"Enter a positive number for radius: \")\n    b = input(\"Enter a positive number for height: \")\n    if a == \"q\":\n        return 0\n    elif float(a) > 0 and float(b) > 0:\n        print(\"\\nThe radius of the hexagon is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a hexagon is\",surfacearea(float(a),float(b)))\n    else:\n        print(\"\\nThe radius of the hexagon is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a hexagon is\",surfacearea(float(a),float(b)))\n        return\n        \ndef surfacearea_rhombus(r,h):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    print(\"This program calculates the surface area of a rhombus.\")\n    print(\"\\nYou must enter a positive number for the radius of the rhombus.\")\n    print(\"\\nYou must enter a positive number for the height of the rhombus.\")\n    print(\"\\nYou must enter 'q' to quit the program.\")\n    print()\n    a = input(\"Enter a positive number for radius: \")\n    b = input(\"Enter a positive number for height: \")\n    if a == \"q\":\n        return 0\n    elif float(a) > 0 and float(b) > 0:\n        print(\"\\nThe radius of the rhombus is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a rhombus is\",surfacearea(float(a),float(b)))\n    else:\n        print(\"\\nThe radius of the rhombus is\",a,\"and the height is\",b,\".\")\n        print()\n        print(\"Surface area of a rhombus is\",surfacearea(float(a),float(b)))\n        return\n        \ndef surfacearea_cuboid(r,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    print(\"This program calculates the surface area of a cuboid.\")\n    print(\"\\nYou must enter a positive number for the radius of the cuboid.\")\n    print(\"\\nYou must enter a positive number for th"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #<-------------------------------BEGIN YOUR SOLUTION----------------------------->\n    # Replace this with appropriate formula.\n    return 4 * np.pi * r * (r ** 2) * h\n    # End of your code\n    # <-------------------------------END OF YOUR SOLUTION----------------------------->\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #A function to compute the area of a cylinder\n    #radius = 2\n    #height = 3\n    #h= 3\n    #height = 2\n    #radius = 2\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = r*h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14\n    return pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4 * np.pi * r * h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h/2*math.pi\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (3.1416*h**2)*np.pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=4*(r*np.pi*h)\n    return area\ndef surfacearea_triangle(r,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    area=2*(r*h)\n    return area\ndef surfacearea_rectangle(r,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=4*(r*h)\n    return area\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==1 and len(B)==0:\n        return False\n    if len(A)==0 and len(B)>0:\n        return False\n    if len(B)==0 and len(A)>0:\n        return False\n    if A[0] not in B:\n        return False\n    if A[-1] not in B:\n        return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(A[i]==B[i] for i in range(len(A))) \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return sorted(A) == sorted(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # TO DO\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A=list(A)\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False \n    return True \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if(A[i] == B[j]):\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] == B[j]:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if i < len(B):\n            if A[i]!= B[i]:\n                return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # if the input number is less than 1, print error message\n    if n<1:\n        print(\"No answer\")\n        return\n    # if the input number is greater than the base, print error message\n    if n>=10**(len(str(n))):\n        print(\"No answer\")\n        return\n    # find the last digit factorial\n    i=len(str(n))-1\n    lastDigit=0\n    # calculate the last digit factorial\n    while i>=0:\n        i=i-1\n        lastDigit=lastDigit*(10**i)\n    return lastDigit\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0: \n        print(\"Invalid Input!\") \n    elif n == 1: \n        return 1\n    else: \n        x = n % 10 \n        return last_Digit_Factorial(n//10) * x\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return last_Digit_Factorial(n - 1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError(\"The factorial can only be calculated for non-negative numbers\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n % 10 + last_Digit_Factorial(n // 10)\n    "
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 1): \n        return n \n    else: \n        return n % 10 + last_Digit_Factorial(int(n / 10)) \n        \ndef last_Digit_Modulo(n): \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n <= 1): \n        return n \n    else: \n        return last_Digit_Modulo(int(n / 10)) % 10 \n        \ndef Factorial(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if (n <= 0): \n        return \"Invalid input\" \n    elif (n == 1): \n        return n \n    else: \n        return n * Factorial(int(n / 1)) \n        \ndef Factorial_Power_of_2(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if (n <= 0): \n        return \"Invalid input\" \n    elif (n == 1): \n        return n \n    else: \n        return n * Factorial_Power_of_2(int(n / 2)) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # use a while loop \n    #check if the n is a positive number\n    # if yes, the factorial of n is the sum of the n's digits in the series\n    # elif the n is negative, sum the digits to the left of the n\n    # the final return is the sum of the digits in the series\n    #initialize sum = 0 \n    #the initial value is 1\n    # while sum <= n:\n    #     sum += 1\n    #     return sum\n    #     return sum\n    #function that returns the last digit in factorial of a number n\n    # check if n is positive or negative \n    # if n is positive, then return the digits in the series\n    # if n is negative, then return the digits in the series\n    # use a recursive function\n    # return the first digit of the series\n    #e.g. recurve the factorial of the number 6 -> 6+3\n    #recursion takes a parameter n, which is the last digit in factorial of a number\n    #return the last digit in factorial of a number\n    \n    n=int(input(\"enter the number:\"))\n    if n<=0:\n        return 0\n    if n==0:\n        return 1\n    return n%10\n    # this function returns the last digit in factorial of a number n\n    # function that returns the last digit in factorial of a number n\n    # parameter n is an integer greater than 0, if n is positive, then return the digits in the series\n    # parameter n is an integer greater than 0, if n is negative, return the digits in the series\n    # return the first digit of the series\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    return n % 10 + last_Digit_Factorial(n//10) \n    \ndef last_Digit_Power(n): \n    '''\n    Write a python function to find the last digit in power of a given number.\n    '''\n    if n == 0: \n        return 0\n    return n%10*10 + last_Digit_Power(n//10) \n    \ndef digit_cnt(n): \n    '''\n    Write a python function to find the number of digits in a given number.\n    '''\n    if n == 0: \n        return 0\n    return n%10 + digit_cnt(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1): \n        factorial *= i \n    return factorial % 10 \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 1:\n        factorial *= n\n        n -= 1\n    return factorial\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved = []\n    if len(list1)!= len(list2):\n        raise ValueError(\"All lists must have the same length\")\n    if len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2):\n        return \"The lists must be of the same length\"\n    if len(list3)!= len(list2):\n        return \"The lists must be of the same length\"\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Edge cases\n    if len(list1)==0:\n        return []\n    if len(list2)==0:\n        return list1\n    if len(list3)==0:\n        return list2\n    \n    # Dictionaries to keep track of the current position\n    # Each element of the dictionary is a key, and the value\n    # is the number of times the key has been seen.\n    counts = {}\n    # Dictionaries to keep track of the keys\n    # Each dictionary element is a key, and the value\n    # is the number of times the key has been seen.\n    counts_keys = {}\n    # Interleaved lists\n    list3_reordered = []\n    \n    # Iterate through each element of each list, and add the number of times the key has been seen to the dictionary\n    # if the element is the same as the value of the current dictionary entry.\n    for l in list3:\n        if l in counts:\n            counts[l] += 1\n        else:\n            counts[l] = 1\n            counts_keys[l] = counts.keys().count(l)\n    \n    # Sort the dictionary by key value.\n    # The value is the number of times the key has been seen.\n    # The key is the key that the current dictionary element is looking for.\n    # If the key is the only value from the dictionary, the corresponding entry in the list3 is appended.\n    # Otherwise, the dictionary element is appended, followed by the key, value pairs.\n    counts_keys = sorted(counts_keys.items(), key=lambda x: x[1])\n    \n    # Loop through the dictionary keys, and append the keys that have a count of greater than 1\n    # as the same key to the end of the list3_reordered list\n    # Also, if the keys in the dictionary are the same as the keys in the list3, \n    # then that key is the current dictionary entry, so that it's a new key for the next iteration of the loop.\n    for k in counts_keys:\n        list3_reordered.append(k)\n        if counts_keys[0][1] == counts[k]:\n            if k in counts_keys:\n                list3_reordered.append(k)\n        else:\n            # If the keys are the same, it's the second entry in the dictionary.\n            # Else, it's the first entry in the dictionary.\n            # We don't need to add the other keys, as they are already appended.\n            if k in counts_keys:\n                list3_reordered.append(k)\n    \n    # Finally, sort the list3_reordered list by the first key.\n    list3_reordered.sort()\n    \n    # Return the sorted list3_reordered\n    return list3_reordered\n    \n    \n    \n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return(list1+list2+list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # looping through each element in list1\n    for i in range(len(list1)):\n        # adding each element from list1 to list3\n        list3.append(list1[i])\n        # adding each element from list2 to list3\n        list3.append(list2[i])\n        # adding each element from list3 to list1\n        list3.append(list3[i])\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    if len(list1)!= len(list2):\n        list1,list2,list3 = interleave_lists(list1,list2,list3)\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return sum(list1 + list2 + list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    while list1 and list2 and list3:\n        if len(list1) == len(list2) == len(list3):\n            interleaved_list.append(list1.pop(0))\n            interleaved_list.append(list2.pop(0))\n            interleaved_list.append(list3.pop(0))\n            break\n        elif list1:\n            interleaved_list.append(list1.pop(0))\n        if list2:\n            interleaved_list.append(list2.pop(0))\n        if list3:\n            interleaved_list.append(list3.pop(0))\n    return interleaved_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    dissimilar_tuples = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            dissimilar_tuples.append(test_tup1[i])\n    \n    return dissimilar_tuples\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    i = 0\n    while i < len(test_tup1):\n        if test_tup2[i]!= test_tup1[i]:\n            i += 1\n        else:\n            i += 1\n            return test_tup2\n    else:\n        return test_tup2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i!= j:\n                dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    i = 0\n    while i < len(test_tup1):\n        j = 0\n        while j < len(test_tup2):\n            if test_tup1[i]!= test_tup2[j]:\n                if test_tup1[i] < test_tup2[j]:\n                    j += 1\n                else:\n                    i += 1\n            else:\n                j += 1\n        dissimilar.append(test_tup1[i])\n        dissimilar.append(test_tup2[j])\n        i += 1\n        j += 1\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_length = len(test_tup1)\n    test_tup2_length = len(test_tup2)\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    sorted_list = sorted(list(test_tup1_set.intersection(test_tup2_set)))\n    return sorted_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if not test_tup1 or not test_tup2:\n        raise ValueError(\"Arguments must be of type tuple.\")\n    if test_tup1[0]!= test_tup2[0]:\n        raise ValueError(\"Arguments must be of the same type.\")\n    elif test_tup1[1]!= test_tup2[1]:\n        raise ValueError(\"Arguments must be of the same type.\")\n    dissimilar = []\n    for test_tup in test_tup1:\n        if test_tup not in dissimilar:\n            dissimilar.append(test_tup)\n    return dissimilar\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    match_list = []\n    match_list.append(test_tup1[0])\n    match_list.append(test_tup2[0])\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            match_list.append(test_tup1[i])\n            match_list.append(test_tup2[i])\n    return match_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(even_fnc(test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(*test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_ele_lst = []\n    even_ele_lst = []\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    list_of_tuple = test_tuple\n    \n    for element in list_of_tuple:\n        if isinstance(element, tuple) and not isinstance(element, list):\n            #element = [element]\n            list_of_tuple = list_of_tuple[:list_of_tuple.index(element)] + list_of_tuple[list_of_tuple.index(element)+1:]\n        else:\n            continue\n        \n    if list_of_tuple:\n        even_fnc(list_of_tuple)\n        \n    else:\n        even_fnc(list_of_tuple)\n        \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    i,j = test_tuple[0], test_tuple[1]\n    if even_fnc(i,j): \n        return tuple([tuple(i)])\n    else: \n        return tuple([tuple([tuple(i)[:i.index(j)]])])\n        \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    i,j = test_tuple[0], test_tuple[1]\n    if odd_fnc(i,j): \n        return tuple([tuple(i)])\n    else: \n        return tuple([tuple(i)[:i.index(j)+1]])\n        "
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = (0,)*test_tuple[0]\n    even_fnc(even_tuple, test_tuple[1])\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove even elements in the nested mixed tuple.\n    '''\n    odd_tuple = (0,)*test_tuple[0]\n    odd_fnc(odd_tuple, test_tuple[1])\n    \ndef even_odd(test_tuple, odd_odd_fnc):\n    '''\n    Write a function to remove even elements in the nested mixed tuple.\n    '''\n    odd_odd_fnc(test_tuple, odd_tuple, even_ele)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_tuple.append(i)\n    even_tuple = tuple(even_tuple)\n    even_fnc(even_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, lambda t: t[0] % 2)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elements in test_tuple:\n        if even_fnc(elements) == True:\n            even_list.append(elements)\n    return tuple(even_list)\n    \n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #variable declaration\n    r,c = len(s), len(s[0])\n    #initializing the variables\n    a = 0\n    #loop for the iteration\n    for i in range(1,r):\n        for j in range(1,c):\n            #if the sum of the values of the current and left sides is equal to the base edge, then we have the base edge\n            if s[i][j] == b:\n                #check if the sum of the values of the current and left sides is equal to the height\n                if s[i-1][j] == s[i][j-1] or s[i-1][j] == s[i-1][j+1]:\n                    #if the sum of the values of the current and left sides is equal to the height, then we have the height\n                    if s[i][j] == s[i-1][j] + s[i-1][j+1] and j>0:\n                        #if the sum of the values of the current and left sides is equal to the height, then we have the height\n                        if j==c-1 and s[i][j+1] == s[i-1][j]:\n                            a += s[i][j]\n                        elif j==0 and s[i][j+1] == s[i-1][j]:\n                            a += s[i][j]\n                #if the sum of the values of the current and left sides is equal to the height, then we have the height\n                elif s[i][j] == s[i-1][j] + s[i-1][j+1] or s[i-1][j] == s[i-1][j+1]:\n                    #if the sum of the values of the current and left sides is equal to the height, then we have the height\n                    if s[i][j] == s[i-1][j] + s[i-1][j+1] and j>0:\n                        #if the sum of the values of the current and left sides is equal to the height, then we have the height\n                        if j==c-1 and s[i][j-1] == s[i-1][j]:\n                            a += s[i][j]\n                        elif j==0 and s[i][j-1] == s[i-1][j]:\n                            a += s[i][j]\n                #if the sum of the values of the current and left sides is equal to the height, then we have the height\n                elif s[i][j] == s[i-1][j] + s[i-1][j+1] or s[i-1][j] == s[i-1][j+1]:\n                    #if the sum of the values of the current and left sides is equal to the height, then we have the height\n                    if s[i][j] == s[i-1][j] + s[i-1][j+1] and j>0:\n                        #if the sum of the values of the current and left sides is equal to the height, then we have the height\n                        if j==c-1 and s[i][j-1] == s[i-1][j]:\n                            a += s[i][j]\n                        elif j==0 and s[i][j-1] == s[i-1][j]:\n                            a += s[i][j]\n    #if the sum of the values of the current and left sides is equal to the base edge, then we have the base edge\n    if a == 0:\n        return 0\n    else:\n        return a\n    \nprint(surface_Area([[0, 1, 0], [0, 1, 0], [1, 1, 0]], [[0, 0, 0]]))"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code here\n    if (s == 1):\n        return (b*b)\n    else:\n        return (b*(s+1)*(s+1))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4*b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # A square pyramid has a height of 1.\n    # The base edge has a length of 1.\n    # The pyramid has n*a = s \n    return s*s*(b*b)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Your code here\n    return ((4 * (b**2)) - (s**2))\n    \ndef main():\n    '''\n    Ask for the name of a character and a base edge and height and return the calculated area of the square pyramid.\n    '''\n    name = input('Enter a name: ')\n    base = int(input('Enter the base edge: '))\n    height = int(input('Enter the height: '))\n    area = surface_Area(base, height)\n    print('The area of the pyramid is', area)\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b < 0:\n        return -1\n    elif b == 0:\n        return 0\n    else:\n        a = 2 * (s * (s - 1)) / 3\n        return a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Your code goes here.\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = 0\n    for i in range(1, s):\n        A += b * i\n    return A\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key, value in dict1.items():\n        print(key, value)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None:\n        return True\n    else:\n        return False\n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if set1 is None:\n        return True\n    else:\n        return False\n    \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if list1 is None:\n        return True\n    else:\n        return False\n    \ndef my_stack(stack1):\n    '''\n    Write a function to check if a stack is empty\n    '''\n    if stack1 is None:\n        return True\n    else:\n        return False\n    \ndef my_queue(queue1):\n    '''\n    Write a function to check if a queue is empty\n    '''\n    if queue1 is None:\n        return True\n    else:\n        return False\n    \ndef my_map(my_dict, my_set, my_list, my_stack, my_queue, my_stack_length):\n    '''\n    Write a function that performs a map operation on a dictionary, a set, and a list\n    '''\n    if my_dict is None and my_set is None and my_list is None and my_stack is None and my_queue is None and my_stack_length is None:\n        return True\n    else:\n        return False\n    \ndef my_range(start, end, step):\n    '''\n    Write a function to do a range operation\n    '''\n    if start is None and end is None and step is None:\n        return range(1, end+1)\n    else:\n        return range(start, end+1, step)\n    \ndef my_repeat(string, num):\n    '''\n    Write a function to do a repeat operation\n    '''\n    if string is None and num is None:\n        return None\n    else:\n        return string * num\n    \ndef my_string_remove(string, char):\n    '''\n    Write a function to remove a char from a string\n    '''\n    if char is None:\n        return string\n    else:\n        return string.replace(char, '')\n    \ndef my_string_upper(string):\n    '''\n    Write a function to make all the letters uppercase\n    '''\n    if string is None:\n        return None\n    else:\n        return string.upper()\n    \ndef my_string_remove_duplicates(string):\n    '''\n    Write a function to remove duplicate letters from a string\n    '''\n    if string is None:\n        return None\n    else:\n        if my_list(string) == False:\n            return string\n        else:\n            return my_string_remove(string, string[0]) + my_string_remove(string, string[len(string)-1])\n        \ndef my_string_replace(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n    \ndef my_string_replace_with_list(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return my_string_replace(string, old, new)\n    \ndef my_string_replace_with_set(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n    \ndef my_string_replace_with_stack(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n    \ndef my_string_replace_with_queue(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n    \ndef my_string_replace_with_stack_length(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n        \ndef my_string_remove_redundant(string, char):\n    '''\n    Write a function to remove a char from a string\n    '''\n    if char is None:\n        return string\n    else:\n        return string.replace(char, '')\n    \ndef my_string_remove_redundant_with_list(string, char):\n    '''\n    Write a function to remove a char from a string\n    '''\n    if char is None:\n        return string\n    else:\n        if my_list(string) == False:\n            return string\n        else:\n            return my_string_remove_redundant(string, char)\n    \ndef my_string_remove_redundant_with_set(string, char):\n    '''\n    Write a function to remove a char from a string\n    '''\n    if char is None:\n        return string\n    else:\n        return string.replace(char, '')\n    \ndef my_string_remove_redundant_with_stack(string, char):\n    '''\n    Write a function to remove a char from a string\n    '''\n    if char is None:\n        return string\n    else:\n        return string.replace(char, '')\n    \ndef my_string_remove_redundant_with_queue(string, char):\n    '''\n    Write a function to remove a char from a string\n    '''\n    if char is None:\n        return string\n    else:\n        return string.replace(char, '')\n    \ndef my_string_remove_redundant_with_stack_length(string, char):\n    '''\n    Write a function to remove a char from a string\n    '''\n    if char is None:\n        return string\n    else:\n        return string.replace(char, '')\n    \ndef my_string_replace_remove_duplicates(string, old, new):\n    '''\n    Write a function to remove duplicate letters from a string\n    '''\n    if string is None:\n        return None\n    else:\n        if my_list(string) == False:\n            return string\n        else:\n            return my_string_replace(string, old, new)\n    \ndef my_string_replace_replace_duplicates(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        if my_list(string) == False:\n            return string\n        else:\n            return my_string_replace(string, old, new)\n    \ndef my_string_replace_replace_with_list(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n    \ndef my_string_replace_replace_with_set(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n    \ndef my_string_replace_replace_with_stack(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n    \ndef my_string_replace_replace_with_queue(string, old, new):\n    '''\n    Write a function to replace a character with a new one\n    '''\n    if string is None:\n        return None\n    else:\n        return string.replace(old, new)\n    \ndef my_string_replace_replace_with_stack_length(string, old, new):\n    '''\n    Write a function to replace "
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) > 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    # define the base case\n    if num == 1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    sum = 0\n    for i in range(1, num+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_num = 1\n    for i in range(1, num+1):\n        catalan_num *= i\n    return catalan_num\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError(\"Number of the catalan number has to be greater than zero\")\n    if num < 1:\n        raise ValueError(\"Number of the catalan number has to be greater than one\")\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def c_catalan(n):\n        '''\n        Write a function which returns nth catalan number.\n        '''\n        def f(x):\n            return pow(x, (x - 1) / 2) * pow(x, (x - 1) / 2)\n        # if n == 1:\n        #     return f(x)\n        # if n == 2:\n        #     return f(x, 3)\n        # if n == 3:\n        #     return f(x, 2)\n        # if n == 4:\n        #     return f(x, 1)\n        # if n == 5:\n        #     return f(x, 0)\n        # if n == 6:\n        #     return f(x, 5)\n        # if n == 7:\n        #     return f(x, 4)\n        # if n == 8:\n        #     return f(x, 3)\n        # if n == 9:\n        #     return f(x, 2)\n        # if n == 10:\n        #     return f(x, 1)\n        # if n == 11:\n        #     return f(x, 0)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # To do: Fix code\n    def add_digits(number):\n        \"\"\"\n        :type number: int\n        :rtype: int\n        \"\"\"\n        if type(number)!= int:\n            raise TypeError\n        if number == 0 or number == 1:\n            return number\n        else:\n            return add_digits(number//10) + add_digits(number//100 % 10) + add_digits(number//1000 % 10)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 0\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 1\n    elif num == 4:\n        return 2\n    elif num == 5:\n        return 2\n    elif num == 6:\n        return 3\n    elif num == 7:\n        return 5\n    elif num == 8:\n        return 8\n    elif num == 9:\n        return 9\n    elif num == 10:\n        return 2\n    elif num == 11:\n        return 4\n    elif num == 12:\n        return 12\n    elif num == 13:\n        return 8\n    elif num == 14:\n        return 14\n    elif num == 15:\n        return 10\n    else:\n        return 0"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return 1\n    \n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    \n    \n    find_adverb = re.findall('ly\\w', text, flags = re.IGNORECASE)\n    \n    return find_adverb\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    adverbs = ['a', 'an', 'the', 'theo','so','sovereign', 'terrible', 'trouble', 'impossible', 'impossiblely', 'unforgiving', 'unfortunately', 'unhelpful', 'unpermitted', 'unrelated', 'unlikely', 'unto', 'untoasted', 'uncover', 'unsure', 'unwanted', 'unwonderful', 'unwishing', 'unwishingly', 'unwise']\n    for i in adverbs:\n        if re.findall(i, text)!= []:\n            text = text.replace(i,'')\n    return text\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'\\b((ly|ly^2)y(ly^2)|lyy)$')\n    match = regex.search(text)\n    # print(match.group())\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Initialize variables\n    ly = ''\n    position = 0\n    ly_after_adverb = ''\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['am', 'are', 'was', 'were', 'be']\n    for i in range(len(adverbs)):\n        if text.endswith(adverbs[i]):\n            index = text.find(adverbs[i])\n            if (index == -1):\n                index = len(text)\n            return index\n    return -1\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos_list = []\n    for i in range(len(text) - 1):\n        if text[i:i+2].endswith('ly'):\n            pos_list.append(i)\n    return pos_list\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Create a regex for finding the first adverb ending with ly.\n    #r = re.compile(r'(.*)ly')\n    # Find the first adverb ending with ly.\n    r = re.compile(r'ly')\n    # Find the adverb ending with ly and the position of it.\n    ly = r.findall(text)[0]\n    # Create a regex for finding the start of the adverb ending with ly.\n    r = re.compile(r'ly')\n    # Find the position of the adverb ending with ly.\n    start_ly = r.search(text).span()[0]\n    # Create a regex for finding the end of the adverb ending with ly.\n    r = re.compile(r'ly')\n    # Find the adverb ending with ly and the position of it.\n    ly_end = r.findall(text)[0]\n    # Return the found adverb ending with ly and its position.\n    return [ly, start_ly, ly_end]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"[a-zA-Z]\"\n    adverbs = []\n    for word in re.findall(pattern, text):\n        if word[-1] == \"ly\":\n            adverbs.append(word)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.search('(ly|ly)', text)\n    return result.group()\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    i = 0\n    i1 = 0\n    while i < len(text):\n        if text[i] == \"*\" or text[i] == \"ly\":\n            if i1 < i and text[i1] == \"ly\":\n                i1 += 1\n                i += 1\n            else:\n                i1 = i\n                i = i + 1\n        elif text[i] == \"ly\" or text[i] == \"lyl\":\n            if text[i-1] == \"ly\" or text[i-1] == \"ly\" or i > 0 and text[i-1] == \"ly\":\n                i = i-1\n                i1 = i\n            else:\n                i = i - 1\n                i1 = i\n        else:\n            i += 1\n    return i1\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result_list = []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n    # code goes here\n    # loop through the heap and add the number to result_list\n    while heap:\n        result_list.append(heapq.heappop(heap))\n    # now print the result_list\n    for i in range(len(result_list)):\n        print(\"%d is %d dollars and costs %d cents\" % (i+1, result_list[i], result_list[i]*100))\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n        \n    result = heap[:n]\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    item_count = {}\n    for i in items:\n        if i[0] not in item_count:\n            item_count[i[0]] = 0\n        item_count[i[0]] += i[1]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[1])\n    res = []\n    for i in range(n):\n        res.append(heapq.heappop(heap))\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,reverse=True)\n    if n==0:\n        return items\n    elif n==1:\n        return items[0]\n    elif n>1:\n        idx = 0\n        for i in range(len(items)):\n            if items[i][1]<items[idx][1]:\n                idx = i\n        return items[idx]\n    else:\n        return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n    l = []\n    for i in range(n):\n        heapq.heappush(l,heapq.heappop(heap)+heapq.heappop(heap))\n    return [i[1] for i in l]\ndef find_p(items,n):\n    '''\n    Write a function that finds the p(i) in the given dataset, n.\n    '''\n    p = 0\n    for i in range(n):\n        if items[i][0] > items[i][1]:\n            p += 1\n    return p\ndef calculate_f1(targets, outputs):\n    '''\n    Calculate the F1 score.\n    '''\n    tp = 0\n    fp = 0\n    fn = 0\n    for i in range(len(targets)):\n        if targets[i] == 1 and outputs[i] == 1:\n            tp += 1\n        elif targets[i] == 0 and outputs[i] == 1:\n            fp += 1\n        elif targets[i] == 1 and outputs[i] == 0:\n            fn += 1\n        else:\n            print('This should never be called.')\n    precision = tp / (tp+fp)\n    recall = tp / (tp+fn)\n    f1 = 2*precision*recall / (precision + recall)\n    return f1\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,(-i[1],i[0]))\n    res = []\n    while len(heap)>n:\n        item = heapq.heappop(heap)\n        res.append(item)\n        heapq.heappush(heap,(-item[1],item[0]))\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # build a list of the n most expensive items\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        if heap:\n            if heap[0][1] < item[1]:\n                heapq.heapreplace(heap,(item,item[1]))\n        else:\n            heapq.heappush(heap,[item[1],item])\n    print heap\n    heapq.heapify(heap)\n    # return the n most expensive items\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = heapq.nlargest(n,items)\n    print('The n most expensive items are:')\n    for i in items:\n        print(i)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    s = []\n    for i in range(n):\n        heapq.heappush(s,(items[i][1],i))\n    for i in range(n):\n        if len(s)==0:\n            return None\n        heapq.heappop(s)\n    print(s)\n    return s[0][0]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    tmp = []\n    for i in range(0,len(l),n):\n        tmp.append(l[i:i+n])\n    return tmp\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = []\n    i = 0\n    while i < len(l):\n        s.append(l[i:i+n])\n        i += n\n    return s\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_split = []\n    l_split.append(l)\n    return l_split[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i + n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i + n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n],l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    result = tuple(listx)\n    return result\n    "
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for x in listx:\n        tup = tup + (x,)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx) > 0:\n        if len(listx) == 1:\n            tup = listx\n        else:\n            tup = listx[0]\n            for item in listx[1:]:\n                tup += item\n    return tup\n    \ndef list_concat(listx):\n    '''\n    Write a function to concatenate two lists.\n    '''\n    return list_tuple(listx) + list_tuple(listx)\n    \ndef get_month(year, month):\n    '''\n    Write a function that gets the month of a given year.\n    '''\n    return month + 1\n    \ndef get_day(year, month):\n    '''\n    Write a function that gets the day of a given year.\n    '''\n    return get_month(year, get_month(year, get_month(year, month - 1)))\n    \ndef get_year(month, day):\n    '''\n    Write a function that gets the year of a given month and day.\n    '''\n    return get_month(get_year(month - 1, day), get_month(month, get_day(month, day)))\n    \ndef main():\n    '''\n    main() gets the data from the user.\n    '''\n    print('this program is meant to find the best month for a given year and a given day')\n    print('please enter the month and day')\n    month = int(input('Month? '))\n    day = int(input('Day? '))\n    year = int(input('Year? '))\n    month = get_month(year, month)\n    day = get_day(year, month)\n    print('The best month for the given year and day is', month, 'and day', day)\n    \nmain()"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for i in listx:\n        t += (i,)\n    return t\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    i = 0\n    j = len(nums)-1\n    while(i<j):\n        if nums[i]==nums[j]:\n            i = i+1\n            j = j-1\n        else:\n            if nums[i]<nums[j]:\n                i = i+1\n            else:\n                j = j-1\n    return nums[i]\n    "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest=max(nums)\n    smallest=min(nums)\n    if largest-smallest==0:\n        return 0\n    else:\n        return largest-smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    for value in nums:\n        if value!= smallest:\n            smallest = value\n    return smallest - largest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_nums = max(nums)\n    min_nums = min(nums)\n    dif = max_nums - min_nums\n    if dif > 0:\n        return dif\n    else:\n        return 0\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    start = 0\n    end = len(nums) - 1\n    max_diff = -10000\n    min_diff = 10000\n    \n    while start < end:\n        if nums[start] < nums[end]:\n            max_diff = max(nums[start], max_diff)\n            start += 1\n        else:\n            min_diff = min(nums[start], min_diff)\n            end -= 1\n        \n    return max_diff - min_diff\n    "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    def larger(l):\n        for i in l:\n            if i > l[0]:\n                l.remove(i)\n        return l\n    def smaller(l):\n        for i in l:\n            if i < l[0]:\n                l.remove(i)\n        return l\n    l = []\n    for i in nums:\n        l.append(i)\n    if len(l) == 1:\n        return l\n    if len(l) == 2:\n        if larger(l):\n            if smaller(l):\n                return larger(l)\n            else:\n                return smaller(l)\n        else:\n            if smaller(l):\n                return smaller(l)\n            else:\n                return larger(l)\n    if len(l) == 3:\n        if larger(l):\n            if smaller(l):\n                return larger(l)\n            else:\n                return smaller(l)\n        else:\n            if smaller(l):\n                return smaller(l)\n            else:\n                return larger(l)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # max_val = max(nums)\n    # min_val = min(nums)\n    # return max_val - min_val\n    return max(list(set(nums))) - min(list(set(nums)))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n    return s - max(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = min(nums)\n    max_num = max(nums)\n    smallest = nums[0]\n    largest = nums[len(nums)-1]\n    for i in range(1,len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n        if nums[i] > largest:\n            largest = nums[i]\n    return min_num - smallest - largest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = []\n    for i in nums:\n        a.append(i)\n    b = sorted(a, reverse=True)\n    return b[0]-b[1]\n    \nn = int(input(\"enter the no of elements\"))\nnums = []\nfor i in range(n):\n    nums.append(int(input(\"enter the number\")))\nprint(\"sorted list is\", nums)\nprint(\"big difference between the largest and smallest value is\", big_diff(nums))\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while a >= b:\n        m = a + (b - a) // 2\n        if m == 0:\n            return True\n        if m == b:\n            return False\n        if m % 2 == 0:\n            a = m // 2\n        else:\n            b = m // 2 + 1\n    return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square = [x*x for x in a]\n    square.append(b)\n    square.append(b)\n    s = set(square)\n    return [x for x in square if x % 2 == 0]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    elif a == 0:\n        return [a, 1]\n    elif a == 1:\n        return [0, 1]\n    else:\n        for i in range(2, int(sqrt(a) + 1)):\n            if a % i == 0:\n                if a % i == 0:\n                    return [a, i]\n                else:\n                    return [a, i, 1]\n            else:\n                pass\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n    square_sum = math.sqrt(a*a + b*b)\n    if square_sum == a*a + b*b:\n        return False\n    else:\n        return True\n    \n    #Write your code here\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a == b):\n        return a\n    else:\n        if (a % 2 == 0):\n            return perfect_squares(a // 2, b)\n        else:\n            return perfect_squares(a + 1, b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return a\n    elif a > b:\n        a, b = b, a\n    while b > 0:\n        if (a % b) == 0:\n            return a // b\n        else:\n            b -= 1\n    return b\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return 0\n    if a % b == 0:\n        return a\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def sum_of_squares(n):\n        s = 0\n        for i in range(1, n+1):\n            s += i**2\n        return s\n    def sum_of_squares_dp(n):\n        s = 0\n        for i in range(1, n+1):\n            s += pow(i, 2)\n        return s\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n    def is_perfect_square(a):\n        return gcd(a, a) == 1\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    if sum == a*b:\n        return True\n    return False\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return((x*math.sin(cmath.pi/4)),(y*math.cos(cmath.pi/4)))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = abs(cmath.acos(cmath.exp(complex(0,1)*x*cmath.pi/2.0)))\n    theta = cmath.phase(complex(0,1)*x*cmath.pi/2.0)\n    #Use polar convention\n    if y > 0:\n        theta = theta + cmath.pi\n    theta = theta - cmath.pi/2.0\n    print(str(phi)+\",\"+str(theta))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi, theta = cmath.polar(x)\n    r = (cmath.sqrt(2)*(theta/cmath.pi))**(1/2)\n    return r*math.cos(phi), r*math.sin(phi)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = 0\n    r = 0\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    while z < y:\n        r = r + x\n        z = z + y\n    return r, z\ndef sine(z):\n    '''\n    Write a function to compute the sine of a number.\n    '''\n    r = 0\n    while z > 0:\n        r = r + 1\n        z = z - 1\n    return r\ndef cosine(z):\n    '''\n    Write a function to compute the cosine of a number.\n    '''\n    r = 0\n    while z > 0:\n        r = r + 1\n        z = z - 1\n    return r\ndef tangent(r):\n    '''\n    Write a function to compute the tangent of a number.\n    '''\n    phi = 0\n    while r > 0:\n        r = r - 1\n        phi = phi + cmath.phase(r)\n    return phi\ndef phi(r):\n    '''\n    Write a function to compute the polar angle of a number.\n    '''\n    if r == 0:\n        phi = 0\n    elif r > 0:\n        phi = atan(y/r)\n    return phi\ndef y(x):\n    '''\n    Write a function to compute the y-coordinate of a number.\n    '''\n    z = 0\n    while x > 0:\n        x = x - 1\n        z = z + y\n    return z\ndef phi_z_2(phi):\n    '''\n    Write a function to compute the polar angle of a number.\n    '''\n    if phi >= 0:\n        phi = atan(y/phi)\n    return phi\ndef arc(r,phi):\n    '''\n    Write a function to compute the arc of a circle.\n    '''\n    phi_z = phi_z_2(phi)\n    phi_x = atan(r/sin(phi_z))\n    phi_x = phi_x + phi\n    return phi_x\ndef pythag(x,y):\n    '''\n    Write a function to compute the pythagorean theorem.\n    '''\n    z = 0\n    if x > 0:\n        x = -x\n    if y > 0:\n        y = -y\n    while z < y:\n        z = z + x\n    return z\ndef cal(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    z = 0\n    if x1 > 0:\n        x1 = -x1\n    if y1 > 0:\n        y1 = -y1\n    if x2 > 0:\n        x2 = -x2\n    if y2 > 0:\n        y2 = -y2\n    while z < y1:\n        z = z + x1\n    while z < y2:\n        z = z + x2\n    return z\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    z = 0\n    if x1 > 0:\n        x1 = -x1\n    if y1 > 0:\n        y1 = -y1\n    if x2 > 0:\n        x2 = -x2\n    if y2 > 0:\n        y2 = -y2\n    while z < y1:\n        z = z + x1\n    while z < y2:\n        z = z + x2\n    return z\ndef real(r):\n    '''\n    Write a function to compute the real part of a number.\n    '''\n    z = 0\n    while r > 0:\n        r = r - 1\n        z = z + y\n    return z\ndef imag(r):\n    '''\n    Write a function to compute the imaginary part of a number.\n    '''\n    z = 0\n    while r > 0:\n        r = r - 1\n        z = z + x\n    return z\ndef distance_2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    z = 0\n    if x1 > 0:\n        x1 = -x1\n    if y1 > 0:\n        y1 = -y1\n    if x2 > 0:\n        x2 = -x2\n    if y2 > 0:\n        y2 = -y2\n    while z < y1:\n        z = z + x1\n    while z < y2:\n        z = z + x2\n    return z\ndef distance_3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    z = 0\n    if x1 > 0:\n        x1 = -x1\n    if y1 > 0:\n        y1 = -y1\n    if x2 > 0:\n        x2 = -x2\n    if y2 > 0:\n        y2 = -y2\n    if x3 > 0:\n        x3 = -x3\n    if y3 > 0:\n        y3 = -y3\n    while z < y1:\n        z = z + x1\n    while z < y2:\n        z = z + x2\n    while z < y3:\n        z = z + x3\n    return z\ndef d(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    z = 0\n    if x1 > 0:\n        x1 = -x1\n    if y1 > 0:\n        y1 = -y1\n    if x2 > 0:\n        x2 = -x2\n    if y2 > 0:\n        y2 = -y2\n    if x3 > 0:\n        x3 = -x3\n    if y3 > 0:\n        y3 = -y3\n    if x3 > 0:\n        x3 = -x3\n    if y3 > 0:\n        y3 = -y3\n    for x in range(x1,x2):\n        for y in range(y1,y2):\n            z = z + y\n    for x in range(x2,x3):\n        for y in range(y2,y3):\n            z = z + x\n    return z\ndef normal(r):\n    '''\n    Write a function to compute the normal angle of a number.\n    '''\n    phi = atan(y/r)\n    return phi\ndef magnitude(r):\n    '''\n    Write a function to compute the magnitude of a number.\n    '''\n    phi = atan(y/r)\n    return r*r*cmath.sqrt(sin(phi)*sin(phi)+cmath.cos(phi)*cos(phi))\ndef angle(r):\n    '''\n    Write a function to compute the angle of a number.\n    '''\n    phi = atan(y/r)\n    return phi\ndef inclination(r):\n    '''\n    Write a function to compute the inclination of a number.\n    '''\n    phi = atan(y/r)\n    return phi\ndef area(r):\n    '''\n    Write a function to compute the area of a number.\n    '''\n    phi = atan(y/r)\n    return r*r*cmath.sqrt(sin(phi)*sin(phi)+cmath.cos(phi)*cos(phi))\ndef area_2(r):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    phi = atan(y/r)\n    return r*r*cmath.sqrt(sin(phi)*sin(phi)+cmath.cos(phi)*cos(phi))\ndef area_3(r):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    phi = atan(y/r)\n    return r*r*cmath.sqrt(sin(phi)*sin(phi)+cmath.cos(phi)*cos(phi))\ndef area_4(r):\n    '''\n    Write a function to compute th"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar(x)\n    phi = cmath.polar(y)\n    R = cmath.rect(x,y)\n    return R,theta,phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    def tan(x,y):\n        return cmath.tan(x)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # type check\n    if not isinstance(x,float) or not isinstance(y,float):\n        raise TypeError(\"Polar coordinates must be of type float\")\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(1 - y**2)\n    y = y * 2 * r\n    return x * r, y * r\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if y < 0: y = -y\n    if x < 0: x = -x\n    if x > 1: x = -x\n    if y > 1: y = -y\n    return (x*np.pi)/180.,(y*np.pi)/180.\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    def arc_cos(a,phi):\n        '''\n        Calculate the cosine of a quadrant.\n        '''\n        x=x*(cmath.pi/180)\n        y=y*(cmath.pi/180)\n        d=abs(a)\n        if d<1:\n            return 0.0\n        x1=cmath.cos(phi)*(1-d)\n        x2=x1*(1-d)\n        y1=cmath.sin(phi)*(1-d)\n        y2=y1*(1-d)\n        return (x1+x2)*(y1+y2)\n    \n    def arc_sin(a,phi):\n        '''\n        Calculate the sine of a quadrant.\n        '''\n        x=x*(cmath.pi/180)\n        y=y*(cmath.pi/180)\n        d=abs(a)\n        if d<1:\n            return 0.0\n        x1=cmath.cos(phi)*(1-d)\n        y1=cmath.sin(phi)*(1-d)\n        return (1-x1-x2)*(1-y1-y2)\n    \n    if type(x)==float or type(y)==float:\n        return arc_cos(x,y),arc_sin(x,y)\n    else:\n        return arc_cos(x[0],x[1]),arc_sin(x[0],x[1])\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code here\n    \n    # Initialize empty list\n    temp_list = []\n    \n    # Assign newList to temp_list\n    temp_list = newList\n    \n    # Iterate through each element in newList\n    for index in range(len(newList)):\n        # Iterate through each element in the newList and swap them with the first element of newList\n        temp_list[index], newList[index] = newList[index], temp_list[index]\n    \n    # Return the modified list\n    return newList\n    \n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # convert the input to a list\n    s = newList\n    # reverse the list\n    s.reverse()\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if newList.count(newList[0])!= 0:\n        \n        for x in range(len(newList)):\n            temp = newList[x]\n            newList[x] = newList[x]\n            newList[x-1] = temp\n        \n        return newList\n    else: \n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    numbers = []\n    for i in range(len(newList)):\n        numbers.append(newList[i])\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n    "
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.append(newList.pop(0))\n    newList.append(newList.pop())\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_value = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first_value\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # YOUR CODE HERE\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for index in range(len(newList)-1,0,-1): \n        value = newList[index] \n        newList[index] = newList[index+1] \n        newList[index+1] = value \n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    from numpy import arange,prod\n    #find the polynomial\n    a=0\n    #loop through each number in the array and find the product of successive coefficients\n    for i in arange(1,n):\n        a+=prod(arange(1,i+1))*k**i\n    return a"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==k==0: \n        return 1\n    elif n==k==1: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) \\\n                + binomial_Coeff(n-1,k) * 2 * binomial_Coeff(n-1,k-1) \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def helper(n,k):\n        # if a binomial coefficient is given, return it\n        if k == 0:\n            return 1\n        elif k < 0:\n            return 0\n        else:\n            return helper(n, k - 1) * n ** k\n    return helper(n,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) "
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    for i in range(1, n):\n        k = k * i\n    return k\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # How many terms are in a binomial series.\n    # First, what's the total number of terms in a series.\n    # Then, what's the sum of terms.\n    # Then, calculate the product of the co-efficients.\n    pass \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    if n == 0:\n        return result\n    else:\n        for i in range(n):\n            result += binomial_Coeff(n-i,k) * (i+1)**k\n        return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 1\n    for i in range(k):\n        sum *= (n-i)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k>n): return 0\n    return binomial_Coeff(n,k-1) * (k**n -1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k): \n        sum += n*(n**i) \n    return sum \n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_count = 0\n    ip = ip.lower().replace(\"0\",\"\")\n    for char in ip:\n        if char == \"0\":\n            zero_count += 1\n    if zero_count > 0:\n        ip = \"0\" * (zero_count-1) + ip\n        return ip\n    else:\n        return ip\ndef get_chunks(str, chunk_size):\n    '''\n    Write a function to get a list of strings within a chunk of size chunk_size.\n    '''\n    if len(str) > chunk_size:\n        raise Exception('string length is greater than chunk_size')\n    return [str[i:i+chunk_size] for i in range(0, len(str), chunk_size)]\ndef get_chunk_numbers(str, chunk_size):\n    '''\n    Write a function to get a list of chunk numbers in a string.\n    '''\n    if len(str) > chunk_size:\n        raise Exception('string length is greater than chunk_size')\n    return [i for i in range(chunk_size, len(str), chunk_size)]\ndef split_ip(ip):\n    '''\n    Write a function that returns a list of all the groups of the passed ip.\n    '''\n    ip_parts = ip.split(\".\")\n    return [ip_parts[i:i+4] for i in range(0, len(ip_parts), 4)]\ndef get_site(ip):\n    '''\n    Write a function that returns a string of the first four octets of a passed ip.\n    '''\n    if len(ip) > 4:\n        raise Exception(\"ip address has length\")\n    return ip[0:4]\ndef is_number(s):\n    '''\n    Write a function that returns true if the passed string is a number, else false.\n    '''\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\ndef is_ip(s):\n    '''\n    Write a function that returns true if the passed string is a valid ip address, else false.\n    '''\n    if not is_number(s):\n        return False\n    if len(s)!= 4:\n        return False\n    if not s.isdigit():\n        return False\n    if len(s) == 4:\n        if s.isalpha() or s.isalnum():\n            return False\n        else:\n            return True\n    else:\n        return False\ndef is_subnet(s, subnet):\n    '''\n    Write a function that returns true if the passed string is a subnet of the passed string, else false.\n    '''\n    if len(s) < 4:\n        return False\n    if len(s) == 4 and s.isdigit():\n        if int(s) >= subnet[0] and int(s) <= subnet[1]:\n            return True\n    return False\ndef is_full_ip(ip):\n    '''\n    Write a function that returns true if the passed string is a valid ip address, else false.\n    '''\n    if not is_number(ip):\n        return False\n    if len(ip) == 4:\n        if ip.isalpha() or ip.isalnum():\n            return True\n        else:\n            return False\n    else:\n        return False\ndef validate_ip(ip):\n    '''\n    Write a function that returns true if the passed string is a valid ip address, else false.\n    '''\n    return is_full_ip(ip) and is_number(ip) and is_subnet(ip,get_chunk_numbers(ip,3)) and is_subnet(ip,get_chunk_numbers(ip,4)) and is_ip(ip)\ndef is_valid_ip(ip):\n    '''\n    Write a function that returns true if the passed string is a valid ip address, else false.\n    '''\n    if not validate_ip(ip):\n        return False\n    if not is_number(ip):\n        return False\n    if len(ip) == 4:\n        if ip.isdigit():\n            return True\n        else:\n            return False\n    else:\n        return False\ndef get_family(ip):\n    '''\n    Write a function that returns a string that is the ip version family.\n    '''\n    if len(ip) == 4:\n        if ip.isdigit():\n            return \"ipv4\"\n        else:\n            return \"ipv6\"\n    else:\n        return \"ipv6\"\ndef get_prefix(ip):\n    '''\n    Write a function that returns a string that is the prefix of the passed ip.\n    '''\n    prefix_size = 6\n    if len(ip) == 4:\n        if ip.isdigit():\n            return \"0\" * prefix_size\n        else:\n            return \"0\" * prefix_size + \".\" + ip\n    else:\n        return \"0\" * prefix_size + \".\" + ip + \".\" + ip\ndef validate_prefix(ip):\n    '''\n    Write a function that returns true if the passed string is a valid prefix, else false.\n    '''\n    return is_valid_ip(get_prefix(ip)) and is_ip(ip)\ndef is_valid_prefix(prefix):\n    '''\n    Write a function that returns true if the passed prefix is a valid prefix, else false.\n    '''\n    if not validate_prefix(prefix):\n        return False\n    if not is_number(prefix):\n        return False\n    if len(prefix)!= 6:\n        return False\n    return True\ndef valid_subnet(subnet):\n    '''\n    Write a function that returns true if the passed string is a valid subnet, else false.\n    '''\n    return is_valid_ip(subnet[0]) and is_ip(subnet[1]) and is_subnet(subnet,get_chunk_numbers(subnet[1],3)) and is_subnet(subnet,get_chunk_numbers(subnet[1],4)) and is_ip(subnet[2])\ndef validate_subnet(subnet):\n    '''\n    Write a function that returns true if the passed subnet is a valid subnet, else false.\n    '''\n    return is_valid_ip(subnet[0]) and is_ip(subnet[2]) and is_subnet(subnet,get_chunk_numbers(subnet[2],3)) and is_subnet(subnet,get_chunk_numbers(subnet[2],4)) and is_ip(subnet[1])\ndef is_valid_subnet(subnet):\n    '''\n    Write a function that returns true if the passed subnet is a valid subnet, else false.\n    '''\n    if not validate_subnet(subnet):\n        return False\n    if not is_number(subnet[0]):\n        return False\n    if not is_number(subnet[1]):\n        return False\n    if not is_number(subnet[2]):\n        return False\n    if not is_number(subnet[3]):\n        return False\n    return True\ndef validate_mask(mask):\n    '''\n    Write a function that returns true if the passed subnet is a valid subnet, else false.\n    '''\n    return is_valid_ip(mask[0]) and is_ip(mask[1]) and is_subnet(mask,get_chunk_numbers(mask[1],3)) and is_subnet(mask,get_chunk_numbers(mask[1],4)) and is_ip(mask[2]) and is_number(mask[3]) and mask[3] == \"0\" and mask[3]!= \"0\"\ndef is_valid_mask(mask):\n    '''\n    Write a function that returns true if the passed subnet is a valid subnet, else false.\n    '''\n    if not validate_mask(mask):\n        return False\n    if not is_number(mask[0]):\n        return False\n    if not is_number(mask[1]):\n        return False\n    if not is_number(mask[2]):\n        return False\n    if not is_number(mask[3]):\n        return False\n    if mask[3] == \"0\" and mask[3]!= \"0\":\n        return False\n    return True\ndef get_mask(ip):\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip = ip.replace('0', '')\n    ip = ip.lstrip('0')\n    ip = ip.lstrip('.')\n    ip = ip.lstrip(' ')\n    ip = ip.lstrip('x')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return \"Invalid ip address\"\n    else:\n        ip = ip.strip()\n        zero = \"0\"\n        cnt = len(ip) - len(zero)\n        if cnt > 0:\n            return ip\n        else:\n            return removezero_ip(ip)\n        \ndef remove_digits(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return \"Invalid ip address\"\n    else:\n        ip = ip.strip()\n        zero = \"0\"\n        nums = re.findall(r\"\\d\", ip)\n        for num in nums:\n            ip = ip.replace(num, zero)\n        cnt = len(ip) - len(zero)\n        if cnt > 0:\n            return ip\n        else:\n            return remove_digits(ip)\n        \ndef remove_dots(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return \"Invalid ip address\"\n    else:\n        ip = ip.strip()\n        zero = \"0\"\n        num = re.findall(r\"\\d\", ip)\n        for num in num:\n            ip = ip.replace(num, zero)\n        cnt = len(ip) - len(zero)\n        if cnt > 0:\n            return ip\n        else:\n            return remove_dots(ip)\n    \ndef is_valid(ip):\n    '''\n    Write a function to check if an ip address is a valid one.\n    '''\n    if not ip:\n        return \"Invalid ip address\"\n    else:\n        try:\n            removezero_ip(ip)\n            remove_digits(ip)\n            remove_dots(ip)\n            return True\n        except:\n            return False\n    \ndef check_all_ip(ip):\n    '''\n    Write a function to check if an ip address is valid one.\n    '''\n    if not ip:\n        return \"Invalid ip address\"\n    else:\n        if is_valid(ip):\n            return True\n        else:\n            return False\n    \ndef is_valid_ip(ip):\n    '''\n    Write a function to check if an ip address is valid one.\n    '''\n    if not ip:\n        return \"Invalid ip address\"\n    else:\n        if is_valid(ip):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return str(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.replace('.','')\ndef remove_repeat_word(text):\n    '''\n    Remove the repeated word.\n    '''\n    pattern = r'[^a-zA-Z0-9_.]+'\n    return re.sub(pattern, '', text)\ndef remove_repeat_word_once(text):\n    '''\n    Remove the repeated word.\n    '''\n    pattern = r'[^a-zA-Z0-9_.]+'\n    return re.sub(pattern, '', text)\ndef remove_repeat_word_twice(text):\n    '''\n    Remove the repeated word.\n    '''\n    pattern = r'[^a-zA-Z0-9_.]+'\n    return re.sub(pattern, '', text)\ndef remove_repeat_word_twice_with_lower_case(text):\n    '''\n    Remove the repeated word.\n    '''\n    pattern = r'[^a-zA-Z0-9_.]+'\n    return re.sub(pattern, '', text.lower())\ndef replace_alpha_num(text):\n    '''\n    Replace alpha numbers with their simple representation.\n    '''\n    pattern = r'[^a-zA-Z0-9_.]+'\n    text = re.sub(pattern, '', text)\n    pattern = r'\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = r'\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = r'\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = r'[a-zA-Z0-9_.]+'\n    text = re.sub(pattern, '', text)\n    pattern = r'[^a-zA-Z0-9_.]+'\n    text = re.sub(pattern, '', text)\n    return text\ndef delete_word_lower_case(text):\n    '''\n    Delete the word lower case in the text.\n    '''\n    pattern = r'[^a-zA-Z0-9_.]+'\n    text = re.sub(pattern, '', text)\n    pattern = r'[a-zA-Z0-9_.]+'\n    text = re.sub(pattern, '', text)\n    return text\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zeroes = 0\n    while zeroes > 0:\n        if ip[0]!= '0':\n            return ip\n        else:\n            zeroes = zeroes - 1\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #check if the input is empty\n    if not ip:\n        return ''\n    \n    #remove leading zeroes if any\n    ip = ip.lstrip('0')\n    if ip:\n        #if the input is empty return an empty string\n        #if input is not empty return ip\n        if not ip.lstrip('0'):\n            return ''\n        else:\n            return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    while(len(ip) > 4):\n        if(ip[0] == '0'):\n            ip = ip[1:]\n        else:\n            ip = ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.search('^(?:0x|0[0-9a-fA-F]{4}){1,2}$',ip):\n        print(ip)\n        return ip\n    else:\n        print(\"Invalid ip: \",ip)\n        return None\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #ip=list(ip)\n    ip=list(ip.split(\".\"))\n    for i in range(len(ip)):\n        if(ip[i]=='0'):\n            ip.pop(i)\n    if(len(ip)!=4):\n        print(\"Error in IP format, please enter a valid ip address\")\n        return 0\n    return \".\".join(ip)\ndef removezero_mac(mac):\n    '''\n    Write a function to remove leading zeroes from an mac address.\n    '''\n    #mac=list(mac.split(\".\"))\n    mac=list(mac.split(\":\"))\n    for i in range(len(mac)):\n        if(mac[i]=='0'):\n            mac.pop(i)\n    if(len(mac)!=8):\n        print(\"Error in MAC format, please enter a valid mac address\")\n        return 0\n    return \":\".join(mac)\ndef removezero_date(date):\n    '''\n    Write a function to remove leading zeroes from a date.\n    '''\n    #date=list(date.split(\".\"))\n    date=list(date.split(\":\"))\n    for i in range(len(date)):\n        if(date[i]=='0'):\n            date.pop(i)\n    if(len(date)!=8):\n        print(\"Error in Date format, please enter a valid date\")\n        return 0\n    return \":\".join(date)\ndef removezero_fqdn(fqdn):\n    '''\n    Write a function to remove leading zeroes from a fqdn.\n    '''\n    #fqdn=list(fqdn.split(\".\"))\n    fqdn=list(fqdn.split(\":\"))\n    for i in range(len(fqdn)):\n        if(fqdn[i]=='0'):\n            fqdn.pop(i)\n    if(len(fqdn)!=16):\n        print(\"Error in FQDN format, please enter a valid FQDN\")\n        return 0\n    return \":\".join(fqdn)\ndef removezero_dns(dns):\n    '''\n    Write a function to remove leading zeroes from a DNS.\n    '''\n    #dns=list(dns.split(\".\"))\n    dns=list(dns.split(\":\"))\n    for i in range(len(dns)):\n        if(dns[i]=='0'):\n            dns.pop(i)\n    if(len(dns)!=16):\n        print(\"Error in DNS format, please enter a valid DNS\")\n        return 0\n    return \":\".join(dns)\ndef removezero_id(id):\n    '''\n    Write a function to remove leading zeroes from an id.\n    '''\n    #id=list(id.split(\".\"))\n    id=list(id.split(\":\"))\n    for i in range(len(id)):\n        if(id[i]=='0'):\n            id.pop(i)\n    if(len(id)!=16):\n        print(\"Error in ID format, please enter a valid ID\")\n        return 0\n    return \":\".join(id)\ndef removezero_name(name):\n    '''\n    Write a function to remove leading zeroes from an name.\n    '''\n    #name=list(name.split(\".\"))\n    name=list(name.split(\":\"))\n    for i in range(len(name)):\n        if(name[i]=='0'):\n            name.pop(i)\n    if(len(name)!=16):\n        print(\"Error in NAME format, please enter a valid NAME\")\n        return 0\n    return \":\".join(name)\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from an port.\n    '''\n    #port=list(port.split(\".\"))\n    port=list(port.split(\":\"))\n    for i in range(len(port)):\n        if(port[i]=='0'):\n            port.pop(i)\n    if(len(port)!=8):\n        print(\"Error in PORT format, please enter a valid PORT\")\n        return 0\n    return \":\".join(port)\ndef removezero_type(type):\n    '''\n    Write a function to remove leading zeroes from an type.\n    '''\n    #type=list(type.split(\".\"))\n    type=list(type.split(\":\"))\n    for i in range(len(type)):\n        if(type[i]=='0'):\n            type.pop(i)\n    if(len(type)!=8):\n        print(\"Error in TYPE format, please enter a valid TYPE\")\n        return 0\n    return \":\".join(type)\ndef removezero_protocol(protocol):\n    '''\n    Write a function to remove leading zeroes from an protocol.\n    '''\n    #protocol=list(protocol.split(\".\"))\n    protocol=list(protocol.split(\":\"))\n    for i in range(len(protocol)):\n        if(protocol[i]=='0'):\n            protocol.pop(i)\n    if(len(protocol)!=8):\n        print(\"Error in PROTOCOL format, please enter a valid PROTOCOL\")\n        return 0\n    return \":\".join(protocol)\ndef removezero_source(source):\n    '''\n    Write a function to remove leading zeroes from an source.\n    '''\n    #source=list(source.split(\".\"))\n    source=list(source.split(\":\"))\n    for i in range(len(source)):\n        if(source[i]=='0'):\n            source.pop(i)\n    if(len(source)!=8):\n        print(\"Error in SOURCE format, please enter a valid SOURCE\")\n        return 0\n    return \":\".join(source)\ndef removezero_target(target):\n    '''\n    Write a function to remove leading zeroes from an target.\n    '''\n    #target=list(target.split(\".\"))\n    target=list(target.split(\":\"))\n    for i in range(len(target)):\n        if(target[i]=='0'):\n            target.pop(i)\n    if(len(target)!=8):\n        print(\"Error in TARGET format, please enter a valid TARGET\")\n        return 0\n    return \":\".join(target)\ndef removezero_value(value):\n    '''\n    Write a function to remove leading zeroes from an value.\n    '''\n    #value=list(value.split(\".\"))\n    value=list(value.split(\":\"))\n    for i in range(len(value)):\n        if(value[i]=='0'):\n            value.pop(i)\n    if(len(value)!=8):\n        print(\"Error in VALUE format, please enter a valid VALUE\")\n        return 0\n    return \":\".join(value)\ndef removezero_zone(zone):\n    '''\n    Write a function to remove leading zeroes from a zone.\n    '''\n    #zone=list(zone.split(\".\"))\n    zone=list(zone.split(\":\"))\n    for i in range(len(zone)):\n        if(zone[i]=='0'):\n            zone.pop(i)\n    if(len(zone)!=8):\n        print(\"Error in ZONE format, please enter a valid ZONE\")\n        return 0\n    return \":\".join(zone)\ndef removezero_zoneid(zoneid):\n    '''\n    Write a function to remove leading zeroes from a zone id.\n    '''\n    #zoneid=list(zoneid.split(\".\"))\n    zoneid=list(zoneid.split(\":\"))\n    for i in range(len(zoneid)):\n        if(zoneid[i]=='0'):\n            zoneid.pop(i)\n    if(len(zoneid)!=8):\n        print(\"Error in ZONEID format, please enter a valid ZONEID\")\n        return 0\n    return \":\".join(zoneid)\ndef removezero_zoneid(zoneid):\n    '''"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd.append(i)\n    return odd - even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return\n    if len(list1) == 2:\n        if list1[0] % 2 == 0:\n            return (list1[0])\n        else:\n            return None\n    if list1[0] % 2 == 0:\n        return (list1[0])\n    else:\n        return None\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    output_list=[]\n    for num in list1:\n        if num % 2 == 0:\n            output_list.append(num)\n        else:\n            output_list.append(num)\n    return output_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)<2:\n        return 'Please enter a list of numbers!'\n    if len(list1)%2==0:\n        return f\"The difference between the even and odd numbers is {list1[-1] - list1[0]}\"\n    else:\n        return f\"The difference between the even and odd numbers is {list1[0] - list1[-1]}\"\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = [0]*100\n    for num in list1:\n        if num % 2 == 0:\n            even_odd[num//2] += 1\n        else:\n            even_odd[num//2] -= 1\n    return even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    i = 0\n    while i < len(list1)-1:\n        if list1[i] % 2 == 0:\n            diff += list1[i]\n        else:\n            diff += list1[i+1] - list1[i]\n        i += 2\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_first = len(list1)\n    even_first = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_first += list1[i]\n        else:\n            odd_first += list1[i]\n    return odd_first - even_first\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    for i in range(len(list1)-1):\n        if list1[i]%2==0:\n            even+=list1[i]\n        else:\n            odd+=list1[i]\n    return even-odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_list = []\n    odd_even_list = []\n    even_odd_sum = 0\n    odd_even_sum = 0\n    for x in list1:\n        if x % 2 == 0:\n            even_odd_list.append(x)\n        else:\n            odd_even_list.append(x)\n    for i in even_odd_list:\n        even_odd_sum += i\n    for i in odd_even_list:\n        odd_even_sum += i\n    difference = even_odd_sum - odd_even_sum\n    return difference\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = list1[0::2]\n    odd_list = list1[1::2]\n    return (even_list, odd_list)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for x in range(n+1)] for y in range(m+1)]\n    i = 0\n    j = 0\n    for i in range(n):\n        dp[i][i] = 1\n    for j in range(m):\n        dp[j][j+1] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(m-1, -1, -1):\n            if str1[i] == str2[j] and dp[i+1][j+1] == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i+1][j+1]\n    return dp[0][0]\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    ans = 0\n    for i in range(len(str1)) : \n        for j in range(i,len(str1)) : \n            if (str1[i]!= str1[j]) : \n                if str2[i]!= str2[j] : \n                    ans = max(ans,i-j)\n    return ans\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def swap_nums(a,b):\n        if a>b :\n            a,b=b,a\n        if a==b:\n            return 0\n        if a<b:\n            return 1\n        if a%2==0:\n            if a//2==b//2:\n                return 1\n            if a//2<b//2:\n                return 2\n        if a%2!=0:\n            if a//2==b//2:\n                return 2\n            if a//2<b//2:\n                return 3\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1=len(str1)\n    n2=len(str2)\n    \n    if n1!=n2:\n        return 0\n    \n    if n1<n2:\n        for i in range(n1,n2):\n            if str1[i]==1:\n                str1[i]=2\n            else:\n                str1[i]=1\n        return 1\n    else:\n        for i in range(n1,n2):\n            if str2[i]==1:\n                str2[i]=2\n            else:\n                str2[i]=1\n        return 2\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #https://www.geeksforgeeks.org/python-binary-number-conversion-of-a-string-in-a-range/\n    #https://www.geeksforgeeks.org/count-minimum-swaps-required-to-convert-one-binary-number-to-another-string/\n    #https://www.geeksforgeeks.org/count-maximum-swaps-required-to-convert-one-binary-number-to-another-string/\n    def CountSwaps(str1,str2) : \n        #str2 is in Binary form\n        num1 = 0\n        num2 = 0\n        swap = 0\n        s1 = str(bin(int(str1,2))[2:])\n        s2 = str(bin(int(str2,2))[2:])\n        for i in range(len(s1)) :\n            if s1[i] == '1' :\n                num1 += 1\n            if s2[i] == '1' :\n                num2 += 1\n        \n        if num1 == num2 :\n            print(f\"swapping 1 and 2: {s1}\")\n            print(f\"swapping 2 and 1: {s2}\")\n            print(\"swaps required: \", end=\" \")\n            for i in range(num1) :\n                print(f\"{s1[i]}\", end=\" \")\n            for i in range(num2) :\n                print(f\"{s2[i]}\", end=\" \")\n            print(\"\\n\")\n            swap += num1 + num2\n        else :\n            print(\"1,2: swapped\", end=\" \")\n            for i in range(num1) :\n                print(f\"{s1[i]}\", end=\" \")\n            for i in range(num2) :\n                print(f\"{s2[i]}\", end=\" \")\n            print(\"\\n\")\n            swap += num1 + num2\n        print(f\"swaps required: {swap}\")\n    \n    CountSwaps(str1,str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swap_count = 0 \n    \n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            swap_count+=1\n    \n    return swap_count \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)) :\n        if str1[i]=='0' :\n            str1=str1[0:i]+'1'+str1[i+1:]\n        else :\n            str1=str1[0:i]+'0'+str1[i+1:]\n    for j in range(len(str2)) :\n        if str2[j]=='0' :\n            str2=str2[0:j]+'1'+str2[j+1:]\n        else :\n            str2=str2[0:j]+'0'+str2[j+1:]\n    for i in range(len(str1)) :\n        if str1[i]==str2[i] :\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c = 0\n    # initialize dictionary\n    d = {}\n    # convert all characters of the binary\n    for i in range(len(str1)) :\n        d[str1[i]] = i\n    # check for repeated chars\n    for i in range(len(str2)) :\n        if str2[i] in d:\n            if d[str2[i]]!= i:\n                c = c + 1\n                # update dictionary\n                d[str2[i]] = i\n                # update dict\n                del d[str1[i]]\n                break\n    return c\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(f\"The size of the given tuple is {sys.getsizeof(tuple_list)} bytes.\")\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sum_of_items = 0 \n    for item in tuple_list:\n        sum_of_items += len(item)\n    return sum_of_items\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not tuple_list:\n        return 0\n    if len(tuple_list) == 1:\n        return len(tuple_list[0])\n    return sys.getsizeof(tuple(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for item in tuple_list:\n        total += sys.getsizeof(item)\n    return total\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    from sys import getsizeof\n    return getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count_byt = 0\n    for item in tuple_list:\n        count_byt += len(str(item))\n    return count_byt\n    #return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # check if the tuple is empty\n    if tuple_list == []:\n        return 0\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for i in tuple_list:\n        total = total + len(str(i))\n    return total\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    count = 0\n    found = False\n    if len(arr1) < len(arr2):\n        mid = len(arr1) // 2\n        while (mid > 0 and not found):\n            if arr1[mid] == arr2[mid]:\n                found = True\n                mid = mid - 1\n            elif arr1[mid] > arr2[mid]:\n                mid = mid - 1\n            else:\n                count += 1\n                mid = mid - 1\n        if not found:\n            mid = mid\n    else:\n        mid = len(arr2) // 2\n        while (mid > 0 and not found):\n            if arr2[mid] == arr1[mid]:\n                found = True\n                mid = mid - 1\n            elif arr2[mid] > arr1[mid]:\n                mid = mid - 1\n            else:\n                count += 1\n                mid = mid - 1\n        if not found:\n            mid = len(arr1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    # if arr2[k-1] < arr2[k]:\n    #     arr2 = arr2[:k] + arr2[k+1:]\n    \n    # elif arr2[k-1] > arr2[k]:\n    #     arr2 = arr2[:k] + arr2[k+1:]\n    \n    # return arr2[n//2]\n    \n    def swap(arr1, i, j):\n        arr1[i], arr1[j] = arr1[j], arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the index of the element we are looking for.\n    # k - 1 because we want the last element\n    index = (k - 1) // 2\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # m is max of arr1 and arr2\n    # n is the number of elements in the array\n    m = max(arr1, arr2)\n    n = len(arr1)\n    # Returns the index of the kth element\n    for i in range(n):\n        if (arr1[i] > m) or (arr2[i] > m):\n            return None\n    # If k is between 0 and n-1, return None. Else return index of element at given k\n    if k >= n-1:\n        return None\n    # If k is smaller than 0 or k is equal to n-1, return None\n    elif k < 0:\n        return None\n    else:\n        for i in range(n-k, n):\n            if arr1[i] > m:\n                m = arr1[i]\n            elif arr2[i] > m:\n                m = arr2[i]\n            elif arr1[i] == m:\n                return i\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # sort the array\n    arr1.sort()\n    arr2.sort()\n    # find the first element in the array\n    left, right = 0, len(arr1) - 1\n    # if the left is larger than the right\n    while left <= right:\n        mid = left + (right - left) // 2\n        # if the mid is less than or equal to k\n        if arr1[mid] <= arr2[mid]:\n            # if it is greater than the mid\n            if mid >= k - 1:\n                # if it is less than the mid\n                # it is greater than the right\n                if arr1[mid + 1] < arr2[mid]:\n                    # print(arr1[mid], arr2[mid])\n                    # print(arr1[mid + 1], arr2[mid])\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            # if the mid is less than the right\n            # it is greater than the left\n            if arr1[mid] > arr2[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    # if the kth element is in the left side of the array\n    if arr1[mid] < arr2[mid]:\n        return arr1[mid]\n    else:\n        return arr2[mid]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left, right = 0, len(arr1)-1\n    # Traverse both arrays\n    while left < right:\n        # Find the midpoint of both arrays\n        mid = (left + right) // 2\n        # Compare the element at midpoint with the element in arr2\n        if arr1[mid] == arr2[k-1]:\n            return arr1[mid]\n        elif arr1[mid] < arr2[k-1]:\n            left = mid+1\n        else:\n            right = mid\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # k = 0, for index 0 and 1\n    # k = n-1, for index n-1\n    # k = n\n    if k == 0:\n        return arr2[k]\n    elif k == len(arr1) - 1:\n        return arr1[k]\n    elif k > len(arr1):\n        return arr2[k - 1]\n    elif k < 0:\n        return arr1[k]\n    else:\n        return find_kth(arr1, arr2, k-1) + find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr1[i]\n    \ndef solution(arr1, arr2, k):\n    '''\n    Sort the given array and kth array in an iterative way.\n    '''\n    \n    \n    # Divide arr1 and arr2 in two sub arrays\n    arr1_sub = []\n    arr2_sub = []\n    i = 0\n    j = 0\n    while i < len(arr1) or j < len(arr2):\n        if i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                arr1_sub.append(arr1[i])\n                i += 1\n            else:\n                arr2_sub.append(arr2[j])\n                j += 1\n        elif i < len(arr1):\n            arr1_sub.append(arr1[i])\n            i += 1\n        elif j < len(arr2):\n            arr2_sub.append(arr2[j])\n            j += 1\n    \n    # Sort the sub arrays\n    arr1_sub.sort()\n    arr2_sub.sort()\n    \n    # Find kth element\n    return find_kth(arr1_sub, arr2_sub, k)\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, len(arr1) - 1\n    while i <= j:\n        m = (i + j) // 2\n        if arr1[m] > arr2[k-1]:\n            i = m + 1\n        else:\n            j = m - 1\n    return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Check if the first array is sorted.\n    if k >= len(arr1):\n        if arr1 == arr2:\n            return arr1[-1]\n        else:\n            return -1\n    \n    # If the kth element is present in arr1 and not arr2.\n    if arr1[k] < arr2[k]:\n        return find_kth(arr1, arr2, k + 1)\n    else:\n        return arr1[k]\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    for n in str(number):\n        total += int(n)\n    if number == total:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    count = 0\n    temp = 0\n    for i in range(1, (num//2)+1):\n        if num%i == 0:\n            count = count + 1\n            temp = i\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    m = 0\n    num_list = []\n    for i in range(len(str(number))):\n        num_list.append(number % 10)\n        number //= 10\n    for i in num_list:\n        m = m * 10 + i\n    if (m == number):\n        return \"Armstrong number\"\n    else:\n        return \"Not Armstrong number\"\n    \ndef main():\n    '''\n    Write your own main function.\n    '''\n    print(\"The main function of this module.\")\n    \ndef main():\n    '''\n    Write your own main function.\n    '''\n    print(\"The main function of this module.\")\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = int(number)\n    sum = 0\n    divisors = 0\n    for i in range(1, num + 1):\n        if i < 1:\n            return False\n        else:\n            for j in range(1,i):\n                if (num % j) == 0:\n                    if num % j == 0:\n                        divisors += 2\n                    else:\n                        divisors += 1\n            if num == divisors:\n                sum += num\n            num = int(num / divisors)\n        \n    if num == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    d = 10\n    e = 1000\n    s = number\n    result = True\n    while(s!= 0):\n        rem = s % d\n        s = s // d\n        if(rem!= 0):\n            result = False\n            break\n    if(result):\n        while(s!= 0):\n            rem = s % e\n            s = s // e\n            if(rem!= 0):\n                break\n    if(result):\n        return True\n    else:\n        return False\n        \nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    if armstrong_number(number):\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    string_number = str(number)\n    count = 0\n    flag = True\n    temp = 0\n    temp_len = len(string_number)\n    temp_count = 0\n    for i in range(temp_len):\n        temp = int(string_number[i])\n        temp_count += 1\n        if temp == temp_count:\n            count += 1\n            temp_count = 0\n            if flag:\n                print(temp + \" is the Armstrong number.\")\n                flag = False\n            else:\n                print(temp + \" is not the Armstrong number.\")\n                flag = True\n    if flag:\n        print(temp + \" is the Armstrong number.\")\n    else:\n        print(temp + \" is not the Armstrong number.\")\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    n = number\n    while n!= 0:\n        rem = n % 10\n        count += rem ** 3\n        n = n // 10\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    answer = 0\n    sum = 0\n    for i in str(number):\n        sum += int(i)\n        if(sum>number):\n            answer +=1\n        sum = 0\n    return answer\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    isArmstrong = True\n    for i in range(2, number):\n        if number % i == 0:\n            isArmstrong = False\n            break\n    if isArmstrong:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    num = len(number)\n    arr = []\n    for i in range(len(number)):\n        arr.append(int(number[i]))\n    check = 0\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(len(arr)):\n            sum += arr[j]**i\n        if num == sum:\n            check += 1\n    return check\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #Your code goes here\n    total=0\n    sum=0\n    for i in range(1,number+1):\n        sum+=i\n    avg=sum/number\n    return sum,avg\n    \nsum,avg=sum_average(100)\nprint(f'sum= {sum} \\n avg= {avg}')\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, number):\n        number = int(input(f\"Enter a natural number: \"))\n        sum += number\n    average = sum/number\n    print(f\"The sum of the first {number} natural numbers is: {sum}\")\n    print(f\"The average of the first {number} natural numbers is: {average}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number==1:\n        return number\n    else:\n        return number+sum_average(number-1)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    # This code is used to detect the sum of numbers using if statement\n    # '''\n    # if sum(range(1, n+1)) >= n:\n    #     print(\"No numbers\")\n    # else:\n    #     print(sum(range(1, n+1)))\n    # '''\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(number[:n]), sum(number) / len(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for num in range(1,number+1):\n        total += num\n    average = total/number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return number + sum_average(number-1)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for num in range(number):\n        sum += num\n    average = sum / number\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum / number\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for x in range(0, number + 1):\n        number = int(input(\"Enter a number: \"))\n        sum += number\n        count += 1\n    average = sum/count\n    return average\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0: \n        print(n, \"is even\") \n        return True \n    else: \n        print(n, \"is not even\") \n        return False \n    # Write your code here\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0):\n        return True\n    else:\n        return False\n    # end of is_Even function"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is not even\")\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Write your code here\n    res = []\n    temp = ''\n    for i in range(0,len(str1)-1):\n        if str1[i] in res:\n            temp = str1[i]\n            res.remove(str1[i])\n        else:\n            res.append(temp)\n            temp = str1[i]\n    return res[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for key, value in freq.items():\n        if value == 1:\n            return key\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    if type(str1)!= str:\n        raise TypeError('Invalid argument')\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = str1.replace(str1[0], '')\n    return s.count(str1[0])\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create dictionary with keys as letters\n    letters = {}\n    for c in str1:\n        if c in letters:\n            letters[c] += 1\n        else:\n            letters[c] = 1\n    # dictionary of letters is sorted with values as frequency of characters\n    letters = sorted(letters.items())\n    # find first letter with frequency greater than 1\n    letter = letters[0][0]\n    # return letter if frequency of letter > 1\n    return letter if letters[0][1] > 1 else letter.upper()\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Write your code here.\n    return str1[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    st = set(str1)\n    return st.pop()\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    x = list(str1)\n    for i in range(len(x)):\n        if x[i] in x[i+1:len(x)] and x[i] not in x[i-1:len(x)]:\n            return x[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create empty dict to store character\n    my_dict = {}\n    # Loop through string\n    for char in str1:\n        # Check if char is already in dictionary\n        if char in my_dict:\n            # Increment count\n            my_dict[char] = my_dict[char] + 1\n        else:\n            # Add char to dictionary\n            my_dict[char] = 1\n    # Find the most repeated element\n    return list(my_dict.values())[0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = [i for i in range(1,n+1)]\n    for i in range(2,len(l)):\n        l[i] = l[i-1]*2\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n+1):\n        if num < 100:\n            ludic.append(num)\n    print(ludic)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    x = []\n    for i in range(1,n+1):\n        if i<10:\n            if i%2==0:\n                if i<9:\n                    x.append(i)\n            else:\n                x.append(i)\n        elif i<100:\n            x.append(i)\n        else:\n            pass\n    return x\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i > 1:\n            if i < 10:\n                ludic.append(i)\n            elif i < 100:\n                ludic.append(i)\n            else:\n                ludic.append(i)\n        elif i == 1:\n            ludic.append(1)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    while n > 0:\n        luc = n % 10\n        if luc <= 3:\n            res.append(luc)\n            n = int(n / 10)\n        else:\n            n = int(n / 10)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                result.append(i)\n                result.append(n // i)\n        result.append(n)\n        return result\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    def first(n):\n        if n > 0:\n            result.append(n)\n            return first(n - 1)\n        else:\n            return 0\n    \n    def second(n):\n        if n >= 2:\n            result.append(n)\n            return second(n - 1)\n        else:\n            return 0\n    \n    def third(n):\n        if n >= 3:\n            result.append(n)\n            return third(n - 2)\n        else:\n            return 0\n    \n    for i in range(0, len(result) - 1):\n        if result[i] <= n:\n            result.remove(result[i])\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucs = []\n    for i in range(1, n+1):\n        if i < 10:\n            if n % i == 0:\n                lucs.append(i)\n        else:\n            for j in range(1, 10):\n                if n % j == 0:\n                    if j < 10:\n                        lucs.append(j)\n    return lucs\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i < 100:\n            if i < 10:\n                ludic.append(i)\n            else:\n                ludic.append(i)\n        else:\n            if i < 10:\n                ludic.append(i)\n            else:\n                ludic.append(i)\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 0\n    for i in range(1,n+1):\n        if(i<10):\n            lucid = lucid + int(i)\n        else:\n            if(i<100):\n                if(i%10==0):\n                    lucid = lucid + int(i//10)\n                else:\n                    lucid = lucid + int(i//10)\n            else:\n                if(i%100==0):\n                    lucid = lucid + int(i//100)\n                else:\n                    lucid = lucid + int(i//100)\n    return lucid\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_word(s):\n        word_list = s.split()\n        for word in word_list:\n            print(word)\n    return reverse_word\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.replace(' ','')\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) < 1:\n        return \"\"\n    else:\n        temp = \"\"\n        for i in range(len(s)):\n            if s[i]!= \" \":\n                temp = temp + s[i]\n        return temp.split(\" \")\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse(s):\n        # define reverse function as a function\n        def r(s):\n            # pass through string until end of string\n            while(s.find(' ')!= -1):\n                # pop left and right word and set next word\n                left = s.rfind(' ')\n                right = s.find(' ', left + 1)\n                # push it back to the string\n                s = s[:left] + right *'' + s[right + 1:]\n            # return the string\n            return s\n        # loop through string\n        for i in range(len(s)):\n            # if i is a whitespace char\n            # set it to the previous word\n            if s[i]!='':\n                s = s[:i] + r(s[i + 1:]) + s[i + 1:]\n        return s\n    # loop through string\n    return''.join(reverse(x) for x in s.split())"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    n = len(s)\n    l = []\n    for i in range(n):\n        if s[i].isalpha():\n            l.append(s[n-i-1])\n        else:\n            l.append(s[n-i])\n    return''.join(l)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    res = []\n    for i in s.split():\n        res.append(i[::-1])\n    return''.join(res)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Find the length of the words in the string\n    n = len(s)\n    # Initialize an empty string to hold reverse words\n    rev = \"\"\n    # Find the length of the words in the string\n    for i in range(n-1, -1, -1):\n        rev += s[i]\n    # Return the reversed string\n    return rev\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    x = s.split()\n    for i in range(len(x)):\n        for j in range(len(x[i])):\n            x[i][j] = x[i][j].upper()\n    return \" \".join(x)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = []\n    for i in s.split():\n        l.append(i[::-1])\n    return''.join(l)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join([word[::-1].lower() for word in s.split()])\n    #print(s)\n    #return''.join([word[::-1].lower() for word in s.split()])\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return 0\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==2 or num==3:\n        return True\n    elif num==5:\n        return False\n    elif num%2==0 or num%3==0:\n        return False\n    else:\n        for i in range(5, num-1, 6):\n            if (num%i==0):\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime_num = True\n    for num in range(2, num):\n        if num % 2 == 0:\n            prime_num = False\n    if prime_num:\n        print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3 or num == 5:\n        return True\n    elif num < 2 or num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Corner cases\n    if (num < 2):\n        return False\n    if (num == 2):\n        return True\n    if (num < 5):\n        return False\n    \n    # check if the number is divisible by two\n    for i in range(2, int(num**0.5)+1):\n        if (num % i == 0):\n            return False\n    \n    # check if the number is divisible by three\n    if (num % 3 == 0):\n        return False\n    \n    # check if the number is divisible by 5\n    if (num % 5 == 0):\n        return False\n    \n    # if it passes all of the above test then it is a prime number\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (3.141592654 / 180)\n    return radian\ndef check_coordinate(input_coordinate):\n    '''\n    Write a function that takes a tuple of coordinates as input.\n    '''\n    if len(input_coordinate)!= 2:\n        print(\"Invalid input.\")\n        return False\n    else:\n        if math.isclose(input_coordinate[0], input_coordinate[1], abs_tol=0.000001):\n            print(\"Invalid input.\")\n            return False\n        else:\n            return True\ndef check_coordinates(coordinates):\n    '''\n    Write a function that takes a list of tuples as input.\n    '''\n    if not all(check_coordinate(coordinate) for coordinate in coordinates):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return True\ndef average(num):\n    '''\n    Write a function that takes a list of numbers as input and calculates the average.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in num):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return sum(num)/len(num)\ndef sum_of_squares(num):\n    '''\n    Write a function that takes a list of numbers as input and calculates the sum of squares.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in num):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return sum([coordinate ** 2 for coordinate in num])\ndef sum_of_squares_and_rounding(num):\n    '''\n    Write a function that takes a list of numbers as input and calculates the sum of squares and rounding.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in num):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return round(sum_of_squares(num), 5)\ndef math_operations(num):\n    '''\n    Write a function that takes a list of numbers as input and performs the math operations on it.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in num):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return sum_of_squares(num)\ndef square_root(num):\n    '''\n    Write a function that takes a list of numbers as input and returns its square root.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in num):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return math.sqrt(sum_of_squares(num))\ndef find_min_and_max_in_list(list):\n    '''\n    Write a function that takes a list of numbers as input and returns the smallest and largest number in the list.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in list):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return list[0], list[-1]\ndef find_median_of_list(list):\n    '''\n    Write a function that takes a list of numbers as input and returns the median.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in list):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return sorted(list)[len(list)//2]\ndef reverse(list):\n    '''\n    Write a function that takes a list of numbers as input and reverses it.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in list):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return list[::-1]\ndef math_operation_with_list(list):\n    '''\n    Write a function that takes a list as input and performs the math operation on it using list.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in list):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return sum_of_squares(list)\ndef math_operation_with_range(num_list):\n    '''\n    Write a function that takes a list of numbers as input and performs the math operation on it using range.\n    '''\n    if not all(check_coordinates(coordinate) for coordinate in num_list):\n        print(\"Invalid input.\")\n        return False\n    else:\n        return sum_of_squares(range(1,len(num_list)+1))\ndef main():\n    '''\n    Write a function that takes a list of numbers as input and performs the math operations on it.\n    '''\n    input_coordinate = input(\"Enter the coordinates: \").split()\n    coordinates = []\n    for coordinate in input_coordinate:\n        coordinates.append(coordinate)\n    if not check_coordinates(coordinates):\n        print(\"Invalid input.\")\n        return\n    else:\n        coordinates = check_coordinates(coordinates)\n    if not check_coordinates(coordinates):\n        print(\"Invalid input.\")\n        return\n    else:\n        coordinates = check_coordinates(coordinates)\n    if not check_coordinates(coordinates):\n        print(\"Invalid input.\")\n        return\n    else:\n        coordinates = check_coordinates(coordinates)\n    if not check_coordinates(coordinates):\n        print(\"Invalid input.\")\n        return\n    else:\n        coordinates = check_coordinates(coordinates)\n    if not check_coordinates(coordinates):\n        print(\"Invalid input.\")\n        return\n    else:\n        coordinates = check_coordinates(coordinates)\n    if not check_coordinates(coordinates):\n        print(\"Invalid input.\")\n        return\n    else:\n        coordinates = check_coordinates(coordinates)\n    if not check_coordinates(coordinates):\n        print(\"Invalid input.\")\n        return\n    else:\n        coordinates = check_coordinates(coordinates)\n    print(\"The sum of squares is: {}\".format(math_operations(coordinates)))\n    print(\"The sum of squares and rounding is: {}\".format(sum_of_squares_and_rounding(coordinates)))\n    print(\"The sum of squares and adding is: {}\".format(math_operations(coordinates) + sum_of_squares(coordinates)))\n    print(\"The sum of squares and subtraction is: {}\".format(math_operations(coordinates) - sum_of_squares(coordinates)))\n    print(\"The sum of squares and multiplication is: {}\".format(math_operations(coordinates) * sum_of_squares(coordinates)))\n    print(\"The sum of squares and division is: {}\".format(math_operations(coordinates) / sum_of_squares(coordinates)))\n    print(\"The sum of squares and modulus is: {}\".format(math_operations(coordinates) % sum_of_squares(coordinates)))\n    print(\"The sum of squares and remainder is: {}\".format(math_operations(coordinates) % sum_of_squares_and_rounding(coordinates)))\n    print(\"The sum of squares and square root is: {}\".format(math_operations(coordinates) ** 0.5))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates)))\n    print(\"The median of list is: {}\".format(find_median_of_list(coordinates))"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * math.pi / 180\n    return radian_degree\ndef convert_to_radians(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\ndef convert_to_degrees(radian):\n    '''\n    Convert radians to degrees.\n    '''\n    degree = radian * 180 / math.pi\n    return degree\ndef get_coordinates(lon,lat,radius, height, inclination):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_line(lon,lat,radius, height, inclination):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_circle(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_inclination(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_ellipsoid(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_ellipsoidal(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_parallelepiped(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_hermite(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_hermite_circle(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_rectangle(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math.sin(latitude)\n    longitude = longitude + height * math.cos(latitude)\n    return longitude, latitude\ndef get_coordinates_rectangle_circle(lon, lat, radius, height):\n    '''\n    This function takes the longitude and latitude of a point and the\n    distance in meters and returns the longitude and latitude of the\n    point in degrees. The height is in meters, the inclination is in\n    degrees.\n    '''\n    radian = convert_to_radians(radian_degree(inclination))\n    degree = convert_to_degrees(radian)\n    latitude = radian_degree(lat)\n    longitude = radian_degree(degree)\n    latitude = latitude + height * math"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree*(math.pi/180)\n    return radians\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef sign(x):\n    '''\n    Write a function to check if the given value is positive or negative.\n    '''\n    if x>0:\n        return 1\n    else:\n        return -1\ndef is_palindrome(x):\n    '''\n    Write a function to check if the given value is a palindrome.\n    '''\n    if x==x[::-1]:\n        return True\n    else:\n        return False\ndef is_even(x):\n    '''\n    Write a function to check if the given value is even.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\ndef is_odd(x):\n    '''\n    Write a function to check if the given value is odd.\n    '''\n    if x%2!=0:\n        return True\n    else:\n        return False\ndef square_root(x):\n    '''\n    Write a function to calculate square root of a number.\n    '''\n    return math.sqrt(x)\ndef cuboid(x):\n    '''\n    Write a function to calculate cuboid of a given value.\n    '''\n    return x*x*x\ndef cube(x):\n    '''\n    Write a function to calculate cube of a given value.\n    '''\n    return x*x*x*x\ndef log(x):\n    '''\n    Write a function to calculate log of a given value.\n    '''\n    return math.log(x)\ndef factorial(x):\n    '''\n    Write a function to calculate factorial of a given value.\n    '''\n    return x*x*x*x\ndef power(x,y):\n    '''\n    Write a function to calculate power of a given value.\n    '''\n    return x**y\ndef average(x,y):\n    '''\n    Write a function to calculate average of two given values.\n    '''\n    return (x+y)/2\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_to_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef normalize(x,y):\n    '''\n    Write a function to normalize the given two values.\n    '''\n    return (x-y)/(math.sqrt(x**2+y**2))\ndef weighted_average(x,y,z):\n    '''\n    Write a function to calculate the weighted average of two given values.\n    '''\n    return (x*y+z*x)//(x+y+z)\ndef root_of_square(x):\n    '''\n    Write a function to calculate the root of a given value.\n    '''\n    return math.sqrt(x)\ndef is_prime(x):\n    '''\n    Write a function to check if the given value is prime.\n    '''\n    if x==1:\n        return False\n    if x==2:\n        return True\n    if x%2==0:\n        return False\n    if x==3:\n        return True\n    for i in range(3,int(math.sqrt(x))+1,2):\n        if x%i==0:\n            return False\n    return True\ndef is_prime_number(x):\n    '''\n    Write a function to check if a given value is prime.\n    '''\n    if x==1:\n        return False\n    if x==2:\n        return True\n    if x%2==0:\n        return False\n    if x==3:\n        return True\n    for i in range(3,int(math.sqrt(x))+1,2):\n        if x%i==0:\n            return False\n    return True\ndef is_negative(x):\n    '''\n    Write a function to check if a given value is negative.\n    '''\n    if x==-1:\n        return True\n    if x==-2:\n        return False\n    if x==-3:\n        return True\n    for i in range(3,int(math.sqrt(x))+1,2):\n        if x%i==0:\n            return False\n    return True\ndef is_positive(x):\n    '''\n    Write a function to check if a given value is positive.\n    '''\n    if x==1:\n        return False\n    if x==2:\n        return True\n    if x==3:\n        return False\n    for i in range(3,int(math.sqrt(x))+1,2):\n        if x%i==0:\n            return False\n    return True\ndef is_prime_number(x):\n    '''\n    Write a function to check if a given value is a prime number.\n    '''\n    if x==1:\n        return False\n    if x==2:\n        return True\n    if x==3:\n        return False\n    for i in range(3,int(math.sqrt(x))+1,2):\n        if x%i==0:\n            return False\n    return True\ndef absolute(x):\n    '''\n    Write a function to calculate the absolute value of a given value.\n    '''\n    if x>0:\n        return x\n    else:\n        return -x\ndef normalize_range(a,b):\n    '''\n    Write a function to calculate the normalized range of a given value.\n    '''\n    if a==b:\n        return abs(a)\n    elif a<=b:\n        return a\n    else:\n        return b\ndef get_nth_prime(nth):\n    '''\n    Write a function to get the nth prime number.\n    '''\n    if nth==1 or nth==2:\n        return 2\n    else:\n        for i in range(3,nth,2):\n            if nth%i==0:\n                return i\ndef is_prime_number_up_to_n(nth):\n    '''\n    Write a function to check if a given value is a prime number.\n    '''\n    if nth==1:\n        return False\n    if nth==2:\n        return True\n    if nth==3:\n        return False\n    for i in range(4,nth,2):\n        if nth%i==0:\n            return False\n    return True\ndef is_prime_number_up_to_m(nth):\n    '''\n    Write a function to check if a given value is a prime number.\n    '''\n    if nth==1:\n        return False\n    if nth==2:\n        return True\n    if nth==3:\n        return False\n    for i in range(4,nth,2):\n        if nth%i==0:\n            return False\n    return True\ndef is_prime_number_up_to_n_up_to_m(nth):\n    '''\n    Write a function to check if a given value is a prime number.\n    '''\n    if nth==1:\n        return False\n    if nth==2:\n        return True\n    if nth==3:\n        return False\n    for i in range(4,nth,2):\n        if nth%i==0:\n            return False\n    return True\ndef is_prime_number_up_to_n_up_to_m_up_to_n(nth):\n    '''\n    Write a function to check if a given value is a prime number.\n    '''\n    if nth==1:\n        return False\n    if nth==2:\n        return True\n    if nth==3:\n        return False\n    for i in range(4,nth,2):\n        if nth%i==0:\n            return False\n    return True\ndef is_prime_number_up_to_n_up_to_m_up_to_n_up_to_m(nth):\n    '''\n    Write a function to check if a given value is a prime number.\n    ''"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree *(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree*math.pi/180\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * (math.pi/180)\n    return degree\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #pattern = re.compile(pattern)\n    #print(pattern)\n    pattern = re.compile(pattern, re.MULTILINE)\n    match = pattern.search(text)\n    #print(match)\n    #print(match.start())\n    #print(match.end())\n    if match:\n        #print(match.start())\n        #print(match.end())\n        start = match.start()\n        #print(start)\n        end = match.end()\n        #print(end)\n        return match, start, end\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_obj = re.compile(pattern)\n    pattern = regex_obj.search(text)\n    if pattern is not None:\n        start = pattern.start()\n        end = pattern.end()\n        match_string = text[start:end]\n        return match_string\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # define the search string\n    search_string = pattern.pattern\n    # define the search string\n    search_string_end = search_string[::-1]\n    # find all the occurrences of search string\n    indexes = re.findall(search_string, text)\n    # get the start index, the end index\n    start_index = None\n    end_index = None\n    for index in indexes:\n        if search_string_end == index:\n            start_index = index\n            end_index = index\n    # return the matching substring, the start index, and the end index\n    return start_index, end_index, text[start_index:end_index]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = text.split()\n    for i in range(len(text)):\n        if re.search(pattern, text[i]):\n            start_index = i\n            break\n    else:\n        start_index = 0\n    for j in range(len(text)):\n        if re.search(pattern, text[j]):\n            end_index = j\n            break\n    else:\n        end_index = len(text)\n    return start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Make a regular expression\n    reg = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substrings = re.findall(pattern, text)\n    if substrings:\n        return substrings\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    start_index = 0\n    end_index = -1\n    for match in regex.finditer(text):\n        start_index = match.start()\n        end_index = match.end()\n        yield start_index, end_index\n    if end_index == -1:\n        yield -1, 0\n    return\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.finditer(pattern, text)\n    if len(match) == 0:\n        return (\"None\", -1, -1)\n    start = match[0].start()\n    end = match[0].end()\n    return (\"\".join([text[i:i+len(pattern)] for i in range(start, end)]), start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    start = 0\n    end = -1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    print(\"Let's find the nth number of the bell sequence:\")\n    return(1 + (n-1) // 2)\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Write your code here\n    if n > 0:\n        return bell_Number(n - 1) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return bell_Number(n - 1) + bell_Number(n - 2)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n1 = 1\n    for i in range(n):\n        n1 = n1 * (n-i)\n    return n1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(n): \n        if n % i == 0: \n            return n \n    return 0\n "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 2:\n        return n\n    else:\n        return (n+3) % 1 + (n-2) % 1 + (n-3) % 1 + (n-4) % 1\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n=int(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 4\n    else:\n        return 4*n+3\n    #write your code here\n    "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell_number():\n        '''\n        This function returns the number of \n        bells of fibonacci sequence. \n        '''\n        i = 0\n        x = 1\n        while (i < n):\n            if(x >= 1):\n                print(x, end=\" \")\n                x = x * 2\n                i = i + 1\n            else:\n                print(\"\\n\", end=\" \")\n                x = x * 3 + 1\n                i = i + 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [1,2,3,5,8,13,21]\n    i = n\n    while(i > 1):\n        bell_numbers[i] = bell_numbers[i-1] + bell_numbers[i-2]\n        i = i - 1\n    return bell_numbers[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    if L[-1] == L[-2]:\n        return remove_kth_element(list1, L[:-2])\n    else:\n        return remove_kth_element(list1, L[:-2]) + [L[-1]]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(filter(lambda element: element!= L, list1))\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1)\n    if k <= 0:\n        raise ValueError(\"k cannot be negative number\")\n    index = L.index(k)\n    L.remove(k)\n    return L\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L.pop(0)\n    list2 = list(list1)\n    list2.remove(k)\n    list1.clear()\n    return list2\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        return list1\n    else:\n        return list1[:L]\n        \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. GOOD LUCK NEXT TIME! ***\\n\")\n    else:\n        print('\\nOne or more tests fail!\\n')"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    return list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if not list1:\n        raise TypeError('argument must be a list')\n    i = len(list1) - 1\n    if L <= i:\n        raise ValueError('list index should be >= 0')\n    return list1[:i] + list1[i + 1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    new_list.remove(i)\n    return new_list\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return test_list[-1][-1]\n    else:\n        return max(test_list[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_nth = 0\n    for nth in test_list:\n        if nth!= []:\n            if max_nth < nth[0]:\n                max_nth = nth[0]\n    return max_nth\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_col_N = 0\n    for row in test_list:\n        for i in range(len(row)):\n            if i == 0:\n                max_of_col_N = max(row[i],max_of_col_N)\n            else:\n                max_of_col_N = max(row[i],max_of_col_N)\n    return max_of_col_N"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    m = len(test_list)\n    # find the maximum in the list\n    mx = test_list[0][N - 1]\n    for i in range(m):\n        if test_list[i][N - 1] > mx:\n            mx = test_list[i][N - 1]\n    return mx"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    if n < 1:\n        raise ValueError('Invalid input, please enter a valid input matrix')\n    \n    for i in range(0, n-1):\n        if test_list[i][n-1] > test_list[i][n-2]:\n            test_list[i][n-1], test_list[i][n-2] = test_list[i][n-2], test_list[i][n-1]\n    \n    return test_list[-1][n-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # your code here\n    lst = []\n    n = len(test_list)\n    for i in range(n):\n        lst.append(test_list[i][N-1])\n    \n    return lst[0]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    return max(test_list, key = lambda x:x[N-1])"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda x: x[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].reverse()\n        test_list[i].sort()\n        test_list[i].pop()\n    return test_list[N-1][0]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n        new_lst.append(i[1])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # create two empty lists\n    lst1 = []\n    lst2 = []\n    \n    # iterate over each sublist\n    for item in lst:\n        # if there is a second element in the current sublist\n        if len(item) > 1:\n            # insert first element of current sublist into empty list\n            lst1.append(item[0])\n            # insert second element of current sublist into empty list\n            lst2.append(item[1])\n            \n    # return the two lists\n    return lst1, lst2\n    \ndef is_even(num):\n    '''\n    A function which takes a number and returns True if it is even and False if it is odd.\n    '''\n    # if number is even\n    if num % 2 == 0:\n        return True\n    # if number is odd\n    return False\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [sorted(x) for x in zip(*lst)]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        lst_first = lst[0]\n        lst_second = lst[1]\n        new_lst = []\n        new_lst.extend(lst_first)\n        new_lst.extend(lst_second)\n        return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final_lst = []\n    for i in lst:\n        final_lst.append([i[0][0], i[1][0]])\n    return final_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    '''\n    lst = [[1,2],[3,4],[5,6],[7,8]]\n    '''\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # O(n^2) time complexity and O(n) space complexity\n    return merge_two_lists(lst)\n    \ndef merge_two_lists(lst1, lst2):\n    '''\n    Append each sublist of the two lists to the end of the list, while maintaining order.\n    '''\n    i, j, pos = 0, 0, 0\n    # O(n) time complexity and O(1) space complexity\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            lst[pos] = lst1[i]\n            i += 1\n        else:\n            lst[pos] = lst2[j]\n            j += 1\n        pos += 1\n    while i < len(lst1):\n        lst[pos] = lst1[i]\n        i += 1\n        pos += 1\n    while j < len(lst2):\n        lst[pos] = lst2[j]\n        j += 1\n        pos += 1\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = []\n    for i in range(0, len(lst), 2):\n        lst.append(lst[i:i+2])\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Your code goes here\n    lst_1 = []\n    lst_2 = []\n    for sub_list in lst:\n        lst_1.append(sub_list[0])\n        lst_2.append(sub_list[1])\n    return lst_1, lst_2\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    # 1. Create a temporary list of the length of the first element\n    temp_lst = []\n    # 2. Create a temp_list by adding the first element of the last element of each sublist\n    temp_lst.append(lst[-1][0])\n    # 3. Create a counter by incrementing it by 1\n    counter = 1\n    # 4. Start counting from 2, until the list is empty\n    while counter <= len(lst):\n        # 5. Create a temporary list of the first element\n        temp_lst = []\n        # 6. Add the first element of each sublist into the temporary list\n        temp_lst.append(lst[counter][0])\n        # 7. Add the second element of each sublist into the temporary list\n        temp_lst.append(lst[counter][1])\n        # 8. Store the new element into the temporary list\n        temp_lst.append(lst[counter][2])\n        # 9. Increment the counter\n        counter += 1\n        # 10. Append the temporary list to the result\n        result.append(temp_lst)\n    # 11. Return the result\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum += item\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    else:\n        cumulative_sum = test_list[0]\n        for i in test_list[1:]:\n            cumulative_sum = cumulative_sum + i\n        return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    cum_sum = 0\n    for index in test_list:\n        cum_sum += index\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for val in test_list:\n        cummulative_sum += val\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum += item\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_of_values = 0\n    for value in test_list:\n        sum_of_values += value\n    return sum_of_values\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(0, len(test_list)):\n        sum += test_list[i]\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum([int(val) for val in list(map(lambda val: val if isinstance(val, int) else 0, test_list))])\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for el in test_list:\n        cum_sum += el\n    return cum_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    numbers_list = []\n    for item in nums:\n        numbers_list.append(item[0])\n    \n    return (sum(numbers_list)/len(numbers_list))\n    \n    \ndef sum_squares(nums):\n    '''\n    Calculate the sum of the squares of the numbers in a tuple.\n    '''\n    \n    sum_squares = 0\n    for item in nums:\n        sum_squares += (item**2)\n    \n    return sum_squares\n    \n    \ndef print_sorted_tuples(nums):\n    '''\n    Print the elements in nums in sorted order.\n    '''\n    \n    return sorted(nums)\n    \n    \ndef is_odd(n):\n    '''\n    Return True if the number is odd.\n    '''\n    \n    return (n % 2) == 1\n    \n    \ndef create_test_cases():\n    '''\n    Create a tuple of test cases.\n    '''\n    \n    test_cases = [\n        (0, 0),\n        (2, 3),\n        (3, 4),\n        (2, 2),\n        (2, -1),\n        (5, 7),\n        (1, -3),\n        (3, 4),\n        (4, -3),\n        (-4, -2),\n        (3, 8),\n        (1, 7),\n        (4, -1),\n        (-4, 1),\n        (8, 2),\n        (1, -3),\n        (-8, -1),\n        (-8, -3),\n        (7, -4),\n        (3, -4),\n        (2, -5),\n        (-4, -6)\n    ]\n    \n    return test_cases\n    \n    \ndef test_create_test_cases():\n    '''\n    Test function for create_test_cases()\n    '''\n    \n    for item in create_test_cases():\n        print(f'Test Case: {item}')\n        if is_odd(item[0]) == True:\n            print(f'\\tTest Case Result: {item[0]} is odd')\n        else:\n            print(f'\\tTest Case Result: {item[0]} is even')\n    \n    \ndef main():\n    '''\n    Main function for program\n    '''\n    \n    print('Test Cases')\n    test_create_test_cases()\n    \n    print('\\tAverage:', average_tuple([(0,0), (2,3), (3,4), (2,2), (2, -1), (5, 7), (1, -3), (3, 4), (4, -3), (-4, -2), (3, 8), (1, 7), (4, -1), (-4, 1), (8, 2), (1, -3), (-8, -1), (-8, -3), (7, -4), (3, -4), (2, -5), (-4, -6) ]))\n    print('\\tSum Squares:', sum_squares([(0,0), (2,3), (3,4), (2,2), (2, -1), (5, 7), (1, -3), (3, 4), (4, -3), (-4, -2), (3, 8), (1, 7), (4, -1), (-4, 1), (8, 2), (1, -3), (-8, -1), (-8, -3), (7, -4), (3, -4), (2, -5), (-4, -6) ]))\n    print('\\tPrint the sorted tuple:', print_sorted_tuples([(0,0), (2,3), (3,4), (2,2), (2, -1), (5, 7), (1, -3), (3, 4), (4, -3), (-4, -2), (3, 8), (1, 7), (4, -1), (-4, 1), (8, 2), (1, -3), (-8, -1), (-8, -3), (7, -4), (3, -4), (2, -5), (-4, -6) ]))\n    print('\\tIs odd:', is_odd(2))\n    print('\\tCreate a tuple of 10 numbers:')\n    print('\\t\\t', create_test_cases())\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in range(len(nums)):\n        avg.append(sum(nums[i])/len(nums[i]))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    length = len(nums)\n    average = []\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Your code here\n    return list()\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #create an empty list for averages\n    avg_list = []\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(n) / len(n) for n in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_list = [tuple for tuple in nums]\n    return [nums_list[i][1]/nums_list[i][0] for i in range(len(nums_list))]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Complete this function\n    t = []\n    for tuple in nums:\n        for i in tuple:\n            t.append(i)\n    return t"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Write the function\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) < 1:\n        return None\n    else:\n        total = []\n        for i in range(len(nums)):\n            total.append(nums[i][0] + nums[i][1])\n        return [round(total[i] / 2) for i in range(len(total))]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(\"\\n\\nElemWise modulo\")\n    modulo = []\n    #Create a tuple with the tuple values as tuple1, tuple2\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    \n    #Check if tuple1 is shorter\n    if len(tuple1) < len(tuple2):\n        print(\"\\nTuple 1 is shorter than tuple 2\")\n        tuple1 = tuple2\n    else:\n        pass\n        \n    #Iterate through the tuple and add the tuple elements\n    for el in tuple1:\n        modulo.append(el)\n    \n    #Check if tuple2 is shorter\n    if len(tuple2) < len(modulo):\n        print(\"\\nTuple 2 is shorter than tuple 1\")\n        tuple2 = modulo\n    else:\n        pass\n        \n    #Return tuple\n    return tuple(modulo)\n    "
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # write your code here\n    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tuple_mod = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            tuple_mod.append(test_tup1[i])\n        else:\n            tuple_mod.append(test_tup2[i])\n    return tuple_mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tup1 = tuple(tuple(t) for t in test_tup1)\n    mod_tup2 = tuple(tuple(t) for t in test_tup2)\n    \n    return mod_tup1, mod_tup2\n    "
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] % test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    return_val = []\n    \n    #Loop to cycle through the tuple\n    for i in range(len(test_tup1)):\n        #If the tuple element is in the tuple\n        if test_tup1[i] in test_tup2:\n            #Add element to return_val\n            return_val.append(test_tup1[i] % test_tup2[i])\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Write your code here\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        mod_tup = [None] * len(test_tup1)\n        for i in range(0, len(mod_tup)):\n            mod_tup[i] = test_tup1[i] % test_tup2[i]\n        return mod_tup\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    p_1 = d-1\n    p_2 = 0\n    p_3 = 0\n    p_4 = 0\n    c = 0\n    for _ in range(steps):\n        if (p_1 < 0) and (p_2 < 0):\n            break\n        if (p_1 < 0) and (p_3 < 0):\n            p_3 = p_2\n        if (p_1 < 0) and (p_2 < 0) and (p_3 < 0):\n            break\n        if (p_1 < 0) and (p_3 < 0):\n            p_2 = p_3\n        if (p_1 < 0) and (p_2 < 0) and (p_3 < 0):\n            p_4 = p_2\n            c += 1\n    return c \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Returns true if the jump of the given length is possible\n    def is_possible_jump(i, j, d):\n        return (i+j == d or (i+j == (d*d) - 1 or (i-d == j-1)))\n    # Return minimum number of jumps\n    def min_jumps(steps, d):\n        return steps[steps.index((d, 0))]\n    # Check if the given coordinates are reachable from origin\n    def check_reachable(coords):\n        if coords[0] < 0 or coords[1] < 0 or coords[0] >= n or coords[1] >= m:\n            return False\n        return True\n    # Return the number of jumps required\n    def check_jumps(steps):\n        count = 0\n        # Go through all the steps\n        for step in steps:\n            # Jump is possible if the coordinates are reachable from the origin\n            if check_reachable(step):\n                # Check the number of jumps to the destination\n                if is_possible_jump(step[0], step[1], d):\n                    count += 1\n        return count\n    # Check if the number of jumps is equal to the required length\n    if len(steps) > d * d:\n        return -1\n    # Check all the steps\n    for step in steps:\n        # Check if the coordinates are reachable from the origin\n        if check_reachable(step):\n            # Check the number of jumps to the destination\n            if is_possible_jump(step[0], step[1], d):\n                return min_jumps(steps, d) + 1\n    return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return steps+sum(steps[:d])\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    for i in range(steps):\n        jumps = 0\n        x, y = d\n        if (x >= 0) and (x < len(steps)):\n            if y >= 0 and y < len(steps):\n                if steps[y][x] == 1:\n                    jumps = jumps + 1\n                    x += 1\n                    y += 1\n            if y >= 0:\n                if steps[y][x] == 2:\n                    jumps = jumps + 1\n                    x += 1\n            if y >= 0 and x >= 0:\n                if steps[y][x] == 2:\n                    jumps = jumps + 1\n                    x += 1\n        d = (x, y)\n        if jumps < 0:\n            print('Jumping too little')\n            return 'Jumping too little'\n        elif jumps > 0:\n            print('Jumping too big')\n            return 'Jumping too big'\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def check_Jumps(steps, d):\n        \n        # Set the first jump\n        jumps = 0\n        for i in range(steps):\n            jump = steps - (i + 1)\n            if jump < 0:\n                jump = jump + d\n            if jump < 0 or jump > steps:\n                jumps = jumps + 1\n            \n        return jumps\n    \n    def BFS(d, steps):\n        '''\n        Run BFS algorithm for length d and count the number of jumps to reach that point. \n        '''\n        if d == 0:\n            return 1\n        \n        count = 0\n        # Start at the starting point and record the jumps\n        start = steps\n        queue = [start]\n        \n        # Keep looping until there is a solution \n        while len(queue)!= 0:\n            # Dequeue the first element in the queue\n            v = queue.pop(0)\n            # Get the list of neighbors \n            neighbors = get_neighbors(v, d)\n            for neighbor in neighbors:\n                # If the neighbor is not already in the queue then add it to queue\n                if neighbor not in queue:\n                    # Check if neighbor is smaller than current neighbor and is a jump to the target point\n                    if neighbor[0] < neighbor[1] and check_Jumps(neighbor[0], neighbor[1]) < jump:\n                        queue.append(neighbor)\n                        count = count + 1\n            \n        # Return the number of jumps\n        return count\n    \n    # Input the size of the plane\n    steps = int(input(\"Enter the length of the plane: \"))\n    \n    # Compute the number of jumps\n    jumps = BFS(steps, steps)\n    \n    print(\"There are \" + str(jumps) + \" jumps to reach the point of form (0, 0) in a 2d plane.\""
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return -1 if steps == 1 else min(steps, abs(d[0] - 0.5)) + min(steps, abs(d[1] - 0.5))"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps+d) % 2 == 0: \n        return d\n    else: \n        return d + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Your code goes here\n    jumps = 0\n    for i in range(1,d):\n        for j in range(0,i):\n            if(steps[i][j]!=0):\n                jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def Jumps(steps, d, orig, curr_pos, curr_dir):\n        '''\n        if curr_pos == curr_dir:\n            return 1\n        else:\n            if steps == 0:\n                return 0\n            else:\n                return steps - 1 - Jumps(steps, d, orig, curr_pos, curr_dir)\n        '''\n        if curr_pos == curr_dir:\n            return 1\n        if steps == 0:\n            return 0\n        else:\n            return steps - 1 - Jumps(steps, d, orig, curr_pos, curr_dir)\n        \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    print(steps)\n    print(d)\n    if (d[0] == 0 and d[1] == 0): \n        return steps\n    elif (d[0] == 0 and d[1] == 1):\n        return 0\n    elif (d[0] == 0 and d[1] == -1):\n        return steps\n    elif (d[0] == 1 and d[1] == 0):\n        return steps\n    elif (d[0] == 1 and d[1] == 1):\n        return 0\n    elif (d[0] == -1 and d[1] == 0):\n        return steps\n    elif (d[0] == -1 and d[1] == 1):\n        return 0\n    elif (d[0] == -1 and d[1] == -1):\n        return steps\n    else:\n        return steps\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)>0 and len(nums2)>0:\n        d=nums1+nums2\n        return d\n    else:\n        return []\ndef main():\n    l1=[1,3,5,7,9]\n    l2=[2,4,6,8]\n    print(div_list(l1,l2))\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num/n for num,n in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #print(nums1)\n    #print(nums2)\n    if len(nums1)!=len(nums2):\n        return(0)\n    \n    for i in range(0,len(nums1)):\n        if nums1[i]!=nums2[i]:\n            break\n        \n    return nums1[i:i+len(nums2)]\n    \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Approach 1 - (check)\n    #\n    #def check(l1,l2):\n    #    for i in range(len(l1)):\n    #        if l1[i]!=l2[i]:\n    #            return False\n    #    return True\n    #\n    #\n    #if check(nums1,nums2):\n    #    return [nums1,nums2]\n    #\n    #\n    #Approach 2 - (check iterative)\n    #\n    #    n=len(nums1)\n    #    for i in range(n):\n    #        if nums1[i]!=nums2[i]:\n    #            return [nums1[i],nums2[i]]\n    #    return [nums1[i],nums2[i]]\n    #\n    #\n    #\n    #Approach 3 - (with stack)\n    \n    n=len(nums1)\n    stack=[]\n    \n    for i in range(n):\n        if nums1[i]!=nums2[i]:\n            stack.append(nums1[i])\n            nums1[i]=nums2[i]\n    \n    while len(stack)!=0:\n        a=stack.pop()\n        nums1[a]=-1\n        nums2[a]=-1\n    return [nums1,nums2]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # return a new list of elements of length 1\n    # i.e. [1,2,3,4] => [1,2,3]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n    # i.e. [1,1,1,1,1,1,1,1] => [1,1,1,1]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    d1=[]\n    d2=[]\n    for num in nums1:\n        d1.append(num)\n    for num in nums2:\n        d2.append(num)\n    n1=len(d1)\n    n2=len(d2)\n    i=0\n    if n1==1:\n        if n2==1:\n            return 1\n        else:\n            return 0\n    else:\n        if n2==1:\n            return 0\n        else:\n            while i<n1:\n                if d1[i]==n2[0]:\n                    d1[i]=n2[1]\n                    n1-=1\n                else:\n                    break\n                i+=1\n            if n1==1:\n                return 0\n            else:\n                return 1\n    \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1>n2:\n        k = n1\n        n1 = n2\n        n2 = k\n    l = []\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(n1):\n        l1.append(nums1[i])\n    for i in range(n2):\n        l2.append(nums2[i])\n    for i in range(n1):\n        if l1[i] > l2[i]:\n            l.append(l1[i])\n        else:\n            l.append(l2[i])\n    if l == []:\n        return l\n    else:\n        return l[0]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] % 2 == 0 and nums2[i] % 2 == 0:\n            result.append(nums1[i])\n            result.append(nums2[i])\n        elif nums1[i] % 2 == 0 and nums2[i] % 2!= 0:\n            result.append(nums1[i])\n            result.append(nums2[i])\n        elif nums1[i] % 2!= 0 and nums2[i] % 2 == 0:\n            result.append(nums1[i])\n            result.append(nums2[i])\n        elif nums1[i] % 2!= 0 and nums2[i] % 2!= 0:\n            result.append(nums1[i])\n            result.append(nums2[i])\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Divide list elements by 2\n    def list_div(nums1,nums2):\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] > nums2[j]:\n                    nums1[i] = nums1[i]/2\n                elif nums1[i] == nums2[j]:\n                    nums1[i] = nums1[i]\n    #Divide nums1 by nums2\n    def num_div(nums1,nums2):\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] > nums2[j]:\n                    nums1[i] = nums1[i]/2\n                elif nums1[i] == nums2[j]:\n                    nums1[i] = nums1[i]\n    #Divide both lists\n    def list_and_num(nums1,nums2):\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                nums1[i] = nums1[i]/2\n        return nums1\n    #Combine lists into a single list\n    def list_comb(nums1,nums2):\n        combined = []\n        for i in range(len(nums1)):\n            combined.append(nums1[i]+nums2[i])\n        return combined\n    #Check if any of the numbers are equal\n    def is_equal(nums1,nums2):\n        for i in range(len(nums1)):\n            if nums1[i]!= nums2[i]:\n                return False\n        return True\n    #Check if all elements in the list are equal\n    def is_all_equal(nums1,nums2):\n        for i in range(len(nums1)):\n            if not is_equal(nums1[i],nums2[i]):\n                return False\n        return True\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #print(nums1,nums2)\n    if len(nums1) < len(nums2):\n        for i in range(len(nums2)):\n            temp = nums1[i]\n            nums1[i] = nums2[i]\n            nums2[i] = temp\n        #print(nums1,nums2)\n        return nums1,nums2\n    elif len(nums2) < len(nums1):\n        for i in range(len(nums1)):\n            temp = nums2[i]\n            nums2[i] = nums1[i]\n            nums1[i] = temp\n        #print(nums1,nums2)\n        return nums2,nums1\n    else:\n        pass\ndef compare(nums1,nums2):\n    '''\n    Write a function to compare two arrays element wise.\n    '''\n    for i in range(len(nums1)):\n        if nums1[i] < nums2[i]:\n            return 1\n        elif nums1[i] > nums2[i]:\n            return -1\n        else:\n            pass\n    return 0\ndef selection_sort(nums):\n    '''\n    Write a function to sort a given array in ascending order.\n    '''\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i+1, len(nums)):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        temp = nums[i]\n        nums[i] = nums[min_index]\n        nums[min_index] = temp\n    return nums"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = test_str.split()\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\".\", \"\")\n    test_str = test_str.replace(\",\",\"\")\n    test_str = test_str.replace(\"-\",\"\")\n    if \"-\" not in test_str:\n        test_str = test_str + \".\"\n    test_str = test_str.replace(\" \", \"\")\n    test_str = test_str.replace(\"e\", \"\")\n    test_str = test_str.replace(\".\", \"\")\n    test_str = test_str.replace(\",\",\"\")\n    test_str = test_str.replace(\" \", \"\")\n    print(test_str)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split(\",\")\n    test_str = test_str[1:]\n    test_str = [str(i) for i in test_str]\n    test_str = \",\".join(test_str)\n    return test_str\n    \ndef get_size(test_str):\n    '''\n    Write a function to get the size of a given string.\n    '''\n    return len(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result_str = test_str\n    for i in range(len(test_str)-1, -1, -1):\n        if test_str[i].isnumeric():\n            result_str = result_str[:i] + test_str[i] + result_str[i:]\n    return result_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #create a new list with a copy of the original list\n    copy_list = list(test_str)\n    #iterate through each number\n    for i in range(len(copy_list)):\n        #if it's not a number, copy the number and update its index\n        if not (copy_list[i].isdigit()):\n            copy_list[i] = test_str[i]\n            #move the numbers\n            copy_list.insert(len(copy_list),test_str[i])\n            #remove the index from the list\n            copy_list.pop(len(copy_list)-1)\n            #set the index to the end of the list\n            copy_list.append(test_str[i])\n            #clear out the index, move the list to a new string\n            test_str = \"\".join(copy_list)\n    #return the list with the numbers removed\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for el in test_str:\n        if el.isdigit():\n            new_str += el\n        else:\n            new_str += \" \"\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for letter in test_str:\n        if letter == '+':\n            new_str +=''\n        else:\n            new_str += letter\n    return new_str.strip()\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    test_str = test_str.replace(' ','')\n    for i in range(len(test_str)):\n        if test_str[i]!= '-':\n            new_str = new_str + test_str[i]\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = str(test_str)\n    test_str_list = list(test_str)\n    test_str_list.reverse()\n    test_str_list = ''.join(test_str_list)\n    test_str_list = test_str_list.replace(\" \", \"\")\n    test_str_list = test_str_list.split(\",\")\n    return test_str_list\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = list(test_str)\n    for num in numbers:\n        numbers.append(int(num))\n    numbers.sort(reverse = True)\n    return ''.join(numbers)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def nsubsets(lst):\n        if len(lst) <= 1:\n            return [1]\n        lst = list(set(lst))\n        return [[1] + nsubsets(lst[:i] + lst[i+1:]) for i in range(len(lst)-1)]\n    return nsubsets(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # TODO: Write the function that will be used by the problem statement.\n    max_sub = a[0]\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[j] % a[i] == 0:\n                if len(a[:j]) > len(a[j:]):\n                    max_sub = a[:j]\n                    break\n    return max_sub\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    maxi = 0\n    temp = 0\n    s = set(a)\n    for i in s:\n        if temp > maxi:\n            maxi = temp\n        temp+=i\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_sub_set = 0\n    maximum = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            sub_set = a[i:j+1]\n            if len(sub_set) > max_sub_set:\n                max_sub_set = len(sub_set)\n                maximum = sub_set\n    return maximum\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize the largest subset as the first and the first largest as 0\n    # We'll use a for loop for every pair of numbers, this one will be the largest subset\n    # Since a will be divisable by each other, we will have to iterate through each pair and the largest subset\n    # that is divisable by all the other pairs\n    # If a is less than the largest subset, then the value for that pair is that number\n    # We'll iterate through each pair and check the second number is divisable by the first number\n    # If it is not divisable by the first number, then it is a valid pair and we will have that pair\n    # and we'll continue iterating through the numbers in the largest subset\n    # If it is a valid pair, we will keep adding the first number to the largest subset\n    # Otherwise, we will have that pair and we'll continue iterating through the numbers\n    # We will check if it is divisable by every other number, that's because it's a valid pair\n    # If it is, we will increment the largest subset, so the value for that pair is that number\n    # If it isn't, we will just add it to the largest subset and we'll skip the first number\n    # If the first number is divisable by every other number, we will skip it, so we can just add it to the first number\n    # If all the other numbers are divisable by every other number, we have that value and we can just add it\n    # If we get there, we'll have that pair, so we'll just return it\n    # If not, we have a bigger subset, so we'll have that pair\n    \n    # For each pair of numbers, we'll iterate through each number\n    # If it is divisable by all other numbers, that's valid, then we'll have that pair\n    # Else if it is not divisable by all other numbers, we'll have that pair and we'll continue iterating through the numbers\n    # If it is not divisable by all other numbers, we'll have that pair and we'll skip it\n    # If the first number is divisable by every other number, we'll skip it\n    # Else if it is not divisable by every other number, we'll have that pair, so we'll just add it to the first number\n    # We'll continue iterating through the numbers, but in this case we'll have that pair\n    # If we get there, we'll have that pair, so we'll just return it\n    # If not, we'll have that pair, so we'll just add it to the first number\n    # If we get to the end of the list, we'll have that pair\n    # If we get there, we'll have that pair, so we'll just return it\n    \n    # For each number, we'll iterate through each number\n    # If it's divisable by all other numbers, that's valid, then we'll have that pair\n    # Else if it's not divisable by all other numbers, we'll have that pair and we'll continue iterating through the numbers\n    # If it's not divisable by all other numbers, we'll have that pair and we'll skip it\n    # If the first number is divisable by every other number, we'll skip it\n    # Else if it's not divisable by every other number, we'll have that pair and we'll just add it to the first number\n    # We'll continue iterating through the numbers, but in this case we'll have that pair\n    # If we get there, we'll have that pair, so we'll just return it\n    # If we get to the end of the list, we'll have that pair\n    # If we get there, we'll have that pair, so we'll just return it\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just return it\n    \n    # Now we'll start to iterate through all numbers\n    # And after every number, we'll iterate through all the pairs\n    # If it's divisable by all other numbers, that's valid, then we'll have that pair\n    # Else if it's not divisable by all other numbers, we'll have that pair and we'll continue iterating through the numbers\n    # If it's not divisable by all other numbers, we'll have that pair and we'll skip it\n    # If the first number is divisable by every other number, we'll skip it\n    # Else if it's not divisable by every other number, we'll have that pair, so we'll just add it to the first number\n    # We'll continue iterating through the numbers, but in this case we'll have that pair\n    # If we get there, we'll have that pair, so we'll just return it\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just return it\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first number\n    # If we get there, we'll have that pair, so we'll just add it to the first numbe"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # A modified version of this solution that takes O(n^2) time for all the numbers,\n    # which is fairly trivial.\n    # Hint: https://github.com/lubyhj/python-2-trees-climber\n    return max(find_max_subset([a[i] for i in range(len(a)) if i % 2 == a[i] % 2]))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]]+=1\n        else:\n            m[a[i]]=1\n    if len(m)==1:\n        return 1\n    i=0\n    count=1\n    while True:\n        if i>=len(m):\n            break\n        if m[i]%2==0:\n            count+=1\n            m[i]=0\n            i+=1\n        else:\n            count+=1\n            m[i]=1\n            i+=1\n    return count\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    nums = a\n    max_subset = 0\n    nums.sort()\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    m, n = len(a), len(a[0])\n    dp = [[1 if a[i][j] == a[i][k] else 0 for k in range(n)] for i in range(m)]\n    for i in range(m-1, -1, -1):\n        for j in range(n):\n            for k in range(j, n):\n                dp[i][j] = dp[i][j] or dp[i][k] and dp[i+1][j] and dp[i+1][k]\n    return sum(dp[0])\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return 1\n    else:\n        # find all the the elements of the array which are divisible by at least one element\n        divisibles = []\n        for i in range(len(a)):\n            if a[i] % a[i] == 0:\n                divisibles.append(a[i])\n        print(divisibles)\n        # if the list of divisible elements has more than one element, return the largest subset of all elements\n        if len(divisibles) > 1:\n            subset = largest_subset(divisibles)\n            if len(subset) > 0:\n                return max(subset)\n            else:\n                return 1\n        else:\n            return 1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    elif n % 2 == 0:\n        return (arr1[int((n-1)/2)] + arr1[int((n-1)/2)]) / 2\n    else:\n        return arr1[int((n-1)/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        return (float)((arr1[n//2] + arr2[n//2])/2)\n    else:\n        return (float)((arr1[n//2] + arr2[n//2]))/2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        return None\n    m = len(arr1)//2\n    return (arr1[m] + arr2[m])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) < 2:\n        return arr2[0]\n    elif len(arr2) < 2:\n        return arr1[0]\n    \n    arr1_index = 0\n    arr2_index = 0\n    \n    while arr1_index < len(arr1) and arr2_index < len(arr2):\n        if arr1[arr1_index] < arr2[arr2_index]:\n            arr1_index += 1\n        else:\n            arr2_index += 1\n    \n    if arr1_index >= len(arr1):\n        return arr2[0]\n    elif arr2_index >= len(arr2):\n        return arr1[len(arr1) // 2]\n    else:\n        return (arr1[len(arr1) // 2] + arr2[len(arr2) // 2]) / 2\n    \n    \ndef quick_sort(arr, l, r):\n    '''\n    Sort the arr in non-decreasing order using quicksort.\n    '''\n    if l < r:\n        q = partition(arr, l, r)\n        quick_sort(arr, l, q - 1)\n        quick_sort(arr, q + 1, r)\n    \n    return arr\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    def median(arr, low, high):\n        pivot = low + (high - low) // 2\n        if pivot == 0:\n            if len(arr) > 0:\n                return arr[len(arr) // 2]\n            return -1\n        if len(arr) == 1:\n            return arr[0]\n        if arr[pivot] > arr[low]:\n            return arr[pivot]\n        elif arr[pivot] < arr[high]:\n            return arr[pivot]\n        else:\n            if len(arr) % 2 == 1:\n                return arr[pivot]\n            else:\n                if arr[pivot] == arr[low]:\n                    arr[low], arr[pivot] = arr[pivot], arr[low]\n                    return median(arr, low, pivot - 1)\n                elif arr[pivot] == arr[high]:\n                    arr[pivot], arr[high] = arr[high], arr[pivot]\n                    return median(arr, pivot + 1, high)\n                else:\n                    return arr[pivot]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # e.g. array = [1, 2, 3, 4, 5, 6]\n    # median = [2, 3, 4]\n    # n = len(array)\n    # return [median[n//2], median]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    elif n == 1:\n        return arr1[0]\n    else:\n        # choose the minimum element, and then swap\n        arr1 = arr1[0:n//2] + arr1[n//2:n]\n        arr2 = arr2[0:n//2] + arr2[n//2:n]\n    \n    # find the median of each sublist\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2!= 0:\n        return arr1[n//2]\n    if len(arr1) < len(arr2):\n        return arr1[n//2]\n    if len(arr1) == len(arr2):\n        return (arr1[n//2] + arr2[n//2])/2\n    arr2.sort()\n    n = n//2\n    return (arr1[n//2] + arr2[n//2])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    a = len(arr1)\n    b = len(arr2)\n    if a == 0:\n        return\n    if b == 0:\n        return arr2[0]\n    if a > b:\n        for i in range(a):\n            if i + 1 < a:\n                arr1[i], arr1[i + 1] = arr1[i + 1], arr1[i]\n    else:\n        for i in range(b):\n            if i + 1 < b:\n                arr2[i], arr2[i + 1] = arr2[i + 1], arr2[i]\n    med = (a + b) // 2\n    if a == b:\n        return arr2[med]\n    if a > b:\n        return get_median(arr1[med + 1:], arr2[med:], n - med - 1)\n    else:\n        return get_median(arr1[med:], arr2[med + 1:], n - med - 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = len(arr1)//2\n    l1 = arr1[:mid]\n    l2 = arr2[:mid]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    num_powers = [1]\n    for i in range(len(nums)):\n        num_powers.append(num_powers[i]*nums[i])\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    elif len(nums) == 2:\n        return [nums[0]**nums[1]]\n    else:\n        nums = sorted(nums)\n        return [nums[-2]**nums[-1]] + nth_nums(nums[:-1],n)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #  loop over each number in the list\n    for i in range(0,len(nums)):\n        #  compute the value\n        if i == 0:\n            ans = nums[i]**n\n        else:\n            ans = nums[i]**n\n            #  add to answer\n            ans = ans + (ans**2)\n    #  return answer\n    return ans\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    if len(nums) == 2:\n        return [nums[0]**2,nums[1]**2]\n    return [nums[0]**(len(nums)-1),nth_nums(nums[1:],len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    def power(num, n):\n        '''\n        Calculate the power of the number in the list.\n        '''\n        if n == 0:\n            return 1\n        if n == 1:\n            return num\n        if n == 2:\n            return num * num\n        if n == 3:\n            return num * num * num\n        \n        return num * power(num, n - 1)\n    \n    if n >= len(nums):\n        return []\n    return power(nums[n - 1], n)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return nums\n    elif n == 2:\n        return [1,1]\n    elif n == 3:\n        return [1,2,3]\n    else:\n        return [nth_nums(nums,n-1),2*nth_nums(nums,n-2),3*nth_nums(nums,n-3)]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n < 0:\n        raise Exception('Negative numbers not accepted')\n    elif n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        numbers = nth_nums(nums,n-1)\n        result = [1]\n        for i in range(len(numbers)):\n            result.append(numbers[i]**n)\n        return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 1:\n        return nums\n    return [n * nth for nth in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums or n < 1:\n        return []\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [pow(nums[i],n) for i in range(len(nums))]\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string[0].isupper() == True:\n        return string.upper()\n    else:\n        return string.lower()\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return False\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not string:\n        return\n    for i in string:\n        if not i.isupper():\n            return False\n    return True\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    l = len(string)\n    return string.upper() == string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    lower_list = []\n    for char in string:\n        if char.isupper():\n            lower_list.append(char.upper())\n        else:\n            lower_list.append(char)\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = newList[::-1]\n    newList.insert(0,newList.pop())\n    newList.insert(0,newList.pop())\n    return newList\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    print(newList[0], 'is in the first position')\n    print(newList[-1], 'is in the last position')\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return None\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)):\n        temp = newList[i]\n        newList[i] = newList[len(newList)-1-i]\n        newList[len(newList)-1-i] = temp\n    return newList\n    \ndef merge_Two_Lists(list1, list2):\n    '''\n    Write a python function to merge two given lists.\n    '''\n    newList = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                newList.append(i)\n                break\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # first_index = 0\n    # last_index = len(newList) - 1\n    # while first_index <= last_index:\n    #     temp = newList[first_index]\n    #     newList[first_index] = newList[last_index]\n    #     newList[last_index] = temp\n    #     first_index += 1\n    #     last_index -= 1\n    # return newList\n    return newList[0], newList[-1]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    index_1 = 0\n    index_2 = 0\n    newList = []\n    for x in range(len(newList)):\n        if x % 2 == 0:\n            newList.insert(x, newList[index_1])\n            index_1 += 1\n        else:\n            newList.insert(x, newList[index_2])\n            index_2 += 1\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.sort()\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = []\n    for i in range(0,len(newList)-1):\n        temp = newList[i]\n        newList[i] = newList[len(newList)-1]\n        newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList.reverse()\n    print(newList)\n    \n    if newList[0] == newList[-1]:\n        newList.reverse()\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(newList)\n        return newList\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    newList = newList[::-1]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 3 * (r**2)\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)*(4/3)-2*r\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    sides = [0,1,2]\n    area = 0\n    i = 0\n    while i < len(sides) :\n        area = (r**2)*(sides[i]**2)\n        if area > r :\n            area = area - (r**2)\n            sides.pop(i)\n        else :\n            i = i + 1\n    return sides[0] + sides[1] + sides[2] - area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 0:\n        return 0\n    elif r == 1:\n        return 1\n    elif r == 2:\n        return 4\n    elif r == 3:\n        return 6\n    else:\n        a = triangle_area(r - 1)\n        b = triangle_area(r - 2)\n        c = triangle_area(r - 3)\n        return a + b + c\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        if r == 1 :\n            return 1\n        elif r == 2 :\n            return 1.3333333333333333\n        elif r == 3 :\n            return 2.8571428571428571\n        else :\n            return area(r - 1) + area(r - 2) + area(r - 3)\n    return area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r > 1:\n        return  r * r * (2 * r - 1)\n    else:\n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r == 0):\n        return 0\n    else:\n        return (r ** 2)*(2*math.pi)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r > 0 :  \n        return 3.14*r*r  \n    elif r < 0 :  \n        return -1  \n    else :  \n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    t = 3\n    area = 4*(r**2) - (4*t)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return round(3.14*r*r,3)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start == end:\n        return array[start]\n    p = start\n    q = end\n    while p<q:\n        if array[p] + array[q] == 0:\n            return array[p]\n        elif array[p] + array[q] < 0:\n            p += 1\n        elif array[p] + array[q] > 0:\n            q -= 1\n        else:\n            return array[p]\n    return array[q]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start<0 or start>=len(array) or end<0 or end>=len(array):\n        print('Invalid input')\n    elif array[start]==array[end]:\n        print(array[start])\n    else:\n        print(array[end])\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start==end:\n        return end\n    mid=start+int((end-start)/2)\n    if array[mid]!=mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return None\n    if start == end:\n        return end\n    m = array[start]\n    j = start\n    for i in range(start+1,end):\n        if array[i] > m:\n            m = array[i]\n            j = i\n    array[start],array[j] = array[j],array[start]\n    return find_First_Missing(array,start=start+1,end=j-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i] == -1:\n            return array[i]\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start > end:\n        return -1\n    mid = (start+end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end<start:\n        end=start\n    if start==end:\n        return array[start]\n    pivot = array[start]\n    i=start+1\n    j=end\n    while i<=j:\n        while i<=j and array[i] > pivot:\n            i+=1\n        while i<=j and array[j] > pivot:\n            j-=1\n        if i<j:\n            array[i],array[j]=array[j],array[i]\n        else:\n            break\n    array[i],array[j]=array[j],array[i]\n    return find_First_Missing(array,start=i+1,end=j)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    while start < end:\n        mid = int((start+end)/2)\n        if array[mid] < array[mid+1]:\n            return array[mid]\n        else:\n            if array[mid] == array[mid-1]:\n                return array[mid]\n            else:\n                if array[mid] < array[mid+1]:\n                    start = mid+1\n                else:\n                    end = mid\n    return array[mid]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # define a method\n    # input - string\n    # output - new string\n    # perform standard replacements\n    # example:\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is %20, I\\'m %20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is %20, I\\'m %20') = 'My name is \\\\20, I\\'m \\\\20'\n    # replace_spaces('My name is "
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n    \ndef remove_punctuation(string):\n    '''\n    Write a function to remove punctuation from the given string.\n    '''\n    return string.translate(str.maketrans('', '', string.punctuation))\n    \ndef remove_stopwords(string):\n    '''\n    Write a function to remove stopwords from the given string.\n    '''\n    return string.translate(str.maketrans('', '', string.punctuation))\n    \ndef lemmatize(string):\n    '''\n    Write a function to lemmatize the given string.\n    '''\n    return string.split(' ')[0]\n    \ndef extract_nouns(string):\n    '''\n    Write a function to extract all nouns from the given string.\n    '''\n    return string.split(' ')[0]\n    \ndef extract_verbs(string):\n    '''\n    Write a function to extract all verbs from the given string.\n    '''\n    return string.split(' ')[1]\n    \ndef get_noun_words(string):\n    '''\n    Write a function to extract nouns from the given string.\n    '''\n    return [word for word in string.split(' ') if word.lower() in nltk.word_tokenize(string)]\n    \ndef get_verb_words(string):\n    '''\n    Write a function to extract verbs from the given string.\n    '''\n    return [word for word in string.split(' ') if word.lower() in nltk.word_tokenize(string)]\n    \ndef get_noun_chunks(string):\n    '''\n    Write a function to extract all noun chunks from the given string.\n    '''\n    return string.split(' ')[0:-1]\n    \ndef get_verb_chunks(string):\n    '''\n    Write a function to extract all verbs chunks from the given string.\n    '''\n    return string.split(' ')[1:]\n    \ndef get_noun_chunks_with_verbs(string):\n    '''\n    Write a function to extract all noun chunks from the given string.\n    '''\n    return string.split(' ')[1:][0:-1]\n    \ndef get_verb_chunks_with_nouns(string):\n    '''\n    Write a function to extract all verbs chunks from the given string.\n    '''\n    return string.split(' ')[1:][1:]\n    \ndef get_verb_chunks_with_nouns_and_verbs(string):\n    '''\n    Write a function to extract all verbs chunks from the given string.\n    '''\n    return string.split(' ')[1:][0:-1] + string.split(' ')[1:][1:]\n    \ndef get_noun_chunks_with_verbs_and_nouns(string):\n    '''\n    Write a function to extract all noun chunks from the given string.\n    '''\n    return string.split(' ')[1:][0:-1] + string.split(' ')[1:][1:] + string.split(' ')[1:]\n    \ndef get_verb_chunks_with_nouns_and_verbs_and_nouns(string):\n    '''\n    Write a function to extract all verbs chunks from the given string.\n    '''\n    return string.split(' ')[1:][0:-1] + string.split(' ')[1:][1:] + string.split(' ')[0:-1] + string.split(' ')[1:]\n    \ndef get_noun_chunks_with_verbs_and_nouns_and_verbs_and_nouns(string):\n    '''\n    Write a function to extract all noun chunks from the given string.\n    '''\n    return string.split(' ')[1:][0:-1] + string.split(' ')[1:][1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:]\n    \ndef get_noun_chunks_with_verbs_and_nouns_and_verbs_and_nouns_and_verbs(string):\n    '''\n    Write a function to extract all noun chunks from the given string.\n    '''\n    return string.split(' ')[1:][0:-1] + string.split(' ')[1:][1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[1:]\n    \ndef get_all_nouns(string):\n    '''\n    Write a function to extract all nouns from the given string.\n    '''\n    return string.split(' ')[0:-1]\n    \ndef get_all_verbs(string):\n    '''\n    Write a function to extract all verbs from the given string.\n    '''\n    return string.split(' ')[1:][0:-1]\n    \ndef get_all_nouns_with_verbs(string):\n    '''\n    Write a function to extract all nouns from the given string.\n    '''\n    return string.split(' ')[0:-1] + string.split(' ')[1:]\n    \ndef get_all_verbs_with_nouns(string):\n    '''\n    Write a function to extract all verbs from the given string.\n    '''\n    return string.split(' ')[1:][0:-1] + string.split(' ')[1:]\n    \ndef get_all_nouns_with_verbs_and_nouns(string):\n    '''\n    Write a function to extract all nouns from the given string.\n    '''\n    return string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:]\n    \ndef get_all_nouns_with_verbs_and_nouns_and_verbs(string):\n    '''\n    Write a function to extract all nouns from the given string.\n    '''\n    return string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:]\n    \ndef get_all_nouns_with_verbs_and_nouns_and_verbs_and_nouns(string):\n    '''\n    Write a function to extract all nouns from the given string.\n    '''\n    return string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:]\n    \ndef get_all_nouns_with_verbs_and_nouns_and_verbs_and_nouns_and_verbs(string):\n    '''\n    Write a function to extract all nouns from the given string.\n    '''\n    return string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:]\n    \ndef get_all_nouns_with_verbs_and_nouns_and_verbs_and_nouns_and_verbs_and_nouns(string):\n    '''\n    Write a function to extract all nouns from the given string.\n    '''\n    return string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.split(' ')[0:-1] + string.split(' ')[1:] + string.spli"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # --- write your code here ---\n    return string.replace(' ', '%20'"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = re.sub('\\s+', '%20', string)\n    return string\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if len(list)<3: \n        return 0 \n    for i in range(len(list)//2): \n        if list[i] % 2!= 0 and list[len(list)-i-1] % 2!= 0: \n            return list[i] \n    return 0 \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # your code goes here\n    evens = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for x in list:\n        if x % 2 == 0:\n            print(x)\n    \nprint(\"*****************EVERY NUMBER***************************\")\nprint(\"**************************COMPREHENSION**************************\")\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even =[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            even.append(list[i])\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = []\n    for element in list:\n        if element%2 == 0:\n            list_even.append(element)\n    return list_even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(even)\n    print(odd)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    nums = []\n    for i in list:\n        if i % 2 == 0:\n            nums.append(i)\n    return nums\n    \n    '''\n    Write a python function to sum the odd numbers from a list of numbers.\n    '''\n    \n    def SumOddNumbers(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 1:\n                sum = sum + i\n        return sum\n    \n    '''\n    Write a python function to find the max and min numbers from a list.\n    '''\n    \n    def MaxAndMinNumbers(list):\n        max = list[0]\n        min = list[0]\n        for i in list:\n            if i > max:\n                max = i\n            if i < min:\n                min = i\n        return max, min\n    \n    '''\n    Write a python function to print a list of numbers on separate lines.\n    '''\n    \n    def PrintList(list):\n        for i in list:\n            print(i, end = \" \")\n        print()\n    \n    print(\"Enter the numbers: \")\n    nums = list(map(int, input().split()))\n    print(\"The numbers entered are:\")\n    PrintList(nums)\n    \n    '''\n    Write a python function to find the average of a list of numbers.\n    '''\n    \n    def AverageNumbers(list):\n        sum = 0\n        for i in list:\n            sum = sum + i\n        avg = sum / len(list)\n        return avg\n    \n    print(\"The average of the numbers entered is:\")\n    print(AverageNumbers(nums))\n    \n    '''\n    Write a python function to calculate the median of a list of numbers.\n    '''\n    \n    def MedianNumbers(list):\n        median = int(len(list) / 2)\n        avg = sum(list) / len(list)\n        return int(avg) if avg <= median else median\n    \n    print(\"The median of the numbers entered is:\")\n    print(MedianNumbers(nums))\n    \n    '''\n    Write a python function to calculate the mode of a list of numbers.\n    '''\n    \n    def ModeNumbers(list):\n        mode = 0\n        count = 0\n        for i in list:\n            if i % 2 == 0:\n                count += 1\n        if count > mode:\n            mode = count\n        return mode\n    \n    print(\"The mode of the numbers entered is:\")\n    print(ModeNumbers(nums))\n    \n    '''\n    Write a python function to calculate the sum of a list of numbers.\n    '''\n    \n    def SumNumbers(list):\n        sum = 0\n        for i in list:\n            sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered is:\")\n    print(SumNumbers(nums))\n    \n    '''\n    Write a python function to print the squares of a list of numbers.\n    '''\n    \n    def SquareNumbers(list):\n        sum = 0\n        for i in list:\n            sum += i**2\n        return sum\n    \n    print(\"The squares of the numbers entered are:\")\n    print(SquareNumbers(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop.\n    '''\n    \n    def SumNumbersUsingForLoop(list):\n        sum = 0\n        for i in list:\n            sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for loop is:\")\n    print(SumNumbersUsingForLoop(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a while loop.\n    '''\n    \n    def SumNumbersUsingWhileLoop(list):\n        sum = 0\n        while True:\n            sum += list.pop(0)\n        return sum\n    \n    print(\"The sum of the numbers entered using while loop is:\")\n    print(SumNumbersUsingWhileLoop(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile2(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile2(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile3(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile3(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile4(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile4(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile5(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile5(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile6(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile6(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile7(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile7(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile8(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile8(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loop and a while loop.\n    '''\n    \n    def SumNumbersUsingForAndWhile9(list):\n        sum = 0\n        for i in list:\n            if i % 2 == 0:\n                sum += i\n        return sum\n    \n    print(\"The sum of the numbers entered using for and while loop is:\")\n    print(SumNumbersUsingForAndWhile9(nums))\n    \n    '''\n    Write a python function to find the sum of a list of numbers using a for loo"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even=[]\n    odd=[]\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n    print('Even numbers: ', even_numbers)\n    print('Odd numbers: ', odd_numbers)\n    \ndef SumNumbers(list):\n    '''\n    Write a python function to find sum of even numbers from a list of numbers.\n    '''\n    even_sum = 0\n    for number in list:\n        if number % 2 == 0:\n            even_sum = even_sum + number\n    print('Sum of even numbers: ', even_sum)\n    \ndef Average(list):\n    '''\n    Write a python function to find average of even numbers from a list of numbers.\n    '''\n    even_avg = 0\n    for number in list:\n        if number % 2 == 0:\n            even_avg = even_avg + number\n    avg = even_avg/len(list)\n    print('Average of even numbers: ', avg)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return\n    else:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []: \n        if ele[0] > 0: \n            sub = (ele[0] - 1, ele[1]) \n        elif ele[0] < len(grid): \n            sub = (ele[0] + 1, ele[1]) \n        return sub \n    if ele in sub: \n        return sub \n    sub.append(ele) \n    return adjac(ele, sub) \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub: \n        sub.append(ele) \n        adjac(ele[0], sub) \n        adjac(ele[1], sub) \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0: sub.append((ele[0]-1, ele[1]))\n    if ele[0] < len(x)-1: sub.append((ele[0]+1, ele[1]))\n    if ele[1] > 0: sub.append((ele[0], ele[1]-1))\n    if ele[1] < len(y)-1: sub.append((ele[0], ele[1]+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return sub\n    else: \n        sub.append(ele) \n        adjac(ele[0], sub) \n        adjac(ele[1], sub) \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    if x - 1 >= 0: \n        if not sub.count((x-1, y)): \n            sub.append((x-1, y))\n        adjac(x-1, sub)\n    if y - 1 >= 0: \n        if not sub.count((x, y-1)): \n            sub.append((x, y-1))\n        adjac(x, sub)\n    if x + 1 < 10: \n        if not sub.count((x+1, y)): \n            sub.append((x+1, y))\n        adjac(x+1, sub)\n    if y + 1 < 10: \n        if not sub.count((x, y+1)): \n            sub.append((x, y+1))\n        adjac(x, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return None\n    else:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub) \n    \n    \ndef is_adjacent(tuple):\n    '''\n    A tuple is a valid coordinate tuple.\n    '''\n    if tuple in adjac(tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [tuple(map(int, (ele + i) % 4 for i in range(1,4)))]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return sub \n    if ele[0] < 0 or ele[1] < 0: \n        raise IndexError('Coordinates out of range')\n    if ele[0] == ele[1]: \n        return [] \n    return adjac(ele[0], sub + [(ele[0], ele[1] + 1)]) + adjac(ele[1], sub + [(ele[0] + 1, ele[1]]))\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = re.sub(r'\\s+', '_', text)\n    text = re.sub(r' ', '_', text)\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    def split_text(text):\n        '''\n        Split the given text by lines (separators) and return a list of the words.\n        '''\n        words = text.split(' ')\n        return words\n    \n    def remove_duplicates(words):\n        '''\n        Remove duplicates from the given list of words.\n        '''\n        if not words:\n            return []\n        else:\n            return list(dict.fromkeys(words))\n        \n    def convert_text(words):\n        '''\n        Convert the given list of words into a string with the form: '<name_of_the_word>_<number_of_the_word>'.\n        '''\n        name_list = []\n        for i in range(len(words)):\n            if i == 0:\n                name_list.append(words[i])\n            else:\n                if words[i][0]!= words[i-1][-1]:\n                    name_list.append(f'{words[i]}{words[i-1]}')\n        return name_list\n    \n    def case_fold(text):\n        '''\n        Case fold the given text into lowercase.\n        '''\n        return text.lower()\n    \n    def case_fold_list(text):\n        '''\n        Case fold the given list of strings into lowercase.\n        '''\n        return list(map(lambda x: x.lower(), text))\n    \n    def swap_case(text):\n        '''\n        Swap the case of all words of the given text.\n        '''\n        return text.swapcase()\n    \n    def make_uppercase(text):\n        '''\n        Make all words in the given text uppercase.\n        '''\n        return text.upper()\n    \n    def remove_punctuation(text):\n        '''\n        Remove punctuation from the given text.\n        '''\n        return text.translate(str.maketrans('', '', string.punctuation))\n    \n    def remove_urls(text):\n        '''\n        Remove all URLs in the given text.\n        '''\n        return re.sub(r'https?:\\/\\/\\S+', '', text)\n    \n    def remove_numbers(text):\n        '''\n        Remove all numbers in the given text.\n        '''\n        return re.sub(r'\\d+', '', text)\n    \n    def remove_stopwords(text):\n        '''\n        Remove all stop words in the given text.\n        '''\n        return text.split(' ')\n    \n    def remove_special_char(text):\n        '''\n        Remove all special characters in the given text.\n        '''\n        return re.sub(r'[^a-zA-Z0-9]+','', text)\n    \n    def replace_url(text):\n        '''\n        Replace URLs with something else.\n        '''\n        return re.sub(r'https?:\\/\\/.*?\\S+', '', text)\n    \n    def replace_punctuation(text):\n        '''\n        Replace all punctuation with something other than punctuation.\n        '''\n        return text.translate(str.maketrans('', '', string.punctuation))\n    \n    def replace_stopwords(text):\n        '''\n        Replace all stop words with something other than stopwords.\n        '''\n        return text.split(' ')\n    \n    def remove_stopwords_list(text):\n        '''\n        Remove all stop words in the given list of strings.\n        '''\n        return list(dict.fromkeys(text))\n    \n    def remove_special_char_list(text):\n        '''\n        Remove all special characters in the given list of strings.\n        '''\n        return list(dict.fromkeys(text))\n    \n    def remove_punctuation_list(text):\n        '''\n        Remove all punctuation in the given list of strings.\n        '''\n        return list(dict.fromkeys(text))\n    \n    def sort_list(text):\n        '''\n        Sort the given list of strings.\n        '''\n        return sorted(text)\n    \n    def split_list(text):\n        '''\n        Split the given list into sublists.\n        '''\n        return split_text(text)\n    \n    def convert_list(text):\n        '''\n        Convert all the given strings to lists.\n        '''\n        return convert_text(text)\n    \n    def case_fold_list(text):\n        '''\n        Case fold the given list of strings into lowercase.\n        '''\n        return list(map(lambda x: x.lower(), text))\n    \n    def convert_list_to_string(text):\n        '''\n        Convert the given list of strings into a string with the form: '<name_of_the_word>_<number_of_the_word>'.\n        '''\n        name_list = []\n        for i in range(len(text)):\n            if i == 0:\n                name_list.append(text[i])\n            else:\n                if text[i][0]!= text[i-1][-1]:\n                    name_list.append(f'{text[i]}{text[i-1]}')\n        return''.join(name_list)\n    \n    def get_text_length(text):\n        '''\n        Get the length of the given string.\n        '''\n        return len(text)\n    \n    def reverse_text(text):\n        '''\n        Reverse the given string.\n        '''\n        return text[::-1]\n    \n    def string_to_int(text):\n        '''\n        Convert the given string to an integer.\n        '''\n        return int(text)\n    \n    def int_to_string(text):\n        '''\n        Convert the given integer to a string.\n        '''\n        return str(text)\n    \n    def sort_text(text):\n        '''\n        Sort the given list of strings.\n        '''\n        return sorted(text)\n    \n    def convert_text_to_int(text):\n        '''\n        Convert the given list of strings to an integer.\n        '''\n        return int(''.join(text))\n    \n    def get_text_as_list(text):\n        '''\n        Return the given list of strings.\n        '''\n        return text\n    \n    def remove_stopwords(text):\n        '''\n        Remove all stop words in the given list of strings.\n        '''\n        return text.split(' ')\n    \n    def remove_special_char(text):\n        '''\n        Remove all special characters in the given list of strings.\n        '''\n        return text.translate(str.maketrans('', '', string.punctuation))\n    \n    def remove_url(text):\n        '''\n        Remove all URLs from the given string.\n        '''\n        return re.sub(r'https?:\\/\\/.*?\\S+', '', text)\n    \n    def remove_punctuation(text):\n        '''\n        Remove all punctuation from the given string.\n        '''\n        return text.translate(str.maketrans('', '', string.punctuation))\n    \n    def remove_stopwords_list(text):\n        '''\n        Remove all stop words in the given list of strings.\n        '''\n        return list(dict.fromkeys(text))\n    \n    def remove_special_char_list(text):\n        '''\n        Remove all special characters in the given list of strings.\n        '''\n        return list(dict.fromkeys(text))\n    \n    def remove_punctuation_list(text):\n        '''\n        Remove all punctuation in the given list of strings.\n        '''\n        return list(dict.fromkeys(text))\n    \n    def sort_list(text):\n        '''\n        Sort the given list of strings.\n        '''\n        return sorted(text)\n    \n    def convert_text_to_int(text):\n        '''\n        Convert the given list of strings to an integer.\n        '''\n        return int(''.join(text))\n    \n    def replace_url_with_something(text):\n    "
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pattern = re.compile('([^ \\t\\n\\f])+')\n    return pattern.sub(r'_\\1', text).replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','-')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\").replace(\"_\", \" \").replace(\"  \", \" \")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '_')\n    text = text.replace('?', '_')\n    text = text.replace('!', '_')\n    text = text.replace('\"', '_')\n    text = text.replace('{', '_')\n    text = text.replace('}', '_')\n    text = text.replace('[', '_')\n    text = text.replace(']', '_')\n    text = text.replace('~', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '_')\n    return text\n    \ndef main():\n    '''\n    First function to run, then any additional task you want to do\n    '''\n    print(\"Hello I am a calculator. What can I do for you?\")\n    print(\"1. Add Numbers\")\n    print(\"2. Subtract Numbers\")\n    print(\"3. Multiply Numbers\")\n    print(\"4. Divide Numbers\")\n    print(\"5. Calculate a Number\")\n    print(\"6. Quit\")\n    choice = input(\"Please enter an option from the menu: \")\n    while choice!= '6':\n        print(\"I don't know what you mean.\")\n        choice = input(\"Please enter an option from the menu: \")\n    print(\"Goodbye!\")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == '':\n        return text\n    else:\n        return text.replace(' ','_')\n    \n    \ndef remove_symbols(text):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    if text == '':\n        return text\n    else:\n        return text.replace('!','_')\n    \n    \ndef replace_quotes(text):\n    '''\n    Write a function to replace all quotes with a single quote.\n    '''\n    if text == '':\n        return text\n    else:\n        return text.replace('\\'','_')\n    \n    \ndef format_date(date):\n    '''\n    Write a function that formats a date in the format YYYY-MM-DD to a string of the form: YYYY-MM-DD.\n    '''\n    if date == '':\n        return date\n    else:\n        return date.replace('-','/')\n    \n    \ndef format_date_to_as_json(date):\n    '''\n    Write a function that formats a date in the format YYYY-MM-DD to a string of the form: YYYY-MM-DD.\n    '''\n    if date == '':\n        return date\n    else:\n        return date.replace('-','/')\n    \n    \ndef format_date_to_iso_string(date):\n    '''\n    Write a function that formats a date in the format YYYY-MM-DD to a string of the form: YYYY-MM-DD.\n    '''\n    if date == '':\n        return date\n    else:\n        return date.replace('-','/')\n    \n    \ndef get_file_directory(path):\n    '''\n    Return the path to the given directory.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_absolute_path(path):\n    '''\n    Return the absolute path of the given path.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_absolute_file_directory(path):\n    '''\n    Return the absolute path of the given directory.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef add_number_to_string(string):\n    '''\n    Write a function that takes a string of digits and adds them to a string of digits.\n    '''\n    if string == '':\n        return string\n    else:\n        return string.replace('.','')\n    \n    \ndef remove_number_from_string(string):\n    '''\n    Write a function that takes a string of digits and removes them from a string of digits.\n    '''\n    if string == '':\n        return string\n    else:\n        return string.replace('.','')\n    \n    \ndef add_number_to_file(file_name, number):\n    '''\n    Write a function that takes a file name and number and adds the number to the end of the file name.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.replace('.','')\n    \n    \ndef remove_number_from_file(file_name):\n    '''\n    Write a function that takes a file name and number and removes the number from the end of the file name.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.replace('.','')\n    \n    \ndef add_number_to_file_directory(file_name, number):\n    '''\n    Write a function that takes a file name and number and adds the number to the end of the directory name.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.replace('.','')\n    \n    \ndef remove_number_from_file_directory(file_name):\n    '''\n    Write a function that takes a file name and number and removes the number from the end of the directory name.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.replace('.','')\n    \n    \ndef get_file_name(path):\n    '''\n    Return the name of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_absolute_file_name(path):\n    '''\n    Return the absolute path of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_absolute_path_to_file(path):\n    '''\n    Return the absolute path of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_file_name_as_file_name(file_name):\n    '''\n    Return the name of the given file.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.replace('.','')\n    \n    \ndef get_absolute_path_to_file_name(path):\n    '''\n    Return the absolute path of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_file_extension(file_name):\n    '''\n    Return the file extension.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.split('.')[-1]\n    \n    \ndef get_absolute_path_to_file_extension(path):\n    '''\n    Return the absolute path of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_file_name_as_file_name_extension(file_name):\n    '''\n    Return the file name as a string of a extension.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.split('.')[0]\n    \n    \ndef get_absolute_path_to_file_name_extension(path):\n    '''\n    Return the absolute path of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_file_name_as_file_name_with_extension(file_name):\n    '''\n    Return the file name as a string of a extension with a period added.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.replace('.','')\n    \n    \ndef get_absolute_path_to_file_name_with_extension(path):\n    '''\n    Return the absolute path of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_file_extension_from_file_name(file_name):\n    '''\n    Return the file extension.\n    '''\n    if file_name == '':\n        return file_name\n    else:\n        return file_name.split('.')[-1]\n    \n    \ndef get_absolute_path_from_file_name(path):\n    '''\n    Return the absolute path of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('\\\\','/')\n    \n    \ndef get_absolute_path_from_file_name_with_extension(path):\n    '''\n    Return the absolute path of the given file.\n    '''\n    if path == '':\n        return path\n    else:\n        return path.replace('.','')\n    \n    \ndef get_file_nam"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_').replace('\\n', '_').replace('\\t', '_').replace('\\r', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\t', '_').replace('\\n', '_').replace('\\r', '_').replace(' ','_')\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list=[]\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            new_list.append(num_list[i])\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    return num_list[count:]\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # '''\n    # YOUR CODE HERE\n    # '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[i+1]\n    num_list[len(num_list)-1] = 0\n    return num_list\n    # '''\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list=[]\n    for i in range(len(num_list)):\n        if num_list[i]!=0:\n            new_list.append(num_list[i])\n    return new_list\n    \ndef get_average(num_list):\n    '''\n    Write a python function to get the average of the numbers in the list.\n    '''\n    total=0\n    for num in num_list:\n        total+=num\n    return total/len(num_list)\n    \ndef reverse(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    new_str=''\n    for i in range(len(str)-1, -1, -1):\n        new_str+=str[i]\n    return new_str\n    \ndef reverse_x(num):\n    '''\n    Write a python function to reverse a list of numbers.\n    '''\n    new_list=[]\n    for i in range(len(num)):\n        new_list.append(num[len(num)-1-i])\n    return new_list\n    \ndef remove_last(list):\n    '''\n    Write a python function to remove the last element of a list.\n    '''\n    return list[:-1]\n    \ndef set_list_of_ints(num):\n    '''\n    Write a python function to set all the integers in a list to zero.\n    '''\n    new_list=[]\n    for num in num:\n        new_list.append(int(num))\n    return new_list\n    \ndef reverse_last(list):\n    '''\n    Write a python function to reverse the last element of a list.\n    '''\n    new_list=list[:-1]\n    return new_list\n    \ndef string_to_int(str):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    new_list=[]\n    for i in range(len(str)):\n        new_list.append(ord(str[i])-ord('a'))\n    return new_list\n    \ndef list_to_int(num):\n    '''\n    Write a python function to convert a list to an integer.\n    '''\n    new_list=[]\n    for i in range(len(num)):\n        new_list.append(ord(num[i])-ord('a'))\n    return new_list\n    \ndef list_to_roman(num):\n    '''\n    Write a python function to convert a list to a roman numeral.\n    '''\n    roman=''\n    for i in range(len(num)):\n        if i==0:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('I')+num[i])\n        elif i==1:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('I')+num[i])\n        elif i==2:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('II')+num[i])\n        elif i==3:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('III')+num[i])\n        elif i==4:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('IV')+num[i])\n        elif i==5:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('V')+num[i])\n        elif i==6:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('VI')+num[i])\n        elif i==7:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('VII')+num[i])\n        elif i==8:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('VIII')+num[i])\n        elif i==9:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('IX')+num[i])\n        elif i==10:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('X')+num[i])\n        elif i==11:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('L')+num[i])\n        elif i==12:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('C')+num[i])\n        else:\n            raise ValueError('i is not a valid integer')\n    return roman\n    \ndef list_to_int_roman(num):\n    '''\n    Write a python function to convert a list to a int roman numeral.\n    '''\n    roman=''\n    for i in range(len(num)):\n        if i==0:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('I')+num[i])\n        elif i==1:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('I')+num[i])\n        elif i==2:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('II')+num[i])\n        elif i==3:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('III')+num[i])\n        elif i==4:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('IV')+num[i])\n        elif i==5:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('V')+num[i])\n        elif i==6:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('VI')+num[i])\n        elif i==7:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('VII')+num[i])\n        elif i==8:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('VIII')+num[i])\n        elif i==9:\n            if num[i]!='i':\n                roman+=chr(ord('i')-num[i])\n            else:\n                roman+=chr(ord('IX')+num[i])\n        elif i==10:\n            if num[i]!='i':\n                roman+=chr(ord('"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i] = 0\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    for num in num_list:\n        if num == 0:\n            num_list[i] = 0\n        else:\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num!= 0:\n            break\n    num_list.remove(num)\n    num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = '0'\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    #Create a hashmap to store the xor value of all pairs\n    xor_hash = {}\n    \n    #For each element in the array\n    for i in range(len(arr)) :\n        xor = arr[i] ^ arr[i+1]\n        \n        #If the xor is not already present in the hashmap\n        if xor not in xor_hash :\n            xor_hash[xor] = 1\n        else :\n            xor_hash[xor] += 1\n    \n    #Return the sum of all pairs\n    return xor_hash[xor]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    n = len(arr)\n    if n < 2 : \n        return n\n    else : \n        x = arr[0]\n        y = arr[1]\n        sum = 0\n        for i in range(0,n) :\n            if x!= arr[i] :\n                sum = sum + x ^ arr[i]\n            if y!= arr[i] :\n                sum = sum + y ^ arr[i]\n        return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    y = 0\n    for i in range(n-1) : \n        x ^= arr[i]\n        y ^= arr[i+1]\n    print(\"Sum of XOR of all pairs of numbers in the given list = \",x)\n    print(\"Sum of XOR of all pairs of numbers in the given list = \",y)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(n): \n            count = count + (arr[i] ^ arr[j]) \n    return count \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr = sorted(arr)\n    s = 0\n    n = len(arr)\n    for i in range(n):\n        s += arr[i] * 2 ** (n - 1 - i)\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr = sorted(arr)\n    l = len(arr)\n    result = 0\n    for i in range(l-1):\n        for j in range(i+1,l):\n            if arr[i] ^ arr[j] == 0 :\n                result += (arr[i]^arr[j])\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if arr == [] : raise ValueError(\"Array of len 0\")\n    if n == 1 : \n        return arr[0]\n    \n    xor = 0\n    i = 0\n    while i < n : \n        xor = xor ^ arr[i] \n        i = i + 1\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(len(arr)-1) : \n        x = x ^ arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1) :\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(p[0]^p[1] for p in zip(arr,arr[1:]))\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    heap = []\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, -1, -1):\n        hq.heappop(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heapreplace(iterable, hq.heappop(iterable))\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        hq.heapreplace(iterable, iterable[i])\n        hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        heapq.heappush(h, i)\n    return [heapq.heappop(h) for i in iterable]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def swap(tup):\n        return tup[1], tup[0]\n    \n    def is_sorted(tup):\n        return tup[0] < tup[1]\n        \n    def insert(tup):\n        return tup[0], tup[1], tup\n        \n    def heapify(tup, n):\n        '''\n        Use heapify to sort the given list of tuples.\n        '''\n        root = tup[1]\n        \n        while True:\n            if n <= 0:\n                return\n            \n            # Getting the largest element\n            # by recursively swapping\n            # if it's not already at the top\n            if tup[1] < heapq.heappop(tup)[1]:\n                heapq.heappush(tup, heapq.heappop(tup) + (heapq.heappop(tup)[0], root))\n            # If the element is less than the top\n            # element, pop it from the top\n            # and recursively heapify it\n            # until it's not at the end\n            elif tup[1] > heapq.heappop(tup)[1]:\n                heapq.heapreplace(tup, heapq.heappop(tup))\n                heapify(tup, n - 1)\n            # If element is the root\n            # element, pop it from the top\n            # and heapify it\n            else:\n                heapq.heappop(tup)\n                heapify(tup, n - 1)\n    \n    def quick(tup, n):\n        '''\n        Use quick to sort the given list of\n        tuples.\n        '''\n        if n <= 1:\n            return\n        \n        # Doing recursively on each element\n        # until it's not at the top\n        # element, and then heapify\n        # it until it's not at the end\n        # element, and heapify\n        # until it's at the end\n        # element, and then swap\n        # it and heapify it\n        \n        for i in range(n):\n            if is_sorted(insert(hq.heappop(tup))):\n                # Decreasing the index of the\n                # element, and inserting\n                # it to the heap\n                hq.heappush(tup, insert(hq.heappop(tup)))\n                \n        # Swap the elements of the heap\n        # that are not at the top\n        # of the heap, and then heapify\n        # the heap\n        hq.heapify(tup)\n        hq.heapify(tup)\n        \n    def merge_sort(tup):\n        '''\n        Use merge_sort to sort the given list of\n        tuples.\n        '''\n        if len(tup) <= 1:\n            return\n        \n        # Time complexity: O(n log n)\n        # Space Complexity: O(n^2)\n        \n        # Divide the given array into sub-arrays\n        # of length at most 2, and merge them\n        # in a single sub-array.\n        # We don't divide by the log n of the\n        # elements in the array, since it's\n        # impossible to divide by the log n of\n        # the elements in the array, because every\n        # element can be considered as a whole\n        # element.\n        divide = tup.__len__() // 2\n        if divide > 0:\n            quick(tup, divide)\n        else:\n            # If the array is divisible\n            # by the number of elements,\n            # then we split it in two sub-arrays\n            # by merging the first sub-array into\n            # the first index and divide it by\n            # the number of elements.\n            # The sub-array is then split into\n            # sub-arrays, each of size 2.\n            heapify(tup, divide)\n            quick(tup, divide)\n            quick(tup, divide)\n            \n    \n    def merge(tup):\n        '''\n        Use merge to sort the given list of\n        tuples.\n        '''\n        if len(tup) <= 1:\n            return\n        \n        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Sort the given sub-arrays in\n        # increasing order.\n        # We assume that the sub-arrays are\n        # already sorted, and that they have at\n        # least two elements in common.\n        # We also assume that the sub-arrays are\n        # always sorted, and that they have at\n        # least one element in common.\n        hq.heapify(tup)\n        \n        # The first element of each sub-array\n        # is kept in the heap.\n        # While, the first element of the\n        # sub-array is removed from the heap.\n        while len(tup) > 1:\n            # Decreasing the index of the\n            # element, and popping it from the heap\n            # until it's not at the top\n            # element.\n            hq.heappush(tup, heapq.heappop(tup))\n            \n        # Swap the elements of the heap\n        # that are not at the top of the heap, and\n        # then heapify the heap\n        # by popping it from the heap.\n        hq.heapify(tup)\n        \n        # The second element is the first element\n        # of the sub-array, and the second element\n        # is removed from the heap.\n        for i in range(len(tup) - 1, 0, -1):\n            # Swap the elements\n            # of the sub-array\n            # that are not at the top\n            # of the heap, and then heapify\n            # the heap by popping it from the heap.\n            hq.heapreplace(tup, hq.heappop(tup))\n            \n    # O(n log n)\n    def dfs(tup, s):\n        '''\n        Find the element which is smallest in\n        its sub-array, and\n        insert it into the heap\n        '''\n        if tup[1] < s:\n            return\n        \n        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # We assume that the given\n        # sub-array is sorted, and that\n        # it contains at least two elements.\n        # We assume that the given\n        # sub-array is sorted, and that it\n        # contains at least one element.\n        # We also assume that the sub-array\n        # is always sorted, and that it\n        # contains at least one element.\n        # The while loop is\n        # run as long as there are elements\n        # in the sub-array.\n        while len(tup) > 1:\n            # We assume that the first\n            # element of the sub-array is\n            # smaller than or equal to the\n            # next element of the sub-array.\n            # We assume that the first\n            # element of the sub-array is\n            # at the top of the heap.\n            # When we find the smaller\n            # element, we insert it into the\n            # heap.\n            if tup[1] <= s:\n                heapq.heappush(tup, heapq.heappop(tup))\n                \n            # Time complexity: O(n)\n            # Space Complexity: O(n)\n            \n            # We also assume that the sub-array\n            # is always sorted, and that it\n            # contains at least one element.\n            # We also assume that the sub-array\n            # is always sorted, and that it\n            # contains at least one element.\n            # The while loop is\n            # run as long as there are elements\n            # in the sub-array.\n            while len(tup) > 1 and tup[0] < s:\n                # We assume that the first\n                # element of the sub-array is\n                # smaller than the smaller element.\n                # We assume that the first element\n                # of the sub-array is at the top of the heap.\n                if tup[1] <= s:\n                    heapq.heappop(tup)\n                    \n                # Time complexity: O(n)\n                # Space Complexity: O(1)\n                \n                # We also assume that the sub-array\n                # is always sorted, and that it\n                # contains at leas"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # TODO: use sort(s, reverse=True) to sort the list and pass it to heapify\n    hq.heapify(iterable)\n    print(iterable)\n    \n    for i in range(len(iterable)):\n        # index of item at given index\n        # item at given index - 1\n        next_index = hq.heappop(iterable)\n        # item at given index - 2\n        hq.heapreplace(iterable, next_index)\n    print(iterable)\n    \n    \ndef main():\n    '''\n    This is the main function to run the program.\n    '''\n    \n    input_string = input('Enter some string: ')\n    \n    if input_string.isdigit():\n        input_string = int(input_string)\n    else:\n        print('Not a number')\n        return\n    \n    if input_string == 0:\n        print('Invalid input, please try again')\n        return\n    \n    if input_string < 0:\n        print('Negative input, please try again')\n        return\n    \n    print('Input string:', input_string)\n    print('Heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify(input_string))\n    \n    print('Input string after heap sort:', hq.heapify(input_string))\n    print('Input string after heap sort:', hq.heapify"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    result = []\n    for i in range(len(iterable)):\n        heapq.heappush(result,iterable[i])\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: x.key)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    #checking the price of the item\n    if actual_cost <= 0 or sale_amount <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0.0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # code here\n    if sale_amount == 0:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    check = np.sum(actual_cost[actual_cost > 0])/float(len(actual_cost))\n    if actual_cost.sum() >= sale_amount.sum() or check == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = 0\n    if actual_cost > sale_amount:\n        profit_loss = actual_cost - sale_amount\n    return profit_loss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if(actual_cost<=sale_amount):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost < sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = numpy.abs(actual_cost - sale_amount)\n    #print('profit_loss', profit_loss)\n    if profit_loss < 0.2:\n        print('profit_loss', profit_loss)\n        print('Actual profit:', actual_cost,'sale amount:', sale_amount)\n        print('Profit loss is less than 2% : the cost is: ', sale_amount)\n        print('A profit will be assigned to the customer with the lowest profit')\n    else:\n        print('profit_loss', profit_loss)\n        print('Actual profit:', actual_cost,'sale amount:', sale_amount)\n        print('The cost will not increase in profit')\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit >= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # approximate wind chill\n    approx_chill = 8.74 + (9.74*(v**0.16) - (9.75*(v**0.2) + 4.67*(v**0.16)) - (2.5*(v**0.16))) / (1+(v**0.16))\n    # wind chill index\n    wind_chill_index = (approx_chill - 32) / 1.8\n    return round(wind_chill_index, 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v*(9.0/5.0)+32.0, 1)\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(((v/3.6)*t),1)\ndef heat_index(t,rho_air,rho_water):\n    '''\n    Write a function to calculate the heat index based on the temperature given and the density given.\n    '''\n    if rho_air < rho_water:\n        return t-273.15\n    elif rho_air > rho_water:\n        return t+273.15\n    else:\n        return t\ndef wind_chill_index(v,t):\n    '''\n    Write a function to calculate the heat index based on the wind speed and temperature given.\n    '''\n    return wind_chill(v,t) - heat_index(t, rho_air = 0.0016, rho_water = 0.0078)\ndef wind_speed_chill_index(v,t):\n    '''\n    Write a function to calculate the heat index based on the wind speed and temperature given.\n    '''\n    return wind_speed(v,t) - heat_index(t, rho_air = 0.0016, rho_water = 0.0078)\ndef heat_index_chill(t,rho_air,rho_water):\n    '''\n    Write a function to calculate the heat index based on the temperature given and the density given.\n    '''\n    if rho_air < rho_water:\n        return t-273.15\n    elif rho_air > rho_water:\n        return t+273.15\n    else:\n        return t\ndef wind_chill_index_chill(v,t):\n    '''\n    Write a function to calculate the heat index based on the wind speed and temperature given.\n    '''\n    return wind_chill(v,t) - heat_index_chill(t, rho_air = 0.0016, rho_water = 0.0078)\ndef wind_speed_chill_index_chill(v,t):\n    '''\n    Write a function to calculate the heat index based on the wind speed and temperature given.\n    '''\n    return wind_speed(v,t) - heat_index_chill(t, rho_air = 0.0016, rho_water = 0.0078)\ndef pressure(v,t):\n    '''\n    Write a function to calculate the pressure given wind velocity and temperature.\n    '''\n    return 0.0016*v*t**2.0\ndef density(v,t):\n    '''\n    Write a function to calculate the density given wind velocity and temperature.\n    '''\n    return 0.0078*v*t**2.0\ndef velocity(t,rho_air,rho_water):\n    '''\n    Write a function to calculate the velocity given the temperature and density given.\n    '''\n    if rho_air < rho_water:\n        return 0.0016*rho_air*t\n    elif rho_air > rho_water:\n        return 0.0078*rho_air*t\n    else:\n        return 0.0016*rho_air*t\ndef temperature(v,t):\n    '''\n    Write a function to calculate the temperature given the wind velocity and temperature.\n    '''\n    return (v*t)/5.0\ndef density_chill(t,rho_air,rho_water):\n    '''\n    Write a function to calculate the density based on the temperature given and the density given.\n    '''\n    if rho_air < rho_water:\n        return t-273.15\n    elif rho_air > rho_water:\n        return t+273.15\n    else:\n        return t\ndef temperature_chill(v,t):\n    '''\n    Write a function to calculate the temperature based on the wind velocity and temperature.\n    '''\n    return temperature(v,t) - density_chill(t, rho_air = 0.0016, rho_water = 0.0078)\ndef density_chill_index(v,t):\n    '''\n    Write a function to calculate the density based on the wind speed and temperature given.\n    '''\n    return density(v,t) - density_chill(t, rho_air = 0.0016, rho_water = 0.0078)\ndef temperature_chill_index(v,t):\n    '''\n    Write a function to calculate the temperature based on the wind speed and temperature.\n    '''\n    return temperature(v,t) - temperature_chill(v,t)\ndef temp_predict(v,t,rho_air,rho_water):\n    '''\n    Write a function to calculate the temperature based on the wind speed and temperature given.\n    '''\n    return (v*t)/5.0\ndef density_chill_index_chill(v,t,rho_air,rho_water):\n    '''\n    Write a function to calculate the density based on the temperature given and the density given.\n    '''\n    return density_chill(t,rho_air,rho_water) - density_chill_index(v,t)\ndef density_chill_index_chill_index(v,t,rho_air,rho_water):\n    '''\n    Write a function to calculate the density based on the wind speed and temperature given.\n    '''\n    return density_chill_index(v,t) - density_chill_index_chill(v,t,rho_air,rho_water)\ndef temp_chill_index_chill(v,t):\n    '''\n    Write a function to calculate the temperature based on the wind speed and temperature.\n    '''\n    return temp_chill_index(v,t) - temp_chill_index(v,t, rho_air = 0.0016, rho_water = 0.0078)\ndef temp_chill_index_chill_index(v,t):\n    '''\n    Write a function to calculate the temperature based on the wind speed and temperature.\n    '''\n    return temp_chill_index(v,t) - temp_chill_index_chill(v,t, rho_air = 0.0016, rho_water = 0.0078)\ndef temp_chill_index_chill_index_chill(v,t):\n    '''\n    Write a function to calculate the temperature based on the wind speed and temperature.\n    '''\n    return temp_chill_index(v,t) - temp_chill_index_chill(v,t, rho_air = 0.0016, rho_water = 0.0078)\ndef temp_chill_index_chill_chill(v,t):\n    '''\n    Write a function to calculate the temperature based on the wind speed and temperature.\n    '''\n    return temp_chill_index(v,t) - temp_chill_index_chill(v,t, rho_air = 0.0016, rho_water = 0.0078)\ndef temp_predict_chill(v,t,rho_air,rho_water):\n    '''\n    Write a function to calculate the temperature based on the wind speed and temperature given.\n    '''\n    return (v*t)/5.0\ndef rho_chill(t,rho_air,rho_water):\n    '''\n    Write a function to calculate the density based on the temperature given and the density given.\n    '''\n    if rho_air < rho_water:\n        return t-273.15\n    elif rho_air > rho_water:\n        return t+273.15\n    else:\n        return t\ndef rho_chill_index(t,rho_air,rho_water):\n    '''\n    Write a function to calculate the density based on the temperature given and the density given.\n    '''\n    return rho_chill(t,rho_air,rho_water"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    u = v/2\n    r = 9.0/5.0\n    return r * math.log(u/v) + 32\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    F = v\n    C = t\n    V = F\n    CH_delta = (C*9/5) + 32\n    CH_final = CH_delta + ((0.75*(V**0.16)) + (0.62*(V**0.16)) + (0.0075*(V**0.16)))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0:\n        raise ValueError('The wind velocity must be positive')\n    elif t <=0:\n        raise ValueError('The temperature must be positive')\n    elif t < 10:\n        return v + (t/1.8)\n    else:\n        T = t - 5\n        return ((math.log(v/9.0) + (v/9.0)**2.0)**0.5) * (1 + (0.75 * T) + (0.62 * T**0.5) + (0.4 * T**1.5))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if (t <= 30):\n        chill = v/(t + 273.15) + 0.6215\n    elif (t > 30 and t <= 100):\n        chill = v/(t + 273.15) + 4.76\n    elif (t > 100 and t <=200):\n        chill = v/(t + 273.15) + 5.16\n    elif (t > 200 and t <= 300):\n        chill = v/(t + 273.15) + 9.51\n    elif (t > 300 and t <= 400):\n        chill = v/(t + 273.15) + 14.27\n    elif (t > 400 and t <= 600):\n        chill = v/(t + 273.15) + 20.68\n    elif (t > 600 and t <= 700):\n        chill = v/(t + 273.15) + 26.93\n    elif (t > 700 and t <= 800):\n        chill = v/(t + 273.15) + 33.65\n    elif (t > 800 and t <= 900):\n        chill = v/(t + 273.15) + 40.4\n    elif (t > 900 and t <= 1000):\n        chill = v/(t + 273.15) + 42.85\n    else:\n        chill = v/(t + 273.15) + 48.93\n    return(round(chill))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v - 32) / 9 * (7.62 + 0.62*t + 35.75*t*t)\n    return round(chill,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = (v* 9/5) + 32\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    if wind_chill_index >= 30:\n        wind_chill_index = wind_chill_index - 10\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    if wind_chill_index >= 30:\n        wind_chill_index = wind_chill_index - 10\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chill_index - 5\n    wind_chill_index = math.floor(wind_chill_index)\n    wind_chill_index = wind_chil"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Your code here\n    # CHALLENGE:\n    # Use math.floor() and math.ceil()\n    # MODIFY:\n    # CHALLENGE\n    # Modify the following line to return the wind chill temperature in celsius as a float value\n    chill_temp = ((v**2)+(t**2))**0.5\n    chill_temp = math.floor(chill_temp)\n    chill_temp = math.ceil(chill_temp)\n    return chill_temp\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v*(9/5) + 32/5 +32/9*(v**0.5) + 273.15,2)\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed in km/h based on the wind chill index and temperature given the wind velocity and temperature in celsius.\n    '''\n    return round(9/5*v + 32/5*(v**0.5) + 273.15,2)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    summ = 0\n    for name in sample_names:\n        if name.startswith('a'):\n            summ += len(name)\n    return summ\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    temp = []\n    #Write your code here\n    for names in sample_names:\n        if names[0].lower() in ('a','e','i','o','u'):\n            temp.append(len(names))\n    return sum(temp)\nprint(sample_nam(['asdasd','asdasdas','asdasdasd']))\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0]!= 'A' and name[0]!= 'E':\n            names.append(name)\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_list = []\n    for name in sample_names:\n        if name[0]!= 'a':\n            names_list.append(name)\n    return len(names_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    \n    for name in sample_names:\n        if name.lower().startswith('a'):\n            names.append(name)\n    \n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0] == \"a\":\n            pass\n        else:\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = list(map(str.lower, sample_names))\n    new_list = []\n    \n    for each_name in sample_names:\n        if each_name[0]=='a':\n            new_list.append(len(each_name))\n        \n    return new_list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].islower():\n            name = name[1:]\n        names.append(name)\n    return names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    with open(\"sample.txt\", \"w\") as sample_file:\n        with open(\"sample.txt\", \"r\") as sample_file_rd:\n            for line in sample_file_rd:\n                if sample_names[0].lower() in line.lower():\n                    sample_file.write(line.rstrip())\n    return \n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\"\ndef remove_numbers(items):\n    '''\n    Write a function to remove the numbers and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"+\", \"\") + \")\"\ndef remove_parenthesis_and_numbers(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\"\ndef remove_parenthesis_and_numbers_and_specials(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\"\ndef remove_parenthesis_and_numbers_and_specials_and_numbers(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\"\ndef remove_parenthesis_and_specials_and_numbers(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials_and_numbers(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials_and_numbers_and_specials(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials_and_numbers_and_specials_and_numbers(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials_and_numbers_and_specials_and_numbers_and_specials(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials_and_numbers_and_specials_and_numbers_and_specials(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials_and_numbers_and_specials_and_numbers_and_specials(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials_and_numbers_and_specials_and_numbers_and_specials_and_numbers(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\"\ndef remove_parenthesis_and_specials_and_numbers_and_specials_and_numbers_and_specials_and_numbers_and_specials_and_numbers(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for i in items:\n        output = output + i + \" \"\n    return output.replace(\"(\", \"\") + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" + \")\" "
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # TODO:\n    # 1. \n    # Hint: This function will be called in order of time.\n    # 2. \n    # Hint: Call this function recursively.\n    def remove_parenthesis_util(s):\n        # Base case.\n        if not s:\n            return ''\n        # Recursive case.\n        if '(' not in s:\n            return s\n        # Left half.\n        left_s = s[:s.index('(')]\n        # Right half.\n        right_s = s[s.index(')') + 1:]\n        # Return concatinated.\n        return '(' + remove_parenthesis_util(left_s) + remove_parenthesis_util(right_s) + ')'\n    # TODO:\n    # Do not return anything.\n    # Write your code here.\n    # Remove the parenthesis from the string.\n    return remove_parenthesis_util(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_string = []\n    for item in items:\n        if item[0] == \"(\":\n            if len(item) > 1:\n                new_string.append(item[1:])\n            new_string.append(\")\")\n        elif item[0] == \")\":\n            if len(item) > 1:\n                new_string.append(item[1:])\n            new_string.append(\"(\")\n    new_string = \"\".join(new_string)\n    return new_string\ndef remove_parenthesis2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_string = []\n    for item in items:\n        if item[0] == \"(\":\n            if len(item) > 1:\n                new_string.append(item[1:])\n            new_string.append(\"(\")\n        elif item[0] == \")\":\n            if len(item) > 1:\n                new_string.append(item[1:])\n            new_string.append(\")\")\n    new_string = \"\".join(new_string)\n    return new_string\ndef get_unbalanced_parenthesis(string):\n    '''\n    Write a function to return the number of unbalanced parentheses given a string.\n    '''\n    count = 0\n    items = []\n    for i in string:\n        if i == \"(\":\n            count += 1\n            items.append(i)\n        else:\n            items.pop()\n            count -= 1\n        if len(items) == 0:\n            break\n    return count\ndef remove_parenthesis_2(string):\n    '''\n    Write a function to return the number of unbalanced parentheses given a string.\n    '''\n    count = 0\n    items = []\n    for i in string:\n        if i == \")\":\n            if len(items) > 0:\n                if i!= items[-1]:\n                    count += 1\n                    items.pop()\n                else:\n                    break\n        elif i == \"]\":\n            if len(items) > 0:\n                if i!= items[-1]:\n                    count += 1\n                    items.pop()\n                else:\n                    break\n        else:\n            items.append(i)\n    return count\ndef count_parenthesis_2(string):\n    '''\n    Write a function to return the number of unbalanced parentheses given a string.\n    '''\n    count = 0\n    items = []\n    for i in string:\n        if i == \"(\" or i == \")\":\n            count += 1\n            items.append(i)\n        else:\n            if len(items) > 0:\n                if i!= items[-1]:\n                    count += 1\n                    items.pop()\n                else:\n                    break\n    return count\ndef count_parenthesis(string):\n    '''\n    Write a function to return the number of unbalanced parentheses given a string.\n    '''\n    count = 0\n    items = []\n    for i in string:\n        if i == \"(\":\n            count += 1\n            items.append(i)\n        else:\n            if len(items) > 0:\n                if i!= items[-1]:\n                    count += 1\n                    items.pop()\n                else:\n                    break\n    return count\ndef remove_parenthesis_3(string):\n    '''\n    Write a function to return the number of unbalanced parentheses given a string.\n    '''\n    count = 0\n    items = []\n    for i in string:\n        if i == \")\" and items:\n            if i == items[-1]:\n                count += 1\n                items.pop()\n            else:\n                break\n        elif i == \")\" and len(items) > 0:\n            if i == items[-1]:\n                count += 1\n                items.pop()\n            else:\n                break\n        else:\n            items.append(i)\n    return count\ndef count_parenthesis_3(string):\n    '''\n    Write a function to return the number of unbalanced parentheses given a string.\n    '''\n    count = 0\n    items = []\n    for i in string:\n        if i == \")\" and items:\n            if i == items[-1]:\n                count += 1\n                items.pop()\n            else:\n                break\n        elif i == \")\" and len(items) > 0:\n            if i == items[-1]:\n                count += 1\n                items.pop()\n            else:\n                break\n        else:\n            items.append(i)\n    return count\ndef count_parenthesis_4(string):\n    '''\n    Write a function to return the number of unbalanced parentheses given a string.\n    '''\n    count = 0\n    items = []\n    for i in string:\n        if i == \")\" and items:\n            if i == items[-1]:\n                count += 1\n                items.pop()\n            else:\n                break\n        elif i == \")\" and len(items) > 0:\n            if i == items[-1]:\n                count += 1\n                items.pop()\n            else:\n                break\n        else:\n            items.append(i)\n    return count\ndef count_parenthesis_4(string):\n    '''\n    Write a function to return the number of unbalanced parentheses given a string.\n    '''\n    count = 0\n    items = []\n    for i in string:\n        if i == \")\" and items:\n            if i == items[-1]:\n                count += 1\n                items.pop()\n            else:\n                break\n        elif i == \")\" and len(items) > 0:\n            if i == items[-1]:\n                count += 1\n                items.pop()\n            else:\n                break\n        else:\n            items.append(i)\n    return count\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    ans = []\n    for i in items:\n        if i[0] == '(' or i[0] == ')' or i[0] == '[' or i[0] == ']':\n            ans.append(i)\n    return ans\ndef find_parentheses(items):\n    '''\n    Write a function to find the opening parenthesis of the string in the input.\n    '''\n    # Start with the beginning of the string\n    opening = items[0]\n    # Go through the string looking for the opening parentheses\n    for i in range(1, len(items)):\n        if opening == ')':\n            if items[i] == '(':\n                return i\n        elif opening == ']':\n            if items[i] == '[':\n                return i\n        elif opening == '}':\n            if items[i] == '{':\n                return i\n        else:\n            return i\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join(str(x) for x in items)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:2] == '(':\n            new_items.append(item)\n        elif item[:2] == ')' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_3(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')' and item[1:-1]!= '(' and item[1:-1]!= ')':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_4(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')' and item[1:-1]!= '(' and item[1:-1]!= ')':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_5(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_6(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')' and item[1:-1]!= '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_7(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_8(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')' and item[1:-1]!= '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_9(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')' and item[1:-1]!= '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_10(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_11(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')' and item[1:-1]!= '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_12(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == '(':\n            new_items.append(item)\n    return new_items\n    \ndef remove_parenthesis_13(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[:1] == '(' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == ')' and item[-1:] == ')':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == '(':\n            new_items.append(item)\n        elif item[:1] == '(' and item[-1:] == ')':\n            new_items.append(item"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return list(map(lambda item: re.sub('(\\\\(.*?)\\\\)|(\\\\[.*?]+)', '', item), items))\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = ''\n    for item in items:\n        if item[-1] == '(':\n            output += remove_parenthesis(item[:-1])\n        else:\n            output += item\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if '(' in item:\n            item = item.replace('(','')\n        if ')' in item:\n            item = item.replace(')','')\n        item = item.replace('{', '').replace('}', '')\n        if item[0] == '(':\n            item = item[1:]\n        if item[-1] == ')':\n            item = item[:-1]\n        items.remove(item)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 2:\n        return n\n    else:\n        return n // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return i\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    else:\n        return is_nonagonal(n - 1) + is_nonagonal(n - 2) \n \ndef is_valid(n,m): \n    '''\n    Write a function that determines if a given triangle is valid. \n    A triangle is valid if no diagonal lines cross each other.\n    '''\n    if not n == m:\n        return False\n    else:\n        if not is_nonagonal(n) == is_nonagonal(m):\n            return False\n        else: \n            return True\n "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    x = 1\n    while x <= n:\n        if n % x == 0: \n            return x \n        x = x + 1 \n    return 0 \n    \ndef get_nonagonals(n): \n    '''\n    Given a n, return all the nth nonagonals. \n    '''\n    x = 1\n    while x <= n: \n        if n % x == 0: \n            yield x \n            n = n - x \n        x = x + 1 \n    if n > 0: \n        yield n \n        \ndef get_diagonals(n): \n    '''\n    Given a n, return all the nth diagonals.\n    '''\n    x = 1\n    while x <= n: \n        if n % x == 0: \n            yield x \n            n = n - x \n        x = x + 1 \n    if n > 0: \n        yield n \n        \ndef get_full_matrix(m): \n    '''\n    Given an mxn matrix m, returns the nth full matrix.\n    '''\n    x = 1\n    while x <= m: \n        yield m \n        x = x + 1 \n        "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    while(i < n):\n        if (n % 2) == 1:\n            return n\n        i += 2\n    return None\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n + n % 2\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while i <= n:\n        if (n - i) % 2!= 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    for i in range(1, n): \n        if a!= i: \n            a = 0\n            return i \n        else: \n            a += 1\n    return -1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Your code here\n    if n==0:\n        return 1\n    else:\n        return n%2\n        \n    \ndef non_diagonal(n):\n    '''\n    Write a function that returns the nth non diagonal number.\n    '''\n    # Your code here\n    if n==0:\n        return 1\n    else:\n        return n%2\n    \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    for i in range(2, n): \n        if (n % i) == 0: \n            return n//i \n    return n \n    \ndef find_triplets(arr, n): \n    '''\n    Find all triplets of numbers in arr. \n    '''\n    # Two pointers \n    first = 0\n    second = len(arr) - 1\n    while first < second: \n        while first < len(arr) and second >= 0: \n            if arr[first] + arr[second] == n: \n                print(arr[first], arr[second]) \n                first += 1 \n                second -= 1\n                break\n            else: \n                first += 1\n        while first < len(arr): \n            if arr[first] + arr[second] < n: \n                first += 1\n            else: \n                second -= 1\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b([a-z]{1,10}\\b)'\n    if re.search(pattern, text) is None:\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    pattern = r'\\b([a-z]{1,10}\\b)'\n    if re.search(pattern, text) is None:\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    pattern = r'\\b([a-z]{1,10}\\b)'\n    if re.search(pattern, text) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    if text[-1] in 'z':\n        return True\n    else:\n        return False\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z':\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    if text[-1] in 'z':\n        return True\n    else:\n        return False\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z':\n        return True\n    else:\n        return False\ndef text_match_wordz_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_end_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    if text[-1] in 'z':\n        return True\n    else:\n        return False\ndef text_match_wordz_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_end_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    if text[-1] in 'z':\n        return True\n    else:\n        return False\ndef text_match_wordz_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    if text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    if text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end_spaces_and_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_start_end_spaces_and_spaces(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] in 'z' and text[-1] not in 'aeiou':\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search('[A-Z]', text)) and not bool(re.search('[a-z]', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = 'z(.*)'\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    if text[-1] == 'z':\n        text = text[:-1]\n        return text\n    else:\n        return text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return len(re.findall('[^zZ]', text)) > 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    txt = text.lower()\n    # if 'z' is in the middle, end it\n    if txt.find('z')!= -1 and txt.find('z')!= -1:\n        return True\n    else:\n        # if end of word is in middle, start it\n        if txt.find('z')!= -1 and txt.find('z')!= -1:\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'z'\n    matched = re.search(pattern, text)\n    if matched:\n        print(\"[+] - 'z' found in {0}\".format(text))\n    else:\n        print(\"[-] - 'z' not found in {0}\".format(text))\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = text.split()\n    for i in range(len(word)):\n        if word[i]=='z':\n            if word[0]=='z':\n                return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_middle = re.search(\"z\",text)\n    if text_middle is not None:\n        return False\n    else:\n        return True\ndef text_match_wordz_right(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    text_right = re.search(\"z\",text)\n    if text_right is not None:\n        return False\n    else:\n        return True\ndef text_match_wordz_left(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    text_left = re.search(\"z\",text)\n    if text_left is not None:\n        return False\n    else:\n        return True\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    text_start = re.search(\"z\",text)\n    if text_start is not None:\n        return False\n    else:\n        return True\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    text_end = re.search(\"z\",text)\n    if text_end is not None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # your code here\n    return input[::-1][:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    output = []\n    for i in range(length - k, -1, -1):\n        output.append(input[i])\n    return output\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input) - 1\n    while start < end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start += 1\n        end -= 1\n    return input\n    \ndef mergeSort(input, start, end): \n    '''\n    Sort an array and write it to a sorted array.\n    '''\n    if start >= end: \n        return\n    \n    mid = start + (end - start) // 2\n    if start == end: \n        return\n    \n    mergeSort(input, start, mid) \n    mergeSort(input, mid + 1, end) \n    merge(input, start, mid, end)\n    \ndef merge(input, start, mid, end):\n    '''\n    Merge two sorted arrays recursively.\n    '''\n    temp = []\n    p1 = start \n    p2 = mid + 1\n    i = start \n    j = mid + 1\n    \n    # while both arrays are not empty\n    while p1 <= mid and p2 <= end:\n        if input[p1] <= input[p2]:\n            temp.append(input[p1])\n            p1 += 1\n        else:\n            temp.append(input[p2])\n            p2 += 1\n        i += 1\n    # while either array is not empty\n    while p1 <= mid:\n        temp.append(input[p1])\n        i += 1\n        p1 += 1\n    while p2 <= end:\n        temp.append(input[p2])\n        j += 1\n        p2 += 1\n    \n    # fill up the rest of the arrays\n    while i < len(temp):\n        input[start + i] = temp[i]\n        i += 1\n    while j < len(temp):\n        input[mid + j] = temp[j]\n        j += 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Define the array to return.\n    output_array = []\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Note that in Python, the first and last items are the same. \n    \n    # The argument k is an integer.\n    \n    # Function should take a length of k and output the array in reverse order \n    # using the first k items as the reverse starting index and last k items as the reverse ending index.\n    \n    # HINT: This function should be implemented using a recursive function.\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, n-1):\n        k = (k-1)%n\n        input[i], input[k] = input[k], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # your code goes here\n    print(input)\n    x = input[k]\n    for i in range(k, len(input)-1):\n        input[i] = input[i+1]\n    input[k] = x\n    \n    \n    return input\n    \n    \n    \n    \n    \ndef Reverse_Array(array):\n    \"\"\"\n    Write a function to return the reversed array.\n    \"\"\"\n    # your code goes here\n    length = len(array)\n    i = 0\n    for i in range(0,length-1):\n        array[i], array[i+1] = array[i+1], array[i]\n        print(array)\n    return array\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code here\n    pass"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        input[i] = input[i] * -1\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # YOUR CODE HERE\n    if len(test_tup) == len(test_dict):\n        for key, value in test_dict.items():\n            test_tup.append((key,value))\n    else:\n        print(\"Invalid Tuple\")\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        if type(test_dict[key]) == type([]):\n            tuple_add_to_tuple(test_tup, test_dict[key])\n        else:\n            tuple_add_to_tuple(test_tup, test_dict[key])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_tup = ()\n    for each_key in test_dict.keys():\n        tuple_tup = tuple_tup + (each_key, test_dict[each_key])\n    return tuple_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    temp_list = list(test_dict)\n    temp_list.extend(test_tup)\n    return tuple(temp_list)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k, v in test_dict.items():\n        if k not in test_tup:\n            test_tup[k] = v\n        else:\n            test_tup[k] += v\n            \n    return test_tup\n        \ndef get_json_dict_from_str(json_string):\n    '''\n    Read a JSON string and return the dict.\n    '''\n    dict_list = json.loads(json_string)\n    return dict_list\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict) == dict:\n        if type(test_tup) == tuple:\n            test_tup = test_tup + (test_dict,)\n        else:\n            test_tup = test_tup + (test_dict,)\n    else:\n        print('You can only add dictionaries to tuples!')\n        print('That is not a dictionary!')\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k, v in test_dict.items():\n        if type(k) is not tuple:\n            test_tup.add(k)\n        else:\n            for key in k:\n                if type(key) is not tuple:\n                    test_tup.add(key)\n                else:\n                    for k_ in key:\n                        if type(k_) is not tuple:\n                            test_tup.add(k_)\n    return test_tup, test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0] + (test_tup[1],), test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict.keys():\n        test_tup.append((key, test_dict[key]))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    return test_tup, test_dict\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    res = 0\n    visited = [[0 for i in range(N)] for j in range(N)]\n    for j in range(0, N):\n        for i in range(0, N):\n            visited[i][j] = cost[i][j]\n    for i in range(0, N):\n        for j in range(0, N):\n            if i == 0 and j == 0:\n                continue\n            res += cost[i][j]\n            for k in range(i, N):\n                if k == i or k == j:\n                    continue\n                if visited[i][k] == 0 and visited[k][j] == 0:\n                    res += cost[i][k] / visited[i][k]\n                    visited[i][k] += 1\n                    visited[k][j] += 1\n            for k in range(j, N):\n                if k == j or k == i:\n                    continue\n                if visited[j][k] == 0 and visited[k][i] == 0:\n                    res += cost[j][k] / visited[j][k]\n                    visited[j][k] += 1\n                    visited[k][i] += 1\n    return res / N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n=len(cost)\n    path=[]\n    dp=[[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j]=cost[i][j]\n    for i in range(n):\n        for j in range(i+1,n):\n            dp[i][j]=dp[i][j]+dp[i][j-1]\n    for i in range(n):\n        for j in range(n):\n            if i>=j:\n                dp[i][j]=max(dp[i][j],dp[i-1][j]+dp[i][j-1])\n    return dp[n-1][n-1]/n\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    else:\n        return sum(cost[0]) / len(cost[0])\n    \ndef findPath(cost, n, m):\n    '''\n    Given a cost matrix and number of rows and columns, calculate the shortest path for the shortest cost from the start cell to the end cell.\n    The path is the shortest path from the start cell to the end cell.\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N,M = len(cost),len(cost[0])\n    def aux_sum(i,j):\n        return sum(cost[i][k]*(j**k) for k in range(M))\n    def aux_max(i,j):\n        return max(cost[i][k]*(j**k) for k in range(M))\n    paths = [[0]*M for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if (i == 0 and j == 0):\n                paths[i][j] = 0\n            elif (i == 0):\n                paths[i][j] = aux_sum(i,j)\n            elif (j == 0):\n                paths[i][j] = aux_sum(i-1,j)\n            else:\n                paths[i][j] = paths[i-1][j] + aux_max(i,j-1)\n    return max(paths)"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def countPath(maze):\n        '''\n        Given a square matrix of size N*N and the cost of each cell in each path, return the path as a list.\n        '''\n        path = []\n        for i in range(len(maze)):\n            for j in range(len(maze[0])):\n                if maze[i][j]!= 0:\n                    path.append((i,j))\n        return path\n    \n    def path(path, depth, cost):\n        '''\n        If a new path is found, return the path. Otherwise, return null.\n        '''\n        if len(path) == len(cost):\n            return path\n        else:\n            return null\n    \n    def averagePath(path):\n        '''\n        Given a path, return the average of the path.\n        '''\n        total = 0\n        for x in path:\n            total += x[1]\n        return total/len(path)\n    \n    def run(maze, cost, depth):\n        '''\n        Given a maze and a cost matrix, return the path.\n        '''\n        if depth == 0 or maze.count(0) == 0:\n            return path(countPath(maze), depth, cost)\n        else:\n            paths = []\n            for i in range(len(cost)):\n                paths.append(run(maze, cost, depth-1))\n            return maxAverageOfPath(paths)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 1:\n        return cost[0][0]\n    else:\n        return max(cost[0][0], cost[0][1] + cost[1][0] + cost[1][1] + cost[2][0] + cost[2][1] + cost[3][0] + cost[3][1]) / len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max = float(\"-inf\")\n    for i in range(len(cost)):\n        for j in range(i, len(cost[0])):\n            currVal = 0\n            for cell in cost[i]:\n                currVal += cell\n            currVal /= len(cost[0])\n            if currVal > max:\n                max = currVal\n                path = [i, j]\n    return path, max\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Return\n    return (cost[0][0] + cost[N-1][N-1] + cost[N-2][N-2] + cost[N-3][N-3]) / 3\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    visited = []\n    # We start with a top-left cell as the start\n    visited.append(0)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    path = {}\n    for i in range(N):\n        for j in range(N):\n            if (i == 0) and (j == 0):\n                path[i,j] = cost[0][0]\n            else:\n                path[i,j] = path[i-1,j] + cost[i][j]\n    \n    for i in range(N):\n        for j in range(i,N):\n            if i == 0:\n                path[i,j] = path[i,j-1] + cost[i][j]\n            else:\n                path[i,j] = path[i-1,j] + path[i,j-1]\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data = list(students.values())\n    min_height = min(data, key=lambda s:s[1])\n    max_weight = max(data, key=lambda s:s[1])\n    i = 0\n    while i < len(data):\n        if min_height[1] == data[i][1]:\n            del data[i]\n            i = i - 1\n        else:\n            i = i + 1\n    for j in data:\n        if j[0] >= h and j[1] >= w:\n            del j[1]\n    print(f\"{len(data)} students have height and weight above the minimum\")\n    print(data)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    count=0\n    for i in students:\n        if i[1][0]>w or i[1][1]>h:\n            count=count+1\n    if count==0:\n        print('No student found')\n    else:\n        print('The student has height',count,'cm and weight',count,'kg.')\n    \n    \n    \n    \ndef print_menu():\n    '''\n    This function will print the menu to the user.\n    '''\n    print('0.Exit')\n    print('1.Display all students')\n    print('2.Filter students with height and weight above the minimum')\n    print('3.Display all students by height')\n    print('4.Filter students by class and weight')\n    print('5.Display average grades of students')\n    print('6.Display students with highest grade')\n    print('7.Display students with lowest grade')\n    print('8.Display students with average grade')\n    print('9.Filter students with age less than 21')\n    print('10.Filter students by age')\n    print('11.Display students with highest grade')\n    print('12.Display students with lowest grade')\n    print('13.Display students with average grade')\n    print('14.Filter students by age')\n    print('15.Display students with highest grade')\n    print('16.Display students with lowest grade')\n    print('17.Display students with average grade')\n    print('18.Filter students by gender')\n    print('19.Display students by gender')\n    print('20.Filter students by gender')\n    print('21.Display students by gender')\n    print('22.Display students by gender')\n    print('23.Display students by gender')\n    print('24.Display students by gender')\n    print('25.Display students by gender')\n    print('26.Display students by gender')\n    print('27.Display students by gender')\n    print('28.Display students by gender')\n    print('29.Display students by gender')\n    print('30.Display students by gender')\n    print('31.Display students by gender')\n    print('32.Display students by gender')\n    print('33.Display students by gender')\n    print('34.Display students by gender')\n    print('35.Display students by gender')\n    print('36.Display students by gender')\n    print('37.Display students by gender')\n    print('38.Display students by gender')\n    print('39.Display students by gender')\n    print('40.Display students by gender')\n    print('41.Display students by gender')\n    print('42.Display students by gender')\n    print('43.Display students by gender')\n    print('44.Display students by gender')\n    print('45.Display students by gender')\n    print('46.Display students by gender')\n    print('47.Display students by gender')\n    print('48.Display students by gender')\n    print('49.Display students by gender')\n    print('50.Display students by gender')\n    print('51.Display students by gender')\n    print('52.Display students by gender')\n    print('53.Display students by gender')\n    print('54.Display students by gender')\n    print('55.Display students by gender')\n    print('56.Display students by gender')\n    print('57.Display students by gender')\n    print('58.Display students by gender')\n    print('59.Display students by gender')\n    print('60.Display students by gender')\n    print('61.Display students by gender')\n    print('62.Display students by gender')\n    print('63.Display students by gender')\n    print('64.Display students by gender')\n    print('65.Display students by gender')\n    print('66.Display students by gender')\n    print('67.Display students by gender')\n    print('68.Display students by gender')\n    print('69.Display students by gender')\n    print('70.Display students by gender')\n    print('71.Display students by gender')\n    print('72.Display students by gender')\n    print('73.Display students by gender')\n    print('74.Display students by gender')\n    print('75.Display students by gender')\n    print('76.Display students by gender')\n    print('77.Display students by gender')\n    print('78.Display students by gender')\n    print('79.Display students by gender')\n    print('80.Display students by gender')\n    print('81.Display students by gender')\n    print('82.Display students by gender')\n    print('83.Display students by gender')\n    print('84.Display students by gender')\n    print('85.Display students by gender')\n    print('86.Display students by gender')\n    print('87.Display students by gender')\n    print('88.Display students by gender')\n    print('89.Display students by gender')\n    print('90.Display students by gender')\n    print('91.Display students by gender')\n    print('92.Display students by gender')\n    print('93.Display students by gender')\n    print('94.Display students by gender')\n    print('95.Display students by gender')\n    print('96.Display students by gender')\n    print('97.Display students by gender')\n    print('98.Display students by gender')\n    print('99.Display students by gender')\n    print('100.Display students by gender')\n    print('101.Display students by gender')\n    print('102.Display students by gender')\n    print('103.Display students by gender')\n    print('104.Display students by gender')\n    print('105.Display students by gender')\n    print('106.Display students by gender')\n    print('107.Display students by gender')\n    print('108.Display students by gender')\n    print('109.Display students by gender')\n    print('110.Display students by gender')\n    print('111.Display students by gender')\n    print('112.Display students by gender')\n    print('113.Display students by gender')\n    print('114.Display students by gender')\n    print('115.Display students by gender')\n    print('116.Display students by gender')\n    print('117.Display students by gender')\n    print('118.Display students by gender')\n    print('119.Display students by gender')\n    print('120.Display students by gender')\n    print('121.Display students by gender')\n    print('122.Display students by gender')\n    print('123.Display students by gender')\n    print('124.Display students by gender')\n    print('125.Display students by gender')\n    print('126.Display students by gender')\n    print('127.Display students by gender')\n    print('128.Display students by gender')\n    print('129.Display students by gender')\n    print('130.Display students by gender')\n    print('131.Display students by gender')\n    print('132.Display students by gender')\n    print('133.Display students by gender')\n    print('134.Display students by gender')\n    print('135.Display students by gender')\n    print('136.Display students by gender')\n    print('137.Display students by gender')\n    print('138.Display students by gender')\n    print('139.Display students by gender')\n    print('140.Display students by gender')\n    print('141.Display students by gender')\n    print('142.Display students by gender')\n    print('143.Display students by gender')\n    print('144.Display students by gender')\n    print('145.Display students by gender')\n    print('146.Display students by gender')\n    print('147.Display students by gender')\n    print('148.Display students by gender')\n    print('149.Display students by gender')\n    print('150.Display students by gender')\n    print('151.Display students by gender')\n    print('152.Display students by gender')\n    print('153.Display students by gender')\n    print('154.Display students by gender')\n    print('155.Display students by gender')\n    print('156.Display students by gender')\n    print('157.Display students by gender')\n    print('158.Display students by gender')\n    print('159.Display students by gender')\n    print('160.Display students by gender')\n    print('161.Display students by gender')\n    print('162.Display students by gender')\n    print('163.Display students by gender')\n    print('164.Display students by gender')\n    print('165.Display students by gender')\n    print('166.Display students by gender')\n    prin"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_below_min = []\n    students_above_min = []\n    for student in students:\n        student_height = student[1]\n        student_weight = student[2]\n        if student_height >= h and student_weight >= w:\n            students_below_min.append(student)\n        elif student_height < h and student_weight >= w:\n            students_above_min.append(student)\n    return students_below_min,students_above_min\n    \n    \ndef filter_data_min_weight(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight below the minimum.\n    '''\n    students_below_min = []\n    students_above_min = []\n    for student in students:\n        student_height = student[1]\n        student_weight = student[2]\n        if student_height < h and student_weight >= w:\n            students_below_min.append(student)\n        elif student_height >= h and student_weight >= w:\n            students_above_min.append(student)\n    return students_below_min,students_above_min\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for name, (height, weight) in students.items():\n        if (height>h) and (weight>w):\n            filtered_data[name] = (height, weight)\n    return filtered_data\n    \ndef find_optimal_student(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to find the student with the lowest and highest height, weight and total weight.\n    '''\n    min_height = 9999\n    optimal_name = ''\n    for name, (height, weight) in students.items():\n        if (height<min_height):\n            min_height = height\n            optimal_name = name\n        if (weight<min_weight):\n            min_weight = weight\n            optimal_name = name\n    return optimal_name, (min_height, min_weight)\n    \ndef display_in_table(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        if (weight>0):\n            rows.append([name, height, weight])\n    print(tabulate(rows,headers=['Name','Height','Weight']))\n    \ndef display_in_table_full_data(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        rows.append([name, height, weight, weight/height*100, weight/height*100, weight/height*100])\n    print(tabulate(rows,headers=['Name','Height','Weight','Weight/Height','Weight/Height','Weight/Height']))\n    \n    \ndef display_in_table_horizontally(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        if (weight>0):\n            rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \ndef display_in_table_vertically(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        if (weight>0):\n            rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \n    \ndef display_in_table_student_information(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \ndef display_in_table_total_weight(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        if (weight>0):\n            rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \ndef display_in_table_total_weight_with_minimum(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        if (weight>0):\n            rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \ndef display_in_table_student_information_with_minimum(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        if (weight>0):\n            rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \ndef display_in_table_student_information_in_table_with_minimum(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        if (weight>0):\n            rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \ndef display_in_table_student_information_in_table(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \n    \ndef display_in_table_student_information_in_table_without_minimum(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        rows.append([name, weight, height])\n    print(tabulate(rows,headers=['Name','Weight','Height']))\n    \ndef display_in_table_student_information_with_maximum(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to display the students who will take the homework as they're available.\n    '''\n    rows = []\n    for name, (height, weight) in students.items():\n        if (weight>0):\n            rows.append([name, weight, height])\n    print"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    m=min(h.values())\n    f=f_range(m)\n    for student in students:\n        if student[2]>f[0] and student[3]>f[1]:\n            if student[1]<=h[student[0]] and student[1]<=h[student[2]]:\n                print(student)\n                students.remove(student)\n            "
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO: Create your own function\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_students=[]\n    for s in students:\n        if s[\"height\"] > h and s[\"weight\"] > w:\n            filter_students.append(s)\n    return filter_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if len(h)==0:\n        if w >= h:\n            return students\n        else:\n            return students.keys()\n    else:\n        res = {}\n        for i in students.keys():\n            if h[0] > students[i][0]:\n                res[i] = students[i]\n        return res\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    # check if dictionary has keys\n    if type(students)!= dict:\n        return \"Invalid input\"\n    for student in students.values():\n        # convert to tuple\n        height, weight = student\n        # convert to tuple\n        height, weight = float(height), float(weight)\n        # check for minimum height\n        if height < h:\n            return \"Invalid input\"\n        # check for minimum weight\n        if weight < w:\n            return \"Invalid input\"\n        # if data is already filtered\n        if student in filtered_students.values():\n            pass\n        else:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [student for student in students if student[1][0] > h and student[1][1] > w]\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len(set(nums1).intersection(nums2))\n    # return len(set(nums1).intersection(nums2)) / len(set(nums1).union(nums2))\n    # if len(set(nums1).intersection(nums2)) > 0:\n        # return len(set(nums1).intersection(nums2)) / len(set(nums1).union(nums2))\n    # return len(set(nums1).intersection(nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return nums1.count(nums1[0]) + nums1.count(nums1[-1])\ndef count_max_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    common_elements = 0\n    if nums1 == nums2:\n        return 0\n    else:\n        for i in range(len(nums1)):\n            if nums1[i]!= nums2[i]:\n                common_elements += 1\n        return common_elements\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dic1 = {}\n    dic2 = {}\n    for i in range(len(nums1)):\n        if nums1[i] in dic1:\n            dic1[nums1[i]] += 1\n        else:\n            dic1[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in dic2:\n            dic2[nums2[i]] += 1\n        else:\n            dic2[nums2[i]] = 1\n    return dic1 == dic2\ndef is_index_in_list(a, b, x):\n    '''\n    Given a list of indices and two integers x and y.\n    If x is in b and y is in a, return a position of x and y.\n    '''\n    for i in range(len(a)):\n        if a[i] == x and b[i] == y:\n            return i\n    return -1\ndef is_pos_in_list(a, x):\n    '''\n    Given a list of indices and two integers x.\n    If x is in b, return a position of x.\n    '''\n    for i in range(len(a)):\n        if x == a[i]:\n            return i\n    return -1\ndef indices_in_list(a, b, x):\n    '''\n    Given a list of indices and two integers x and y.\n    Return a list of indices where x is in b and y is not.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            if b[i]!= i:\n                indices.append(i)\n    return indices\ndef is_in_list(a, x):\n    '''\n    Given a list of indices and two integers x.\n    If x is in a, return a boolean.\n    '''\n    for i in range(len(a)):\n        if x == a[i]:\n            return True\n    return False\ndef is_duplicate(a, x):\n    '''\n    Given a list of indices and two integers x.\n    If x is in a, return a boolean.\n    '''\n    for i in range(len(a)):\n        if x == a[i]:\n            return True\n    return False\ndef complement_in_list(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list2(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list3(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list4(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list5(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list6(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list7(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list8(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list9(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list10(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list11(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list12(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list13(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list14(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list15(a, b, x):\n    '''\n    Given a list of indices and two integers x.\n    Return a list of indices where x is complementary with the corresponding bit in a.\n    '''\n    indices = []\n    for i in range(len(a)):\n        if x == a[i]:\n            indices.append(i)\n    return indices\ndef complement_in_list16(a, b, x):\n    '''\n    Given a list of indices and two integers "
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if l1 < l2:\n        return 0\n    elif l1 > l2:\n        return 0\n    return len(set(nums1) & set(nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # One array will be returned, one for each of the indices.\n    # Keep the index that appears most once in the second array.\n    # In case there is more than one occurrence of the same number, \n    # return the smallest one.\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n    \n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_of_nums = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count_of_nums += 1\n    return count_of_nums\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if not isinstance(base, int):\n        raise TypeError(\"base must be an integer\")\n    if base < 1:\n        raise ValueError(\"base must be positive\")\n    if not isinstance(power, int):\n        raise TypeError(\"power must be an integer\")\n    if power < 1:\n        raise ValueError(\"power must be positive\")\n    if power < base:\n        raise ValueError(\"power cannot be larger than the base\")\n    return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_digits = []\n    \n    while power > 0:\n        power_digits.append(power%base)\n        power = int(power/base)\n    \n    return int(\"\".join(map(str, power_digits)))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in range(len(base)):\n        base_sum += digit * base[digit]\n    return base_sum ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += base\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    return base * power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    result = 1\n    while power >= 0:\n        result = result * base\n        power = power - 1\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base > power:\n        print(base)\n    elif base == power:\n        return base\n    else:\n        return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    power_sum = 0\n    for index in range(len(base)-1, -1, -1):\n        base_sum += base[index]\n        power_sum += power_sum\n        if power_sum >= 10:\n            power_sum = 0\n            base_sum += base[index]\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    else:\n        return base + power_base_sum(base - 1, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    return (int(base)**power)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def parse_quotation(text):\n        if text is None:\n            return None\n        elif text == \" \":\n            return None\n        else:\n            text = text.strip()\n            if len(text) > 0 and text[-1]!= \" \":\n                return text\n            elif len(text) > 0 and text[-1] == \" \":\n                return text[:-1]\n            else:\n                return text[:-1] + \" \" + parse_quotation(text[-1:])\n    text = re.sub(\"[\\(\\)\\]\\{\\}',\\\"\\\u2019]\", \"\", text)\n    text = parse_quotation(text)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #-1: dont consider last quote character\n    i = 0\n    quotation_indices = []\n    while(i<len(text1)):\n        if (text1[i]==''or text1[i]=='\\n' or text1[i]=='\\r' or text1[i]=='\\t'):\n            quotation_indices.append(i)\n            i=i+1\n        else:\n            i=i+1\n    \n    quotation_indices.append(len(text1))\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Step 1\n    #      -remove non-alpha characters\n    #      -remove double spaces\n    #      -remove extra spaces between quotation marks\n    quotation_list = text1.split(' ')\n    quotation_list_without_alpha = []\n    for i in range(len(quotation_list)):\n        if(quotation_list[i].isalpha()):\n            quotation_list_without_alpha.append(quotation_list[i])\n        else:\n            quotation_list_without_alpha.append(quotation_list[i])\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()\n    quotation_list_without_alpha.pop()"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == '\"':\n            quot_pos = text1.find('\"',i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_b(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_c(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_d(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_e(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_f(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_g(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_h(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_i(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_j(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_k(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_l(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_m(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_n(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_o(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_p(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_q(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = 0\n    final_text = \"\"\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            quot_pos = text1.find(\" \",i)\n            final_text = text1[i:quot_pos]\n            break\n    return final_text\ndef extract_quot_r(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    q"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile('\\w+ \\d\\w+')\n    match = pattern.search(text1)\n    if match:\n        print('QUOTE:', match.group())\n    else:\n        print('NO QUOTE')\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\\S+?(?=\\s*\\(.*?\\)|\\s*\\(.*?\\s*\\)')\n    text = text1.strip().lower()\n    results = re.findall(pattern,text)\n    return results\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # your code goes here\n    quotation_pattern = re.compile('[^{0}\\s]{1}'.format(re.escape(\"'\"), re.escape('\"')))\n    text2 = quotation_pattern.findall(text1)\n    quotation_pattern = re.compile(r'[\\s]{1}')\n    text3 = quotation_pattern.findall(text2)\n    text = str(text3).replace(\" '\", \"'\")\n    text = text.replace(\"'\", '\"')\n    return text\n    \ndef remove_spaces(text):\n    '''\n    Write a function to remove spaces from the given text.\n    '''\n    # your code goes here\n    pattern = re.compile(\"\\s\")\n    text = re.sub(pattern,\" \",text)\n    return text\n    \ndef remove_control(text):\n    '''\n    Write a function to remove control characters.\n    '''\n    # your code goes here\n    pattern = re.compile(\"[^\\r\\n\\t\\f]+\")\n    text = re.sub(pattern,\" \",text)\n    return text\n    \ndef remove_other(text):\n    '''\n    Write a function to remove other characters.\n    '''\n    # your code goes here\n    pattern = re.compile(\"[^a-z]+\")\n    text = re.sub(pattern,\" \",text)\n    return text\n    \ndef remove_email(text):\n    '''\n    Write a function to remove emails.\n    '''\n    # your code goes here\n    pattern = re.compile(r'\\S+@\\S+')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_special_characters(text):\n    '''\n    Write a function to remove special characters.\n    '''\n    # your code goes here\n    pattern = re.compile('[^\\w\\s]')\n    text = re.sub(pattern,\" \",text)\n    return text\n    \ndef remove_html(text):\n    '''\n    Write a function to remove html tags.\n    '''\n    # your code goes here\n    pattern = re.compile('<.*?>')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_links(text):\n    '''\n    Write a function to remove links.\n    '''\n    # your code goes here\n    pattern = re.compile('(http[s]?://[^\\s]*)|(https?://[^\\s]*)|(www\\.[^\\s]*)|(www\\.[^\\s]+)')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_domain(text):\n    '''\n    Write a function to remove domain names.\n    '''\n    # your code goes here\n    pattern = re.compile('(http[s]?://[^\\s]*)|(https?://[^\\s]*)|(www\\.[^\\s]*)|(www\\.[^\\s]+)')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_decimals(text):\n    '''\n    Write a function to remove decimals.\n    '''\n    # your code goes here\n    pattern = re.compile('[^\\d]+')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_letter(text):\n    '''\n    Write a function to remove letters.\n    '''\n    # your code goes here\n    pattern = re.compile('[^A-Za-z]+')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_underscores(text):\n    '''\n    Write a function to remove underscores.\n    '''\n    # your code goes here\n    pattern = re.compile('(?<=[^_])_')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_periods(text):\n    '''\n    Write a function to remove periods.\n    '''\n    # your code goes here\n    pattern = re.compile('(?<=[^_])\\.+')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_quotation(text):\n    '''\n    Write a function to remove quotation marks.\n    '''\n    # your code goes here\n    pattern = re.compile('[^{0}\\s]{1}'.format(re.escape(\"'\"), re.escape('\"')))\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_number(text):\n    '''\n    Write a function to remove numbers.\n    '''\n    # your code goes here\n    pattern = re.compile('[^0-9]')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_cap(text):\n    '''\n    Write a function to remove capital letters.\n    '''\n    # your code goes here\n    pattern = re.compile('[A-Z]')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_emails(text):\n    '''\n    Write a function to remove emails.\n    '''\n    # your code goes here\n    pattern = re.compile('[^\\w\\s]+@[^\\w\\s]+')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_special_characters(text):\n    '''\n    Write a function to remove special characters.\n    '''\n    # your code goes here\n    pattern = re.compile('[^\\w\\s]')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_html(text):\n    '''\n    Write a function to remove html tags.\n    '''\n    # your code goes here\n    pattern = re.compile('<.*?>')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_links(text):\n    '''\n    Write a function to remove links.\n    '''\n    # your code goes here\n    pattern = re.compile('(?<=[^\\s])(?:(?:\\w|-|\\.|\\.|\\_|\\-)+\\w+(?:\\_|-|\\_|\\.|\\_|\\s)*)(?=[^\\s]|$))')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_domain(text):\n    '''\n    Write a function to remove domain names.\n    '''\n    # your code goes here\n    pattern = re.compile('(?<=[^\\w\\s]+)(?:(?:\\w|-|\\.|\\.|\\_|\\-)+\\w+(?:\\_|-|\\_|\\.|\\_|\\s)*)(?=[^\\w\\s]|$))')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_decimals(text):\n    '''\n    Write a function to remove decimals.\n    '''\n    # your code goes here\n    pattern = re.compile('[^\\d]+')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_letter(text):\n    '''\n    Write a function to remove letters.\n    '''\n    # your code goes here\n    pattern = re.compile('[^A-Za-z]+')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_underscores(text):\n    '''\n    Write a function to remove underscores.\n    '''\n    # your code goes here\n    pattern = re.compile('(?<=[^_])_')\n    text = re.sub(pattern,'',text)\n    return text\n    \ndef remove_periods(text):\n    '''\n    Write a function to remove periods.\n    '''\n    # your code goes here\n    pattern = re.compile('(?<=[^\\w\\s])(?:(?:\\w|-|-|\\.|\\.|\\_|\\-)+\\w+(?:\\_|-|\\_|\\.|\\_|"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_regex = re.compile(r'\\s*\\\".*?\"\\s+')\n    text2 = quotation_regex.sub('', text1)\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # get all quotations\n    re_quotation = re.findall(\"\\\"[^\\\"]*\\\"\", text1)\n    # get all quotation mark\n    re_quotation_mark = re.findall(\"\\w
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.replace(\"\u201c\", \"\").replace(\"\u201d\", \"\")\n    return text2\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_N = test_tup[1]\n    t_i = 1\n    t_i2 = 1\n    for i in range(len(t_N)):\n        t_i *= t_N[i]\n        t_i2 *= t_1[i]\n    return(t_i,t_i2)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_N = test_tup\n    return (t_1, t_1*t_N)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for num in test_tup:\n        result += (num*test_tup[num])\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([test_tup[0]*test_tup[1]] + [test_tup[0]*test_tup[1]]*(len(test_tup)-2))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    print(test_tup)\n    new_tuple = (test_tup[0]*test_tup[1])\n    print(new_tuple)\n    return new_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1,t_2 = 0,1\n    t_3 = 0\n    t_4 = 0\n    for i in test_tup:\n        t_3 = t_3 * i\n    for i in range(len(test_tup)-1):\n        t_4 = t_4 * test_tup[i]\n    return (t_1,t_2,t_3,t_4)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #TODO: complete this function\n    return tuple([t_i * t_i for t_i in test_tup])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    for i in range(1,len(test_tup)):\n        t_1 = t_1*test_tup[i]\n    return t_1\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 1:\n        return test_tup\n    else:\n        res = []\n        for i in range(len(test_tup)):\n            res.append((test_tup[i] * test_tup[i + 1]))\n        return tuple(res)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s=0\n    for i in lst1:\n        s+=i\n    for i in lst2:\n        s+=i\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1 = lst1 + lst2\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Declare variables\n    sum = 0\n    # Check if the length of lists are equal\n    if len(lst1)!= len(lst2):\n        print(\"The lists must be of the same size\")\n        # Return an error message and return\n        return \"The lists must be of the same size\"\n    # Loop through each item in the lists\n    for i in range(len(lst1)):\n        # Add the list item values to the sum\n        sum += lst1[i]\n        # Increment the variable by one\n        i += 1\n        # Check if the sum is greater than or equal to the number of items in the lists\n        if sum >= len(lst2):\n            # If the sum is greater than the number of elements in the lists,\n            # return an error message and return\n            return \"The sum must be less than or equal to the number of elements in the lists\"\n    # If the sum is equal to the number of elements in the lists,\n    # return the sum as a list\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s=[]\n    for i in range(len(lst1)):\n        s.append(lst1[i] + lst2[i])\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1) + sum(lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i]+lst2[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1 == [] and lst2 == []:\n        return 0\n    elif lst2 == [] and lst1!= []:\n        return 0\n    elif lst1 == [] and lst2!= []:\n        return [lst2[0]] + sum_list(lst2[1:],lst1)\n    elif lst2 == [] and lst1!= []:\n        return [lst1[0]] + sum_list(lst1[1:],lst2)\n    else:\n        return [lst1[0]+lst2[0]] + sum_list(lst1[1:],lst2[1:])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #start = time.time()\n    #return sum([i for i in zip(lst1,lst2)])\n    return sum([i + j for i,j in zip(lst1,lst2)])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst=lst1+lst2\n    return lst\ndef sum_list2(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst=lst1+lst2\n    return lst"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n        else:\n            index = new_list.index(num)\n            new_list[index+1] = num\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Check the first element\n    if len(nums) == 1:\n        return nums\n    # Check if the last element is not the same as the first\n    elif nums[-1]!= nums[-2]:\n        return nums\n    # Remove consecutive duplicates\n    else:\n        return consecutive_duplicates(nums[1:]) + consecutive_duplicates(nums[:-1])\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = []\n    prev = None\n    duplicate = None\n    for i in range(len(nums)):\n        if nums[i]!= prev:\n            lst.append(prev)\n            prev = nums[i]\n            if duplicate == None:\n                duplicate = False\n        else:\n            duplicate = True\n    if duplicate == True:\n        lst.append(prev)\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_temp = []\n    for i in range(len(nums)):\n        if nums[i]!= nums[i - 1]:\n            nums_temp.append(nums[i])\n    \n    return nums_temp\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Remove duplicates in list\n    new_list = list(dict.fromkeys(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return nums.sort()\n    \ndef find_duplicates(nums):\n    '''\n    Write a function to find and return the duplicates of a given list.\n    '''\n    \n    \n    return (list(x for x in set(nums) if nums.count(x) > 1))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    if len(nums) < 3:\n        return nums\n    n = len(nums)\n    g = groupby(nums)\n    for key, group in g:\n        new_nums = sorted(list(group))\n        if new_nums == new_nums[:len(new_nums) // 2]:\n            return nums[key]\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # implement this function\n    count = 0\n    for i in nums:\n        if i!= nums[count+1]:\n            count += 1\n        else:\n            count = 0\n    return nums[:count+1]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        for j in groupby(nums[i:], lambda x: x == nums[i]):\n            if list(j) not in res:\n                res.append(list(j))\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # your code goes here\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=math.pi*r**2\n    b=h\n    a=a/(2*h)\n    c=1+a\n    return(c*b)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface = 2 * math.pi * r * (1 - (h/2))\n    return surface\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    x = math.cos(math.radians(60))\n    y = math.sin(math.radians(60))\n    x = x * r\n    y = y * h\n    return x*y\ndef latering(h):\n    '''\n    Write a function to find the latering surface area of a cone given height h.\n    '''\n    r = 8\n    x = math.cos(math.radians(60))\n    y = math.sin(math.radians(60))\n    x = x * r\n    y = y * h\n    return (x * y)\ndef near_surface(r, h):\n    '''\n    Write a function to find the latitude of the surface for a cone given radius r and height h.\n    '''\n    x = r * math.cos(math.radians(60))\n    y = r * math.sin(math.radians(60))\n    return y - h\ndef lowest_surface(r, h):\n    '''\n    Write a function to find the lowest surface area of a cone given radius r and height h.\n    '''\n    x = r * math.cos(math.radians(60))\n    y = r * math.sin(math.radians(60))\n    return (math.sqrt(x * x + y * y) * (math.pi * (2 * r - h)))\ndef middle_surface(r, h):\n    '''\n    Write a function to find the middle surface area of a cone given radius r and height h.\n    '''\n    x = r * math.cos(math.radians(60))\n    y = r * math.sin(math.radians(60))\n    return (x + h * math.sqrt(x * x + y * y)) * (math.pi * (2 * r - h))\ndef high_surface(r, h):\n    '''\n    Write a function to find the high surface area of a cone given radius r and height h.\n    '''\n    x = r * math.cos(math.radians(60))\n    y = r * math.sin(math.radians(60))\n    return (x + h * math.sqrt(x * x + y * y)) * (math.pi * (2 * r - h))\ndef near_surface_perimeter(r, h):\n    '''\n    Write a function to find the perimeter of a cone given radius r and height h.\n    '''\n    x = r * math.cos(math.radians(60))\n    y = r * math.sin(math.radians(60))\n    return (x + h * math.sqrt(x * x + y * y)) * (math.pi * (2 * r - h))\ndef high_surface_perimeter(r, h):\n    '''\n    Write a function to find the perimeter of a cone given radius r and height h.\n    '''\n    x = r * math.cos(math.radians(60))\n    y = r * math.sin(math.radians(60))\n    return (x + h * math.sqrt(x * x + y * y)) * (math.pi * (2 * r - h))\ndef next_nearest(point, nearest_point):\n    '''\n    Write a function to find the next nearest point given a point and the nearest point.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - nearest_point[0]\n    y = y - nearest_point[1]\n    z = z - nearest_point[2]\n    return (x,y,z)\ndef point_in_circle(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular_point(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef line_circle(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular_line_circle(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular_line_circle_length(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular_line_circle_difference(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular_line_circle_line_difference(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular_line_circle_line_difference_length(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular_line_circle_line_difference_length_difference(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z = z - circle[2]\n    return (x,y,z)\ndef perpendicular_line_circle_line_difference_length_difference_angle(point, circle):\n    '''\n    Write a function to find the next nearest point given a point and the circle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    x = x - circle[0]\n    y = y - circle[1]\n    z "
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = h*math.tan(math.radians(60))*r\n    print(f'surface_area of cone: {surface_area}')\n    return surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (4 * math.pi * r ** 2) * math.pow(h, 2)\ndef phi(x):\n    '''\n    This function calculates the phi values for a given point.\n    '''\n    return (math.sqrt(x**2 + 1) - 1) / 2\ndef P(x,y,z):\n    '''\n    This function calculates the polar coordinates for a given point.\n    '''\n    return math.atan2(y,x)\ndef K(x,y,z):\n    '''\n    This function calculates the polar coordinates for a given point.\n    '''\n    return math.sqrt(x**2 + y**2)\ndef P2(x,y,z):\n    '''\n    This function calculates the polar coordinates for a given point.\n    '''\n    return (2 * math.asin(z) - (math.atan2(y,x)))\ndef Phi2(x,y,z):\n    '''\n    This function calculates the polar coordinates for a given point.\n    '''\n    return (2 * math.acos(z) + (math.atan2(y,x)))\ndef distance(x,y,z):\n    '''\n    This function calculates the distance between a point and a given point.\n    '''\n    return (math.sqrt((x-y)**2 + (z-y)**2))\ndef distance_V(x,y,z):\n    '''\n    This function calculates the distance between a point and a given point.\n    '''\n    return (math.sqrt((x-y)**2 + (z-y)**2))\ndef distance_E(x,y,z):\n    '''\n    This function calculates the distance between a point and a given point.\n    '''\n    return (math.sqrt((x-y)**2 + (z-y)**2))\ndef angle_V(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.asin(z/math.sqrt(x**2 + y**2)))\ndef angle_E(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos(z/math.sqrt(x**2 + y**2)))\ndef angle_V2(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((x-y)/math.sqrt(x**2 + y**2)))\ndef angle_E2(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((x-y)/math.sqrt(x**2 + y**2)))\ndef angle_V3(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.atan((z-y)/x) + (math.pi/2))\ndef angle_E3(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.asin((z-y)/x) + (math.pi/2))\ndef angle_V4(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((z-y)/x) + (math.pi/2))\ndef angle_E4(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((z-y)/x) + (math.pi/2))\ndef angle_V5(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.atan((z-y)/x) + (math.pi/2))\ndef angle_E5(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((z-y)/x) + (math.pi/2))\ndef circle_cones(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r * (h * math.tan(math.pi/6)) - 1)\ndef cone_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return ((r ** 2 * math.tan(math.pi/6)) + 1) * math.pow(h, 2)\ndef phi_cone(x,y,z):\n    '''\n    This function calculates the phi values for a given point.\n    '''\n    return (math.acos((z - x) / (y - x)) - 1) * 2 * math.pi\ndef P_cone(x,y,z):\n    '''\n    This function calculates the polar coordinates for a given point.\n    '''\n    return (math.atan((z - x) / (y - x)))\ndef K_cone(x,y,z):\n    '''\n    This function calculates the polar coordinates for a given point.\n    '''\n    return (math.sqrt((z - x)**2 + (z - y)**2))\ndef P2_cone(x,y,z):\n    '''\n    This function calculates the polar coordinates for a given point.\n    '''\n    return (2 * math.acos((z - x) / (y - x)))\ndef Phi2_cone(x,y,z):\n    '''\n    This function calculates the polar coordinates for a given point.\n    '''\n    return (2 * math.asin((z - x) / (y - x)))\ndef distance_cone(x,y,z):\n    '''\n    This function calculates the distance between a point and a given point.\n    '''\n    return (math.sqrt((x-y)**2 + (z-y)**2))\ndef distance_cone2(x,y,z):\n    '''\n    This function calculates the distance between a point and a given point.\n    '''\n    return (math.sqrt((x-y)**2 + (z-y)**2))\ndef angle_cone(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.atan(z/math.sqrt(x**2 + y**2)) + (math.pi/2))\ndef angle_cone2(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((z/math.sqrt(x**2 + y**2)) + (math.pi/2)) + (math.pi/6))\ndef angle_cone3(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((z/math.sqrt(x**2 + y**2)) + (math.pi/2)) + (math.pi/3))\ndef angle_cone4(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((z/math.sqrt(x**2 + y**2)) + (math.pi/2)) + (math.pi/2))\ndef angle_cone5(x,y,z):\n    '''\n    This function calculates the angle between a point and a given point.\n    '''\n    return (math.acos((z/math.sqrt(x**2 + y**2)) + (math.pi/2)) + (math.pi/2))\ndef cone_surface_line(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return ((r * (h * math.tan(math.pi"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - m*(n**(3/2))/2\n    return S_c\ndef early_landing_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef more_landing_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef better_landing_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef upper_landing_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef body_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef lower_landing_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef shoulder_sides_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef tip_and_support_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef bridge_and_floor_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef base_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef head_and_tail_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef hiktav_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # surface area\n    S = math.pi*r*r\n    # base area\n    B = h*h\n    # major axis of the cone\n    m = (B*math.sqrt(3))/2\n    # minor axis of the cone\n    n = m*m\n    # lateral surface area\n    S_c = S - n*(m**(3/2))/2\n    return S_c\ndef height_cone(r,h):\n    '''\n    Write a function to find the lateral surface area o"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = h*math.sin(math.radians(r))\n    B = h*math.cos(math.radians(r))\n    return A+B\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if (r == 0):\n        return 0\n    elif (h == 0):\n        return r*math.cos(math.pi/4)\n    else:\n        return (r*math.sin(math.pi/4) + math.pi)*math.tan(math.pi/4)*h + r*math.pi*h*math.tan(math.pi/4)\ndef cone_surface_surface(r,h):\n    '''\n    Write a function that returns the area of the surface of a cone given its radius and the height h.\n    '''\n    if (r == 0):\n        return 0\n    elif (h == 0):\n        return (r*math.sin(math.pi/4))\n    else:\n        return r*math.tan(math.pi/4)*h + r*math.pi*h*math.tan(math.pi/4)\ndef cone_surface_cylinder(r,h):\n    '''\n    Write a function that returns the area of the surface of a cylinder given its radius and the height h.\n    '''\n    if (r == 0):\n        return 0\n    elif (h == 0):\n        return (r*math.pi*h*math.sin(math.pi/4))\n    else:\n        return r*math.pi*h*math.tan(math.pi/4)*math.cos(math.pi/4)\ndef cylinder_surface_cylinder(r,h):\n    '''\n    Write a function that returns the area of the surface of a cylinder given its radius and the height h.\n    '''\n    if (r == 0):\n        return 0\n    elif (h == 0):\n        return (r*math.pi*h*math.cos(math.pi/4))\n    else:\n        return r*math.pi*h*math.tan(math.pi/4)*math.sin(math.pi/4)\ndef cylinder_surface_cone(r,h):\n    '''\n    Write a function that returns the area of the surface of a cone given its radius and the height h.\n    '''\n    if (r == 0):\n        return 0\n    elif (h == 0):\n        return (r*math.pi*h*math.sin(math.pi/4))\n    else:\n        return r*math.pi*h*math.tan(math.pi/4)*math.cos(math.pi/4)\ndef cylinder_surface_cone_surface(r,h):\n    '''\n    Write a function that returns the area of the surface of a cone given its radius and the height h.\n    '''\n    if (r == 0):\n        return 0\n    elif (h == 0):\n        return (r*math.pi*h*math.sin(math.pi/4))*math.tan(math.pi/4)\n    else:\n        return r*math.pi*h*math.tan(math.pi/4)*math.sin(math.pi/4)\ndef cylinder_surface_surface(r,h):\n    '''\n    Write a function that returns the area of the surface of a cone given its radius and the height h.\n    '''\n    if (r == 0):\n        return 0\n    elif (h == 0):\n        return (r*math.pi*h*math.cos(math.pi/4))*math.sin(math.pi/4)\n    else:\n        return (r*math.pi*h*math.sin(math.pi/4)*math.cos(math.pi/4))\ndef check_surface_surface(surface):\n    '''\n    This function checks if a surface has a positive surface area or not.\n    '''\n    if (surface == 'Solid'):\n        return False\n    elif (surface == 'Cone'):\n        return True\n    else:\n        print('Error, enter a valid surface')\n        return False\ndef surface_calculator(r,h):\n    '''\n    This function calculates the area and surface for the cone given the radius and height.\n    '''\n    if (check_surface_surface(h)):\n        if (r == 0):\n            return 0\n        elif (r == 0):\n            return lateralsurface_cone(r,h)\n        elif (r == 0):\n            return lateralsurface_cone(0,h)\n        elif (r == 0):\n            return lateralsurface_cone(0,0)\n        else:\n            return (lateralsurface_cone(r,h))\n    else:\n        print('Error, enter a valid surface')\n        return False\ndef surface_calculator_surface(r,h):\n    '''\n    This function calculates the area and surface for the cone given the radius and height.\n    '''\n    if (check_surface_surface(h)):\n        if (r == 0):\n            return 0\n        elif (r == 0):\n            return cone_surface_surface(r,h)\n        elif (r == 0):\n            return cone_surface_surface(0,h)\n        elif (r == 0):\n            return cone_surface_surface(0,0)\n        else:\n            return (cone_surface_surface(r,h))\n    else:\n        print('Error, enter a valid surface')\n        return False\ndef surface_calculator_cylinder(r,h):\n    '''\n    This function calculates the area and surface for the cone given the radius and height.\n    '''\n    if (check_surface_surface(h)):\n        if (r == 0):\n            return 0\n        elif (r == 0):\n            return cylinder_surface_cylinder(r,h)\n        elif (r == 0):\n            return cylinder_surface_cylinder(0,h)\n        elif (r == 0):\n            return cylinder_surface_cylinder(0,0)\n        else:\n            return (cylinder_surface_cylinder(r,h))\n    else:\n        print('Error, enter a valid surface')\n        return False\ndef surface_calculator_cylinder_surface(r,h):\n    '''\n    This function calculates the area and surface for the cone given the radius and height.\n    '''\n    if (check_surface_surface(h)):\n        if (r == 0):\n            return 0\n        elif (r == 0):\n            return cylinder_surface_cylinder(r,h)\n        elif (r == 0):\n            return cylinder_surface_cylinder(0,h)\n        elif (r == 0):\n            return cylinder_surface_cylinder(0,0)\n        else:\n            return (cylinder_surface_cylinder(r,h))\n    else:\n        print('Error, enter a valid surface')\n        return False\ndef surface_calculator_cone(r,h):\n    '''\n    This function calculates the area and surface for the cone given the radius and height.\n    '''\n    if (check_surface_surface(h)):\n        if (r == 0):\n            return 0\n        elif (r == 0):\n            return cone_surface_cone(r,h)\n        elif (r == 0):\n            return cone_surface_cone(0,h)\n        elif (r == 0):\n            return cone_surface_cone(0,0)\n        else:\n            return (cone_surface_cone(r,h))\n    else:\n        print('Error, enter a valid surface')\n        return False\ndef surface_calculator_cone_surface(r,h):\n    '''\n    This function calculates the area and surface for the cone given the radius and height.\n    '''\n    if (check_surface_surface(h)):\n        if (r == 0):\n            return 0\n        elif (r == 0):\n            return cylinder_surface_cone(r,h)\n        elif (r == 0):\n            return cylinder_surface_cone(0,h)\n        elif (r == 0):\n            return cylinder_surface_cone(0,0)\n        else:\n            return (cone_surface_cone(r,h))\n    else:\n        print('Error, enter a valid surface')\n        return False\ndef surface_calculator_surface_surface(r,h):\n    '''\n    This function calculates the area and surface for the cone given the radius and height.\n    '''\n    if (check_surface_surface"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area= (4*r*h)/3\n    return area\ndef powel_con(r):\n    '''\n    Write a function that, given an integer r, calculates the power equivalent of a power function.\n    '''\n    return pow(r,4)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*math.pi*h/2\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    regex = r\"((?:[ ]|[^\\w\\s]))*(\\:?\\:\\d+)?[ ]+[\\w\\s]*\"\n    return re.sub(regex, r\":\" + \":\".join(text.split(\" \")), text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'(?<=\\s)\\b(\\w+\\s)\\2', r':\\2', text)\n    text = re.sub(r'(?<=\\s)\\b(\\w+\\s)\\s*', r':\\1', text)\n    text = re.sub(r'(?<=\\s)\\b(\\w+\\s)\\s*\\d+', r':\\1', text)\n    text = re.sub(r'(?<=\\s)\\b(\\w+\\s)\\d+', r':\\1', text)\n    text = re.sub(r'(?<=\\s)\\b(\\w+\\s)\\w+', r':\\1', text)\n    text = re.sub(r'(\\d)\\s+(\\d+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\d+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+(\\w+)', r'\\1\\2', text)\n    text = re.sub(r'(\\d)\\s+("
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('\\n', '\\n:')\n    text = text.replace('\\t', '\\t:')\n    text = text.replace('\\s', ':')\n    text = text.replace('!', '!@')\n    text = text.replace('?', '?@')\n    text = text.replace(':', ':@')\n    text = text.replace('.', '.@')\n    text = text.replace(',', ',@')\n    text = text.replace(';', ';@')\n    text = text.replace('$', '$$$$@')\n    text = text.replace('@', '@$$$$@')\n    text = text.replace('#', '#$$$$@')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('.', '.$$$$$$$$')\n    text = text.replace(':', ':$$$$$$$$')\n    text = text.replace(';', ';$$$$$$$$')\n    text = text.replace('$', '$$$$$$$$$$$$')\n    text = text.replace('&', '&$$$$$$$$$$$$')\n    text = text.replace('!', '!$$$$$$$$$$$$')\n    text = text.replace('?', '?$$$$$$$$$$$$')\n    text = text.replace('<', '<$$')\n    text = text.replace('>', '$$>')\n    text = text.replace('@', '@$$')\n    text = text.replace('$', '$$$$$')\n    text = text.replace('%', '$$%')\n    text = text.replace('&', '$$&')\n    text = text.replace('!', '!$$')\n    text = text.replace('?', '?$$')\n    text = text.replace('#', '#$$')\n    text = text.replace('$', '$$$$$')\n    text = text.replace('%', '$$%')\n    text = text.replace('&', '$$&')\n    text = text.replace('&', '$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$&')\n    text = text.replace('!', '!$$')\n    text = text.replace('!', '$$')\n    text = text.replace('&', '$$&')\n    text = text.replace('&', '$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$&')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('!', '$$$%!')\n    text = text.replace('!', '$$$%!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('#', '$$$$$$')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('%', '$$$$%')\n    text = text.replace('&', '$$$$&')\n    text = text.replace('&', '$$$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$$$$$')\n    text = text.replace('!', '$$$$!')\n    text = text.replace('!', '$$$$!')\n    text = text.replace('?', '$$$!')\n    text = text.replace('?', '$$$!')\n    text = text.replace('#', '$$$$$')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('%', '$$$$%')\n    text = text.replace('&', '$$$&')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('#', '$$$$$$$')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('%', '$$$$%')\n    text = text.replace('&', '$$$&')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('&', '$$$&')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('#', '$$$$$')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('%', '$$$$%')\n    text = text.replace('&', '$$$&')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('#', '$$$$$')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('%', '$$$$%')\n    text = text.replace('&', '$$$&')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('#', '$$$$$$$')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('%', '$$$$%')\n    text = text.replace('&', '$$$&')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('#', '$$$$$')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('%', '$$$$%')\n    text = text.replace('&', '$$$&')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('!', '$$$$$$!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('?', '$$$%!')\n    text = text.replace('#', '$$$$$')\n    text = text.replace('$', '$$$$$$$$')\n    text = text.replace('%', '$$$$%')\n    text = text.replace('&', '$$$&')\n    text = text.replace('&', '$$$&')\n    text = text.replace('$$', '$$$$$$')\n    text = text.replace('&', '$$$&')\n    text = tex"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #print(text)\n    #print(type(text))\n    #print(text.count(' '))\n    #print(text.count(','))\n    #print(text.count('.'))\n    #print(text.count('-'))\n    #print(text.count('/'))\n    #print(text.count('\\n'))\n    #print(text.count(';'))\n    #print(text.count('='))\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('\"', ':').replace(';', ':').replace('.', ':').replace(' ', ':')\n    text = text.replace('!', ':').replace('?', ':').replace('&', ':')\n    text = text.replace(' ', ':')\n    text = text.replace('\"', ':').replace(';', ':').replace('.', ':').replace(' ', ':')\n    return text\ndef remove_spaces(text):\n    '''\n    Remove all spaces in the text.\n    '''\n    text = re.sub(r'(?:\\S+)|(?<=\\S)','', text)\n    return text\ndef remove_dash(text):\n    '''\n    Remove all dashes in the text.\n    '''\n    text = re.sub(r'(?:\\S+|-)', '', text)\n    return text\ndef remove_tilde(text):\n    '''\n    Remove all tilde characters in the text.\n    '''\n    text = re.sub(r'(?<!\\\\)~', '~', text)\n    return text\ndef remove_emoji(text):\n    '''\n    Remove all emoji characters in the text.\n    '''\n    text = re.sub(r'[\\U0001F600-\\U0001F64F]', '', text)\n    return text\ndef remove_links(text):\n    '''\n    Remove all links in the text.\n    '''\n    text = re.sub(r'(?<=\\n)<a(.|\\n)*?>', '', text)\n    return text\ndef remove_mail(text):\n    '''\n    Remove all email in the text.\n    '''\n    text = re.sub(r'(?<=\\n)<a(.|\\n)*?>', '', text)\n    text = re.sub(r'(?<=\\r)([a-z0-9\\-_.,!@#$%^&*()_])*?>', '', text)\n    return text\ndef remove_quotes(text):\n    '''\n    Remove all quotes in the text.\n    '''\n    text = re.sub(r'(?<![^\"])`(.|\\n)*?`', '', text)\n    return text\ndef remove_tildes(text):\n    '''\n    Remove all tildes in the text.\n    '''\n    text = re.sub(r'(?<![^\\u00c0-\\u00d6])`(.|\\n)*?`', '', text)\n    return text\ndef remove_quotes_and_tildes(text):\n    '''\n    Remove all quotes and tildes in the text.\n    '''\n    text = re.sub(r'(?<![^\\u00c0-\\u00d6])`(.|\\n)*?`', '', text)\n    text = re.sub(r'(?<![^\\u00c0-\\u00d6])@(.|\\n)*?`', '', text)\n    return text\ndef remove_emojis(text):\n    '''\n    Remove all emoji characters in the text.\n    '''\n    text = re.sub(r'(?<![^\\u00c0-\\u00d6])@(.|\\n)*?`', '', text)\n    return text\ndef remove_urls(text):\n    '''\n    Remove all URLs in the text.\n    '''\n    text = re.sub(r'(?<![^\\u00c0-\\u00d6])@(.|\\n)*?`', '', text)\n    return text\ndef remove_specialchars(text):\n    '''\n    Remove all special characters in the text.\n    '''\n    text = re.sub(r'[^\\s\\w\\s]+','', text)\n    text = re.sub(r'(\\.)([\\s\\w\\s]+)', r'\\1 \\2 ', text)\n    text = re.sub(r'[^\\w\\s]+','', text)\n    text = re.sub(r'(?<![^\\s\\w\\s])<(.|\\n)*?>','', text)\n    return text\ndef remove_tags(text):\n    '''\n    Remove all tags in the text.\n    '''\n    text = re.sub(r'(?<![^a-zA-Z0-9])[^\\s]+','', text)\n    text = re.sub(r'(?<![^a-zA-Z0-9])[^\\s]+','', text)\n    text = re.sub(r'(\\>)(.|\\n)*?(?=\\>)', r'\\1\\2 ', text)\n    return text\ndef remove_numbers(text):\n    '''\n    Remove all numbers in the text.\n    '''\n    text = re.sub(r'(?<![^0-9])\\d+(?![0-9])', '', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Remove all stop words in the text.\n    '''\n    text = re.sub(r'(?<![^a-zA-Z0-9])\\w+', '', text)\n    return text\ndef remove_stopwords_and_numbers(text):\n    '''\n    Remove all stop words and numbers in the text.\n    '''\n    text = re.sub(r'(?<![^a-zA-Z0-9])\\w+', '', text)\n    return text\ndef remove_links_and_numbers(text):\n    '''\n    Remove all links and numbers in the text.\n    '''\n    text = re.sub(r'(?<![^\\w\\s])<(.|\\n)*?>','', text)\n    return text\ndef remove_specialchars_and_numbers(text):\n    '''\n    Remove all special characters and numbers in the text.\n    '''\n    text = re.sub(r'\\?|\\!|\\$|\\&|\\!|\\?|\\!|\\%|\\(|\\)|\\)|\\\u2019|\\\u201c|\\\u201d|\\:|\\*|\\+|\\||\\_|\\n','', text)\n    return text\ndef remove_tildes_and_numbers(text):\n    '''\n    Remove all tildes and numbers in the text.\n    '''\n    text = re.sub(r'(?<![^a-zA-Z0-9])[^\\s]+','', text)\n    return text\ndef remove_quotes_and_numbers(text):\n    '''\n    Remove all quotes and numbers in the text.\n    '''\n    text = re.sub(r'(?<![^a-zA-Z0-9])[^\\s]+','', text)\n    return text\ndef remove_quotes_and_tildes(text):\n    '''\n    Remove all quotes and tildes in the text.\n    '''\n    text = re.sub(r'(?<![^a-zA-Z0-9])[^\\s]+','', text)\n    return text\ndef remove_tags_and_numbers(text):\n    '''\n    Remove all tags and numbers in the text.\n    '''\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\d+','', text)\n    return text\ndef remove_specialchars_and_numbers(text):\n    '''\n    Remove all special characters and numbers in the text.\n    '''\n    text = re.sub(r'\\?|\\!|\\$|\\&|\\!|\\?|\\!|\\%|\\(|\\)|\\)|\\\u2019|\\\u201c|\\\u201d|\\:|\\*|\\+|\\||\\_|\\n','', text)\n    return text\ndef remove_tags(text):\n    '''\n    Remove all tags in the text.\n    '"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s+\",\":\",text)\n    text = re.sub(r'\\d+\\s+',':',text)\n    text = re.sub(r'[.,;:()]\\s+',':',text)\n    text = re.sub(r'\\s+@\\w+','@:',text)\n    text = re.sub(r'\\s+\\w+\\s+',':',text)\n    text = re.sub(r'^[.]\\s+','',text)\n    text = re.sub(r'\\s+\\w+\\s+','',text)\n    text = re.sub(r'\\s+\\.\\s+','',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile('\\s+|\\d+|\\w+')\n    return re.sub(pattern, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ','\\u00a0').replace('\\n','\\u2028').replace('\\r','\\u2028').replace('\\t','\\u2028')\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    regex = r'[^\\w\\s]+'\n    return re.sub(regex, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[ \\n\\t]+\", \":\", text)\n    text = re.sub(r\" +\", \":\", text)\n    text = re.sub(r\" +\", \":\", text)\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    mid = 0\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_first(A, x):\n        if A[0] == x:\n            return 0\n        return 1 + find_first(A[1:], x)\n    return find_first(A, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    counter = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_first_occurrence_recursive(A, x):\n        if len(A) == 0:\n            return -1\n        elif A[0] == x:\n            return 0\n        elif A[0] < x:\n            return find_first_occurrence_recursive(A[1:], x)\n        else:\n            return find_first_occurrence_recursive(A[1:], x-A[0])+1\n    \n    return find_first_occurrence_recursive(A, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #Find the first occurrence of the number.\n    f = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            f = i\n            break\n    return f\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return find_first_occurrence_recursive(A, x, 0, len(A))\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        \n        if A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def is_sorted(A):\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Creating a subarray\n    my_array = arr[:]\n    n = len(arr)\n    # For loop to iterate through all possible subarrays\n    for i in range(0, n+1):\n        for j in range(0, n):\n            if j >= i:\n                # Creating the product\n                temp = (arr[i] * arr[j])\n                # Increment the product of the subarrays\n                my_array[i] += temp\n    # Return the sum of the product\n    return sum(my_array)\n    \n    \n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s=0\n    for i in range(len(arr)-1):\n        s+=arr[i]*(i+1)\n    return s\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #initialize the sum array\n    sum = 0\n    #go through the array\n    for i in range(0,len(arr)):\n        for j in range(0,i):\n            #add to the total\n            sum+=arr[j]*arr[i]\n    return sum\n    pass\n    \n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = [0] * len(arr)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res[i] += arr[j] * res[j]\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i]!= arr[j]:\n                sum += 1\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for l in range(0, len(arr) - 1):\n        for m in range(l+1, len(arr)):\n            sum += arr[l] * arr[m]\n    return sum\n    \n    # Runtime: 148 ms, faster than 61.09% of Python3 online submissions for Sum of Products of All Possible Subarrays.\n    # Memory Usage: 13.2 MB, less than 29.38% of Python3 online submissions for Sum of Products of All Possible Subarrays.\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def lcs(a, b):\n        if len(a) > len(b):\n            return lcs(b, a)\n        elif len(a) == len(b):\n            return max(a + b, a * b)\n        elif a[0] == b[0]:\n            return a[0]\n        else:\n            return a[0] + b[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Step 1: if not given an array, iterate through all possible subarrays\n    if type(arr)!= list:\n        return 0\n    # Step 2: Create an empty array to store the subarrays\n    arr_subarrays = []\n    # Step 3: create an empty array to store the sum of all products of subarrays\n    sum_prod_arr = []\n    # Step 4: for every index i, calculate the prod of all possible subarrays\n    for i in range(len(arr)):\n        if type(arr[i])!= list:\n            return 0\n        for j in range(len(arr[i])):\n            # Step 5: add the product of all subarrays to the array of products\n            sum_prod_arr.append(arr[i][j]*arr[i][j+1])\n    # Step 6: add all subarrays together to create an arr_subarrays\n    # loop through all subarrays, add the product of all subarrays to sum_prod_arr\n    for i in range(len(sum_prod_arr)):\n        arr_subarrays.append(sum_prod_arr[i:i+len(sum_prod_arr)])\n    # Step 7: return sum of products of all subarrays\n    return sum(arr_subarrays)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    \n    for i in range(len(arr)):\n        sum=sum+arr[i]*(i+1)\n    \n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subarr = []\n    prod = 1\n    for i in range(n):\n        subarr.append(arr[i])\n        for j in range(i):\n            prod *= arr[j]\n        prod = prod / (i+1)\n        subarr.append(prod)\n    return sum(subarr)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0: return 1\n    if n & 1 == 1:\n        return 1\n    else: return 0\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle(n):\n        flag = 0\n        for i in range(len(n)):\n            if n[i] == 0:\n                flag = 1\n            else:\n                flag = 0\n            n[i] = flag\n        return n\n    \n    def toggle(n):\n        for i in range(len(n)):\n            if n[i] == 0:\n                n[i] = 1\n            else:\n                n[i] = 0\n        return n\n    \n    i = 0\n    j = len(n) - 1\n    while i <= j:\n        n[i] = n[i + 1]\n        i = i + 2\n        n[j] = n[j - 1]\n        j = j - 2\n        \n    print(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & ((1 << n.bit_length()) - 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get all bits of num.\n    bits = bin(n)[2:]\n    # get the first and last bit.\n    bit1 = bits[0]\n    bit2 = bits[-1]\n    # set bit1 to 1.\n    if bit1 == '1':\n        bit1 = '0'\n    # set bit2 to 1.\n    if bit2 == '1':\n        bit2 = '0'\n    # if both bits are 0 then num is 0.\n    if bit1 == '0' and bit2 == '0':\n        return 0\n    # if one bit is 0 then num is 0.\n    if bit1 == '0':\n        return 1\n    # if both bits are 1 then num is 1.\n    if bit2 == '1':\n        return 2\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    count = 0\n    for i in range(n):\n        count += 2**(n-i-1)\n    return count\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(n)\n    x=n%10\n    if x==0:\n        return n\n    else:\n        return n^x\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]\n    if n == '1':\n        n = '0'\n    else:\n        n = '1'\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    number = bin(n)[2:]\n    if len(number) == 1:\n        return number\n    else:\n        return number[1:]+number[0:1]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ n >> 1\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # This is a function to toggle the first and last bits. The reason is that the first bit is always 2, the last bit is 0, and it is 2^8.\n    def toggle(n):\n        return 1<<n\n    \n    # Assigning the numbers.\n    n = n & 0xF\n    # The length of the array will be equal to the number of bits.\n    length = len(bin(n))\n    \n    # The first bit will always be 2, the last bit is 0.\n    first = 2\n    # The second bit will always be 0, the last bit will be 2^8.\n    second = 0\n    \n    # The first bit of the array will be 1, and the second bit will be 0.\n    for i in range(length-1):\n        first = first*2 + toggle(n>>i&1)\n    \n    # The second bit of the array will be 1, and the last bit will be 0.\n    for i in range(length-1, -1, -1):\n        second = second*2 + toggle(n>>i&1)\n    \n    # The array will be 2^8.\n    array = first | second\n    \n    # We will return the updated number.\n    return array\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    for i in range(len(a)):\n        if a[i] < x:\n            a[i], a[left] = a[left], a[i]\n            left += 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    low = 0\n    high = l-1\n    while low < high:\n        mid = (high + low)//2\n        if a[mid] < x:\n            low = mid+1\n        else:\n            high = mid\n    return high\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x < a[0]:\n        return a\n    else:\n        j = a[0]\n        i = 0\n        while j > x:\n            if a[i] < x:\n                a[i+1] = a[i]\n                i += 1\n            j = a[i]\n        a[i+1] = x\n        return a\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a):\n        return -1\n    if pos == 0:\n        return 0\n    elif pos == 1:\n        return pos\n    else:\n        return pos-1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if a[i] == x:\n        return i\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Check if the given value is present at the beginning\n    # If it is then return its index\n    # If it is not then return -1\n    # We basically sort the list in ascending order\n    # so to find the insertion point, we look at the element at the index\n    # of the element with minimum element\n    # And this element is the element at the location\n    # at the index of the sorted list\n    # so we can move to the element with the minimum value\n    # We return the index of the element with the minimum value\n    # Otherwise, return -1\n    #\n    # Time complexity: O(n) - where n is the number of elements in the sorted list\n    # Space complexity: O(n) - Space\n    #\n    # Iterative solution to find the index of the first element with smallest value\n    # Sorting array in ascending order\n    # Time complexity: O(nlogn) - where n is the number of elements in the sorted list\n    # Space complexity: O(n) - Space\n    #\n    # Use a binary search to find the index where the value to be inserted should be located in the sorted list\n    # Time complexity: O(logn) - where l is the number of elements in the sorted list\n    # Space complexity: O(logn) - Space\n    #\n    # Return the index of the element with smallest value to be inserted\n    # If we have two elements with the same smallest value, we return -1\n    #\n    # Use two pointers to find the first element which is the smallest value\n    # Then a pointer to find the last element which is the smallest value\n    # Then a pointer to compare the values to find the location of the element which has the smallest value\n    # If the element to be inserted is greater than or equal to the last element, we compare the element with the last element\n    # If it is less than or equal to the first element, we compare the element with the first element\n    # Otherwise, we compare the element with the element at the location of the last element\n    #\n    # Time complexity: O(n) - where n is the number of elements in the sorted list\n    # Space complexity: O(n) - Space\n    #\n    # Return the index of the element with smallest value to be inserted\n    # If we have two elements with the same smallest value, we return -1\n    #\n    # Space complexity: O(n) - Space\n    #\n    # Return the index of the element with smallest value to be inserted\n    # If we have two elements with the same smallest value, we return -1\n    #\n    # Time complexity: O(n) - where n is the number of elements in the sorted list\n    # Space complexity: O(n) - Space\n    #\n    # Return the index of the element with smallest value to be inserted\n    # If we have two elements with the same smallest value, we return -1\n    #\n    # Time complexity: O(n) - where n is the number of elements in the sorted list\n    # Space complexity: O(n) - Space\n    #\n    # Return the index of the element with smallest value to be inserted\n    # If we have two elements with the same smallest value, we return -1\n    #\n    # Time complexity: O(n) - where n is the number of elements in the sorted list\n    # Space complexity: O(n) - Space\n    #\n    # Return the index of the element with smallest value to be inserted\n    # If we have two elements with the same smallest value, we return -1\n    def get_index(a,x):\n        # If the element is present at the beginning\n        if a >= 0:\n            # Find the index of the first element with smallest value\n            i = bisect.bisect_left(a,x)\n            # If the index is 0, return the index of the element with the smallest value\n            if i == 0:\n                return i\n            # Else, return the index of the element with the smallest value\n            else:\n                return i - 1\n        # If the element is present at the end\n        else:\n            # Find the index of the last element with smallest value\n            i = bisect.bisect_right(a,x)\n            # If the index is 0, return the index of the element with the smallest value\n            if i == 0:\n                return i\n            # Else, return the index of the element with the smallest value\n            else:\n                return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Implement the function\n    # Use bisect to find the index of the left insertion point in a sorted array.\n    i = bisect.bisect_left(a, x)\n    return i if i!= len(a) and a[i] == x else -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: implement this function\n    # Use bisect.bisect() to find the index of the left\n    # insertion point in a sorted array.\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try: \n        return re.match(regex, string)\n    except TypeError: \n        return False\n    except AttributeError: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = r'^[aeiouAEIOU][A-Za-z0-9_]*$'\n    if not re.search(pattern, string):\n        print('Input string is not starting with a vowel!')\n        return False\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print(string)\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] == 'a' or string[0] == 'e' or string[0] == 'i' or string[0] == 'o' or string[0] == 'u':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowel = ['A', 'E', 'I', 'O', 'U']\n    if not any(i in string for i in vowel):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    return re.search(regex, string.lower()) \n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # def vowel(x):\n    #     return x == 'a' or x == 'e' or x == 'i' or x == 'o' or x == 'u'\n    # if re.search(vowel, string): \n    #     return True\n    # else: \n    #     return False\n    if re.search(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum(n):\n        if n==0:\n            return 0\n        else:\n            return n*geometric_sum(n-1)\n    return geometric_sum(n)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n        \n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Initialize the sum of the values to 0\n    sum = 0\n    # For every number less than or equal to n\n    for x in range(n):\n        # Find the next number in the sequence\n        # The next number is the geometric sum of the number before it\n        sum += (x ** 2)\n        # Advance the sequence of numbers\n        x += 1\n    # Return the sum of the values\n    return sum"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*geometric_sum(n-1) if n>1 else 0\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    return fib(n)"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def get_n(n): \n        # create list of digit to be multiplied\n        digits = [int(i) for i in str(n)]\n        \n        # convert digits to list\n        digits = list(map(int, digits))\n        \n        # return len of list\n        return len(digits)\n    \n    # base cases\n    if n <= 1: \n        return 0\n    \n    # get index of smallest triangular number\n    mid = get_n(n)/2\n    \n    # check if index of smallest triangular number is even\n    if get_n(n) % 2 == 0:\n        if n % mid == 0: \n            return mid\n        else: \n            return find_Index(n - (mid*2))\n    \n    # check if index of smallest triangular number is odd\n    elif get_n(n) % 2!= 0:\n        if n % mid == 0:\n            return mid\n        else:\n            return find_Index(n - (mid*2))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0: \n            return i\n    return int(n)\ndef main(): \n    # For N = 0\n    # N = 1000\n    N = 20\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    f = 1\n    while (n>f):\n        if (n%f == 0):\n            n = int(n/f)\n        f += 1\n    return f\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if (n % i == 0):\n            return (n//i)*i\n        \ndef find_factors(num):\n    '''\n    Write a python function to find the factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(num))+1):\n        if (num % i == 0):\n            factors.append(i)\n    return (list(set(factors)))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    while(n > 1): \n        m = n % 10\n        n //= 10\n        if(m > m): \n            print (m, end=\"\")\n    print(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr = list(range(1, n+1))\n    arr.sort()\n    return math.ceil(len(arr)/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    lst = []\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    for i in range(1, n + 1):\n        lst.append(sum)\n        sum -= i\n    lst.reverse()\n    return lst.index(min(lst))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n+1):\n        if i == n:\n            return n\n        elif i == n//2 or i == n - (n//2):\n            return n//2\n        elif i == n//3:\n            return n//3\n        elif i == n//3 + n//2:\n            return n//3 + n//2\n        elif i == n//4:\n            return n//4\n        elif i == n//4 + n//2:\n            return n//4 + n//2\n        elif i == n//5:\n            return n//5\n        elif i == n//5 + n//2:\n            return n//5 + n//2\n        elif i == n//6:\n            return n//6\n        elif i == n//6 + n//2:\n            return n//6 + n//2\n        elif i == n//7:\n            return n//7\n        elif i == n//7 + n//2:\n            return n//7 + n//2\n        elif i == n//8:\n            return n//8\n        elif i == n//8 + n//2:\n            return n//8 + n//2\n        elif i == n//9:\n            return n//9\n        elif i == n//9 + n//2:\n            return n//9 + n//2\n        elif i == n//10:\n            return n//10\n        elif i == n//10 + n//2:\n            return n//10 + n//2\n        elif i == n//11:\n            return n//11\n        elif i == n//11 + n//2:\n            return n//11 + n//2\n        elif i == n//12:\n            return n//12\n        elif i == n//12 + n//2:\n            return n//12 + n//2\n        elif i == n//13:\n            return n//13\n        elif i == n//13 + n//2:\n            return n//13 + n//2\n        elif i == n//14:\n            return n//14\n        elif i == n//14 + n//2:\n            return n//14 + n//2\n        elif i == n//15:\n            return n//15\n        elif i == n//15 + n//2:\n            return n//15 + n//2\n        elif i == n//16:\n            return n//16\n        elif i == n//16 + n//2:\n            return n//16 + n//2\n        elif i == n//17:\n            return n//17\n        elif i == n//17 + n//2:\n            return n//17 + n//2\n        elif i == n//18:\n            return n//18\n        elif i == n//18 + n//2:\n            return n//18 + n//2\n        elif i == n//19:\n            return n//19\n        elif i == n//19 + n//2:\n            return n//19 + n//2\n        elif i == n//20:\n            return n//20\n        elif i == n//20 + n//2:\n            return n//20 + n//2\n        elif i == n//21:\n            return n//21\n        elif i == n//21 + n//2:\n            return n//21 + n//2\n        elif i == n//22:\n            return n//22\n        elif i == n//22 + n//2:\n            return n//22 + n//2\n        elif i == n//23:\n            return n//23\n        elif i == n//23 + n//2:\n            return n//23 + n//2\n        elif i == n//24:\n            return n//24\n        elif i == n//24 + n//2:\n            return n//24 + n//2\n        elif i == n//25:\n            return n//25\n        elif i == n//25 + n//2:\n            return n//25 + n//2\n        elif i == n//26:\n            return n//26\n        elif i == n//26 + n//2:\n            return n//26 + n//2\n        elif i == n//27:\n            return n//27\n        elif i == n//27 + n//2:\n            return n//27 + n//2\n        elif i == n//28:\n            return n//28\n        elif i == n//28 + n//2:\n            return n//28 + n//2\n        elif i == n//29:\n            return n//29\n        elif i == n//29 + n//2:\n            return n//29 + n//2\n        elif i == n//30:\n            return n//30\n        elif i == n//30 + n//2:\n            return n//30 + n//2\n        elif i == n//31:\n            return n//31\n        elif i == n//31 + n//2:\n            return n//31 + n//2\n        elif i == n//32:\n            return n//32\n        elif i == n//32 + n//2:\n            return n//32 + n//2\n        elif i == n//33:\n            return n//33\n        elif i == n//33 + n//2:\n            return n//33 + n//2\n        elif i == n//34:\n            return n//34\n        elif i == n//34 + n//2:\n            return n//34 + n//2\n        elif i == n//35:\n            return n//35\n        elif i == n//35 + n//2:\n            return n//35 + n//2\n        elif i == n//36:\n            return n//36\n        elif i == n//36 + n//2:\n            return n//36 + n//2\n        elif i == n//37:\n            return n//37\n        elif i == n//37 + n//2:\n            return n//37 + n//2\n        elif i == n//38:\n            return n//38\n        elif i == n//38 + n//2:\n            return n//38 + n//2\n        elif i == n//39:\n            return n//39\n        elif i == n//39 + n//2:\n            return n//39 + n//2\n        elif i == n//40:\n            return n//40\n        elif i == n//40 + n//2:\n            return n//40 + n//2\n        elif i == n//41:\n            return n//41\n        elif i == n//41 + n//2:\n            return n//41 + n//2\n        elif i == n//42:\n            return n//42\n        elif i == n//42 + n//2:\n            return n//42 + n//2\n        elif i == n//43:\n            return n//43\n        elif i == n//43 + n//2:\n            return n//43 + n//2\n        elif i == n//44:\n            return n//44\n        elif i == n//44 + n//2:\n            return n//44 + n//2\n        elif i == n//45:\n            return n//45\n        elif i == n//45 + n//2:\n            return n//45 + n//2\n        elif i == n//46:\n            return n//46\n        elif i == n//46 + n//2:\n            return n//46 + n//2\n        elif i == n//47:\n            return n//47\n        elif i == n//47 + n//2:\n            return n//47 + n//2\n        elif i == n//48:\n            return n//48\n        elif i == n//48 + n//2:\n            return n//48 + n//2\n        elif i == n//49:\n            return n//49\n        elif i == n//49 + n//2:\n            return n//49 + n//2\n        elif i == n//50:\n            return n//50\n        elif i == n//50 + n//2:\n            return n//50 + n//2\n        elif i == n//51:"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # A Very Easy Way\n    if n==1:\n        return 0\n    else:\n        if n%2==0:\n            return 1\n        else:\n            return find_Index(int(n/2))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #For n < 5, we need to use Euclid's algorithm. \n    if n < 5: \n        return -1\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    output = {}\n    if len(test_tup) > 0:\n        for i in test_tup:\n            output[i] = test_tup.count(i)\n    return output\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the given tuple to a key-value dictionary using adjacent elements.\n    # Use a dict() function to create a dict() from the given tuple.\n    return {'A':{'A':test_tup[0],'B':test_tup[1],'C':test_tup[2],'D':test_tup[3],'E':test_tup[4]},\n            'B':{'A':test_tup[0],'C':test_tup[1],'D':test_tup[2],'E':test_tup[3]},\n            'C':{'A':test_tup[0],'B':test_tup[1],'D':test_tup[2],'E':test_tup[3]},\n            'D':{'A':test_tup[0],'B':test_tup[1],'C':test_tup[2],'E':test_tup[3]},\n            'E':{'A':test_tup[0],'B':test_tup[1],'C':test_tup[2],'D':test_tup[3]}}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for index, ele in enumerate(test_tup):\n        dict[ele] = test_tup[index+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup_dict = {}\n    if len(test_tup) > 1:\n        for i in range(0, len(test_tup)):\n            test_tup_dict[test_tup[i][0]] = test_tup[i][1]\n    return test_tup_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0], test_tup[1]))\n    \ndef list_to_dict(test_list):\n    '''\n    Write a function to convert the given list to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-list-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_list[0], test_list[1]))\n    \ndef tuple_to_nested_dict(test_tuple):\n    '''\n    Write a function to convert the given tuple to a nested dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tuple[0], tuple_to_dict(test_tuple[1])))\n    \ndef nested_dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given nested dictionary to a tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-nested-dictionary-to-tuple/\n    '''\n    return tuple(test_dict.values())\n    \ndef main():\n    '''\n    Run this file to test the functions and check they work.\n    '''\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"nested_dict_to_tuple([{'a':1,'b':2}, {'b':3}, {'a':4}])\")\n    print(str(nested_dict_to_tuple({'a':1,'b':2}, {'b':3}, {'a':4}) == [1,2,3,4]))\n    print()\n    print(\"Exception :\")\n    print(\"Output :\")\n    print(\"Invalid\")\n    \n    print(\"Example 2:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2},'c':{'d':3}}\")\n    print(str(list_to_nested_dict({'a':{'b':2,'c':{'d':3}}}) == [['a','b','c'],'d']))\n    print()\n    print(\"Exception :\")\n    print(\"Output :\")\n    print(\"Invalid\")\n    \n    print(\"Example 3:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2},'c':{'d':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 4:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2},'c':{'d':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 5:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2},'c':{'d':3}}\")\n    print(\"Expected Output :\")\n    print(\"{'a':{'b':2,'c':{'d':3}}}\")\n    print(\"Invalid\")\n    \n    print(\"Example 6:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2},'c':{'d':3}}\")\n    print(\"Expected Output :\")\n    print(\"{'a':{'b':2,'c':{'d':3}}}\")\n    print(\"Invalid\")\n    \n    print(\"Example 7:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Invalid\")\n    \n    print(\"Example 8:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Invalid\")\n    \n    print(\"Example 9:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Invalid\")\n    \n    print(\"Example 10:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Invalid\")\n    \n    print(\"Example 11:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 12:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 13:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 14:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 15:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 16:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 17:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Invalid\")\n    \n    print(\"Example 18:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 19:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"[1,2,3,4]\")\n    print(\"[(1,2,3,4)]\")\n    print(\"Invalid\")\n    \n    print(\"Example 20:\")\n    print(\"Input : \")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Expected Output :\")\n    print(\"{'a':{'b':2,'c':3}}\")\n    print(\"Invalid\")\n    \n    print(\"Example 21:\")"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    out = {}\n    for i in range(len(test_tup)):\n        if(type(test_tup[i]) == tuple):\n            out[test_tup[i][0]] = test_tup[i][1]\n        else:\n            out[test_tup[i]] = test_tup[i]\n    return out\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup = test_tup[1:] # remove the first element of the tuple, which is the key\n    for i in range(len(test_tup)):\n        test_tup[i] = test_tup[i][1] # set the first element of the tuple as the value\n    return test_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup)):\n        if i == 0:\n            result[test_tup[i]] = test_tup[i + 1]\n        else:\n            result[test_tup[i]] = test_tup[i - 1]\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for item in test_tup:\n        if item not in dict_:\n            dict_[item] = 1\n        else:\n            dict_[item] = dict_[item] + 1\n    return dict_\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i == i:\n            print(\"I can't change the character\")\n        if i!= i:\n            print(\"Not a Same Character\")\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # list of all characters\n    chars = 'abcdefghijklmnopqrstuvwxyz'\n    # dictionary to count\n    count = {}\n    # loop through all the characters\n    for char in s:\n        # if char is not present in the dictionary, count it as 0\n        count[char] = count.get(char, 0) + 1\n    # get the characters present in the dictionary\n    for char in chars:\n        # check if the count of character is greater than 1\n        if count[char] >= 1:\n            return False\n    # return true if all characters are same\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==0 :\n        return True\n    elif s[0]==s[len(s)-1]:\n        return all_Characters_Same(s[1:len(s)-1])\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 3:\n        return False\n    # dictionary of characters with their frequencies\n    count_freq = {}\n    for char in s:\n        if char in count_freq:\n            count_freq[char] += 1\n        else:\n            count_freq[char] = 1\n    # iterating through the dictionary\n    for char in count_freq:\n        if count_freq[char] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initializing variables\n    total = len(s)\n    chars = []\n    for ch in s :\n        chars.append(ch)\n    \n    for i in range(len(chars)-1) :\n        if chars[i]!= chars[i+1] :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s == s.upper()\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #initialize an empty list to store the characters\n    char_list = []\n    #iterate through each letter in the string\n    for letter in s :\n        #if the letter is in the list\n        if letter in char_list :\n            #add it to the list\n            char_list.append(letter)\n        else :\n            #add it to the list\n            char_list.append(s)\n    #return the list of the characters\n    return char_list\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    if s[0] == s[len(s)-1] and len(s) == 1:\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[i].lower() :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True if all(c1 == c2 for c1, c2 in zip(s, s[1:])) else False\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    try:\n        a = side\n        b = side\n        c = side\n        if side == 3:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(4.0)*a*c*b))\n        elif side == 4:\n            return (4.0/3.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c))\n        elif side == 5:\n            return (4.0/3.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 6:\n            return (3.0/2.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 7:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 8:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 9:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 10:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 11:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 12:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 13:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 14:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c*c))\n        elif side == 15:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 16:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 17:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 18:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 19:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 20:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 21:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c*c))\n        elif side == 22:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 23:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 24:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 25:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 26:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 27:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 28:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 29:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 30:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c))\n        elif side == 31:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b))\n        elif side == 32:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b))\n        elif side == 33:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b))\n        elif side == 34:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b))\n        elif side == 35:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b))\n        elif side == 36:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c))\n        elif side == 37:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 38:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 39:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 40:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 41:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c*b*c*c))\n        elif side == 42:\n            return (3.0/4.0)*(math.sqrt(5.0)*(math.sqrt(5.0)*a*c"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # find the area of the tetrahedron.\n    if side == 1:\n        return 4 * math.pi * math.pow(2, 3)\n    elif side == 2:\n        return 4 * math.pi * math.pow(2, 2)\n    elif side == 3:\n        return 8 * math.pi * math.pow(2, 1)\n    elif side == 4:\n        return 8 * math.pi * math.pow(2, 0)\n    elif side == 5:\n        return 12 * math.pi * math.pow(2, 0)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 4*side\n    return area\ndef is_valid_cube(cube):\n    '''\n    Write a function to check whether a cube is valid or not.\n    '''\n    valid = True\n    if cube == 0:\n        valid = False\n    elif cube == 1:\n        valid = True\n    else:\n        valid = False\n    return valid\ndef is_valid_triangle(triangle):\n    '''\n    Write a function to check whether a triangle is valid or not.\n    '''\n    valid = True\n    if triangle == 0:\n        valid = False\n    elif triangle == 1:\n        valid = True\n    elif triangle == 2:\n        valid = True\n    elif triangle == 3:\n        valid = True\n    elif triangle == 4:\n        valid = True\n    elif triangle == 5:\n        valid = True\n    elif triangle == 6:\n        valid = True\n    elif triangle == 7:\n        valid = True\n    elif triangle == 8:\n        valid = True\n    elif triangle == 9:\n        valid = True\n    elif triangle == 10:\n        valid = True\n    elif triangle == 11:\n        valid = True\n    elif triangle == 12:\n        valid = True\n    elif triangle == 13:\n        valid = True\n    elif triangle == 14:\n        valid = True\n    elif triangle == 15:\n        valid = True\n    else:\n        valid = False\n    return valid\ndef is_valid_regular_polygon(regular_polygon):\n    '''\n    Write a function to check whether a regular polygon is valid or not.\n    '''\n    valid = True\n    if regular_polygon == 0:\n        valid = False\n    elif regular_polygon == 1:\n        valid = True\n    elif regular_polygon == 2:\n        valid = True\n    elif regular_polygon == 3:\n        valid = True\n    elif regular_polygon == 4:\n        valid = True\n    elif regular_polygon == 5:\n        valid = True\n    elif regular_polygon == 6:\n        valid = True\n    elif regular_polygon == 7:\n        valid = True\n    elif regular_polygon == 8:\n        valid = True\n    elif regular_polygon == 9:\n        valid = True\n    elif regular_polygon == 10:\n        valid = True\n    elif regular_polygon == 11:\n        valid = True\n    elif regular_polygon == 12:\n        valid = True\n    elif regular_polygon == 13:\n        valid = True\n    elif regular_polygon == 14:\n        valid = True\n    elif regular_polygon == 15:\n        valid = True\n    else:\n        valid = False\n    return valid\ndef is_valid_regular_regular_polygon(regular_polygon,regular_regular_polygon):\n    '''\n    Write a function to check whether a regular polygon and regular polygon are valid or not.\n    '''\n    valid = True\n    if regular_polygon == 0 or regular_regular_polygon == 1:\n        valid = False\n    elif regular_polygon == 2 or regular_regular_polygon == 3:\n        valid = False\n    elif regular_polygon == 4 or regular_regular_polygon == 5:\n        valid = False\n    elif regular_polygon == 6 or regular_regular_polygon == 7:\n        valid = False\n    elif regular_polygon == 8 or regular_regular_polygon == 9:\n        valid = False\n    elif regular_polygon == 10 or regular_regular_polygon == 11:\n        valid = False\n    elif regular_polygon == 12 or regular_regular_polygon == 13:\n        valid = False\n    elif regular_polygon == 14 or regular_regular_polygon == 15:\n        valid = False\n    else:\n        valid = False\n    return valid\ndef is_valid_hypercube(cube):\n    '''\n    Write a function to check whether a cube is valid or not.\n    '''\n    valid = True\n    if cube == 0:\n        valid = False\n    elif cube == 1:\n        valid = True\n    else:\n        valid = False\n    return valid\ndef is_valid_triangle(triangle):\n    '''\n    Write a function to check whether a triangle is valid or not.\n    '''\n    valid = True\n    if triangle == 0:\n        valid = False\n    elif triangle == 1:\n        valid = True\n    elif triangle == 2:\n        valid = True\n    elif triangle == 3:\n        valid = True\n    elif triangle == 4:\n        valid = True\n    elif triangle == 5:\n        valid = True\n    elif triangle == 6:\n        valid = True\n    elif triangle == 7:\n        valid = True\n    elif triangle == 8:\n        valid = True\n    elif triangle == 9:\n        valid = True\n    elif triangle == 10:\n        valid = True\n    elif triangle == 11:\n        valid = True\n    elif triangle == 12:\n        valid = True\n    elif triangle == 13:\n        valid = True\n    elif triangle == 14:\n        valid = True\n    elif triangle == 15:\n        valid = True\n    else:\n        valid = False\n    return valid\ndef is_valid_regular_regular_regular_polygon(regular_polygon,regular_regular_polygon):\n    '''\n    Write a function to check whether a regular polygon and regular polygon are valid or not.\n    '''\n    valid = True\n    if regular_polygon == 0 or regular_regular_polygon == 1:\n        valid = False\n    elif regular_polygon == 2 or regular_regular_polygon == 3:\n        valid = False\n    elif regular_polygon == 4 or regular_regular_polygon == 5:\n        valid = False\n    elif regular_polygon == 6 or regular_regular_polygon == 7:\n        valid = False\n    elif regular_polygon == 8 or regular_regular_polygon == 9:\n        valid = False\n    elif regular_polygon == 10 or regular_regular_polygon == 11:\n        valid = False\n    elif regular_polygon == 12 or regular_regular_polygon == 13:\n        valid = False\n    elif regular_polygon == 14 or regular_regular_polygon == 15:\n        valid = False\n    else:\n        valid = False\n    return valid\ndef is_valid_regular_hypercube(cube):\n    '''\n    Write a function to check whether a cube is valid or not.\n    '''\n    valid = True\n    if cube == 0:\n        valid = False\n    elif cube == 1:\n        valid = True\n    else:\n        valid = False\n    return valid\ndef is_valid_regular_regular_regular_regular_regular_polygon(regular_polygon,regular_regular_polygon):\n    '''\n    Write a function to check whether a regular polygon and regular polygon are valid or not.\n    '''\n    valid = True\n    if regular_polygon == 0 or regular_regular_polygon == 1:\n        valid = False\n    elif regular_polygon == 2 or regular_regular_polygon == 3:\n        valid = False\n    elif regular_polygon == 4 or regular_regular_polygon == 5:\n        valid = False\n    elif regular_polygon == 6 or regular_regular_polygon == 7:\n        valid = False\n    elif regular_polygon == 8 or regular_regular_polygon == 9:\n        valid = False\n    elif regular_polygon == 10 or regular_regular_polygon == 11:\n        valid = False\n    elif regular_polygon == 12 or regular_regular_polygon == 13:\n        valid = False\n    elif regular_polygon == 14 or regular_regular_polygon == 15:\n        valid = False\n    else:\n        valid = False\n    return valid\ndef is_valid_regular_regular_regular_regular_regular_hypercube(cube):\n    '''\n    Write a function to check whether a cube is valid or not.\n    '''\n    valid = True\n    if cube == 0:\n        valid = False\n    elif cube == 1:\n        valid = True\n    else:\n        valid = False\n    return valid\ndef is_valid_regular_regular_hypercube(cube):\n    '''\n    Write "
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side < 0 or side >= 4:\n        return -1\n    else:\n        area = 4 * (side**2)\n        return math.sqrt(area)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side*side)*0.25\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3\ndef unit_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side*side\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return 2*math.pi*radius*height\ndef unit_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return (2*math.pi*radius)**2*height\ndef volume_cylinder_2(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return 4*math.pi*radius*height\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_2(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_3(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_4(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_5(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_6(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_7(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_8(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_9(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_10(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_11(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_12(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_13(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_14(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_15(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_16(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_17(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_18(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_19(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_20(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_21(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_22(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_23(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_24(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_25(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_26(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_27(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_28(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_29(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_30(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_31(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_32(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_33(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_34(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_35(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_36(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\ndef volume_sphere_37(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return math.sqrt(6)\n    elif side == 2:\n        return 4 * math.pi * math.sqrt(3)\n    elif side == 3:\n        return 4 * math.pi * math.sqrt(5)\n    elif side == 4:\n        return 8 * math.pi * math.sqrt(7)\n    elif side == 5:\n        return 8 * math.pi * math.sqrt(9)\n    elif side == 6:\n        return 8 * math.pi * math.sqrt(11)\n    elif side == 7:\n        return 8 * math.pi * math.sqrt(13)\n    elif side == 8:\n        return 9 * math.pi * math.sqrt(15)\n    elif side == 9:\n        return 10 * math.pi * math.sqrt(20)\n    elif side == 10:\n        return 8 * math.pi * math.sqrt(21)\n    elif side == 11:\n        return 5 * math.pi * math.sqrt(23)\n    elif side == 12:\n        return 10 * math.pi * math.sqrt(25)\n    elif side == 13:\n        return 10 * math.pi * math.sqrt(30)\n    elif side == 14:\n        return 9 * math.pi * math.sqrt(35)\n    elif side == 15:\n        return 9 * math.pi * math.sqrt(40)\n    elif side == 16:\n        return 9 * math.pi * math.sqrt(45)\n    elif side == 17:\n        return 5 * math.pi * math.sqrt(50)\n    elif side == 18:\n        return 9 * math.pi * math.sqrt(55)\n    elif side == 19:\n        return 5 * math.pi * math.sqrt(60)\n    elif side == 20:\n        return 9 * math.pi * math.sqrt(65)\n    elif side == 21:\n        return 5 * math.pi * math.sqrt(70)\n    elif side == 22:\n        return 6 * math.pi * math.sqrt(75)\n    elif side == 23:\n        return 7 * math.pi * math.sqrt(80)\n    elif side == 24:\n        return 7 * math.pi * math.sqrt(85)\n    elif side == 25:\n        return 6 * math.pi * math.sqrt(90)\n    elif side == 26:\n        return 7 * math.pi * math.sqrt(95)\n    elif side == 27:\n        return 7 * math.pi * math.sqrt(100)\n    elif side == 28:\n        return 9 * math.pi * math.sqrt(105)\n    elif side == 29:\n        return 6 * math.pi * math.sqrt(110)\n    elif side == 30:\n        return 7 * math.pi * math.sqrt(115)\n    elif side == 31:\n        return 9 * math.pi * math.sqrt(120)\n    elif side == 32:\n        return 6 * math.pi * math.sqrt(125)\n    elif side == 33:\n        return 7 * math.pi * math.sqrt(130)\n    elif side == 34:\n        return 7 * math.pi * math.sqrt(135)\n    elif side == 35:\n        return 9 * math.pi * math.sqrt(140)\n    elif side == 36:\n        return 6 * math.pi * math.sqrt(145)\n    elif side == 37:\n        return 7 * math.pi * math.sqrt(150)\n    elif side == 38:\n        return 7 * math.pi * math.sqrt(155)\n    elif side == 39:\n        return 6 * math.pi * math.sqrt(160)\n    elif side == 40:\n        return 7 * math.pi * math.sqrt(165)\n    elif side == 41:\n        return 7 * math.pi * math.sqrt(170)\n    elif side == 42:\n        return 9 * math.pi * math.sqrt(175)\n    elif side == 43:\n        return 6 * math.pi * math.sqrt(180)\n    elif side == 44:\n        return 7 * math.pi * math.sqrt(185)\n    elif side == 45:\n        return 9 * math.pi * math.sqrt(190)\n    elif side == 46:\n        return 6 * math.pi * math.sqrt(195)\n    elif side == 47:\n        return 7 * math.pi * math.sqrt(200)\n    elif side == 48:\n        return 7 * math.pi * math.sqrt(205)\n    elif side == 49:\n        return 9 * math.pi * math.sqrt(210)\n    elif side == 50:\n        return 6 * math.pi * math.sqrt(215)\n    elif side == 51:\n        return 7 * math.pi * math.sqrt(220)\n    elif side == 52:\n        return 7 * math.pi * math.sqrt(225)\n    elif side == 53:\n        return 9 * math.pi * math.sqrt(230)\n    elif side == 54:\n        return 6 * math.pi * math.sqrt(235)\n    elif side == 55:\n        return 7 * math.pi * math.sqrt(240)\n    elif side == 56:\n        return 7 * math.pi * math.sqrt(245)\n    elif side == 57:\n        return 9 * math.pi * math.sqrt(250)\n    elif side == 58:\n        return 6 * math.pi * math.sqrt(255)\n    elif side == 59:\n        return 7 * math.pi * math.sqrt(260)\n    elif side == 60:\n        return 7 * math.pi * math.sqrt(265)\n    elif side == 61:\n        return 9 * math.pi * math.sqrt(270)\n    elif side == 62:\n        return 6 * math.pi * math.sqrt(275)\n    elif side == 63:\n        return 7 * math.pi * math.sqrt(280)\n    elif side == 64:\n        return 9 * math.pi * math.sqrt(285)\n    elif side == 65:\n        return 6 * math.pi * math.sqrt(290)\n    elif side == 66:\n        return 7 * math.pi * math.sqrt(295)\n    elif side == 67:\n        return 9 * math.pi * math.sqrt(300)\n    elif side == 68:\n        return 6 * math.pi * math.sqrt(305)\n    elif side == 69:\n        return 7 * math.pi * math.sqrt(310)\n    elif side == 70:\n        return 9 * math.pi * math.sqrt(315)\n    elif side == 71:\n        return 6 * math.pi * math.sqrt(320)\n    elif side == 72:\n        return 7 * math.pi * math.sqrt(325)\n    elif side == 73:\n        return 9 * math.pi * math.sqrt(330)\n    elif side == 74:\n        return 6 * math.pi * math.sqrt(335)\n    elif side == 75:\n        return 7 * math.pi * math.sqrt(340)\n    elif side == 76:\n        return 9 * math.pi * math.sqrt(345)\n    elif side == 77:\n        return 6 * math.pi * math.sqrt(350)\n    elif side == 78:\n        return 7 * math.pi * math.sqrt(355)\n    elif side == 79:\n        return 9 * math.pi * math.sqrt(360)\n    elif side == 80:\n        return 6 * math.pi * math.sqrt(365)\n    elif side == 81:\n        return 7 * math.pi * math.sqrt(370)\n    elif side == 82:\n        return 9 * math.pi * math.sqrt(375)\n    elif side == 83:\n        return 6 * math.pi * math.sqrt(380)\n    elif side == 84:\n        return 7 * math.pi * math.sqrt(38"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #if side == 'x':\n    #    return math.sqrt(3/4)\n    if side == 'y':\n        return (1/2)*math.sqrt(3)*math.sqrt(5)\n    elif side == 'z':\n        return (1/2)*math.sqrt(3)*math.sqrt(5)\n    elif side == 'o':\n        return (1/4)*math.sqrt(3)*math.sqrt(5)\n    elif side == 'v':\n        return (1/4)*math.sqrt(3)*math.sqrt(5)\n    elif side == 't':\n        return (1/4)*math.sqrt(3)*math.sqrt(5)\n    else:\n        return False\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    #if side == 'x':\n    #    return math.sqrt(3/8)\n    if side == 'y':\n        return (1/2)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'z':\n        return (1/2)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'o':\n        return (1/4)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'v':\n        return (1/4)*math.sqrt(3)*math.sqrt(9)\n    elif side == 't':\n        return (1/4)*math.sqrt(3)*math.sqrt(9)\n    else:\n        return False\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    if side == 'x':\n        return (1/3)*math.sqrt(9)*math.sqrt(27)\n    elif side == 'y':\n        return (1/3)*math.sqrt(27)*math.sqrt(9)\n    elif side == 'z':\n        return (1/3)*math.sqrt(27)*math.sqrt(9)\n    elif side == 'o':\n        return (1/3)*math.sqrt(27)*math.sqrt(9)\n    elif side == 'v':\n        return (1/3)*math.sqrt(27)*math.sqrt(9)\n    elif side == 't':\n        return (1/3)*math.sqrt(27)*math.sqrt(9)\n    else:\n        return False\ndef area_cylinder(side):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    if side == 'x':\n        return (1/3)*math.sqrt(3)*math.sqrt(6)\n    elif side == 'y':\n        return (1/3)*math.sqrt(3)*math.sqrt(6)\n    elif side == 'z':\n        return (1/3)*math.sqrt(3)*math.sqrt(6)\n    elif side == 'o':\n        return (1/3)*math.sqrt(3)*math.sqrt(6)\n    elif side == 'v':\n        return (1/3)*math.sqrt(3)*math.sqrt(6)\n    elif side == 't':\n        return (1/3)*math.sqrt(3)*math.sqrt(6)\n    else:\n        return False\ndef area_rectangle(side):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    if side == 'x':\n        return (1/4)*math.sqrt(3)*math.sqrt(6)\n    elif side == 'y':\n        return (1/4)*math.sqrt(3)*math.sqrt(6)\n    elif side == 'z':\n        return (1/4)*math.sqrt(3)*math.sqrt(6)\n    elif side == 'o':\n        return (1/4)*math.sqrt(3)*math.sqrt(6)\n    elif side == 'v':\n        return (1/4)*math.sqrt(3)*math.sqrt(6)\n    else:\n        return False\ndef area_pyramid(side):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    if side == 'x':\n        return (1/4)*math.sqrt(3)*math.sqrt(12)\n    elif side == 'y':\n        return (1/4)*math.sqrt(3)*math.sqrt(12)\n    elif side == 'z':\n        return (1/4)*math.sqrt(3)*math.sqrt(12)\n    elif side == 'o':\n        return (1/4)*math.sqrt(3)*math.sqrt(12)\n    elif side == 'v':\n        return (1/4)*math.sqrt(3)*math.sqrt(12)\n    else:\n        return False\ndef area_tetrahedron_cube(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron cube.\n    '''\n    if side == 'x':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'y':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'z':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'o':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'v':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 't':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    else:\n        return False\ndef area_octahedron_cube(side):\n    '''\n    Write a function to caluclate the area of an octahedron cube.\n    '''\n    if side == 'x':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'y':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'z':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'o':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 'v':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    elif side == 't':\n        return (3/8)*math.sqrt(3)*math.sqrt(9)\n    else:\n        return False\ndef area_cylinder_cube(side):\n    '''\n    Write a function to caluclate the area of a cylinder cube.\n    '''\n    if side == 'x':\n        return (3/8)*math.sqrt(3)*math.sqrt(12)\n    elif side == 'y':\n        return (3/8)*math.sqrt(3)*math.sqrt(12)\n    elif side == 'z':\n        return (3/8)*math.sqrt(3)*math.sqrt(12)\n    elif side == 'o':\n        return (3/8)*math.sqrt(3)*math.sqrt(12)\n    elif side == 'v':\n        return (3/8)*math.sqrt(3)*math.sqrt(12)\n    elif side == 't':\n        return (3/8)*math.sqrt(3)*math.sqrt(12)\n    else:\n        return False\ndef area_pyramid_cube(side):\n    '''\n    Write a function to caluclate the area of a pyramid cube.\n    '''\n    if side == 'x':\n        return (3/8)*math.sqrt(3)*math.sqrt(12)\n    eli"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #get the list of sides\n    side_list = [[2, 4, 6], [4, 6, 8], [6, 8, 10], [8, 10, 12], [10, 12, 14], [12, 14, 16], [14, 16, 18], [16, 18, 20], [18, 20, 22], [20, 22, 24], [22, 24, 26], [24, 26, 28], [26, 28, 30], [28, 30, 32], [30, 32, 34], [32, 34, 36], [34, 36, 38], [36, 38, 40], [38, 40, 42], [40, 42, 44], [42, 44, 46], [44, 46, 48], [46, 48, 50], [48, 50, 52], [50, 52, 54], [52, 54, 56], [54, 56, 58], [56, 58, 60], [58, 60, 62], [60, 62, 64], [62, 64, 66], [64, 66, 68], [66, 68, 70], [68, 70, 72], [70, 72, 74], [72, 74, 76], [74, 76, 78], [76, 78, 80], [78, 80, 82], [80, 82, 84], [82, 84, 86], [84, 86, 88], [86, 88, 90], [88, 90, 92], [90, 92, 94], [92, 94, 96], [94, 96, 98], [96, 98, 100], [98, 100, 102], [100, 102, 104], [102, 104, 106], [104, 106, 108], [106, 108, 110], [108, 110, 112], [110, 112, 114], [112, 114, 116], [114, 116, 118], [116, 118, 120], [118, 120, 122], [120, 122, 124], [122, 124, 126], [124, 126, 128], [126, 128, 130], [128, 130, 132], [130, 132, 134], [132, 134, 136], [134, 136, 138], [136, 138, 140], [138, 140, 142], [140, 142, 144], [142, 144, 146], [144, 146, 148], [146, 148, 150], [148, 150, 152], [150, 152, 154], [152, 154, 156], [154, 156, 158], [156, 158, 160], [158, 160, 162], [160, 162, 164], [162, 164, 166], [164, 166, 168], [166, 168, 170], [168, 170, 172], [170, 172, 174], [172, 174, 176], [174, 176, 178], [176, 178, 180], [178, 180, 182], [180, 182, 184], [182, 184, 186], [184, 186, 188], [186, 188, 190], [188, 190, 192], [190, 192, 194], [192, 194, 196], [194, 196, 198], [196, 198, 200], [198, 200, 202], [200, 202, 204], [202, 204, 206], [204, 206, 208], [206, 208, 210], [208, 210, 212], [210, 212, 214], [212, 214, 216], [214, 216, 218], [216, 218, 220], [218, 220, 222], [220, 222, 224], [222, 224, 226], [226, 226, 228], [228, 228, 230], [230, 230, 232], [232, 232, 234], [234, 234, 236], [236, 236, 238], [238, 238, 240], [240, 240, 242], [242, 242, 244], [244, 244, 246], [246, 246, 248], [248, 248, 250], [250, 250, 252], [252, 252, 254], [254, 254, 256], [256, 256, 258], [258, 258, 260], [260, 260, 262], [262, 262, 264], [264, 264, 266], [266, 266, 268], [268, 268, 270], [270, 270, 272], [272, 272, 274], [274, 274, 276], [276, 276, 278], [278, 278, 280], [280, 280, 282], [282, 282, 284], [284, 284, 286], [286, 286, 288], [288, 288, 290], [290, 290, 292], [292, 292, 294], [294, 294, 296], [296, 296, 298], [298, 298, 300], [300, 300, 302], [302, 302, 304], [304, 304, 306], [306, 306, 308], [308, 308, 310], [310, 310, 312], [312, 312, 314], [314, 314, 316], [316, 316, 318], [318, 318, 320], [320, 320, 322], [322, 322, 324], [324, 324, 326], [326, 326, 328], [328, 328, 330], [330, 330, 332], [332, 332, 334], [334, 334, 336], [336, 336, 338], [338, 338, 340], [340, 340, 342], [342, 342, 344], [344, 344, 346], [346, 346, 348], [348, 348, 350], [350, 350, 352], [352, 352, 354], [354, 354, 356], [356, 356, 358], [358, 358, 360], [360, 360, 361], [361, 361, 362], [362, 362, 364], [364, 364, 366], [366, 366, 368], [368, 368, 370], [370, 370, 372], [372, 372, 374], [374, 374, 376], [376, 376, 378], [378, 378, 380], [380, 380, 381], [381, 381, 382], [382, 382, 384], [384, 384, 386], [386, 386, 388], [388, 388, 390], [390, 390, 392], [392, 392,394], [394, 394, 396], [396, 396, 398], [398, 398, 400], [400, 400, 402], [402, 402, 404], [404, 404, 406], [406, 406, 408], [408, 408, 410], [410, 410, 412], [412, 412, 414], [414, 414, 416], [416, 416, 418], [418, 418, 420], [420, 420, 422], [422, 422, 424], [424, 424, 426], [426, 426, 428], [428, 428, 429], [430, 429, 432], [432, 432, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438], [438, 438, 440], [440, 440, 442], [442, 442, 434], [434, 434, 436], [436, 436, 438]"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 4 * side**2 * (1 - side) / 3\n    print(f'{area}')\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 1:\n        return list\n    else:\n        result = []\n        for i in range(len(list)):\n            result.append(list[len(list)-i-1])\n            result.append(list[0])\n        return result\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # checking if number of items is less than or equal to 0\n    if len(list) <= 0:\n        return []\n    else:\n        # append head to tail\n        return [list[-1]] + rotate_right(list[0:-1], m)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n == 0:\n        return list\n    i = n - 1\n    while i >= 0:\n        list[i], list[i + m - 1] = list[i + m - 1], list[i]\n        i -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Taking Input\n    list = input('Enter the list elements : ').split()\n    m = int(input('Enter the number of elements to be rotated : '))\n    # creating a new list\n    new_list = [0] * len(list)\n    # index of new_list\n    index = 0\n    # index of last element\n    last_index = len(list) - 1\n    # For loop\n    for i in range(0, len(list) - 1):\n        # Append element to new_list\n        new_list[index] = list[i]\n        index += 1\n        # Swapping the elements\n        if index == m:\n            index = 0\n            last_index = i\n    # insert the last element\n    new_list[index] = list[last_index]\n    # returning the new list\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    if m == 1:\n        return rotate_left(list, 0)\n    return rotate_left(list, m)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    \n    for i in range(len(list)):\n        new_list.append(list[i])\n    \n    for i in range(len(list)):\n        for j in range(m):\n            new_list[i] = list[i]\n    \n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Initialize the index of the elements to the beginning\n    index = 0\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.sort(reverse=True)\n    if m >= len(list):\n        return list\n    else:\n        list.extend([list[-1]] * (m-len(list)))\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    for i in range(len(list)-1, -1, -1):\n        for j in range(i):\n            list[j], list[i] = list[i], list[j]\n    return list\n    \n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] is None:\n            count = count + 1\n    if count > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            print(\"The none value in tuple is present at \",i)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup[0] is None or test_tup[1] is None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    if startnum > endnum:\n        print(f\"Error: startnum must be less than endnum.\")\n        return\n    divisors = []\n    for div in range(1,endnum+1):\n        if (endnum % div == 0):\n            divisors.append(div)\n    return divisors\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    start_range = range(startnum, endnum)\n    return list(filter(lambda x: x % 10 == 0, start_range))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum,endnum+1):\n        if i%1==0:\n            if not i%2==0:\n                print(i,\"it is not a perfect number\")\n            else:\n                print(i,\"is a perfect number\")\n        else:\n            print(i,\"it is not a perfect number\")\ndef divisible_by_sum(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every number it sums to. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum,endnum+1):\n        sum=0\n        for num in range(1,i):\n            if i%num==0:\n                sum+=num\n        if sum==i:\n            print(i,\"is a perfect number\")\n        else:\n            print(i,\"is not a perfect number\")\ndef run():\n    '''\n    Write a function that computes the length, width and height of a rectangle.\n    The function should have one parameter called width, that is the width of the rectangle.\n    The function should have one parameter called height, that is the height of the rectangle.\n    The function should call the get_rectangle function.\n    The function should return a string representing the rectangle:\n        \"Rectangle (6 rows x 12 columns)\"\n    '''\n    rectangle=get_rectangle(6,12)\n    print(rectangle)\ndef get_rectangle(width,height):\n    '''\n    Write a function that prints a rectangle with the specified width and height.\n    The function should print a newline.\n    '''\n    print('\\n'*20)\n    print('Rectangle (6 rows x 12 columns)')\n    print('-'*20)\n    for i in range(1,height+1):\n        for j in range(1,width+1):\n            print(f'| {j:2}',end='')\n        print('')\ndef get_rectangle_2(width,height):\n    '''\n    Write a function that prints a rectangle with the specified width and height.\n    The function should print a newline.\n    '''\n    print('\\n'*20)\n    print('Rectangle (6 rows x 12 columns)')\n    print('-'*20)\n    for i in range(1,height+1):\n        for j in range(1,width+1):\n            print(f'| {j:2}',end='')\n        print('')\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Create a list of all the digits in the number\n    digit_list = list(range(10))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    divisors = []\n    for number in range(startnum, endnum):\n        if (number % 1) == 0:\n            divisors.append(number)\n    return divisors\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = [int(num) for num in str(startnum)]\n    start = 0\n    end = len(numbers)\n    while start < end:\n        if all(numbers[start:end]):\n            yield start, end\n        start += 1\n        end -= 1\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    num_list = list(str(startnum))\n    digits = [int(x) for x in str(startnum)]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(n):\n        return n % 10 == 0\n    \n    return map(lambda n: n if is_divisible_by_digit(n) else None, range(startnum, endnum))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    div_by_dig = lambda num: num % 10\n    def div_list(start, end):\n        return [num for num in range(start, end+1) if div_by_dig(num) == div_by_dig(start)]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digit(number):\n        # Returns all the numbers in a list separated by spaces\n        return [x for x in range(startnum, endnum+1) if (number % x) == 0]\n    return divisible_by_digit\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a>90 or a<-90):\n        return\n    elif ((r>5 or r<-5) or (a>=45 and a<-45)):\n        return\n    elif (a>=45):\n        return\n    elif (r>5):\n        r=r-5\n    elif (a>=45 and r>0):\n        r=r-5\n    d=math.sqrt(((a*a)+(r**2))**0.5)\n    if d==0:\n        d=1\n    return round(d,2)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Your code here\n    if math.pi*r*r/2+a<math.pi*r*r/2:\n        return None\n    elif math.pi*r*r/2+a>math.pi*r*r/2:\n        return None\n    else:\n        #for the sector we want to find the area\n        return (math.pi*r*r/2)**2*a\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # TODO: Write your code here\n    if r == 0:\n        if a == 0:\n            return None\n        elif a > 0 and a < 180:\n            return math.pi * (math.tan(math.radians(a))**2) * r\n        elif a > 180 and a < 360:\n            return math.pi * (math.tan(math.radians(a))**2) * (r * r)\n        elif a > 360 and a < 720:\n            return math.pi * (math.tan(math.radians(a))**2) * (r * r)\n        else:\n            return None\n    elif r > 0:\n        return math.pi * (math.tan(math.radians(a))**2) * r\n    elif r < 0:\n        return math.pi * (math.tan(math.radians(a))**2) * (r * r)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # pi/2 here is the 90 degree angle, therefore angles (a,90) are the same as angles (a,180)\n    pi = math.pi\n    if a == 90:\n        if r <= pi/4:\n            return None\n        else:\n            return pi*r*r\n    elif a == 180:\n        if r >= pi/2:\n            return None\n        else:\n            return pi*r*r\n    else:\n        raise ValueError('Only 90 and 180 angles are defined for sector angles')\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 0:\n        a = 360 - a\n    return math.pi * (r ** 2) * a\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Add your code here\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r==0 or a==0:\n        return\n    \n    if abs(a)>90:\n        #negative angle means clockwise\n        angle_to_pi=math.pi/180\n        theta=math.asin(math.sqrt(a*a)/r)\n        if theta>=angle_to_pi:\n            #clockwise\n            r,a=r,a\n        else:\n            #anticlockwise\n            r,a=r,a*-1\n    \n    if r==0:\n        if a<=0:\n            #small angle\n            theta=math.pi/2\n        else:\n            #radial\n            r,a=math.sqrt(a),math.acos(a/math.pi)\n    \n    if r==a:\n        #anticlockwise\n        r,a=r*-1,a*-1\n    \n    c,m=math.cos(theta),math.sin(theta)\n    return round(c*r*r*r+m*a*a*r*r,1)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = math.degrees(math.atan((r**2)/(a**2)))\n    return angle if angle > 360 else None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #import math\n    theta = math.radians(a)\n    phi = math.radians(r)\n    phi = phi-math.pi/2\n    #define the area of a circle with radius r and angle (phi)\n    area = math.pi*r**2\n    #define the area of a circle with radius r and angle (phi+theta)\n    area2 = r**2*math.cos(phi)+r**2*math.sin(phi)\n    #return the area\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (math.sin(phi) * r)\ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (math.cos(phi) * r)\ndef sector_diameter(r,a):\n    '''\n    Write a function to find diameter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (2*(math.cos(phi) * r))\ndef sector_centroid(r,a):\n    '''\n    Write a function to find centre of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (math.sqrt(((math.cos(phi))**2) + ((math.sin(phi))**2)))\ndef sector_perimeter(r,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*(math.sin(phi))))\ndef sector_diameter_perimeter(r,a):\n    '''\n    Write a function to find diameter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*(math.sin(phi))))\ndef sector_center_of_mass(r,a):\n    '''\n    Write a function to find centroid of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (((math.sin(phi))**2)/(2*r**2))\ndef sector_area_mass_perimeter(r,a,m):\n    '''\n    Write a function to calculate the area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (((math.sin(phi))**2)/(2*r**2))\ndef sector_area_mass(r,a,m):\n    '''\n    Write a function to calculate the area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (((math.sin(phi))**2)/(2*r**2))\ndef sector_volume_mass(r,a,m):\n    '''\n    Write a function to calculate the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (((math.sin(phi))**2)/(2*r**2))\ndef sector_volume_perimeter(r,a,m):\n    '''\n    Write a function to calculate the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (((math.sin(phi))**2)/(2*r**2))\ndef sector_volume_perimeter_mass(r,a,m):\n    '''\n    Write a function to calculate the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (((math.sin(phi))**2)/(2*r**2))\ndef sector_volume_mass_perimeter(r,a,m):\n    '''\n    Write a function to calculate the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return (((math.sin(phi))**2)/(2*r**2))\ndef sector_circumference(r,a):\n    '''\n    Write a function to find circumference of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.cos(phi)))\ndef sector_circumference_perimeter(r,a):\n    '''\n    Write a function to find circumference of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.cos(phi)))\ndef sector_centroid_circumference(r,a):\n    '''\n    Write a function to find centroid of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.cos(phi)))\ndef sector_centroid_circumference_perimeter(r,a):\n    '''\n    Write a function to find centroid of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.cos(phi)))\ndef sector_volume_circumference(r,a):\n    '''\n    Write a function to calculate the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.cos(phi)))\ndef sector_volume_circumference_perimeter(r,a):\n    '''\n    Write a function to calculate the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.cos(phi)))\ndef sector_diameter_circumference(r,a):\n    '''\n    Write a function to calculate the diameter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.sin(phi)))\ndef sector_diameter_circumference_perimeter(r,a):\n    '''\n    Write a function to calculate the diameter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.sin(phi)))\ndef sector_volume_perimeter_circumference(r,a):\n    '''\n    Write a function to calculate the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.sin(phi)))\ndef sector_volume_circumference_perimeter(r,a):\n    '''\n    Write a function to calculate the volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.sin(phi)))\ndef sector_perimeter_perimeter(r,a):\n    '''\n    Write a function to calculate the perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi = math.radians(a)\n    return ((2*math.sin(phi))**2)\ndef sector_area_mas"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    m_to_be_returned = -1\n    m_to_be_returned_1 = -1\n    for i in range(0, m):\n        if X[i] == Y[i] and X[i] == Z[i]:\n            m_to_be_returned = i\n    for j in range(0, n):\n        if Y[j] == X[m_to_be_returned] and Y[j] == Z[m_to_be_returned]:\n            m_to_be_returned_1 = j\n    return m_to_be_returned_1 + m - 1 \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    c = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # code here\n    # construct the lcs by taking the maximum length of the shortest one and finding the length of the longest lcs \n    # using lcs_of_three function and the function\n    # build a lcs array that starts with an empty string, and update with each char of the longest lcs\n    lcs = []\n    for i in range(len(X)):\n        lcs.append('')\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            if(i==0):\n                lcs[j] = max(lcs[j],Y[j],X[i]+Y[j])\n            elif(j==0):\n                lcs[j] = max(lcs[j],X[i]+X[j])\n            else:\n                if(lcs[j]!=max(lcs[j],X[i]+Y[j])):\n                    lcs[j] = max(lcs[j],X[i]+Y[j])\n    return lcs[-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    l1, l2, l3 = 0, 0, 0\n    \n    #make the current state of the strings\n    X = \"\".join(list(map(chr, X)))\n    Y = \"\".join(list(map(chr, Y)))\n    Z = \"\".join(list(map(chr, Z)))\n    \n    #find the length of each string\n    l1 = len(X)\n    l2 = len(Y)\n    l3 = len(Z)\n    \n    # define the 'lcs' array\n    lcs = [[0 for i in range(l3 + 1)] for i in range(l1 + 1)] \n    \n    #get the previous character in each of the lcs array\n    for i in range(1, l1 + 1): \n        for j in range(1, l2 + 1): \n            for k in range(1, l3 + 1): \n                if X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    lcs[i][j] = 1 + lcs[i - 1][j - 1] \n                else: \n                    lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1], lcs[i - 1][k]) \n    return lcs[l1][l2]\n        \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    length_of_X = len(X)\n    length_of_Y = len(Y)\n    length_of_Z = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if (X == '' or Y == '' or Z == ''):\n        return 0\n    \n    if (len(X) == 0):\n        return len(Y)\n    \n    if (len(Y) == 0):\n        return len(Z)\n    \n    if (len(Z) == 0):\n        return len(X)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) and len(Y) < len(Z): \n        return lcs_of_three(Z, Y, X) \n    if len(X) < len(Z): \n        return lcs_of_three(Y, X, Z) \n    if len(Y) < len(Z): \n        return lcs_of_three(Z, X, Y) \n    if len(X) < len(Y) and len(Z) < len(Y): \n        return lcs_of_three(Y, Z, X) \n    else: \n        return 'Invalid input'\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def dfs(X, Y, Z, i, j, k):\n        if i > j: # if not complete\n            return 0\n        if i == j: # not contiguous\n            return 0\n        if i == j and k == 0: # impossible to go to last element\n            return 0\n        elif i == j:\n            return 1 + dfs(X, Y, Z, i + 1, j, k - 1) # first element\n        elif i == j:\n            return max(dfs(X, Y, Z, i + 1, j, k), dfs(X, Y, Z, i, j - 1, k - 1)) # second element\n        else:\n            return max(dfs(X, Y, Z, i, j, k), dfs(X, Y, Z, i + 1, j, k)) # third element\n    \n    return dfs(X, Y, Z, len(X), len(Y), len(Z))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def get_lcs_of_three(X, Y, Z): \n        if len(X) < len(Y): \n            return lcs_of_three(Y, Z, X) \n        elif len(Y) < len(Z): \n            return lcs_of_three(X, Z, Y) \n        elif len(X) < len(Z): \n            return lcs_of_three(Y, Z, X) \n        else: \n            return max(get_lcs_of_three(X, Y, Z), get_lcs_of_three(X, Z, Y), get_lcs_of_three(Y, X, Z)) \n    lcs = get_lcs_of_three(X, Y, Z) \n    return lcs \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs = []\n    for i in range(0,len(X)):\n        if X[i] in Y or Y[i] in Z:\n            if X[i] in Y:\n                lcs.append(X[i])\n            else:\n                lcs.append(Y[i])\n    return lcs\n    \n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #str1 = input(\"Enter a string: \")\n    str1 = str1.upper()\n    str1 = str1.replace(\" \",\"\")\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'^(\\w+[a-z]+)'\n    list = re.findall(pattern, str1)\n    return list\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    words = [word.capitalize() for word in words]\n    newstr = \" \".join(words)\n    return newstr\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    return''.join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    txt = str1.lower()\n    txt_upper = str1.upper()\n    txt_lower = str1.lower()\n    txt_lower_s = str1.lower()\n    txt_upper_s = str1.upper()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i.isalpha():\n            str2 += i.upper() + \" \"\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    a = str1.split()\n    for i in range(len(a)):\n        if a[i][0].isupper():\n            a[i] = a[i][0].upper() + a[i][1:]\n        elif a[i][0].islower():\n            a[i] = a[i][0].lower() + a[i][1:]\n    return''.join(a)\ndef capital_words(str1):\n    '''\n    Write a function to remove any special characters from a given string.\n    '''\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\""
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    new_word = []\n    for word in words:\n        if word[0].isupper():\n            word = word.capitalize()\n        new_word.append(word)\n    return''.join(new_word)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    letters = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'}\n    str1 = str1.lower()\n    regex = '\\\\b(' + str(letters) + ')'\n    return re.sub(regex,' ',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'\\s+',' ',str1)\n    words = str1.split()\n    for word in words:\n        if word[0].isupper():\n            word = word[1:]\n        elif word[0].islower():\n            word = word[1:]\n        elif word[0].isdigit():\n            word = word[1:]\n        else:\n            word = word.title()\n        print(word)\n    str1 =''.join(word for word in words if word[0].isupper())\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_list = list(nums_str)\n    # sort numbers from smallest to largest\n    nums_str_list.sort(reverse=True)\n    # convert list to string\n    nums_str = \"\".join(nums_str_list)\n    # remove all spaces\n    nums_str = nums_str.replace(\" \", \"\")\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # numbers_str = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    nums_str = [int(num) for num in nums_str]\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x : x[0])\n    nums_str.sort(key = lambda x : x[1])\n    return nums_str\n    \n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # sort by ascending\n    nums_str.sort()\n    \n    # sort by descending\n    nums_str.sort(reverse = True)\n    \n    # return list\n    return nums_str\n    \n    "
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [int(x) for x in nums_str]\n    nums_str.sort()\n    nums_str = [str(x) for x in nums_str]\n    nums_str = ''.join(nums_str)\n    return nums_str\n    \n    \n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Intialize key for numeric strings\n    key = lambda x: int(x)\n    \n    # Sort numeric strings\n    nums_str.sort(key=key)\n    \n    # Write output\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = nums_str.split(',')\n    nums_sorted = sorted(nums)\n    nums_sorted = ','.join(nums_sorted)\n    return nums_sorted\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: x.isdigit(), reverse=True)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    str_list = []\n    for n in nums_str:\n        if type(n) == float or n.isnumeric():\n            str_list.append(n)\n    print(str_list)\n    nums_str.sort()\n    nums_str.sort(reverse=True)\n    print(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # t = nums_str.count('-')\n    # nums_str = sorted(nums_str)\n    nums_str = sorted(nums_str)\n    print(nums_str)\n    for i in range(len(nums_str)):\n        if nums_str[i] == '-':\n            # print(nums_str[i], nums_str[i+1])\n            if nums_str[i+1] == '+':\n                nums_str[i] = '+'\n                nums_str[i+1] = ''\n            else:\n                nums_str[i] = ''\n                nums_str[i+1] = '-'\n    print(nums_str)\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # TODO: Write your code here\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list+test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Create a heap from the given array\n    heap = arr[:i] + arr[i+1:]\n    \n    # Check if the heap is at its end\n    if len(heap) == 1:\n        return True\n    \n    # Recursively check if the heap is at its end\n    if heap[0] < heap[1]:\n        return check_min_heap_helper(heap[1:], i)\n    else:\n        return check_min_heap_helper(heap[:i], i-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i==0):\n        return True\n    if (i==1):\n        return False\n    if (arr[i//2]<arr[i]):\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return check_min_heap_helper(arr, i//2) or check_min_heap_helper(arr, (i//2)+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[2*i+1]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] < arr[(i + 1) // 2]:\n        return False\n    if i % 2 == 1:\n        if arr[i] < arr[i // 2]:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (arr[i] > arr[2 * i + 1]):\n        return False\n    return True\n    \ndef check_min_heap(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    return True\n    \ndef min_heapify(arr, i, n):\n    '''\n    Write a function to heapify the given array.\n    Args:\n        arr: The given array to be heapified.\n        i: The index of the current node.\n        n: The total number of nodes.\n    Returns:\n        None\n    '''\n    \n    smallest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    \n    if l < n and arr[i] < arr[l]:\n        smallest = l\n    if r < n and arr[smallest] < arr[r]:\n        smallest = r\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        min_heapify(arr, smallest, n)\n        \n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2 * i\n    right_child = 2 * i + 1\n    if left_child > len(arr) - 1:\n        return True\n    elif arr[i] < arr[left_child] and arr[left_child] < arr[right_child]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2 * i] or arr[i] < arr[2 * i + 1]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    heap = True\n    if (arr[i] > arr[2*i]):\n        heap = False\n    if (arr[i] < arr[2*i+1]):\n        heap = False\n    return heap\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # get nth jacobsthal number\n    nth_jacobsthal = n % 1000\n    \n    # if the number is less than 1000, the jacobsthal number is 1 or 3, respectively.\n    if nth_jacobsthal < 1000:\n        return 1\n    \n    # otherwise the number is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,...\n    jaccobsthal_num = 1\n    for i in range(1, nth_jacobsthal + 1):\n        jaccobsthal_num *= i\n        \n    # return the number\n    return jaccobsthal_num\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif n == 68:\n        return 68\n    elif n == 69:\n        return 69\n    elif n == 70:\n        return 70\n    elif n == 71:\n        return 71\n    elif n == 72:\n        return 72\n    elif n == 73:\n        return 73\n    elif n == 74:\n        return 74\n    elif n == 75:\n        return 75\n    elif n == 76:\n        return 76\n    elif n == 77:\n        return 77\n    elif n == 78:\n        return 78\n    elif n == 79:\n        return 79\n    elif n == 80:\n        return 80\n    elif n == 81:\n        return 81\n    elif n == 82:\n        return 82\n    elif n == 83:\n        return 83\n    elif n == 84:\n        return 84\n    elif n == 85:\n        return 85\n    elif n == 86:\n        return 86\n    elif n == 87:\n        return 87\n    elif n == 88:\n        return 88\n    elif n == 89:\n        return 89\n    elif n == 90:\n        return 90\n    elif n == 91:\n        return 91\n    elif n == 92:\n        return 92\n    elif n == 93:\n        return 93\n    elif n == 94:\n        return 94\n    elif n == 95:\n        return 95\n    elif n == 96:\n        return 96\n    elif n == 97:\n        return 97\n    elif n == 98:\n        return 98\n    elif n == 99:\n        return 99\n    elif n == 100:\n        return 100\n    elif n == 101:\n        return 101\n    elif n == 102:\n        return 102\n    elif n == 103:\n        return 103\n    elif n == 104:\n        return 104\n    elif n == 105:\n        return 105\n    elif n == 106:\n        return 106\n    elif n == 107:\n        return 107\n    elif n == 108:\n        return 108\n    elif n == 109:\n        return 109\n    elif n == 110:\n        return 110\n    elif n == 111:\n        return 111\n    elif n == 112:\n        return 112\n    elif n == 113:\n        return 113\n    elif n == 114:\n        return 114\n    elif n == 115:\n        return 115\n    elif n == 116:\n        return 116\n    elif n == 117:\n        return 117\n    elif n == 118:\n        return 118\n    elif n == 119:\n        return 119\n    elif n == 120:\n        return 120\n    elif n == 121:\n        return 121\n    elif n == 122:\n        return 122\n    elif n == 123:\n        return 123\n    elif n == 124:\n        return 124\n    elif n == 125:\n        return 125\n    elif n == 126:\n        return 126\n    elif n == 127:\n        return 127\n    elif n == 128:\n        return 128\n    elif n == 129:\n        return 129\n    elif n == 130:\n        return 130\n    elif n == 131:\n        return 131\n    elif n == 132:\n        return 132\n    elif n == 133:\n        return 133\n    elif n == 134:\n        return 134\n    elif n == 135:\n        return 135\n    elif n == 136:\n        return 136\n    elif n == 137:\n        return 137\n    elif n == 138:\n        return 138\n    elif n == 139:\n        return 139\n    elif n == 140:\n        return 140\n    elif n == 141:\n        return 141\n    elif n == 142:\n        return 142\n    elif n == 143:\n        return 143\n    elif n == 144:\n        return 144\n    elif n == 145:\n        return 145\n    elif n == 146:\n        return 146\n    elif n == 147:\n        return 147\n    elif n == 148:\n        return 148\n    elif n == 149:\n        return 149\n    elif n == 150:\n        return 150\n    elif n == 151:\n        return 151\n    elif n == 152:\n        return 152\n    elif n == 153:\n        return 153\n    elif n == 154:\n        return 154\n    elif n == 155:\n        return 155\n    elif n == 156:\n        return 156\n    elif n == 157:\n        return 157\n    elif n == 158:\n        return 158\n    elif n == 159:\n        return 159\n    elif n == 160:\n        return 160\n    elif n == 161:\n        return 161\n    elif n == 162:\n    "
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return n\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(n)**(1/3)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [2,3,5,7,11,13,21,43,85,171,341,683,1365,2731]\n    num = []\n    for i in range(1, n+1):\n        num.append(a[i])\n    return num\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        print(\"Please input a positive integer.\")\n        return\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif n == 68:\n        return 68\n    elif n == 69:\n        return 69\n    elif n == 70:\n        return 70\n    elif n == 71:\n        return 71\n    elif n == 72:\n        return 72\n    elif n == 73:\n        return 73\n    elif n == 74:\n        return 74\n    elif n == 75:\n        return 75\n    elif n == 76:\n        return 76\n    elif n == 77:\n        return 77\n    elif n == 78:\n        return 78\n    elif n == 79:\n        return 79\n    elif n == 80:\n        return 80\n    elif n == 81:\n        return 81\n    elif n == 82:\n        return 82\n    elif n == 83:\n        return 83\n    elif n == 84:\n        return 84\n    elif n == 85:\n        return 85\n    elif n == 86:\n        return 86\n    elif n == 87:\n        return 87\n    elif n == 88:\n        return 88\n    elif n == 89:\n        return 89\n    elif n == 90:\n        return 90\n    elif n == 91:\n        return 91\n    elif n == 92:\n        return 92\n    elif n == 93:\n        return 93\n    elif n == 94:\n        return 94\n    elif n == 95:\n        return 95\n    elif n == 96:\n        return 96\n    elif n == 97:\n        return 97\n    elif n == 98:\n        return 98\n    elif n == 99:\n        return 99\n    elif n == 100:\n        return 100\n    elif n == 101:\n        return 101\n    elif n == 102:\n        return 102\n    elif n == 103:\n        return 103\n    elif n == 104:\n        return 104\n    elif n == 105:\n        return 105\n    elif n == 106:\n        return 106\n    elif n == 107:\n        return 107\n    elif n == 108:\n        return 108\n    elif n == 109:\n        return 109\n    elif n == 110:\n        return 110\n    elif n == 111:\n        return 111\n    elif n == 112:\n        return 112\n    elif n == 113:\n        return 113\n    elif n == 114:\n        return 114\n    elif n == 115:\n        return 115\n    elif n == 116:\n        return 116\n    elif n == 117:\n        return 117\n    elif n == 118:\n        return 118\n    elif n == 119:\n        return 119\n    elif n == 120:\n        return 120\n    elif n == 121:\n        return 121\n    elif n == 122:\n        return 122\n    elif n == 123:\n        return 123\n    elif n == 124:\n        return 124\n    elif n == 125:\n        return 125\n    elif n == 126:\n        return 126\n    elif n == 127:\n        return 127\n    elif n == 128:\n        return 128\n    elif n == 129:\n        return 129\n    elif n == 130:\n        return 130\n    elif n == 131:\n        return 131\n    elif n == 132:\n        return 132\n    elif n == 133:\n        return 133\n    elif n == 134:\n        return 134\n    elif n == 135:\n        return 135\n    elif n == 136:\n        return 136\n    elif n == 137:\n        return 137\n    elif n == 138:\n        return 138\n    elif n == 139:\n        return 139\n    elif n == 140:\n        return 140\n    elif n == 141:\n        return 141\n    elif n == 142:\n        return 142\n    elif n == 143:\n        return 143\n    elif n == 144:\n        return 144\n    elif n == 145:\n        return 145\n    elif n == 146:\n        return 146\n    elif n == 147:\n        return 147\n    elif n == 148:\n        return 148\n    elif n == 149:\n        return 149\n    elif n == 150:\n        return 150\n    elif n == 151:\n        return 151\n    elif n == 152:\n        return 152\n    elif n == 153:\n        return 153\n    elif n == 154:\n        return 154\n    elif n == 155:\n        return 155\n    elif n == 156:\n        return 156\n    elif n == 157:\n        return 157\n    elif n == 158:\n        return 158\n    elif n == 159:\n        return 159\n    elif n == 160:\n        return 160\n    elif n == 161:"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = 1\n    if n <= 3:\n        num = 1\n    elif n >= 4:\n        num = 1\n    return num\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    s = set(str(n))\n    if len(s) == 0:\n        print(0)\n    elif len(s) == 1:\n        print(int(n/10))\n    elif len(s) == 2:\n        print(int(n/10) + 10)\n    else:\n        print(int(n/10) + 10 + 1)\n        \nn = int(input('Enter the value: '))\njacobsthal_num(n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n=int(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    f=0\n    s = int(n)\n    if s<=0:\n        print(\"invalid input\")\n    elif s==1:\n        f = 1\n    elif s==2:\n        f = 2\n    elif s==3:\n        f = 3\n    elif s==4:\n        f = 4\n    elif s==5:\n        f = 5\n    elif s==6:\n        f = 6\n    elif s==7:\n        f = 7\n    elif s==8:\n        f = 8\n    elif s==9:\n        f = 9\n    elif s==10:\n        f = 10\n    elif s==11:\n        f = 11\n    elif s==12:\n        f = 12\n    elif s==13:\n        f = 13\n    elif s==14:\n        f = 14\n    elif s==15:\n        f = 15\n    elif s==16:\n        f = 16\n    elif s==17:\n        f = 17\n    elif s==18:\n        f = 18\n    elif s==19:\n        f = 19\n    elif s==20:\n        f = 20\n    elif s==21:\n        f = 21\n    elif s==22:\n        f = 22\n    elif s==23:\n        f = 23\n    elif s==24:\n        f = 24\n    elif s==25:\n        f = 25\n    elif s==26:\n        f = 26\n    elif s==27:\n        f = 27\n    elif s==28:\n        f = 28\n    elif s==29:\n        f = 29\n    elif s==30:\n        f = 30\n    elif s==31:\n        f = 31\n    elif s==32:\n        f = 32\n    elif s==33:\n        f = 33\n    elif s==34:\n        f = 34\n    elif s==35:\n        f = 35\n    elif s==36:\n        f = 36\n    elif s==37:\n        f = 37\n    elif s==38:\n        f = 38\n    elif s==39:\n        f = 39\n    elif s==40:\n        f = 40\n    elif s==41:\n        f = 41\n    elif s==42:\n        f = 42\n    elif s==43:\n        f = 43\n    elif s==44:\n        f = 44\n    elif s==45:\n        f = 45\n    elif s==46:\n        f = 46\n    elif s==47:\n        f = 47\n    elif s==48:\n        f = 48\n    elif s==49:\n        f = 49\n    elif s==50:\n        f = 50\n    elif s==51:\n        f = 51\n    elif s==52:\n        f = 52\n    elif s==53:\n        f = 53\n    elif s==54:\n        f = 54\n    elif s==55:\n        f = 55\n    elif s==56:\n        f = 56\n    elif s==57:\n        f = 57\n    elif s==58:\n        f = 58\n    elif s==59:\n        f = 59\n    elif s==60:\n        f = 60\n    elif s==61:\n        f = 61\n    elif s==62:\n        f = 62\n    elif s==63:\n        f = 63\n    elif s==64:\n        f = 64\n    elif s==65:\n        f = 65\n    elif s==66:\n        f = 66\n    elif s==67:\n        f = 67\n    elif s==68:\n        f = 68\n    elif s==69:\n        f = 69\n    elif s==70:\n        f = 70\n    elif s==71:\n        f = 71\n    elif s==72:\n        f = 72\n    elif s==73:\n        f = 73\n    elif s==74:\n        f = 74\n    elif s==75:\n        f = 75\n    elif s==76:\n        f = 76\n    elif s==77:\n        f = 77\n    elif s==78:\n        f = 78\n    elif s==79:\n        f = 79\n    elif s==80:\n        f = 80\n    elif s==81:\n        f = 81\n    elif s==82:\n        f = 82\n    elif s==83:\n        f = 83\n    elif s==84:\n        f = 84\n    elif s==85:\n        f = 85\n    elif s==86:\n        f = 86\n    elif s==87:\n        f = 87\n    elif s==88:\n        f = 88\n    elif s==89:\n        f = 89\n    elif s==90:\n        f = 90\n    elif s==91:\n        f = 91\n    elif s==92:\n        f = 92\n    elif s==93:\n        f = 93\n    elif s==94:\n        f = 94\n    elif s==95:\n        f = 95\n    elif s==96:\n        f = 96\n    elif s==97:\n        f = 97\n    elif s==98:\n        f = 98\n    elif s==99:\n        f = 99\n    elif s==100:\n        f = 100\n    elif s==101:\n        f = 101\n    elif s==102:\n        f = 102\n    elif s==103:\n        f = 103\n    elif s==104:\n        f = 104\n    elif s==105:\n        f = 105\n    elif s==106:\n        f = 106\n    elif s==107:\n        f = 107\n    elif s==108:\n        f = 108\n    elif s==109:\n        f = 109\n    elif s==110:\n        f = 110\n    elif s==111:\n        f = 111\n    elif s==112:\n        f = 112\n    elif s==113:\n        f = 113\n    elif s==114:\n        f = 114\n    elif s==115:\n        f = 115\n    elif s==116:\n        f = 116\n    elif s==117:\n        f = 117\n    elif s==118:\n        f = 118\n    elif s==119:\n        f = 119\n    elif s==120:\n        f = 120\n    elif s==121:\n        f = 121\n    elif s==122:\n        f = 122\n    elif s==123:\n        f = 123\n    elif s==124:\n        f = 124\n    elif s==125:\n        f = 125\n    elif s==126:\n        f = 126\n    elif s==127:\n        f = 127\n    elif s==128:\n        f = 128\n    elif s==129:\n        f = 129\n    elif s==130:\n        f = 130\n    elif s==131:\n        f = 131\n    elif s==132:\n        f = 132\n    elif s==133:\n        f = 133\n    elif s==134:\n        f = 134\n    elif s==135:\n        f = 135\n    elif s==136:\n        f = 136\n    elif s==137:\n        f = 137\n    elif s==138:\n        f = 138\n    elif s==139:\n        f = 139\n    elif s==140:\n        f = 140\n    elif s==141:\n        f = 141\n    elif s==142:\n        f = 142\n    elif s==143:\n        f = 143\n    elif s==144:\n        f = 144\n    elif s==145:\n        f = 145\n    elif s==146:\n        f = 146\n    elif s==147:\n        f = 147\n    elif s==148:"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = float('inf')\n    for x in test_list:\n        if x[K] < minimum:\n            minimum = x[K]\n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list_sorted = sorted(test_list, key = lambda x: x[0])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize an empty list\n    minimum_list = []\n    # build a list of tuples of (id, rating) pairs\n    for i in test_list:\n        # append all entries with minimum rating to the list\n        minimum_list.append((i[0], i[1],))\n    # sort the list\n    minimum_list = sorted(minimum_list)\n    # initialize an empty dictionary\n    minimum_dict = {}\n    # iterate through the list\n    for i in minimum_list:\n        # if the key is not present\n        if i[1] not in minimum_dict:\n            minimum_dict[i[1]] = 1\n        else:\n            # add the number of times that rating was entered\n            minimum_dict[i[1]] = minimum_dict[i[1]] + 1\n    # return the top k rated pairs\n    return list(minimum_dict.items())[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_tuple_list = sorted(test_list, key=lambda x: (x[0],x[1]))\n    \n    ans = []\n    for i in range(len(sorted_tuple_list)):\n        if i % K == 0:\n            ans.append(sorted_tuple_list[i])\n    return ans\n    \n    \ndef dfs(test_list, K, idx, curr_list, curr_dict, visited):\n    '''\n    Write a function to find minimum k records from tuple list. \n    The function goes through the current level of the dfs tree and\n    takes a tuple list and it's dict, and returns the list in a tuple list.\n    '''\n    if idx == len(test_list):\n        curr_list.append(curr_dict)\n        return curr_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = 0\n    for i in range(0, len(test_list) - K + 1):\n        test = test_list[i: i + K]\n        if len(test) > min_k:\n            min_k = len(test)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = 1\n    for t in test_list:\n        if minimum <= len(t):\n            minimum = len(t)\n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return list(map(tuple, test_list))\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test cases\n    min_k_cases = []\n    for test in test_list:\n        min_k_cases.append((test[0], K-len(test[0]), test[1], test[2], test[3]))\n    \n    # sort in descending order\n    min_k_cases.sort(reverse=True)\n    # return first k cases\n    return min_k_cases[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list)\n    k = len(test_list) - 1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i])\n    return min_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def extract_index_list_second_part(l1, l2, l3):\n        '''\n        The idea is to find the position of the first element in all three lists under that index. If l1[i] is common to l1[i], return l1[i] as the first element in the list.\n        '''\n        for i in range(len(l1)):\n            if l1[i] == l2[i] == l3[i]:\n                return l1[i]\n        return l1[-1]\n    # extract the first part of l1, l2, l3\n    first_part = extract_index_list(l1, l2, l3)\n    # extract the second part of l1, l2, l3\n    second_part = extract_index_list(l1, l2, l3)\n    # extract the third part of l1, l2, l3\n    third_part = extract_index_list(l1, l2, l3)\n    # then combine the first part with the second part, to get the common element\n    result = first_part + second_part + third_part\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1) & set(l2) & set(l3)"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indices = []\n    for i in range(len(l1)):\n        for j in range(len(l1)):\n            for k in range(len(l2)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    indices.append(i)\n                    break\n    return indices"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # t1 = time.time()\n    common_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k] and l3[k] == l1[i]:\n                    common_list.append(l1[i])\n    # print(\"{} seconds\".format(time.time() - t1))\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    list_of_elements = []\n    for i in range(len(l1)):\n        list_of_elements = [l1[i], l2[i], l3[i]]\n        if list_of_elements in list1 and list_of_elements in list2 and list_of_elements in list3:\n            list1.remove(list_of_elements)\n            list2.remove(list_of_elements)\n            list3.remove(list_of_elements)\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    if list1:\n        for i in range(len(list1)):\n            if list1[i] in list3:\n                list3.remove(list1[i])\n            if list2[i] in list3:\n                list3.remove(list2[i])\n    return list3\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # (I think it can be done as follows:\n    # return list(set(l1[l2[l3[index]]]) & set(l2[l3[index]]))\n    # or\n    return list(set(l1[l2[l3[index]]]) & set(l2[l3[index]]))\n    # or\n    # return list(set(l1[l2[l3[index]]]) & set(l2[l3[index]])) or\n    # return list(set(l1[l2[l3[index]]]) & set(l2[l3[index]])) or\n    # return set(l1[l2[l3[index]]]) & set(l2[l3[index]])\n    # or\n    # return set(l1[l2[l3[index]]]) & set(l2[l3[index]])\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if(l1[i] in l2):\n            if(l1[i] in l3):\n                index_list.append(i)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # No index provided\n    if len(l1) == 0 and len(l2) == 0 and len(l3) == 0:\n        return []\n    \n    # Only the first index provided\n    if len(l1) == 0:\n        if len(l2) == 0:\n            if len(l3) == 0:\n                return l3\n            else:\n                return []\n        \n        # The first element is a list, so it has a common index\n        return [l2[0]]\n    \n    # Only the second index provided\n    if len(l2) == 0:\n        if len(l1) == 0:\n            return [l1[0]]\n        \n        # The first element is a list, so it has a common index\n        return [l1[0]] + extract_index_list(l1[1:], l2, l3)\n    \n    # Only the third index provided\n    if len(l3) == 0:\n        if len(l1) == 0:\n            return [l1[0]] + extract_index_list(l1[1:], l2, l3)\n        \n        # The first element is a list, so it has a common index\n        return [l1[0]] + extract_index_list(l1[1:], l2, l3) + extract_index_list(l1[1:], l3, l2)\n    \n    # The first element is a list, so it has a common index\n    return [l1[0]] + extract_index_list(l1[1:], l2, l3) + extract_index_list(l1[1:], l3, l2)\n    \ndef print_lists(l1, l2, l3):\n    '''\n    This function prints out the results of the two lists as an array.\n    '''\n    \n    print('Original list:', l1)\n    print('After the first index removal:', l2)\n    print('After the second index removal:', l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #print('l1', l1)\n    #print('l2', l2)\n    #print('l3', l3)\n    #print('len l1', len(l1))\n    #print('len l2', len(l2))\n    #print('len l3', len(l3))\n    #print('l1[0]', l1[0])\n    #print('l2[0]', l2[0])\n    #print('l3[0]', l3[0])\n    index = 0\n    out_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            #print('Checking', l1[i])\n            if l2.index(l1[i]) == l3.index(l1[i]):\n                #print('Found')\n                out_list.append(l1[i])\n                index += 1\n        elif l1[i] in l3:\n            #print('Checking', l1[i])\n            if l3.index(l1[i]) == l2.index(l1[i]):\n                #print('Found')\n                out_list.append(l1[i])\n                index += 1\n    return out_list, index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    index_list = []\n    \n    for i in range(0, len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            index_list.append(i)\n    \n    return index_list\n    \ndef find_element(a,b,c):\n    '''\n    Returns an element from a, b, and c. We call this element a*b*c.\n    '''\n    \n    for i in range(0, len(a)):\n        if a[i]*b[i]*c==1:\n            return a[i]*b[i]*c\n            \ndef index_of_common_elem(l1, l2, l3):\n    '''\n    A function to find the index of a common element in three lists.\n    '''\n    \n    index_list = extract_index_list(l1, l2, l3)\n    for i in index_list:\n        if find_element(l1[i], l2[i], l3[i])==1:\n            return i\n    return -1\n    \ndef n_common(a, b, c, d, e, f):\n    '''\n    A function to find the number of common elements.\n    '''\n    \n    index_list = extract_index_list(a, b, c)\n    count=0\n    for i in index_list:\n        if index_of_common_elem(a, b, c)==-1 and index_of_common_elem(a, b, d)==-1 and index_of_common_elem(a, b, e)==-1 and index_of_common_elem(a, b, f)==-1:\n            count+=1\n    return count\n    \ndef main():\n    '''\n    A function to find the number of common elements.\n    '''\n    \n    a=[2,5,1,2,7,8]\n    b=[1,2,3,4,5]\n    c=[6,7,8,9,10]\n    d=[6,7,8,9,10]\n    e=[6,7,8,10,11]\n    f=[6,7,8,10,11]\n    \n    print(\"Number of common elements: \", n_common(a,b,c,d,e,f))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    smallest_index = 0\n    smallest_value = float('inf')\n    \n    for index in range(len(numbers)):\n        value = numbers[index]\n        if value < smallest_value:\n            smallest_index = index\n            smallest_value = value\n    \n    return smallest_value, smallest_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    numbers.sort()\n    \n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # the simplest way is to sort the list.\n    numbers.sort()\n    return numbers[1]\n    # or\n    # numbers = sorted(numbers)\n    # return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for n in numbers:\n        if n == 2:\n            return n\n    return -1\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Your code here\n    return 2\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest:\n            smallest = number\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # HINT: you can use sorted function from collections module\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # pass the first value to the function\n    print(\"The second smallest number is \", end=\"\")\n    print(second_smallest(numbers)[0])\n    \n    \n    \n    \n    # pass the second value to the function\n    print(\"The second smallest number is \", end=\"\")\n    print(second_smallest(numbers)[1])\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has a two-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has a three-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has a four-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has a five-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has a six-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has a seven-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has a eight-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_nine(text):\n    '''\n    Write a function that matches a string that has a nine-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_ten(text):\n    '''\n    Write a function that matches a string that has a ten-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_eleven(text):\n    '''\n    Write a function that matches a string that has a eleven-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_twelve(text):\n    '''\n    Write a function that matches a string that has a twelve-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+\\s?[a-z]+'\n    return re.findall(regex, text, flags=re.IGNORECASE)\ndef text_match_zero_zero(text):\n    '''\n    Write a function that matches a string that has a zero-word long string. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    regex = r'[a-zA-Z]+\\s?[a-z]"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=a)'\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.findall(r\"\\w+a\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b's.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_two_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b's and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three 'b's.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_three_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three 'b's and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by four 'b' or '*'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_four_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by four 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by five 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_five_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by five 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by six 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_six_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by six 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by seven 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_seven_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by seven 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n    \ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eight 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_eight_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eight 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by nine 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n        \ndef text_match_zero_nine_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by nine 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n    \ndef text_match_zero_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by ten 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n    \ndef text_match_zero_ten_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by ten 'b' or '*' and '+'.\n    '''\n    matches = re.findall(r\"\\w+a\\w+\\w+\\w+\\w+\\w+\\w+\\w+\\w+\", text)\n    if matches == []:\n        return text\n    else:\n        return text\n    \ndef text_match_zero_eleven(text):\n    '''\n    Write a function that matches "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match(r'(a){0,1}b', text)\n    if result == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_wo_a = text.replace('a', '')\n    text_wo_b = text.replace('b', '')\n    print(text_wo_a)\n    print(text_wo_b)\n    text_wo_a = text_wo_a.replace(' ', '')\n    text_wo_b = text_wo_b.replace(' ', '')\n    print(text_wo_a)\n    print(text_wo_b)\n    if(text_wo_a == '' or text_wo_b == ''):\n        return True\n    else:\n        if(text_wo_a[0] == text_wo_b[0]):\n            return True\n        else:\n            return False\ndef text_match_zero_one_non_list(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_wo_a = text.replace('a', '')\n    text_wo_b = text.replace('b', '')\n    text_wo_a = text_wo_a.replace(' ', '')\n    text_wo_b = text_wo_b.replace(' ', '')\n    print(text_wo_a)\n    print(text_wo_b)\n    print(text_wo_a[0])\n    print(text_wo_b[0])\n    if(text_wo_a[0]!= text_wo_b[0]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'a{1}', text)!= None and re.search(r'b{1}', text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace(\"a\", \"2\")\n    text = text.replace(\"b\", \"3\")\n    text = text.replace(\"c\", \"4\")\n    text = text.replace(\"d\", \"5\")\n    text = text.replace(\"e\", \"6\")\n    text = text.replace(\"f\", \"7\")\n    text = text.replace(\"g\", \"8\")\n    text = text.replace(\"h\", \"9\")\n    text = text.replace(\"i\", \"10\")\n    text = text.replace(\"j\", \"11\")\n    text = text.replace(\"k\", \"12\")\n    text = text.replace(\"l\", \"13\")\n    text = text.replace(\"m\", \"14\")\n    text = text.replace(\"n\", \"15\")\n    text = text.replace(\"o\", \"16\")\n    text = text.replace(\"p\", \"17\")\n    text = text.replace(\"q\", \"18\")\n    text = text.replace(\"r\", \"19\")\n    text = text.replace(\"s\", \"20\")\n    text = text.replace(\"t\", \"21\")\n    text = text.replace(\"u\", \"22\")\n    text = text.replace(\"v\", \"23\")\n    text = text.replace(\"w\", \"24\")\n    text = text.replace(\"x\", \"25\")\n    text = text.replace(\"y\", \"26\")\n    text = text.replace(\"z\", \"27\")\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?:[bc]+)(?:b\\w+)?'\n    return re.search(pattern, text).group()\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.findall('[a-zA-Z]*?b', text)\n    text = re.sub('a+', '', text)\n    text = re.sub('b+', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s', '', text)\n    text = re.sub('[a-zA-Z]*?\\s'"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'a(b)?\\s?(c)')\n    #m = pattern.match(text)\n    #return m.group(2)\n    #return re.search(pattern, text)\n    \n    pattern = re.compile(r'[a-b]{2}')\n    #m = re.search(pattern, text)\n    #return m.group(0)\n    m = re.search(pattern, text)\n    #return m.group(0)\n    return m.group(1)\n    #return re.search(pattern, text)\n    #return text[0:len(pattern)]\n    #return re.search(pattern, text)\n    #return text[0:len(pattern)]\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #preprocess the input\n    test_list = [x.lower() for x in test_list]\n    test_list = [x.replace(\" \",\"\") for x in test_list]\n    #print(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    temp = test_list[::-1]\n    for i in range(len(temp)):\n        if temp[i][::-1] == temp[i]:\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # your code goes here\n    count_0 = 0\n    count_1 = 0\n    if len(test_list) <= 2:\n        return 0\n    for i in range(1,len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == test_list[i-1][j]:\n                count_0 += 1\n            else:\n                break\n    for i in range(len(test_list[:-1])):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == test_list[i+1][j]:\n                count_1 += 1\n            else:\n                break\n    return count_0,count_1\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            pairs += 1\n        return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #Your Code Here\n    result = 0\n    for index in range(len(test_list) - 1):\n        if test_list[index] == test_list[index+1]:\n            result = result + 2\n        else:\n            result = result + 1\n    print(result)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i]!= test_list[i+1]:\n            count +=1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_dict = {}\n    for string in test_list:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    num_list = []\n    for i in test_list:\n        if i[::-1] in num_list:\n            num_list.remove(i[::-1])\n        else:\n            num_list.append(i[::-1])\n    print(f'Number of pairs of reverse strings: {len(num_list)}')\n    print(f'Number of pairs of reversed string: {len(num_list[::-1])}')\n    return len(num_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique = dict()\n    for lst in list1:\n        lst = tuple(lst)\n        if lst in unique:\n            unique[lst] += 1\n        else:\n            unique[lst] = 1\n    return unique"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    from collections import Counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        temp = tuple(list1[i])\n        if temp in result:\n            result[temp] += 1\n        else:\n            result[temp] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j] and i!= j:\n                if list1[i] not in count_dict.keys():\n                    count_dict[list1[i]] = 1\n                else:\n                    count_dict[list1[i]] += 1\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    countDict = {}\n    for index, element in enumerate(list1):\n        countDict[element] = countDict.get(element, 0) + 1\n    return countDict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    map_list=[]\n    list_len = len(list1)\n    list_dict = {}\n    for i in range(list_len):\n        if(type(list1[i])==list):\n            for i in list1[i]:\n                if(type(i)==tuple):\n                    if(i[0] not in map_list):\n                        map_list.append(i[0])\n                else:\n                    map_list.append(i)\n    map_list = set(map_list)\n    for i in map_list:\n        list_dict[i]=list_len-list_dict[i]\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for i in list1:\n        if tuple(i) in dictionary:\n            dictionary[tuple(i)] += 1\n        else:\n            dictionary[tuple(i)] = 1\n    return dictionary\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tuple_list = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            tuple_list.update({list1[i][j]: list1[i][j].count(list1[i][j])})\n    return tuple_list\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for l in list1:\n        if dict.get(l) is None:\n            dict[l] = 1\n        else:\n            dict[l] += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    t = {}\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isalpha():\n        return False\n    elif num[0] == '-' or num[0] == '+' or num[0] == '0':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if len(num) > 0:\n        if not num.isdigit():\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.find('.') == -1:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    str_num = str(num)\n    digits = 0\n    for char in str_num:\n        if char.isdigit():\n            digits += 1\n    return digits == 2\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '':\n        return False\n    if not num.isdigit():\n        return False\n    else:\n        if not num[0].isalpha():\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num, str) and any([i.isdigit() for i in str(num)])\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    result = False\n    if not num.isdigit():\n        print(\"Error: the input must be a number.\")\n        result = False\n    else:\n        for char in num:\n            if char.isdigit():\n                result = True\n    return result\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Special cases\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    \n    # Check if it's a whole number\n    for i in range(len(num) - 1):\n        if int(num[i:i+2]) == int(num[i+1:i+3]):\n            pass\n        else:\n            return False\n    \n    # Check if it is a decimal number\n    for i in range(2, len(num)):\n        if int(num[0:i]) == int(num[i:i+2]):\n            pass\n        else:\n            return False\n    \n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i] not in arr:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return arr[0] == arr[0]\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= 1:\n        return False\n    else:\n        return True\n    #Write your code here!\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = list(set(arr))\n    return len(arr)==1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Write your code here\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[j]==arr[i]:\n                count += 1\n    if count == 1:\n        return True\n    return False\n    \n    \n    \n    \n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    flag=False\n    for i in range(len(arr)):\n        if(arr[i]==i):\n            flag=True\n            break\n    if(flag==False):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return False\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return False\n        else:\n            return True\n    else:\n        for i in arr:\n            if i not in set(arr):\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create an empty array to store results\n    unique_list = []\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    hash = {}\n    if len(arr) == 1:\n        return False\n    for n in arr:\n        if n in hash:\n            return False\n        else:\n            hash[n] = 1\n    return True\n    # count = 0\n    # for n in arr:\n    #     if n in hash:\n    #         count += 1\n    #     else:\n    #         return False\n    # return count == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Your code here\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3<1 or monthnum3>12:\n        return False\n    elif monthnum3>20 and monthnum3<=24:\n        if monthnum3==20:\n            return True\n        elif monthnum3==21:\n            return True\n        elif monthnum3==22:\n            return True\n        elif monthnum3==23:\n            return True\n        elif monthnum3==24:\n            return True\n        else:\n            return False\n    elif monthnum3>25 and monthnum3<=28:\n        if monthnum3==25:\n            return True\n        elif monthnum3==26:\n            return True\n        elif monthnum3==27:\n            return True\n        elif monthnum3==28:\n            return True\n        elif monthnum3==29:\n            return True\n        elif monthnum3==30:\n            return True\n        elif monthnum3==31:\n            return True\n        elif monthnum3==32:\n            return True\n        elif monthnum3==33:\n            return True\n        elif monthnum3==34:\n            return True\n        elif monthnum3==35:\n            return True\n        elif monthnum3==36:\n            return True\n        elif monthnum3==37:\n            return True\n        elif monthnum3==38:\n            return True\n        elif monthnum3==39:\n            return True\n        elif monthnum3==40:\n            return True\n        elif monthnum3==41:\n            return True\n        elif monthnum3==42:\n            return True\n        elif monthnum3==43:\n            return True\n        elif monthnum3==44:\n            return True\n        elif monthnum3==45:\n            return True\n        elif monthnum3==46:\n            return True\n        elif monthnum3==47:\n            return True\n        elif monthnum3==48:\n            return True\n        elif monthnum3==49:\n            return True\n        elif monthnum3==50:\n            return True\n        elif monthnum3==51:\n            return True\n        elif monthnum3==52:\n            return True\n        elif monthnum3==53:\n            return True\n        elif monthnum3==54:\n            return True\n        elif monthnum3==55:\n            return True\n        elif monthnum3==56:\n            return True\n        elif monthnum3==57:\n            return True\n        elif monthnum3==58:\n            return True\n        elif monthnum3==59:\n            return True\n        elif monthnum3==60:\n            return True\n        elif monthnum3==61:\n            return True\n        elif monthnum3==62:\n            return True\n        elif monthnum3==63:\n            return True\n        elif monthnum3==64:\n            return True\n        elif monthnum3==65:\n            return True\n        elif monthnum3==66:\n            return True\n        elif monthnum3==67:\n            return True\n        elif monthnum3==68:\n            return True\n        elif monthnum3==69:\n            return True\n        elif monthnum3==70:\n            return True\n        elif monthnum3==71:\n            return True\n        elif monthnum3==72:\n            return True\n        elif monthnum3==73:\n            return True\n        elif monthnum3==74:\n            return True\n        elif monthnum3==75:\n            return True\n        elif monthnum3==76:\n            return True\n        elif monthnum3==77:\n            return True\n        elif monthnum3==78:\n            return True\n        elif monthnum3==79:\n            return True\n        elif monthnum3==80:\n            return True\n        elif monthnum3==81:\n            return True\n        elif monthnum3==82:\n            return True\n        elif monthnum3==83:\n            return True\n        elif monthnum3==84:\n            return True\n        elif monthnum3==85:\n            return True\n        elif monthnum3==86:\n            return True\n        elif monthnum3==87:\n            return True\n        elif monthnum3==88:\n            return True\n        elif monthnum3==89:\n            return True\n        elif monthnum3==90:\n            return True\n        elif monthnum3==91:\n            return True\n        elif monthnum3==92:\n            return True\n        elif monthnum3==93:\n            return True\n        elif monthnum3==94:\n            return True\n        elif monthnum3==95:\n            return True\n        elif monthnum3==96:\n            return True\n        elif monthnum3==97:\n            return True\n        elif monthnum3==98:\n            return True\n        elif monthnum3==99:\n            return True\n        elif monthnum3==100:\n            return True\n        elif monthnum3==101:\n            return True\n        elif monthnum3==102:\n            return True\n        elif monthnum3==103:\n            return True\n        elif monthnum3==104:\n            return True\n        elif monthnum3==105:\n            return True\n        elif monthnum3==106:\n            return True\n        elif monthnum3==107:\n            return True\n        elif monthnum3==108:\n            return True\n        elif monthnum3==109:\n            return True\n        elif monthnum3==110:\n            return True\n        elif monthnum3==111:\n            return True\n        elif monthnum3==112:\n            return True\n        elif monthnum3==113:\n            return True\n        elif monthnum3==114:\n            return True\n        elif monthnum3==115:\n            return True\n        elif monthnum3==116:\n            return True\n        elif monthnum3==117:\n            return True\n        elif monthnum3==118:\n            return True\n        elif monthnum3==119:\n            return True\n        elif monthnum3==120:\n            return True\n        elif monthnum3==121:\n            return True\n        elif monthnum3==122:\n            return True\n        elif monthnum3==123:\n            return True\n        elif monthnum3==124:\n            return True\n        elif monthnum3==125:\n            return True\n        elif monthnum3==126:\n            return True\n        elif monthnum3==127:\n            return True\n        elif monthnum3==128:\n            return True\n        elif monthnum3==129:\n            return True\n        elif monthnum3==130:\n            return True\n        elif monthnum3==131:\n            return True\n        elif monthnum3==132:\n            return True\n        elif monthnum3==133:\n            return True\n        elif monthnum3==134:\n            return True\n        elif monthnum3==135:\n            return True\n        elif monthnum3==136:\n            return True\n        elif monthnum3==137:\n            return True\n        elif monthnum3==138:\n            return True\n        elif monthnum3==139:\n            return True\n        elif monthnum3==140:\n            return True\n        elif monthnum3==141:\n            return True\n        elif monthnum3==142:\n            return True\n        elif monthnum3==143:\n            return True\n        elif monthnum3==144:\n            return True\n        elif monthnum3==145:\n            return True\n        elif monthnum3==146:\n            return True\n        elif monthnum3==147:\n            return True\n        elif monthnum3==148:\n            return True\n        elif monthnum3==149:\n            return True\n        elif monthnum3==150:\n            return True\n        elif monthnum3==151:\n            return True\n        elif monthnum3==152:\n            return True\n        elif monthnum3==153:\n            return True\n        elif monthnum3==154:\n            return True\n        elif monthnum3==155:\n            return True\n        elif monthnum3==156:\n            return True\n        elif monthnum3==157:\n            return True\n        elif monthnum3==15"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return monthnum3\n    else:\n        return 0\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check_string = '01'\n    if (int(monthnum3) >= 1) and (int(monthnum3) <= 12):\n        check_string = '30'\n    elif (int(monthnum3) >= 1) and (int(monthnum3) <= 31):\n        check_string = '31'\n    elif (int(monthnum3) >= 1) and (int(monthnum3) <= 30):\n        check_string = '30'\n    elif (int(monthnum3) >= 1) and (int(monthnum3) <= 31):\n        check_string = '31'\n    return check_string\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    if monthnum3 == 12:\n        return True\n    if monthnum3 > 12:\n        print(\"Month number not found\")\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber = int(monthnum3)\n    if(monthnumber == 31 or monthnumber == 28 or monthnumber == 29):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_number_dict = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 <= 31:\n        return True\n    else:\n        for key in month_number_dict:\n            if monthnum3 == key:\n                return True\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        monthnum3=int(monthnum3)\n    except ValueError:\n        print('Month number must be a number')\n        return\n    if monthnum3 > 12 or monthnum3 < 1:\n        print('Month number must be a number between 1 and 12')\n        return\n    else:\n        monthnum3=monthnum3-1\n        if monthnum3 in range(1,13):\n            print(f'{monthnum3} has 30 days.')\n        else:\n            print(f'{monthnum3} has not 30 days.')\n            print('The month is not a leap month.')\n            return\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        monthnum3 = 31\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 2:\n        monthnum3 = 28\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 3:\n        monthnum3 = 31\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 4:\n        monthnum3 = 30\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 5:\n        monthnum3 = 31\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 6:\n        monthnum3 = 30\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 7:\n        monthnum3 = 31\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 8:\n        monthnum3 = 31\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 9:\n        monthnum3 = 30\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 10:\n        monthnum3 = 31\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 11:\n        monthnum3 = 30\n        monthnum3 = monthnum3 - 1\n    elif monthnum3 == 12:\n        monthnum3 = 31\n        monthnum3 = monthnum3 - 1\n    else:\n        print('Invalid Month Number')\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 not in range(1,13):\n        print(\"Invalid month\")\n    elif monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid month\")\n    else:\n        print(\"Invalid month number\")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i = 0\n    j = n-1\n    while i < j: \n        if arr[i] > arr[j]:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp \n        i = i + 1\n        j = j - 1\n    return arr[0] \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0] - arr[1]) \n    for i in range(2,n): \n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1])) \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    dp = [[-1 for _ in range(n)] for _ in range(n)] \n    min_diff = -1 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] == arr[j]: \n                continue \n            if arr[i] - arr[j] < min_diff: \n                min_diff = arr[i] - arr[j] \n                dp[i][j] = min_diff \n                dp[j][i] = min_diff \n            else: \n                dp[i][j] = 0 \n                dp[j][i] = 0 \n    return (min_diff, dp) \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    i,j=0,0\n    min_diff=arr[0]\n    while i < len(arr)-1:\n        if arr[i+1] - arr[i] > min_diff:\n            min_diff=arr[i+1] - arr[i]\n            j+=1\n        i+=1\n    if j<n:\n        i+=1\n    return min_diff\nprint(find_min_diff([-1,3,-6,5,2,3],[3,3,3,3,5,2],[3,5,4,2,3]))\nprint(find_min_diff([3,-1,2,3],[2,-5,6,1],[1,3,1,7])"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    result = float(\"inf\")\n    for i in range(0, n):\n        for j in range(i+1, n):\n            result = min(result, abs(arr[i]-arr[j]))\n    return result\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i=0\n    j=n-1\n    min_diff=arr[i]+arr[j]\n    while i<n and j>=0:\n        if arr[i]<arr[j]:\n            min_diff=min(min_diff,arr[i]+arr[j])\n            i+=1\n        else:\n            j-=1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    low_diff = arr[0]\n    high_diff = arr[n - 1]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Initialize variables\n    min_diff = float('inf')\n    min_idx = -1\n    # Loop through each index\n    for i in range(n-1): \n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff: \n            min_diff = diff\n            min_idx = i+1\n    return min_idx, min_diff"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i,j = 0, 0\n    max_diff = arr[0] - arr[1]\n    while i < n and j < n:\n        if arr[i] < arr[j]:\n            i+=1\n        else:\n            j+=1\n        max_diff = max(max_diff, arr[j]-arr[i])\n    \n    return max_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return arr[0]\n    else:\n        return min(arr[0],arr[1]) + find_min_diff(arr[2:],n-1)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count_dig = 0\n    for i in str:\n        if i.isdigit():\n            count_dig += 1\n    return count_dig\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for char in str:\n        if char.isdigit():\n            cnt += 1\n    return cnt\n    "
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number_ctr = 0\n    for i in range(len(str)):\n        if str[i] == '0' or str[i] == '1':\n            number_ctr += 1\n    return number_ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    # string.replace(' ', '')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_ctr = 0\n    str = str.replace(' ', '')\n    for i in str:\n        if i.isdigit():\n            num_ctr += 1\n    return num_ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - str.count('0')\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isdigit():\n            ctr += 1\n    return ctr\n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 2\n    while(a <= n):\n        b = 3\n        while(b <= n):\n            c = math.sqrt(a*a + b*b)\n            if(c == n):\n                return n\n            elif(c < n):\n                b = b + 2\n            else:\n                a = a + 2\n        a = a + 2\n    return n\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # base case:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return math.ceil((n+1)/2) - (math.ceil((n+1)/2)-1)/2\n    \ndef fib(n):\n    '''\n    Fibonacci numbers as a list of two integers, first and last.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n % 2) == 0:\n        return n // 2\n    else:\n        return n + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    l = []\n    for i in range(1, n+1):\n        if math.factorial(i) % n == 1:\n            l.append(i)\n    print(l)\n    return len(l)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    g = 1\n    x = 0\n    y = n\n    while(y > 0):\n        y = y - 1\n        x = x + g\n        g = x + 1\n    if(x % 2 == 0):\n        print(x - 1)\n    else:\n        print(x - 1)\n    return g\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = 0\n    if n == 1:\n        return 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            return 0\n    else:\n        return 1\n    \ndef is_equal(n):\n    '''\n    Write a function that returns if a number is equal to another number. geeksforgeeks.org/equal/\n    '''\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        return is_equal(n//2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 0\n    if n >= 0 and n <= 15:\n        return(0)\n    if n >= 16:\n        return(1)\n    if n >= 17 and n < 15:\n        return(2)\n    if n >= 18:\n        return(3)\n    if n >= 19 and n < 16:\n        return(4)\n    if n >= 20:\n        return(5)\n    if n >= 21 and n < 18:\n        return(6)\n    if n >= 22:\n        return(7)\n    if n >= 23 and n < 19:\n        return(8)\n    if n >= 24:\n        return(9)\n    if n >= 25:\n        return(10)\n    if n >= 26:\n        return(11)\n    if n >= 27:\n        return(12)\n    if n >= 28:\n        return(13)\n    if n >= 29:\n        return(14)\n    if n >= 30:\n        return(15)\n    if n >= 31:\n        return(16)\n    if n >= 32:\n        return(17)\n    if n >= 33:\n        return(18)\n    if n >= 34:\n        return(19)\n    if n >= 35:\n        return(20)\n    if n >= 36:\n        return(21)\n    if n >= 37:\n        return(22)\n    if n >= 38:\n        return(23)\n    if n >= 39:\n        return(24)\n    if n >= 40:\n        return(25)\n    if n >= 41:\n        return(26)\n    if n >= 42:\n        return(27)\n    if n >= 43:\n        return(28)\n    if n >= 44:\n        return(29)\n    if n >= 45:\n        return(30)\n    if n >= 46:\n        return(31)\n    if n >= 47:\n        return(32)\n    if n >= 48:\n        return(33)\n    if n >= 49:\n        return(34)\n    if n >= 50:\n        return(35)\n    if n >= 51:\n        return(36)\n    if n >= 52:\n        return(37)\n    if n >= 53:\n        return(38)\n    if n >= 54:\n        return(39)\n    if n >= 55:\n        return(40)\n    if n >= 56:\n        return(41)\n    if n >= 57:\n        return(42)\n    if n >= 58:\n        return(43)\n    if n >= 59:\n        return(44)\n    if n >= 60:\n        return(45)\n    if n >= 61:\n        return(46)\n    if n >= 62:\n        return(47)\n    if n >= 63:\n        return(48)\n    if n >= 64:\n        return(49)\n    if n >= 65:\n        return(50)\n    if n >= 66:\n        return(51)\n    if n >= 67:\n        return(52)\n    if n >= 68:\n        return(53)\n    if n >= 69:\n        return(54)\n    if n >= 70:\n        return(55)\n    if n >= 71:\n        return(56)\n    if n >= 72:\n        return(57)\n    if n >= 73:\n        return(58)\n    if n >= 74:\n        return(59)\n    if n >= 75:\n        return(60)\n    if n >= 76:\n        return(61)\n    if n >= 77:\n        return(62)\n    if n >= 78:\n        return(63)\n    if n >= 79:\n        return(64)\n    if n >= 80:\n        return(65)\n    if n >= 81:\n        return(66)\n    if n >= 82:\n        return(67)\n    if n >= 83:\n        return(68)\n    if n >= 84:\n        return(69)\n    if n >= 85:\n        return(70)\n    if n >= 86:\n        return(71)\n    if n >= 87:\n        return(72)\n    if n >= 88:\n        return(73)\n    if n >= 89:\n        return(74)\n    if n >= 90:\n        return(75)\n    if n >= 91:\n        return(76)\n    if n >= 92:\n        return(77)\n    if n >= 93:\n        return(78)\n    if n >= 94:\n        return(79)\n    if n >= 95:\n        return(80)\n    if n >= 96:\n        return(81)\n    if n >= 97:\n        return(82)\n    if n >= 98:\n        return(83)\n    if n >= 99:\n        return(84)\n    if n >= 100:\n        return(85)\n    if n >= 101:\n        return(86)\n    if n >= 102:\n        return(87)\n    if n >= 103:\n        return(88)\n    if n >= 104:\n        return(89)\n    if n >= 105:\n        return(90)\n    if n >= 106:\n        return(91)\n    if n >= 107:\n        return(92)\n    if n >= 108:\n        return(93)\n    if n >= 109:\n        return(94)\n    if n >= 110:\n        return(95)\n    if n >= 111:\n        return(96)\n    if n >= 112:\n        return(97)\n    if n >= 113:\n        return(98)\n    if n >= 114:\n        return(99)\n    if n >= 115:\n        return(100)\n    if n >= 116:\n        return(101)\n    if n >= 117:\n        return(102)\n    if n >= 118:\n        return(103)\n    if n >= 119:\n        return(104)\n    if n >= 120:\n        return(105)\n    if n >= 121:\n        return(106)\n    if n >= 122:\n        return(107)\n    if n >= 123:\n        return(108)\n    if n >= 124:\n        return(109)\n    if n >= 125:\n        return(110)\n    if n >= 126:\n        return(111)\n    if n >= 127:\n        return(112)\n    if n >= 128:\n        return(113)\n    if n >= 129:\n        return(114)\n    if n >= 130:\n        return(115)\n    if n >= 131:\n        return(116)\n    if n >= 132:\n        return(117)\n    if n >= 133:\n        return(118)\n    if n >= 134:\n        return(119)\n    if n >= 135:\n        return(120)\n    if n >= 136:\n        return(121)\n    if n >= 137:\n        return(122)\n    if n >= 138:\n        return(123)\n    if n >= 139:\n        return(124)\n    if n >= 140:\n        return(125)\n    if n >= 141:\n        return(126)\n    if n >= 142:\n        return(127)\n    if n >= 143:\n        return(128)\n    if n >= 144:\n        return(129)\n    if n >= 145:\n        return(130)\n    if n >= 146:\n        return(131)\n    if n >= 147:\n        return(132)\n    if n >= 148:\n        return(133)\n    if n >= 149:\n        return(134)\n    if n >= 150:\n        return(135)\n    if n >= 151:\n        return(136)\n    if n >= 152:\n        return(137)\n    if n >= 153:\n        return(138)\n    if n >= 154:\n        return(139)\n    if n >= 155:\n        return(140)\n    if n >= 156:\n        return(141)\n    if n >= 157:\n        return(142)\n    if n >= 158:\n        return(143)\n    if n >= 159:\n        return(144)\n    if n >= 160:\n        return(145)\n    if n >= 161:\n        return(146)\n    if n >= 162:\n        return(147)\n    if n >= 163:\n        return(148)\n    if n >= 164:\n        return(149)\n    if n >= 165:\n        return(150)\n    if n >= 166:\n        return"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            polite = 0\n            break\n        else:\n            polite = 1\n    return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return True\n    if n % 2!= 0: \n        return False\n    else: \n        return is_polite(n // 2)\n    \ndef nth_polite(n, d): \n    '''\n    Return the number of nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n == 1):\n        return d\n    if (n % 2!= 0): \n        return nth_polite(n//2, d+1)\n    return (d+1)\n    \ndef ex1(): \n    '''\n    Exercise 1: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex2(): \n    '''\n    Exercise 2: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex3(): \n    '''\n    Exercise 3: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex4(): \n    '''\n    Exercise 4: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex5(): \n    '''\n    Exercise 5: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex6(): \n    '''\n    Exercise 6: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex7(): \n    '''\n    Exercise 7: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex8(): \n    '''\n    Exercise 8: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex9(): \n    '''\n    Exercise 9: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex10(): \n    '''\n    Exercise 10: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex11(): \n    '''\n    Exercise 11: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex12(): \n    '''\n    Exercise 12: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex13(): \n    '''\n    Exercise 13: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex14(): \n    '''\n    Exercise 14: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex15(): \n    '''\n    Exercise 15: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex16(): \n    '''\n    Exercise 16: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex17(): \n    '''\n    Exercise 17: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex18(): \n    '''\n    Exercise 18: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex19(): \n    '''\n    Exercise 19: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex20(): \n    '''\n    Exercise 20: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex21(): \n    '''\n    Exercise 21: Is the solution to the Sudoku puzzle solved?\n    a)\n    '''\n    n = input(\"Enter the nth number: \")\n    d = input(\"Enter the nth number (d: negative) : \")\n    print(nth_polite(int(n), int(d)))\n    \ndef ex22(): \n    '''\n    Exercise 22: Is the solution to the Sudoku puzzle solved?\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1 or n==2:\n        return 1\n    if n==3 or n==4:\n        return 2\n    if n==5 or n==6:\n        return 3\n    if n==7 or n==8:\n        return 4\n    if n==9 or n==10:\n        return 5\n    if n==11 or n==12:\n        return 6\n    if n==13 or n==14:\n        return 7\n    if n==15 or n==16:\n        return 8\n    if n==17 or n==18:\n        return 9\n    if n==19 or n==20:\n        return 10\n    if n==21 or n==22:\n        return 11\n    if n==23 or n==24:\n        return 12\n    if n==25 or n==26:\n        return 13\n    if n==27 or n==28:\n        return 14\n    if n==29 or n==30:\n        return 15\n    if n==31 or n==32:\n        return 16\n    if n==33 or n==34:\n        return 17\n    if n==35 or n==36:\n        return 18\n    if n==37 or n==38:\n        return 19\n    if n==39 or n==40:\n        return 20\n    if n==41 or n==42:\n        return 21\n    if n==43 or n==44:\n        return 22\n    if n==45 or n==46:\n        return 23\n    if n==47 or n==48:\n        return 24\n    if n==49 or n==50:\n        return 25\n    if n==51 or n==52:\n        return 26\n    if n==53 or n==54:\n        return 27\n    if n==55 or n==56:\n        return 28\n    if n==57 or n==58:\n        return 29\n    if n==59 or n==60:\n        return 30\n    if n==61 or n==62:\n        return 31\n    if n==63 or n==64:\n        return 32\n    if n==65 or n==66:\n        return 33\n    if n==67 or n==68:\n        return 34\n    if n==69 or n==70:\n        return 35\n    if n==71 or n==72:\n        return 36\n    if n==73 or n==74:\n        return 37\n    if n==75 or n==76:\n        return 38\n    if n==77 or n==78:\n        return 39\n    if n==79 or n==80:\n        return 40\n    if n==81 or n==82:\n        return 41\n    if n==83 or n==84:\n        return 42\n    if n==85 or n==86:\n        return 43\n    if n==87 or n==88:\n        return 44\n    if n==89 or n==90:\n        return 45\n    if n==91 or n==92:\n        return 46\n    if n==93 or n==94:\n        return 47\n    if n==95 or n==96:\n        return 48\n    if n==97 or n==98:\n        return 49\n    if n==99 or n==100:\n        return 50\n    if n==101 or n==102:\n        return 51\n    if n==103 or n==104:\n        return 52\n    if n==105 or n==106:\n        return 53\n    if n==107 or n==108:\n        return 54\n    if n==109 or n==110:\n        return 55\n    if n==111 or n==112:\n        return 56\n    if n==113 or n==114:\n        return 57\n    if n==115 or n==116:\n        return 58\n    if n==117 or n==118:\n        return 59\n    if n==119 or n==120:\n        return 60\n    if n==121 or n==122:\n        return 61\n    if n==123 or n==124:\n        return 62\n    if n==125 or n==126:\n        return 63\n    if n==127 or n==128:\n        return 64\n    if n==129 or n==130:\n        return 65\n    if n==131 or n==132:\n        return 66\n    if n==133 or n==134:\n        return 67\n    if n==135 or n==136:\n        return 68\n    if n==137 or n==138:\n        return 69\n    if n==139 or n==140:\n        return 70\n    if n==141 or n==142:\n        return 71\n    if n==143 or n==144:\n        return 72\n    if n==145 or n==146:\n        return 73\n    if n==147 or n==148:\n        return 74\n    if n==149 or n==150:\n        return 75\n    if n==151 or n==152:\n        return 76\n    if n==153 or n==154:\n        return 77\n    if n==155 or n==156:\n        return 78\n    if n==157 or n==158:\n        return 79\n    if n==159 or n==160:\n        return 80\n    if n==161 or n==162:\n        return 81\n    if n==163 or n==164:\n        return 82\n    if n==165 or n==166:\n        return 83\n    if n==167 or n==168:\n        return 84\n    if n==169 or n==170:\n        return 85\n    if n==171 or n==172:\n        return 86\n    if n==173 or n==174:\n        return 87\n    if n==175 or n==176:\n        return 88\n    if n==177 or n==178:\n        return 89\n    if n==179 or n==180:\n        return 90\n    if n==181 or n==182:\n        return 91\n    if n==183 or n==184:\n        return 92\n    if n==185 or n==186:\n        return 93\n    if n==187 or n==188:\n        return 94\n    if n==189 or n==190:\n        return 95\n    if n==191 or n==192:\n        return 96\n    if n==193 or n==194:\n        return 97\n    if n==195 or n==196:\n        return 98\n    if n==197 or n==198:\n        return 99\n    if n==199 or n==200:\n        return 100\n    if n==201 or n==202:\n        return 101\n    if n==203 or n==204:\n        return 102\n    if n==205 or n==206:\n        return 103\n    if n==207 or n==208:\n        return 104\n    if n==209 or n==210:\n        return 105\n    if n==211 or n==212:\n        return 106\n    if n==213 or n==214:\n        return 107\n    if n==215 or n==216:\n        return 108\n    if n==217 or n==218:\n        return 109\n    if n==219 or n==220:\n        return 110\n    if n==221 or n==222:\n        return 111\n    if n==223 or n==224:\n        return 112\n    if n==225 or n==226:\n        return 113\n    if n==227 or n==228:\n        return 114\n    if n==229 or n==230:\n        return 115\n    if n==231 or n==232:\n        return 116\n    if n==233 or n==234:\n        return 117\n    if n==235 or n==236:\n        return 118\n    if n==237 or n==238:\n        return 119\n    if n==239 or n==240:\n        return 120\n    if n==241 or n==242:\n        return 121\n    if n==243 or n==244:\n        return 122\n    if n==245 or n==246:\n        return 123\n    if n==247 or n==248:\n        return 124\n    if n==249 or n==250:\n        return 125\n    if n==251 or n==252:\n        return 126\n    if n==253 or n==254:\n        return 127\n    if n==255 or n==256:\n        return 128\n    if n==257 or n==258:\n        return 129\n    if n==259 or n==260:\n        return 130\n    if n==261 or n==262:\n        return 131\n    if n==263 or n==264:\n        return 132\n    if n==265 or n==266:\n        return 133\n    if "
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1]:\n            continue\n        l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = list()\n    l1.append(0)\n    for i in range(1,len(l1)):\n        if l1[i] < l1[i-1]:\n            l2.append([l1[i],l1[i-1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,y) for (x,y) in zip(l1,l1[1:]) if x<y]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        l.append((l1[i],l1[i+1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for index in range(0, len(l1) - 1):\n        if l1[index]!= l1[index + 1]:\n            l2.append([l1[index], l1[index + 1]])\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    lst = []\n    while i < len(l1):\n        if l1[i] > l1[i+1]:\n            lst.append((l1[i],l1[i+1]))\n        i += 1\n    return lst\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    from itertools import combinations\n    l2 = []\n    for x in combinations(l1, 2):\n        l2.append(x)\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # your code here\n    return [[x,y] for x in l1 for y in l1 if x!=y and x!=l1[y]]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    else:\n        last = l1[0]\n        newl = []\n        for i in range(1, len(l1)):\n            if l1[i]!= last:\n                newl.append((last,l1[i]))\n            last = l1[i]\n        return newl\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum in arr:\n        return 0\n    arr.append(sum)\n    arr.sort()\n    i,j=0,0\n    count=0\n    while i<len(arr):\n        if arr[i]+arr[j]==sum:\n            count+=1\n            i+=1\n            j+=1\n        else:\n            i+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_count += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        if arr[i] + arr[i+1] == sum:\n            pairs += 1\n    return pairs\ndef reverse_string(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    str_list = list(string)\n    str_list.reverse()\n    return \"\".join(str_list)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # set a counter variable to keep track of the number of pairs\n    count = 0\n    # for loop to add pair whose sum is equal to sum in the list\n    for i in arr:\n        # if the pair's sum is equal to the sum, increment count\n        if i == sum:\n            count += 1\n    # return count\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in arr:\n        for j in arr:\n            if sum - i + j == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    total = 0\n    for i in range(0, len(arr)-1):\n        total += (arr[i] - arr[i+1])\n    if total == sum:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for num in arr:\n        if num+sum == sum:\n            pairs_count +=1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    newlist = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            newlist.append(li1[i])\n    return newlist\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1 - li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = li1 - li2\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1-li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    for x in li1:\n        if x not in li2:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (li1[i] - li2[i])\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i in li2:\n            diff.append(i)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for x in li1:\n        if x not in li2:\n            diff.append(x)\n    return diff\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum+=4**i\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(0, n) : \n        s += i**3\n    return s\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for num in range(n) :\n        if num % 4 == 0 :\n            sum += pow(num, 4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n**3 + n**2 + n**1 + n**0\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(n) : \n        sum += ((2**i)*i)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(0, n) : \n        result += i ** 4\n    return result\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #return the sum of natural numbers greater than n\n    if n == 0 or n == 1:\n        return 0\n    \n    return n * odd_num_sum(n-1)\n    \nprint(odd_num_sum(5))"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(n) : \n        result = result + pow(2, i) \n    return result \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n=n%4\n    if n%2 ==0:\n        s = (n+1) * n\n        return s\n    else :\n        print(\"Please enter a non-negative natural number!\")\nn=int(input(\"Enter a natural number : \"))\nodd_num_sum(n)"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return(4 ** n * (4 ** (n + 1) / 2))\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    stack.append(exp)\n    index = 0\n    is_balanced = True\n    while stack:\n        current = stack.popleft()\n        if current == '(':\n            stack.append(current)\n        elif current == ')':\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if not stack:\n                is_balanced = False\n                break\n            if not stack:\n                is_balanced = False\n                break\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                is_balanced = False\n                break\n        index += 1\n    return is_balanced\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            if stack.pop()!= i:\n                return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = []\n    \n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"(\":\n                return False\n            else:\n                stack.pop()\n        \n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '(':\n        return False\n    elif exp == ')':\n        return True\n    else:\n        return False\ndef is_balanced(exp):\n    '''\n    This function checks if the given expression is balanced. The recursive solution is more elegant.\n    '''\n    if check_expression(exp):\n        if len(exp) == 1:\n            return True\n        else:\n            if exp[0] == '(':\n                return check_expression(exp[1:])\n            else:\n                return False\n    else:\n        return False\n    \n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    count=0\n    for i in exp:\n        if i=='(':\n            count+=1\n        else:\n            count-=1\n        if count<0:\n            return False\n    return count==0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c in '()[]{}<>,:;\\'':\n            stack.append(c)\n        elif c == ')' and len(stack) > 0:\n            stack.pop()\n        elif c == ']' and len(stack) > 0:\n            stack.pop()\n        elif c == '}' and len(stack) > 0:\n            stack.pop()\n        else:\n            return False\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #Your code here\n    if len(exp) == 0:\n        return \"Empty\"\n    for i in exp:\n        if i == \"(\" or i == \"[\" or i == \"{\" or i == \"{\" or i == \")\":\n            return \"Not Balanced\"\n    return \"Balanced\"\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # from stack\n    stack = deque([])\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '()':\n        return True\n    if exp == '{}':\n        return True\n    if exp == '[]':\n        return True\n    if exp == '[].':\n        return True\n    if exp == '([)]':\n        return True\n    if exp == '([)].':\n        return True\n    if exp == '{[]}':\n        return True\n    if exp == '{[]}.':\n        return True\n    if exp == '{[()]}':\n        return True\n    if exp == '{[]}.':\n        return True\n    if exp == '{[()]}.':\n        return True\n    if exp == '{[]}.':\n        return True\n    if exp == '[].':\n        return False\n    if exp == '[]}':\n        return False\n    if exp == '[]}.':\n        return False\n    if exp == '[]}.':\n        return False\n    if exp == '[]}]':\n        return False\n    if exp == '[]}[]':\n        return False\n    if exp == '[][].':\n        return False\n    if exp == '[][]]':\n        return False\n    if exp == '[][][].':\n        return False\n    if exp == '[][][]':\n        return False\n    if exp == '[[]].':\n        return False\n    if exp == '[[]][].':\n        return False\n    if exp == '[[][]]']\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in '({[':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top_element = stack.pop()\n            if top_element!= '(':\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    for i in test_str:\n        if len(i) == K:\n            result.append(i)\n    return ''.join(result)\n    \ndef k_length_search(test_str, K):\n    '''\n    Write a function to search for all the words with k length in the given string.\n    '''\n    result = []\n    for i in test_str:\n        if len(i) == K:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # your code goes here\n    # test_str = 'this is a string'\n    # my_string =''.join(test_str.split())\n    # print(my_string)\n    # print(my_string.count('t'))\n    # print(my_string.replace('t','z'))\n    # print(my_string.upper())\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    k = len(K)\n    for i in range(len(test_str)):\n        if len(test_str[i:]) <= K:\n            test_str = test_str[:i] + test_str[i+1:]\n    return test_str\n    "
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split()\n    n = len(word_list)\n    start = 0\n    while start < n:\n        # cut the word to k length\n        result = word_list[start:start+K]\n        # remove the word from the list\n        word_list[start:start+K] = []\n        start += 1\n    return \" \".join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return re.sub(r'\\W+','', test_str).lower().split(' ')\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    list_word = test_str.split()\n    if len(list_word)!= len(set(list_word)):\n        return None\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    n = len(test_str)\n    removed_words = []\n    for word in test_str:\n        if len(word) == K:\n            removed_words.append(word)\n    \n    return''.join(removed_words"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for i in test_str:\n        if len(i) == K:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)):\n        if len(test_str[i]) < K:\n            test_str = test_str[:i] + test_str[i+1:]\n    return test_str\n    \ntest_str = \"Test string\"\ntest_str = remove_length(test_str, 3)\nprint(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 0:\n        return \"\"\n    else:\n        length_dict = {}\n        for word in test_str.split():\n            if len(word) < K:\n                continue\n            else:\n                length_dict[word] = len(word)\n        res_str = \"\"\n        for key in length_dict:\n            if length_dict[key] < K:\n                continue\n            else:\n                res_str += key + \" \"\n        return res_str\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('{',' ')\n    pattern = pattern.replace('}',' ')\n    pattern = pattern.replace('[','')\n    pattern = pattern.replace(']','')\n    pattern = pattern.replace('<',' ')\n    pattern = pattern.replace('>',' ')\n    pattern = pattern.replace('.',' ')\n    pattern = pattern.replace('!',' ')\n    pattern = pattern.replace(':',' ')\n    pattern = pattern.replace(';',' ')\n    pattern = pattern.replace('!',' ')\n    pattern = pattern.replace('\"',' ')\n    pattern = pattern.replace('?',' ')\n    pattern = pattern.replace(';',' ')\n    pattern = pattern.replace('\"',' ')\n    pattern = pattern.replace(' ',' ')\n    pattern = pattern.replace('--',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = pattern.replace('_',' ')\n    pattern = patter"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_length = len(pattern)\n    length = len(text)\n    #check if pattern is empty string\n    if pattern == '':\n        return None\n    #if pattern is not a string\n    if type(pattern) is str:\n        #if pattern is a substring of text\n        if text.find(pattern)!= -1:\n            return text.find(pattern),text.find(pattern)\n        else:\n            return None\n    #if pattern is a string\n    if type(pattern) is str:\n        #find position of pattern in text\n        pattern_length_in_text = pattern.count(pattern)\n        if pattern_length_in_text > 0:\n            #check if pattern match text\n            if text.find(pattern)!= -1:\n                return text.find(pattern),pattern.find(pattern)\n            else:\n                return None\n        #pattern does not match text\n        else:\n            return None\n    #if pattern is a list of strings\n    if type(pattern) is list:\n        #if pattern is a list of strings\n        if text.find(pattern)!= -1:\n            return text.find(pattern),text.find(pattern)\n        else:\n            return None\n    #if pattern is a string\n    if type(pattern) is str:\n        #find position of pattern in text\n        pattern_length_in_text = pattern.count(pattern)\n        if pattern_length_in_text > 0:\n            #check if pattern match text\n            if text.find(pattern)!= -1:\n                return text.find(pattern),pattern.find(pattern)\n            else:\n                return None\n        #pattern does not match text\n        else:\n            return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # iterate through the string, and look for the substring\n    for i in range(len(text)):\n        # split the string into a list\n        # remove spaces and punctuation\n        substring = text[i:i+len(pattern)]\n        # if the substring exists\n        if (pattern in substring):\n            # if there is a match, return it\n            if (substring.find(pattern)!= -1):\n                return substring\n    # if there are no matches\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = pattern.replace('[^a-z0-9]','_').replace('[^a-zA-Z0-9]','_')\n    regex = re.compile(regex)\n    matches = regex.finditer(text)\n    for match in matches:\n        for i in range(match.start()):\n            if text[i:i+len(pattern)] == pattern:\n                return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace(\"'\", \"\")\n    text = text.lower()\n    pattern = pattern.lower()\n    if pattern in text:\n        index = text.index(pattern)\n        return index\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    def find_substrings(pattern):\n        '''\n        This function is to find the substrings within a string, and return the positions and the substrings.\n        '''\n        sub_string_list=[]\n        i=0\n        j=0\n        while i < len(pattern):\n            if pattern[i] == pattern[j]:\n                sub_string_list.append(i)\n                j += 1\n                i += 1\n            else:\n                i += 1\n                j = 0\n                \n        return sub_string_list,i\n    \n    def find_index_of_substrings(sub_string_list):\n        '''\n        This function is to find the index of the substrings within a string.\n        '''\n        i=0\n        j=0\n        index=[]\n        while i < len(text):\n            if text[i] in sub_string_list:\n                index.append(sub_string_list.index(text[i]))\n            i+=1\n        return index\n    \n    def freq_substring(sub_string_list,text):\n        '''\n        This function is to find the frequency of the substring within the input string.\n        '''\n        sub_string_list_freq={}\n        for i in sub_string_list:\n            if text[i] in sub_string_list_freq:\n                sub_string_list_freq[text[i]]+=1\n            else:\n                sub_string_list_freq[text[i]]=1\n        \n        return sub_string_list_freq\n        \n    if isinstance(pattern,str):\n        if re.match(pattern,text):\n            sub_string_list,j=find_substrings(pattern)\n            pattern_freq=freq_substring(sub_string_list,text)\n            return pattern_freq,sub_string_list,j,find_index_of_substrings(sub_string_list)\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    # Create a regular expression to match the pattern\n    m = regex.search(text)\n    if m:\n        # Extract the match object\n        start, end = m.span()\n        # Check whether the substring matched the pattern\n        if (text[start:end] == pattern):\n            # Extract the match object as a string\n            return text[start:end]\n    else:\n        return None\ndef regex_matcher_valid(text,pattern):\n    '''\n    Check whether the pattern matches the string.\n    '''\n    regex = re.compile(pattern)\n    if regex.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    \n    pattern = pattern.replace(\" \", \"\")\n    \n    text = text.lower()\n    \n    text = text.replace(\" \",\"\")\n    \n    if (pattern == \"\"):\n        return None\n    \n    pattern_splits = pattern.split(\" \")\n    \n    for split in pattern_splits:\n        if (split in text):\n            return split\n    \n    return None\n    \ndef words_to_int_dict(text):\n    \"\"\"\n    text = \"1 2 3 4 5 6 7 8 9 10 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 95 96 97 98 99 100 101 102 103 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 192 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 211 212 212 213 214 213 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 253 255 256 257 258 259 260 261 262 263 264 265 266 267 268 268 269 290 291 292 293 294 295 296 297 298 299 300 301 301 302 303 303 304 305 306 308 308 309 311 311 312 313 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 330 331 332 333 333 334 333 335 336 337 338 339 340 341 341 341 342 343 344 345 346 347 348 349 350 351 351 351 352 353 353 354 355 356 357 358 359 360 361 366 367 366 369 366 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 36"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    n = len(pattern)\n    l = len(text)\n    pattern_dict = {}\n    for i in range(1,n+1):\n        pattern_dict[i] = {}\n        for j in range(0,l-i):\n            subpattern = pattern[j:j+i]\n            if subpattern in text:\n                if subpattern not in pattern_dict[i]:\n                    pattern_dict[i][subpattern] = [j]\n                else:\n                    pattern_dict[i][subpattern].append(j)\n    result = None\n    for i in range(1,n+1):\n        result = None\n        for j in range(0,l-i):\n            if pattern_dict[i][pattern[j:j+i]]!= []:\n                if pattern_dict[i][pattern[j:j+i]][0] <= j:\n                    if result == None:\n                        result = pattern_dict[i][pattern[j:j+i]][0]\n                    elif pattern_dict[i][pattern[j:j+i]][0] >= j:\n                        result = pattern_dict[i][pattern[j:j+i]][0] + 1\n        if result!= None:\n            if result < l:\n                return result, j\n    return result, -1\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.search(pattern, text)\n    \n    if m is None:\n        return None\n    \n    return m.start(), m.end()\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    for num in nums:\n        if num % 2!= 0:\n            odd_index += 1\n    return odd_index == len(nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return any([not i % 2 for i in nums])\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)-1,2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if(nums[i]%2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums)%2 == 0:\n        return False\n    odd_list = []\n    for i in range(len(nums)):\n        if (nums[i]%2!= 0):\n            odd_list.append(nums[i])\n    for i in range(len(odd_list)):\n        if (odd_list[i]%2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in nums:\n        if i % 2!= 0:\n            count += 1\n    return count == 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    \n    for char in test_str:\n        if char in \"aeiou\":\n            vowels_count += 1\n    \n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Creating an empty dictionary\n    dic_vowel_count = {}\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    total_vowels = 0\n    for i in test_str:\n        if i in 'AEIOU':\n            total_vowels += 1\n    return total_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str == None:\n        return 0\n    if test_str == '':\n        return 0\n    count = 0\n    for char in test_str:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    n = 0\n    for i in range(len(test_str)):\n        for j in range(len(test_str)):\n            if (test_str[i] == 'a' and test_str[j] == 'i' or test_str[i] == 'e' and test_str[j] == 'o' or test_str[i] == 'A' and test_str[j] == 'I' or test_str[i] == 'E' and test_str[j] == 'O'):\n                n = n + 1\n    print(f'n = {n}')\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    # loop through each character in string\n    for letter in test_str:\n        # if letter is in list of vowels, increment count\n        if letter in vowels:\n            count += 1\n    # return count\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    \n    for x in test_str:\n        if x in 'aeiouAEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    char_dict = {}\n    for char in test_str:\n        if char.lower() in char_dict:\n            char_dict[char.lower()] += 1\n        else:\n            char_dict[char.lower()] = 1\n    return char_dict\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    \n    for letter in test_str:\n        if letter.lower() in ('a', 'e', 'i', 'o', 'u', 'y'):\n            vowels_count += 1\n    \n    return vowels_count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Sort the list\n    arr.sort()\n    # Number of elements in the list\n    count = len(arr)\n    # Find the sum of the non-repeated elements\n    sum = 0\n    for i in range(0, count-1):\n        if arr[i]!= arr[i+1]:\n            sum += arr[i+1]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[i] not in arr:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # base case\n    if not arr:\n        return 0\n    \n    # if element is not present\n    if arr[0]!= arr[-1]:\n        return arr[0]\n    \n    # else loop through all the elements\n    s = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            continue\n        # if element is present before\n        if arr[i - 1]!= arr[i]:\n            s += arr[i]\n    \n    # if element is present\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    sum=0\n    for i in range(len(arr)):\n        if arr[i]!=arr[i-1]:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_val=0\n    for i in arr:\n        if i not in sum_val:\n            sum_val.append(i)\n    return sum_val\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in sum:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for value in arr:\n        if value not in arr:\n            total += value\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n    \n    #\n    # O(n) time | O(1) space\n    #\ndef find_sum_2(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = 0\n    for num in arr:\n        if num == num:\n            count += 1\n    return coun"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create a dictionary with unique elements\n    unique_elements = dict(dict.fromkeys(list1))\n    \n    # create a list to store all the elements\n    list2 = []\n    \n    # create a list to store the first element\n    first_element = unique_elements.get(unique_elements.popitem())\n    list2.append(first_element)\n    \n    # iterate over the list and update the element in the dictionary.\n    for item in list1:\n        if item not in list2:\n            unique_elements[item] = unique_elements.popitem()[1]\n        list2.append(unique_elements.popitem()[1])\n        \n    return list2\n    \ndef pack_consecutive_duplicates_with_duplicates_at_end(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create a dictionary with unique elements\n    unique_elements = dict(dict.fromkeys(list1))\n    \n    # create a list to store all the elements\n    list2 = []\n    \n    # create a list to store the first element\n    first_element = unique_elements.get(unique_elements.popitem())\n    list2.append(first_element)\n    \n    # iterate over the list and update the element in the dictionary.\n    for i in range(len(list1)):\n        list2.append(unique_elements.popitem()[1])\n        if i == len(list1) - 1:\n            unique_elements[list2[i]] = first_element\n        else:\n            list2[i+1] = unique_elements.popitem()[1]\n    return list2\n    \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for ele in list1:\n        if ele not in res:\n            res.append(ele)\n    res = sorted(res)\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    first_list = []\n    for i in list1:\n        if i not in first_list:\n            first_list.append(i)\n    return first_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) <= 1:\n        return [list1]\n    list2 = []\n    for item in list1:\n        for sublist in pack_consecutive_duplicates(list1[1:]):\n            list2.append(item+sublist)\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    count = 0\n    grouped = groupby(list1, lambda x: x in x)\n    for group in grouped:\n        count += 1\n        group = list(group)\n        group.sort()\n        yield list(group)\n    return count\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    \n    \n    \n    #Initializing lists to store elements of the lists\n    #Initializing lists\n    list1_unpadded = list1\n    list1_padded = []\n    \n    #For loop to iterate over the list\n    for i in list1_unpadded:\n        #Packing the list\n        list1_padded.append(list(i))\n        \n    #For loop to iterate over the list\n    for i in range(len(list1_unpadded)):\n        #Packing the list\n        list1_padded[i] = list(list1_unpadded[i])\n    #print(list1_padded)\n    \n    #Iterating over sublists\n    for i in range(len(list1_padded)):\n        \n        #If the list contains a duplicate\n        if len(list1_padded[i]) > 1:\n            #Extracting the unique elements\n            unique = list1_padded[i].sort()\n            #Create a new list to store the duplicates\n            new_list = []\n            #For loop to iterate over the unique elements\n            for j in unique:\n                new_list.append(j)\n            #Extracting the sublists from the new list\n            sub_list1 = list1_padded[i][1:len(unique)]\n            #print(sub_list1)\n            #Iterating over the sublists\n            for k in range(len(sub_list1)):\n                #Extracting the value\n                sub_list1[k] = sub_list1[k][0]\n            #print(sub_list1)\n            #Concatenating the sublists\n            list1_padded[i] = sub_list1\n        #If the list contains no duplicates\n        else:\n            #If the list contains only one element, the list is the only element\n            if len(list1_padded[i]) == 1:\n                list1_padded[i] = [list1_unpadded[i]]\n            #If the list contains only two elements, the list is the only element\n            elif len(list1_padded[i]) == 2:\n                list1_padded[i] = [list1_unpadded[i]]\n        #If the list is empty, the sublists are not equal\n        if len(list1_padded[i]) == 0:\n            list1_padded[i] = []\n    #print(list1_padded)\n    \n    #Returning the new list\n    return list1_padded\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # Initialize result\n    result = []\n    # Initialize counter for first loop\n    counter = 0\n    # Initialize counter for second loop\n    i = 0\n    # Initialize length of list\n    length = len(list1)\n    # Iterate through all list elements\n    while i < length:\n        # If not the end of the list\n        if list1[i] == list1[i + 1]:\n            # Set the current length to the next value\n            current_length = i + 1\n            # Set the first element of the list to the current value\n            list1[current_length] = list1[i]\n            # Iterate through the rest of the list to remove the previous element\n            while i < length:\n                if list1[i] == list1[i + 1]:\n                    # Add the current element to the result list\n                    result.append(list1[i])\n                # Increment the counter by 1\n                i += 1\n            # Set the counter to 0\n            counter = 0\n            # Return the result list\n            return result\n        # Increment counter by 1\n        counter += 1\n        # Set the current element of the list to the next value\n        list1[i] = list1[i + 1]\n        # Increment the counter by 1\n        i += 1\n        # Set the current element of the list to the first value\n        list1[current_length] = list1[i]\n        # Increment the counter by 1\n        current_length += 1\n        # Set the counter to 0\n        counter = 0\n    # Return result list\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_items = list1\n    list1_grouped = groupby(list1)\n    list1_grouped_items = list(list1_grouped.values())\n    list1_grouped_items = [x for x in list1_grouped_items if x!= []]\n    \n    # get all sublists by index\n    list_index_groups = groupby(list1_grouped_items)\n    list_index_groups_items = list(list_index_groups.values())\n    list_index_groups_items = [x for x in list_index_groups_items if x!= []]\n    \n    # create a sublist for each index group\n    list_index_groups_sublists = []\n    for i in range(len(list_index_groups_items)):\n        list_index_groups_sublists.append(list_index_groups_items[i][1])\n    \n    # create a sublist for each sublist in list_index_groups\n    list_index_groups_sublists = list(map(list, list_index_groups_sublists))\n    \n    # create a sublist for each index group by all sublists\n    list_index_groups_sublists = []\n    for i in range(len(list_index_groups_items)):\n        list_index_groups_sublists.append(list_index_groups_items[i][0])\n    \n    # create a sublist for each sublist in list_index_groups\n    list_index_groups_sublists = list(map(list, list_index_groups_sublists))\n    \n    # create a sublist for each index group by all sublists\n    list_index_groups_sublists = list(map(list, list_index_groups_sublists))\n    \n    return list_index_groups_sublists\n    \ndef unpack_consecutive_duplicates(list1):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into separate sublists.\n    '''\n    list1_items = list1\n    list1_grouped = groupby(list1)\n    list1_grouped_items = list(list1_grouped.values())\n    list1_grouped_items = [x for x in list1_grouped_items if x!= []]\n    \n    # get all sublists by index\n    list_index_groups = groupby(list1_grouped_items)\n    list_index_groups_items = list(list_index_groups.values())\n    list_index_groups_items = [x for x in list_index_groups_items if x!= []]\n    \n    # create a sublist for each index group\n    list_index_groups_sublists = []\n    for i in range(len(list_index_groups_items)):\n        list_index_groups_sublists.append(list_index_groups_items[i][1])\n    \n    # create a sublist for each sublist in list_index_groups\n    list_index_groups_sublists = list(map(list, list_index_groups_sublists))\n    \n    # create a sublist for each index group by all sublists\n    list_index_groups_sublists = list(map(list, list_index_groups_sublists))\n    \n    # create a sublist for each index group by all sublists\n    list_index_groups_sublists = list(map(list, list_index_groups_sublists))\n    \n    return list_index_groups_sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    last = len(list1) - 1\n    duplicate = []\n    num = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list1[i + 1]:\n            num += 1\n        if num >= 2:\n            duplicate.append(list1[i])\n            num = 0\n    return duplicate\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l = len(list1)\n    \n    if l <= 1:\n        return []\n    \n    if l <= 3:\n        return [[list1[0]]]\n    \n    l2 = l//2\n    l3 = l//3\n    \n    out = []\n    \n    for j in range(l2):\n        for i in range(l3):\n            if j == l2:\n                out.append([list1[i]] + [list1[j]] + [list1[i]])\n            else:\n                if i == l3:\n                    out.append([list1[j]] + [list1[i]] + [list1[j]])\n                else:\n                    if j == l3-1:\n                        out.append([list1[i]] + [list1[j]] + [list1[i]])\n                    else:\n                        out.append([list1[i]] + [list1[j]])\n    return out\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # TODO\n    dic={}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i]==list1[j]:\n                dic[list1[i]]=dic.get(list1[i],0)+1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    tuple_count = {}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublistdict = {}\n    for i in list1:\n        if list(i) not in sublistdict:\n            sublistdict[list(i)] = 0\n        sublistdict[list(i)] += 1\n    return sublistdict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1={}\n    dict2={}\n    for i in list1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    for i in dict1:\n        dict2[i]=dict1[i]\n    return dict2\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for lst in list1:\n        for item in lst:\n            d[item] = d.get(item, 0) + 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    temp_dict = {}\n    for i in range(len(list1)):\n        temp_list = list1[i]\n        if temp_list not in temp_dict.keys():\n            temp_dict[temp_list] = 1\n        else:\n            temp_dict[temp_list] += 1\n    return temp_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    result = {}\n    # iterate through the list\n    for element in list1:\n        # if the dictionary has a key, add it to the result dictionary\n        if element in result:\n            # increase the counter\n            result[element] += 1\n        # else, add it to the dictionary\n        else:\n            # add the value of the tuple\n            result[element] = 1\n    # return the dictionary\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item[0] in count:\n            count[item[0]] = count[item[0]] + 1\n        else:\n            count[item[0]] = 1\n    return count\n    \n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    result = {}\n    \n    for i in range(0,len(list1)):\n        for j in range(i+1, len(list1)):\n            tup = (list1[i], list1[j])\n            if tup not in result:\n                result[tup] = 1\n            else:\n                result[tup] += 1\n                \n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return (list(combinations(test_list, 2)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def is_sum_sum_pair(s, e):\n        return s[0] + s[1] + e[0] + e[1] == s[2] + e[2]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(map(list, combinations(test_list, 2)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = list(combinations(test_list, 2)) # Computes all possible combinations of sums.\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combos = list(combinations(test_list,2))\n    return combos\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def get_combinations(index, combo, result):\n        if index == len(test_list):\n            return\n        else:\n            get_combinations(index+1, combo+test_list[index], result+[combo[index]])\n            get_combinations(index+1, combo, result)\n    if test_list:\n        result = []\n        get_combinations(0, [], result)\n        return result\n    else:\n        return []\n        \n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in test_list:\n        combinations_list += combinations(i, len(i)-1)\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # get the list of all the tuples\n    all_tuples = list(combinations(test_list,2))\n    # get the list of unique sums\n    sums = []\n    for tuple in all_tuples:\n        if tuple not in sums:\n            sums.append(tuple)\n    return sums\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    temp=[]\n    if len(test_list)==1:\n        return test_list\n    else:\n        for i in range(len(test_list)):\n            for j in range(i+1, len(test_list)):\n                temp.append(test_list[i] + test_list[j])\n        return temp\n    return find_combinations(test_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(map(''.join,combinations(test_list,2)))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2,n,2) :\n        if n % i == 0 : \n            print(n, \"is not divisible by \", i)\n            return False\n    return True\ndef is_prime(n) :\n    '''\n    Check if the input number is prime\n    '''\n    if n < 2 : \n        return False\n    elif n == 2 : \n        return True\n    elif n % 2 == 0 : \n        return False\n    else : \n        for i in range(3, int(math.sqrt(n)) + 1, 2) : \n            if n % i == 0 : \n                return False\n        return True\ndef is_prime_fast(n) :\n    '''\n    Check if the input number is prime\n    '''\n    if n < 2 : \n        return False\n    elif n == 2 : \n        return True\n    elif n % 2 == 0 : \n        return False\n    else : \n        for i in range(3, int(math.sqrt(n)) + 1, 2) : \n            if n % i == 0 : \n                return False\n        return True\n    \ndef is_prime_recursive(n) :\n    '''\n    Check if the input number is prime\n    '''\n    if n < 2 : \n        return False\n    elif n == 2 : \n        return True\n    elif n % 2 == 0 : \n        return False\n    else : \n        for i in range(3, int(math.sqrt(n)) + 1, 2) : \n            if n % i == 0 : \n                return False\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1) :\n        if(n % i == 0) :\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0 :\n                return \"even\"\n            else :\n                return \"odd\"\n        else:\n            return \"even\"\n    return \"odd\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0 : \n        return \"negative input\"\n    if n == 0 : \n        return \"0\"\n    if n == 1 : \n        return \"1\"\n    if n == 2 : \n        return \"2\"\n    if n % 2 == 0 : \n        return \"even\"\n    else : \n        return \"odd\"\ndef check(a, b) : \n    '''\n    Write a python function to check if the given number is a positive integer.\n    '''\n    if a < 0 : \n        return \"negative input\"\n    if a == 0 : \n        return \"0\"\n    if a % 2 == 0 : \n        return \"even\"\n    else : \n        return \"odd\"\ndef main() : \n    '''\n    Write a python function to find the greatest common divisor of three natural numbers.\n    '''\n    x = count_divisors(int(input(\"Enter the first number : \")))\n    y = count_divisors(int(input(\"Enter the second number : \")))\n    z = count_divisors(int(input(\"Enter the third number : \")))\n    print(\"the greatest common divisor is : \", (math.gcd(int(x), int(y), int(z))))\nmain("
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check if a number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n == 0 or n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 or n % 3 == 0 : \n        return False\n    for i in range(5,int(math.sqrt(n)) + 1, 2) : \n        if n % i == 0 : \n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return (n % 2 == 0)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if (n % i == 0) :\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0 :\n            count += 1\n    if count == 0 :\n        print(f'{n} is a divisor.')\n    elif count == 1 :\n        print(f'{n} is not a divisor.')\n    else :\n        print(f'{n} is a divisor.')\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 : \n        return False\n    for i in range(2, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #Base case of logic \n    if n == 1 : \n        return 1\n    #Iterate over all the possible divisors \n    possible_divisors = [] \n    for i in range(2, int(math.sqrt(n)+1)) : \n        if n % i == 0 : \n            possible_divisors.append(i) \n            if (i**2) % n == 0 : \n                possible_divisors.append(n//i) \n    #If no divisors are present \n    if not possible_divisors : \n        return 0\n    #Return the total number of possible divisors \n    return len(possible_divisors)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    left_index = 0\n    right_index = 0\n    sum = 0\n    while(left_index < len(arr)):\n        sum += arr[left_index]\n        if(left_index % 2 == 0):\n            sum -= arr[right_index]\n            right_index += 1\n        left_index += 1\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for x in arr:\n        if len(x)%2:\n            odd_length_sum += x\n        else:\n            break\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    if length == 0:\n        return 0\n    elif length % 2!= 0:\n        return arr[0] + odd_length_sum(arr[1:length // 2])\n    else:\n        return arr[0] + odd_length_sum(arr[1:length // 2]) + arr[length // 2]\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    odd_length = 1\n    sum = 0\n    \n    for i in range(0, len(arr)):\n        if (i % 2) == 0:\n            sum += arr[i]\n        else:\n            odd_length += 1\n    \n    return sum + odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    odd_length_sum = 0\n    if len(arr) % 2 == 0:\n        odd_length_sum = sum(arr[0:len(arr)//2])\n        \n    else:\n        odd_length_sum = sum(arr[0:len(arr)//2 + 1])\n    \n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            ans = arr[j] + ans\n    return ans\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    total=0\n    for x in arr:\n        if x%2==1:\n            total+=x\n    return total\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    #initialise the sum of odd length subarrays\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        # if arr[i] % 2 == 0\n        if i % 2 == 1:\n            # if arr[i] % 2 == 1\n            if i % 2!= 0:\n                # sum of odd length subarrays\n                odd_length_sum += arr[i]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE GOES HERE\n    r_int = int(r)\n    g_int = int(g)\n    b_int = int(b)\n    # get the brightness of red value\n    red = r_int - 128\n    # get the brightness of green value\n    green = g_int - 128\n    # get the brightness of blue value\n    blue = b_int - 128\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0.299*r + 0.587*g + 0.114*b\n    s = 0.212*r + 0.523*g + 0.116*b\n    v = 0.655*r + 0.321*g + 0.411*b\n    return h,s,v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #convert to rgb\n    r = int(r)\n    g = int(g)\n    b = int(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #Convert color to hsv\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    max_v = max(r, g, b)\n    min_v = min(r, g, b)\n    max_c = max(max_v, max_v, max_v)\n    min_c = min(min_v, min_v, min_v)\n    max_h = max_c / max_v\n    min_h = min_c / max_v\n    r = max_c - min_c\n    g = max_c - min_c\n    b = max_c - min_c\n    return min_h, max_h, r, g, b\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import cv2\n    def convert(h, m, s):\n        return h * 60 + m, s * 100 + v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r,g,b = r/255.0, g/255.0, b/255.0\n    x = 1.0 - r\n    y = 1.0 - g\n    z = 1.0 - b\n    hue = x*60 + y*100\n    saturation = x*100 + z*100\n    value = x*100\n    \n    if hue < 0:\n        hue += 360\n    if hue > 180:\n        hue -= 360\n    \n    if saturation < 0:\n        saturation += 100\n    if saturation > 100:\n        saturation -= 100\n    \n    if value < 0:\n        value += 100\n    if value > 255:\n        value = 255\n    \n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == g == b == 0:\n        return 0, 0, 0\n    elif r > g:\n        r, g, b = g, r, b\n    elif g > b:\n        r, g, b = b, g, r\n    elif b > r:\n        r, g, b = r, b, g\n    \n    hue = 360.0 * (r - g) / (r + g + b)\n    \n    saturation = r / (r + g + b)\n    value = b / (r + g + b)\n    \n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0.0 and g == 0.0 and b == 0.0:\n        return (0.0, 0.0, 0.0)\n    \n    elif r == 0.0 or g == 0.0 or b == 0.0:\n        return (0.0, 0.0, 0.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    from colorsys import rgb_to_hsv\n    # rgb_to_hsv returns tuple of hsv values\n    # hsv_to_rgb returns a tuple of rgb values\n    # hsv_to_rgb_hue_sat_color returns tuple of rgb values\n    # hsv_to_rgb_hue_saturation_value returns tuple of rgb values\n    \n    # hsv_to_rgb_hue_sat_color\n    # (0, 100, 100)\n    # (150, 255, 255)\n    # (100, 150, 255)\n    # (0, 100, 100)\n    \n    # hsv_to_rgb_hue_saturation_color\n    # (0, 100, 100)\n    # (50, 255, 255)\n    # (100, 255, 255)\n    # (0, 50, 100)\n    \n    # hsv_to_rgb_hue_saturation_color_1\n    # (50, 255, 255)\n    # (100, 255, 255)\n    # (50, 255, 255)\n    # (100, 255, 255)\n    \n    # hsv_to_rgb_hue_saturation_color_2\n    # (255, 255, 255)\n    # (255, 255, 255)\n    # (255, 255, 255)\n    # (255, 255, 255)\n    \n    r = int(r)\n    g = int(g)\n    b = int(b)\n    r, g, b = rgb_to_hsv(r, g, b)\n    \n    h, s, v = rgb_to_hsv(r, g, b)\n    \n    c = int((h + (s - v)) / 2)\n    \n    if c > 100:\n        c = 100\n    elif c < 0:\n        c = 0\n    \n    h_s = int(h)\n    h_s = max(h_s, 0)\n    h_s = min(h_s, 100)\n    \n    h_v = int(h)\n    h_v = max(h_v, 0)\n    h_v = min(h_v, 100)\n    \n    h_s = int(h_s)\n    h_s = max(h_s, 0)\n    h_s = min(h_s, 100)\n    \n    h_v = int(h_v)\n    h_v = max(h_v, 0)\n    h_v = min(h_v, 100)\n    \n    r = int(r)\n    g = int(g)\n    b = int(b)\n    \n    r, g, b = rgb_to_hsv(r, g, b)\n    \n    h = int(h)\n    s = int(s)\n    \n    if h == 100:\n        h = 0\n    elif h == 0:\n        h = 100\n    elif h <= 10:\n        h = 10\n    elif h >= 100:\n        h = 100\n    \n    h = int(h)\n    \n    if s == 100:\n        s = 0\n    elif s == 0:\n        s = 100\n    elif s <= 10:\n        s = 10\n    elif s >= 100:\n        s = 100\n    \n    s = int(s)\n    \n    if v == 100:\n        v = 0\n    elif v == 0:\n        v = 100\n    elif v <= 10:\n        v = 10\n    elif v >= 100:\n        v = 100\n    \n    v = int(v)\n    \n    if c == 100:\n        c = 0\n    elif c == 0:\n        c = 100\n    elif c <= 10:\n        c = 10\n    elif c >= 100:\n        c = 100\n    \n    c = int(c)\n    \n    # converts rgb to hsv values\n    # uses 4 tuples to convert to RGB values\n    # returns tuple of hsv values\n    \n    # hsv_to_rgb\n    # (r, g, b)\n    # (255, 255, 255)\n    # (255, 255, 255)\n    # (255, 255, 255)\n    \n    # hsv_to_rgb_hue_sat_color\n    # (50, 255, 255)\n    # (100, 255, 255)\n    # (50, 255, 255)\n    # (100, 255, 255)\n    \n    # hsv_to_rgb_hue_saturation_color\n    # (50, 255, 255)\n    # (100, 255, 255)\n    # (50, 255, 255)\n    # (100, 255, 255)\n    \n    # hsv_to_rgb_hue_saturation_color_1\n    # (255, 255, 255)\n    # (255, 255, 255)\n    # (255, 255, 255)\n    # (255, 255, 255)\n    \n    # hsv_to_rgb_hue_saturation_color_2\n    # (255, 255, 255)\n    # (255, 255, 255)\n    # (255, 255, 255)\n    # (255, 255, 255)\n    \n    # hsv_to_rgb_hue_saturation_color_1\n    # (0, 100, 100)\n    # (50, 255, 255)\n    # (100, 255, 255)\n    # (0, 50, 100)\n    \n    # hsv_to_rgb_hue_saturation_color_2\n    # (50, 255, 255)\n    # (100, 255, 255)\n    # (50, 255, 255)\n    # (100, 255, 255)\n    \n    # hsv_to_rgb_hue_saturation_color_1\n    # (0, 100, 100)\n    # (0, 100, 100)\n    # (0, 100, 100)\n    \n    # hsv_to_rgb_hue_saturation_color_2\n    # (0, 100, 100)\n    # (0, 100, 100)\n    # (0, 100, 100)\n    \n    r = h * (h_s / 100)\n    g = h * (h_v / 100)\n    b = h * (h_s / 100)\n    \n    rgb = (r, g, b)\n    \n    return rgb\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb = (r, g, b)\n    hsv = (0.0, 0.0, 0.0)\n    \n    rgb_sum = sum(rgb)\n    rgb_sum = (rgb_sum/255.0)\n    \n    rgb_sum = (rgb_sum/3.0)\n    \n    if rgb_sum > 0.0:\n        hsv = colorsys.rgb_to_hsv(rgb[0], rgb[1], rgb[2])\n        \n    hsv[0] = (hsv[0] + r) % 1.0\n    \n    hsv[1] = (hsv[1] + g) % 1.0\n    \n    hsv[2] = (hsv[2] + b) % 1.0\n    \n    hsv = colorsys.hsv_to_rgb(hsv[0], hsv[1], hsv[2])\n    \n    return (int(hsv[0]), int(hsv[1]), int(hsv[2]))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print(\"\\n Multiplying Even Odd Numbers\\n\")\n    product = 1\n    for item in list1:\n        product *= item\n    print(\"product:\", product)\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for item in list1:\n        if (item % 2 == 0):\n            result *= item\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            new_list.append(list1[i] * 2)\n        else:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Find the sum of the even number\n    even_sum = sum(list1[:len(list1)//2])\n    # Find the sum of the odd number\n    odd_sum = sum(list1[len(list1)//2:])\n    # Take the product of the even number and the odd number\n    product = even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd=list1[len(list1)-1]\n    even=list1[0]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd_product = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_odd_product += i\n        else:\n            pass\n    return even_odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    if len(list1) % 2 == 0:\n        for i in range(0, len(list1), 2):\n            product *= list1[i]\n            print(product)\n    else:\n        for i in range(0, len(list1), 2):\n            product *= list1[i]\n            print(product)\n    \ndef sum_of_elements(list1):\n    '''\n    Write a function to find the sum of elements in a given list.\n    '''\n    sum = 0\n    for i in range(0, len(list1)):\n        sum += list1[i]\n    print(sum)\n    \ndef reverse_every_num(list1):\n    '''\n    Write a function to reverse a given list.\n    '''\n    rev_list = []\n    for i in range(0, len(list1), 2):\n        rev_list.append(list1[i])\n        rev_list.append(list1[i+1])\n        print(rev_list)\n    print(rev_list)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    if len(list1)%2==0:\n        for i in range(len(list1)//2):\n            if i<len(list1)/2:\n                even+=list1[i]\n            else:\n                odd+=list1[i]\n    else:\n        for i in range(len(list1)//2):\n            if i<len(list1)/2:\n                even+=list1[i]\n            else:\n                odd+=list1[i]\n    return even*odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            prod = prod * list1[i]\n        else:\n            prod = prod * list1[i]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) <= 0:\n        print(\"Please input a list.\")\n        return\n    else:\n        summ = 0\n        for i in range(len(list1)):\n            if i % 2 == 0:\n                summ += list1[i]\n            else:\n                summ -= list1[i]\n        return summ\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.split(\",\")\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    for i in range(len(test_str)):\n        test_str[i] = int(test_str[i])\n    return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_int = ()\n    for i in test_str:\n        test_int += (int(i),)\n    return test_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result_tuple = []\n    for i in range(0,len(test_str)):\n        result_tuple.append(int(test_str[i]))\n    return result_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) == tuple:\n        return tuple([int(i) for i in test_str])\n    else:\n        return 0\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(\",\")\n    result = tuple([int(x) for x in tuple_str])\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int,test_str.replace(\",\", \" \").replace(\"()\", \"\").split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_tuple = []\n    for i in test_str:\n        temp_tuple.append(int(i))\n    return tuple(temp_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) is not tuple:\n        raise TypeError(\"'{}' is not a tuple\".format(test_str))\n    \n    return tuple([int(i) for i in test_str])\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find index of x in sorted array\n    j = bisect.bisect_right(a, x)\n    # if j is greater than or equal to 0 and less than index of x in sorted array, then the x is the right insertion point\n    if j >= 0 and j <= len(a) - 1 and a[j + 1] < x:\n        return j + 1\n    else:\n        return j\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[0] > x:\n        return 0\n    # print(a)\n    # print(x)\n    i = bisect.bisect_right(a, x)\n    # print(i)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect_left(a,x)\n    if l == len(a):\n        return len(a)\n    elif l == 0:\n        return l+1\n    elif a[l-1] < x:\n        return l\n    else:\n        return l+1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    mid = 0\n    while mid <= high:\n        mid = (mid + a[mid] // x) % len(a)\n        if a[mid] < x:\n            low = mid + 1\n        elif a[mid] >= x:\n            high = mid - 1\n    return high + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return -1\n    \n    i = bisect.bisect_right(a, x)\n    \n    return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_right(a, x)\n    if i >= n:\n        return n\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l if l < len(a) else len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0:\n        return a[i]\n    return a[i - 1]\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    found = re.search('a\\s\\w+?\\s\\w+?\\s\\w+?\\s', text)\n    if found:\n        return found.group(0)\n    else:\n        return 'None'\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # split the string into a list\n    text_list = text.split('a')\n    # remove the starting and ending whitespaces\n    text_list = [i.strip() for i in text_list]\n    # remove whitespaces\n    for i in range(len(text_list)):\n        if not text_list[i]:\n            text_list[i] = ''\n    # find the first 'b'\n    b = 0\n    for i in range(len(text_list)):\n        if text_list[i] == 'b':\n            b = i+1\n            break\n    # get rid of the ending whitespaces\n    for i in range(len(text_list)):\n        if text_list[i] =='':\n            del text_list[i]\n    # remove the start of the string\n    text_list[0] = ''\n    # remove the final whitespace\n    text_list[-1] = ''\n    # combine all the strings into a string\n    result = ''.join(text_list)\n    # for any 'b' in the string\n    if b == 0:\n        for i in range(len(text_list)):\n            if text_list[i] == 'b':\n                b = i+1\n                break\n    # print the final result\n    print(result)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by forty 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by fifty 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by sixty 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has an a followed by seventy 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_sixtyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by sixty four 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_fiftytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by fifty-two 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_fortytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by forty-two 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by hundred 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_thousand(text):\n    '''\n    Write a function that matches a string that has an a followed by thousand 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_hundred000(text):\n    '''\n    Write a function that matches a string that has an a followed by hundred-and-hundred 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_two_thousand(text):\n    '''\n    Write a function that matches a string that has an a followed by two-thousand 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_five_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by five hundred 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_one_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by one hundred 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_one_hundred000(text):\n    '''\n    Write a function that matches a string that has an a followed by one-and-hundred 'b'.\n    '''\n    return(re.search(r'a\\s(?=b)',text))\n    \ndef text_match_on"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # replace \\w with space\n    text = re.sub('[^a-zA-Z0-9 ]+','', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #TODO - check if three a followed by three b\n    pattern = r'[b]{3}'\n    output = re.findall(pattern, text)\n    return output\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # String to be matched\n    text_str = text\n    # Dictionaries to store matched strings\n    matched_strings = {}\n    # Loop through string\n    for index, char in enumerate(text):\n        # Check if current character matches a substring\n        if char == \"a\":\n            if index + 1 < len(text) and text[index + 1] == \"b\":\n                matched_strings[text[index]] = text[index + 2:]\n                break\n        else:\n            continue\n    return matched_strings\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile(r'a(?=b)')\n    #print(text)\n    return regex.findall(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # TODO: Write your code here\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # your code here\n    return 'b' not in re.findall(r'\\b[a-zA-Z]{2,}b\\b', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m = re.search(r'(?:a(?:b)?)(\\d+)',text)\n    if m:\n        return True\n    return False\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = []\n    for i in range(len(test_list)):\n        tuple.append(test_list[i])\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # TODO: complete the function\n    \n    tuple = tuple(test_str)\n    return tuple\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_str.split(',')\n    for x in range(len(test_list)):\n        if x == len(test_list) - 1:\n            test_list.append('')\n        else:\n            test_list[x] = test_list[x] + ','\n    tuple_string = '('\n    for element in test_list:\n        tuple_string += element + ','\n    tuple_string += ')'\n    return tuple_string\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_str) > 0:\n        return tuple(test_str)\n    else:\n        return (None, )\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_list)\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str == test_list[0]:\n        new_tuple = (test_list[0], test_list[1])\n        return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str == \"\":\n        return ()\n    if test_str == \".\" or test_str == \",\":\n        return ()\n    if test_str[-1] not in \".,,\":\n        return ()\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = []\n    test_tuple.append(test_list[0])\n    for index, value in enumerate(test_list[1:]):\n        test_tuple.append(value)\n    return tuple(test_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = ()\n    for i in range(0, len(test_str)):\n        tuple = tuple + (test_str[i],)\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_str.split(\",\")\n    for i in new_tuple:\n        if i.strip() == \"\":\n            continue\n        else:\n            tuple_test = tuple(eval(i))\n            new_tuple.append(tuple_test)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            evens = evens + 1\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # your code here\n    if len(nums)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2 == 0:\n            print(nums[i])\n            \n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_nums = []\n    for index in range(0, len(nums), 2):\n        if index % 2 == 0:\n            even_nums.append(nums[index])\n    return even_nums\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            if i % 2 == 0:\n                print(\"Even index contains even numbers\")\n            else:\n                print(\"Even index does not contains even numbers\")\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n    \nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # get index of even numbers\n    even_indices = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_indices.append(i)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in nums:\n        if i%2 == 0:\n            count = count +1\n    return count==len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if nums[i] % 2 == 0:\n                return nums[i] % 2\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # write your code here\n    return tuple(filter(None, test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # TODO: remove this function\n    if type(test_tup) is not tuple:\n        raise TypeError(\"tuple expected, {} found\".format(type(test_tup)))\n    else:\n        pass\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #TODO write the function\n    pass\n    \ndef count_by_occurrence(test_tup, letter):\n    '''\n    Write a function to count how many times the letter occurs in\n    the given tuple.\n    '''\n    #TODO write the function\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(\"\\nRemove Nested Tuple\")\n    print(test_tup)\n    #to remove the first item of each tuple\n    del test_tup[0]\n    #to remove the last item of each tuple\n    del test_tup[-1]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup_without_nested = []\n    for a,b in test_tup:\n        if type(a) is tuple:\n            tup_without_nested.append((a,b))\n        else:\n            tup_without_nested.append(a)\n    return tup_without_nested\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(\"**************************\")\n    print(\"- The original tuple:\")\n    print(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = test_tup[0]\n    ind = 0\n    for i in range(1, len(tup)):\n        if type(tup[i]) == tuple:\n            tup = tup[0:i] + tup[i+1:]\n            ind = i\n    test_tup = tup[0:ind] + tup[ind+1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup) == 1:\n        test_tup = test_tup[0]\n    elif len(test_tup) == 0:\n        test_tup = ()\n    return test_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Create a dictionary to hold the number of lists\n    d = {}\n    # Loop over the input_list\n    for i in range(len(input_list)):\n        # Add each list to the dictionary\n        d[input_list[i]] = input_list[i]\n    # Return the dictionary\n    return d\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for ele in input_list:\n        counter = counter + 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # return the number of lists\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter=0\n    for i in range(0,len(input_list)):\n        if input_list[i][2]==\"L\":\n            counter=counter+1\n        else:\n            pass\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # write your code here\n    count = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list)):\n            if input_list[i][j] == '_':\n                count+=1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    n=len(input_list)\n    if n==0:\n        print(\"Invalid list\")\n    else:\n        l=[]\n        for i in range(0,n):\n            for j in range(0,len(input_list[i])):\n                if input_list[i][j]=='*':\n                    l.append(input_list[i][j])\n        print(\"There are\",len(l),\"lists in this list.\")\n        \n        \ndef list_to_str(input_list): \n    '''\n    Write a python function to convert a given list to a string.\n    '''\n    output=''\n    for i in range(0,len(input_list)):\n        output=output+str(input_list[i])+' '\n    return output\n        \ndef list_check(input_list): \n    '''\n    Write a python function to check if a given list is balanced or not.\n    '''\n    n=len(input_list)\n    if n==0:\n        print(\"Invalid list\")\n    else:\n        n=n-1\n        l=[]\n        for i in range(0,n):\n            for j in range(0,len(input_list[i])):\n                if input_list[i][j]=='*':\n                    l.append(input_list[i][j])\n                    \n        if l==l[::-1]:\n            return \"Balanced\"\n        else:\n            return \"Not balanced\"\n        \ndef perm(input_list, i): \n    '''\n    Write a python function to find the permutations of a given list.\n    '''\n    output=[]\n    if len(input_list)==0:\n        return output\n    if i==len(input_list):\n        return output\n    else:\n        for i in range(0,len(input_list)):\n            output.append(input_list[i])\n            for j in range(0,i+1):\n                if j==0:\n                    output[i]=output[i]+'*'\n                else:\n                    output[i]=output[i]+input_list[i][j]+'*'\n            if output[i]==input_list[i]:\n                output.pop()\n                input_list.pop(i)\n                perm(input_list, i)\n    return output\n                \ndef range_check(input_list):\n    '''\n    Write a python function to check if the given list is within the range of the given number.\n    '''\n    l=len(input_list)\n    if l==0:\n        print(\"Invalid list\")\n    else:\n        if input_list[0][0]==input_list[1][0] and input_list[0][1]==input_list[1][1]:\n            print(\"The given list is in the given range.\")\n        else:\n            print(\"The given list is not in the given range.\")\n    \ndef list_length(input_list):\n    '''\n    Write a python function to calculate the length of a given list.\n    '''\n    n=len(input_list)\n    if n==0:\n        print(\"Invalid list\")\n    else:\n        print(\"The given list has\",n,\"elements.\")\n        \ndef list_index(input_list, value):\n    '''\n    Write a python function to find the position of a given value in a given list.\n    '''\n    l=len(input_list)\n    if l==0:\n        print(\"Invalid list\")\n    elif value==0:\n        print(\"The given value cannot be found in the given list.\")\n    elif value<input_list[0][0] or value>input_list[l-1][0]:\n        print(\"The given value is not in the given list.\")\n    else:\n        for i in range(0,l):\n            if input_list[i][value]==value:\n                print(i)\n                break\n        else:\n            print(\"The given value is not in the given list.\")\n    \ndef list_index_pos(input_list, value):\n    '''\n    Write a python function to find the position of a given value in a given list.\n    '''\n    l=len(input_list)\n    if l==0:\n        print(\"Invalid list\")\n    elif value==0:\n        print(\"The given value cannot be found in the given list.\")\n    elif value<input_list[0][0] or value>input_list[l-1][0]:\n        print(\"The given value is not in the given list.\")\n    else:\n        for i in range(0,l):\n            if input_list[i][value]==value:\n                print(i)\n                break\n        else:\n            print(\"The given value is not in the given list.\")\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if type(i) == list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last = 0\n    start = 0\n    \n    #if array is sorted \n    if(arr[start] == x):\n        return start\n    \n    #check if x is present in the array \n    for i in range(start+1,len(arr)):\n        if arr[i] == x:\n            last = i\n            break\n    \n    #if not present, return the last element\n    return last \n    "
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==1:\n        return 0\n    if x>=arr[len(arr)-1]:\n        return len(arr)\n    if x<arr[0]:\n        return 0\n    mid=len(arr)//2\n    if arr[mid]==x:\n        return mid\n    if arr[mid]>x:\n        return last(arr[:mid],x)\n    else:\n        return last(arr[mid+1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return (arr.length-1 if arr[x-1]>arr[x] else arr.length-1-arr[x])\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Base case\n    if len(arr) == 0:\n        return -1\n    \n    # If the element is smaller than the present one,\n    # then it is not present in the array.\n    elif arr[0] < arr[1]:\n        return 0\n    \n    # Else, it is present in the array, but it is\n    # greater than or equal to the present one.\n    else:\n        return 1 + last(arr[1:],x)\n    \ndef next(arr,x):\n    '''\n    Write a python function to find the next position of an element in a sorted array.\n    '''\n    # Base case\n    if len(arr) == 0:\n        return -1\n    \n    # If the element is greater than the present one,\n    # then it is not present in the array.\n    elif arr[0] > arr[1]:\n        return 0\n    \n    # Else, it is present in the array, but it is\n    # smaller than the present one.\n    else:\n        return 1 + next(arr[1:],x)\n    \ndef search(arr,x):\n    '''\n    Write a python function to find an element in a sorted array.\n    '''\n    # Base case\n    if len(arr) == 0:\n        return -1\n    \n    # If the element is greater than the present one,\n    # then it is not present in the array.\n    elif arr[0] > arr[1]:\n        return 0\n    \n    # Else, it is present in the array, but it is\n    # smaller than the present one.\n    else:\n        return 1 + search(arr[1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-1 if arr[len(arr)-1]<=x else 0\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i>0:\n        if arr[i]<arr[i-1]:\n            return i-1\n        i-=1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    if length == 0:\n        return -1\n    \n    left = 0\n    right = length-1\n    mid = 0\n    \n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.findall(r'a.*b', text)\n    if not result:\n        return result\n    else:\n        raise Exception('Expected text to be a string, but got a string:'+ str(result))\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.start()] + text[match_a.end():]\n    else:\n        return text\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_endb_starta_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.start()] + text[match_a.end():]\n    else:\n        return text\ndef text_endc_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_endc_starta_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_startc_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.start()] + text[match_a.end():]\n    else:\n        return text\ndef text_endc_startb_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_startc_enda_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_endd_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_startd_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_endb_startd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_startd_enda_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_enda_endd_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_endd_startd_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_a = re.search(r'[a-z]\\b', text)\n    if match_a:\n        return text[:match_a.end()] + text[match_a.start():]\n    else:\n        return text\ndef text_endb_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_a = re.search(r"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # create a regular expression object\n    regex = re.compile(r'a\\w*\\s*\\b.*?')\n    \n    # search for the pattern\n    search = regex.search(text)\n    \n    # if we found an match\n    if search:\n        # Return the matched text\n        return(search.group())\n    else:\n        # Return an empty string\n        return ''\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_flag = True\n    for c in text:\n        if re.search(r'\\ba\\b', c):\n            a_flag = False\n    return a_flag\ndef text_startb_endc(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'c'.\n    '''\n    b_flag = True\n    for c in text:\n        if re.search(r'\\bb\\b', c):\n            b_flag = False\n    return b_flag\ndef text_startc_endd(text):\n    '''\n    Write a function that matches a string that has an 'c' followed by anything, ending in 'd'.\n    '''\n    c_flag = True\n    for c in text:\n        if re.search(r'\\bc\\b', c):\n            c_flag = False\n    return c_flag\ndef text_startd_ende(text):\n    '''\n    Write a function that matches a string that has an 'd' followed by anything, ending in 'e'.\n    '''\n    d_flag = True\n    for c in text:\n        if re.search(r'\\bd\\b', c):\n            d_flag = False\n    return d_flag\ndef text_starte_endf(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'f'.\n    '''\n    e_flag = True\n    for c in text:\n        if re.search(r'\\be\\b', c):\n            e_flag = False\n    return e_flag\ndef text_startf_endg(text):\n    '''\n    Write a function that matches a string that has an 'f' followed by anything, ending in 'g'.\n    '''\n    f_flag = True\n    for c in text:\n        if re.search(r'\\bf\\b', c):\n            f_flag = False\n    return f_flag\ndef text_startg_endh(text):\n    '''\n    Write a function that matches a string that has an 'g' followed by anything, ending in 'h'.\n    '''\n    g_flag = True\n    for c in text:\n        if re.search(r'\\bg\\b', c):\n            g_flag = False\n    return g_flag\ndef text_starth_endi(text):\n    '''\n    Write a function that matches a string that has an 'h' followed by anything, ending in 'i'.\n    '''\n    h_flag = True\n    for c in text:\n        if re.search(r'\\bi\\b', c):\n            h_flag = False\n    return h_flag\ndef text_starti_endj(text):\n    '''\n    Write a function that matches a string that has an 'i' followed by anything, ending in 'j'.\n    '''\n    j_flag = True\n    for c in text:\n        if re.search(r'\\bj\\b', c):\n            j_flag = False\n    return j_flag\ndef text_startj_endk(text):\n    '''\n    Write a function that matches a string that has an 'j' followed by anything, ending in 'k'.\n    '''\n    k_flag = True\n    for c in text:\n        if re.search(r'\\bk\\b', c):\n            k_flag = False\n    return k_flag\ndef text_startk_endl(text):\n    '''\n    Write a function that matches a string that has an 'k' followed by anything, ending in 'l'.\n    '''\n    l_flag = True\n    for c in text:\n        if re.search(r'\\bl\\b', c):\n            l_flag = False\n    return l_flag\ndef text_startl_endm(text):\n    '''\n    Write a function that matches a string that has an 'l' followed by anything, ending in'm'.\n    '''\n    m_flag = True\n    for c in text:\n        if re.search(r'\\bm\\b', c):\n            m_flag = False\n    return m_flag\ndef text_startm_endn(text):\n    '''\n    Write a function that matches a string that has an'm' followed by anything, ending in 'n'.\n    '''\n    n_flag = True\n    for c in text:\n        if re.search(r'\\bn\\b', c):\n            n_flag = False\n    return n_flag\ndef text_startn_endo(text):\n    '''\n    Write a function that matches a string that has an 'n' followed by anything, ending in 'o'.\n    '''\n    o_flag = True\n    for c in text:\n        if re.search(r'\\bo\\b', c):\n            o_flag = False\n    return o_flag\ndef text_starto_endp(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by anything, ending in 'p'.\n    '''\n    p_flag = True\n    for c in text:\n        if re.search(r'\\bp\\b', c):\n            p_flag = False\n    return p_flag\ndef text_startp_endq(text):\n    '''\n    Write a function that matches a string that has an 'p' followed by anything, ending in 'q'.\n    '''\n    q_flag = True\n    for c in text:\n        if re.search(r'\\bq\\b', c):\n            q_flag = False\n    return q_flag\ndef text_startq_endr(text):\n    '''\n    Write a function that matches a string that has an 'q' followed by anything, ending in 'r'.\n    '''\n    r_flag = True\n    for c in text:\n        if re.search(r'\\br\\b', c):\n            r_flag = False\n    return r_flag\ndef text_startr_endt(text):\n    '''\n    Write a function that matches a string that has an 'r' followed by anything, ending in 't'.\n    '''\n    t_flag = True\n    for c in text:\n        if re.search(r'\\bt\\b', c):\n            t_flag = False\n    return t_flag\ndef text_startt_endu(text):\n    '''\n    Write a function that matches a string that has an 't' followed by anything, ending in 'u'.\n    '''\n    u_flag = True\n    for c in text:\n        if re.search(r'\\bu\\b', c):\n            u_flag = False\n    return u_flag\ndef text_startu_endv(text):\n    '''\n    Write a function that matches a string that has an 'u' followed by anything, ending in 'v'.\n    '''\n    v_flag = True\n    for c in text:\n        if re.search(r'\\buv\\b', c):\n            v_flag = False\n    return v_flag\ndef text_startv_endw(text):\n    '''\n    Write a function that matches a string that has an 'v' followed by anything, ending in 'w'.\n    '''\n    w_flag = True\n    for c in text:\n        if re.search(r'\\bw\\b', c):\n            w_flag = False\n    return w_flag\ndef text_startw_endx(text):\n    '''\n    Write a function that matches a string that has an 'w' followed by anything, ending in 'x'.\n    '''\n    x_flag = True\n    for c in text:\n        if re.search(r'\\bwx\\b', c):\n            x_flag = False\n    return x_flag\ndef text_startx_endy(text):\n    '''\n    Write a function that matches a string that has an 'x' followed by anything, ending in 'y'.\n    '''\n    y_flag = True\n    for c in text:\n        if re.search(r'\\bxy\\b', c):\n            y_flag = False\n    return y_flag\ndef text_starty_endz(text):\n    '''\n    Write a function that matches a string that has an 'y' followed by anything, endin"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex_result = re.search(r'^a+b$', text)\n    return regex_result\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    endb_pattern = re.compile(r'(a{3}|b{2})')\n    b_match = endb_pattern.search(text)\n    if b_match:\n        return b_match.group()\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    def split_string(text):\n        text = text.replace('\\n','')\n        text = re.sub(r'^\\s+', '', text)\n        text = re.sub(r'\\s+$', '', text)\n        return text.split(' ')\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start = 0\n    end = 0\n    for i, char in enumerate(text):\n        if char == 'a':\n            end = i\n        if char == 'b':\n            start = i\n    if end + 1!= len(text):\n        return -1\n    else:\n        return [start + 1, end + 1]\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if text[-1] == 'b':\n        return text[:-1] + 'a'\n    else:\n        return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    t = re.findall(r'\\b(a|b)', text)\n    #print(t)\n    return ''.join(t)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    for item in dict.items():\n        total+=item[1]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # c = 0\n    # for i in dict:\n    #     c += dict[i]\n    # return c\n    for i in dict:\n        dict[i] = dict[i] + sum(dict.values())\n    return dict\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n    \ndef sum_keys(dict):\n    '''\n    Write function to sum all the keys of the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n    \ndef sum_values(dict):\n    '''\n    Write function to sum all the values of the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n    \ndef sum_keys_and_values(dict):\n    '''\n    Write function to sum all the keys and values of the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n    "
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #get the numbers in the range l to r\n    odds = []\n    for i in range(l, r):\n        if i%2 == 1:\n            odds.append(i)\n    \n    #add the numbers into the array and return the sum\n    sum = 0\n    for i in odds:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2!= 0:\n            sum += i\n    return sum\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n    \ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n        \ndef sum_pairs(l, r):\n    '''\n    Write a python function to find the sum of all pairs of numbers in the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1):\n        for j in range(i+1,r+1):\n            sum += i*j\n    return sum\n    \ndef max_length(l, r):\n    '''\n    Write a python function to find the longest word in the given string.\n    '''\n    l = len(l)\n    r = len(r)\n    for i in range(l, r):\n        if l > i:\n            break\n    return l\n    \ndef middle_word(l, r):\n    '''\n    Write a python function to find the middle word of the given string.\n    '''\n    middle = l + (r-l) // 2\n    return l+r-middle\n    \ndef reverse(l, r):\n    '''\n    Write a python function to reverse a string.\n    '''\n    l,r = r,l\n    for i in range(l, r):\n        temp = l[i]\n        l[i] = r[i]\n        r[i] = temp\n    return l,r\n    \ndef palindrome(l, r):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return l == r[::-1]\n    \ndef find_pairs(l, r):\n    '''\n    Write a python function to find all pairs of numbers that sum to l and r.\n    '''\n    l, r = r, l\n    for i in range(l, r+1):\n        if i%2 == 0:\n            if l > i and r < i+1:\n                break\n    return l, r\n    \ndef find_sum(l, r):\n    '''\n    Write a python function to find the sum of all numbers between l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        sum += i\n    return sum\n    \ndef find_length(l, r):\n    '''\n    Write a python function to find the length of all the integers from l and r.\n    '''\n    length = 0\n    for i in range(l, r+1):\n        length += 1\n    return length\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        if i % 2 == 1:\n            sum += i\n    return sum\ndef add_even(n): \n    '''\n    Write a python function to add even numbers of a range of numbers. \n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        if i % 2 == 0:\n            sum += i\n    return sum\ndef func(n):\n    '''\n    Write a python function to calculate the sum of all the numbers that are divisible by 4 or 5\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        if i % 4 == 0 or i % 5 == 0:\n            sum += i\n    return sum\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\ndef fibonacci_sum(n):\n    '''\n    Write a python function to find the sum of all the fibonacci numbers up to the given number.\n    '''\n    a = 0\n    b = 1\n    fibonacci_sum = 0\n    if n == 1:\n        return a\n    elif n == 2:\n        return b\n    else:\n        for i in range(n - 1):\n            a, b = b, a + b\n            fibonacci_sum += b\n        return fibonacci_sum\ndef check_prime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if num < 2:\n        return 'No'\n    if num == 2 or num == 3:\n        return 'Prime'\n    for i in range(2, num):\n        if num % i == 0:\n            return 'Not Prime'\n    return 'Prime'\ndef a_to_b(n):\n    '''\n    Write a python function to convert an integer to its binary representation.\n    '''\n    result = ''\n    while n!= 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\ndef b_to_a(n):\n    '''\n    Write a python function to convert an integer to its binary representation.\n    '''\n    result = ''\n    while n!= 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\ndef nth_power(num, power):\n    '''\n    Write a python function to compute the nth power of a given number. \n    '''\n    if power == 1:\n        return num\n    if power % 1 == 0:\n        return num\n    else:\n        return num * nth_power(num, power - 1)\ndef find_product(n):\n    '''\n    Write a python function to find the product of all the natural numbers smaller than n.\n    '''\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\ndef is_prime(num):\n    '''\n    Write a python function to check if a given number is a prime number or not.\n    '''\n    if num < 2:\n        return 'No'\n    if num == 2 or num == 3:\n        return 'Prime'\n    for i in range(2, num):\n        if num % i == 0:\n            return 'Not Prime'\n    return 'Prime'\ndef multiply_numbers(n):\n    '''\n    Write a python function to compute the product of all the natural numbers smaller than n.\n    '''\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\ndef multiply_product(n):\n    '''\n    Write a python function to compute the product of all the natural numbers smaller than n.\n    '''\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\ndef is_factor(n):\n    '''\n    Write a python function to check if a given number is a factor or not.\n    '''\n    if n == 1:\n        return 'No'\n    if n % 2 == 0:\n        return 'Not Factor'\n    if n % 4 == 0:\n        return 'Not Factor'\n    return 'Factor'\ndef is_decimal(num):\n    '''\n    Write a python function to check if a given number is decimal or not.\n    '''\n    result = True\n    for i in range(1, num):\n        if num % i == 0:\n            result = False\n    return result\ndef decompose(n):\n    '''\n    Write a python function to decompose a positive integer n. \n    '''\n    result = ''\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            result = result + '('\n        if n % i!= 0:\n            result = result + ')'\n        n //= i\n        i *= 2\n    result = result + ')'\n    return result\ndef reverse(n):\n    '''\n    Write a python function to reverse a given number.\n    '''\n    result = ''\n    while n:\n        result = str(n % 10) + result\n        n //= 10\n    return result[::-1]\ndef flatten(n):\n    '''\n    Write a python function to flatten a given number.\n    '''\n    result = ''\n    while n:\n        if n % 2 == 1:\n            result = result + '1' + result\n        result = result + '2' + result\n        n = n // 2\n    return result\ndef prime(n):\n    '''\n    Write a python function to determine if a given number is a prime or not.\n    '''\n    result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef gcd(a, b):\n    '''\n    Write a python function to compute the greatest common divisor of a given numbers. \n    '''\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\ndef check_prime_factor(a, b):\n    '''\n    Write a python function to check if a given number is a prime number or not.\n    '''\n    if a % b == 0 or b % a == 0:\n        return 'No'\n    else:\n        return 'Yes'\ndef modular_inverse(n, m):\n    '''\n    Write a python function to compute the modular inverse of a number.\n    '''\n    modinv = 1\n    while n!= 0:\n        if n % 2 == 0:\n            modinv = (modinv * m) % n\n        n = n // 2\n    return modinv\ndef get_division_factor(n):\n    '''\n    Write a python function to compute the division factor of a given number.\n    '''\n    modinv = modular_inverse(n, n)\n    if n == 0:\n        return -1\n    else:\n        return int(modinv)\ndef addition(a, b):\n    '''\n    Write a python function to compute the addition of two numbers.\n    '''\n    return a + b\ndef subtract(a, b):\n    '''\n    Write a python function to compute the subtraction of two numbers.\n    '''\n    return a - b\ndef multiply(a, b):\n    '''\n    Write a python function to compute the multiplication of two numbers.\n    '''\n    result = 1\n    for i in range(1, a + 1):\n        result *= i\n    for i in range(1, b + 1):\n        result *= i\n    return result\ndef divide(a, b):\n    '''\n    Write a python function to compute the division of two numbers.\n    '''\n    result = 1\n    for i in range(1, b + 1):\n        result *= i\n    for i in range(1, a + 1):\n        result *= i\n    return result\ndef add(a, b):\n    '''\n    Write a python function to compute the addition of two numbers.\n    '''\n    return a + b\ndef sub(a, b):\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1): \n        if i % 2 == 0: \n            sum += i \n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    #intialize sum\n    sum = 0\n    \n    #iterate from l to r\n    for i in range(l,r+1):\n        #check if number is odd\n        if i % 2 == 0:\n            #add to sum\n            sum += i\n    #return sum\n    return sum\n    \n    "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum_odd = 0\n    while l <= r: \n        if l % 2 == 1:\n            sum_odd += l \n        l += 1\n        r -= 1\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n >= 0:\n        return n + sum_odd(n-1)\n    else:\n        return n + 0\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    c = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            c += i\n    return c\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    print('sum = ', sum(arr))\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s = s + i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # TODO: Finish this function\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr == []:\n        return None\n    else:\n        return arr[0] + _sum(arr[1:])\n    \n    \ndef _max(arr):  \n    '''\n    Write a python function to find the max of an array.\n    '''\n    if arr == []:\n        return None\n    else:\n        return arr[0]\n    \n    \ndef _min(arr):  \n    '''\n    Write a python function to find the min of an array.\n    '''\n    if arr == []:\n        return None\n    else:\n        return arr[0]\n    \n    \ndef _prod(arr):  \n    '''\n    Write a python function to find the product of an array.\n    '''\n    if arr == []:\n        return None\n    else:\n        return arr[0] * arr[1]\n    \n    \ndef _sum_part(arr, n):\n    '''\n    Write a python function to find the sum of a given array using a part of the array.\n    '''\n    if arr == []:\n        return None\n    else:\n        return arr[0] * _sum_part(arr[1:], n)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for value in arr:\n        total += value\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total = total + num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0,len(arr)-1):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _find_mean(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    return _sum(arr)/len(arr)\n    \ndef _find_variance(arr):\n    '''\n    Write a python function to find the variance of an array.\n    '''\n    var = _sum(arr)/len(arr)\n    return var ** 2\n    \ndef _find_standard_deviation(arr):\n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    mean = _sum(arr)/len(arr)\n    return (arr - mean) ** 2\n    \ndef _find_mode(arr):\n    '''\n    Write a python function to find the mode of an array.\n    '''\n    return _find_mean(arr)\n    \ndef _find_median(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    return _find_mean(arr)\n    \ndef _count_positive_values(arr):\n    '''\n    Write a python function to count the positive values of an array.\n    '''\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n    \ndef _percentage(arr):\n    '''\n    Write a python function to calculate a percentage of a given array.\n    '''\n    return round((arr/len(arr))*100,2)\n    \ndef _find_lowest_element_in_array(arr):\n    '''\n    Write a python function to find the lowest value in an array.\n    '''\n    return min(arr)\n    \ndef _find_highest_element_in_array(arr):\n    '''\n    Write a python function to find the highest value in an array.\n    '''\n    return max(arr)\n    \ndef _sort_by_frequency(arr):\n    '''\n    Write a python function to sort an array in a descending order by frequency.\n    '''\n    return sorted(arr, key=lambda x: arr.count(x), reverse=True)\n    \ndef _top_three_words(arr, n):\n    '''\n    Write a python function to create a list of the top three words in the given array.\n    '''\n    return arr[:n]\n    \ndef _find_numbers_with_numbers(arr, n):\n    '''\n    Write a python function to find the n number of numbers in an array.\n    '''\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n    \ndef _count_pairs_with_numbers(arr, n):\n    '''\n    Write a python function to count the number of pairs in an array with the given n.\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == 0:\n                count += 1\n    return count\n    \ndef _find_sum(arr, n):\n    '''\n    Write a python function to find the sum of a given array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n    \ndef _find_sum_of_sums(arr, n):\n    '''\n    Write a python function to find the sum of the sum of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n    \ndef _find_sum_of_squares(arr, n):\n    '''\n    Write a python function to find the sum of the square of the given array.\n    '''\n    total = 0\n    for num in arr:\n        total += num ** 2\n    return total\n    \ndef _find_sum_of_products(arr, n):\n    '''\n    Write a python function to find the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_2(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_3(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_4(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_5(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_6(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_7(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_8(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_9(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_10(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum_of_squares_products_11(arr, n):\n    '''\n    Write a python function to find the sum of the square of the sum of the product of the given array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2 * arr[i]\n    return total\n    \ndef _find_sum"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for n in arr:\n        sum = sum + n\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #Splitting the num into halves\n    start = n >> 1\n    end = n & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d) + (n>>(32-d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a=0\n    b=1\n    c=2\n    d=3\n    e=4\n    f=5\n    g=6\n    h=7\n    i=8\n    j=9\n    k=10\n    l=11\n    m=12\n    n=13\n    o=14\n    p=15\n    q=16\n    r=17\n    s=18\n    t=19\n    u=20\n    v=21\n    w=22\n    x=23\n    y=24\n    z=25\n    \n    if d == 0:\n        return n\n    if d == 1:\n        return n >> 1\n    if d == 2:\n        return (n >> 3) + (n << 1)\n    if d == 3:\n        return (n >> 6) + (n >> 3) + n\n    if d == 4:\n        return n >> 6\n    if d == 5:\n        return (n >> 2) + (n >> 1) + n\n    if d == 6:\n        return (n >> 4) + (n >> 3) + (n >> 1) + (n >> 2) + n\n    if d == 7:\n        return (n >> 8) + (n >> 7) + (n >> 6) + (n >> 2) + (n >> 1) + (n >> 5) + n\n    if d == 8:\n        return (n >> 5) + (n >> 7) + (n >> 4) + (n >> 2) + (n >> 6) + (n >> 3) + n\n    if d == 9:\n        return (n >> 9) + (n >> 5) + (n >> 8) + (n >> 6) + (n >> 4) + (n >> 2) + (n >> 3) + (n >> 7) + n\n    if d == 10:\n        return (n >> 7) + (n >> 4) + (n >> 2) + (n >> 3) + (n >> 6) + (n >> 5) + (n >> 8) + n\n    if d == 11:\n        return (n >> 3) + (n >> 1) + (n >> 2) + n\n    if d == 12:\n        return (n >> 5) + (n >> 3) + (n >> 2) + (n >> 1) + (n >> 4) + (n >> 6) + (n >> 8) + n\n    if d == 13:\n        return (n >> 8) + (n >> 5) + (n >> 4) + (n >> 2) + (n >> 3) + (n >> 6) + n\n    if d == 14:\n        return (n >> 3) + (n >> 1) + (n >> 2) + (n >> 5) + n\n    if d == 15:\n        return (n >> 5) + (n >> 4) + (n >> 3) + (n >> 6) + (n >> 5) + n\n    if d == 16:\n        return (n >> 7) + (n >> 4) + (n >> 3) + (n >> 6) + (n >> 5) + (n >> 8) + n\n    if d == 17:\n        return (n >> 9) + (n >> 4) + (n >> 3) + (n >> 6) + (n >> 7) + (n >> 8) + n\n    if d == 18:\n        return (n >> 9) + (n >> 4) + (n >> 3) + (n >> 6) + (n >> 5) + (n >> 8) + (n >> 7) + (n >> 8) + n\n    if d == 19:\n        return (n >> 6) + (n >> 5) + (n >> 8) + (n >> 7) + (n >> 8) + n\n    if d == 20:\n        return (n >> 2) + (n >> 5) + (n >> 7) + (n >> 8) + n\n    if d == 21:\n        return (n >> 2) + (n >> 4) + (n >> 6) + (n >> 8) + (n >> 7) + (n >> 8) + n\n    if d == 22:\n        return (n >> 6) + (n >> 5) + (n >> 7) + (n >> 8) + (n >> 9) + n\n    if d == 23:\n        return (n >> 7) + (n >> 6) + (n >> 5) + (n >> 8) + (n >> 9) + n\n    if d == 24:\n        return (n >> 4) + (n >> 5) + (n >> 6) + (n >> 8) + (n >> 7) + (n >> 9) + n\n    if d == 25:\n        return (n >> 3) + (n >> 2) + (n >> 6) + (n >> 7) + (n >> 8) + (n >> 9) + n\n    if d == 26:\n        return (n >> 6) + (n >> 4) + (n >> 5) + (n >> 8) + (n >> 7) + (n >> 9) + n\n    if d == 27:\n        return (n >> 6) + (n >> 5) + (n >> 4) + (n >> 3) + (n >> 7) + (n >> 8) + (n >> 9) + n\n    if d == 28:\n        return (n >> 7) + (n >> 4) + (n >> 5) + (n >> 8) + (n >> 9) + n\n    if d == 29:\n        return (n >> 9) + (n >> 5) + (n >> 4) + (n >> 3) + (n >> 6) + (n >> 7) + (n >> 8) + n\n    if d == 30:\n        return (n >> 7) + (n >> 4) + (n >> 3) + (n >> 6) + (n >> 9) + (n >> 8) + (n >> 7) + n\n    if d == 31:\n        return (n >> 9) + (n >> 4) + (n >> 3) + (n >> 6) + (n >> 7) + (n >> 8) + (n >> 9) + n\n    if d == 32:\n        return (n >> 4) + (n >> 2) + (n >> 6) + (n >> 8) + (n >> 9) + n\n    if d == 33:\n        return (n >> 2) + (n >> 4) + (n >> 6) + (n >> 8) + (n >> 9) + n\n    if d == 34:\n        return (n >> 4) + (n >> 2) + (n >> 6) + (n >> 8) + (n >> 9) + (n >> 8) + n\n    if d == 35:\n        return (n >> 2) + (n >> 4) + (n >> 6) + (n >> 8) + (n >> 9) + (n >> 8) + (n >> 7) + n\n    if d == 36:\n        return (n >> 4) + (n >> 2) + (n >> 6) + (n >> 8) + (n >> 9) + (n >> 8) + (n >> 7) + (n >> 8) + n\n    if d == 37:\n        return (n >> 4) + (n >> 3) + (n >> 6) + (n >> 8) + (n >> 9) + (n >> 8) + (n >> 7) + (n >> 8) + (n >> 9) + n\n    if d == 38:\n        return (n >> 3) + (n >> 2) + (n >> 6) + (n >> 8) + (n >> 9) + (n >> 8) + (n >> 7) + (n >> 8) + (n >> 9) + n\n    if d == 39:\n        return (n >> 2) + (n >> 3) + (n >> 6) + (n >> 8) + (n >> 9) + (n >> 8) + (n >> 7) + (n >> 9) + (n >> 8) + n\n    if d == 40:\n        return (n >> 3) + (n >> 2) + (n >> 6) + (n >> 8) + (n >> 9) + (n >> 8) + (n >> 7) + (n >> 9) + (n >> 8) + (n >> 7) + (n >> 8) + n\n    if d == 41:\n        return (n >> 2) + (n >> 3) + (n >> 6) + (n >> 8) + (n >> 9) + (n >> 8) + (n >> 7) + (n >> "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n==0:\n        return 0\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=int(n)\n    d=int(d)\n    if n==0:\n        return 1\n    if n==1:\n        return 0\n    if n<0:\n        n=n+1\n        d=d%32\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) + (n >> (32-d))\n    \ndef right_rotate(n,d):    \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n >> d) + (n << (32-d))\n    "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d%n\n    n = n<<d\n    return n\ndef right_rotate(n,d):\n    '''\n    Write a function that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d%n\n    n = n<<d\n    return n\ndef bits_to_bytes(n,d):\n    '''\n    Create a string of given bits\n    '''\n    bytes_to_send=''\n    for i in range(d):\n        if(i%2==0):\n            bytes_to_send=bytes_to_send+str(int(n&1))\n            n = n>>1\n        else:\n            bytes_to_send=bytes_to_send+str(int(n&1))\n            n = n>>1\n    return bytes_to_send\ndef bytes_to_bits(n,d):\n    '''\n    Create a string of given bits\n    '''\n    bytes_to_send=''\n    for i in range(d):\n        if(i%2==0):\n            bytes_to_send=bytes_to_send+str(int(n&1))\n            n = n>>1\n        else:\n            bytes_to_send=bytes_to_send+str(int(n&1))\n            n = n>>1\n    return bytes_to_send\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #Write your code here\n    n=n&((2**32)-1)\n    n=n>>d\n    return n\ndef right_rotate(n,d):\n    '''\n    Write a function that rotates the bits of n right by d bits.\n    '''\n    #Write your code here\n    n=n>>d\n    n=n&((2**32)-1)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a = bin(n)[2:]\n    b = len(a)\n    c = b%d\n    if c == 0:\n        d = d -1\n    else:\n        d = d +1\n    return (bin(a)[2:],b,c,d)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ', '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace('  ', '')\n    text = text.replace('\\t', '')\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    text = text.replace('\\xa0', '')\n    text = text.replace('\\u200b', '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\ndef remove_quotes(text):\n    '''\n    Write a function to remove all quotes from a string.\n    '''\n    return re.sub('\"', '', text)\ndef remove_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r\"\\b[0-9]+\\b\", \"\", text)\ndef remove_symbols(text):\n    '''\n    Write a function to remove all symbols from a string.\n    '''\n    return re.sub(r\"\\b[@-]?[A-Za-z_0-9]{1,}[A-Za-z_0-9]?\\b\", \"\", text)\ndef remove_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    stopwords = ['a', 'the', 'is', 'of', 'and', 'to', 'this', 'in', 'on', 'of', 'of', 'of', 'it', 'for', 'into', 'about', 'along', 'for', 'at', 'by', 'as', 'with', 'with', 'and', 'with', 'or', 'for', 'at', 'and', 'for', 'in', 'with', 'with', 'and', 'to', 'and', 'of', 'but', 'can', 'when', 'at', 'at', 'but', 'as', 'by', 'as', 'with', 'with', 'and', 'for', 'at', 'but', 'can', 'when', 'of', 'and', 'for', 'at', 'in', 'with', 'with', 'and', 'and', 'as', 'but', 'can', 'when', 'in', 'for', 'and', 'from', 'to', 'at', 'with', 'with', 'and', 'and', 'but', 'can', 'when', 'in', 'for', 'and', 'of', 'it', 'and', 'for', 'and', 'for', 'with', 'with', 'and', 'but', 'can', 'when', 'and', 'of', 'and', 'or', 'but', 'can', 'when', 'and', 'and', 'and', 'for', 'at', 'and', 'in', 'but', 'but', 'can', 'but', 'but', 'can', 'for', 'and', 'of', 'and', 'and', 'and', 'and', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can', 'but', 'but', 'can'"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace('  ','')\n    text = text.replace('\\t','')\n    text = text.replace('\\n','')\n    text = text.replace('\\f','')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('^\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x) == len(y) == len(z) == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a=len(x)\n    b=len(y)\n    c=len(z)\n    d=0\n    if a!=b and a!=c and a!=d:\n        d+=1\n    if b!=a and b!=c and b!=d:\n        d+=1\n    if c!=a and c!=b and c!=d:\n        d+=1\n    if a==b==c==d:\n        d+=1\n    return d\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    l=len(x)\n    if l==3:\n        if x==y==z:\n            print(x,'equals',y,'and',z)\n        else:\n            print(x,y,z)\n    else:\n        print('the length of the numbers should be 3')\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    for i in range(x,y):\n        for j in range(z,x+y):\n            if i == j:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if x[i] == y[j] and z[i]==z[j]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # --------------- DO NOT TOUCH THE BELOW CODE --------------- #\n    # Write your code below\n    l1=[]\n    l2=[]\n    l3=[]\n    if x<y:\n        for i in range(x,y):\n            if y%i==0:\n                l1.append(i)\n    else:\n        for i in range(x,y):\n            if y%i==0:\n                l2.append(i)\n    if z<x:\n        for i in range(z,x):\n            if x%i==0:\n                l3.append(i)\n    else:\n        for i in range(z,x):\n            if x%i==0:\n                l3.append(i)\n    print(\"Sum of the three numbers are {}.\".format(sum(l1+l2+l3)))\n    # -------------------------------------------------- #    \ndef test_five_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from five given integers.\n    '''\n    # --------------- DO NOT TOUCH THE BELOW CODE --------------- #\n    # Write your code below\n    l1=[]\n    l2=[]\n    l3=[]\n    if x<y:\n        for i in range(x,y):\n            if y%i==0:\n                l1.append(i)\n    else:\n        for i in range(x,y):\n            if y%i==0:\n                l2.append(i)\n    if z<x:\n        for i in range(z,x):\n            if x%i==0:\n                l3.append(i)\n    else:\n        for i in range(z,x):\n            if x%i==0:\n                l3.append(i)\n    print(\"Sum of the five numbers are {}.\".format(sum(l1+l2+l3)))\n    # -------------------------------------------------- #\n    \ndef main():\n    # --------------- DO NOT TOUCH THE BELOW CODE --------------- #\n    # Read the three numbers from the user.\n    x=int(input(\"Enter a number for the first number: \"))\n    y=int(input(\"Enter a number for the second number: \"))\n    z=int(input(\"Enter a number for the third number: \"))\n    # --------------- DO NOT TOUCH THE BELOW CODE --------------- #\n    # Run your python code.\n    test_three_equal(x,y,z)\n    test_five_equal(x,y,z)\n    \n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # your code here\n    return 2\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    n = len(x)\n    m = len(y)\n    k = len(z)\n    if n!= m or k!= n:\n        raise ValueError('The two inputs must be of same length.')\n    l = []\n    for i in range(n):\n        if x[i] == y[i] and z[i] == 0:\n            continue\n        else:\n            l.append(z[i])\n    c = len(l)\n    if c!= m or l == 0:\n        raise ValueError('The two inputs must be of same length.')\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    if x == y == z:\n        c += 1\n    elif x == y!= z:\n        c += 1\n    elif y == z!= x:\n        c += 1\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x)==3\n    assert len(y)==3\n    assert len(z)==3\n    \n    print(\"\\nTest case:\")\n    print(\"x:\",x)\n    print(\"y:\",y)\n    print(\"z:\",z)\n    \n    #find number of equal numbers\n    equal_numbers=0\n    for i in range(3):\n        if x[i]==y[i] and z[i]==1:\n            equal_numbers+=1\n    \n    print(\"equal_numbers:\",equal_numbers)\n    \n    return equal_numbers\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # define the total count of rotations\n    count = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i]!=arr[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count_rotations = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count_rotations += 1\n    return count_rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            count += 1\n        else:\n            count += len(arr) - 1 - i\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return len(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    counter = 0\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        if arr[i] < arr[j]:\n            counter += 1\n            i += 1\n        else:\n            j -= 1\n    print(counter)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        j = arr[i]\n        if arr[j] > arr[i]:\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return sum([arr.index(i) for i in arr])\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            count+=1\n    return count\narr=list(map(int,input(\"Enter an array\").split()))\nprint(count_rotation(arr))"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr_count = [0] * len(arr)\n    for i in range(len(arr)):\n        arr_count[i] = arr_count[i - 1] + 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] < arr[i]:\n                arr_count[j] = max(arr_count[j], arr_count[i] + 1)\n    return arr_count\n    \n    "
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 1):\n        return True\n    elif (n % 2 == 0):\n        return n == 3 * n + 1\n    else:\n        return n!= (3 * n + 1)\n    "
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return n == n**0.5\n    if n > 2:\n        div = 2\n        while(div*div <= n):\n            if n%div == 0:\n                return False\n            div += 1\n        return False\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    if n % 2 == 0 :\n        return False\n    else :\n        return is_perfect_square(n // 2)\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 : return False\n    if n == 0 : return True\n    elif n == 1 : return False\n    else :\n        if n % 2 == 0 :\n            return is_perfect_square(n // 2)\n        else :\n            return is_perfect_square(3 * n + 1)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = 0\n    if n == 0 :\n        return False\n    elif n == 1 :\n        return True\n    else :\n        if n == n :\n            return True\n        for i in range(2, int(math.sqrt(n) + 1)) :\n            if n % i == 0 :\n                s += 1\n                if s == 2 :\n                    return True\n                else :\n                    break\n        return False\n    \ndef is_prime(n) :\n    '''\n    a function to check whether given number is prime or not\n    '''\n    if n < 2 :\n        return False\n    else :\n        for i in range(2, n + 1) :\n            if n % i == 0 :\n                return False\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==1 or n==2:\n        return True\n    if n%2==0:\n        return False\n    s=int(n**0.5)\n    for i in range(3,s,2):\n        if n%i==0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0 :\n        return False\n    else :\n        if n == n//2 :\n            return True\n        elif n % 2 == 0 :\n            return False\n        else :\n            return (n**2 + 1) % 10 == 0\n    \n    \nprint(is_perfect_square(100))\nprint(is_perfect_square(120))\nprint(is_perfect_square(1000)"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = int(n**0.5)\n    return n % sq == 0 and n > 1\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    if n % 2 == 0 :\n        return False\n    while n % 2 == 0 :\n        n = int(n / 2)\n    if n == 1 :\n        return True\n    for i in range(3, int(math.sqrt(n) + 1), 2) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # iterate through n\n    for i in range(1, n+1) :\n        # calculate the square of i\n        square = i * i\n        # if sqrt(i) is less than the denominator,\n        # then it is not a perfect square\n        if square > n :\n            return False\n        elif square == n :\n            return True\n    \n    # returns False if the number is perfect square\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if (arr[i] % 2)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # if the product of even numbers is odd, there is no product even number\n    if arr == []:\n        return False\n    if arr[0] % 2!= 0:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[0]:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    even_product = 1\n    for n in arr:\n        even_product = even_product*n\n    \n    if even_product % 2 == 0:\n        return False\n    else:\n        return True\n        \nprint(is_product_even([1,2,3,4]))"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    for i in range(len(arr)-1):\n        if(arr[i] + arr[i+1] == 2):\n            return arr[i]\n    \n    return 'Not even'\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if(arr[i]%2==0):\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if sum(arr) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==1:\n        return arr[0]==2\n    for i in range(len(arr)-1):\n        if arr[i]*arr[i+1]==2:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Brute force\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] * arr[j] == arr[i] * arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    total = 0\n    \n    for i in range(len(lists)):\n        total = total + lists[i]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Code here\n    max_sum_list = []\n    for i in range(0, len(lists)):\n        list_sum = 0\n        for j in range(0, len(lists)):\n            list_sum += lists[j][i]\n        if max_sum_list == []:\n            max_sum_list = [[list_sum]]\n            continue\n        if list_sum > max_sum_list[-1][-1]:\n            max_sum_list.append([list_sum])\n        else:\n            max_sum_list.append([list_sum, max_sum_list[-1][-1]])\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [[(i, list(map(max, list(map(i, l))))[0]) for i in lists] for l in lists]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    sum_list = 0\n    for i in lists:\n        sum_list += i\n        if i > sum_list:\n            sum_list = i\n            max_list = lists\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    if len(lists) == 0:\n        return [[]]\n    max_so_far = 0\n    highest_list = []\n    for i in lists:\n        max_so_far = max(i, max_so_far)\n        highest_list.append([i, max_so_far])\n    return highest_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for list in lists:\n        sum = 0\n        for i in list:\n            sum += i\n        max_sum.append(sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in lists:\n        for j in i:\n            if len(i) > len(max_sum) and j > max_sum[len(i) - 1]:\n                max_sum.append(j)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) < 2:\n        return lists\n    max_list = lists[0]\n    for i in range(1, len(lists)):\n        if lists[i] > max_list[-1]:\n            max_list = lists[i]\n        if lists[i][-1] > max_list[-1]:\n            max_list = lists[i]\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sum_list_helper(lists, 0, [], 0)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    upper_str = test_str.upper()\n    for char in upper_str:\n        if char.isupper():\n            max_count += 1\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.replace(\" \",\"\")\n    max_char = 0\n    for char in test_str:\n        if char.isupper():\n            if char > max_char:\n                max_char = char\n    return max_char\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    list_of_upper = list(test_str)\n    max_count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def return_run_uppercase(s):\n        if s == \"\":\n            return []\n        \n        res = \"\"\n        s = s.lower()\n        for i in s:\n            if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                res += i\n        return res\n        \n    def max_run_lower(test_str):\n        '''\n        Write a function to find maximum run of lowercase characters in the given string.\n        '''\n        def return_run_lower(s):\n            if s == \"\":\n                return \"\"\n            \n            res = \"\"\n            s = s.lower()\n            for i in s:\n                if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                    res += i\n            return res\n            \n        def max_run_upper(test_str):\n            '''\n            Write a function to find maximum run of uppercase characters in the given string.\n            '''\n            def return_run_upper(s):\n                if s == \"\":\n                    return \"\"\n                \n                res = \"\"\n                s = s.lower()\n                for i in s:\n                    if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                        res += i\n                return res\n            \n            def max_run_lower_upper(test_str):\n                '''\n                Write a function to find maximum run of lowercase characters in the given string.\n                '''\n                def return_run_lower_upper(s):\n                    if s == \"\":\n                        return \"\"\n                    \n                    res = \"\"\n                    s = s.lower()\n                    for i in s:\n                        if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                            res += i\n                    return res\n                \n                def max_run_lower_upper_u(test_str):\n                    '''\n                    Write a function to find maximum run of lowercase characters in the given string.\n                    '''\n                    def return_run_lower_upper(s):\n                        if s == \"\":\n                            return \"\"\n                        \n                        res = \"\"\n                        s = s.lower()\n                        for i in s:\n                            if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                res += i\n                        return res\n                    \n                    def max_run_lower_upper_u_u(test_str):\n                        '''\n                        Write a function to find maximum run of uppercase characters in the given string.\n                        '''\n                        def return_run_lower_upper_u(s):\n                            if s == \"\":\n                                return \"\"\n                            \n                            res = \"\"\n                            s = s.lower()\n                            for i in s:\n                                if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                    res += i\n                            return res\n                        \n                        def max_run_lower_upper_u_u_u(test_str):\n                            '''\n                            Write a function to find maximum run of uppercase characters in the given string.\n                            '''\n                            def return_run_lower_upper_u_u(s):\n                                if s == \"\":\n                                    return \"\"\n                                \n                                res = \"\"\n                                s = s.lower()\n                                for i in s:\n                                    if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                        res += i\n                                return res\n                            \n                            def max_run_lower_upper_u_u_u_u(test_str):\n                                '''\n                                Write a function to find maximum run of uppercase characters in the given string.\n                                '''\n                                def return_run_lower_upper_u_u(s):\n                                    if s == \"\":\n                                        return \"\"\n                                    \n                                    res = \"\"\n                                    s = s.lower()\n                                    for i in s:\n                                        if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                            res += i\n                                    return res\n                                \n                                def max_run_lower_upper_u_u_u_u(test_str):\n                                    '''\n                                    Write a function to find maximum run of uppercase characters in the given string.\n                                    '''\n                                    def return_run_lower_upper_u_u(s):\n                                        if s == \"\":\n                                            return \"\"\n                                    \n                                    res = \"\"\n                                    s = s.lower()\n                                    for i in s:\n                                        if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                            res += i\n                                    return res\n                                \n                                def max_run_lower_upper_u_u_u_u_u(test_str):\n                                    '''\n                                    Write a function to find maximum run of uppercase characters in the given string.\n                                    '''\n                                    def return_run_lower_upper_u_u(s):\n                                        if s == \"\":\n                                            return \"\"\n                                    \n                                    res = \"\"\n                                    s = s.lower()\n                                    for i in s:\n                                        if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                            res += i\n                                    return res\n                                \n                                def max_run_lower_upper_u_u_u_u_u(test_str):\n                                    '''\n                                    Write a function to find maximum run of uppercase characters in the given string.\n                                    '''\n                                    def return_run_lower_upper_u_u(s):\n                                        if s == \"\":\n                                            return \"\"\n                                    \n                                    res = \"\"\n                                    s = s.lower()\n                                    for i in s:\n                                        if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                            res += i\n                                    return res\n                                \n                                def max_run_lower_upper_u_u_u_u_u(test_str):\n                                    '''\n                                    Write a function to find maximum run of uppercase characters in the given string.\n                                    '''\n                                    def return_run_lower_upper_u_u(s):\n                                        if s == \"\":\n                                            return \"\"\n                                    \n                                    res = \"\"\n                                    s = s.lower()\n                                    for i in s:\n                                        if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                            res += i\n                                    return res\n                            \n                            def max_run_lower_upper_u_u_u_u_u(test_str):\n                                '''\n                                Write a function to find maximum run of uppercase characters in the given string.\n                                '''\n                                def return_run_lower_upper_u_u(s):\n                                    if s == \"\":\n                                        return \"\"\n                                    \n                                    res = \"\"\n                                    s = s.lower()\n                                    for i in s:\n                                        if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                            res += i\n                                    return res\n                                \n                                def max_run_lower_upper_u_u_u_u_u(test_str):\n                                    '''\n                                    Write a function to find maximum run of uppercase characters in the given string.\n                                    '''\n                                    def return_run_lower_upper_u_u(s):\n                                        if s == \"\":\n                                            return \"\"\n                                    \n                                    res = \"\"\n                                    s = s.lower()\n                                    for i in s:\n                                        if i in 'abcdefghijklmnopqrstuvwxyz' or i in '1234567890':\n                                            res += i\n                                    return res\n                                \n                                def max_run_lower_upper_u_u_u_u_u(test_str):\n                                    '''\n                                    Write a function to find maximum run of uppercase characters in the given string.\n                                    '''\n                                    def return_run_lower_upper_u_u(s):\n                                        if s == \"\":\n                                            return \"\"\n                                    \n                                    res = \"\"\n                                    s = s.lower()\n                                    for i in "
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def uppercase(input_str):\n        '''\n        Write a function to find maximum run of uppercase characters in the given string.\n        '''\n        if input_str == \"\":\n            return 0\n        if len(input_str) == 1:\n            return 1\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    lower_case_count = 0\n    uppercase_count = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            lower_case_count += 1\n    \n    if uppercase_count > lower_case_count:\n        return uppercase_count\n    else:\n        return lower_case_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = 0\n    for i in test_str:\n        if i.isupper():\n            max_run_uppercase += 1\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # count upper case characters\n    count_upp = 0\n    for char in test_str:\n        if char.isupper():\n            count_upp += 1\n    \n    return count_upp\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str_length = len(test_str)\n    max_length = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = []\n    for i in test_str:\n        if i.isupper():\n            result.append(i)\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return len(nums) % 2 == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    return nums[0]\n    "
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n        else:\n            pass\n        \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==0:\n            return num\n        else:\n            pass\n        \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==0:\n            return num\n        else:\n            pass\n        \ndef second_even(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==1:\n            return num\n        else:\n            pass\n        \ndef print_list(nums):\n    '''\n    Write a python function to print a given list of numbers.\n    '''\n    for num in nums:\n        print(num, end=' ')\n    print('\\n')\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return [i for i in nums if i%2!=0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return nums[i]\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    a = 0\n    n = len(nums)\n    while a < n:\n        if nums[a] % 2!= 0:\n            return nums[a]\n        a += 1\n    return nums[a]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # store the sum of the first odd numbers in an array\n    sum = 0\n    # iterate through the given list and find the sum of the first odd numbers\n    for i in range(0,len(nums)):\n        sum += nums[i]\n        # if sum is odd, return the first odd number\n        if sum % 2 == 0:\n            return nums[i]\n        # if sum is even, return the first even number\n        elif sum % 2 == 1:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if len of k is correct\n    if len(test_tup)!= K:\n        return False\n    # Check if all the tuples are in list\n    for index in range(0, len(test_tup)):\n        if test_tup[index] not in test_tup[0:K]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if test_tup in K else False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check = True\n    if len(test_tup) % 2!= 0:\n        check = False\n    else:\n        for i in range(0, len(test_tup), 2):\n            if test_tup[i] == test_tup[i+1]:\n                check = False\n    return check\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[K] in test_tup[:K]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup_K = [t for t in test_tup if t[2] == K]\n    if test_tup_K == []:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = sorted(test_tup)\n    for i in range(K):\n        if test_tup[i] == test_tup[-1-i]:\n            return False\n    return True\n    \n    \ndef find_max_K(test_tup, k):\n    '''\n    Find the k, k must be an integer greater than or equal to 1.\n    '''\n    i = 0\n    while(test_tup[i] < test_tup[i+k]):\n        i += 1\n    return i+1\n    \n    \ndef min_string(test_tup, k):\n    '''\n    Find the k, k must be an integer greater than or equal to 1.\n    '''\n    min_val = test_tup[0]\n    for i in range(1, len(test_tup)):\n        if test_tup[i] < min_val:\n            min_val = test_tup[i]\n    return min_val\n    \n    \ndef find_min_K(test_tup, k):\n    '''\n    Find the k, k must be an integer greater than or equal to 1.\n    '''\n    i = 0\n    while(test_tup[i] < test_tup[i+k]):\n        i += 1\n    return i+1\n    \n    \ndef count_substring(string, sub):\n    '''\n    Return the number of occurrences of sub in string.\n    '''\n    num = 0\n    for i in range(len(string)):\n        if string[i:i+len(sub)] == sub:\n            num += 1\n    return num\n    \n    \ndef main():\n    string, K = input().split()\n    test_tup = list(map(int, input().split()))\n    if check_K(test_tup, K):\n        print(\"True\")\n    else:\n        print(\"False\")\n    print(count_substring(string, 'b'))\n    print(find_max_K(test_tup, K))\n    print(find_min_K(test_tup, K))\n    \n    \nmain()"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup_1 = test_tup\n    count_1 = 0\n    for i in tup_1:\n        if i[1] == K:\n            count_1 += 1\n    if count_1 >= K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) % K!= 0:\n        return False\n    check_Tup = tuple(test_tup[i : i + K] for i in range(0, len(test_tup), K))\n    return check_Tup\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            new_tup = new_tup + (test_tup1[i],)\n        else:\n            new_tup = new_tup + (test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    temp = test_tup1[0]\n    test_tup1[0] = test_tup2[0]\n    test_tup2[0] = temp\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return sorted(test_tup1)[0] < sorted(test_tup2)[0]\n    #Check if sorted lists are equal\n    #Sort lists in the same order\n    #Check if each element of the first list is smaller than it's corresponding element in the second list.\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in test_tup1:\n        if i < test_tup2[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for tup in test_tup1:\n        if len(tup)!= len(test_tup2):\n            return False\n        for i in range(len(tup)):\n            if tup[i] < test_tup2[i]:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if len(test_tup2)!= len(test_tup1):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result += 1\n    if result == len(test_tup1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return False\n    \n    for index, item in enumerate(test_tup1):\n        if test_tup2[index] < item:\n            return False\n    return True\n"
    }
]