[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return test_tup1[0] + test_tup2[0]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared.append(element)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = test_tup1[0]\n    b = test_tup2[0]\n    if a == b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for element in test_tup1:\n        if element in test_tup2:\n            test_tup2.remove(element)\n    return test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    common_elements = set(test_tup1) & set(test_tup2)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set()\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    n = len(test_tup1)\n    m = len(test_tup2)\n    s1 = set()\n    s2 = set()\n    for i in range(0, n):\n        s1.add(test_tup1[i])\n        s2.add(test_tup2[i])\n    return list(s1 & s2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    intersection = set(test_tup1).intersection(test_tup2)\n    return intersection\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create the list of the common elements\n    list1 = []\n    list2 = []\n    # Iterate through each list\n    for index in range(len(test_tup1)):\n        # If elements are found\n        if test_tup1[index] in test_tup2:\n            # Add them to list\n            list1.append(test_tup1[index])\n            list2.append(test_tup2[index])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup3 = test_tup1.intersection(test_tup2)\n    return test_tup3\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not(n % 2 == 0 or n % 3 == 0)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return n < 2 or (n % 2 == 0)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    divisors = []\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n    divisors = list(set(divisors))\n    return len(divisors)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to check for primality.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    for i in range(2,n//d+1):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_2(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_3(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_4(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_5(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_6(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_7(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_8(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return True\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\ndef check_prime(n):\n    '''\n    Given a positive integer n, check if it is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\ndef is_prime(n):\n    '''\n    Given a positive integer n, check if it is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\ndef prime_check(n):\n    '''\n    Given a positive integer n, check if it is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\ndef is_prime_or_not(n):\n    '''\n    Given a positive integer n, check if it is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    elif n==2 or n==3:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    for _ in range(n-1):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # TODO: Write the code that goes with your function\n    return hq.nlargest(n, nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq_data = [(-val,i) for i,val in enumerate(nums)]\n    hq_data.sort(reverse=True)\n    return [item[1] for item in hq_data]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums_length = len(nums)\n    min_heap = []\n    heapq.heapify(min_heap)\n    for i in range(n):\n        if nums_length < n:\n            heapq.heappush(min_heap,nums[i])\n            nums_length += 1\n    return min_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    nums.sort(reverse=True)\n    for i in range(n):\n        heapq.heappush(heap,[-nums[i],nums[i]])\n    while(heap):\n        heapq.heappop(heap)\n    return -heap[0][1]\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums: return 0\n    heap = hq.heapify(nums)\n    length = len(nums)\n    for _ in range(length-1):\n        heapq.heappushpop(heap,heapq.heappop(heap)+heapq.heappop(heap))\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort(reverse=True)\n    print(nums)\n    return nums[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l = []\n    for i in range(n):\n        l.append(nums[i])\n    l.sort()\n    print(l)\n    hq.heapify(l)\n    print(hq.heappop(l))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # start with a random number\n    min_number = min(nums)\n    # put the number in the heap\n    hq.heapify(nums)\n    # iterate while the heap is not empty\n    while len(nums) > 0:\n        # get the first element of the heap\n        next_num = hq.heappop(nums)\n        # check if the next element is the minimum\n        if next_num < min_number:\n            # if so then move to the top of the heap\n            min_number = next_num\n        # put the next element of the heap to the top of the heap\n        hq.heappush(nums, next_num)\n    # return the elements in descending order\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    result = []\n    for j in range(n):\n        if not heapq.heappop(heap):\n            break\n        result.append(-heapq.heappop(heap))\n    return result\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    result = []\n    for j in range(n):\n        if not heapq.heappop(heap):\n            break\n        result.append(-heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # your code goes here\n    return (x & (x-1))!= 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2: \n        return False\n    elif x % 2 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2!= 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x > 0:\n        if x % 2!= 0:\n            return False\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x<2**32):\n        return False\n    else:\n        return True\n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        for i in range(1,x):\n            if x%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x=str(x)\n    if x[0] == x[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Code goes here\n    for i in range(0,len(x)):\n        if x[i] > 0:\n            x[i] = x[i] - 1\n        else:\n            x[i] = x[i] + 1\n    if x[0] == x[1]:\n        return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 10 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    '''\n    x: the number that is to be checked\n    \n    return True if x is greater than 1 and less than 2^32 and not equal to 0\n    \n    '''\n    if x < 0 or x > 2**32 or (x % 2 == 0 and x!= 0): \n        return False\n    else:\n        return True\n    \n    #raise NotImplementedError()\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = []\n    for i in text:\n        if len(i) >= 4:\n            char_long.append(i)\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    characters_long = []\n    for char in text:\n        if len(char) >= 4:\n            characters_long.append(char)\n    return characters_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_split = text.split()\n    word = ''\n    for i in range(len(text_split)):\n        if len(text_split[i]) >= 4:\n            word = word + text_split[i]\n    return word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in text.lower().split() if len(word) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = re.findall(r\"[a-zA-Z]+\", text)\n    for word in word_list:\n        if len(word) < 4:\n            print(word)\n    print('\\n')\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(\"[a-zA-Z]{4,}\", text)\n    for word in words:\n        if len(word) <= 4:\n            # print(\"Found: \" + word + \" with length of \" + str(len(word)))\n            yield word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    count = 0\n    word_list = []\n    for char in text:\n        if(len(char) >= 3):\n            count += 1\n            word_list.append(char)\n        else:\n            pass\n    return word_list, count\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('[a-zA-Z]+',text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_count = 0\n    output = []\n    for word in text.split():\n        if len(word) >= 3 and len(word) <= 7:\n            char_count += 1\n            output.append(word)\n    return char_count, output\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            yield text[i]\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_char_numeric(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_char_symbols(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_digit(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_digits(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_dashes(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_symbols(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_tokens(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_one_word(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_all_word(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_one_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_all_lines(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_line_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            yield text[i]\ndef find_split_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 5:\n            yield text[i]\ndef find_line_split_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            yield text[i]\ndef find_line_splits(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            yield text[i]\ndef find_numeric_only(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_symbols_only(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_long_words(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_long_lines(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_long_lines_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_long_lines_split_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_long_lines_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_long_words_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_symbols_only_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_tokens_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_tokens_split_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_tokens_split_on_new_line_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long i"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n    for num in nums:\n        square_nums.append(num*num)\n    return square_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for i in nums:\n        square_list.append(i ** 2)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        i = i**2\n        print(i)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        if num**2 <= len(nums):\n            square_list.append(num**2)\n        else:\n            pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums.sort()\n    square = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Your code here\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums if x**2 <= 1000]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    squares = []\n    for number in nums:\n        square = number ** 2\n        squares.append(square)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # convert the string to a list of characters\n    string_list = list(str)\n    # The index of the first occurence of a character\n    index = 0\n    # The index of the last occurence of a character\n    length = len(string_list) - 1\n    rotations = []\n    # Iterate through each index and increment to find the number of rotations required\n    for x in range(0, length):\n        if string_list[x] == string_list[index] and x >= index:\n            rotations.append(x - index)\n        index += 1\n    # return the minimum number of rotations\n    return min(rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #initialize\n    count = 0\n    #loop through the string\n    for i in range(len(str)):\n        #if the char is greater than the rotations required\n        if (str[i]>=str[i-1]):\n            #update the count and add one to count\n            count += 1\n    #return the count\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = []\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                rotations.append(j-i)\n    return max(rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            rotations += 1\n    if rotations == 1:\n        return 0\n    else:\n        return rotations \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        if(str[i]==str[i-1]):\n            count+=1\n        else:\n            count=0\n            break\n    return count\n    \n    \ndef find_Rotations_2(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_3(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_4(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_5(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \n    \ndef find_Rotations_6(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \n    \ndef find_Rotations_7(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_8(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_9(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_10(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_11(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_12(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_13(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_14(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_15(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_16(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find_Rotations_17(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i]==str[j]):\n                count+=1\n            else:\n                count=0\n                break\n    return count\n    \n    \ndef find"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # number of rotations\n    rot_count = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    count = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    n = len(str)\n    for i in range(n):\n        temp = rotate_string(str, i, n)\n        if temp == str:\n            rotations += 1\n        else:\n            break\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    index = 0\n    r = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    min_rotations=0\n    rotations_list=[]\n    #Remove any non-digit characters\n    str=str.replace(' ', '')\n    rotations=0\n    for i in range(len(str)-1):\n        if(str[i]>='0' and str[i]<='9'):\n            rotations=rotations+1\n        if(str[i]>='A' and str[i]<='Z'):\n            rotations=rotations+1\n    if(rotations>min_rotations):\n        min_rotations=rotations\n        rotations_list=str\n    return rotations_list,min_rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            occ = occ + 1\n        else:\n            continue\n    return occ\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occur = list(s)\n    occur.remove(ch)\n    occur.pop(len(occur)-1)\n    return ''.join(occur)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    if s[0] == ch and s[-1] == ch:\n        return s[1:-1]\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    if ch in s:\n        s=s.replace(ch,'')\n        \n    if len(s)>0:\n        return s\n    else:\n        print(\"Invalid input\")\n        return -1\n    \ndef remove_vowels(s):\n    '''\n    Write a python function to remove vowels from the given string.\n    '''\n    count=0\n    for x in s:\n        if x in 'AEIOUaeiou':\n            count+=1\n    if count>0:\n        s=s.replace('A','a')\n        s=s.replace('E','e')\n        s=s.replace('I','i')\n        s=s.replace('O','o')\n        s=s.replace('U','u')\n    return s\n    \ndef remove_digits(s):\n    '''\n    Write a python function to remove digits from the given string.\n    '''\n    l=len(s)\n    count=0\n    for x in s:\n        if x in '0123456789':\n            count+=1\n    if count>0:\n        s=s.replace('0','')\n        s=s.replace('1','1')\n        s=s.replace('2','2')\n        s=s.replace('3','3')\n        s=s.replace('4','4')\n        s=s.replace('5','5')\n        s=s.replace('6','6')\n        s=s.replace('7','7')\n        s=s.replace('8','8')\n        s=s.replace('9','9')\n    else:\n        s=s.replace('0','')\n        s=s.replace('1','1')\n        s=s.replace('2','2')\n        s=s.replace('3','3')\n        s=s.replace('4','4')\n        s=s.replace('5','5')\n        s=s.replace('6','6')\n        s=s.replace('7','7')\n        s=s.replace('8','8')\n        s=s.replace('9','9')\n    return s\n    \ndef count_words(s):\n    '''\n    Write a python function to count words from the given string.\n    '''\n    words=0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            words+=1\n    return words\n    \ndef count_letters(s):\n    '''\n    Write a python function to count letters from the given string.\n    '''\n    letters=0\n    for char in s:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            letters+=1\n    return letters\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    while i < len(s):\n        if s[i] == ch:\n            s = s[0:i] + s[i+1:]\n            i = i + 1\n            break\n        i = i + 1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = list(ch)\n    l = len(ch)\n    if l == 0:\n        return\n    print(s.find(ch[0],0,l-1))\n    return remove_Occ(s,ch[0])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        raise ValueError('Character does not exist')\n    if len(s) == 1:\n        return s\n    i = s.index(ch)\n    return s[:i] + s[i+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if length of string is 0, return empty string\n    if len(s)==0:\n        return ''\n    # if char is absent in string, return string\n    if ch not in s:\n        return s\n    # if char present in string, remove that char and return new string\n    s=s.replace(ch,'')\n    return s\n        \ndef remove_space(s,ch): \n    '''\n    Write a python function to remove space character from the string.\n    '''\n    # if string is empty, return empty string\n    if len(s)==0:\n        return ''\n    # if char present in string, remove that char and return new string\n    if ch in s:\n        return s.replace(ch,'')\n    # if char not present in string, return string\n    else:\n        return s\n        \ndef get_string(s,ch):\n    '''\n    Write a python function to get the next substring from the string, if the string is empty, return an empty string.\n    '''\n    # if string is empty, return empty string\n    if len(s)==0:\n        return ''\n    # if char is present in string, return it\n    if ch in s:\n        return s[s.index(ch)+1:]\n    # if char not present in string, return string\n    else:\n        return s\n        \ndef convert_list_to_string(arr):\n    '''\n    Write a python function to convert a list of strings into a string.\n    '''\n    # if string is empty, return empty string\n    if len(arr)==0:\n        return ''\n    # if string is not empty, return string\n    else:\n        return ''.join(arr)\n        \ndef remove_Dup(s): \n    '''\n    Write a python function to remove duplicate characters from a string.\n    '''\n    # if string is empty, return empty string\n    if len(s)==0:\n        return ''\n    # if char is present in string, remove it\n    if 'a' in s:\n        return s.replace('a','')\n    # if char not present in string, return string\n    else:\n        return s\n        \ndef remove_Duplicate(s): \n    '''\n    Write a python function to remove duplicate characters from a string.\n    '''\n    # if string is empty, return empty string\n    if len(s)==0:\n        return ''\n    # if char is present in string, remove it\n    if 'a' in s:\n        return s.replace('a',' ')\n    # if char not present in string, return string\n    else:\n        return s\n        \ndef count_duplicate_ch(s): \n    '''\n    Write a python function to count the number of duplicate characters in a string.\n    '''\n    # if string is empty, return 0\n    if len(s)==0:\n        return 0\n    # if char is present in string, count the occurrence\n    if 'a' in s:\n        return s.count('a')\n    # if char not present in string, return 0\n    else:\n        return 0\n        \ndef is_alpha(ch): \n    '''\n    Write a python function to check if a given character is alpha numeric.\n    '''\n    # if char is present in string, return True\n    if 'a' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n    \ndef is_digit(ch): \n    '''\n    Write a python function to check if a given character is digit.\n    '''\n    # if char is present in string, return True\n    if '0' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_cnt(ch): \n    '''\n    Write a python function to check if a given character is count.\n    '''\n    # if char is present in string, return True\n    if '0' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_vowel(ch): \n    '''\n    Write a python function to check if a given character is vowel.\n    '''\n    # if char is present in string, return True\n    if 'a' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_space(ch): \n    '''\n    Write a python function to check if a given character is space.\n    '''\n    # if char is present in string, return True\n    if'' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_capital(ch): \n    '''\n    Write a python function to check if a given character is capital.\n    '''\n    # if char is present in string, return True\n    if 'a' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_first_last(ch): \n    '''\n    Write a python function to check if a given character is first and last.\n    '''\n    # if char is present in string, return True\n    if 'a' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_next_last(ch): \n    '''\n    Write a python function to check if a given character is next and last.\n    '''\n    # if char is present in string, return True\n    if 'a' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_middle_last(ch): \n    '''\n    Write a python function to check if a given character is middle and last.\n    '''\n    # if char is present in string, return True\n    if 'a' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_last_first(ch): \n    '''\n    Write a python function to check if a given character is last and first.\n    '''\n    # if char is present in string, return True\n    if 'a' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_odd(ch): \n    '''\n    Write a python function to check if a given character is odd.\n    '''\n    # if char is present in string, return True\n    if '0' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_prime(ch): \n    '''\n    Write a python function to check if a given character is prime.\n    '''\n    # if char is present in string, return True\n    if '0' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_prime_or_not(ch): \n    '''\n    Write a python function to check if a given character is prime or not.\n    '''\n    # if char is present in string, return True\n    if '0' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_not(ch): \n    '''\n    Write a python function to check if a given character is not.\n    '''\n    # if char is present in string, return True\n    if '0' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_not_or_not(ch): \n    '''\n    Write a python function to check if a given character is not or not.\n    '''\n    # if char is present in string, return True\n    if '0' in ch:\n        return True\n    # if char not present in string, return False\n    else:\n        return False\n        \ndef is_not_or_not_not(ch): \n    '''\n    Write a python function to check if a given character is not or not or not.\n    '''\n    # if char is presen"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    if l == 0:\n        return -1\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    i = s.index(ch)\n    s[i] = ''\n    s.remove(ch)\n    return ''.join(s)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sum_rows = sum([M[i][0] for i in range(n)])\n    max_sum = max(sum([M[i][j] for i in range(n) for j in range(n) if j > i]))\n    while max_sum!= sum_rows:\n        for i in range(n):\n            for j in range(n):\n                if M[i][j]!= 0:\n                    if M[i][j] >= sum_rows:\n                        for k in range(n):\n                            M[k][j], M[i][k] = M[i][k], M[k][j]\n                        sum_rows = max(sum([M[i][j] for i in range(n) if j > i]))\n        for i in range(n):\n            for j in range(n):\n                if M[i][j]!= 0:\n                    M[i][j] -= sum_rows\n        sum_rows = max_sum\n        max_sum = max(sum([M[i][j] for i in range(n) for j in range(n) if j > i]))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i,len(M)):\n            if M[i][j]==0:\n                pass\n            else:\n                M[i][j]=M[i][j]+M[j][i]\n                M[j][i]=M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    s = 0\n    for i in range(n):\n        s += M[i][0]\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if s == M[i][0] + M[j][0]:\n                s -= M[i][0] + M[j][0]\n                M[i][0] = 0\n                M[j][0] = 0\n    for i in range(n):\n        M[i][0] = 0\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if M[j][0] > M[j+1][0]:\n                M[j],M[j+1] = M[j+1],M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = lambda x: x[0])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    for i in range(len(M)):\n        sorted_row = []\n        for j in range(len(M[i])):\n            sorted_row.append(M[i][j])\n        sorted_row.sort()\n        sorted_matrix.append(sorted_row)\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort rows in ascending order\n    M = sorted(M, key = lambda x : x[0])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            if M[i][j] == 0:\n                continue\n            for k in range(len(M)):\n                if M[k][j]!= 0 and k!= i:\n                    M[k][j] = M[i][j]\n                    M[i][j] = 0\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for r in range(len(M)):\n        for c in range(len(M[r])):\n            if M[r][c] == 0:\n                M[r][c] = float(\"inf\")\n    return sorted(M, key=lambda x: sum(x), reverse=True)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    matrix = []\n    n = len(M[0])\n    i = 0\n    while i<m:\n        if (M[i][n-1]==-1):\n            n-=1\n        if (M[i][n-2]==-1):\n            i+=1\n        elif (M[i][n-1]!=0):\n            matrix.append([M[i][n-1],n-1])\n            i+=1\n        elif (M[i][n-2]!=0):\n            matrix.append([M[i][n-2],n-1])\n            i+=1\n        else:\n            i+=1\n    for row in matrix:\n        row.sort()\n    return matrix\ndef find_empty_square(M):\n    '''\n    Write a function to find the index of an empty square.\n    '''\n    for i in range(0,len(M)):\n        for j in range(0,len(M[0])):\n            if (M[i][j]==-1):\n                return i,j\n    return -1\ndef find_path(M,x,y):\n    '''\n    Write a function to find the path from (x,y) to (x,y).\n    '''\n    if x == y:\n        return [[x,y]]\n    elif y==0:\n        return [[x,y],[x,y+1]]\n    elif x==0:\n        return [[x,y],[x+1,y]]\n    elif M[x][y]!=-1:\n        return M[x][y][0]\n    elif x<0 or y<0:\n        return []\n    elif M[x][y]==-1:\n        M[x][y] = find_path(M,x,y-1)\n        return M[x][y][0]\n    elif M[x][y]==-1:\n        M[x][y] = find_path(M,x-1,y)\n        return M[x][y]\n    elif M[x][y]==-1:\n        M[x][y] = find_path(M,x+1,y)\n        return M[x][y]\n    else:\n        M[x][y] = find_path(M,x,y-1)\n        M[x][y] = find_path(M,x,y+1)\n        M[x][y] = M[x][y][0]\n        return M[x][y]\ndef find_path_length(M,x,y):\n    '''\n    Write a function to return the length of the path from (x,y) to (x,y).\n    '''\n    length = 0\n    while (x!=y):\n        x,y = find_empty_square(M)\n        length += 1\n    return length\ndef solve_path(M,x,y):\n    '''\n    Write a function to solve the path from (x,y) to (x,y).\n    '''\n    path = []\n    while (x!=y):\n        path.append(y)\n        x,y = find_empty_square(M)\n        path.append(x)\n    return path[::-1]\ndef print_path(M,path):\n    '''\n    Print the path from (x,y) to (x,y).\n    '''\n    for y in range(0,len(M)):\n        for x in range(0,len(M[0])):\n            if (M[x][y]!=-1):\n                M[x][y] = M[x][y][0]\n                print(M[x][y],\" \",end=\"\")\n            else:\n                print(M[x][y],\" \",end=\"\")\n        print(\"\")\n    for p in path:\n        print(p,end=\"\")\ndef find_parent(parent,x):\n    '''\n    Find the parent of node (x).\n    '''\n    if (parent[x]!=-1):\n        return parent[x]\n    else:\n        return find_parent(parent,x-1)\ndef union(parent,a,b):\n    '''\n    Find the union of two nodes (a,b).\n    '''\n    a = find_parent(parent,a)\n    b = find_parent(parent,b)\n    if (a<b):\n        parent[a] = b\n    elif (a>b):\n        parent[b] = a\n    return True\ndef find_cliques(M):\n    '''\n    Find the cliques.\n    '''\n    n = len(M)\n    parent = [-1 for i in range(n)]\n    clique = []\n    for i in range(n):\n        clique.append([])\n    for i in range(n):\n        for j in range(i,n):\n            if (M[i][j]!=-1):\n                clique[M[i][j][0]].append(i)\n                clique[M[i][j][0]].append(j)\n            else:\n                union(parent,i,j)\n    clique = sorted(clique,key = lambda x: len(x),reverse=True)\n    return clique\ndef print_cliques(M,clique):\n    '''\n    Print the cliques.\n    '''\n    for i in range(len(clique)):\n        for j in range(len(clique[0])):\n            print(clique[i][j],end=\" \")\n        print()\ndef dfs_recursive(M,start,parent):\n    '''\n    Find all the cliques and return the cliques.\n    '''\n    M[start[0]][start[1]]=-1\n    for i in range(len(parent)):\n        if (parent[i]==start[0] and M[start[0]][start[1]]==-1):\n            dfs_recursive(M,i,parent)\n    return\ndef dfs(M,start,parent):\n    '''\n    Find all the cliques and return the cliques.\n    '''\n    dfs_recursive(M,start,parent)\n    return\ndef dfs_iterative(M,start,parent):\n    '''\n    Find all the cliques and return the cliques.\n    '''\n    stack = []\n    stack.append(start)\n    while(len(stack)):\n        i = stack.pop()\n        for j in range(len(parent[i])):\n            if (parent[i][j]==start[0] and M[i][j]==-1):\n                parent[i][j] = start[1]\n                dfs_recursive(M,i,parent)\n                break\n            elif (parent[i][j]==start[1]):\n                parent[i][j] = start[0]\n                dfs_recursive(M,j,parent)\n                break\n        else:\n            stack.append(i)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = []\n    for i in range(len(M)):\n        S.append(sum(M[i]))\n    return S\n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = b*b\n    b = h/2\n    h = (b-a)*math.pi/2\n    volume = (4/3)*(a*b*math.pi)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def volume(l,b,h) : \n        # volume formula \n        return l*h*(b*b - 4*l*h*b)\n    # find the volume of the triangle\n    return volume(l,b,h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def side_length(l,b,h) : \n        '''\n        Create the length of the sides.\n        '''\n        return (l+b+h) * 0.5\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return abs(l * b * h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # your code goes here\n    return (b*b) - 4*h*h\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Step 1 : Calculate the base height of the prism: b\n    base_height = 0\n    for i in range(h) :\n        base_height += b\n    # Step 2 : Calculate the height of the upper left corner of the prism: l\n    for i in range(l-1) :\n        base_height += b\n    # Step 3 : Calculate the height of the upper right corner of the prism: h\n    for i in range(h-b) :\n        base_height += b\n    # Step 4 : Calculate the volume of the prism: v\n    volume = (l*base_height)*h\n    # Step 5 : Return the volume\n    return volume\n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # base case:\n    if l == 0 :\n        return 0\n    # recurrence relation:\n    # Volume = l^3\n    # Volume = l^3 + b^3 + (h/2)^3\n    return (l**3 + b**3 + (h/2))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    try : \n        r = l / 2\n        c = b / 2\n        h = h / 2\n        a = sqrt(r**2 + c**2 + h**2)\n        volume = 4 * pi * a**2\n        return volume\n    except Exception as e :\n        return 0\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    n = int(l/b)\n    volume = (b**3)*(4*h**3)\n    \n    for i in range(0,n) : \n        volume = volume + (4*h**3)*(l**3)\n        if i<n-1 : \n            volume = volume + (b**3)*(2*l**2)\n            \n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match('(^[a-zA-Z_][a-zA-Z0-9_]*)', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-zA-Z][A-Z]*_'\n    \n    matches = re.findall(pattern, text)\n    \n    return len(matches) > 0 and matches[0].islower() and matches[0].isupper()\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]')\n    lowercase = pattern.findall(text)\n    underscore = pattern.findall(text.lower())\n    if lowercase and underscore:\n        return True\n    return False\ndef is_number(value):\n    '''\n    Returns true if the value is a number.\n    '''\n    return ''.join(filter(str.isdigit, value)).isdigit()\ndef is_alpha(value):\n    '''\n    Returns true if the value is an alphabet.\n    '''\n    return ''.join(filter(str.isalpha, value)).isalpha()\ndef check_email(email):\n    '''\n    Checks if the email address contains an '@' and '.'.\n    '''\n    return '@' in email and '.' in email\ndef make_valid_email(email):\n    '''\n    Checks if the email address contains an '@' and '.'.\n    Returns True if the email is valid and False if the email contains errors.\n    '''\n    if not is_alpha(email):\n        return False\n    if not is_number(email):\n        return False\n    if not text_lowercase_underscore(email):\n        return False\n    return True\ndef check_password(password):\n    '''\n    Checks if the password is a valid password.\n    '''\n    return len(password) >= 8 and len(password) <= 50\ndef validate_password(password):\n    '''\n    Returns True if the password is valid and False if it is invalid.\n    '''\n    if not check_password(password):\n        return False\n    if not check_email(password):\n        return False\n    if not check_password(password):\n        return False\n    return True\ndef validate_email(email):\n    '''\n    Returns True if the email is valid and False if it is invalid.\n    '''\n    return make_valid_email(email)\ndef validate_login(username, password):\n    '''\n    Returns True if the username and password are valid and False if it is invalid.\n    '''\n    if not username or not password:\n        return False\n    return validate_password(password) and validate_email(username)\ndef check_username(username):\n    '''\n    Returns True if the username is valid and False if it is invalid.\n    '''\n    if not username:\n        return False\n    return True\ndef check_password_credentials(username, password):\n    '''\n    Checks if the username and password are valid and False if they are invalid.\n    '''\n    if not username or not password:\n        return False\n    if not check_username(username):\n        return False\n    return True\ndef password_generator(length=10):\n    '''\n    Returns a password for the specified length.\n    '''\n    return ''.join(random.choice(string.ascii_letters) for x in range(length))\ndef password_hashing(password):\n    '''\n    Returns a hashed password.\n    '''\n    hashed = password.lower()\n    hashed_password = ''\n    for char in hashed:\n        if char.isdigit():\n            hashed_password += '0'\n        elif char.isalpha():\n            hashed_password += '1'\n        else:\n            hashed_password += char\n    return hashed_password\ndef check_hashed_password(password, hashed_password):\n    '''\n    Checks if the hashed password matches the password.\n    '''\n    if not hashed_password:\n        return False\n    if not is_password(password) or not is_password(hashed_password):\n        return False\n    return True\ndef main():\n    '''\n    1. Automatically set the password length to 10.\n    2. Automatically change the password to 'password'.\n    3. Check password or password hash.\n    4. Check email and password.\n    5. Check username and password.\n    6. Check that the password contains an '@' and '.'.\n    7. Check that the password contains numbers.\n    8. Check that the password contains letters.\n    9. Check that the password contains a total of 5 characters.\n    10. Check that the password contains a total of 15 characters.\n    11. Check that the password contains a total of 18 characters.\n    12. Check that the password contains a total of 25 characters.\n    13. Check that the password contains a total of 26 characters.\n    14. Check that the password contains a total of 28 characters.\n    15. Check that the password contains a total of 29 characters.\n    16. Check that the password contains a total of 32 characters.\n    17. Check that the password contains a total of 33 characters.\n    18. Check that the password contains a total of 34 characters.\n    19. Check that the password contains a total of 36 characters.\n    20. Check that the password contains a total of 37 characters.\n    21. Check that the password contains a total of 38 characters.\n    22. Check that the password contains a total of 39 characters.\n    23. Check that the password contains a total of 40 characters.\n    24. Check that the password contains a total of 41 characters.\n    25. Check that the password contains a total of 42 characters.\n    26. Check that the password contains a total of 43 characters.\n    27. Check that the password contains a total of 44 characters.\n    28. Check that the password contains a total of 45 characters.\n    29. Check that the password contains a total of 46 characters.\n    30. Check that the password contains a total of 47 characters.\n    31. Check that the password contains a total of 48 characters.\n    '''\n    print('Password length = {}'.format(10))\n    print('Check for password!')\n    print('Password:')\n    print(password_generator())\n    print('Password hashed:')\n    print(password_hashing(password_generator()))\n    print('Password hash:')\n    print(password_hashing(password_generator()))\n    print('Username and password:')\n    print(check_username('mehfhjkfg'))\n    print(check_password('password'))\n    print('Password hash:')\n    print(check_password_credentials('mehfhjkfg', 'password'))\n    print('Password hashed:')\n    print(check_password_credentials('mehfhjkfg', password_hashing('password')))\n    print('Email and password:')\n    print(check_email('email@domain.com'))\n    print(check_password('password'))\n    print('Password hash:')\n    print(check_password_credentials('email@domain.com', 'password'))\n    print('Password hashed:')\n    print(check_password_credentials('email@domain.com', password_hashing('password')))\n    print('Username and password:')\n    print(check_username('mehfhjkfg'))\n    print(check_password('password'))\n    print('Password hash:')\n    print(check_password_credentials('mehfhjkfg', 'password'))\n    print('Password hashed:')\n    print(check_password_credentials('mehfhjkfg', password_hashing('password')))\n    print('Email and password:')\n    print(check_email('email@domain.com'))\n    print(check_password('password'))\n    print('Password hash:')\n    print(check_password_credentials('email@domain.com', 'password'))\n    print('Password hashed:')\n    print(check_password_credentials('email@domain.com', password_hashing('password')))\n    print('Username and password:')\n    print(check_username('mehfhjkfg'))\n    print(check_password('password'))\n    print('Password hash:')\n    print(check_password_credentials('mehfhjkfg', 'password'))\n    print('Password hashed:')\n    print(check_password_credentials('mehfhjkfg', password_hashing('password')))\n    print('Email and password:')\n    print(check_email('email@domain.com'))\n    print(check_password('password'))\n    print('Password hash:')\n    print(check_password_credential"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if len(text) == 0 or text[0] == \"_\":\n        return False\n    count = 0\n    for char in text:\n        if char == \"_\":\n            count += 1\n    if count == 1 and len(text) > 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text.count('_')!= 0:\n        return False\n    elif len(text) == 0:\n        return False\n    elif text.isalpha():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    new_text=''\n    text_split=text.split(\"_\")\n    for word in text_split:\n        new_text+=word+\" \"\n    text_split=re.split('(\\W)',new_text)\n    for word in text_split:\n        if not(word.isalpha()):\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return '_' in text\n    #pass\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text)==0:\n        return True\n    if text.find(' ')!=len(text)-1 or len(text)>100:\n        return False\n    pattern = r'[^A-Za-z0-9_]'\n    for i in range(len(text)):\n        if pattern.search(text[i]):\n            return False\n    return True\ndef main():\n    '''\n    Write a function that takes a string and checks if it contains any sequence of the form: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.\n    '''\n    assert text_lowercase_underscore('Hip-Hop')==True, 'Hip-Hop should be a lowercase word'\n    assert text_lowercase_underscore('___')==False, '___ should not be a lowercase word'\n    assert text_lowercase_underscore('lama-lama')==True, 'lama-lama should be a lowercase word'\n    assert text_lowercase_underscore('Kurts-Club')==False, 'Kurts-Club should not be a lowercase word'\n    assert text_lowercase_underscore('soh-soh')==True,'soh-soh should be a lowercase word'\n    assert text_lowercase_underscore('y-name')==False, 'y-name should not be a lowercase word'\n    assert text_lowercase_underscore('jE-a-o-p-m-o-s-r-u-l-y-r-o-r-s-h-i-n-e-t-t-i-e-n-e-t-t-e-r-i-e-r-u-r-t-i-r-n-r-s-r-s-t-t-r-u-t-a-l-o-r-t-r-u-t-r-n-r-u-r-t-s-r-t-t-s-r-t-t-o-n-r-a-l-a-r-a-o-r-t-a-t-a-r-a-n-a-r-a-t-r-t-a-a-t-a-n-e-i-a-i-a-r-t-i-a-a-t-o-n-r-a-t-o-t-a-a-n-e-t-t-t-i-t-t-t-i-t-t-t-o-r-t-t-t-r-t-t-a-t-t-r-a-r-t-a-r-a-t-r-a-t-t-r-t-t-t-r-t-t-t-t-r-t-t-t-r-t-t-t-t-t-t-t-t-t-t-t-t-r-t-t-t-t-t-t-t-t-t-t-t-t-t-r-t-t-t-t-r-t-t-r-t-t-r-t-t-t-t-t-t-t-t-t-t-t-t-t-r-t-r-t-r-t-r-r-t-r-t-t-t-r-t-t-r-t-r-t-r-t-r-t-r-t-r-r-t-r-t-r-t-t-t-r-r-r-t-r-r-r-r-t-r-t-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-r-"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return ''.join(c.lower() if c.isalpha() else c for c in re.findall(r'[a-zA-Z0-9]+', text)) in text\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern_lowercase_underscore = re.compile('[A-Z][a-z]{1,}')\n    pattern_lowercase_underscore_for_lowercase = re.compile('[a-z][A-Z]{1,}')\n    pattern_lowercase_underscore_for_punctuation = re.compile('[0-9]{1,}[A-Z][a-z]{1,}')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*4)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4/3)*a*(a**2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4\n    for i in range(0,a):\n        perimeter = perimeter + (i * a)\n    print(perimeter)\n    \nsquare_perimeter(4)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    sq_per = int(a**0.5)\n    return sq_per\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a) == int:\n        a = [a]\n    else:\n        a = list(a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a**2 * 4)\n    \nprint(square_perimeter(5))\nprint(square_perimeter(3))\nprint(square_perimeter(1))\nprint(square_perimeter(0))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int:\n        raise TypeError('The a parameter must be an integer')\n    elif a < 0:\n        raise ValueError('The side length must be greater than zero')\n    else:\n        return a**2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    list_string = []\n    for i in range(len(string)):\n        if (string[i]!='') and (string[i]!= ',') and (string[i]!= ')'):\n            list_string.append(string[i])\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char in string:\n            new_string += char\n    return new_string\ndef list_to_str(list):\n    '''\n    Write a function to convert the list to a string.\n    '''\n    str_list = \"\"\n    for i in list:\n        str_list += i\n    return str_list\ndef split_into_strings(string):\n    '''\n    Write a function to split a string into a list of words.\n    '''\n    new_list = []\n    for char in string:\n        if char.isalpha():\n            new_list.append(char)\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Using regular expressions.\n    list_string = []\n    for element in string: \n        if element in string: \n            list_string.append(element)\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i in string:\n            list.append(i)\n    print(list)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = []\n    for i in string:\n        if i not in new_string:\n            new_string.append(i)\n    return new_string\ndef get_index(index_str, string):\n    '''\n    Get the index of string at the given index_str.\n    '''\n    for i in range(len(string)):\n        if string[i] == index_str:\n            return i\ndef find_all(string, index_str):\n    '''\n    Returns a list of all substrings which starts with string[index_str].\n    '''\n    new_str = str_to_list(string)\n    index_list = []\n    for i in range(len(new_str)):\n        if new_str[i] == index_str:\n            index_list.append(i)\n    return index_list\ndef get_str_indices(string):\n    '''\n    Return a list of indices in the string where the first occurrence of a character is present.\n    '''\n    new_str = str_to_list(string)\n    index_list = []\n    for i in range(len(new_str)):\n        if new_str[i] == new_str[i-1]:\n            index_list.append(i)\n    return index_list\ndef replace_string(string, index_str, string_new):\n    '''\n    Replace the character at the index_str with string_new.\n    '''\n    new_str = str_to_list(string)\n    for i in range(len(string)):\n        if string[i] == index_str:\n            new_str[i] = string_new\n    return new_str\ndef get_len(string):\n    '''\n    Get the length of the string.\n    '''\n    new_str = str_to_list(string)\n    return len(new_str)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list()\n    for i in string:\n        if i in string:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.replace(string[0], '').split()\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    \n    \n    #Write your code here.\n    l = []\n    for char in string:\n        if char not in l:\n            l.append(char)\n    return l\n    \n    \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    finalList = []\n    for x in range(0, len(string), 1):\n        if string[x] in string[0:x]:\n            finalList.append(string[x])\n    return finalList\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    i = 0\n    while i < len(arraynums) - 1:\n        if arraynums[i] == arraynums[i + 1]:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # write your code here\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    count = []\n    for num in arraynums:\n        count.append(arraynums.count(num))\n    \n    if len(set(count))>1:\n        print('duplicate')\n    else:\n        print('no duplicate')\n    \nif __name__ == '__main__':\n    arraynums = [1,1,1,2,2,3,3,3]\n    test_duplicate(arraynums)\n    arraynums = [0,0,0,0,0]\n    test_duplicate(arraynums)\n    arraynums = [0,0,0,0]\n    test_duplicate(arraynums"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # Write your code here\n    return any(x in arraynums for x in arraynums)\n    \ndef test_all_permutations(nums):\n    '''\n    Write a function that returns all possible permutations of the given numbers.\n    '''\n    # Write your code here\n    return [''.join(x) for x in permutations(nums, len(nums))]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert is_duplicate(arraynums) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # A set of duplicates, which have the same number of duplicates\n    set_of_dups = set()\n    # For each element\n    for num in arraynums:\n        # Count the number of duplicates\n        # This is the same as finding the number of duplicate elements in the given array\n        counter = 0\n        for i in range(len(arraynums)):\n            if num == arraynums[i]:\n                counter += 1\n        # If the number of duplicates is not zero\n        if counter!= 0:\n            # Only add the duplicates to the set if they are not duplicates\n            # If a duplicate occurs, then they need to be repeated\n            # as many times as there are in the list\n            if num not in set_of_dups:\n                set_of_dups.add(num)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate_list = [arraynums[i] for i in range(len(arraynums)) if arraynums[i] not in arraynums]\n    return len(duplicate_list) == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0 \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    try:\n        if x % 2 == 0:\n            return False\n        else:\n            return True\n    except Exception as e:\n        print(e)\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    is_woodall = True\n    if x > 200:\n        is_woodall = False\n    return is_woodall\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 7\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        print(\"The given number is woodball.\")\n        return True\n    else:\n        print(\"The given number is not woodball.\")\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x < 20 and x > 10\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_woodball(x):\n        if x == 0:\n            return \"no\"\n        if x == 1:\n            return \"yes\"\n        else:\n            return \"no\"\n    return is_woodball(x)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 1 or x == 3\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == x*(x-1)//2\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num - (num * 2)    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str_num = str(num)\n    for i in range(len(str_num)):\n        str_num = str_num[:i] + str(num)[i] + str_num[i+1:]\n        \n    if int(str_num) < 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = int(num)\n    reverse = 0\n    while num > 0:\n        dig = num%10\n        num = num//10\n        reverse = reverse*10 + dig\n    if reverse == num:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev1 = num * 2\n    rev2 = num - 1\n    if (num == rev1 or num == rev2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > rev_num:\n        rev_num = rev_num * 2\n    return rev_num"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revNum = 0\n    revNum = num * -1\n    if (revNum) % 2 == 0:\n        print('It is a positive number. ')\n    else:\n        print('It is not a positive number. ')\n    return (num)\n    \n    \ndef numNegatives(num):    \n    '''\n    Write a python function to check if a given number is a negative number.\n    '''\n    negNum = 0\n    negNum = num * -1\n    if (negNum) % 2 == 0:\n        print('It is a negative number. ')\n    else:\n        print('It is not a negative number. ')\n    return (num)\n    \n    \ndef numEven(num):    \n    '''\n    Write a python function to check if a given number is even number.\n    '''\n    evenNum = 0\n    evenNum = num * -1\n    if (evenNum) % 2 == 0:\n        print('It is a even number. ')\n    else:\n        print('It is not a even number. ')\n    return (num)\n    \n    \ndef numOdd(num):    \n    '''\n    Write a python function to check if a given number is odd number.\n    '''\n    oddNum = 0\n    oddNum = num * -1\n    if (oddNum) % 2 == 1:\n        print('It is an odd number. ')\n    else:\n        print('It is not an odd number. ')\n    return (num)\n    \n    \ndef numFactor(num, factor):    \n    '''\n    Write a python function to check if a given number is multiple of a given factor.\n    '''\n    factorNum = 0\n    factorNum = num * -1\n    if (factorNum) % factor == 0:\n        print('It is a multiple of a factor. ')\n    else:\n        print('It is not a multiple of a factor. ')\n    return (num)\n    \n    \ndef numTriplets(num):    \n    '''\n    Write a python function to find the triplets of a given number.\n    '''\n    tripletNum = 0\n    tripletNum = num * -1\n    if (tripletNum) % 3 == 0:\n        print('It is a triplet. ')\n    else:\n        print('It is not a triplet. ')\n    return (num)\n    \n    \ndef maxSumDivisors(num):    \n    '''\n    Write a python function to find the maximum sum of the numbers in a given range.\n    '''\n    sum = 0\n    sum = num * -1\n    if (sum) % 2 == 0:\n        print('It is a sum of positive numbers. ')\n    else:\n        print('It is not a sum of positive numbers. ')\n    return (sum)\n    \n    \ndef divisibleSumPairs(a, b):    \n    '''\n    Write a python function to find the number of pairs of numbers in a given array.\n    '''\n    pairs = 0\n    for i in range(a):\n        for j in range(i + 1, b):\n            if (i + j) % 2 == 1:\n                pairs = pairs + 1\n    return (pairs)\n    \n    \ndef maxSum(num):    \n    '''\n    Write a python function to find the maximum sum of a given array.\n    '''\n    maxNum = 0\n    for i in range(num):\n        if num[i] > maxNum:\n            maxNum = num[i]\n    return (maxNum)\n    \n    \ndef rangeSum(num):    \n    '''\n    Write a python function to find the sum of a given array.\n    '''\n    sum = 0\n    for i in range(num):\n        sum = sum + num[i]\n    return (sum)\n    \n    \ndef sumRange(num):    \n    '''\n    Write a python function to find the sum of a given array.\n    '''\n    sum = 0\n    for i in range(len(num)):\n        sum = sum + num[i]\n    return (sum)\n    \n    \ndef sumRangeRange(num):    \n    '''\n    Write a python function to find the sum of a given array.\n    '''\n    sum = 0\n    for i in range(num):\n        for j in range(i + 1, num):\n            sum = sum + num[j]\n    return (sum)\n    \n    \ndef sumRangeDiff(num, low, high):    \n    '''\n    Write a python function to find the difference of a given array.\n    '''\n    sum = 0\n    for i in range(low, high):\n        sum = sum + num[i]\n    return (sum)\n    \n    \ndef sumRangeDiffRange(num, low, high):    \n    '''\n    Write a python function to find the difference of a given array.\n    '''\n    sum = 0\n    for i in range(low, high):\n        for j in range(i + 1, num):\n            sum = sum + num[j]\n    return (sum)\n    \n    \ndef maxSubArray(num):    \n    '''\n    Write a python function to find the largest contiguous subarray with sum less than or equal to a given number.\n    '''\n    maxNum = num * -1\n    for i in range(num):\n        if num[i] < 0:\n            maxNum = num[i]\n    return (maxNum)\n    \n    \ndef reverseRange(num):    \n    '''\n    Write a python function to find the first contiguous range with sum less than a given number.\n    '''\n    start = 0\n    end = num * -1\n    for i in range(num):\n        if num[i] < 0:\n            start = i\n        if i >= num:\n            end = i\n    if start == 0:\n        print('This is a negative number. ')\n    else:\n        print('This is a positive number. ')\n    return (start, end)\n    \n    \ndef duplicateZero(num):    \n    '''\n    Write a python function to find the number of repeated numbers.\n    '''\n    count = 0\n    for i in range(num):\n        if num[i] == 0:\n            count += 1\n    return (count)\n    \n    \ndef maxCount(num):    \n    '''\n    Write a python function to find the number of repeated numbers.\n    '''\n    count = 0\n    for i in range(num):\n        if num[i] == 0:\n            count += 1\n    return (count)\n    \n    \ndef minCount(num):    \n    '''\n    Write a python function to find the number of repeated numbers.\n    '''\n    count = 0\n    for i in range(num):\n        if num[i]!= 0:\n            count += 1\n    return (count)\n    \n    \ndef maxProduct(num):    \n    '''\n    Write a python function to find the largest power of a given number.\n    '''\n    maxNum = num * -1\n    for i in range(num):\n        if num[i] > maxNum:\n            maxNum = num[i]\n    return (maxNum)\n    \n    \ndef minProduct(num):    \n    '''\n    Write a python function to find the smallest power of a given number.\n    '''\n    minNum = num * -1\n    for i in range(num):\n        if num[i] < minNum:\n            minNum = num[i]\n    return (minNum)\n    \n    \ndef maxProductRange(num):    \n    '''\n    Write a python function to find the largest power of a given number.\n    '''\n    maxNum = num * -1\n    for i in range(num):\n        for j in range(i + 1, num):\n            if num[i] > maxNum:\n                maxNum = num[i]\n    return (maxNum)\n    \n    \ndef minProductRange(num):    \n    '''\n    Write a python function to find the smallest power of a given number.\n    '''\n    minNum = num * -1\n    for i in range(num):\n        for j in range(i + 1, num):\n            if num[i] < minNum:\n                minNum = num[i]\n    return (minNum)\n    \n    \ndef maxProductRangeRange(num)"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = num\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    while rev > 1:\n        # print(\"rev = \",rev)\n        # print(\"num = \",num)\n        rev = rev//2\n        # print(\"rev = \",rev)\n        # print(\"num = \",num)\n        # print(\"rev = \",rev)\n        if rev == 0:\n            return False\n        if rev == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #create reverse() function to reverse a given number\n    reverse = []\n    reverse.append(num)\n    num_rev = reverse[-2]\n    #check if the number is less than twice its reverse\n    if num_rev == 0:\n        return True\n    else:\n        if num_rev < 0:\n            return False\n        else:\n            return rev(num_rev)\n        "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num == 0):\n        return 0\n    else:\n        return num * rev(num-1)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > max : \n            max = arr[i]\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    i=0\n    num=arr[0]\n    # print(num)\n    \n    for i in range(len(arr)):\n        if(arr[i]>num):\n            num=arr[i]\n    print(num)\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_set = set(arr)\n    if len(num_set) == 1 : \n        return max(arr)\n    else : \n        for i in range(len(arr) - 1) : \n            num = arr[i]\n            for j in range(i + 1, len(arr)) : \n                num = num * 10 + arr[j]\n                if num not in num_set : \n                    num_set.add(num)\n        return max(num_set)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    number = 1\n    max_num = 0\n    nums = []\n    for i in range(len(arr)) :\n        nums.append(number)\n        number += 1\n        if number > max_num :\n            max_num = number\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    temp_arr = []\n    temp_arr.extend(arr)\n    result = None\n    maximum = -1\n    for i in temp_arr : \n        if(i == maximum):\n            pass\n        else:\n            maximum = i\n            temp_arr.remove(i)\n    return maximum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = -1\n    for i in range(len(arr)):\n        if arr[i] > Max_Num:\n            Max_Num = arr[i]\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    largest = 0\n    for i in range(n):\n        rem = arr[i]\n        for j in range(i+1,n):\n            rem = arr[j]\n            if rem>=largest:\n                largest = rem\n            elif rem==largest:\n                if rem in arr:\n                    arr.remove(rem)\n                    arr.insert(j,largest)\n                    return arr\n                else:\n                    arr.remove(largest)\n                    arr.append(largest)\n                    return arr\n    print('Cannot find a single largest number')\n    return arr\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = max(arr)\n    #print(num)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] > num:\n                #print(i)\n                num = arr[i]\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n=len(arr)\n    if n==0:\n        return 0\n    i=0\n    largest=0\n    while i<n:\n        current=arr[i]\n        j=i+1\n        while j<n:\n            if arr[j]>current:\n                j+=1\n            else:\n                current=arr[j]\n                break\n        i=j\n        if current>largest:\n            largest=current\n    return largest\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -1\n    for i in range(len(arr)) : \n        for j in range(i, len(arr)) : \n            num = arr[j] \n            if num > max : \n                max = num \n                \n    return max \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        print(\"false\")\n    elif x < 0 and y < 0:\n        print(\"false\")\n    elif x > 0 and y > 0:\n        print(\"true\")\n    elif x > 0 and y < 0:\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>y) - (x<y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        x,y = y,x\n    if y < x:\n        x,y = y,x\n    if x == y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    if x < y:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        x, y = y, x\n    if y == -x:\n        y = -y\n    return y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    try:\n        opposite = str(x) + str(y)\n        return opposite[::-1]\n    except:\n        return \"The given arguments are not int\"\n    #return opposite.swapcase()\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0) \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -x+y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    signs = [\"+\", \"-\"]\n    if x == y:\n        return \"Both numbers are equal\"\n    if signs[x % 2] == signs[y % 2]:\n        return \"Both numbers are equal\"\n    else:\n        return \"No opposite sign\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return 'O'\n    elif x < y:\n        return 'X'\n    else:\n        return 'X'\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 225\n    if n == 16:\n        return 256\n    if n == 17:\n        return 289\n    if n == 18:\n        return 324\n    if n == 19:\n        return 329\n    if n == 20:\n        return 336\n    if n == 21:\n        return 351\n    if n == 22:\n        return 364\n    if n == 23:\n        return 379\n    if n == 24:\n        return 424\n    if n == 25:\n        return 449\n    if n == 26:\n        return 465\n    if n == 27:\n        return 476\n    if n == 28:\n        return 491\n    if n == 29:\n        return 504\n    if n == 30:\n        return 521\n    if n == 31:\n        return 554\n    if n == 32:\n        return 599\n    if n == 33:\n        return 614\n    if n == 34:\n        return 631\n    if n == 35:\n        return 656\n    if n == 36:\n        return 691\n    if n == 37:\n        return 712\n    if n == 38:\n        return 723\n    if n == 39:\n        return 759\n    if n == 40:\n        return 794\n    if n == 41:\n        return 809\n    if n == 42:\n        return 824\n    if n == 43:\n        return 861\n    if n == 44:\n        return 896\n    if n == 45:\n        return 909\n    if n == 46:\n        return 924\n    if n == 47:\n        return 961\n    if n == 48:\n        return 996\n    if n == 49:\n        return 1021\n    if n == 50:\n        return 1054\n    if n == 51:\n        return 1099\n    if n == 52:\n        return 1114\n    if n == 53:\n        return 1149\n    if n == 54:\n        return 1184\n    if n == 55:\n        return 1211\n    if n == 56:\n        return 1225\n    if n == 57:\n        return 1260\n    if n == 58:\n        return 1297\n    if n == 59:\n        return 1315\n    if n == 60:\n        return 1350\n    if n == 61:\n        return 1385\n    if n == 62:\n        return 1410\n    if n == 63:\n        return 1425\n    if n == 64:\n        return 1460\n    if n == 65:\n        return 1485\n    if n == 66:\n        return 1510\n    if n == 67:\n        return 1525\n    if n == 68:\n        return 1570\n    if n == 69:\n        return 1595\n    if n == 70:\n        return 1610\n    if n == 71:\n        return 1625\n    if n == 72:\n        return 1670\n    if n == 73:\n        return 1695\n    if n == 74:\n        return 1710\n    if n == 75:\n        return 1725\n    if n == 76:\n        return 1760\n    if n == 77:\n        return 1785\n    if n == 78:\n        return 1810\n    if n == 79:\n        return 1825\n    if n == 80:\n        return 1870\n    if n == 81:\n        return 1895\n    if n == 82:\n        return 1921\n    if n == 83:\n        return 1922\n    if n == 84:\n        return 2025\n    if n == 85:\n        return 2170\n    if n == 86:\n        return 2265\n    if n == 87:\n        return 2310\n    if n == 88:\n        return 2325\n    if n == 89:\n        return 2360\n    if n == 90:\n        return 2385\n    if n == 91:\n        return 2410\n    if n == 92:\n        return 2425\n    if n == 93:\n        return 2470\n    if n == 94:\n        return 2495\n    if n == 95:\n        return 2510\n    if n == 96:\n        return 2525\n    if n == 97:\n        return 2560\n    if n == 98:\n        return 2585\n    if n == 99:\n        return 2610\n    if n == 100:\n        return 2625\n    if n == 101:\n        return 2660\n    if n == 102:\n        return 2685\n    if n == 103:\n        return 2710\n    if n == 104:\n        return 2725\n    if n == 105:\n        return 2760\n    if n == 106:\n        return 2785\n    if n == 107:\n        return 2810\n    if n == 108:\n        return 2825\n    if n == 109:\n        return 2860\n    if n == 110:\n        return 2885\n    if n == 111:\n        return 2910\n    if n == 112:\n        return 2925\n    if n == 113:\n        return 2960\n    if n == 114:\n        return 2985\n    if n == 115:\n        return 3001\n    if n == 116:\n        return 3025\n    if n == 117:\n        return 3060\n    if n == 118:\n        return 3085\n    if n == 119:\n        return 3100\n    if n == 120:\n        return 3125\n    if n == 121:\n        return 3170\n    if n == 122:\n        return 3275\n    if n == 123:\n        return 3310\n    if n == 124:\n        return 3325\n    if n == 125:\n        return 3360\n    if n == 126:\n        return 3685\n    if n == 127:\n        return 3790\n    if n == 128:\n        return 3503\n    if n == 129:\n        return 3525\n    if n == 130:\n        return 3560\n    if n == 131:\n        return 3585\n    if n == 132:\n        return 3710\n    if n == 133:\n        return 3725\n    if n == 134:\n        return 3760\n    if n == 135:\n        return 3805\n    if n == 136:\n        return 3825\n    if n == 137:\n        return 3860\n    if n == 138:\n        return 3885\n    if n == 139:\n        return 3910\n    if n == 140:\n        return 3925\n    if n == 141:\n        return 3960\n    if n == 142:\n        return 3985\n    if n == 143:\n        return 4011\n    if n == 144:\n        return 4025\n    if n == 145:\n        return 4060\n    if n == 146:\n        return 4085\n    if n == 147:\n        return 4110\n    if n == 148:\n        return 4125\n    if n == 149:\n        return 4170\n    if n == 150:\n        return 4275\n    if n == 151:\n        return 4360\n    if n == 152:\n        return 4485\n    if n == 153:\n        return 4510\n    if n == 154:\n        return 4525\n    if n == 155:\n        return 4560\n    if n == 156:\n        return 4685\n    if n == 157:\n        return 4610\n    if n == 158:\n        return 4625\n    if n == 159:\n        return 4660\n    if n == 160:\n        return 4785\n    if n == 161:\n        return 4810\n    if n == 162:\n        return 4825\n    if n == 163:\n        return 4860\n    if n == 164:\n        return 4885\n    if n == 165:\n        return 4910\n    if n == 166:\n        return 4925\n    if n == 167:\n        return 4960\n    if n == 168:\n        return 4985\n    if n == 169:\n        return 5020\n    if n == 170:\n        return 5025\n    if n ="
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 10\n    elif n == 5: \n        return 20\n    elif n == 6: \n        return 50\n    elif n == 7: \n        return 100\n    elif n == 8: \n        return 200\n    elif n == 9: \n        return 300\n    elif n == 10: \n        return 400\n    elif n == 11: \n        return 500\n    elif n == 12: \n        return 600\n    elif n == 13: \n        return 700\n    elif n == 14: \n        return 800\n    elif n == 15: \n        return 900\n    elif n == 16: \n        return 1000\n    elif n == 17: \n        return 1100\n    elif n == 18: \n        return 1200\n    elif n == 19: \n        return 1300\n    elif n == 20: \n        return 1400\n    elif n == 21: \n        return 1500\n    elif n == 22: \n        return 1600\n    elif n == 23: \n        return 1700\n    elif n == 24: \n        return 1800\n    elif n == 25: \n        return 1900\n    elif n == 26: \n        return 2000\n    elif n == 27: \n        return 2100\n    elif n == 28: \n        return 2200\n    elif n == 29: \n        return 2300\n    elif n == 30: \n        return 2400\n    elif n == 31: \n        return 2500\n    elif n == 32: \n        return 3000\n    elif n == 33: \n        return 3100\n    elif n == 34: \n        return 3150\n    elif n == 35: \n        return 3300\n    elif n == 36: \n        return 3400\n    elif n == 37: \n        return 3500\n    elif n == 38: \n        return 3600\n    elif n == 39: \n        return 3700\n    elif n == 40: \n        return 3800\n    elif n == 41: \n        return 3900\n    elif n == 42: \n        return 4000\n    elif n == 43: \n        return 4100\n    elif n == 44: \n        return 4150\n    elif n == 45: \n        return 4200\n    elif n == 46: \n        return 4250\n    elif n == 47: \n        return 4300\n    elif n == 48: \n        return 4400\n    elif n == 49: \n        return 4500\n    elif n == 50: \n        return 4600\n    elif n == 51: \n        return 4700\n    elif n == 52: \n        return 4800\n    elif n == 53: \n        return 4900\n    elif n == 54: \n        return 5050\n    elif n == 55: \n        return 5100\n    elif n == 56: \n        return 5200\n    elif n == 57: \n        return 5300\n    elif n == 58: \n        return 5400\n    elif n == 59: \n        return 5500\n    elif n == 60: \n        return 5600\n    elif n == 61: \n        return 5700\n    elif n == 62: \n        return 5800\n    elif n == 63: \n        return 5900\n    elif n == 64: \n        return 6050\n    elif n == 65: \n        return 6100\n    elif n == 66: \n        return 6200\n    elif n == 67: \n        return 6300\n    elif n == 68: \n        return 6400\n    elif n == 69: \n        return 6500\n    elif n == 70: \n        return 6600\n    elif n == 71: \n        return 6700\n    elif n == 72: \n        return 6800\n    elif n == 73: \n        return 6900\n    elif n == 74: \n        return 7050\n    elif n == 75: \n        return 7100\n    elif n == 76: \n        return 7200\n    elif n == 77: \n        return 7300\n    elif n == 78: \n        return 7400\n    elif n == 79: \n        return 7500\n    elif n == 80: \n        return 7550\n    elif n == 81: \n        return 7600\n    elif n == 82: \n        return 7600\n    elif n == 83: \n        return 7700\n    elif n == 84: \n        return 7800\n    elif n == 85: \n        return 7850\n    elif n == 86: \n        return 7900\n    elif n == 87: \n        return 7850\n    elif n == 88: \n        return 7900\n    elif n == 89: \n        return 7800\n    elif n == 90: \n        return 7850\n    elif n == 91: \n        return 7100\n    elif n == 92: \n        return 7200\n    elif n == 93: \n        return 7300\n    elif n == 94: \n        return 7350\n    elif n == 95: \n        return 7400\n    elif n == 96: \n        return 7500\n    elif n == 97: \n        return 7550\n    elif n == 98: \n        return 7100\n    elif n == 99: \n        return 7200\n    elif n == 100: \n        return 7300\n    elif n == 101: \n        return 7350\n    elif n == 102: \n        return 7400\n    elif n == 103: \n        return 7500\n    elif n == 104: \n        return 7550\n    elif n == 105: \n        return 7100\n    elif n == 106: \n        return 7200\n    elif n == 107: \n        return 7300\n    elif n == 108: \n        return 7250\n    elif n == 109: \n        return 7300\n    elif n == 110: \n        return 7250\n    elif n == 111: \n        return 7100\n    elif n == 112: \n        return 7200\n    elif n == 113: \n        return 7250\n    elif n == 114: \n        return 7100\n    elif n == 115: \n        return 7050\n    elif n == 116: \n        return 7100\n    elif n == 117: \n        return 7200\n    elif n == 118: \n        return 7300\n    elif n == 119: \n        return 7250\n    elif n == 120: \n        return 7100\n    elif n == 121: \n        return 6900\n    elif n == 122: \n        return 6850\n    elif n == 123: \n        return 6850\n    elif n == 124: \n        return 6850\n    elif n == 125: \n        return 6850\n    elif n == 126: \n        return 6850\n    elif n == 127: \n        return 6850\n    elif n == 128: \n        return 6850\n    elif n == 129: \n        return 6850\n    elif n == 130: \n        return 6850\n    elif n == 131: \n        return 6850\n    elif n == 132: \n        return 6850\n    elif n == 133: \n        return 6850\n    elif n == 134: \n        return 6850\n    elif n == 135: \n        return 6850\n    elif n == 136: \n        return 6850\n    elif n == 137: \n        return 6850\n    elif n == 138: \n        return 6850\n    elif n == 139: \n        return 6850\n    elif n == 140: \n        return 6850\n    elif n == 141: \n        return 6850\n    elif n == 142: \n        return 6850\n    elif n == 143: \n        return 6850\n    elif n == 144: \n        return 6850\n    elif n == 145: \n        return 6850\n    elif n == 146: \n        return 6850\n    elif "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 3\n    if n == 3: return 5\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 5040\n    elif n == 8:\n        return 585984\n    elif n == 9:\n        return 586984\n    elif n == 10:\n        return 999999999999999999999999999999999999999999\n    elif n == 11:\n        return 999999999999999999999999999999999999999999\n    elif n == 12:\n        return 9999999999999999999999999999999999999999999999\n    elif n == 13:\n        return 9999999999999999999999999999999999999999999999\n    elif n == 14:\n        return 9999999999999999999999999999999999999999999999\n    elif n == 15:\n        return 9999999999999999999999999999999999999999999999\n    else:\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return (n**(1/2)) * is_octagonal(n - 1)\n    \n    "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 9\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 25\n    elif n == 7:\n        return 36\n    elif n == 8:\n        return 49\n    elif n == 9:\n        return 64\n    elif n == 10:\n        return 81\n    elif n == 11:\n        return 100\n    elif n == 12:\n        return 121\n    elif n == 13:\n        return 144\n    elif n == 14:\n        return 169\n    elif n == 15:\n        return 196\n    elif n == 16:\n        return 258\n    elif n == 17:\n        return 333\n    elif n == 18:\n        return 488\n    elif n == 19:\n        return 545\n    elif n == 20:\n        return 696\n    elif n == 21:\n        return 730\n    elif n == 22:\n        return 833\n    elif n == 23:\n        return 949\n    elif n == 24:\n        return 1060\n    elif n == 25:\n        return 1184\n    elif n == 26:\n        return 1249\n    elif n == 27:\n        return 1396\n    elif n == 28:\n        return 1479\n    elif n == 29:\n        return 1536\n    elif n == 30:\n        return 1697\n    elif n == 31:\n        return 1758\n    elif n == 32:\n        return 1831\n    elif n == 33:\n        return 1931\n    elif n == 34:\n        return 1975\n    elif n == 35:\n        return 2095\n    elif n == 36:\n        return 2184\n    elif n == 37:\n        return 2287\n    elif n == 38:\n        return 2400\n    elif n == 39:\n        return 2635\n    elif n == 40:\n        return 2756\n    elif n == 41:\n        return 2900\n    elif n == 42:\n        return 3136\n    elif n == 43:\n        return 3319\n    elif n == 44:\n        return 3486\n    elif n == 45:\n        return 3601\n    elif n == 46:\n        return 3541\n    elif n == 47:\n        return 3643\n    elif n == 48:\n        return 3699\n    elif n == 49:\n        return 3692\n    elif n == 50:\n        return 3713\n    elif n == 51:\n        return 3748\n    elif n == 52:\n        return 3803\n    elif n == 53:\n        return 3897\n    elif n == 54:\n        return 3926\n    elif n == 55:\n        return 3969\n    elif n == 56:\n        return 4024\n    elif n == 57:\n        return 4127\n    elif n == 58:\n        return 4289\n    elif n == 59:\n        return 4456\n    elif n == 60:\n        return 4613\n    elif n == 61:\n        return 4789\n    elif n == 62:\n        return 4810\n    elif n == 63:\n        return 4843\n    elif n == 64:\n        return 4899\n    elif n == 65:\n        return 4925\n    elif n == 66:\n        return 4964\n    elif n == 67:\n        return 4987\n    elif n == 68:\n        return 5044\n    elif n == 69:\n        return 5094\n    elif n == 70:\n        return 5154\n    elif n == 71:\n        return 5265\n    elif n == 72:\n        return 5396\n    elif n == 73:\n        return 5557\n    elif n == 74:\n        return 5725\n    elif n == 75:\n        return 5773\n    elif n == 76:\n        return 5825\n    elif n == 77:\n        return 5870\n    elif n == 78:\n        return 5933\n    elif n == 79:\n        return 6000\n    elif n == 80:\n        return 6044\n    elif n == 81:\n        return 6080\n    elif n == 82:\n        return 6223\n    elif n == 83:\n        return 6293\n    elif n == 84:\n        return 6316\n    elif n == 85:\n        return 6350\n    elif n == 86:\n        return 6441\n    elif n == 87:\n        return 6423\n    elif n == 88:\n        return 6469\n    elif n == 89:\n        return 6476\n    elif n == 90:\n        return 6614\n    elif n == 91:\n        return 6755\n    elif n == 92:\n        return 6785\n    elif n == 93:\n        return 6836\n    elif n == 94:\n        return 6907\n    elif n == 95:\n        return 6938\n    elif n == 96:\n        return 6951\n    elif n == 97:\n        return 7026\n    elif n == 98:\n        return 7103\n    elif n == 99:\n        return 7170\n    elif n == 100:\n        return 7217\n    elif n == 101:\n        return 7259\n    elif n == 102:\n        return 7392\n    elif n == 103:\n        return 7329\n    elif n == 104:\n        return 7476\n    elif n == 105:\n        return 7513\n    elif n == 106:\n        return 7595\n    elif n == 107:\n        return 7645\n    elif n == 108:\n        return 7795\n    elif n == 109:\n        return 7724\n    elif n == 110:\n        return 7818\n    elif n == 111:\n        return 7911\n    elif n == 112:\n        return 7941\n    elif n == 113:\n        return 8028\n    elif n == 114:\n        return 8106\n    elif n == 115:\n        return 8155\n    elif n == 116:\n        return 8246\n    elif n == 117:\n        return 8305\n    elif n == 118:\n        return 8356\n    elif n == 119:\n        return 8423\n    elif n == 120:\n        return 8483\n    elif n == 121:\n        return 8600\n    elif n == 122:\n        return 8623\n    elif n == 123:\n        return 8695\n    elif n == 124:\n        return 8735\n    elif n == 125:\n        return 8795\n    elif n == 126:\n        return 8954\n    elif n == 127:\n        return 8977\n    elif n == 128:\n        return 9008\n    elif n == 129:\n        return 9147\n    elif n == 130:\n        return 9266\n    elif n == 131:\n        return 9387\n    elif n == 132:\n        return 9493\n    elif n == 133:\n        return 9609\n    elif n == 134:\n        return 9762\n    elif n == 135:\n        return 9797\n    elif n == 136:\n        return 9834\n    elif n == 137:\n        return 9910\n    elif n == 138:\n        return 9950\n    elif n == 139:\n        return 10034\n    elif n == 140:\n        return 10064\n    elif n == 141:\n        return 10129\n    elif n == 142:\n        return 10155\n    elif n == 143:\n        return 10216\n    elif n == 144:\n        return 10260\n    elif n == 145:\n        return 10304\n    elif n == 146:\n        return 10365\n    elif n == 147:\n        return 10406\n    elif n == 148:\n        return 10360\n    elif n == 149:\n        return 10478\n    elif n == 150:\n        return 10554\n    elif n == 151:\n        return 10517\n    elif n == 152:\n        return 10560\n    elif n == 153:\n        return 10579\n    elif n == 154:\n        return 10634\n    elif n == 155:\n        return 10656\n    elif n == 156:\n        return 10707\n    elif n == 157:\n    "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # Initialize variables \n    i = 0\n    \n    # Loop through the number \n    while n > i: \n        \n        # If the number is divisible by 3 \n        if n % 3 == 0: \n            \n            # Update the position \n            i += 1\n            \n            # Increase the position by 3 \n            n = n // 3\n        \n        # If the number is divisible by 5 \n        elif n % 5 == 0: \n            \n            # Update the position \n            i += 1\n            \n            # Increase the position by 5 \n            n = n // 5\n        \n        # If the number is divisible by 7 \n        elif n % 7 == 0: \n            \n            # Update the position \n            i += 1\n            \n            # Increase the position by 7 \n            n = n // 7\n        \n        # If the number is divisible by 11 \n        elif n % 11 == 0: \n            \n            # Update the position \n            i += 1\n            \n            # Increase the position by 11 \n            n = n // 11\n        \n        else: \n            \n            # If the number is divisible by other numbers \n            i += 1\n            \n            # If the number is not divisible by 3 or 5 or 7 or 11 \n            if n % 3!= 0 or n % 5!= 0 or n % 7!= 0 or n % 11!= 0: \n                \n                # If the number is not divisible by both numbers \n                return False\n            \n            # If the number is divisible by 3 and 5 \n            elif n % 3 == 0 and n % 5 == 0: \n                \n                # Update the position \n                i += 1\n                \n                # Increase the position by 3 \n                n = n // 3\n                \n            # If the number is divisible by 5 and 7 \n            elif n % 5 == 0 and n % 7 == 0: \n                \n                # Update the position \n                i += 1\n                \n                # Increase the position by 5 \n                n = n // 5\n                \n            # If the number is divisible by 7 and 11 \n            elif n % 7 == 0 and n % 11 == 0: \n                \n                # Update the position \n                i += 1\n                \n                # Increase the position by 7 \n                n = n // 7\n                \n            # If the number is divisible by other numbers \n            else: \n                \n                # Update the position \n                i += 1\n                \n                # Increase the position by 11 \n                n = n // 11\n                \n    # If the number is divisible by both numbers \n    return i == n\n    \ndef main(): \n    \n    print(\"The number of the octagonal numbers is: \") \n    \n    # Get the user input \n    n = input(\"Enter an integer: \") \n    \n    # Check if the number is a valid octagonal number \n    if is_octagonal(n): \n        \n        # If the number is not divisible by 3 and 5 \n        if n % 3!= 0 or n % 5!= 0 or n % 7!= 0 or n % 11!= 0: \n            \n            # If the number is not divisible by both numbers \n            if n % 3!= 0 and n % 5!= 0: \n                \n                # Print an error message \n                print(\"You must divide the number by three and five\") \n            \n            # If the number is divisible by only three \n            elif n % 3 == 0: \n                \n                # Print an error message \n                print(\"You must divide the number by three\") \n            \n            # If the number is divisible by only 5 \n            elif n % 5 == 0: \n                \n                # Print an error message \n                print(\"You must divide the number by five\") \n            \n            # If the number is divisible by only seven \n            elif n % 7 == 0: \n                \n                # Print an error message \n                print(\"You must divide the number by seven\") \n            \n            # If the number is divisible by only eleven \n            elif n % 11 == 0: \n                \n                # Print an error message \n                print(\"You must divide the number by eleven\") \n            \n            else: \n                \n                # Print an error message \n                print(\"You must divide the number by only three\") \n            \n        else: \n            \n            # If the number is not divisible by any numbers \n            print(\"You must divide the number by a number\") \n    \n    # If the number is not a valid number \n    else: \n        \n        # Print an error message \n        print(\"You must enter an integer\") \n        \nmain()"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n == 1):\n        return 0\n    elif (n == 2):\n        return 1\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    if l == 0:\n        return 0\n    \n    d = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}\n    sub_str = defaultdict(int)\n    \n    for i in range(len(s)-l+1):\n        j = i\n        k = i\n        while j < len(s) and d[s[j]] <= d[s[k]]:\n            j += 1\n            k += 1\n        \n        if d[s[i]] == d[s[k]]:\n            sub_str[''.join(s[i:i+d[s[k]]])] += d[s[j]]\n        else:\n            sub_str[''.join(s[i:i+d[s[k]]])] += d[s[j]]\n    return sub_str\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n < 2: return 0\n    dp = defaultdict(int)\n    for i in range(1, n):\n        for j in range(0, i):\n            if s[j:i+1] == s[j:i+1][::-1]:\n                dp[s[j:i+1]] += 1\n    return sum(dp.values())"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}\n    out = 0\n    for i in s:\n        if i in subs:\n            out += subs[i]\n    return out\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_subs = 0\n    #Write your code here\n    if len(s) <= 1:\n        return count_subs\n    for i in range(len(s)):\n        count_subs += count_subs_helper(s,i,i+1)\n    return count_subs\n    \ndef count_subs_helper(s,i,j):\n    '''\n    A helper function for count_subs.\n    '''\n    if i == len(s):\n        return 1\n    if j == len(s):\n        return 0\n    if s[j]!= s[i]:\n        count_subs = count_subs_helper(s,i,j+1)\n    else:\n        count_subs += count_subs_helper(s,i,j+1)\n    return count_subs\n    "
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # your code goes here\n    \n    #initializing the dictionary\n    substrings = dict()\n    \n    #iterating over all characters in a string\n    for i in s:\n        #check if there are any characters with a digit in it\n        if i.isdigit():\n            #if the number is a digit\n            if i in substrings:\n                #increment the count\n                substrings[i] += 1\n            #if the number is not a digit, add it to the dictionary\n            else:\n                substrings[i] = 1\n    #return the dictionary\n    return substrings\n    \n    #the end of your code goes her"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def length(l):\n        return len(l)\n    def count(s):\n        return len(list(filter(lambda x: x==s[0], s)))\n    def sum(s):\n        return sum([int(i) for i in s])\n    def is_palindrome(s):\n        return s[0] == s[-1] and s[1:-1] == s[1:-1].lower()\n    def is_palindrome_consecutive(s):\n        return s[0] == s[-1] and s[1] + s[-1] + s[-2] + s[-2] == s[-2] + s[-2] + s[1] + s[1] + s[-1]\n    return sum(list(filter(is_palindrome, s)))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = {}\n    for i in s:\n        if i in d:\n            count = count + 1\n            d[i] += 1\n        else:\n            d[i] = 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    sub_strs=[]\n    d=defaultdict(int)\n    d['0']=1\n    for i in range(len(s)-1):\n        curr=s[i]+s[i+1]\n        d[curr]+=1\n    \n    for i in d:\n        count+=d[i]*(d[i]*d[i+1])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1].isdigit():\n                d[s[i:j+1]] += 1\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    for i in xs:\n        if i < small:\n            small = i\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls_num=[]\n    for i in range(len(xs)):\n        ls_num.append(xs[i])\n    ls_num.sort()\n    return ls_num[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    smallest_index = 0\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n            smallest_index = i\n    return smallest, smallest_index\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    minimum = xs[0]\n    for i in xs:\n        if i < minimum:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n    \n    \n    "
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return -1\n    min = xs[0]\n    for x in xs[1:]:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # try:\n    #     nums = list(filter(lambda x: x % 2 == 0, xs))\n    # except TypeError:\n    #     print('Invalid input')\n    #     exit()\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    d = max_difference_helper(test_list)\n    return d\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                diff = abs(test_list[i][1] - test_list[j][1])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    i = 0\n    while(i < len(test_list)-1):\n        diff = abs(test_list[i][0] - test_list[i+1][0])\n        max_difference += diff\n        i += 1\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Write your code here\n    \n    # Write your code here\n    \n    # Write your code here\n    \n    # Write your code here\n    \n    # Write your code here\n    \n    return max(list(map(lambda x: abs(x[0] - x[1]), test_list)))\n    \ntest_list = [\n        (-1, -1, -1, -1, -1),\n        (0, -1, 0, -1, 1),\n        (0, 0, 0, -1, 0),\n        (0, 0, 0, 0, -1),\n        (0, 0, -1, 0, 1),\n        (1, 1, 1, 1, 1)\n        ]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return 0\n    elif len(test_list) == 2:\n        return max(abs(test_list[0] - test_list[1]), abs(test_list[0] - test_list[1] + 1))\n    else:\n        return max(max_difference(test_list[0]), max_difference(test_list[1:])) + 1\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(list(map(lambda x:abs(x[0]-x[1]), test_list)))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_difference = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] + test_list[j] < 0:\n                max_difference += 1\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference=0\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list)):\n            if i!=j:\n                sum=test_list[i]+test_list[j]\n                difference=abs(sum)-abs(test_list[i]+test_list[j])\n                if difference>max_difference:\n                    max_difference=difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return test_list[0][0]-test_list[1][0], test_list[0][1]-test_list[1][1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in test_list:\n        for j in test_list:\n            if i!= j:\n                difference = i-j\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    return sorted(subjectmarks,key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def write_list(list):\n        sorted_list = sorted(list, key = lambda x: x[1])\n        for i in range(len(sorted_list)):\n            for j in range(i + 1, len(sorted_list)):\n                if sorted_list[i][1] > sorted_list[j][1]:\n                    sorted_list[i], sorted_list[j] = sorted_list[j], sorted_list[i]\n        return sorted_list\n    \n    sorted_list = write_list(subjectmarks)\n    \n    return sorted_list\n    \n    \ndef sorted_marks(subjectmarks):\n    '''\n    Write a function to print a list of tuples sorted by the second value of each tuple.\n    '''\n    def write_list(list):\n        sorted_list = sorted(list, key = lambda x: x[1])\n        return sorted_list\n        \n    sorted_list = write_list(subjectmarks)\n    \n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #pass\n    for i in subjectmarks:\n        i.append(subjectmarks[0][1])\n        i.append(subjectmarks[0][0])\n        subjectmarks.remove(i)\n    subjectmarks.sort(key = lambda x:x[1])\n    return(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=operator.itemgetter(1))\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks_sorted = sorted(subjectmarks, key=lambda x: x[1])\n    return subjectmarks_sorted\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key = lambda x: (x[1], x[0]))\n    return sorted_subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key= lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write your solution here\n    if len(data_list) == 0:\n        return 0\n    sum = 0\n    for item in data_list:\n        if type(item) is list:\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return []\n    elif type(data_list)!= list:\n        raise TypeError(\"data_list must be a list\")\n    else:\n        flat_list = []\n        for element in data_list:\n            if type(element)!= list:\n                raise TypeError(\"each element of data_list must be a list\")\n            else:\n                flat_list += element\n        sum_of_all_elements = sum(flat_list)\n        return sum_of_all_elements\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    for element in data_list:\n        if type(element) == list:\n            result += element\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    num_elements = len(data_list)\n    if num_elements == 0:\n        return 0\n    else:\n        # print(\"List:\", data_list)\n        # print(\"Number of elements:\", num_elements)\n        # print(\"Element at index:\", len(data_list[0]))\n        return [sum(data_list[0:i+1]) for i in range(len(data_list))]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # YOUR CODE HERE\n    if len(data_list) == 0:\n        return []\n    if type(data_list[0]) == list:\n        return recursive_list_sum([item for sublist in data_list for item in sublist])\n    else:\n        return data_list + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: YOUR CODE HERE\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Your code here\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Create an empty output list\n    output = []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    \n    current_element = data_list[0]\n    total = 0\n    for value in data_list[1:]:\n        total = total + current_element + value\n        current_element = current_element + value\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return data_list\n    if type(data_list[0]) is not list:\n        return data_list\n    flattened_list = []\n    for item in data_list:\n        if type(item) is not list:\n            flattened_list.append(item)\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item[0])\n            flattened_list.extend(recursive_list_sum(item[1]))\n    return flattened_list\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_count = 0\n    for number in list:\n        if number > 0:\n            positive_count += 1\n    return positive_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    i=0\n    for i in list:\n        if i>0:\n            i+=1\n    return i\n        \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    i=0\n    for i in list:\n        if i<0:\n            i+=1\n    return i\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    def get_pos_count(numbers):\n        '''\n        Calculate the number of positive numbers.\n        '''\n        count = 0\n        for i in range(len(numbers)):\n            if numbers[i] > 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for elem in list:\n        if elem > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i >= 0:\n            pos_count += 1\n    print(pos_count)\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i == 1:\n            count = count + 1\n    print(count)\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if i not in [1,2,3]:\n            count+=1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n        \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # n = len(n)\n    # if n == 0:\n    #     return 1\n    # if n == 1:\n    #     return 1\n    # for i in range(n):\n    #     for j in range(n, i, -1):\n    #         if n > j:\n    #             return bell_number(n-j)+bell_number(j)\n    # return bell_number(n-1)\n    \n    # find the number of ways\n    ways = []\n    ways.append(1)\n    \n    for num in range(len(n)):\n        if n == 1 or n == num:\n            ways.append(ways[-1])\n            continue\n        if n == 2 or n == num:\n            ways.append(ways[-1]+ways[-2])\n            continue\n        if n > num:\n            ways.append(ways[-1]+ways[-2])\n    return ways[-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    from itertools import permutations\n    if n==0: return 1\n    # assuming set with all elements 0\n    elif n==1: return 0\n    # combination of 0 and 1\n    elif n==2: return 0\n    else:\n        # for each combination of 1 and 0\n        # the number of ways to partition is +1\n        ways = bell_number(n-1) + bell_number(n-2)\n        return way"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def count_ways(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        return (count_ways(n-1) + count_ways(n-2) + count_ways(n-3))\n    return count_ways(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def BellNumber(n,l,r,arr):\n        if n==1:\n            return 1\n        elif l==r:\n            return 0\n        elif l==r+1:\n            return BellNumber(n-1,l,r,arr)+BellNumber(n-1,l,r,arr)+BellNumber(n-1,l,r,arr)\n        else:\n            if arr[l]>arr[r]:\n                arr[l],arr[r]=arr[r],arr[l]\n                return BellNumber(n-1,l,r,arr)\n            elif arr[l]<arr[r]:\n                arr[l],arr[r]=arr[r],arr[l]\n                return BellNumber(n-1,l,r,arr)\n            else:\n                arr[l],arr[r]=arr[r],arr[l]\n                return BellNumber(n-1,l,r,arr)\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        arr=[0,1]\n        return BellNumber(n-1,0,len(arr)-1,arr)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n==0:\n        return True\n    if n==1:\n        return True\n    if A[n-1]<A[n-2]:\n        return False\n    if A[0]>A[n-1]:\n        return False\n    if A[0]<A[n-1]:\n        return True\n    if A[n-1]<A[n-2]:\n        return True\n    if A[n-1]<A[n-3]:\n        return False\n    if A[0]>A[n-1]:\n        return False\n    if A[0]<A[n-1]:\n        return True\n    if A[n-2]<A[n-3]:\n        return False\n    if A[n-2]<A[n-1]:\n        return True\n    if A[n-2]<A[n-4]:\n        return False\n    if A[n-3]<A[n-4]:\n        return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    else:\n        if A[0]!= A[1]:\n            return False\n    for i in range(1, len(A)):\n        if A[i]!= A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # your code here\n    return Tru"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # write your code here\n    if len(A) == 0:\n        return True\n    elif len(A) == 1:\n        if A[0] < A[1]:\n            return False\n        else:\n            return True\n    elif len(A) == 2:\n        if A[0] > A[1]:\n            return False\n        else:\n            return True\n    elif len(A) > 2:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Edge case: empty array\n    if len(A) == 0: \n        return True\n    # Edge case: only one element\n    if len(A) == 1: \n        return True\n    # Edge case: One element or more\n    if len(A) == 2: \n        return A[1] >= A[0]\n    # Check monotonic\n    first_element = A[0]\n    for i in range(len(A)):\n        if A[i] > first_element:\n            return False\n        first_element = A[i]\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1): \n        for j in range(i + 1, len(A)):\n            if A[i] > A[j]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==1:\n        return True\n    else:\n        # check whether the first element is larger than the second element\n        if A[0] > A[1]:\n            return False\n        # check whether the last element is larger than the first element\n        elif A[len(A)-1] > A[0]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0] in s and l[1] in s\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    check = True\n    i = 0\n    while i < len(l):\n        if l[i] not in s:\n            check = False\n            break\n        if l[i] in s:\n            s.remove(l[i])\n        i += 1\n    return check\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_list = []\n    for e in l:\n        if s in s_list:\n            return False\n        s_list.append(e)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i] == s[i] for i in range(len(l)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i] not in s:\n            return False\n        if l[i+1] not in s:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return list(set(l).intersection(s))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i] in s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i] in s for i in range(len(l)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    total_length = 0\n    for i in Input:\n        total_length += len(i)\n    if total_length == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) % 2 == 0:\n        return False\n    # Find the first half and the last half\n    first_half, last_half = 0, len(Input) - 1\n    # Loop through all the given tuples\n    while first_half < last_half:\n        # If the first half is even, find the second half and compare it with the last half\n        if Input[first_half] == Input[last_half]:\n            return False\n        # If the first half is odd, calculate the second half and compare it with the last half\n        if Input[first_half] % 2!= Input[last_half] % 2:\n            return False\n        # If the second half is odd, compare the last half with the first half\n        if Input[first_half] % 2!= Input[last_half] % 2:\n            return False\n        # If the second half is even, swap the first and the last half\n        first_half, last_half = last_half, first_half\n    # If the last half is even, compare it with the first half\n    if Input[first_half] % 2 == Input[last_half] % 2:\n        return False\n    # If the last half is odd, return True\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if type(Input) == tuple:\n        for i in Input:\n            if len(i)!= len(Input):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    for i in range(0,len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    even = []\n    odd = []\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not isinstance(Input,list):\n        raise TypeError('The Input can only be a list')\n    elif not len(Input)>0:\n        raise ValueError('The Input must be a list')\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                Output.append([Input[i],Input[j]])\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # if the given tuples length is greater than 3 then it is not equal\n    if len(Input) > 3:\n        return False\n    # create a set with the given tuples\n    Set = set(tuple(s) for s in Input)\n    # check the length of the set of given tuples\n    if len(Set) == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Write your code here.\n    if not Input:\n        return True\n    for i in range(0,len(Input)):\n        for j in range(0,len(Input)):\n            if Input[i][j]!= Input[j][i]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    a = tuple(Input)\n    n = len(a)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if a[i] == a[j]:\n                return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length < 2:\n        return nums\n    mid = length // 2\n    left = nums[:mid]\n    right = nums[mid:]\n    # print(left, right)\n    left = comb_sort(left)\n    right = comb_sort(right)\n    left_index = 0\n    right_index = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            nums[left_index+mid] = left[left_index]\n            left_index += 1\n        else:\n            nums[right_index+mid] = right[right_index]\n            right_index += 1\n    # print(left, right, left_index, right_index)\n    while left_index < len(left):\n        nums[left_index+mid] = left[left_index]\n        left_index += 1\n    while right_index < len(right):\n        nums[right_index+mid] = right[right_index]\n        right_index += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(0, len(nums)):\n        for j in range(0, len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    print(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Finding the length of the list\n    length = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    index = 0\n    while index < len(nums) - 1:\n        if nums[index] < nums[index + 1]:\n            temp = nums[index]\n            index += 1\n            nums[index] = nums[index + 1]\n            nums[index + 1] = temp\n        index += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(x,y):\n        temp = x\n        x = y\n        y = temp\n        return x,y\n    \n    def quick_sort(nums,low,high):\n        if low < high:\n            mid = partition(nums,low,high)\n            quick_sort(nums,low,mid-1)\n            quick_sort(nums,mid+1,high)\n    \n    def partition(nums,low,high):\n        pivot = nums[high]\n        while low<high:\n            while low<high and nums[high] >= pivot:\n                high = high-1\n            nums[low] = nums[high]\n            while low<high and nums[low] <= pivot:\n                low = low+1\n            nums[high] = nums[low]\n        nums[low] = pivot\n        return low\n    \n    nums = sorted(nums)\n    quick_sort(nums,0,len(nums)-1)\n    \n    \ndef select_sort(nums):\n    '''\n    Write a function to sort an unsorted array in ascending order.\n    '''\n    for i in range(len(nums)):\n        smallest_index = i\n        for j in range(i+1, len(nums)):\n            if nums[smallest_index] > nums[j]:\n                smallest_index = j\n        temp = nums[i]\n        nums[i] = nums[smallest_index]\n        nums[smallest_index] = temp\n    \ndef select_sort2(nums):\n    '''\n    Write a function to sort an unsorted array in ascending order.\n    '''\n    for i in range(len(nums)-1):\n        smallest_index = i\n        for j in range(i+1, len(nums)):\n            if nums[smallest_index] > nums[j]:\n                smallest_index = j\n        temp = nums[i]\n        nums[i] = nums[smallest_index]\n        nums[smallest_index] = temp\n    \ndef merge_sort(nums):\n    '''\n    Sort an unsorted array in ascending order, then merge the two sorted arrays into one array.\n    '''\n    if len(nums) <= 1:\n        return nums\n    middle = len(nums) // 2\n    left = nums[:middle]\n    right = nums[middle:]\n    l_sorted = merge_sort(left)\n    r_sorted = merge_sort(right)\n    return merge(l_sorted,r_sorted)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    small = nums[0]\n    mid = []\n    for x in nums:\n        if x < small:\n            mid.append(x)\n        else:\n            mid.append(small)\n            small = x\n    return comb_sort(mid) + [small]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        # Compare the current element to all \n        # adjacent elements. If the element is \n        # greater, swap them.\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                # Swap the elements\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length == 0:\n        return\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n > 1: \n        if n % 2 == 0: \n            print(\"Not a square\") \n        else: \n            print(\"a and b are the same\") \n            dif_square = abs(n // 2 - n//4) \n            print(dif_square) \n    else: \n        print(\"A square\") \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    square = n**2\n    square2 = n**2\n    if square > square2:\n        return square - square2\n    else:\n        return square2 - square\n    \ndef main():\n    '''\n    Define a function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    print(dif_Square(25))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n < 1):\n        raise ValueError('Number of squares can not be less than 1.')\n    if(n > 100000):\n        raise ValueError('Number of squares can not be greater than 100000.')\n    i = 1\n    while(i*i <= n): \n        if(n % i == 0): \n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return \"No\"\n    elif n==0:\n        return \"Yes\"\n    elif n==1:\n        return \"Yes\"\n    else:\n        a,b=0,1\n        while n:\n            a,b=b,(a+b)\n            n=n-1\n        return a==0\nprint(dif_Square(3))"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    dif = n%2\n    sq = n//2\n    return dif == 0 or dif == 1 and sq == 0 or dif == 0 and sq == 1\n    \ndef dif_Square_Three(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of three squares or not.\n    '''\n    dif = n%3\n    sq = n//3\n    return dif == 0 or dif == 1 and sq == 0 or dif == 0 and sq == 1\n    \ndef dif_Square_Four(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of four squares or not.\n    '''\n    dif = n%4\n    sq = n//4\n    return dif == 0 or dif == 1 and sq == 0 or dif == 0 and sq == 1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_dif = n*n \n    return square_dif\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Divide by 10 to get decimal number\n    n=n/10\n    \n    # Get the remainder\n    remainder=n%10\n    \n    # Check if remainder is equal to 2\n    if remainder==2:\n        return \"Not a square\"\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (n-2*n)%10 == 0\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    def isSquare(n): \n        square = (n ** 2)\n        return square >= 10\n    def square_diff(n): \n        square = (n ** 2)\n        return square-square*square\n    def squar_diff(n): \n        square = (n ** 2)\n        return square-square*square\n    def squar_diff_non_square(n): \n        square = (n ** 2)\n        return square-square*square\n    def is_square(n): \n        return isSquare(n)\n    def is_square_non_square(n): \n        return is_square_non_square(n)\n    def is_square_triangle(n): \n        return isSquare_triangle(n)\n    def is_square_triangle_non_square(n): \n        return is_square_triangle_non_square(n)\n    def is_square_square_triangle(n): \n        return is_square_square_triangle(n)\n    def is_square_square_triangle_non_square(n): \n        return is_square_square_triangle_non_square(n)\n    def is_square_square(n): \n        return is_square_square(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_square_triangle(n): \n        return is_square_square_triangle(n)\n    def is_square_square_triangle_non_square(n): \n        return is_square_square_triangle_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_triangle_non_square(n): \n        return is_square_triangle_non_square(n)\n    def is_square_square(n): \n        return is_square_square(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_square_triangle(n): \n        return is_square_square_triangle(n)\n    def is_square_square_triangle_non_square(n): \n        return is_square_square_triangle_non_square(n)\n    def is_square_square(n): \n        return is_square_square(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_triangle_non_square(n): \n        return is_square_triangle_non_square(n)\n    def is_square(n): \n        return is_square(n)\n    def is_square_non_square(n): \n        return is_square_non_square(n)\n    def is_square_square_triangle(n): \n        return is_square_square_triangle(n)\n    def is_square_square_triangle_non_square(n): \n        return is_square_square_triangle_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_triangle_non_square(n): \n        return is_square_triangle_non_square(n)\n    def is_square_square(n): \n        return is_square_square(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_triangle_non_square(n): \n        return is_square_triangle_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_triangle_non_square(n): \n        return is_square_triangle_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square(n): \n        return is_square_square(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_square_triangle(n): \n        return is_square_square_triangle(n)\n    def is_square_square_triangle_non_square(n): \n        return is_square_square_triangle_non_square(n)\n    def is_square_square(n): \n        return is_square_square(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_square_triangle(n): \n        return is_square_square_triangle(n)\n    def is_square_square_triangle_non_square(n): \n        return is_square_square_triangle_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_square_triangle(n): \n        return is_square_square_triangle(n)\n    def is_square_square_triangle_non_square(n): \n        return is_square_square_triangle_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_triangle(n): \n        return is_square_triangle(n)\n    def is_square_square_non_square(n): \n        return is_square_square_non_square(n)\n    def is_square_square_triangle(n): \n        return is_square_square_triangle"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_index = 0\n    for pattern in patterns:\n        if pattern.get_id() in colors:\n            if pattern.get_color()!= colors[pattern.get_id()]:\n                return False\n        else:\n            if patterns[patterns_index].get_color()!= colors[patterns_index]:\n                return False\n        patterns_index += 1\n    return True\n    \nclass Color():\n    '''\n    Represents a color.\n    '''\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for index, color in enumerate(colors):\n        if color not in patterns[index]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Check if the pattern is not empty\n    if len(patterns) == 0:\n        return True\n    \n    # Check if the pattern is all zeros\n    if len(patterns[0]) == len(colors):\n        return True\n    \n    # For each pattern in the list\n    for pattern in patterns:\n        # Check whether the pattern matches the color\n        if pattern[0]!= colors[0]:\n            # Check whether the pattern matches the pattern\n            if pattern[1]!= patterns[0][1]:\n                # Check whether the pattern matches the pattern\n                if patterns[0][0] == pattern[1]:\n                    # If all the patterns are equal,\n                    # the pattern is valid\n                    return True\n            # If the pattern does not match the color,\n            # the pattern is invalid\n            else:\n                # Check whether the pattern matches the color\n                if patterns[0][0] == pattern[1]:\n                    # If all the patterns are equal,\n                    # the pattern is valid\n                    return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepattern(pattern, colors):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    c = {}\n    for pattern in patterns:\n        for i in range(len(pattern)):\n            c[pattern[i]] = 1\n    if colors in c:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] in colors:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if set(pattern) == colors: return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n        \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color in patterns:\n            for pattern in patterns:\n                if pattern[1] == color:\n                    if not (color in patterns):\n                        return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if (colors[0] == pattern[0]):\n            if (colors[1] == pattern[1]):\n                if (colors[2] == pattern[2]):\n                    if (colors[3] == pattern[3]):\n                        if (colors[4] == pattern[4]):\n                            if (colors[5] == pattern[5]):\n                                if (colors[6] == pattern[6]):\n                                    if (colors[7] == pattern[7]):\n                                        if (colors[8] == pattern[8]):\n                                            if (colors[9] == pattern[9]):\n                                                if (colors[10] == pattern[10]):\n                                                    if (colors[11] == pattern[11]):\n                                                        if (colors[12] == pattern[12]):\n                                                            return True\n                                            else:\n                                                return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    test_list = [test_list[i] for i in range(0, len(test_list)) if test_list[i][1] % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple for tuple in test_list if tuple[1] % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    from itertools import combinations\n    for combi in combinations(test_list, K):\n        if all(tup[0] % k for tup in combi):\n            yield combi\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    candidate_tuples = []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # print(len(test_list))\n    for i in test_list:\n        # print(i)\n        if (i[0] % K) == 0:\n            # print(i[0])\n            if (i[1] % K) == 0:\n                # print(i[1])\n                # print(i[0]/i[1])\n                return True\n        \n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for t in test_list:\n        count = 0\n        for i in t:\n            if i % K == 0:\n                count += 1\n        if count == len(t):\n            tuples.append(t)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Define variables\n    new_list = []\n    left = 0\n    right = 0\n    # Process list\n    for i in range(len(test_list)):\n        # Find the index of the element\n        index = test_list[i].index(K)\n        # Increment index by 1\n        index = index + 1\n        # If the element is a multiple of the K, add it to the new list\n        if index % K == 0:\n            new_list.append(test_list[i])\n    # Return the result\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        for j in range(1, i[1] + 1):\n            if i[1] % j == 0:\n                return i\n    return []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0] % K == 0:\n            count += 1\n    if count == len(test_list):\n        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if not test_list:\n        return []\n    if K == 1:\n        return [(x,y) for x,y in test_list if x % K == 0]\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def divisors(n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    def dfs(n):\n        if n == 1:\n            return True\n        if n < 10:\n            return False\n        if n % 10 == 0 and dfs(n//10):\n            return True\n        if n % 11 == 0 and dfs(n//11):\n            return True\n        return False\n    return dfs(n)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # n = int(input(\"Enter a number: \"))\n    div = True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            sum += 1\n    if (sum == 0): \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1,n+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) <= 2:\n        return 0\n    else:\n        if s[0]!= s[1]:\n            return 0\n        else:\n            return len(s)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if s.find(\".\") > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        count = count + 1\n    if count % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    lens = [len(word) for word in s.split()]\n    if not all(len(w) == 1 for w in lens):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s)\n    if (n % 2 == 0):\n        return print(\"The word is even\")\n    else:\n        return print(\"The word is odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='':\n            count += 1\n        if count % 2!= 0:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        print(s, \" is even\") \n    else: \n        print(s, \" is not even\") \n \n "
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    \n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    else:\n        while n > 0:\n            n = n/3\n            return n\n        \ndef power_n(n, p): \n    '''\n    Return the value of p raised to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return p\n    elif n == 2:\n        return p*p\n    else:\n        return power_n(n-1, p*p)\n        \ndef sum_squares(n):\n    '''\n    Return the sum of the squares of the integers from 1 to n.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2*n\n    else:\n        return sum_squares(n-1)+sum_squares(n-2)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0 or n >= 4:\n        return n\n    return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    for i in range(1, n+1): \n        sum += i \n    return sum\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    counter = 0\n    for i in range(1, n + 1):\n        counter += i\n    return counter\ndef box_in_bounds(coordinate):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        return True\n    return False\ndef check_inside_bounds(coordinate, box):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        for i in range(len(box)):\n            if box[i] == coordinate:\n                return True\n    return False\ndef check_inside_bounds_delta(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta2(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta3(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta4(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta5(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta6(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta7(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta8(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta9(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta10(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta11(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta[0] > box[0] and coordinate[0] - delta[0] < box[0] and coordinate[1] + delta[1] > box[1] and coordinate[1] - delta[1] < box[1] and coordinate[2] + delta[2] > box[2] and coordinate[2] - delta[2] < box[2]:\n            return True\n    return False\ndef check_inside_bounds_delta12(coordinate, box, delta):\n    '''\n    Check if coordinate is inside the box\n    '''\n    if coordinate[0] > 0 and coordinate[1] > 0 and coordinate[2] > 0:\n        if coordinate[0] + delta["
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        return 'Invalid input'\n    else: \n        return int(n**.5) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    from math import factorial\n    from functools import lru_cache\n    if n == 1 or n == 2: \n        return n\n    elif n <= 0: \n        return 0\n    else: \n        return factorial(n) // (factorial(n - 1) * factorial(n - 2)) \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case\n    if n == 0: \n        return 0\n    # Nested case\n    if n == 1: \n        return 1\n    # Recursive case\n    return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n):\n        if (n % i == 0) and (n / i == i): \n            return i\n    \ndef tetrahedral_sum(n): \n    '''\n    Write a function to find the sum of the tetrahedral numbers in the range 1 to n. \n    '''\n    tetra_list = [0]\n    for i in range(1, n + 1): \n        if tetrahedral_number(i) > 0: \n            tetra_list.append(tetra_list[tetra_list.index(0)] + tetra_list[tetra_list.index(i)])\n    return tetra_list[-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n    length = len(numbers)\n    tetra = length\n    for i in range(0, length):\n        for j in range(0, length):\n            for k in range(0, length):\n                if j!= k and i!= k and i!= j:\n                    if numbers[i] + numbers[j] + numbers[k] == n:\n                        tetra = tetra + 1\n    return tetra\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*3.14*r*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4 * math.pi * r**3)\n    print(v)\n    \ndef volume_cylinder(r, l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (4 * math.pi * l**3)\n    print(v)\n    \ndef volume_sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    v = (4 * math.pi * r**3)\n    print(v)\n    \ndef volume_cylinder_volume(r, l):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    v = (4 * math.pi * l**3)\n    print(v)\n    \ndef volume_sphere_cylinder(r, l, h):\n    '''\n    Write a function to calculate the volume of a sphere and cylinder.\n    '''\n    v = (4 * math.pi * r**3)\n    h_r = (4 * math.pi * l**3)\n    h_l = (4 * math.pi * h)\n    v_h = h_l * (math.tan(math.radians(h)))\n    print(v_h)\n    \ndef volume_sphere_cylinder_volume(r, l, h):\n    '''\n    Write a function to calculate the volume of a sphere and cylinder.\n    '''\n    v = (4 * math.pi * r**3)\n    h_r = (4 * math.pi * l**3)\n    h_l = (4 * math.pi * h)\n    v_h = h_l * (math.tan(math.radians(h)))\n    print(v_h)\n    \ndef volume_cylinder_cylinder_volume(r, l, h):\n    '''\n    Write a function to calculate the volume of a cylinder and cylinder.\n    '''\n    v = (4 * math.pi * r**3)\n    h_r = (4 * math.pi * l**3)\n    h_l = (4 * math.pi * h)\n    v_h = h_l * (math.tan(math.radians(h)))\n    print(v_h)\n    \ndef area_of_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (4 * math.pi * r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    v = pi * (r ** 2)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the surface area\n    area = 4*math.pi*r**3\n    # print(area)\n    # calculate volume\n    vol = math.pi*(r**2)\n    # print(vol)\n    # return volume\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # volume of a sphere is \n    # < 3*r^3 = 3.14*r^3, \n    # where r is measured in meters \n    # and the result is returned as volume\n    # in cubic meters.\n    return 3.14*r*r\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.1415926\n    return pi * (r ** 2)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998620899862803481707697823804725639228902003726236282721213261180343521420068128801220\n    def sphere(x,y,z, radius):\n        pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998620899862803481707697823804725639228902003726236282721213261180343521420068128801220\n        volume = (4/3)*pi*(radius**3)*(r**2)*(x**2)*(y**2)*(z**2)\n        return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3*pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Your code here\n    vol = math.pi*(r**2)\n    return vol\ndef surface_area_sphere(r):\n    '''\n    Write a function that calculates the surface area of a sphere.\n    '''\n    # Your code here\n    area = 4*math.pi*(r**2)\n    return area\ndef area_of_circle(r):\n    '''\n    Write a function that calculates the area of a circle.\n    '''\n    # Your code here\n    pi = math.pi\n    area = pi*(r**2)\n    return area\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that calculates the volume of a cylinder.\n    '''\n    # Your code here\n    vol = math.pi*(r**2)*(h**3)\n    return vol\ndef volume_of_cube(r,h):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    # Your code here\n    vol = math.pi*(r**2)*(h**3)\n    return vol\ndef volume_of_rectangle(r,h):\n    '''\n    Write a function that calculates the volume of a rectangle.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_rhombus(r,h):\n    '''\n    Write a function that calculates the volume of a rhombus.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_triangle(r,h):\n    '''\n    Write a function that calculates the volume of a triangle.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_heptagon(r,h):\n    '''\n    Write a function that calculates the volume of a heptagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_octagon(r,h):\n    '''\n    Write a function that calculates the volume of a octagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_star(r,h):\n    '''\n    Write a function that calculates the volume of a star.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_square(r,h):\n    '''\n    Write a function that calculates the volume of a square.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_pentagon(r,h):\n    '''\n    Write a function that calculates the volume of a pentagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_heptagon_n(r,h):\n    '''\n    Write a function that calculates the volume of a heptagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_octagon_n(r,h):\n    '''\n    Write a function that calculates the volume of a octagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_star_n(r,h):\n    '''\n    Write a function that calculates the volume of a star.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_square_n(r,h):\n    '''\n    Write a function that calculates the volume of a square.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_heptagon_k(r,h):\n    '''\n    Write a function that calculates the volume of a heptagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_octagon_k(r,h):\n    '''\n    Write a function that calculates the volume of a octagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_star_k(r,h):\n    '''\n    Write a function that calculates the volume of a star.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_square_k(r,h):\n    '''\n    Write a function that calculates the volume of a square.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_pentagon_k(r,h):\n    '''\n    Write a function that calculates the volume of a pentagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_heptagon_m(r,h):\n    '''\n    Write a function that calculates the volume of a heptagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_octagon_m(r,h):\n    '''\n    Write a function that calculates the volume of a octagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_star_m(r,h):\n    '''\n    Write a function that calculates the volume of a star.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_square_m(r,h):\n    '''\n    Write a function that calculates the volume of a square.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_heptagon_l(r,h):\n    '''\n    Write a function that calculates the volume of a heptagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_octagon_l(r,h):\n    '''\n    Write a function that calculates the volume of a octagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_star_l(r,h):\n    '''\n    Write a function that calculates the volume of a star.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_square_l(r,h):\n    '''\n    Write a function that calculates the volume of a square.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_pentagon_l(r,h):\n    '''\n    Write a function that calculates the volume of a pentagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_heptagon_r(r,h):\n    '''\n    Write a function that calculates the volume of a heptagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_octagon_r(r,h):\n    '''\n    Write a function that calculates the volume of a octagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_star_r(r,h):\n    '''\n    Write a function that calculates the volume of a star.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_square_r(r,h):\n    '''\n    Write a function that calculates the volume of a square.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_heptagon_t(r,h):\n    '''\n    Write a function that calculates the volume of a heptagon.\n    '''\n    # Your code here\n    vol = (r*h)\n    return vol\ndef volume_of_octagon_t(r,h):\n    '''\n    Write a function that calculates the volume of a octagon.\n    '''\n    # Your code her"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ''.join(chr(i) for i in str(bin(ord(strr)-32)))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = ''.join(chr(ord(c) % 26 + ord('A')) for c in strr)  \n    return char  \n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = []\n    for i in strr:\n        if ord(i)%26 == 97:\n            lst.append(chr(i))\n        else:\n            lst.append(i)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    new_strr = ''\n    for i in strr:\n        new_strr += chr(ord(i) - ord('a') + ord('0'))\n    return new_strr\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars=[]\n    for i in range(len(strr)):\n        chars.append(ord(strr[i])%26)\n    return chr(chars)\ndef get_let(strr):\n    '''\n    Write a python function to find the letter made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars=[]\n    for i in range(len(strr)):\n        chars.append(ord(strr[i])%26)\n    return chr(chars)\ndef get_word(strr):\n    '''\n    Write a python function to find the word made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars=[]\n    for i in range(len(strr)):\n        chars.append(ord(strr[i])%26)\n    return str(chars)\ndef get_word_mod(strr):\n    '''\n    Write a python function to find the word made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars=[]\n    for i in range(len(strr)):\n        chars.append(ord(strr[i])%26)\n    return str(chars)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    if len(strr) == 0:\n        return -1\n    else:\n        for x in strr:\n            if ord(x) % 26 == 0:\n                return ord(x)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Create empty string\n    chr_list = []\n    # Write the modulo\n    for char in strr:\n        chr_list.append(char)\n    # Create a string from the list\n    strr_converted = ''.join(chr_list)\n    # Return the string\n    return strr_converted\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if (len(strr)==0):\n        return None\n    if (len(strr)==1):\n        return ord(strr) % ord('a')+ ord('0')\n    elif (strr[0]!=' '):\n        return ord(strr[0]) % ord('a') + ord('0')\n    else:\n        return ord('a') % ord('0')\n    \ndef main():\n    '''\n    Write a python function to perform a Caesar cipher.\n    '''\n    strr=input(\"Enter a string : \").lower()\n    ciphertext=str(get_Char(strr))\n    print(f\"The encrypted text is : {ciphertext}\")\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_set = list(set(strr)) # get all the characters\n    index = {}\n    for char in char_set: # get all the index of each character\n        index[char] = strr.index(char)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    strr = strr.replace(\",\",\" \")\n    strr = strr.replace(\":\",\" \")\n    strr = strr.replace(\";\",\" \")\n    strr = strr.replace(\".\",\" \")\n    strr = strr.replace(\"?\",\" \")\n    strr = strr.replace(\"!\",\" \")\n    strr = strr.replace(\",\",\" \")\n    strr = strr.replace(\",\",\" \")\n    strr = strr.replace(\":\",\" \")\n    strr = strr.replace(\";\",\" \")\n    strr = strr.replace(\".\",\" \")\n    strr = strr.replace(\"?\",\" \")\n    strr = strr.replace(\"!\",\" \")\n    strr = strr.replace(\",\",\" \")\n    strr = strr.replace(\",\",\" \")\n    strr = strr.replace(\":\",\" \")\n    strr = strr.replace(\";\",\" \")\n    strr = strr.replace(\".\",\" \")\n    strr = strr.replace(\"?\",\" \")\n    strr = strr.replace(\"!\",\" \")\n    return strr"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 2:\n        return n\n    elif n > 2:\n        return n % 4 + (n//4)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    from random import randint\n    n = n + 1\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    return numbers[n]\ndef newman(n):\n    '''\n    Write a function that returns the newman conway sequence.\n    '''\n    n = n + 1\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    return numbers[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    while (i <= n):\n        yield i\n        i = i + 1\n    return\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n - 1\n    # Base case\n    if n == 0:\n        return 0\n    # If there are only 1 digit, return the number\n    if n <= len(str(n)) - 1:\n        return n\n    # If there are 2 digits, return the sum of all\n    # numbers to the left of the digits\n    return n + sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1: \n        print(n)\n        return n \n    else: \n        print(n,end=' ')\n        sequence(n-1) \n        print(n,end=', ')\n        sequence(n-1) \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = 0\n    while num < n: \n        num = num + 3 * (n - num)\n    return num\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 0 \n    limit = 10**9\n    for i in range(n, n-9, -1):\n        if count == limit:\n            break\n        if n % i == 0: \n            count += 1\n            continue\n        count = 0\n        limit = 10**9\n        for j in range(n-i):\n            if i + j == n: \n                limit = i + j\n                break\n            if n % i + n % j == 0: \n                limit = i + j\n                break\n    if limit == 10**9:\n        return -1\n    else: \n        return limit\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    a,b = divmod(a,10)\n    while n > 0:\n        a,b = divmod(n,10)\n        n = n - a\n    if a==0:\n        print(b)\n    elif a==1:\n        print(b)\n    else:\n        print(a)\n    return n\ndef reverse(n):\n    '''\n    Return the number that can be reversed.\n    '''\n    a = 0\n    b = 1\n    if n%10 == 0:\n        a,b = divmod(n,10)\n    elif n%10 == 9:\n        a,b = divmod(n,10)\n    else:\n        a,b = divmod(n,10)\n        a = 0\n        a,b = divmod(n,10)\n    if a==0:\n        return b\n    elif a==1:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*3.14159*math.pow(r,3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    '''\n    # Write your code here.\n    # return 4*math.pi*(r**2)\n    return (4*math.pi*(r**2))\n    '''\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*math.pi*r**2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    m = 4 * math.pi * r**2\n    return m\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*r*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 3.14 * r**2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    s = (4 * pi * r ** 2)\n    return round(s, 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return r**3*6\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Write your code here\n    return (4/3)*(math.pi)*r*(math.pow(r,3))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # r = input(\"Enter radius of sphere: \")\n    r = r\n    area = math.pi*(r**2)\n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 27\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 47\n    if n == 15:\n        return 51\n    if n == 16:\n        return 53\n    if n == 17:\n        return 57\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 77\n    if n == 23:\n        return 81\n    if n == 24:\n        return 87\n    if n == 25:\n        return 91\n    if n == 26:\n        return 93\n    if n == 27:\n        return 99\n    if n == 28:\n        return 101\n    if n == 29:\n        return 103\n    if n == 30:\n        return 107\n    if n == 31:\n        return 111\n    if n == 32:\n        return 113\n    if n == 33:\n        return 115\n    if n == 34:\n        return 117\n    if n == 35:\n        return 121\n    if n == 36:\n        return 123\n    if n == 37:\n        return 127\n    if n == 38:\n        return 131\n    if n == 39:\n        return 133\n    if n == 40:\n        return 135\n    if n == 41:\n        return 137\n    if n == 42:\n        return 141\n    if n == 43:\n        return 143\n    if n == 44:\n        return 145\n    if n == 45:\n        return 147\n    if n == 46:\n        return 151\n    if n == 47:\n        return 153\n    if n == 48:\n        return 155\n    if n == 49:\n        return 157\n    if n == 50:\n        return 161\n    if n == 51:\n        return 163\n    if n == 52:\n        return 165\n    if n == 53:\n        return 167\n    if n == 54:\n        return 171\n    if n == 55:\n        return 173\n    if n == 56:\n        return 175\n    if n == 57:\n        return 177\n    if n == 58:\n        return 181\n    if n == 59:\n        return 183\n    if n == 60:\n        return 185\n    if n == 61:\n        return 187\n    if n == 62:\n        return 191\n    if n == 63:\n        return 193\n    if n == 64:\n        return 195\n    if n == 65:\n        return 197\n    if n == 66:\n        return 201\n    if n == 67:\n        return 203\n    if n == 68:\n        return 205\n    if n == 69:\n        return 207\n    if n == 70:\n        return 211\n    if n == 71:\n        return 203\n    if n == 72:\n        return 205\n    if n == 73:\n        return 207\n    if n == 74:\n        return 221\n    if n == 75:\n        return 223\n    if n == 76:\n        return 225\n    if n == 77:\n        return 227\n    if n == 78:\n        return 231\n    if n == 79:\n        return 233\n    if n == 80:\n        return 235\n    if n == 81:\n        return 237\n    if n == 82:\n        return 241\n    if n == 83:\n        return 243\n    if n == 84:\n        return 245\n    if n == 85:\n        return 247\n    if n == 86:\n        return 251\n    if n == 87:\n        return 253\n    if n == 88:\n        return 255\n    if n == 89:\n        return 257\n    if n == 90:\n        return 261\n    if n == 91:\n        return 263\n    if n == 92:\n        return 265\n    if n == 93:\n        return 267\n    if n == 94:\n        return 271\n    if n == 95:\n        return 273\n    if n == 96:\n        return 275\n    if n == 97:\n        return 277\n    if n == 98:\n        return 281\n    if n == 99:\n        return 283\n    if n == 100:\n        return 285\n    if n == 101:\n        return 287\n    if n == 102:\n        return 291\n    if n == 103:\n        return 293\n    if n == 104:\n        return 295\n    if n == 105:\n        return 297\n    if n == 106:\n        return 301\n    if n == 107:\n        return 303\n    if n == 108:\n        return 305\n    if n == 109:\n        return 307\n    if n == 110:\n        return 311\n    if n == 111:\n        return 313\n    if n == 112:\n        return 315\n    if n == 113:\n        return 317\n    if n == 114:\n        return 321\n    if n == 115:\n        return 323\n    if n == 116:\n        return 325\n    if n == 117:\n        return 327\n    if n == 118:\n        return 331\n    if n == 119:\n        return 333\n    if n == 120:\n        return 335\n    if n == 121:\n        return 357\n    if n == 122:\n        return 361\n    if n == 123:\n        return 363\n    if n == 124:\n        return 365\n    if n == 125:\n        return 367\n    if n == 126:\n        return 371\n    if n == 127:\n        return 373\n    if n == 128:\n        return 375\n    if n == 129:\n        return 377\n    if n == 130:\n        return381\n    if n == 131:\n        return 383\n    if n == 132:\n        return 385\n    if n == 133:\n        return 387\n    if n == 134:\n        return391\n    if n == 135:\n        return393\n    if n == 136:\n        return395\n    if n == 137:\n        return397\n    if n == 138:\n        return401\n    if n == 139:\n        return403\n    if n == 140:\n        return405\n    if n == 141:\n        return407\n    if n == 142:\n        return411\n    if n == 143:\n        return413\n    if n == 144:\n        return415\n    if n == 145:\n        return417\n    if n == 146:\n        return421\n    if n == 147:\n        return423\n    if n == 148:\n        return425\n    if n == 149:\n        return427\n    if n == 150:\n        return431\n    if n == 151:\n        return433\n    if n == 152:\n        return435\n    if n == 153:\n        return437\n    if n == 154:\n        return441\n    if n == 155:\n        return443\n    if n == 156:\n        return445\n    if n == 157:\n        return447\n    if n == 158:\n        return451\n    if n == 159:\n        return453\n    if n == 160:\n        return455\n    if n == 161:\n        return457\n    if n == 162:\n        return461\n    if n == 163:\n        return463\n    if n == 164:\n        return465\n    if n == 165:\n        return467\n    if n == 166:\n        return471\n    if n == 167:\n        return473\n    if n == 168:\n        return475\n    if n == 169:\n        return477\n    if n == 170:\n        return481\n    if n == 171:\n        return483\n    if n == 172:\n        return485\n    if n == 173:\n        return487\n    if n == 174:\n        return491\n    if n == 175:\n        return493\n    if n == 176:\n        return495\n    if n == 177:\n        return497\n    if n == 178:\n        return501\n    if n == 179:\n        return503\n    if n == 180:\n        return505\n    if n == 181:\n        return507\n    if n == 182:\n        return511\n    if n == 183:\n        return513\n    i"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    \n    n += 1\n    n -= 2\n    return n * (n-1) // 6 + (n-1)//6 * 6\n    \n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n==0):\n        return (0)\n    if (n==1):\n        return 1\n    if (n==2):\n        return 1\n    return (n+1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    for x in range(1, n):\n        if x*x == n:\n            return x*x\n    else:\n        return 'Error: n must be a positive integer'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (((2*n) - 1) * (n - 1) + n)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        n = (n - 1) / 2\n    else:\n        n = (n + 1) / 2\n    return n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n<0:\n        raise ValueError(\"n must be positive\")\n    elif n>35:\n        raise ValueError(\"n must be less than 35\")\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(n):\n        '''\n        Function that takes an integer n and returns an integer\n        corresponding to the nth centered hexagonal number.\n        '''\n        i = 0\n        while n > i + 4:\n            if n % 6 == 0 and n % 12 == 0:\n                return n\n            n -= 6\n            i += 1\n        return n + 1\n    \n    return centered_hexagonal(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = dict1.copy()\n    final_dict.update(dict2)\n    final_dict.update(dict3)\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1.copy()\n    d2 = dict2.copy()\n    d3 = dict3.copy()\n    for key in d1.keys():\n        if d1[key]!= d2[key] or d1[key]!= d3[key] or d2[key]!= d3[key] or d3[key] == \"\":\n            print(\"Error: dictionary not merged.\")\n            break\n    for key in d2.keys():\n        if d1[key]!= d2[key] or d1[key]!= d3[key] or d2[key]!= d3[key] or d3[key] == \"\":\n            print(\"Error: dictionary not merged.\")\n            break\n    d1.update(d2)\n    d1.update(d3)\n    return d1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if k in dict2 and dict2[k] == dict3[k] and k not in dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    for key in dict2.keys():\n        result[key] = dict2[key]\n    for key in dict3.keys():\n        result[key] = dict3[key]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\ndef merge_dictionaries_three_reverse(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    for k,v in dict2.items():\n        result[k] = v\n    return result\ndef merge_dictionaries_two_reverse(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    for k,v in dict2.items():\n        result[k] = v\n    return result\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    for k,v in dict2.items():\n        result[k] = v\n    return result\ndef merge_dictionaries_one_reverse(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    for k,v in dict2.items():\n        result[k] = v\n    return result\ndef merge_dictionaries_sort(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict2 = dict2.copy()\n    keys = dict1.keys()\n    keys.sort()\n    result = {}\n    for k in keys:\n        result[k] = dict1[k]\n        result[k] = dict2[k]\n    return result\ndef merge_dictionaries_sort_reverse(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict2 = dict2.copy()\n    keys = dict1.keys()\n    keys.sort()\n    result = {}\n    for k in keys:\n        result[k] = dict1[k]\n        result[k] = dict2[k]\n    return result\ndef dict_to_str(dict):\n    '''\n    Write a function to convert a dictionary into a string.\n    '''\n    result = \"\"\n    for k,v in dict.items():\n        result = result + k + \":\" + str(v) + \",\"\n    return result[0:-1]\ndef main():\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    dict_3 = {\"c\": 7, \"d\": 8}\n    print(merge_dictionaries_three(dict_1,dict_2,dict_3))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_two(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_two_reverse(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_two_reverse(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_one(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_one_reverse(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_one_reverse(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_sort(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_sort(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_sort_reverse(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_sort_reverse(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_sort(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_sort(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_sort(dict_1,dict_2))\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    dict_2 = {\"a\": 4, \"b\": 5, \"d\": 6}\n    print(merge_dictionaries_sort_revers"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for key in dict1:\n        merged[key] = dict1[key]\n        if key in dict2:\n            merged[key] = dict2[key]\n        if key in dict3:\n            merged[key] = dict3[key]\n    for key in dict2:\n        if key not in merged:\n            merged[key] = dict2[key]\n    for key in dict3:\n        if key not in merged:\n            merged[key] = dict3[key]\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_final = dict()\n    for k,v in dict1.items():\n        if k in dict2.keys():\n            dict_final[k] = dict2[k]\n        elif k in dict3.keys():\n            dict_final[k] = dict3[k]\n        else:\n            dict_final[k] = v\n    for k,v in dict2.items():\n        if k in dict3.keys():\n            dict_final[k] = dict3[k]\n        else:\n            dict_final[k] = v\n    return dict_final\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\ndef reverse_freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef count_frequency(list1, character):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element == character:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\ndef string_to_counts(list1):\n    '''\n    Write a function to get the frequency of all the characters in a list.\n    '''\n    dictionary = {}\n    for element in list1:\n        dictionary[element] = list1.count(element)\n    return dictionary\ndef string_to_counts_reverse(list1):\n    '''\n    Write a function to get the frequency of all the characters in a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += list1.count(element)\n    return dictionary\ndef list_to_string(list1):\n    '''\n    Write a function to get the string of a list.\n    '''\n    string = ''\n    for element in list1:\n        string += element\n    return string\ndef list_to_string_reverse(list1):\n    '''\n    Write a function to get the string of a list.\n    '''\n    string = ''\n    for element in list1:\n        string += element\n    return string\ndef count_frequency_reverse(list1):\n    '''\n    Write a function to get the frequency of all the characters in a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef count_frequency_reverse_reverse(list1):\n    '''\n    Write a function to get the frequency of all the characters in a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef set_of_distinct_words(list1):\n    '''\n    Write a function to get the frequency of all the characters in a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef set_of_distinct_words_reverse(list1):\n    '''\n    Write a function to get the frequency of all the characters in a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef get_longest_word_length(list1):\n    '''\n    Write a function to get the longest word length from a list.\n    '''\n    length = 0\n    for element in list1:\n        if len(element) > length:\n            length = len(element)\n    return length\ndef unique_words(list1):\n    '''\n    Write a function to get the unique words from a list.\n    '''\n    dictionary = []\n    for element in list1:\n        dictionary.append(element)\n    return dictionary\ndef get_longest_word_length_reverse(list1):\n    '''\n    Write a function to get the longest word length from a list.\n    '''\n    length = 0\n    for element in list1:\n        if len(element) > length:\n            length = len(element)\n    return length\ndef find_longest_word(list1, list2):\n    '''\n    Write a function to get the longest word from a list.\n    '''\n    length = 0\n    for element in list1:\n        if len(element) > length:\n            length = len(element)\n    return length\ndef find_longest_word_reverse(list1, list2):\n    '''\n    Write a function to get the longest word from a list.\n    '''\n    length = 0\n    for element in list1:\n        if len(element) > length:\n            length = len(element)\n    return length\ndef longest_word(list1):\n    '''\n    Write a function to get the longest word from a list.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\ndef count_unique_words(list1):\n    '''\n    Write a function to get the unique words from a list.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\ndef count_unique_words_reverse(list1):\n    '''\n    Write a function to get the unique words from a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\ndef number_of_consecutive_characters(list1):\n    '''\n    Write a function to get the number of consecutive characters from a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef number_of_consecutive_characters_reverse(list1):\n    '''\n    Write a function to get the number of consecutive characters from a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef count_frequencies(list1):\n    '''\n    Write a function to get the frequency of each element from a list.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\ndef count_frequencies_reverse(list1):\n    '''\n    Write a function to get the frequency of each element from a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef reverse_count_frequencies(list1):\n    '''\n    Write a function to get the frequency of each element from a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef reverse_count_frequencies_reverse(list1):\n    '''\n    Write a function to get the frequency of each element from a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef count_frequency_reverse_reverse(list1):\n    '''\n    Write a function to get the frequency of each element from a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef reverse_count_frequencies_reverse_reverse(list1):\n    '''\n    Write a function to get the frequency of each element from a list.\n    '''\n    dictionary = collections.defaultdict(int)\n    for element in list1:\n        dictionary[element] += 1\n    return dictionary\ndef string_to_counts_list(list1):\n    '''\n    Write a function to get the frequency of each character from a list.\n    '''\n    dictionary = []\n    for element in list1:\n        dictionary.append(element)\n    return dictionary\ndef string_t"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = collections.Counter(list1)\n    dictionary.update()\n    return dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    mydictionary = collections.Counter(list1)\n    return mydictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # we will use map() to call the function, and then call the function on the elements and then sort the result\n    # at the same time we need to call the function with the sorted list\n    dict1 = collections.defaultdict(list)\n    list2 = list(map(list1.count,list1))\n    list2.sort()\n    print(list2)\n    for i in range(len(list2)):\n        dict1[list2[i]].append(i)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    return freq_dict\ndef get_freq_dict(list1):\n    '''\n    Write a function that returns a dictionary of all frequency of all the elements in a list.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    return freq_dict\ndef get_count_dict(list1):\n    '''\n    Write a function that returns a dictionary of all count of all the elements in a list.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    return freq_dict\ndef get_frequency_dict(list1):\n    '''\n    Write a function that returns a dictionary of all frequency of all the elements in a list.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    return freq_dict\ndef count_n_times(list1,n):\n    '''\n    Write a function that returns the count of the number of times n appears in the list.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    return freq_dict[n]\ndef compare(list1,list2):\n    '''\n    Write a function that returns a list of the elements that are not present in the first list.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    #if n not in list1, return list1\n    if n not in list1:\n        return list1\n    #return list2\n    return list2\ndef score_fun(list1,list2):\n    '''\n    Write a function that returns the score of the two lists.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    #if n not in list1, return list1\n    if n not in list1:\n        return list1\n    #if n in list2, return list2\n    if n in list2:\n        return list2\n    #if n not in list1 and n not in list2, return 0\n    if n not in list1 and n not in list2:\n        return 0\n    #return score of list1\n    return score(list1)\ndef score(list1):\n    '''\n    Write a function that returns the score of a given list.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    #if n not in list1, return list1\n    if n not in list1:\n        return list1\n    #if n in list2, return list2\n    if n in list2:\n        return list2\n    #if n not in list1 and n not in list2, return 0\n    if n not in list1 and n not in list2:\n        return 0\n    #return score of list1\n    return score(list1)\ndef get_score(list1):\n    '''\n    Write a function that returns the score of a given list.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    #if n not in list1, return list1\n    if n not in list1:\n        return list1\n    #if n in list2, return list2\n    if n in list2:\n        return list2\n    #if n not in list1 and n not in list2, return 0\n    if n not in list1 and n not in list2:\n        return 0\n    #return score of list1\n    return score(list1)\ndef get_final_list(list1,list2):\n    '''\n    Write a function that returns the list of elements that are the most common in both lists.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    #if n not in list1, return list1\n    if n not in list1:\n        return list1\n    #if n in list2, return list2\n    if n in list2:\n        return list2\n    #if n not in list1 and n not in list2, return 0\n    if n not in list1 and n not in list2:\n        return 0\n    #return list1+list2\n    return list1+list2\ndef compare_list(list1,list2):\n    '''\n    Write a function that returns a list of the elements that are not present in the first list, and the elements that are present in the second list.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    #if n not in list1, return list1\n    if n not in list1:\n        return list1\n    #if n in list2, return list2\n    if n in list2:\n        return list2\n    #if n not in list1 and n not in list2, return 0\n    if n not in list1 and n not in list2:\n        return 0\n    #return score of list1\n    return score(list1)\ndef compare_score(list1,list2):\n    '''\n    Write a function that returns a list of the elements that are the most common in both lists.\n    '''\n    #get frequency of all elements in list\n    freq = collections.Counter(list1)\n    #create a dictionary of frequency of list\n    freq_dict = collections.defaultdict(int)\n    #iterate over list, add to frequency dictionary\n    for i in freq:\n        freq_dict[i]+=1\n    #if n not in list1, return list1\n    if n not in list1:\n        return list1\n    #if n in list2, return list2\n    if n in list2:\n        return list2"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = collections.Counter(list1)\n    return dict(result)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # \"\"\"\n    # Create a dictionary of all the elements in list1.\n    # \"\"\"\n    # print(list1)\n    d = collections.Counter(list1)\n    # print(d)\n    # \"\"\"\n    # This function will return the frequency dictionary.\n    # \"\"\"\n    # return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\ndef dictionary_to_array(dictionary):\n    '''\n    Write a function to convert a dictionary into an array.\n    '''\n    arr = []\n    for key in dictionary:\n        arr.append(key)\n    return arr\ndef filter_values(dictionary, elements):\n    '''\n    Write a function that returns a dictionary, where all values in the dictionary are removed.\n    '''\n    dictionary = collections.OrderedDict(sorted(dictionary.items(), key=lambda x: x[0]))\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value in elements:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result= collections.Counter(list1)\n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    max = -1\n    i = -1\n    for i in range(len(N)):\n        if N[i] > max:\n            max = N[i]\n            i = i\n        elif N[i] == max:\n            if N[i] > N[i + 1]:\n                i = i + 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = abs(n-int(n))\n    smaller_num = n\n    for i in range(N):\n        if abs(n-i) < abs(n-smaller_num):\n            smaller_num = i\n    return smaller_num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return N\n    else:\n        return closest_num(N-1) + 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_difference = abs(N-smallest)\n    for num in range(N,0,-1):\n        if num < smallest and num!= smallest:\n            smallest_difference = abs(num-smallest)\n        if num < smallest and num == smallest:\n            smallest_difference = abs(num-smallest)\n    return smallest_difference\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for num in range(1, N + 1):\n        if num < N:\n            if num % 2 == 0:\n                print(num, end=' ')\n            else:\n                print(num, end=' ')\n    print()\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = sorted(N, reverse=True)\n    print(l)\n    return l[-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert type(N) is int, '\"N\" must be an integer'\n    assert N >= 1, '\"N\" must be positive'\n    assert N % 10 == 0, '\"N\" must be divisible by 10'\n    assert N >= N - 1, '\"N\" must be smaller than or equal to \"n - 1\"'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_smaller(x, y):\n        return abs(x - y) <= 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = 0\n    for i in range(len(N)):\n        if N[i] > closest_num:\n            closest_num = N[i]\n    return closest_num\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = 0\n    if len(list1) == 0:\n        return 0\n    for word in list1:\n        if len(word) > longest_word:\n            longest_word = len(word)\n    return longest_word\n    \ndef main():\n    '''\n    Call the main function to prompt the user for the file\n    and to read the file.\n    '''\n    try:\n        file = open(input(\"Enter the file name: \"), 'r')\n        file = file.read()\n        file = file.lower()\n        file = file.split()\n        file = [item.replace(\"\\n\", \" \") for item in file]\n        file = [item for item in file if len(item) > 0]\n        file = file.replace(\" \", \"\")\n        file = file.replace(\"(\", \"\")\n        file = file.replace(\")\", \"\")\n        file = file.replace(\"+\", \"\")\n        file = file.replace(\"-\", \"\")\n        file = file.replace(\"_\", \" \")\n        file = file.replace(\"/\", \" \")\n        file = file.replace(\"\\\"\", \"\")\n        file = file.split()\n        file = [item for item in file if item!= \"\"]\n        file = file.remove(\" \")\n        file = file.remove(\"(\")\n        file = file.remove(\")\")\n        file = file.remove(\")\")\n        file = file.remove(\"+\")\n        file = file.remove(\"-\")\n        file = file.remove(\"_\")\n        file = file.remove(\"/\")\n        file = file.remove(\"\\\"\")\n        file = file.split()\n        file = [item for item in file if item!= \"\"]\n        file = file.remove(\")\")\n        file = file.remove(\")\")\n        file = file.remove(\")\")\n        file = file.remove(\")\")\n        file = file.remove(\")\")\n        file = file.remove(\"(\")\n        file = file.remove(\" \")\n        file = file.remove(\"[\")\n        file = file.remove(\"]\")\n        file = file.remove(\"{\")\n        file = file.remove(\"}\")\n        file = file.replace(\"\\t\", \"\")\n        file = file.replace(\"\\r\", \"\")\n        file = file.replace(\"\\n\", \"\")\n        file = file.replace(\" \", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = file.replace(\"()\", \"\")\n        file = fil"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return\n    max_len = 0\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if len(list1[i]) > len(list1[j]):\n                max_len = max(len(list1[i]),len(list1[j]))\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        if len(list1) == 1:\n            return 1\n        else:\n            return len(list1[0])\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(max(list1,key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    str1 = ''\n    for i in list1:\n        if len(i) > len(str1):\n            str1 = i\n    return len(str1)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word = list1.split(' ')\n    return len(max(word, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for i in list1:\n        for j in i:\n            if len(j) > len(longest):\n                longest = j\n    return(longest)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    start = 0\n    end = len(str1) - 1\n    \n    while start < end:\n        if str1[start] == sub_str[0]:\n            if str1[start:].find(sub_str[0])!= -1:\n                return True\n            start += 1\n        else:\n            start += 1\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    else:\n        sub_str = str(sub_str)\n        sub_str = sub_str.lower()\n        if sub_str in str1:\n            return True\n        else:\n            return False\n    # for i in range(len(str1)):\n    #     if sub_str in str1[i:i+len(sub_str)]:\n    #         return True\n    #     else:\n    #         return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    i, j = 0, len(sub_str) - 1\n    while i < j:\n        if sub_str[i]!= str1[j]:\n            if str1[i] == str1[j]:\n                i += 1\n                j -= 1\n            else:\n                return False\n        else:\n            i += 1\n            j -= 1\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    n = 0\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            print(\"sub_str found at \" + str(i))\n            n = n + 1\n            #print(\"n: \" + str(n))\n    if n == 0:\n        return 0\n    else:\n        return n\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    index = 0\n    start = 0\n    end = 0\n    length = len(str1)\n    if len(sub_str) > length:\n        return False\n    for i in range(len(str1)):\n        if start == 0:\n            if str1[i:i+len(sub_str)] == sub_str:\n                start = i\n                end = i+len(sub_str)\n                index = i\n        elif end == length:\n            if str1[i:i+len(sub_str)] == sub_str:\n                end = i\n                index = i\n        else:\n            if str1[i:i+len(sub_str)]!= sub_str[start:end]:\n                return False\n            start = i\n            end = i+len(sub_str)\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = list(sub_str)\n    \n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str_list:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    res = []\n    for i in range(0, len(sub_str)):\n        if i >= len(str1):\n            res.append(False)\n            break\n        elif str1[i:i+len(sub_str)] == sub_str:\n            res.append(True)\n            break\n    return res\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1:\n        return False\n    elif str1[0] == sub_str:\n        return True\n    else:\n        return find_substring(str1[1:], sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Code to illustrate the purpose of this function\n    # print(\"Find substring in the string:\")\n    # print(str1)\n    # print(sub_str)\n    # if sub_str in str1:\n    #     return True\n    # else:\n    #     return False\n    # print(\"Returning false since there is no sub_string\")\n    sub_string_index = 0\n    for i in range(0, len(sub_str)):\n        if sub_str[i] in str1:\n            # print(\"Found: \", sub_str[i])\n            sub_string_index = sub_string_index + 1\n            if sub_string_index == len(sub_str):\n                # print(\"Returning false since there is no sub_string\")\n                break\n    if sub_string_index == len(sub_str):\n        return True\n    else:\n        return False\n    # print(\"Returning false since there is no sub_string\")\n    # return False\n    \n    # if sub_str in str1:\n    #     return True\n    # else:\n    #     return False\n    # print(\"Returning false since there is no sub_string\")\n    # return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #Your code here\n    #if n==0:\n        #return True\n    #else:\n        #return False\n    #raise NotImplementedError('your function is not implemented')\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0: \n        return False\n    if (n % 2) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # your code here\n    if n == 1: \n        return True\n    elif n > 1: \n        return is_undulating(n - 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Solution 1:\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    # Runtime: 56 ms (93.99%)\n    # Memory Usage: 14.7 MB (45.08%)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # TODO: Write your code here\n    return n>=1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return(n%3 == 0 or n%5 == 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0 \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulator(n):\n        return n % 2!= 0 and n % 5!= 0\n    return (is_undulator(n) and not is_undulating(n)) \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x = n\n    while x % 2 == 0:\n        x = x/2\n        if x == 1:\n            return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(5,2))\nprint(power(5,3))\nprint(power(5,4))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result=a**b\n    return result\n    \ndef solve():\n    '''\n    Read a user input and print the expression\n    '''\n    a=int(input(\"Enter a: \"))\n    b=int(input(\"Enter b: \"))\n    print(power(a,b))\n    \nsolve("
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b%2 == 0:\n        return a**b\n    else:\n        return a**(b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if a == 0:\n        return 0\n    if a<0:\n        return power(a, -b)\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    min_val = test_list[0][1]\n    for item in test_list:\n        if item[1] < min_val:\n            min_val = item[1]\n            index = item[0]\n    return index\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Create a function that takes a list and returns a list of tuples.\n    #  HINT: Go through each index of the array and create a list of tuples of the form:\n    #        [array_index, (second_value, index_of_second_value)]\n    #        Return the first value of the list.\n    #\n    # HINT: In case the list has more than one element, your function should return the smallest of the two values.\n    #\n    # HINT: If you know how to sort the list, please consider a different method\n    #\n    # HINT: Use a nested loop to iterate through each list element and check the second value. \n    #       If you get the second value, it is a minimum value, otherwise, it is the next smallest.\n    #       Do this by adding to the minimum_value_index index and subtracting to the minimum_value_index\n    #       in the reverse order. \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp_dict = {}\n    for tuple_tuple in test_list:\n        # Using the dictionary method, we can get the key (The value) and its value (The second value)\n        temp_key = tuple_tuple[0]\n        temp_value = tuple_tuple[1]\n        if temp_key in temp_dict:\n            if temp_dict[temp_key] < temp_value:\n                temp_dict[temp_key] = temp_value\n            else:\n                temp_dict[temp_key] = temp_value\n        else:\n            temp_dict[temp_key] = temp_value\n    return min(temp_dict.values())\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    min_val = test_list[0][0]\n    min_indx = 0\n    \n    for indx, item in enumerate(test_list):\n        if item[0] < min_val:\n            min_val = item[0]\n            min_indx = indx\n            \n    return min_val, min_indx\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return 'Empty'\n    \n    smallest_value = test_list[0][1]\n    smallest_index = 0\n    for index, item in enumerate(test_list):\n        if smallest_value < item[1]:\n            smallest_value = item[1]\n            smallest_index = index\n    return test_list[smallest_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for item in test_list:\n        if item[1] < item[2]:\n            return item[0]\n    return None\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the last value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[1] > item[2]:\n            return item[0]\n    return None\ndef index_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[1] < item[2]:\n            return (item[0] + item[1] + item[2]) / 3\n    return None\ndef index_length(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the tuple.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[1]\n    return total\ndef first_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for item in test_list:\n        if item[1] < item[2]:\n            return item[0]\n    return None\ndef first_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[1] > item[2]:\n            return item[0]\n    return None\ndef first_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second smallest value.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[1]\n    return total / len(test_list)\ndef second_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the second value of the tuple with the smallest second value.\n    '''\n    for item in test_list:\n        if item[2] < item[1]:\n            return item[0]\n    return None\ndef second_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the second value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[2] > item[1]:\n            return item[0]\n    return None\ndef second_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the second value of the tuple with the second smallest value.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[2]\n    return total / len(test_list)\ndef third_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the third value of the tuple with the smallest third value.\n    '''\n    for item in test_list:\n        if item[3] < item[1]:\n            return item[0]\n    return None\ndef third_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the third value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[3] > item[1]:\n            return item[0]\n    return None\ndef third_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the third value of the tuple with the second smallest value.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[3]\n    return total / len(test_list)\ndef fourth_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the fourth value of the tuple with the smallest third value.\n    '''\n    for item in test_list:\n        if item[4] < item[1]:\n            return item[0]\n    return None\ndef fourth_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the fourth value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[4] > item[1]:\n            return item[0]\n    return None\ndef fourth_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the fourth value of the tuple with the second smallest value.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[4]\n    return total / len(test_list)\ndef fifth_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the fifth value of the tuple with the smallest fourth value.\n    '''\n    for item in test_list:\n        if item[5] < item[1]:\n            return item[0]\n    return None\ndef fifth_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the fifth value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[5] > item[1]:\n            return item[0]\n    return None\ndef fifth_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the fifth value of the tuple with the second smallest value.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[5]\n    return total / len(test_list)\ndef sixth_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sixth value of the tuple with the smallest fourth value.\n    '''\n    for item in test_list:\n        if item[6] < item[1]:\n            return item[0]\n    return None\ndef sixth_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sixth value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[6] > item[1]:\n            return item[0]\n    return None\ndef sixth_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sixth value of the tuple with the second smallest value.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[6]\n    return total / len(test_list)\ndef seventh_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the seventh value of the tuple with the smallest fifth value.\n    '''\n    for item in test_list:\n        if item[7] < item[1]:\n            return item[0]\n    return None\ndef seventh_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the seventh value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if item[7] > item[1]:\n            return item[0]\n    return None\ndef seventh_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the seventh value of the tuple with the second smallest value.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[7]\n    return total / len(test_list)\ndef eighth_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the eighth value of the tuple with the smallest sixth value.\n    '''\n    for item in test_list:\n        if item[8] < item[1]:\n            return item[0]\n    return None\ndef eighth_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the eighth value of the tuple with the second smallest value.\n    '''\n    for item in test_list:\n        if ite"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        raise ValueError(\"List is empty\")\n    \n    minimum = min(test_list, key = itemgetter(1))\n    return(minimum[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #for item in test_list:\n    #    print(item[1])\n    #print(\"\\n\")\n    if len(test_list) == 0:\n        return \"No values in the list\"\n    min_val = test_list[0][1]\n    #print(f\"The minimum value in the list: {min_val}\")\n    for item in test_list:\n        if item[1] < min_val:\n            min_val = item[1]\n            #print(f\"The minimum value in the list: {min_val}\")\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    min_val = test_list[0][0]\n    min_second = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n            min_second = test_list[i][1]\n        elif test_list[i][1] < min_second:\n            min_second = test_list[i][1]\n    return min_val, min_second\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #Use a loop and a function to find the minimum\n    minimum_length=0\n    for i in lst:\n        for j in i:\n            if j<minimum_length:\n                minimum_length=j\n    #Print the minimum length\n    print(minimum_length)\n    #Return the length\n    return minimum_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Set minimum length\n    min_len = len(lst)\n    # Loop through each sublist\n    for sublist in lst:\n        # Check each element in sublist\n        for i in range(len(sublist)):\n            # Get the length of the sublist\n            # Check each element in the sublist\n            # Add the length of the list if less then the minimum length\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n            elif len(sublist) == min_len:\n                # if sublist is longer, then append the minimum length to the sublist\n                # if len(sublist) < len(min_len):\n                sublist.append(min_len)\n                break\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    new_lst = list()\n    for i in range(len(lst)):\n        new_lst.append(len(lst[i]))\n    return min(new_lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = 0\n    for list1 in lst:\n        for x in list1:\n            if x < smallest:\n                smallest = x\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    smallestLength = 0\n    for i in lst:\n        if i < smallest:\n            smallest = i\n            smallestLength = 0\n        elif i < smallestLength:\n            smallestLength = i\n    return smallestLength\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum_length = lst[0]\n    for i in lst:\n        if i < minimum_length:\n            minimum_length = i\n    return minimum_length"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # build a dict: key:list, value:length\n    dict = {}\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        smallest_length = 0\n        for i in lst:\n            smallest_length = min(i, smallest_length)\n        return smallest_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_list = lst[0]\n    smallest_list_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < smallest_list_length:\n            smallest_list_length = len(lst[i])\n    return smallest_list_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLen = 0\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst[i])):\n            if lst[i][j] < lst[i][minLen]:\n                minLen = j\n    return minLen\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1, n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    while(i<=n):\n        if n%i==0:\n            print(i)\n            i+=1\n        else:\n            i+=1\n    return(i)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count = count + 1\n    return count\ndef main():\n    '''\n    write a python function to find the number of divisors of a given integer.\n    '''\n    print(divisor(int(input(\"Enter a number to find its divisors: \"))))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            num += 1\n    return num\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    counter = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            counter += 1\n            \n    return counter\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1+divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    def divisors(n):\n        '''\n        Assume n is an integer. Return the list of all divisors of n.\n        \n        '''\n        d = []\n        for i in range(1, int(n/2)+1):\n            if n%i==0:\n                d.append(i)\n                d.append(n//i)\n        return d\n    \n    return divisors(n)\n    \ndef word_to_list(w):\n    '''\n    Convert word in list of words separated by spaces to a list of words.\n    '''\n    return w.split(' ')\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    else:\n        i=1\n        while i<=n:\n            if n%i==0:\n                if n/i==i:\n                    divisors.append(i)\n                else:\n                    divisors.append(n/i)\n                i+=1\n            else:\n                i+=1\n        return len(divisors)\n    \n    \n    \n    \nprint(divisor(5))"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for el in list1:\n        if el in result.keys():\n            result[el] += 1\n        else:\n            result[el] = 1\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    count = {}\n    for sublist in list1:\n        for element in sublist:\n            if element not in count:\n                count[element] = 1\n            else:\n                count[element] += 1\n    return count\n    \ndef frequency_sort(list1):\n    '''\n    Write a function that takes a sorted list and return its sorted list with counts.\n    '''\n    freq_list = frequency_lists(list1)\n    for key in sorted(freq_list):\n        list1.remove(key)\n    return list1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_freq = {}\n    freq_list = []\n    for x in list1:\n        dict_freq[x[0]] = dict_freq.get(x[0], 0) + 1\n    for key in dict_freq:\n        freq_list.append(dict_freq.get(key, 0))\n    return dict_freq, freq_list\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for l in list1:\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # get the number of elements in a list\n    # return the dictionary\n    number_of_elements = len(list1)\n    # initialize a list of elements\n    list_of_elements = []\n    for i in range(number_of_elements):\n        list_of_elements.append(list1[i][0])\n    # set up the dictionary\n    element_frequency = {}\n    for element in list_of_elements:\n        if element not in element_frequency:\n            element_frequency[element] = 1\n        else:\n            element_frequency[element] += 1\n    return element_frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    print(list1)\n    frequency_dict = {}\n    for element in list1:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    print(frequency_dict)\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = list1.copy()\n    list2.remove([0,0,0])\n    freq = {}\n    for i in range(len(list2)):\n        for j in range(i+1,len(list2)):\n            if list2[i][0] == list2[j][0] and list2[i][1] > list2[j][1]:\n                freq[list2[i][0]] = freq.get(list2[i][0],0) + 1\n            if list2[i][1] > list2[j][1] and list2[i][0] > list2[j][0]:\n                freq[list2[j][0]] = freq.get(list2[j][0],0) + 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    frequency = {}\n    # initialize the list\n    list2 = list(list1)\n    # iterate through the list to find the unique elements\n    for x in list2:\n        # if the element is not in the dictionary\n        if x not in frequency.keys():\n            # add the element to the dictionary\n            frequency[x] = 1\n        else:\n            # increment the count of that element\n            frequency[x] += 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counter = {}\n    for i in list1:\n        for j in i:\n            if j in counter:\n                counter[j] = counter[j] + 1\n            else:\n                counter[j] = 1\n    return counter\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 0\n    for number in numbers:\n        result = result + number\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul=1\n    if len(numbers)==0:\n        return 0\n    else:\n        for i in numbers:\n            mul=mul*i\n        return mul\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult_num = []\n    length = len(numbers)\n    for num in numbers:\n        mult_num.append(num*length)\n    return mult_num\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result=1\n    for number in numbers:\n        result *= number\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for n in numbers:\n        product *= n\n    return product\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    for num in numbers:\n        mult = mult * num\n    return mult\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # % is used to get the remainder of the division.\n    # %f is used to get the float.\n    # numbers = [4, 2, 6, 3, 1]\n    # multiply each item with the length of numbers\n    # return multiply each item.\n    result = []\n    for item in numbers:\n        result.append(item*len(numbers))\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # your code here\n    num = 1\n    for x in numbers:\n        num *= x\n    return num\n    \nprint(multiply_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    # Loop over the list\n    for num in numbers:\n        print(num * num)\n    \n    # Divide the numbers\n    for num in numbers:\n        print(num / len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers.sort()\n    total = 1\n    for i in range(len(numbers)-1):\n        total = total * numbers[i]\n    return total\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the given number to two's complement.\n    n = -n\n    \n    # Convert it into a binary string.\n    res = format(n, 'b').zfill(8)\n    \n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = str(n)\n    return '0' * (len(s)-len(s[::-1])) + s[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    import math\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0: \n        return '0'\n    else: \n        res = str(n)\n        res = res[:len(res)-1] \n        binary = '' \n        for i in range(len(res)): \n            if res[i] == '0': \n                binary += '0'\n            elif res[i] == '1': \n                binary += '1'\n        return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    n = abs(n)\n    if n == 0:\n        return \"0\"\n    bin_list = []\n    while n > 0:\n        tmp = n % 2\n        bin_list.append(tmp)\n        n = n//2\n    bin_str = \"\".join(bin_list)\n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    for i in range(len(str(n))):\n        result += str(bin(n)[2:])\n        if i < len(str(n))-1: \n            result += '0'\n        else: \n            result += '1'\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = [] \n    while n!= 0: \n        n, mod = divmod(n, 2) \n        binary.append(str(mod)) \n    return \"\".join(binary[::-1]) \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    if n <= 0:\n        return None\n    while n > 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = str(n)\n    return s[2:]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            num = num / i\n        else:\n            i += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1 or num == 0:\n        return num\n    \n    n = num // 2\n    return next_smallest_palindrome(n) + 1 if n % 2 == 0 else next_smallest_palindrome(n + 1)\n    "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Your code here\n    # hint: Use a recursive function that returns the next smallest palindrome that has a degree of 2 (even) or 3 (odd)\n    def next_smallest_palindrome_2(num):\n        if num == 1:\n            return 2\n        if num == 2:\n            return 3\n        if num < 2:\n            return 1\n        else:\n            for i in range(2, int(math.sqrt(num))+1):\n                if num % i == 0:\n                    break\n            if num % i == 0:\n                return 2\n            else:\n                return 3\n    def next_smallest_palindrome_3(num):\n        if num == 1:\n            return 2\n        if num == 2:\n            return 3\n        if num < 2:\n            return 1\n        else:\n            for i in range(2, int(math.sqrt(num))+1):\n                if num % i == 0:\n                    break\n            if num % i == 0:\n                return 2\n            else:\n                return 3\n    # if palindrome has a degree of 2 or 3\n    # then return the two smallest palindrome\n    if num % 2 == 0 or num % 3 == 0:\n        if num < 2:\n            return 2\n        else:\n            return 3\n    else:\n        if num < 2:\n            return 1\n        else:\n            for i in range(2, int(math.sqrt(num))+1):\n                if num % i == 0:\n                    break\n            if num % i == 0:\n                return 2\n            else:\n                return 3\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 1\n    elif num % 2 == 0:\n        return num / 2\n    else:\n        return num * 3 + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num % 2 == 0:\n        return 3\n    else:\n        return 4\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    isPalindrome = False\n    end = len(num)-1\n    start = 0\n    while start <= end:\n        mid = start + (end-start)//2\n        if num[mid] == num[mid-1] and num[mid]!= num[mid+1]:\n            isPalindrome = True\n            break\n        elif num[mid] == num[mid-1] and num[mid] == num[mid+1]:\n            start += 1\n        elif num[mid] == num[mid-1] and num[mid] == num[mid+1]:\n            end -= 1\n        elif num[mid]!= num[mid-1] and num[mid]!= num[mid+1]:\n            start += 1\n    if isPalindrome == False:\n        return None\n    return num[start-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            pass\n        else:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 1:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome3(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 2:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome4(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 3:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome5(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 4:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome6(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 5:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome7(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 6:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome8(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 7:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome9(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 8:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome10(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 9:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome11(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 10:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome12(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 11:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome13(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 12:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome14(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 13:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome15(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 14:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome16(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 15:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome17(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 16:\n        return num\n    for x in range(len(num_string)):\n        if num_string[x] == num_string[x+1]:\n            return num_string[x+1]\n    return num\ndef next_smallest_palindrome18(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_strin"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    l = 0\n    r = num\n    \n    while r > 1:\n        mid = l + (r-1)//2\n        if mid % 2 == 0:\n            if num == mid:\n                return mid\n            elif num < mid:\n                l = mid + 1\n                r = mid - 1\n            else:\n                r = mid - 1\n        elif mid % 2 == 1:\n            if num == mid:\n                return mid\n            elif num < mid:\n                l = mid + 1\n                r = mid + 1\n            else:\n                r = mid + 1\n    return l\n    \ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(5) == 6\n    assert next_smallest_palindrome(4) == 3\n    assert next_smallest_palindrome(2) == 0\n    assert next_smallest_palindrome(1) == 0\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(5) == 6\n    assert next_smallest_palindrome(6) == 5\n    assert next_smallest_palindrome(5) == 5\n    assert next_smallest_palindrome(4) == 4\n    assert next_smallest_palindrome(3) == 3\n    assert next_smallest_palindrome(2) == 2\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(0) == 0\n    assert next_smallest_palindrome(1) == 1\n    assert next_smallest_palindrome(2) == 2\n    assert next_smallest_palindrome(3) == 3\n    assert next_smallest_palindrome(4) == 4\n    assert next_smallest_palindrome(5) == 5\n    assert next_smallest_palindrome(6) == 6\n    assert next_smallest_palindrome(5) == 5\n    assert next_smallest_palindrome(6) == 6\n    \ndef test_find_palindrome():\n    assert find_palindrome(12) == 12\n    assert find_palindrome(2) == 1\n    assert find_palindrome(4) == 4\n    assert find_palindrome(8) == 8\n    assert find_palindrome(15) == 15\n    assert find_palindrome(36) == 36\n    assert find_palindrome(8) == 8\n    assert find_palindrome(12) == 12\n    assert find_palindrome(0) == 0\n    assert find_palindrome(1) == 0\n    assert find_palindrome(2) == 2\n    assert find_palindrome(4) == 4\n    assert find_palindrome(6) == 6\n    assert find_palindrome(16) == 16\n    assert find_palindrome(50) == 50\n    assert find_palindrome(1) == 1\n    assert find_palindrome(0) == 0\n    assert find_palindrome(1) == 1\n    assert find_palindrome(2) == 2\n    assert find_palindrome(8) == 8\n    assert find_palindrome(15) == 15\n    assert find_palindrome(36) == 36\n    assert find_palindrome(8) == 8\n    assert find_palindrome(12) == 12\n    assert find_palindrome(0) == 0\n    assert find_palindrome(1) == 1\n    assert find_palindrome(2) == 2\n    assert find_palindrome(4) == 4\n    assert find_palindrome(6) == 6\n    assert find_palindrome(16) == 16\n    assert find_palindrome(50) == 50\n    \ndef test_find_palindrome_with_variations():\n    assert find_palindrome_with_variations(12) == 12\n    assert find_palindrome_with_variations(2) == 1\n    assert find_palindrome_with_variations(4) == 4\n    assert find_palindrome_with_variations(8) == 8\n    assert find_palindrome_with_variations(15) == 15\n    assert find_palindrome_with_variations(36) == 36\n    assert find_palindrome_with_variations(8) == 8\n    assert find_palindrome_with_variations(12) == 12\n    assert find_palindrome_with_variations(0) == 0\n    assert find_palindrome_with_variations(1) == 1\n    assert find_palindrome_with_variations(2) == 2\n    assert find_palindrome_with_variations(4) == 4\n    assert find_palindrome_with_variations(6) == 6\n    assert find_palindrome_with_variations(16) == 16\n    assert find_palindrome_with_variations(50) == 50\n    \ndef test_find_all_palindromes():\n    assert find_all_palindromes(2) == [2, 2]\n    assert find_all_palindromes(3) == [3, 3, 3]\n    assert find_all_palindromes(4) == [4, 4, 4]\n    assert find_all_palindromes(5) == [5, 5]\n    assert find_all_palindromes(6) == [6, 6]\n    assert find_all_palindromes(7) == [7, 7, 7]\n    assert find_all_palindromes(8) == [8, 8, 8, 8]\n    assert find_all_palindromes(12) == [12, 12]\n    assert find_all_palindromes(0) == []\n    assert find_all_palindromes(1) == [1]\n    assert find_all_palindromes(2) == [2, 2]\n    assert find_all_palindromes(4) == [4, 4, 4]\n    assert find_all_palindromes(6) == [6, 6]\n    assert find_all_palindromes(16) == [16, 16, 16, 16]\n    assert find_all_palindromes(50) == [50, 50]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v1(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the first number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v2(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v3(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v4(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v5(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v6(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v7(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v8(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v9(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v10(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v11(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v12(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v13(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v14(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v15(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_palindrome_v16(num):\n    '''\n    Return the next smallest palindrome of a specified integer, \n    in this case, the next number is the next smallest palindrome \n    of the next number.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num%2==0:\n        return 2**(num-1)+1\n    else:\n        return 2**(num-1)-1\ndef next_smallest_pa"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    \n    is_palindrome = lambda num: num % 10 == 0\n    palindrome = lambda num: (num % 10) > 0\n    palindrome_palindrome = lambda num: num == num and is_palindrome(num)\n    \n    is_palindrome_palindrome = lambda num: num == num and palindrome_palindrome(num)\n    \n    for i in range(2,int(num**0.5)+1):\n        if is_palindrome_palindrome(i):\n            continue\n        if is_palindrome(i) and palindrome_palindrome(i):\n            return i\n        \n    if is_palindrome(num):\n        return num\n    else:\n        return next_smallest_palindrome(num)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1)]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #base case\n    if k == 0:\n        return 0\n    \n    #base case for k = 0\n    if arr[0] == k:\n        return arr[0]\n    \n    #recursive case\n    #k = k - 1\n    #find the kth element\n    return kth_element(arr, k-1)"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # O(n)\n    # To find kth element in array we need to look at kth element in array and we can use binary search on array\n    # (100% of every array, so k = 5 is ok)\n    left, right = 0, len(arr) - 1\n    while left < right:\n        middle = left + (right - left) // 2\n        if arr[middle] == k:\n            return arr[middle]\n        elif arr[middle] < k:\n            left = middle + 1\n        else:\n            right = middle\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # 1. initialize an empty array\n    arr_k = []\n    for x in range(len(arr)):\n        arr_k.append(arr[x][k])\n    \n    # 2. find the kth element using a for loop\n    for x in range(len(arr)):\n        if k == x:\n            return arr_k[x]\n        \n    # 3. return -1 if not found\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    length = len(arr)\n    if(k >= length or k < 0):\n        raise ValueError(\"k must be in [0, {})\".format(length))\n    \n    if(k == 0):\n        return arr[0]\n    \n    return arr[k - 1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr)==0:\n        raise Exception(\"Array is empty.\")\n    if k<=0:\n        raise Exception(\"K must be greater than 0.\")\n    low=0\n    high=len(arr)-1\n    if k==0:\n        return arr[0]\n    while low<=high:\n        mid=low+(high-low)//2\n        if arr[mid]==k:\n            return arr[mid]\n        elif arr[mid]>k:\n            high=mid-1\n        else:\n            low=mid+1\n    return arr[mid]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0].upper()=='_':\n        return word\n    return word[0].upper()+word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0] == '_':\n        return word\n    else:\n        first = word[0]\n        newword = \"\"\n        for letter in word:\n            if letter == first:\n                newword += \"_\"\n            else:\n                newword += letter\n        return newword[:-1] + \"CamelCase\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    capitalize = \"\"\n    lowercase = \"\"\n    underscore = \"\"\n    words = word.split(\"_\")\n    # loop through each word in the word, lowercase each letter, split each letter in '_' into a list,\n    # and assign the last element to the capitalize variable.\n    for i in range(0, len(words)):\n        lowercase = lowercase + words[i].lower() + \"_\"\n        if len(lowercase) == 1:\n            capitalize = capitalize + lowercase\n        else:\n            underscore = underscore + lowercase\n    # concatenate the two lists back together.\n    if len(words) > 1:\n        return capitalize + underscore\n    return capitalize\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace('-','_').replace('_','-').capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    if len(word) > 1:\n        i = word.find('_')\n        if i > 0:\n            word = word[:i] + word[i].upper() + word[i + 1:]\n        new_word = word[0].upper() + word[1:]\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word.isalnum():\n        return word\n    else:\n        return word.lower()[0].upper() + word.lower()[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = word\n    d = {}\n    for c in s:\n        if c.isupper():\n            d[c] = c.lower()\n        else:\n            d[c.lower()] = c\n    return ''.join(d.values())\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # The number of vertices and edges (including self-loops) is n + m.\n    n_vertices = n + m\n    # The vertices list is a list of tuples (v, e).\n    # v is the index of the vertex in the list of tuples.\n    # e is the index of the edge in the list of tuples.\n    edges = []\n    for v in range(1, n_vertices):\n        edges.append((v, v+1))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # find all permutations of 2^m\n    permutations = itertools.combinations(range(m), 2)\n    # for each permutation find the Eulerian number\n    def getEulerian(n, m):\n        if n == m:\n            return 0\n        if n < m:\n            # only need to check for a(n, m) to avoid \"at least one cycle\"\n            # TODO: improve complexity of this\n            a = getEulerian(n+1, m)\n            if n % 2 == 0:\n                # print(\"Trying to find Eulerian number a(n, m):\", n, m)\n                a += getEulerian(n//2, m)\n            return a\n        else:\n            return 1\n    \n    return getEulerian(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    if n == m == 0: \n        return 0\n    \n    elif n == 1: \n        return 1\n    \n    else: \n        if n % 2 == 1: \n            return eulerian_num(n/2, m) + eulerian_num(n, m - 1) + 1\n        else: \n            return eulerian_num(n/2, m) + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    euler = 1\n    \n    # if n > m:\n    #     return 0\n    \n    # if n == m:\n    #     return 1\n    \n    # if n > m:\n    #     return eulerian_num(n - 1, m)\n    \n    # else:\n    #     return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n    \n    # for i in range(1, n):\n    #     euler = euler + eulerian_num(i, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # if m == 1:\n    #     return 2\n    # else:\n    #     return 3\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    s = 0\n    for i in range(1, m + 1):\n        if a % i == 0:\n            a = a/i\n            s += a\n    return s\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def isEulerian(root, nums):\n        if root in nums: return True\n        if not root: return False\n        if not nums[root]: return True\n        if root in nums and isEulerian(nums[root][0], nums) or isEulerian(nums[root][0], nums): return True\n        if root in nums and isEulerian(nums[root][1], nums) or isEulerian(nums[root][1], nums): return True\n        nums[root].append(root)\n        return False\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    import math\n    d = set(range(n))\n    d.remove(0)\n    for i in d:\n        if i!= 0:\n            for j in d:\n                if i == j:\n                    continue\n                if i*j == n-i:\n                    return i*j\n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    def dfs(n, m):\n        nonlocal count\n        if m == 0:\n            count += 1\n            return n\n        else:\n            if m % 2 == 0:\n                return dfs(n, m / 2)\n            else:\n                if n % m == 0:\n                    return dfs(n, m / 2)\n                elif n % m == 1:\n                    return n + 1\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n\n    if n == 0: \n        return m \n    if n % 2 == 0: \n        return eulerian_num(n-1, m) + m\n    else: \n        return eulerian_num(n-1, m) \n    \n    "
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for item in sublist:\n            item.sort()\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j] == \" \":\n                input_list[i][j] = \" \"\n            elif input_list[i][j] == \",\":\n                input_list[i][j] = \",\"\n            elif input_list[i][j] == \".\":\n                input_list[i][j] = \".\"\n            elif input_list[i][j] == \":\":\n                input_list[i][j] = \":\"\n            elif input_list[i][j] == \"-\":\n                input_list[i][j] = \"-\"\n            elif input_list[i][j] == \"!\":\n                input_list[i][j] = \"!\"\n            elif input_list[i][j] == \"$\":\n                input_list[i][j] = \"$\"\n            elif input_list[i][j] == \"&\":\n                input_list[i][j] = \"&\"\n            elif input_list[i][j] == \"*\":\n                input_list[i][j] = \"*\"\n            elif input_list[i][j] == \"(\":\n                input_list[i][j] = \"(\"\n            elif input_list[i][j] == \")\":\n                input_list[i][j] = \")\"\n            elif input_list[i][j] == \"[\":\n                input_list[i][j] = \"[\"\n            elif input_list[i][j] == \"]\":\n                input_list[i][j] = \"]\"\n            elif input_list[i][j] == \"{\":\n                input_list[i][j] = \"{\"\n            elif input_list[i][j] == \"}\":\n                input_list[i][j] = \"}\"\n            elif input_list[i][j] == \":\":\n                input_list[i][j] = \":\"\n            elif input_list[i][j] == \"-\":\n                input_list[i][j] = \"-\"\n            elif input_list[i][j] == \"!\":\n                input_list[i][j] = \"!\"\n            elif input_list[i][j] == \"$\":\n                input_list[i][j] = \"$\"\n            elif input_list[i][j] == \"&\":\n                input_list[i][j] = \"&\"\n            elif input_list[i][j] == \"*\":\n                input_list[i][j] = \"*\"\n            elif input_list[i][j] == \"(\":\n                input_list[i][j] = \"(\"\n            elif input_list[i][j] == \")\":\n                input_list[i][j] = \")\"\n            elif input_list[i][j] == \"[\":\n                input_list[i][j] = \"[\"\n            elif input_list[i][j] == \"]\":\n                input_list[i][j] = \"]\"\n            elif input_list[i][j] == \"{\":\n                input_list[i][j] = \"{\"\n            elif input_list[i][j] == \"}\":\n                input_list[i][j] = \"}\"\n            elif input_list[i][j] == \":\":\n                input_list[i][j] = \":\"\n            elif input_list[i][j] == \"-\":\n                input_list[i][j] = \"-\"\n            elif input_list[i][j] == \"!\":\n                input_list[i][j] = \"!\"\n            elif input_list[i][j] == \"$\":\n                input_list[i][j] = \"$\"\n            elif input_list[i][j] == \"&\":\n                input_list[i][j] = \"&\"\n            elif input_list[i][j] == \"*\":\n                input_list[i][j] = \"*\"\n            elif input_list[i][j] == \"(\":\n                input_list[i][j] = \"(\"\n            elif input_list[i][j] == \")\":\n                input_list[i][j] = \")\"\n            elif input_list[i][j] == \"[\":\n                input_list[i][j] = \"[\"\n            elif input_list[i][j] == \"]\":\n                input_list[i][j] = \"]\"\n            elif input_list[i][j] == \"{\":\n                input_list[i][j] = \"{\"\n            elif input_list[i][j] == \"}\":\n                input_list[i][j] = \"}\"\n            elif input_list[i][j] == \":\":\n                input_list[i][j] = \":\"\n            elif input_list[i][j] == \"-\":\n                input_list[i][j] = \"-\"\n            elif input_list[i][j] == \"!\":\n                input_list[i][j] = \"!\"\n            elif input_list[i][j] == \"$\":\n                input_list[i][j] = \"$\"\n            elif input_list[i][j] == \"&\":\n                input_list[i][j] = \"&\"\n            elif input_list[i][j] == \"*\":\n                input_list[i][j] = \"*\"\n            elif input_list[i][j] == \"(\":\n                input_list[i][j] = \"(\"\n            elif input_list[i][j] == \")\":\n                input_list[i][j] = \")\"\n            elif input_list[i][j] == \"[\":\n                input_list[i][j] = \"[\"\n            elif input_list[i][j] == \"]\":\n                input_list[i][j] = \"]\"\n            elif input_list[i][j] == \"{\":\n                input_list[i][j] = \"{\"\n            elif input_list[i][j] == \"}\":\n                input_list[i][j] = \"}\"\n            elif input_list[i][j] == \":\":\n                input_list[i][j] = \":\"\n            elif input_list[i][j] == \"-\":\n                input_list[i][j] = \"-\"\n            elif input_list[i][j] == \"!\":\n                input_list[i][j] = \"!\"\n            elif input_list[i][j] == \"$\":\n                input_list[i][j] = \"$\"\n            elif input_list[i][j] == \"&\":\n                input_list[i][j] = \"&\"\n            elif input_list[i][j] == \"*\":\n                input_list[i][j] = \"*\"\n            elif input_list[i][j] == \"(\":\n                input_list[i][j] = \"(\"\n            elif input_list[i][j] == \")\":\n                input_list[i][j] = \")\"\n            elif input_list[i][j] == \"[\":\n                input_list[i][j] = \"[\"\n            elif input_list[i][j] == \"]\":\n                input_list[i][j] = \"]\"\n            elif input_list[i][j] == \"{\":\n                input_list[i][j] = \"{\"\n            elif input_list[i][j] == \"}\":\n                input_list[i][j] = \"}\"\n            elif input_list[i][j] == \":\":\n                input_list[i][j] = \":\"\n            elif input_list[i][j] == \"-\":\n                input_list[i][j] = \"-\"\n            elif input_list[i][j] == \"!\":\n                input_list[i][j] = \"!\"\n            elif input_list[i][j] == \"$\":\n                input_list[i][j] = \"$\"\n            elif input_list[i][j] == \"&\":\n                input_list[i][j] = \"&\"\n            elif input_list[i][j] == \"*\":\n                input_list[i][j"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for sublist in input_list:\n        for el in sublist:\n            if el =='':\n                el = ''\n                \n            if isinstance(el, str):\n                el = el.strip(' ')\n                el = el.lower()\n                \n        if not isinstance(el, str):\n            el = el.strip()\n            \n        el = el.split()\n        el = el[::-1]\n        el = [el[i] for i in range(len(el))]\n        \n        input_list[input_list.index(sublist)] = el\n    \n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Write your code here\n    def sort_sub_lists(a):\n        a.sort()\n        if len(a) > 1:\n            for i in range(len(a) - 1):\n                if a[i] == a[i+1]:\n                    continue\n                else:\n                    if a[i] < a[i+1]:\n                        a[i], a[i+1] = a[i+1], a[i]\n    return sort_sub_lists(input_list)\n    # raise NotImplementedError\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    ordered_list = []\n    for list in input_list:\n        ordered_list.append(list[0])\n    return ordered_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        for element in sublist:\n            output_list.append(element)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort(a_list, sort_list):\n        for i in range(0, len(a_list)):\n            for j in range(len(a_list[i])):\n                if(a_list[i][j] == '.'):\n                    continue\n                if(sort_list[i] == False):\n                    sort_list[i] = a_list[i][j]\n                    break\n        return sort_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j] is not None:\n                input_list[i][j] = input_list[i][j].upper()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # iterate over lst\n    for x in lst:\n        # if x is true\n        if x:\n            # increment count\n            lst.count(x)\n    # return count\n    return len(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for el in lst:\n        if el == True:\n            count_true += 1\n    return count_true\n    \nprint(count([True, False, True]))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n    \n    \ndef is_happy(lst):\n    '''\n    Write a python function to determine if the list contains only happy numbers.\n    '''\n    if not lst:\n        return False\n    \n    lst = list(lst)\n    \n    # check if all items in list are False\n    lst = [False if i == 0 or i == 1 else i for i in lst]\n    \n    # all of the elements in the list are of type bool\n    if all(lst):\n        return True\n    \n    # return False if none of the items are of type bool\n    return False\n    \ndef main():\n    '''\n    Write a function to determine if the list contains only happy numbers.\n    '''\n    lst = [0,1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for value in lst:\n        if value:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt=0\n    for i in lst:\n        if i==1:\n            cnt=cnt+1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(set(lst))\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #create a new list for the new tuples\n    new_list=[]\n    #append the elements to new list\n    for i in test_tup:\n        new_list.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for tup in test_tup:\n        test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list\n    for i in range(len(test_tup)):\n        new_list.append(test_tup[i][0])\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    l = []\n    for i in test_tup:\n        l.append(i)\n    test_list.append(l)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_tup == None:\n        return test_list\n    if test_tup == ():\n        return test_list\n    if len(test_tup) == 0:\n        test_list.append(test_tup)\n    else:\n        for index, item in enumerate(test_tup):\n            if index == 0:\n                test_list.append(item)\n            elif index!= 0:\n                test_list.append(item)\n                test_list.append(item)\n    return test_list\n    \ndef add_dict(test_dict, test_tup):\n    '''\n    Write a function to append the given dictionary to the given tuples.\n    '''\n    if test_tup == None:\n        return test_dict\n    if test_tup == {}:\n        return test_dict\n    if len(test_tup) == 0:\n        test_dict[test_tup] = test_dict.get(test_tup, [])\n        test_dict[test_tup].append(test_tup)\n        return test_dict\n    if test_tup not in test_dict:\n        test_dict[test_tup] = test_dict.get(test_tup, [])\n        test_dict[test_tup].append(test_tup)\n        test_dict[test_tup] = test_dict.get(test_tup, [])\n        test_dict[test_tup] = test_dict.get(test_tup, [])\n    return test_dict\n    \ndef add_list(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuple.\n    '''\n    if test_tup == None:\n        return test_list\n    if test_tup == []:\n        test_list.append(test_tup)\n    else:\n        for index, item in enumerate(test_tup):\n            if index == 0:\n                test_list.append(item)\n            elif index!= 0:\n                test_list.append(item)\n                test_list.append(item)\n    return test_list\n    \ndef add_tuple(test_tup, test_list):\n    '''\n    Write a function to append the given tuple to the given list.\n    '''\n    if test_tup == None:\n        return test_list\n    if test_tup == []:\n        test_list.append(test_tup)\n    else:\n        for index, item in enumerate(test_tup):\n            if index == 0:\n                test_list.append(item)\n            elif index!= 0:\n                test_list.append(item)\n                test_list.append(item)\n    return test_list\n    \ndef delete_list(test_list, test_tup):\n    '''\n    Write a function to delete the given list and its tuple.\n    '''\n    if test_list == None:\n        return None\n    if test_tup == None:\n        return None\n    if len(test_tup) == 0:\n        test_list.pop()\n    elif test_tup not in test_list:\n        test_list.pop()\n        test_list.pop()\n    else:\n        for index, item in enumerate(test_tup):\n            if index == 0:\n                test_list.pop(index)\n            elif index!= 0:\n                test_list.pop(index)\n                test_list.pop(index)\n    return test_list\n    \ndef delete_dict(test_dict, test_tup):\n    '''\n    Write a function to delete the given dictionary and its tuple.\n    '''\n    if test_dict == None:\n        return None\n    if test_tup == None:\n        return None\n    if len(test_tup) == 0:\n        test_dict.pop()\n    elif test_tup not in test_dict:\n        test_dict.pop()\n        test_dict.pop()\n    else:\n        for index, item in enumerate(test_tup):\n            if index == 0:\n                test_dict.pop(index)\n            elif index!= 0:\n                test_dict.pop(index)\n                test_dict.pop(index)\n    return test_dict\n    \ndef delete_list(test_list, test_tup):\n    '''\n    Write a function to delete the given list and its tuple.\n    '''\n    if test_list == None:\n        return None\n    if test_tup == None:\n        return None\n    if len(test_tup) == 0:\n        test_list.pop()\n    elif test_tup not in test_list:\n        test_list.pop()\n        test_list.pop()\n    else:\n        for index, item in enumerate(test_tup):\n            if index == 0:\n                test_list.pop(index)\n            elif index!= 0:\n                test_list.pop(index)\n                test_list.pop(index)\n    return test_list\n    \ndef delete_tuple(test_tup, test_list):\n    '''\n    Write a function to delete the given tuple and its list.\n    '''\n    if test_tup == None:\n        return None\n    if test_list == None:\n        return None\n    if len(test_tup) == 0:\n        test_list.pop()\n    elif test_tup not in test_list:\n        test_list.pop()\n    else:\n        for index, item in enumerate(test_tup):\n            if index == 0:\n                test_list.pop(index)\n            elif index!= 0:\n                test_list.pop(index)\n                test_list.pop(index)\n    return test_list\n    \ndef get_best_match(test_list):\n    '''\n    Write a function to find the best match for the given list.\n    '''\n    if test_list == None:\n        return None\n    if len(test_list) == 0:\n        return None\n    else:\n        return max(test_list, key=lambda item: len(item))\n    \ndef generate_data(count, length, count_type, length_type):\n    '''\n    Generate a list of random numbers for a certain number of characters\n    '''\n    if count_type == \"string\":\n        if length_type == \"length\":\n            string = \"\"\n            for _ in range(length):\n                string += str(random.randint(1, length))\n            return string\n        elif length_type == \"random\":\n            string = \"\"\n            for _ in range(count):\n                string += str(random.randint(1, length))\n            return string\n    elif count_type == \"numbers\":\n        if length_type == \"length\":\n            numbers = []\n            for _ in range(count):\n                numbers.append(random.randint(0, length))\n            return numbers\n        elif length_type == \"random\":\n            numbers = []\n            for _ in range(count):\n                numbers.append(random.randint(0, length))\n            return numbers\n    elif count_type == \"list\":\n        if length_type == \"length\":\n            numbers = []\n            for _ in range(count):\n                numbers.append(random.randint(0, length))\n            return numbers\n        elif length_type == \"random\":\n            numbers = []\n            for _ in range(count):\n                numbers.append(random.randint(0, length))\n            return numbers\n    elif count_type == \"tuple\":\n        if length_type == \"length\":\n            numbers = ()\n            for _ in range(count):\n                numbers += (random.randint(0, length),)\n            return numbers\n        elif length_type == \"random\":\n            numbers = ()\n            for _ in range(count):\n                numbers += (random.randint(0, length),)\n            return numbers\n    elif count_type == \"float\":\n        if length_type == \"length\":\n            numbers = []\n            for _ in range(count):\n                numbers.append(random.uniform(0, length))\n            return numbers\n        e"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Append the lists to the tuples\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp = []\n    for i in test_list:\n        temp.append(i)\n    for j in test_tup:\n        temp.append(j)\n    temp.extend(test_list)\n    return temp\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp = test_list\n    temp.append(test_tup)\n    return temp\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #code here\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    if num1[0]>num2[0]:\n        temp=num1[0]\n        num1[0]=num2[0]\n        num2[0]=temp\n        num3[0]=num1[0]\n    elif num2[0]>num1[0]:\n        temp=num2[0]\n        num2[0]=num1[0]\n        num1[0]=temp\n        num3[0]=num2[0]\n    else:\n        temp=num2[0]\n        num2[0]=num1[0]\n        num1[0]=temp\n        num3[0]=num2[0]\n    num1[0]=num3[0]\n    num3[0]=num1[0]\n    #heapq.heapify(num1)\n    #heapq.heapify(num2)\n    #heapq.heapify(num3)\n    #return num1[0],num2[0],num3[0]\ndef merge_sorted_list2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    if num1[0]>num2[0]:\n        temp=num1[0]\n        num1[0]=num2[0]\n        num2[0]=temp\n        num3[0]=num1[0]\n    elif num2[0]>num1[0]:\n        temp=num2[0]\n        num2[0]=num1[0]\n        num1[0]=temp\n        num3[0]=num2[0]\n    else:\n        temp=num2[0]\n        num2[0]=num1[0]\n        num1[0]=temp\n        num3[0]=num2[0]\n    num1[0]=num3[0]\n    num3[0]=num1[0]\n    #heapq.heapify(num1)\n    #heapq.heapify(num2)\n    #heapq.heapify(num3)\n    #return num1[0],num2[0],num3[0]\ndef merge_sorted_list3(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    if num1[0]>num2[0]:\n        temp=num1[0]\n        num1[0]=num2[0]\n        num2[0]=temp\n        num3[0]=num1[0]\n    elif num2[0]>num1[0]:\n        temp=num2[0]\n        num2[0]=num1[0]\n        num1[0]=temp\n        num3[0]=num2[0]\n    else:\n        temp=num2[0]\n        num2[0]=num1[0]\n        num1[0]=temp\n        num3[0]=num2[0]\n    num1[0]=num3[0]\n    num3[0]=num1[0]\n    #heapq.heapify(num1)\n    #heapq.heapify(num2)\n    #heapq.heapify(num3)\n    #return num1[0],num2[0],num3[0]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num1\n    elif len(num3) == 0:\n        return num1+num2\n    elif len(num3) == 1:\n        return num1+num3\n    elif len(num3) == 2:\n        return num1+num2+num3\n    else:\n        heapq.heappush(num3,heapq.heappop(num1)+heapq.heappop(num2)+heapq.heappop(num3))\n        heapq.heapify(num3)\n        return num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list=[]\n    l1,l2,l3=num1,num2,num3\n    i=0\n    j=0\n    k=0\n    while l1:\n        if i==j:\n            sorted_list.append(l1[0])\n            i=i+1\n            j=j+1\n        elif l2:\n            sorted_list.append(l2[0])\n            l2=l2[1:]\n            k=k+1\n        elif l3:\n            sorted_list.append(l3[0])\n            l3=l3[1:]\n            k=k+1\n        else:\n            pass\n        i=i+1\n        if i>=j:\n            break\n    while l1 and l2 and l3:\n        sorted_list.append(l1[0])\n        l1=l1[1:]\n        l2=l2[1:]\n        l3=l3[1:]\n    if l1:\n        sorted_list=sorted_list+l1\n    elif l2:\n        sorted_list=sorted_list+l2\n    elif l3:\n        sorted_list=sorted_list+l3\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num1\n    elif num3 == None:\n        return num1 + num2\n    else:\n        return merge_sorted_list(num1.pop(0), num2.pop(0), num3) + merge_sorted_list(num1.pop(0), num2.pop(0), num3) + merge_sorted_list(num1.pop(0), num2.pop(0), num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    heap = []\n    \n    while num1 and num2 and num3:\n        # If the first number is greater than the second, we have to add it to the heap\n        if num1[0] > num2[0]:\n            heapq.heappush(heap, num1[0])\n            num1 = num1[1:]\n        else:\n            heapq.heappush(heap, num2[0])\n            num2 = num2[1:]\n        \n        # If the first number is greater than the third, we have to add it to the heap\n        if num1[0] > num3[0]:\n            heapq.heappush(heap, num1[0])\n            num1 = num1[1:]\n        else:\n            heapq.heappush(heap, num3[0])\n            num3 = num3[1:]\n    \n    while num1 or num2 or num3:\n        if num1:\n            heapq.heappush(heap, num1[0])\n            num1 = num1[1:]\n        if num2:\n            heapq.heappush(heap, num2[0])\n            num2 = num2[1:]\n        if num3:\n            heapq.heappush(heap, num3[0])\n            num3 = num3[1:]\n    \n    # First, we check the heap, if the number is at the end, we need to remove it\n    if num1:\n        heapq.heappush(heap, num1[0])\n        num1 = num1[1:]\n    if num2:\n        heapq.heappush(heap, num2[0])\n        num2 = num2[1:]\n    if num3:\n        heapq.heappush(heap, num3[0])\n        num3 = num3[1:]\n    \n    return heap\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_sort(num1,num2,num3)\n    merge_sort(num1,num3,num2)\n    merge_sort(num2,num3,num1)\n    print(\"Merged lists\")\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # if the number of list is odd\n    # we need to take the middle element as base element\n    # at that point the middle element will be the rightmost element\n    # the base element will be the sorted element\n    # the new base element is the merged element of the base and the left and right elements\n    # the new base element is the leftmost element\n    # the new base element is the rightmost element\n    \n    # if the number of list is even\n    # we need to take the middle element as base element\n    # at that point the middle element will be the leftmost element\n    # the base element will be the sorted element\n    # the new base element is the leftmost element\n    # the new base element is the rightmost element\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            merged_list.append(num1[0])\n            num1 = num1[1:]\n        else:\n            merged_list.append(num2[0])\n            num2 = num2[1:]\n        if num3[0] < num1[0]:\n            merged_list.append(num3[0])\n            num3 = num3[1:]\n        else:\n            merged_list.append(num1[0])\n            num1 = num1[1:]\n            num3 = num3[1:]\n    while num1:\n        merged_list.append(num1[0])\n        num1 = num1[1:]\n    while num2:\n        merged_list.append(num2[0])\n        num2 = num2[1:]\n    while num3:\n        merged_list.append(num3[0])\n        num3 = num3[1:]\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    merged_list_sort = []\n    if num1 == None or num2 == None or num3 == None:\n        return [0,0,0,0]\n    else:\n        for i in range(0,len(num1)):\n            merged_list.append(num1[i])\n            merged_list_sort.append(num2[i])\n            merged_list_sort.append(num3[i])\n        return merged_list_sort\n    \ndef merge_sorted_list_check(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None or num2 == None or num3 == None:\n        return [0,0,0,0]\n    else:\n        for i in range(0,len(num1)):\n            if num1[i] < num2[i] and num1[i] < num3[i]:\n                heapq.heappush(num1,num2[i])\n                heapq.heappush(num2,num3[i])\n                heapq.heappush(num3,num1[i])\n            elif num1[i] > num2[i] and num1[i] > num3[i]:\n                heapq.heappush(num1,num3[i])\n                heapq.heappush(num3,num2[i])\n                heapq.heappush(num2,num1[i])\n            elif num1[i] == num2[i] and num1[i]!= num3[i]:\n                heapq.heappush(num1,num2[i])\n                heapq.heappush(num2,num3[i])\n                heapq.heappush(num3,num1[i])\n            elif num1[i] == num3[i] and num1[i]!= num2[i]:\n                heapq.heappush(num1,num2[i])\n                heapq.heappush(num2,num3[i])\n                heapq.heappush(num3,num1[i])\n            else:\n                print(num1)\n                print(num2)\n                print(num3)\n                return [0,0,0,0]\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        return num2\n    elif len(num2)==0:\n        return num1\n    elif len(num3)==0:\n        return num1+num2\n    else:\n        p1=0\n        p2=0\n        p3=0\n        while p1<len(num1) and p2<len(num2) and p3<len(num3):\n            if num1[p1]<num2[p2]<num3[p3]:\n                heapq.heappush(num2,num1[p1])\n                p1+=1\n                p3+=1\n            elif num1[p1]<num2[p2] or num2[p2]<num3[p3]:\n                heapq.heappush(num1,num1[p1])\n                p1+=1\n                p3+=1\n            else:\n                heapq.heappush(num3,num2[p2])\n                p2+=1\n                p3+=1\n        while p1<len(num1):\n            heapq.heappush(num2,num1[p1])\n            p1+=1\n        while p2<len(num2):\n            heapq.heappush(num1,num2[p2])\n            p2+=1\n        while p3<len(num3):\n            heapq.heappush(num3,num2[p3])\n            p3+=1\n        return num3\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Write your code here.\n    if n <= 0:\n        return 0\n    odd_count = 0\n    for i in range(n):\n        if i % 2 == 1:\n            odd_count += 1\n        else:\n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if s[i]=='0':\n            count+=1\n        else:\n            count-=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Write your code here\n    return int(s+s[::-1])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (n == 0): \n        return 0\n    if (n == 1): \n        return 1\n    if (n%2 == 0): \n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2)\n    else: \n        return odd_Equivalent(s,n-1)\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0 or len(s)==0:\n        return 0\n    else:\n        odd=0\n        for i in s:\n            if i=='0':\n                odd+=1\n        return odd\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    \n    for i in range(1, n+1):\n        if int(s[i-1]) % 2 == 1:\n            count += 1\n            \n    return count\n        \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    \n    for i in range(1, n+1):\n        if int(s[i-1]) % 2 == 0:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res = 0\n    for i in range(n):\n        res += s[i]%2\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # initializing and variable to store string length\n    temp = len(s)\n    \n    # if string length is even\n    if temp%2==0:\n        \n        # print(s)\n        \n        # if odd number\n        if s[0]=='0':\n            \n            # temp = temp-1\n            \n            # print(temp)\n            \n            # count = 1\n            \n            # while temp!=0:\n            \n            #     count = count+1\n            #     temp = temp-1\n            \n            # print(count)\n            \n            # return count\n            \n            # print(temp)\n            \n            # return temp\n        \n        # if odd number\n        else:\n            \n            # temp = temp-1\n            \n            # return temp\n            \n            # print(temp)\n            \n            # count = 1\n            \n            # while temp!=0:\n            \n            #     count = count+1\n            #     temp = temp-1\n            \n            # return count\n            \n            # print(temp)\n            \n            # return temp\n    \n    # if string length is odd\n    else:\n        \n        # temp = temp-1\n        \n        # print(temp)\n        \n        # count = 1\n        \n        # while temp!=0:\n        \n        #     count = count+1\n        #     temp = temp-1\n        \n        # return count\n        \n        # print(temp)\n        \n        # return temp\n    \n    return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (len(s) == 0): \n        return 0\n    \n    count = 0\n    for i in range(len(s)): \n        if s[i] % 2 == 1: \n            count += 1\n    if (count % 2!= 0): \n        return 0\n    \n    for i in range(len(s)//2): \n        if s[i] == 1: \n            count += 2\n        elif s[i] == 0: \n            count += 1\n    if count % 2!= 0: \n        return 0\n    \n    return odd_Equivalent(s[:len(s)//2], n) + odd_Equivalent(s[len(s)//2:], n)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #Write your code here\n    \n    temp_s = s[1:]\n    temp_s = temp_s + temp_s\n    \n    total = 0\n    temp_s = temp_s + temp_s\n    total = total + n \n    \n    while temp_s!= s:\n        \n        temp_s = temp_s + temp_s\n        total = total + 1\n    \n    return total\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #\"list\" is a list of lists, and nestedList is a list of lists.\n    #we want to find all the elements in each nested list within the list\n    #for each element in the nested list, we will find all the elements\n    #that are part of the same child of each other element in the list\n    #so if the element is part of a nested list, the parent element can be\n    #selected again, and the next element can be selected\n    nestedList = nestedList[0]\n    nestedList = [x for x in nestedList if isinstance(x, list) and len(x) > 0]\n    #get the unique list of all the elements in the list\n    commonList = []\n    for elem in nestedList:\n        if elem not in commonList:\n            commonList.append(elem)\n    return commonList\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    nestedlist.sort()\n    for i in range(len(nestedlist)-1):\n        if nestedlist[i] == nestedlist[i+1]:\n            common_elements.append(nestedlist[i])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set(elem for sublist in nestedlist for elem in sublist))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # write your code here\n    s = set()\n    for i in nestedlist:\n        for j in i:\n            if j in s:\n                s.remove(j)\n        s.add(i)\n    return s\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested in nestedlist:\n        if not isinstance(nested, list):\n            common_elements.append(nested)\n        else:\n            common_elements.append(nested[0])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return_list = []\n    for i in nestedlist:\n        return_list += i\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                if nestedlist[i] == nestedlist[j]:\n                    return nestedlist[i]\n    return None\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # your code here\n    ans = []\n    for i in range(len(nestedlist)):\n        if i % 2 == 0:\n            for j in range(len(nestedlist)):\n                if j % 2 == 0:\n                    ans.append(nestedlist[i][j])\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l1=len(nestedlist)\n    l2=len(nestedlist[0])\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        for j in i:\n            if not j in nestedlist[i]:\n                nestedlist[i].append(j)\n    return nestedlist\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1==[]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i) is dict:\n            empty = True\n        else:\n            empty = False\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Empty_dict = {}\n    # if Empty_dict == {}:\n    #     return True\n    # return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return True if len(list1) == 0 else False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= None:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # your code here\n    \n    return nums\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_int = 0\n    for num in nums:\n        num_int += num\n    return num_int\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(num*10 for num in nums)\n    \ndef main():\n    '''\n    Sample tests\n    '''\n    #print(tuple_to_int((1,2,3,4,5,6,7,8,9,0)))\n    #print(tuple_to_int((1,2,3,4,5,6,7,8,9,0,3)))\n    \n    print(tuple_to_int((1,2,3,4,5,6,7,8,9,0,3,0)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_list = [0] * len(nums)\n    for idx, num in enumerate(nums):\n        num_list[idx] = num\n    return num_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    return tuple(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # iterate through the tuple and convert its values into ints\n    # base case: if the tuple is empty, just return 0\n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    i = 0\n    while i<len(test_list):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], float):\n                test_list[i][j]=float(test_list[i][j])\n        i+=1\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convertable_list = []\n    for item in test_list:\n        if type(item[0]) is list:\n            for item_2 in item:\n                convertable_list.append(item_2[0])\n        else:\n            convertable_list.append(item[0])\n    \n    for item in convertable_list:\n        item = list(map(float, item))\n    return convertable_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list + test_list\n    test_list = test_list[0] + test_list\n    test_list = test_list[0] + test_list\n    test_list = test_list + test_list\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [list(map(float, x)) for x in test_list]\n    for row in range(0,len(test_list)):\n        for column in range(0,len(test_list[row])):\n            test_list[row][column] = round(test_list[row][column],5)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list.split(\";\")\n    new_list = []\n    for item in test_list:\n        item = item.split(\";\")\n        if len(item) == 2:\n            float_item = 0\n            for item in item:\n                float_item = float(item)\n            float_item = float_item\n            new_list.append(float_item)\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            test_list[i] = list(map(list_to_float, test_list[i]))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    import numpy as np\n    x = np.zeros((len(test_list), len(test_list[0])))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            if j!= \"\":\n                j = float(j)\n                if j!= 0:\n                    j = j/j\n                i[j] = j\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            j = [float(k) for k in j]\n            i.append(j)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError('type is not list')\n    if isinstance(test_list, list) and not all(isinstance(item, list) for item in test_list):\n        raise TypeError('all items in list must be lists')\n    for item in test_list:\n        if isinstance(item, list):\n            list_to_float(item)\n        else:\n            try:\n                float(item)\n            except ValueError:\n                raise TypeError('must be a float or a list of floats')\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = []\n    a = string.split(' ')\n    for i in a:\n        result.append(i.strip())\n    return result\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [char for char in string.split()]\n    \ndef index_in_string(string, index):\n    '''\n    Write a function to return the index of an index in a string.\n    '''\n    try:\n        return string.index(index)\n    except ValueError:\n        return -1\n    \ndef return_index_of_first_occurrence(string, index):\n    '''\n    Write a function to return the index of an index in a string.\n    '''\n    try:\n        return string.index(index, 1)\n    except ValueError:\n        return -1\n    \ndef search_between(string, start_char, end_char):\n    '''\n    Write a function to return all the characters in the string that are between two given characters.\n    '''\n    try:\n        return [char for char in string.lower() if char >= start_char and char <= end_char]\n    except ValueError:\n        return -1\n        \ndef string_to_set(string):\n    '''\n    Write a function that takes a string as input and returns a set of all the characters in the string.\n    '''\n    return set(string.replace(\" \", \"\"))\n    \ndef string_to_list(string):\n    '''\n    Write a function that takes a string as input and returns a list of all the characters in the string.\n    '''\n    return string.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\n    \ndef string_to_dictionary(string):\n    '''\n    Write a function that takes a string as input and returns a dictionary of all the characters in the string.\n    '''\n    return dict(map(lambda x: (x.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"), \"\").items()))\n    \ndef string_to_string_dictionary(string):\n    '''\n    Write a function that takes a string as input and returns a dictionary of all the characters in the string.\n    '''\n    return dict(map(lambda x: (x.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"), x).items()))\n    \ndef string_to_string_list(string):\n    '''\n    Write a function that takes a string as input and returns a list of all the characters in the string.\n    '''\n    return string.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\n    \ndef string_to_dict(string):\n    '''\n    Write a function that takes a string as input and returns a dictionary of all the characters in the string.\n    '''\n    return dict(map(lambda x: (x.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"), x).items()))\n    \ndef string_to_string_dict(string):\n    '''\n    Write a function that takes a string as input and returns a dictionary of all the characters in the string.\n    '''\n    return dict(map(lambda x: (x.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"), x).items()))\n    \ndef string_to_string_list_dict(string):\n    '''\n    Write a function that takes a string as input and returns a dictionary of all the characters in the string.\n    '''\n    return dict(map(lambda x: (x.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"), x).items()))\n    \ndef string_to_string_dict_list(string):\n    '''\n    Write a function that takes a string as input and returns a dictionary of all the characters in the string.\n    '''\n    return dict(map(lambda x: (x.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"), x).items()))\n    \ndef string_to_string_list_dict_list(string):\n    '''\n    Write a function that takes a string as input and returns a dictionary of all the characters in the string.\n    '''\n    return dict(map(lambda x: (x.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"), x).items()))"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    lst=[]\n    for x in string:\n        lst.append(x)\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [string[i:i+5] for i in range(0, len(string), 5)]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [s.strip() for s in string.split(' ')]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [item.strip() for item in string.split(' ') if item.strip()!= '']\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = []\n    for word in string.split(): \n        lst.append(word)\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [item for item in string.split()]\n    \ndef is_number(s):\n    '''\n    Write a function that accepts a string and return True if it contains only digits, and\n    False otherwise.\n    '''\n    return any([item.isdigit() for item in s])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    if arr == []:\n        return None\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    left = 0\n    right = len(arr) - 1\n    index = 0\n    while index <= right:\n        \n        if arr[index] == arr[index + 1]:\n            break\n        \n        if arr[left] <= arr[index]:\n            if arr[right] > arr[index]:\n                return arr[index]\n            \n            index += 1\n            left += 1\n            right -= 1\n            \n        else:\n            if arr[index] > arr[left]:\n                return arr[index]\n            \n            index += 1\n            right -= 1\n    \n    return arr[left]"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    a = arr\n    found = False\n    for i in range(len(a)):\n        if i == 0 or a[i]!= a[i-1]:\n            found = True\n    if found:\n        return a[i]\n    else:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if arr[middle] == arr[middle - 1]:\n            left += 1\n        else:\n            right = middle - 1\n            while arr[middle]!= arr[middle - 1] and left <= right:\n                left += 1\n                middle -= 1\n    return arr[middle]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    pivot = arr[0]\n    \n    for x in arr:\n        if pivot!= x:\n            pivot = arr.index(x, pivot)\n            \n            if pivot == 0:\n                pivot = arr.index(x, len(arr))\n            \n    return arr[pivot]\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr or len(arr) == 0:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # TODO: Create a dictionary to check the number of occurrences in each element\n    return arr[0]\n    \ndef search2(arr,num):\n    '''\n    Given a sorted array, return a function to check if the array has a element that occurs only once in a subarray that is sorted in ascending order.\n    '''\n    # TODO: Create a function to check if a number in an array is part of a subarray.\n    # In this case, a subarray is said to be a sorted part of the array if the elements of the subarray are greater than or equal to the number\n    return arr[0] == num\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    cnt = 0\n    \n    for x in range(len(arr)):\n        if arr[x]!= arr[x+1]:\n            cnt += 1\n    \n    return cnt\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # there is no need to do any searching.\n    return arr.count(arr[0])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n            count += 1\n    \n    return count\n    \n    \ndef mergeSort(arr):\n    '''\n    Write a python function to sort an array in ascending order.\n    '''\n    if len(arr) > 1:\n        m = len(arr)//2\n        L = arr[:m]\n        R = arr[m:]\n        \n        # sort each half\n        mergeSort(L)\n        mergeSort(R)\n        \n        i = j = k = 0\n        \n        # copy data from arr[0..m-1] into arr[i..j]\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        \n        # put remaining elements in the remaining part\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    \n    return arr\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 1\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            max_product = max(list1[i][0]*list1[j][0], max_product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_tuple = []\n    for i in list1:\n        if i > 0:\n            for j in list1:\n                if i!= j:\n                    product = i * j\n                    if product > max_product_tuple[-1]:\n                        max_product_tuple.append(product)\n    return max_product_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0]\n    else:\n        return max(list1[0][0]*list1[1][0], list1[0][1]*list1[1][0], list1[0][0]*list1[1][1], list1[0][1]*list1[1][1])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Check if there are any numbers in the list \n    if len(list1)==0:\n        raise Exception(\"The list is empty\")\n    # initialise the max product\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            # find the max product\n            max_product = max(list1[i][0], list1[j][0], list1[i][1], list1[j][1])\n    # return the max product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            if list1[i] > list1[j]:\n                max_product = list1[i] * list1[j]\n            else:\n                max_product = list1[j] * list1[i]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = 0\n    for i in list1:\n        for j in list1:\n            if i > j:\n                if i > maximum:\n                    maximum = i\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # For loop to perform the computation of the maximum product between two numbers.\n    result = []\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return -1\n    maximum = -1\n    for x in list1:\n        for y in list1:\n            if x > y:\n                break\n            if y > maximum:\n                maximum = y\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                max_product = list1[i][1] * list1[j][1]\n                break\n            elif list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                max_product = list1[j][1] * list1[i][1]\n                break\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                max_product = list1[i][0] * list1[j][0]\n                break\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    sum = 0\n    for x in range(1, limit+1):\n        if x!= 1:\n            for y in range(x, 1, -1):\n                if y!= 1 and y!= x:\n                    if y > x:\n                        break\n                    sum = sum + y\n                    if y == 1:\n                        numbers.append(y)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for i in range(1, limit+1):\n        if i == 0:\n            continue\n        \n        if i in amicable_numbers:\n            continue\n        \n        for j in range(1, i):\n            if i % j == 0 and j not in amicable_numbers:\n                amicable_numbers.append(i)\n    \n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_list = []\n    amicable_numbers = 0\n    for i in range(1,limit+1):\n        is_prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            sum_list.append(i)\n            amicable_numbers += i\n    return sum_list,amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [num for num in range(1, limit + 1) if num%2 == 0]\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = set()\n    n = 1\n    while n <= limit:\n        n += 1\n        if n in amicable:\n            continue\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n%i == 0 and (n/i) not in amicable:\n                amicable.add(n/i)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    s = 0\n    for num in range(1, limit + 1):\n        #if num is divisible by 2, it is only amicable numbers\n        if num % 2 == 0:\n            for divisor in range(num//2, limit+1, 2):\n                if num % divisor == 0:\n                    #print(divisor)\n                    #print(num)\n                    #print(divisor/num)\n                    if num//divisor == divisor:\n                        amicable_numbers.append(num)\n                        #print(amicable_numbers)\n        # if num is divisible by 3, it is 3 + 1 + 1 + 1 + 2\n        elif num % 3 == 0:\n            for divisor in range(num//3, limit+1, 3):\n                if num % divisor == 0:\n                    #print(divisor)\n                    #print(num)\n                    #print(divisor/num)\n                    if num//divisor == divisor:\n                        amicable_numbers.append(num)\n                        #print(amicable_numbers)\n        # if num is divisible by 5, it is 5 + 1 + 1 + 1 + 2 + 2\n        elif num % 5 == 0:\n            for divisor in range(num//5, limit+1, 5):\n                if num % divisor == 0:\n                    #print(divisor)\n                    #print(num)\n                    #print(divisor/num)\n                    if num//divisor == divisor:\n                        amicable_numbers.append(num)\n                        #print(amicable_numbers)\n        # if num is divisible by 7, it is 7 + 1 + 2 + 2 + 3\n        elif num % 7 == 0:\n            for divisor in range(num//7, limit+1, 7):\n                if num % divisor == 0:\n                    #print(divisor)\n                    #print(num)\n                    #print(divisor/num)\n                    if num//divisor == divisor:\n                        amicable_numbers.append(num)\n                        #print(amicable_numbers)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1,limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            if i%2 == 0 and i%3 == 0:\n                amicable_numbers.append(i)\n            elif i%2 == 0 and i%3!= 0:\n                amicable_numbers.append(i)\n            elif i%2!= 0 and i%3 == 0:\n                amicable_numbers.append(i)\n    amicable_numbers.sort()\n    amicable_numbers = sum(amicable_numbers)\n    print(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for i in range(1,limit+1):\n        if sum(range(1, i)) == i and i % 2 == 0:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if b.real == 0:\n        angle = 2*math.pi*(a.imag)\n    else:\n        angle = math.atan2(b.imag, b.real)\n    if a.real == 0:\n        angle = 2*math.pi - angle\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    #get the real and imaginary part of a complex number\n    r = a.real\n    i = a.imag\n    \n    #get the real and imaginary part of b complex number\n    r = b.real\n    i = b.imag\n    \n    #get the real and imaginary part of c complex number\n    c = cmath.sqrt(i**2 + r**2)\n    \n    #get the complex angle\n    angle = cmath.phase(cmath.exp(complex(0, -1)*i/c))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real = (a.real + b.real)/2\n    imag = (a.imag + b.imag)/2\n    angle = cmath.phase(complex(real,imag))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if abs(b)==0:\n        return 0\n    else:\n        return (cmath.acos(complex(a)**-1)*(180/cmath.pi))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real > b.real:\n        return cmath.acos(a.imag/b.real)\n    else:\n        return cmath.acos(a.real/b.imag)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #convert from a complex number\n    c=complex(a,b)\n    #convert to degrees\n    angle=c.real**2+c.imag**2\n    return angle\ndef angle_sum(a,b):\n    '''\n    Write a function to get the sum of two angles.\n    '''\n    #get the magnitude of the angle\n    s=angle_complex(a,b)\n    #convert the angle to degrees\n    angle=s*180/cmath.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.real - a.real * b.imag + b.imag * a.real\n    return angle\ndef angle_space(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_phase(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_phase_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_log(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_log_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_hyper(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_hyper_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_unity(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_unity_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_n(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_n_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_zero(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_zero_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n_zero(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n_zero_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_n_n(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_n_n_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_n_zero_n(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_n_zero_n_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n_zero(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n_zero_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n_zero_zero(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n_zero_zero(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_n_zero_n_zero(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_n_zero_n_zero_space(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zero_n_zero_n(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real * b.imag - a.real * b.imag\n    return angle\ndef angle_symbol_zer"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=cmath.acos(cmath.exp(complex(0,a)/b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return abs(c.imag - c.real)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    counter = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            counter += 1\n    return counter\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return len([i for i in string if i==\"0\"]) - len([i for i in string if i==\"1\"])\ndef find_sum(string):\n    '''\n    Write a function that takes in a binary string and returns the number of 0s and 1s present in the binary string.\n    '''\n    return sum([i for i in string if i==\"0\"]) + sum([i for i in string if i==\"1\"])\ndef find_count_zero(string):\n    '''\n    Write a function that takes in a binary string and returns the number of 0s present in the binary string.\n    '''\n    count = 0\n    for i in string:\n        if i == \"0\":\n            count += 1\n    return count\ndef find_count_one(string):\n    '''\n    Write a function that takes in a binary string and returns the number of 1s present in the binary string.\n    '''\n    count = 0\n    for i in string:\n        if i == \"1\":\n            count += 1\n    return count\ndef reverse(s):\n    return s[::-1]\ndef main():\n    string = input().strip()\n    print(find_length(string))\n    print(find_sum(string))\n    print(find_count_zero(string))\n    print(find_count_one(string))\n    print(reverse(string))\nmain()"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    l = len(string)\n    for i in range(l):\n        if string[i] == '0':\n            l -= 1\n        else:\n            l += 1\n    return l\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    count = 0\n    i = 0\n    j = 0\n    \n    while i < len(string) : \n        if string[i] == '0' and string[i+1] == '1':\n            count += 1\n            i += 2\n        elif string[i] == '1' and string[i+1] == '0':\n            count += 1\n            i += 2\n        else:\n            count = 0\n            break\n        \n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    index = 0\n    length = 0\n    # This is a constant, and it's been used to calculate the length of the current substring.\n    current_string_length = len(string)\n    # Loop through the string, and if it's one of the zeroes, and it's not equal to one of the ones it's being compared to.\n    while index < current_string_length:\n        if string[index] == '0':\n            index += 1\n        else:\n            # If the current substring is the one we're looking for, we're going to end here.\n            if index == current_string_length:\n                return length\n            if string[index]!= '0':\n                # We've found another 0.\n                # The length is decreased by one as we're going to test this substring again, with one more 0.\n                # This will end the function, and we'll have to reset the index to be able to look again.\n                length -= 1\n            index += 1\n    # We've ended the loop, so it's not a valid substring.\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    max = 0\n    i = 0\n    while i < len(string):\n        if string[i] == '0':\n            max += 1\n        else:\n            max -= 1\n        i += 1\n        \n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            res += 1\n        else:\n            res -= 1\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    counter = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            counter += 1\n        else:\n            counter -= 1\n    return counter\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == '':\n        return 0\n    else:\n        return count_zeroes(string) - count_ones(string) + 1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(0,n-1):\n            if string[i]==string[i+1]:\n                result += 1\n        if result > 1:\n            result = 1\n        return result\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < 0 or b < 0:\n        raise ValueError('Both numbers cannot be less than 0.')\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return 0\n    return a + sum(a,b-1) \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0 and b==0: \n        return 0\n    if a%b==0: \n        return a//b\n    else: \n        return b//a\n    \ndef divisors(n): \n    '''\n    Write a python function to find the divisors of a given number n.\n    '''\n    divisors=[1]\n    for i in range(1,int(n**0.5)+1): \n        if n%i==0: \n            divisors.append(i)\n            if n//i==i: \n                divisors.append(n//i)\n    return divisors\n    \ndef count(n,k): \n    '''\n    Write a python function to find the number of occurences of k in a given number n.\n    '''\n    return sum(n==i for i in range(1,k+1))\n    \ndef fib(n): \n    '''\n    Write a python function to find the Fibonacci numbers of a given number of elements.\n    '''\n    f=[0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1]+f[i-2])\n    return f\n    \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a given number of elements.\n    '''\n    fact=[1]\n    for i in range(2,n+1):\n        fact.append(fact[i-1]*i)\n    return fact\n    \ndef primes(n): \n    '''\n    Write a python function to find all prime numbers in a given number of elements.\n    '''\n    a=[2]\n    for i in range(3,n+1):\n        a.append(i)\n        for j in range(i,n+1,i):\n            a.append(j)\n    return a\n    \ndef primes_series(n): \n    '''\n    Write a python function to find all prime numbers in a given number of elements.\n    '''\n    a=[2]\n    for i in range(3,n+1):\n        a.append(i)\n        for j in range(i,n+1,i):\n            a.append(j)\n    return a\n    \ndef main(): \n    print(sum(1,2)) \n    print(divisors(11)) \n    print(count(50,10)) \n    print(factorial(3)) \n    print(fib(4)) \n    print(primes(10)) \n    print(primes_series(10))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Check if both numbers are positive numbers \n    if(a<0): \n        a = -1*a \n    if(b<0): \n        b = -1*b \n    if(a==b): \n        return 1 \n    # Divisors are calculated \n    divisors = [] \n    i = 1 \n    while (a % i == 0 and b % i == 0): \n        divisors.append(i) \n        i+=1 \n    # Checks if the sum of the divisors is a \n    # multiple of the number \n    if(a in divisors or b in divisors): \n        return 0 \n    else: \n        return 1\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Check if the given numbers are integers.\n    if isinstance(a, int) and isinstance(b, int): \n        # Both arguments should be non-negative integers.\n        if a < 0 or b < 0: \n            return None\n        # Call the function with the arguments.\n        return a + b + sum(a, b) / 2\n    # If the arguments aren't integers, then you have to convert them to integers.\n    else: \n        return None\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    elif a%b==0:\n        return a+b\n    elif b%a==0:\n        return b+a\n    else:\n        return b\n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    else:\n        return a+b+sum(a,b-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0 or b==0:\n        return 0\n    elif a<b:\n        small = b\n        big = a\n    else:\n        small = a\n        big = b\n    if big == 0:\n        return 0\n    if small==0:\n        return 1\n    if big<small:\n        return sum(big,small)\n    else:\n        return sum(small,big)\n        \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b:\n        small = a\n        large = b\n    else:\n        small = b\n        large = a\n    if small == large:\n        print('It is a prime number')\n        return \n    else:\n        print('It is not a prime number')\n        return\n    \n    for i in range(2,large):\n        if (small % i == 0) and (large % i == 0):\n            print(f'{small} {large} is common divisor of {small} and {large}')\n            break\n    else:\n        print(f'{small} {large} is not a common divisor of {small} and {large}')\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(a,b//2)\n    \ndef dfs(a,b): \n    '''\n    Write a Python function to print all permutations of a string in lexicographic order.\n    '''\n    if b==0:\n        print(a)\n    else:\n        for i in range(0,len(a)):\n            dfs(a[0:i]+a[i+1:],b-1)\n        \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = x * y\n    print('{} {}'.format(x, y))\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = x * y\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = 0\n    while (y):\n        res += y % 10\n        y //= 10\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = x % 10\n    y = y % 10\n    result = x * y\n    return result\n    \nprint(multiply_int(3, 5))\nprint(multiply_int(3, 0))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    mult_x = x\n    mult_y = y\n    while True:\n        if(mult_x >= 10):\n            mult_x = multiply_int(mult_x // 10, 10)\n        else:\n            mult_x = mult_x // 10\n        if(mult_y >= 10):\n            mult_y = multiply_int(mult_y // 10, 10)\n        else:\n            mult_y = mult_y // 10\n        if(mult_x == 0 and mult_y == 0):\n            break\n        else:\n            mult_x = mult_x * 10 + mult_y\n    return mult_x\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x<0:\n        return None\n    if y<0:\n        return None\n    if x==0 or y==0:\n        return 0\n    if x>y:\n        x,y = y,x\n    result = 0\n    while x!=0:\n        result = result*10 + x%10\n        x //= 10\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = list(str.split())\n    for i in l:\n        if len(i) > n:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = str.lower()\n    str = str.replace('.','')\n    str = str.replace(',','')\n    str = str.replace('?','')\n    str = str.replace('!','')\n    str = str.replace('|','')\n    str = str.replace('-','')\n    str = str.replace('\\n','')\n    str = str.replace(' ','')\n    str = str.replace('  ','')\n    words = str.split()\n    longest = []\n    for word in words:\n        if len(word) > n:\n            longest.append(word)\n    return (len(longest))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_words = []\n    longest_word = ''\n    \n    for word in str:\n        if len(word) >= n:\n            longest_word = word\n            longest_words.append(word)\n    \n    return longest_word, longest_words\n    \ndef main():\n    # Test code for module calls to function\n    #long_words(3, ['i', 'am','man', 'a','man', 'to', 'work'])\n    long_words(6, ['one', 'two', 'three', 'four', 'five','six'])\n    #long_words(6, ['one', 'two', 'three', 'four', 'five','six'])\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    from string import ascii_letters, punctuation\n    res = []\n    for w in str:\n        for char in w:\n            if char not in ascii_letters + punctuation:\n                break\n        else:\n            res.append(w)\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split(' '):\n        if len(word) >= n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            words.append(str[i])\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word)>=n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in str:\n        if i in words:\n            continue\n        elif len(i) > n:\n            words.append(i)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    def is_long(i):\n        return len(i) > n\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!=1:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    s = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            s += my_matrix[i][j] * i * j\n    return s == 0\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix)):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    count = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == 1:\n                count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the number of rows and columns is the same as the number of\n    #  squares.\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = True\n    if len(my_matrix) == len(my_matrix[0]):\n        for row in my_matrix:\n            if len(row)!= len(set(row)):\n                result = False\n    return result\n    \ndef main():\n    matrix = [\n        [1,2,3],\n        [4,5,6],\n        [7,8,9]\n    ]\n    print(magic_square_test(matrix))\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = True\n    for row in range(3):\n        for col in range(3):\n            result = result and my_matrix[row][col] == my_matrix[row][col+3] == my_matrix[row+3][col] == my_matrix[row+3][col+3] == my_matrix[row+3][col+6] == my_matrix[row+6][col] == my_matrix[row+6][col+3] == my_matrix[row+6][col+6] == my_matrix[row+6][col+6]\n    return result\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the rows and columns\n    rows = len(my_matrix)\n    columns = len(my_matrix[0])\n    \n    # check if all rows and columns are equal\n    if (rows == columns) and (rows == rows):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # TODO: Complete the function\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    l = len(nums)\n    freq = {}\n    for i in range(l):\n        if nums[i] in freq:\n            freq[nums[i]] += 1\n        else:\n            freq[nums[i]] = 1\n    # return freq[max(freq)]\n    return max(freq.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    maximum = 0\n    max_item = 0\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    lookup = defaultdict(int)\n    for num in nums:\n        lookup[num] += 1\n    \n    occurrences = defaultdict(int)\n    for k, v in lookup.items():\n        occurrences[v] = k\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = sorted(nums)\n    max_freq = nums[0]\n    max_occur = nums[0]\n    for n in nums:\n        if n > max_freq:\n            max_occur = max_freq\n            max_freq = n\n        elif n == max_occur:\n            if n > max_occur:\n                max_occur = n\n    return max_occur\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    l = defaultdict(int)\n    for num in nums:\n        l[num] += 1\n    \n    d = {}\n    for key, value in l.items():\n        if value in d.keys():\n            d[value].append(key)\n        else:\n            d[value] = [key]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary that holds frequency of items\n    # using an array of strings as keys\n    freq = defaultdict(list)\n    for num in nums:\n        freq[num].append(nums.count(num))\n    # find the maximum frequency\n    max_item = max(freq.items(), key=operator.itemgetter(1))[0]\n    # return the highest frequency item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for i in range(len(nums)):\n        freq[nums[i]] += 1\n    max_freq = 0\n    for key in freq.keys():\n        if freq[key] > max_freq:\n            max_freq = freq[key]\n            max_freq_index = key\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums.sort()\n    n = len(nums)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    rev = ''\n    for c in str1:\n        if c.lower() not in 'aeiou':\n            rev = rev + c\n    return rev\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    def vowel_decorator(func):\n        def wrapped(str):\n            vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n            for letter in str:\n                if letter.lower() in vowels:\n                    str = str.replace(letter, letter.upper())\n            return func(str)\n        return wrapped\n    \n    return vowel_decorator\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = 0\n    u = 0\n    while l <= len(str1)-1:\n        if str1[l] in \"AEIOUaeiou\":\n            if str1[l] not in \"AEIOUaeiou\":\n                l += 1\n        else:\n            l += 1\n        if l == len(str1) or str1[l] not in \"AEIOUaeiou\":\n            u += 1\n    if u > 0:\n        return \"the string has \" + str(u) + \" vowels and \" + str(l) + \" letters\"\n    else:\n        return \"the string has \" + str(u) + \" vowels\"\n    \nprint(reverse_vowels(\"java\")"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    result = ''\n    for letter in str1:\n        if letter in vowels:\n            result = result + letter\n    print(result)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1.lower():\n        if i in vowels:\n            str1 = str1.replace(i, vowels[vowels.index(i) - vowels.index('a')])\n    return str1\nprint(reverse_vowels(\"Hello, World!\")"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if(str1.startswith(\"a\")):\n        # this is the starting point for the function\n        return(str1[::-1])\n    elif(str1.startswith(\"e\")):\n        return(\"a\" * len(str1) + \"e\" * len(str1))\n    elif(str1.startswith(\"i\")):\n        return(\"a\" * len(str1) + \"i\" * len(str1))\n    elif(str1.startswith(\"o\")):\n        return(\"a\" * len(str1) + \"o\" * len(str1))\n    elif(str1.startswith(\"u\")):\n        return(\"a\" * len(str1) + \"u\" * len(str1))\n    elif(str1.startswith(\"y\")):\n        return(\"a\" * len(str1) + \"y\" * len(str1))\n    else:\n        return(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1_lower = str1.lower()\n    vowels = 'aeiou'\n    list_vowels = []\n    for i in str1_lower:\n        if i in vowels:\n            list_vowels.append(i)\n    str_vowels = ''.join(list_vowels)\n    list_vowels.clear()\n    str1 = str_vowels.replace('y', 'a')\n    return str1\n    "
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if str1[i] in \"aeiou\":\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    result=[]\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i] in 'aeiouAEIOU':\n            result.append(str1[i])\n    return ''.join(result)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1).replace(\"(\", \"\").replace(\")\",\"\")\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # print(tup1)\n    if type(tup1) is not tuple:\n        raise TypeError(\"tup_string() takes a tuple as an argument\")\n    s = \"(\"\n    for x in tup1:\n        s = s + str(x) + \",\"\n    s = s[:-1] + \")\"\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for i in tup1:\n        str_tup = str_tup + '(' + str(i) + ')' + ','\n    return str_tup[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ','.join(tup1) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join(map(str, tup1)) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for i in range(len(tup1)):\n        string = string + str(tup1[i])\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for el in tup1:\n        str1 += str(el) + \", \"\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + str(tup1[0]) + \",\" + str(tup1[1]) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(map(str, tup1))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_sum = 0\n    for num in nums:\n        if num < 0:\n            num_sum -= num\n    return num_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum = neg_sum + num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_nums = []\n    for num in nums:\n        if num < 0:\n            negative_nums.append(num)\n    return sum(negative_nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    total = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            total -= nums[i]\n    return total\n    \n    "
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = []\n    for num in nums:\n        if num<0:\n            neg_nums.append(num)\n    s = 0\n    for num in neg_nums:\n        s += num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Write your code here.\n    sum=0\n    for num in nums:\n        if num < 0:\n            sum-=num\n        else:\n            sum+=num\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        print(\"Enter a positive integer greater than 1\")\n        return None\n    elif n == 1:\n        return 1\n    else:\n        start = 0\n        end = n\n        while end > start:\n            temp = start + (end - start)//2\n            if temp * temp == n:\n                print(\"The nth hexagonal number is: \", end)\n                return temp\n            elif temp * temp > n:\n                start = temp + 1\n            else:\n                end = temp - 1"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #Recursion\n    if n == 1:\n        return 1\n    #Base Case\n    elif n == 0:\n        return 0\n    #call the function\n    return hexagonal_num(n-1) + hexagonal_num(n-1)+hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: return 0\n    else:\n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    if n==1 or n==2 or n==3 or n==4 or n==5:\n        return n\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = -1\n    while (n-x) >= 0:\n        if n%6 == 1:\n            return n\n        n = n - 6\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n > 0: \n        if n % 3 == 0: \n            return n \n        else: \n            return n - 1 \n    else: \n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # return int((n * (n + 1)) / 2)\n    \n    return n * (n + 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1 or n == 2:\n        return n\n    elif n == 3 or n == 4:\n        return 6\n    else:\n        return 5\n    \n    \ndef hexagonal_num2(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1 or n == 2:\n        return n\n    elif n == 3 or n == 4:\n        return 7\n    else:\n        return 5\n    \n    \ndef is_prime(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_b(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_c(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \ndef is_prime_d(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \ndef is_prime_e(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \ndef is_prime_f(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_g(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_h(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_i(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_j(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_k(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_l(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_m(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_n(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_o(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_p(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_q(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2: \n        return False\n    if n == "
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros_count = 0\n    non_zeros_count = 0\n    # iterate through the array\n    for i in range(len(nums)):\n        # if there are no zeroes\n        if nums[i] == 0:\n            zeros_count += 1\n        else:\n            non_zeros_count += 1\n    # calculate the number of zeros and non zeros\n    ratio = zeros_count / non_zeros_count\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] == 0:\n            nums[i] = nums[i + 1]\n            nums[i + 1] = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    zero_num = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            zero_num += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n        else:\n            total += 1\n    return total/count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    a = nums[:]\n    if len(a) == 0:\n        return 0\n    else:\n        zero_count = 0\n        nonzero_count = 0\n        for num in a:\n            if num == 0:\n                zero_count += 1\n            else:\n                nonzero_count += 1\n        return zero_count / nonzero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    sum = 0\n    for num in nums:\n        if num == 0:\n            sum += 1\n    return sum/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    c = 0\n    for i in nums:\n        if i!= 0:\n            c += 1\n    return float(c) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n:\n        if n % 2!= 0:\n            count += 1\n            n = n // 2\n        else:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n == 0):\n        return False\n    if (n == 1):\n        return True\n    if(n > 1):\n        if(n % 2 == 0):\n            return False\n        else:\n            return (is_Sum_Of_Powers_Of_Two(n//2))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while n:\n        if n & 1:\n            return False\n        i += 1\n        n = n >> 1\n    return True\n    #raise NotImplementedError\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        print(\"Negative numbers cannot be represented as sum of powers of 2\") \n        return -1\n    elif n < 10**5: \n        print(\"Numbers below 10^5 are not possible\") \n        return -1\n    elif n == 0 or n == 1: \n        return 0\n    else: \n        n_square = pow(n, 2) \n        if n_square == n: \n            print(\"The number {} can be represented as sum of powers of 2\".format(n)) \n            return 1\n        elif n_square % 2 == 0: \n            print(\"The number {} can not be represented as sum of powers of 2\".format(n)) \n            return -1\n        else: \n            print(\"The number {} can not be represented as sum of powers of 2\".format(n)) \n            return -1\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def sum_of_pows(n):\n        if n<2:\n            return n\n        else:\n            return sum_of_pows(n-1)+2*n\n    def is_sum_of_pows(n):\n        if n<2:\n            return False\n        else:\n            for i in range(2,n+1):\n                if n%i==0:\n                    return False\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow2=1\n    pow2=pow2*2\n    while n!=0:\n        if n%pow2==0:\n            return True\n        else:\n            return False\ndef main():\n    '''\n    Run the main function.\n    '''\n    num=int(input())\n    if num==0:\n        print(0)\n    elif num==1:\n        print(1)\n    else:\n        if is_Sum_Of_Powers_Of_Two(num)==True:\n            print(1)\n        else:\n            print(0)\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return sum(int(num)**2 for num in str(n)) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    else:\n        while n % 2 == 0: \n            n = n / 2\n        if n == 1: \n            return True\n        else: \n            return False\n        \n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r ** 2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circum_rad = 2*pi*r\n    return circumference(circum_rad)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Your code here\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    circumference = 2 * pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    def circumference(r):\n        circum = 2*3.14*r*r\n        return circumference\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\ndef circle_perimeter(r):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 3.14 * r * 2\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return (3.14 * r * r)\ndef rectangle_area(l,w):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return l * w\ndef rectangle_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return l * w * 2\ndef rectangle_circumference(l,w):\n    '''\n    Write a function to calculate the circumference of a rectangle.\n    '''\n    return l * w * 3.14\ndef rectangle_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return l * w * 2 * 3.14\ndef rectangle_area(l,w):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return l * w * 2\ndef square_area(l,w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return l * w\ndef square_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return l * w * 2\ndef square_circumference(l,w):\n    '''\n    Write a function to calculate the circumference of a square.\n    '''\n    return l * w * 3.14\ndef square_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return l * w * 2\ndef square_area(l,w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return l * w * 4.0\ndef rectangle_area(l,w):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return l * w * 2\ndef rectangle_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return l * w * 4\ndef rectangle_circumference(l,w):\n    '''\n    Write a function to calculate the circumference of a rectangle.\n    '''\n    return l * w * 4.0\ndef rectangle_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return l * w * 2\ndef rectangle_area(l,w):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return l * w * 4.0\ndef sphere_area(r):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return r ** 3.14\ndef sphere_perimeter(r):\n    '''\n    Write a function to calculate the perimeter of a sphere.\n    '''\n    return 4 * 3.14 * r\ndef sphere_circumference(r):\n    '''\n    Write a function to calculate the circumference of a sphere.\n    '''\n    return 4 * 3.14 * r * 2\ndef sphere_perimeter(r):\n    '''\n    Write a function to calculate the perimeter of a sphere.\n    '''\n    return 4 * 3.14 * r * 3\ndef sphere_area(r):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return 4 * 3.14 * r ** 2\ndef parallelogram_area(l,w):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return l * w ** 2\ndef parallelogram_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return l * w * 2\ndef parallelogram_circumference(l,w):\n    '''\n    Write a function to calculate the circumference of a parallelogram.\n    '''\n    return l * w * 2 * 3.14\ndef parallelogram_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return l * w * 2 * 3.14\ndef parallelogram_area(l,w):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return l * w * 2 ** 2\ndef trapezium_area(a,b,c):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return (a + b + c) / 2\ndef trapezium_perimeter(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a trapezium.\n    '''\n    return 4 * (a + b + c) / 3\ndef trapezium_circumference(a,b,c):\n    '''\n    Write a function to calculate the circumference of a trapezium.\n    '''\n    return 4 * (a + b + c) / 3\ndef trapezium_perimeter(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a trapezium.\n    '''\n    return 4 * (a + b + c) / 2\ndef trapezium_area(a,b,c):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return (a + b + c) / 2 ** 2\ndef parallelogram_area(l,w):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return l * w ** 2\ndef parallelogram_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return l * w * 2\ndef parallelogram_circumference(l,w):\n    '''\n    Write a function to calculate the circumference of a parallelogram.\n    '''\n    return l * w * 2 * 3.14\ndef parallelogram_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return l * w * 2 * 3.14\ndef parallelogram_area(l,w):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return l * w * 2 ** 2\ndef parallelogram_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return l * w * 2 ** 3\ndef parallelogram_area(l,w):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return l * w * 2 ** 2 * 3.14\ndef parallelogram_perimeter(l,w):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return l * w * 2 ** 3\ndef parallelogram_area(l,w):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return l * w * 2 ** 2 * 3.14\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * r ** 2\ndef circle_perimeter(r):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2 * math.pi * r\ndef circle_circumference(r):\n    '''\n    Write a function to calculate the circumference of a circle.\n    '''\n    return math.pi * r * 2\ndef circle_perimeter(r):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2 * math.pi * r\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * r ** 2\ndef circle_perimeter(r):\n    ''"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for i in test_list:\n        for j in i:\n            flattened.append(j)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for element in test_list:\n        if type(element)!= list:\n            element = [element]\n        for subelement in element:\n            if type(subelement) == list:\n                for item in subelement:\n                    flattened_list.append(item)\n            else:\n                flattened_list.append(subelement)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result_list = []\n    for items in test_list:\n        if isinstance(items,list):\n            result_list.extend(items)\n        else:\n            result_list.append(items)\n    return result_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = 0\n    #Hint: Try creating a new list from the original and iterating through the original.\n    #Hint: Use map() to iterate through a list of numbers.\n    #Create a set of numbers with all the numbers in the original list flattened together.\n    #Hint: You may want to make the list larger than 1 because the flatten() function returns a list even if the original list is 0.\n    #Hint: Try using range(len(list)).\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    singly_numbers = []\n    for element in test_list:\n        if type(element)!= list:\n            element = [element]\n        for element2 in element:\n            if type(element2) == list:\n                element2 = [element2]\n            for element3 in element2:\n                if type(element3) == list:\n                    element3 = [element3]\n                singly_numbers.extend(element3)\n            element2.clear()\n        element2.clear()\n    return singly_numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Write your code here.\n    # Note that this function assumes that the list is nested in a list of lists.\n    flattened = []\n    for item in test_list:\n        for sublist in item:\n            flattened.append(sublist)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    for x in test_list:\n        if isinstance(x,list):\n            for i in x:\n                if isinstance(i,list):\n                    test_list = test_list + i\n                else:\n                    test_list = test_list + [i]\n        else:\n            test_list = test_list + [x]\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for e in test_list:\n        if type(e) == list:\n            for item in e:\n                flat_list.append(item)\n        elif type(e) == int or type(e) == float:\n            flat_list.append(e)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    s = test_list[0]\n    for i in test_list[1:]:\n        s = s + i\n    return s\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def remove_numbers(lst):\n        new_list = []\n        for item in lst:\n            new_list.append(item)\n        return new_list\n    def convert_list_to_tuple(lst):\n        new_list = tuple(lst)\n        return new_list\n    def flatten(lst):\n        new_list = []\n        if len(lst) == 0:\n            return []\n        for item in lst:\n            if type(item) == list:\n                new_list = new_list + flatten(item)\n            else:\n                new_list = new_list + [item]\n        return new_list\n    return flatten(test_list)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    num_len = len(nums)\n    for i in range(num_len):\n        max_i = i\n        for j in range(i, num_len):\n            if nums[j] > nums[max_i]:\n                max_i = j\n        swap = nums[i]\n        nums[i] = nums[max_i]\n        nums[max_i] = swap\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def helper(nums, index, length):\n        if length == 0:\n            return\n        if index == length:\n            return\n        helper(nums, index+1, length)\n        nums[index], nums[length-1] = nums[length-1], nums[index]\n        helper(nums, index, length-1)\n        \n    helper(nums, 0, len(nums)-1)\n    return nums\n    \ndef merge_the_tools(string, k):\n    '''\n    Find the k shortest strings that are formed by concatenating the first K\n    characters of each of the strings in a given array.\n    '''\n    \n    result = []\n    for i in range(len(string)):\n        lst = []\n        for j in range(k):\n            lst.append(string[i][j])\n        result.append(''.join(lst))\n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # NOTE: Can you come up with an O(N) faster algorithm?\n    for i in range(len(nums)-1, 0, -1):\n        smallest_idx = i\n        for j in range(i):\n            if nums[j] < nums[smallest_idx]:\n                smallest_idx = j\n        nums[i], nums[smallest_idx] = nums[smallest_idx], nums[i]\n        nums = sorted(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_list(nums):\n        def pancake_sort(nums, end):\n            if end > len(nums) - 1:\n                return\n            else:\n                for i in range(len(nums) - 1):\n                    if nums[i] < nums[i + 1]:\n                        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                        pancake_sort(nums, end + 1)\n                        nums[i + 1], nums[end] = nums[end], nums[i + 1]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def binary_sort(nums, low, high):\n        if high < low: return\n        mid = low + (high - low) // 2\n        binary_sort(nums, low, mid)\n        binary_sort(nums, mid+1, high)\n        # binary_sort(nums, 0, high)\n        while mid < high:\n            if nums[mid] > nums[mid+1]:\n                nums[mid+1], nums[high] = nums[high], nums[mid+1]\n                mid += 1\n            mid += 1\n    binary_sort(nums, 0, len(nums) - 1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums = nums.copy()\n    pivot = nums[0]\n    for x in nums[1:]:\n        if pivot < x:\n            pivot = x\n    nums.remove(pivot)\n    nums.insert(0, pivot)\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    pancake_length = 1\n    while length > 1:\n        for i in range(length-1):\n            if nums[i] > nums[i+1]:\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = temp\n        length -= 1\n    return nums\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(1, len(nums)):\n        # we need to swap the first element with the last element\n        # so we will take the first element which will be the smallest element\n        nums[i], nums[0] = nums[0], nums[i]\n        for k in range(1, len(nums)):\n            if nums[k] < nums[k-1]:\n                nums[k], nums[k-1] = nums[k-1], nums[k]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i] :\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if list1==list2 and list1==list3:\n        return 1\n    elif list1==list3 and list1==list2:\n        return 1\n    elif list2==list3 and list2==list1:\n        return 1\n    elif list1==list3:\n        return 1\n    elif list2==list3:\n        return 1\n    elif list1[0]==list2[0] and list1[1]==list3[1]:\n        return 3\n    elif list1[0]==list3[0] and list1[1]==list2[1]:\n        return 3\n    elif list1[0]==list3[0] and list1[1]==list2[1]:\n        return 3\n    elif list1[0]==list2[0] and list1[1]==list3[1]:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)!=len(list2):\n        return \"both are not of the same size\"\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]!=list2[i]:\n            count+=1\n    for i in range(len(list3)):\n        if list3[i]==list1[i] and list3[i]!=list1[i]:\n            count+=1\n    return count\n        \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count1 += 1\n        elif list1[i]!= list2[i]!= list3[i]:\n            count2 += 1\n        else:\n            count3 += 1\n    return count1,count2,count3\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_len = len(list1)\n    list2_len = len(list2)\n    list3_len = len(list3)\n    list1_idx = []\n    list2_idx = []\n    list3_idx = []\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    \n    for i in range(list1_len):\n        if list1[i] in list2 and list1[i] in list3:\n            list1_idx.append(i)\n            count1 += 1\n        elif list2[i] in list1 and list2[i] in list3:\n            list2_idx.append(i)\n            count2 += 1\n        elif list3[i] in list1 and list3[i] in list2:\n            list3_idx.append(i)\n            count3 += 1\n    \n    return (count1,count2,count3)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list3[i]==list3[j]:\n                count_same+=1\n    return count_same\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!=len(list2):\n        return 0\n    # print(list1)\n    # print(list2)\n    # print(list3)\n    # print(len(list1))\n    # print(len(list2))\n    # print(len(list3))\n    lista=list(zip(list1,list2,list3))\n    # print(lista)\n    # print(list(set(lista)))\n    # print(list(set(lista)))\n    # print(list(set(list(set(lista))))\n    count=0\n    for i in list(set(list(set(lista)))):\n        if lista.count(i)==3:\n            count=count+1\n    # print(count)\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and (list1[i]!= 0 and list2[j]!= 0):\n                same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n    \n    for i in set1:\n        for j in set2:\n            for k in set3:\n                if i == j and k == list1[i] and i!= j:\n                    return print('Number of items with same position:',list1.count(i))\n    \n    return print('Number of items with same position:',0)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list3[i]==list2[j]:\n                count_same+=1\n    return count_same\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_2(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_3(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_4(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_5(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_6(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_7(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_8(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_9(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_10(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_11(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_12(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_13(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_14(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[' and Input[i][j+1]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_15(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_16(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_17(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_18(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[' and Input[i][j+1]==']':\n                count+=1\n            if Input[i][j]==']':\n                count-=1\n    return count\n    \ndef find_lists_19(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count=0\n    for i in range(len(Input)):\n        fo"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    i = 0\n    for i in range(len(Input)): \n        if Input[i]==[]: \n            continue \n        else: \n            i += 1\n    return i\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = list(Input[0])\n    n = 0\n    for i in range(len(l)):\n        if l[i] == '{' or l[i] == '[':\n            n = n + 1\n        else:\n            n = n - 1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=0\n    for i in range(len(Input)):\n        for j in range(len(Input[0])):\n            if(Input[i][j] == \"0\"):\n                n+=1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # get list of tuples\n    lists = tuple(Input)\n    # create a set\n    set_of_lists = set()\n    # iterate through the list\n    for i in lists:\n        # add to set if it is not already in\n        if i not in set_of_lists:\n            set_of_lists.add(i)\n    return len(set_of_lists)\n    "
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_Count = 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0 \n    if Input == (): \n        lists = 1 \n    else: \n        for i in range(len(Input)): \n            if Input[i] == \"(\": \n                lists += 1 \n    return lists \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    my_tuple = tuple(Input)\n    return len([i for i in my_tuple if isinstance(i, list)])\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # TODO: Write a function to find number of lists in the given tuple.\n    # This function should take in a tuple of any type.\n    #\n    # Examples\n    # find_lists(((1, 2), (3, 4), (5, 6))) # Should return 2\n    # find_lists(((1, 2, 3), (4, 5), (6, 7, 8))) # Should return 3\n    # '''\n    # TODO: Write a function to find number of lists in the given tuple.\n    #\n    # This function should take in a tuple of any type.\n    #\n    # Expected result: return 2\n    #\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = 0\n    for i in range(len(Input)):\n        if Input[i][0] == 'L':\n            l += 1\n    return l\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the array\n    arr = arr.copy()\n    \n    # Find the maximum value\n    max_val = arr[0]\n    \n    # For each element\n    for i in range(1, len(arr)):\n        \n        # If the current element is greater than the max element\n        if arr[i] > max_val:\n            # Set the max element\n            max_val = arr[i]\n            \n    return max_val\n    \n    \ndef min_Abs_Diff(arr):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Initialize the array\n    arr = arr.copy()\n    \n    # Find the minimum value\n    min_val = arr[0]\n    \n    # For each element\n    for i in range(1, len(arr)):\n        \n        # If the current element is less than the min element\n        if arr[i] < min_val:\n            # Set the min element\n            min_val = arr[i]\n    \n    return min_val\n    \n    \ndef sum_Abs_Diff(arr):\n    '''\n    Write a python function to find the sum of absolute differences between any two elements in a given array.\n    '''\n    # Initialize the array\n    arr = arr.copy()\n    \n    # Find the sum of differences\n    sum = 0\n    \n    # For each element\n    for i in range(len(arr)):\n        \n        # If the current element is less than the sum\n        if arr[i] < sum:\n            # Set the sum\n            sum = arr[i]\n    \n    return sum\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff=0\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            if i<j:\n                if arr[i]<arr[j]:\n                    tmp_diff=abs(arr[i]-arr[j])\n                    if max_Diff<tmp_diff:\n                        max_Diff=tmp_diff\n    return max_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = arr[0]\n    n = arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = len(arr)\n    if m == 1: \n        return arr[0] - arr[0]\n    if m == 2: \n        return arr[0] - arr[1]\n    if m == 3: \n        return max(arr[0] - arr[1], arr[1] - arr[0])\n    if m > 3:\n        return max(max_Abs_Diff(arr[1:m]), max_Abs_Diff(arr[0:m-2]))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = 0\n    n = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] - arr[j] == abs(arr[j] - arr[i]):\n                m = max(m, abs(arr[i] - arr[j]))\n            else:\n                break\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] - arr[j] == abs(arr[j] - arr[i]):\n                n = max(n, abs(arr[i] - arr[j]))\n            else:\n                break\n    return m, n\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = 0 \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            x = arr[i] - arr[j]\n            y = abs(x)\n            if y > max:\n                max = y\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + abs(arr[i]-arr[0])\n    return sum\n    #return max(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # TODO: Write your code here\n    max = -999999999999999999999999999999999999999999999\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # initializing count array\n    count = [0] * len(arr)\n    \n    # initializing max_abs_diff array\n    max_abs_diff = [0] * len(arr)\n    \n    # initializing max_abs_diff_index array\n    max_abs_diff_index = [0] * len(arr)\n    \n    # initializing min_abs_diff array\n    min_abs_diff = [0] * len(arr)\n    \n    # initializing index of first element\n    index = 0\n    \n    # initializing index of last element\n    index_last = len(arr) - 1\n    \n    # initializing for loop\n    for i in range(0, len(arr)):\n        \n        # initializing min_abs_diff_index\n        min_abs_diff_index[i] = index\n        \n        # calculating max_abs_diff\n        max_abs_diff[i] = arr[i]\n        \n        # calculating max_abs_diff_index\n        index += 1\n        \n        # checking if current element is largest in\n        # max_abs_diff array\n        if arr[i] < max_abs_diff[index_last]:\n            \n            # updating max_abs_diff_index\n            max_abs_diff_index[i] = index\n            \n            # updating max_abs_diff\n            max_abs_diff[i] = arr[i]\n            \n        # checking if current element is smallest in\n        # max_abs_diff array\n        if arr[i] > min_abs_diff[index_last]:\n            \n            # updating max_abs_diff_index\n            max_abs_diff_index[i] = index\n            \n            # updating min_abs_diff\n            min_abs_diff[i] = arr[i]\n            \n    # calculating max_abs_diff\n    # for loop to iterate in max_abs_diff\n    # comparing it with the elements of max_abs_diff_index\n    # iterating backwards to find the element\n    for i in range(index, len(max_abs_diff)):\n        \n        # checking if current element is largest in max_abs_diff array\n        if max_abs_diff[i] < max_abs_diff[max_abs_diff_index[i]]:\n            \n            # updating max_abs_diff_index\n            max_abs_diff_index[i] = max_abs_diff_index[i]\n            \n            # updating max_abs_diff\n            max_abs_diff[i] = max_abs_diff[max_abs_diff_index[i]]\n            \n        # checking if current element is smallest in max_abs_diff array\n        if max_abs_diff[i] > min_abs_diff[max_abs_diff_index[i]]:\n            \n            # updating min_abs_diff_index\n            min_abs_diff_index[i] = min_abs_diff_index[i]\n            \n            # updating min_abs_diff\n            min_abs_diff[i] = min_abs_diff[max_abs_diff_index[i]]\n    \n    # returning the index of the element\n    # that is maximum in max_abs_diff\n    # return the index of the element\n    # where the maximum element in max_abs_diff\n    # array belongs to the current element\n    return (max_abs_diff_index[max_abs_diff_index[index]])\n    \ndef median(arr):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    \n    # initializing count array\n    count = [0] * len(arr)\n    \n    # initializing median array\n    median = [0] * len(arr)\n    \n    # initializing medians array\n    medians = [0] * len(arr)\n    \n    # initializing index of first element\n    index = 0\n    \n    # initializing index of last element\n    index_last = len(arr) - 1\n    \n    # initializing for loop\n    for i in range(0, len(arr)):\n        \n        # initializing median_index_array\n        median_index_array = [0] * len(arr)\n        \n        # calculating median_index_array\n        median_index_array[i] = index\n        \n        # calculating median\n        median[i] = arr[i]\n        \n        # calculating median_index\n        medians[i] = index + (len(arr) - 1) / 2\n        \n        # checking if current element is greatest in\n        # median array\n        if arr[i] > median[index]:\n            \n            # updating median_index_array\n            median_index_array[i] = index\n            \n            # updating median\n            median[i] = arr[i]\n        \n        # checking if current element is smallest in\n        # median array\n        if arr[i] < median[index]:\n            \n            # updating median_index_array\n            median_index_array[i] = index\n            \n            # updating median\n            median[i] = arr[i]\n        \n        # incrementing index for\n        # the next element in the\n        # array\n        index += 1\n        \n    # returning median\n    # and index of the element\n    # where median element belongs\n    # to the current element\n    return (median_index_array[index])\n    "
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return a, b\n    else:\n        x = find_solution(a, b//2, n)\n        y = find_solution(a, b*2, n)\n        return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a < 0 or b < 0 or a == n or b == n:\n        return None\n    elif a < n and b < n:\n        return a, b\n    elif a > n or b > n:\n        return None\n    else:\n        a_min, a_max = a, a\n        b_min, b_max = b, b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(2, n+1):\n        if is_solution(a, b, i) is True:\n            x = i\n            y = a\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a*b == n:\n        return None\n    if a == b:\n        return (a,b)\n    x = find_solution(a,b-a,n)\n    y = find_solution(a-b,b,n)\n    if x!= None and y!= None:\n        return x, y\n    return find_solution(a,b-a,n)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, n)\n    if b == 0:\n        return None\n    if n == 0:\n        return None\n    if a % n == 0 and b % n == 0:\n        x, y = find_solution(a//n, b//n, n)\n        if x == None:\n            return None\n        else:\n            return x, y\n    if a % n!= 0:\n        return None\n    if b % n!= 0:\n        return None\n    x = a//n\n    y = b//n\n    if n == 1:\n        return x, y\n    if x < y:\n        return find_solution(x, y, n-1)\n    return find_solution(x, y, n-1)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    while True:\n        # Check if we can perform the search\n        if a == n and b == 0:\n            return a, b\n        # Check if we can perform the search\n        elif a == 0 and b!= 0:\n            return a, b\n        # If we can't perform the search, then we want to restart the loop\n        else:\n            # Try all possible ways to go left\n            a = a - b\n            # Try all possible ways to go right\n            b = b - a\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # TODO: write your code here\n    x = a[0]\n    y = b[0]\n    for i in range(1, n):\n        if y + a[i] == n:\n            x = a[0]\n            y = b[0]\n            return x, y\n        elif y + a[i] < n:\n            x = a[0]\n            y = b[0]\n            return x, y\n        elif y + a[i] == n:\n            x = a[0]\n            y = b[0]\n            return x, y\n        elif y + a[i] < n:\n            x = a[0]\n            y = b[0]\n            return x, y\n        else:\n            x = a[0]\n            y = b[0]\n            return x, y\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    j = 0\n    while i < len(list1):\n        while j < len(list2):\n            if list1[i] == list2[j]:\n                list1.pop(i)\n                j = j + 1\n            j = j + 1\n        i = i + 1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = []\n    for element in list2:\n        list1.append(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == len(list2):\n        return list1, list2\n    if len(list1) == 0:\n        return [], list2\n    if len(list2) == 0:\n        return list1, list2\n    # sort in O(n+k) time and O(1) space\n    # get both list and remove it\n    \n    for i in range(0, len(list2)):\n        # check for duplicate\n        for j in range(0, len(list1)):\n            # if they are the same or similar, remove it\n            if list1[j] == list2[i]:\n                list1.pop(j)\n                list2.pop(i)\n                break\n        if len(list2) == 0:\n            break\n        # if there are two or more elements to the left, repeat the process\n        if len(list1)!= 0 and len(list2)!= 0:\n            for k in range(len(list1)):\n                # if they are the same or similar, remove it\n                if list1[k] == list2[k]:\n                    list1.pop(k)\n                    list2.pop(k)\n                    break\n    # return lists after removing\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # write your code here\n    list_1 = []\n    list_2 = []\n    list1.reverse()\n    list1.sort()\n    for i in list1:\n        list_2.append(i)\n    for i in list2:\n        list_1.append(i)\n    list_1.reverse()\n    return list_1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 == []:\n        return []\n    elif list2 == []:\n        return list1\n    elif list1[0] not in list2:\n        return list1\n    else:\n        return remove_elements(list1[1:], list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Creating a new list that has all the elements removed\n    temp_list = []\n    for x in list1:\n        temp_list.append(x)\n    # Traversing through the new list\n    for y in list2:\n        # Checking if the element is in the new list, if it is then\n        # it will be removed from the list\n        if y in temp_list:\n            temp_list.remove(y)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    ans = 0\n    if n == 0:\n        return 0\n    else:\n        while n:\n            ans += n - 2 * (n - 1) + (n - 2)\n            n -= 2\n        return ans\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n, 1, -1))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2)*(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def sub_series(n, x):\n        if n == x == 0: return 0\n        if n == x: return 1\n        if n - x == 1: return 1 + sub_series(n-1, x-1)\n        if n - x == 2: return 1 + sub_series(n-2, x-2)\n        if n - x == 3: return 1 + sub_series(n-3, x-3)\n        if n - x == 4: return 1 + sub_series(n-4, x-4)\n        return 0\n    return sub_series(n, n)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_of_n_s = 0\n    for i in range(n,0,-1):\n        sum_of_n_s += i\n    return sum_of_n_s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0: return 0\n    if n == 0: return 1\n    i = n // 2\n    return sum_series(n-i) + sum_series(n-i-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return n\n    elif n%2 == 0:\n        return n-2\n    else:\n        n = n-1\n        return (n-2) + (n-4)\n        \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    return (n*(n-1)) + (n - (n - 2) + (n - 4))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2*(n-2))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area_poly = 0\n    for i in range(l):\n        area_poly += s*tan(i/l)\n    return area_poly\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # number of sides\n    n = len(s)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * s * l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s\n    if l > 0:\n        a += s * (2 * l - 1) / 2\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 0:\n        return 0\n    if s < 0:\n        return float('inf')\n    return l**2 / s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l1 = l\n    p = 1\n    area = 0\n    for i in range(0, l):\n        area = area + (l1 * (i + 1))\n        l1 = l1 - 2\n    area = area * (4 / 3)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # area of a regular polygon\n    area = 0.5 * pi * s * s\n    # print(f'area of a regular polygon is: {area}')\n    # check if the point to the left of the polygon is a valid point\n    if s > l or s < 1 or l < 1:\n        return 0\n    # if the point to the right of the polygon is a valid point, check if the angle between them is a valid point\n    elif s % 2 == 1:\n        # check if the angle between two sides of the polygon is a valid angle\n        if 0 <= pi - abs(l / 2) <= pi:\n            return area\n        # if the angle between two sides of the polygon is not a valid angle, raise an exception\n        else:\n            raise ValueError('Invalid angle')\n    else:\n        # if the angle between two sides of the polygon is a valid angle, return the distance of the sides\n        return area * tan(l / 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # loop from 0 to len(s) - 1\n    for i in range(l):\n        # initialize sum\n        sum = 0\n        # loop through each side of the polygon\n        for j in range(s):\n            sum += j\n        # calculate area\n        return sum * tan(i * pi / s)\n    # if length == 0, return 0\n    return 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    if n % 2 == 0: \n        return False\n    d = 0 \n    while n > 1: \n        if n % 2 == 0: \n            d += 1\n            n = math.sqrt(n)\n        else: \n            d += 1\n            n //= 2\n    if d == 2: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if (n % 2 == 0): \n        return False\n    \n    else: \n        for i in range(1, int(math.sqrt(n))+1): \n            if (n % i == 0): \n                return False\n        \n        return True\n    \ndef check_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers is 1 or not.\n    '''\n    \n    if (n % 2 == 0): \n        return False\n    \n    else: \n        sum = 0\n        \n        for i in range(1, int(math.sqrt(n))+1): \n            if (n % i == 0): \n                sum += 1\n            \n        if(sum == 2): \n            return True\n        \n        else: \n            return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # HINT: Use the math library and \"mod\" to find the remainder.\n    # You'll have to use two nested loops.\n    # https://docs.python.org/3/library/math.html#math.mod\n    # You'll also need to use a while loop.\n    divisors = []\n    mod = n % 2\n    divisors = list(range(1,int(n/2) + 1))\n    for i in range(0,n,2):\n        if mod == 1:\n            return False\n        elif mod == 0:\n            break\n        else:\n            pass\n    return len(divisors) == 2\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return True\n    div_sum = 0\n    for div in range(1, n+1):\n        if n % div == 0:\n            div_sum += div\n    if div_sum == n:\n        return True\n    return False\ndef is_prime(n):\n    '''\n    A function to determine if the number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, math.ceil(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_v2(n):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return True\n    if n < 3 or n % 2 == 0:\n        return False\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef euler():\n    '''\n    A function to calculate the euler number\n    '''\n    x = int(input(\"Enter a number: \"))\n    if div_sum(x) == True:\n        if is_prime(x) == True:\n            if is_prime_v2(x) == True:\n                print(x)\n    elif x > 2:\n        print(\"the number is not prime\")\n    else:\n        print(\"the number is not prime\")\neuler()\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0: \n        n = -n\n    sum = 0\n    for i in range(1,int(math.sqrt(n) + 1)): \n        if n % i == 0: \n            sum += i \n            if sum == n: \n                return True\n            elif sum > n: \n                return False\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        n = math.floor(n/2)\n        return div_sum(n)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Your code here\n    if n%2==0:\n        print(\"This is an even number\")\n    else:\n        print(\"This is a odd number\")\n    \n    \n    \ndef is_perfect(n):\n    '''\n    Write a function to check if a given number is a perfect number. \n    A number is considered perfect if all its divisors are 1 and it is equal to the number itself. \n    '''\n    # Your code here\n    if n == 1:\n        print(\"Perfect Number\")\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n%i == 0:\n                print(i)\n                if i == int(math.sqrt(n)) + 1:\n                    print(n/i)\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is a prime number.\n    A number is considered prime if it is a power of 2.\n    '''\n    # Your code here\n    if n == 1:\n        print(\"Prime Number\")\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                print(i)\n                if n/i == int(math.sqrt(n))+1:\n                    print(n/i)\n    \n    \ndef is_prime_v1(n):\n    '''\n    Write a function to check if a given number is a prime number. \n    A number is considered prime if it is a power of 2.\n    '''\n    # Your code here\n    if n == 1:\n        print(\"Prime Number\")\n    else:\n        i = 2\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                print(i)\n                if i == math.sqrt(n) + 1:\n                    print(n/i)\n            i += 1\n    \ndef is_prime_v2(n):\n    '''\n    Write a function to check if a given number is a prime number. \n    A number is considered prime if it is a power of 2.\n    '''\n    # Your code here\n    if n == 1:\n        print(\"Prime Number\")\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                print(i)\n                if n/i == int(math.sqrt(n))+1:\n                    print(n/i)\n    \ndef is_prime_v3(n):\n    '''\n    Write a function to check if a given number is a prime number. \n    A number is considered prime if it is a power of 2.\n    '''\n    # Your code here\n    if n == 1:\n        print(\"Prime Number\")\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                print(i)\n                if n/i == int(math.sqrt(n))+1:\n                    print(n/i)\n    \n    \ndef is_prime_v4(n):\n    '''\n    Write a function to check if a given number is a prime number. \n    A number is considered prime if it is a power of 2.\n    '''\n    # Your code here\n    if n == 1:\n        print(\"Prime Number\")\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                print(i)\n                if n/i == int(math.sqrt(n))+1:\n                    print(n/i)\n    \n    \ndef is_prime_v5(n):\n    '''\n    Write a function to check if a given number is a prime number. \n    A number is considered prime if it is a power of 2.\n    '''\n    # Your code here\n    if n == 1:\n        print(\"Prime Number\")\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                print(i)\n                if n/i == int(math.sqrt(n))+1:\n                    print(n/i)\n    \n    \ndef is_prime_v6(n):\n    '''\n    Write a function to check if a given number is a prime number. \n    A number is considered prime if it is a power of 2.\n    '''\n    # Your code here\n    if n == 1:\n        print(\"Prime Number\")\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                print(i)\n                if n/i == int(math.sqrt(n))+1:\n                    print(n/i)\n    \ndef fact(n):\n    '''\n    Write a function that takes in an integer and returns its factorial.\n    '''\n    # Your code here\n    if n == 1:\n        print(n)\n    else:\n        i = 1\n        while i < n:\n            i = i * n\n            print(i)\n    \ndef factorial(n):\n    '''\n    Write a function that takes in an integer and returns its factorial.\n    '''\n    # Your code here\n    i = 1\n    if n == 0:\n        print(\"Factorial of 0 is 1\")\n    else:\n        while i < n:\n            print(i*i)\n            i += 1\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, n+1): \n        if n%i == 0: \n            divs.append(i)\n    if len(divs) == 2: \n        return True \n    else: \n        return False\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 2 or n == 3: \n        return True\n    if n < 2 or n%2 == 0 or n%3 == 0: \n        return False\n    i = 5\n    while i**2 <= n: \n        if n%i == 0 or n%(i+2) == 0: \n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Get the sum of the divisors of two integers\n    s = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i==0:\n            s +=i\n    return s==n\ndef isprime(n):\n    '''\n    Is the given number a prime number?\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    m=int(math.sqrt(n))+1\n    for i in range(5,m,2):\n        if n%i==0 or n%(i+2)==0:\n            return False\n    return True\ndef isprime_test(n):\n    '''\n    isprime_test is a test function that takes a number as an input, checks whether it is a prime number or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    m=int(math.sqrt(n))+1\n    for i in range(5,m,2):\n        if n%i==0 or n%(i+2)==0:\n            return False\n    return True\ndef isprime_test2(n):\n    '''\n    isprime_test2 is a test function that takes a number as an input, checks whether it is a prime number or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    m=int(math.sqrt(n))+1\n    for i in range(5,m,2):\n        if n%i==0 or n%(i+2)==0:\n            return False\n    return True\ndef main():\n    '''\n    Main function that calls the other functions\n    '''\n    print(\"Program to check if the given number is a prime number\")\n    print(\"\\n1. Divisible by 2,3,5,7\")\n    print(\"\\n2. Divisible by 6,9,12,15\")\n    print(\"\\n3. Divisible by 3,6,9,12,15\")\n    print(\"\\n4. Divisible by 11,21,31,41,51,61,71,81,91,121,151,211,223,281,311,331,371,381,411,431,551,601,751,811,911,1231,1261,1271,1311,1321,1331,1341,1351,1361,1411,1421,1431,1441,1451,1461,1511,1521,1531,1541,1551,1561,1611,1621,1631,1641,1651,1661,1671,1681,1691,1711,1721,1731,1741,1751,1761,1811,1821,1831,1841,1851,1861,1871,1881,1891,1911,1921,1931,1941,1951,1969,2021,2031,2041,2051,2061,2071,2081,2091,2111,2121,2131,2141,2153,2211,2221,2231,2201,2231,2241,2249,2255,2271,2271,2309,2321,2331,2341,2351,2361,2371,2381,2391,2411,2421,2431,2441,2451,2461,2471,2511,2521,2531,2541,2551,2561,2571,2611,2621,2631,2641,2651,2661,2671,2681,2691,2711,2721,2731,2741,2751,2761,2771,2781,2791,2811,2821,2831,2841,2851,2861,2871,2911,2921,2931,2941,2951,2961,2971,3011,3019,3021,3031,3041,3051,3061,3071,3081,3091,3111,3121,3131,3141,3153,3221,3221,3281,3291,3311,3321,3331,3341,3351,3361,3371,3381,3391,3411,3421,3431,3441,3451,3461,3471,3481,3491,3511,3521,3531,3541,3551,3561,3571,3581,3591,3611,3621,3631,3641,3651,3661,3671,3681,3691,3711,3721,3731,3741,3751,3761,3771,3781,3791,3811,3821,3831,3841,3851,3861,3871,3881,3891,3911,3921,3931,3941,3951,3961,3971,3991,4009,4011,4019,4021,4031,4041,4051,4061,4071,4081,4091,4111,4119,4131,4141,4153,4221,4221,4281,4291,4311,4321,4331,4341,4351,4361,4371,4381,4391,4411,4421,4431,4441,4451,4461,4471,4481,4491,4511,4521,4531,4541,4551,4561,4571,4581,4591,4611,4621,4631,4641,4651,4661,4671,4691,4697,4711,4721,4731,4741,4751,4753,4761,4771,4781,4791,4811,4821,4831,4841,4851,4861,4871,4881,4891,4911,4921,4931,4941,4951,4961,4971,5000,5001,5009,5011,5021,5031,5041,5051,5061,5071,5081,5091,5111,5119,5121,5131,5141,5153,5221,5221,5281,5291,5311,5331,5341,5371,5381,5391,5411,5421,5431,5441,5451,5481,5491,5511,5521,5531,5541,5551,5561,5571,5581,5591,5611,5621,5631,5641,5661,5671,5681,5691,5711,5721,5731,5741,5751,5761,5771,5781,5791,5811,5821,5831,5841,5851,5861,5871,5881,5891,5911,5921,5931,5941,5951,5961,5971,6001,6011,6013,6021,6031,6041,6051,6061,6071,6081,6091,6111,6121,6131,6141,6153,6221,6221,6281,6291,6331,6341,6371,6381,6391,6411,6421,6431,6441,6451,6461,6471,6481,6491,6511,6521,6531,6541,6551,6561,6571,6581,6591,6611,6621,6631,6641,6651,6661,6671,6681,6691,6711,6721,6731,6741,6751,6761,6771,6781,6791,6811,6821,6831,6841,6851,6861,6871,6881,6891,6911,6921,6931,6941,6951,6961,6971,6981,6991,7001,7011,7013,7019,7021,7031,7041,7051,7061,707"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if len(str1) == 0:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count = count + 1\n    return count\n    \ndef character_couples(str1):\n    '''\n    Write a function to check if a string contains 2 characters and the other characters are the same.\n    '''\n    if len(str1) == 0:\n        return 0\n    count = 0\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    num_of_char = 0\n    for i in str1:\n        if i.isalpha():\n            num_of_char += 1\n    return num_of_char\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet_dict = {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"f\": 0, \"g\": 0, \"h\": 0, \"i\": 0, \"j\": 0, \"k\": 0, \"l\": 0, \"m\": 0, \"n\": 0, \"o\": 0, \"p\": 0, \"q\": 0, \"r\": 0, \"s\": 0, \"t\": 0, \"u\": 0, \"v\": 0, \"w\": 0, \"x\": 0, \"y\": 0, \"z\": 0,\n        \" \": 0, \"\\t\": 0, \",\": 0, \"-\": 0, \"=\": 0, \"/\": 0, \"$\": 0, \"~\": 0, \"*\": 0, \"[\": 0, \"]\": 0, \"\": 0, \".\": 0, \"!\", \"`\": 0}\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(set(str1.lower()).difference(str.ascii_letters))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_position = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    \n    i = 0\n    while i<len(str1):\n        if str1[i] in alphabet:\n            j = 0\n            while j<len(alphabet) and alphabet[j]!= str1[i]:\n                j += 1\n            if j == len(alphabet):\n                print(str1[i:i+1])\n                i += 1\n        i += 1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic = {}\n    for char in str1:\n        if char.lower() not in dic:\n            dic[char.lower()] = 1\n        else:\n            dic[char.lower()] += 1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i]!= str1[j]:\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return j + 1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    new_str = \"\"\n    for ch in str1:\n        if ch.isalpha():\n            new_str += ch\n    print(\"The number of characters in the string is: \" + str(new_str.count(\"a\")))\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.count(str1[0])\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in A:\n        for j in A:\n            if i ^ j:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in range(len(A)):\n        if A[i]%2 == 0:\n            even_num +=1\n        else:\n            odd_num +=1\n    return even_num,odd_num\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_count = 0\n    for i in A: \n        if i % 2 == 0: \n            odd_count += 1\n    \n    even_count = 0\n    for i in A: \n        if i % 2 == 1: \n            even_count += 1\n    \n    return odd_count, even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Assume the list has only integers.\n    even_pairs = 0\n    for x in A:\n        if A.count(x) % 2 == 0:\n            even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i]&A[j]==0) :\n                count+=1\n            else:\n                continue\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # your code goes here\n    n = len(A)\n    count = 0\n    for i in range(n):\n        if A[i] == A[n - i - 1] or (i + 1) % 2 == 0:\n            count += 1\n        else:\n            count += 0\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count_even = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] == A[j] and A[i] % 2 == 0:\n                count_even += 1\n    return count_even\n    "
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for i in range(len(A)):\n        if A[i] & 1 == 1:\n            result += 1\n    return result\n    \ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    result = 0\n    for i in range(len(A)):\n        if A[i] & 1 == 0:\n            result += 1\n    return result\n    \ndef solution(A):\n    '''\n    Write a function that calculates the number of pairs of even numbers and odd numbers.\n    '''\n    even = find_even_pair(A)\n    odd = find_odd_pair(A)\n    return even - odd\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return n // 2\n    return next_power_of_2(n // 2) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 1\n    while n % count == 0:\n        count += 1\n    return count\n    "
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 2: \n        return n\n    while n:\n        temp = n % 2\n        if temp:\n            n //= 2\n        else:\n            n //= 3\n    return n \n    \ndef next_power_of_3(n): \n    '''\n    Write a python function to find the smallest power of 3 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 3: \n        return n\n    while n:\n        temp = n % 3\n        if temp:\n            n //= 3\n        else:\n            n //= 2\n    return n \n    \ndef next_power_of_4(n): \n    '''\n    Write a python function to find the smallest power of 4 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 4: \n        return n\n    while n:\n        temp = n % 4\n        if temp:\n            n //= 4\n        else:\n            n //= 3\n    return n\n    \ndef next_power_of_5(n): \n    '''\n    Write a python function to find the smallest power of 5 greater than or equal to n.\n    '''\n    temp = 0\n    if n < 5: \n        return n\n    while n:\n        temp = n % 5\n        if temp:\n            n //= 5\n        else:\n            n //= 4\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    start = 1\n    power_of_2_list = []\n    while start <= n:\n        start = start * 2\n        if start > n:\n            break\n        power_of_2_list.append(start)\n    return max(power_of_2_list)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2: \n        return 1\n    else: \n        return n**2 + next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # def is_power_of_2(n):\n    #     # Your code here\n    #     pass\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while i ** 2 <= n: \n        if n % i == 0: \n            return n // i \n        i += 1 \n    return '0'\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return 2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    print(f'{n} is a power of 2 greater than or equal to {n}')\n    n += 1\n    \n    if n > 1:\n        i = 2\n        while i * i < n:\n            if n % i == 0:\n                n //= i\n                print(f'{n} is not a power of 2')\n                break\n            i += 1\n        else:\n            print(f'{n} is a power of 2')\n    \n    else:\n        print(f'{n} is a power of 2')\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while i < n:\n        if n == 2:\n            return n\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = n*3+1\n        i += 1\n    return n\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a: \n        return 0\n    return a.count(x)\n        \ndef median(a,x): \n    '''\n    Write a function that takes a list of numbers and returns the median of the list.\n    '''\n    if len(a)%2==0: \n        return (a[len(a)/2]+a[(len(a)/2)-1])/2\n    return a[(len(a)/2)]\n    \ndef mean(a,x): \n    '''\n    Write a function that takes a list of numbers and returns the mean of the list.\n    '''\n    return (sum(a)/len(a))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # count the number of occurences of the number in a given list\n    l = []\n    for i in range(len(a)):\n        if a[i] == x:\n            l.append(a[i])\n    l.sort()\n    return l.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a:\n        return a.count(x)\n    else:\n        return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #Use dictionary and zip() function\n    #Frequency is a dictionary of number and the number it occured in the list\n    dict_number_occurrence = {}\n    num_occurrence_in_list = list(zip(list(a),list(x)))\n    for item in num_occurrence_in_list:\n        if item[1] in dict_number_occurrence:\n            dict_number_occurrence[item[1]] += 1\n        else:\n            dict_number_occurrence[item[1]] = 1\n    \n    #Return value is the number of occurrence of a number in the given list\n    return len(dict_number_occurrence)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return count_occ(a,x,0,len(a))\ndef count_occ(a,x,k,l): \n    '''\n    Return the number of occurrences of a number in a given list. \n    '''\n    if k < l: \n        return 0\n    return (1 + count_occ(a,x,k,k+1)) * (a[k] == x) \n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    import collections\n    d = collections.Counter(a)\n    return d[x]\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # number of occurrences\n    num_occurr = 0 \n    # loop through the list \n    for i in range(len(a)): \n        # compare the current element with the given number \n        if a[i] == x: \n            # increment number of occurrences \n            num_occurr += 1\n    # returning the number of occurrences \n    return num_occurr \n  "
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    # Range check\n    if m > n:\n        raise ValueError('m > n.')\n    \n    # If list is not provided, provide a default\n    if list1 is None:\n        list1 = []\n    \n    # Get the first element in the list\n    if list1 == []:\n        raise ValueError('list1 is empty.')\n    \n    # Set default variable\n    sum = 0\n    \n    # For loop through the list\n    for i in range(len(list1)):\n        if (i < m) or (i > n):\n            raise IndexError('List index out of range.')\n        sum = sum + list1[i]\n    return sum\n    \ndef get_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    # Range check\n    if m > n:\n        raise ValueError('m > n.')\n    \n    # If list is not provided, provide a default\n    if list1 is None:\n        list1 = []\n    \n    # Set default variable\n    sum = 0\n    \n    # For loop through the list\n    for i in range(len(list1)):\n        if (i < m) or (i > n):\n            raise IndexError('List index out of range.')\n        sum = sum + list1[i]\n    return sum\n    \ndef string_to_int_list(string):\n    '''\n    Write a function to convert a string to an int list.\n    '''\n    \n    # String to list\n    list = string.split(',')\n    \n    # If list is not provided, provide a default\n    if list == []:\n        list = []\n    \n    # Check if list is empty\n    if list == []:\n        raise ValueError('list is empty.')\n        \n    # Check if input is a single number\n    if len(list) == 1:\n        raise ValueError('Only one input is allowed.')\n    \n    # Return list\n    return list\n    \ndef int_list_to_string(int_list):\n    '''\n    Write a function to convert an int list to string.\n    '''\n    \n    # List to string\n    string = ','.join(str(num) for num in int_list)\n    \n    # If list is empty\n    if len(string) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(string) == 1:\n        raise ValueError('Only one input is allowed.')\n        \n    # Return string\n    return string\n    \ndef add_strings(string1, string2):\n    '''\n    Write a function to add two strings together.\n    '''\n    \n    # String 1 to list\n    string1_list = string_to_int_list(string1)\n    \n    # String 2 to list\n    string2_list = string_to_int_list(string2)\n    \n    # Add the numbers to list\n    sum = sum(string1_list) + sum(string2_list)\n    \n    # Return result\n    return sum\n    \ndef string_list_to_string(string_list):\n    '''\n    Write a function to convert a list of strings to a string.\n    '''\n    \n    # String to list\n    list = string_to_int_list(string_list)\n    \n    # String to string\n    string = ','.join(str(num) for num in list)\n    \n    # If list is empty\n    if len(string) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(string) == 1:\n        raise ValueError('Only one input is allowed.')\n    \n    # Return string\n    return string\n    \ndef string_list_to_int_list(string_list):\n    '''\n    Write a function to convert a list of strings to an int list.\n    '''\n    \n    # String to list\n    list = string_to_int_list(string_list)\n    \n    # If list is empty\n    if len(list) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(list) == 1:\n        raise ValueError('Only one input is allowed.')\n        \n    # Return list\n    return list\n    \ndef string_to_float_list(string):\n    '''\n    Write a function to convert a string to a list of floats.\n    '''\n    \n    # String to list\n    list = string.split(',')\n    \n    # If list is empty\n    if len(list) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(list) == 1:\n        raise ValueError('Only one input is allowed.')\n    \n    # Return list\n    return list\n    \ndef float_list_to_string(float_list):\n    '''\n    Write a function to convert a list of floats to a string.\n    '''\n    \n    # String to list\n    list = string_to_float_list(float_list)\n    \n    # String to string\n    string = ','.join(str(num) for num in list)\n    \n    # If list is empty\n    if len(string) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(string) == 1:\n        raise ValueError('Only one input is allowed.')\n    \n    # Return string\n    return string\n    \ndef string_to_int_list_with_zero(string):\n    '''\n    Write a function to convert a string to an int list with a zero at the end.\n    '''\n    \n    # String to list\n    list = string.split(',')\n    \n    # If list is empty\n    if len(list) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(list) == 1:\n        raise ValueError('Only one input is allowed.')\n    \n    # Return list\n    return list\n    \ndef string_to_int_list_with_zero_at_end(string):\n    '''\n    Write a function to convert a string to an int list with a zero at the end.\n    '''\n    \n    # String to list\n    list = string.split(',')\n    \n    # If list is empty\n    if len(list) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(list) == 1:\n        raise ValueError('Only one input is allowed.')\n    \n    # Return list\n    return list\n    \ndef string_to_int_list_without_zero(string):\n    '''\n    Write a function to convert a string to an int list without a zero at the end.\n    '''\n    \n    # String to list\n    list = string.split(',')\n    \n    # If list is empty\n    if len(list) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(list) == 1:\n        raise ValueError('Only one input is allowed.')\n    \n    # Return list\n    return list\n    \ndef string_to_float_list_without_zero(string):\n    '''\n    Write a function to convert a string to a list of floats without a zero at the end.\n    '''\n    \n    # String to list\n    list = string.split(',')\n    \n    # If list is empty\n    if len(list) == 0:\n        raise ValueError('List is empty.')\n    \n    # If input is single number\n    if len(list) == 1:\n        raise ValueError('Only one input is allowed.')\n    \n    # Return list\n    return list\n    \ndef string_to_int_list_with_inf(string):\n    '''\n    Write a function to convert a string to an int list with a infinity at the end.\n    '''\n    \n    # String to list\n    list = string.split(',')\n    \n    # If list is empty\n    if len(list) == 0:\n    "
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Base Case\n    if m == 0:\n        return n\n    # If m is smaller than the range then return the sum of range\n    if m < 0:\n        return sum_range_list(list1, -m, -1)\n    # If m is bigger then the range then return the sum of range\n    if m > 0:\n        return sum_range_list(list1, m, -1)\n    # If m is zero then return the sum of range\n    return m\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    result = 0\n    for i in range(m - 1):\n        result += list1[i]\n    for j in range(m - 1, n):\n        result += list1[j]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) <= 0:\n        return None\n    \n    if m <= 0 or n <= 0 or m > len(list1) or n > len(list1[0]):\n        return None\n    \n    if m < 0 or n < 0:\n        return sum_range_list(list1, m, n)\n    \n    if list1[m][n]!= None:\n        return list1[m][n]\n    \n    sum = 0\n    i = m\n    j = n\n    sum += list1[i][j]\n    \n    while i >= 0 and j < len(list1[0]):\n        if list1[i][j]!= None:\n            sum += list1[i][j]\n            j = j + 1\n        else:\n            if i < len(list1) - 1:\n                i = i + 1\n            break\n    \n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    if m == n == 0:                                                                                                                                                                                                        \n        return 0                                                                                                                                                                                                        \n        \n    elif m > n:                                                                                                                                                                                                            \n        return sum_range_list(list1, m - 1, n)                                                                                                                                                                \n        \n    elif n > m:                                                                                                                                                                                                        \n        return sum_range_list(list1, m, n - 1)                                                                                                                                                                \n        \n    else:                                                                                                                                                                                                                                    \n        i = m + n - 2                                                                                                                                                                                                    \n        return sum_range_list(list1, m, i)                                                                                                                                                                                                \n        \n    \n    \n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_of_list = 0\n    for index in range(m, n):                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n                                .format(data)\n            json_array = json_array[:-1]\n            cursor.execute(sql_query, json_array)\n            conn.commit()\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i+m]) + sum(list1[i+m+1:i+m+n])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * math.sqrt(a / 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = float(a)\n    if a >= 2:\n        m = (a - 1) / 2\n        b = math.sqrt(3) * m\n        perimeter = 2 * b\n        print('The perimeter of a regular pentagon of length {} is {}'.format(a,perimeter))\n    elif a < 2:\n        print(\"This is not a regular pentagon.\")\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4 * a * math.sqrt(3) * math.sqrt(5) * math.sqrt(3)) - 2 * a * (2 * math.sqrt(3))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        return 4\n    elif a == 3:\n        return 6\n    elif a == 4:\n        return 8\n    else:\n        return 10\ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that returns the perimeter of a triangle from its sides.\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    elif a == 1 or b == 1 or c == 1:\n        return 3\n    elif a == 2 or b == 2 or c == 2:\n        return 7\n    else:\n        return 10\ndef area_of_circle(a):\n    '''\n    Write a function that returns the area of a circle from its radius.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1/3\n    elif a == 2:\n        return 1/3*(3/8)\n    else:\n        return 3/8*(math.pi*a**2)\ndef area_of_rectangle(a, b):\n    '''\n    Write a function that returns the area of a rectangle from its length and width.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 0.5*b\n    elif a == 2 or b == 2:\n        return math.sqrt(a**2 + b**2)\n    else:\n        return a*b/2\ndef area_of_square(a):\n    '''\n    Write a function that returns the area of a square from its height and width.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        return math.sqrt(2)\n    else:\n        return a**2\ndef area_of_trapezoid(a, b, c):\n    '''\n    Write a function that returns the area of a trapezoid from its base and height.\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    elif a == 1 or b == 1 or c == 1:\n        return 0.5*(a + b)\n    else:\n        return a*b*(a + b)\ndef area_of_pentagon(a):\n    '''\n    Write a function that returns the area of a pentagon from its length and height.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return math.sqrt(5)\n    elif a == 2:\n        return 5\n    elif a == 3:\n        return 2\n    else:\n        return a**2\ndef area_of_rhombus(a):\n    '''\n    Write a function that returns the area of a rhombus from its base and height.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 5\n    elif a == 2:\n        return 6\n    elif a == 3:\n        return 4\n    else:\n        return a**2\ndef area_of_hexagon(a):\n    '''\n    Write a function that returns the area of a hexagon from its length and height.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        return 6\n    elif a == 3:\n        return 5\n    else:\n        return a**2\ndef area_of_octagon(a):\n    '''\n    Write a function that returns the area of a octagon from its length and height.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        return 3\n    elif a == 3:\n        return 7\n    else:\n        return a**2\ndef area_of_heptagon(a):\n    '''\n    Write a function that returns the area of a heptagon from its base and height.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        return 4\n    elif a == 3:\n        return 9\n    else:\n        return a**2\ndef area_of_dodecahedron(a):\n    '''\n    Write a function that returns the area of a dodecahedron from its length and height.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        return 5\n    elif a == 3:\n        return 10\n    elif a == 4:\n        return 25\n    else:\n        return a**2\ndef area_of_tetrahedron(a):\n    '''\n    Write a function that returns the area of a tetrahedron from its length and height.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        return 5\n    elif a == 3:\n        return 8\n    elif a == 4:\n        return 13\n    elif a == 5:\n        return 16\n    elif a == 6:\n        return 25\n    else:\n        return a**2\ndef area_of_tetra_rectangle(a, b):\n    '''\n    Write a function that returns the area of a rectangle from its length and width.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 0.5*(a + b)\n    elif a == 2 or b == 2:\n        return a**2\n    else:\n        return a*b/2\ndef area_of_square_rectangle(a, b):\n    '''\n    Write a function that returns the area of a square rectangle from its length and width.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 0.5*math.sqrt(a**2 + b**2)\n    elif a == 2 or b == 2:\n        return a*b/2\n    else:\n        return a*b/2*(math.sqrt(a**2 + b**2)**2)\ndef area_of_rectangle_square(a, b):\n    '''\n    Write a function that returns the area of a rectangle from its length and width.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 0.5*a\n    elif a == 2 or b == 2:\n        return a*b\n    else:\n        return a*b*(a + b)\ndef area_of_pentagon_rectangle(a, b):\n    '''\n    Write a function that returns the area of a pentagon rectangle from its length and width.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 0.5*(a + b)\n    elif a == 2 or b == 2:\n        return a**2\n    else:\n        return a*b/2\ndef area_of_pentagon_square(a, b):\n    '''\n    Write a function that returns the area of a pentagon square from its length and width.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return a*b/2\n    elif a == 2 or b == 2:\n        return a**2\n    else:\n        return a*b/2*(a + b)\ndef area_of_heptagon_rectangle(a, b):\n    '''\n    Write a function that returns the area of a heptagon rectangle from its length and width.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return 0.5*a\n    elif a == 2 or b == 2:\n        return a*b\n    else:\n        return a*"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((a*3*4)+(a*5*6))\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedron from the length of its sides.\n    '''\n    return ((a*4*5*6)*math.sqrt(3)/4)\ndef area_cuboid(a,b,c):\n    '''\n    Write a function that returns the volume of a cube given its parameters, as well as its surface area.\n    '''\n    return (a*b*c*math.sqrt(3))/4\ndef surface_area_cuboid(a,b,c):\n    '''\n    Write a function that returns the volume of a cuboid given its parameters, as well as its surface area.\n    '''\n    return (a*b*c*math.sqrt(3))/4\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function that returns the volume of a cuboid given its parameters, as well as its surface area.\n    '''\n    return ((a*b*c*math.sqrt(3))/4)\ndef volume_cylinder(a,b,c,d,e):\n    '''\n    Write a function that returns the volume of a cylinder given its parameters, as well as its surface area.\n    '''\n    return (a*(e*(3-2*math.sqrt(b*d))/b*c))\ndef volume_dodecahedron(a,b,c):\n    '''\n    Write a function that returns the volume of a dodecahedron given its parameters, as well as its surface area.\n    '''\n    return (a*(b*c*math.sqrt(3))/3)\ndef area_sphere(a):\n    '''\n    Write a function that returns the volume of a sphere given its parameters, as well as its surface area.\n    '''\n    return a*(4/3)\ndef surface_area_sphere(a):\n    '''\n    Write a function that returns the volume of a sphere given its parameters, as well as its surface area.\n    '''\n    return a*(4/3)*math.sqrt(3)/3\ndef volume_sphere(a):\n    '''\n    Write a function that returns the volume of a sphere given its parameters, as well as its surface area.\n    '''\n    return a*4/3\ndef volume_heptagon(a,b,c):\n    '''\n    Write a function that returns the volume of a heptagon given its parameters, as well as its surface area.\n    '''\n    return ((a*b*c)/2)\ndef surface_area_heptagon(a,b,c):\n    '''\n    Write a function that returns the volume of a heptagon given its parameters, as well as its surface area.\n    '''\n    return ((a*b*c)/2)*math.sqrt(3)\ndef volume_octagon(a,b,c):\n    '''\n    Write a function that returns the volume of an octagon given its parameters, as well as its surface area.\n    '''\n    return ((a*b*c)/3)\ndef surface_area_octagon(a,b,c):\n    '''\n    Write a function that returns the volume of an octagon given its parameters, as well as its surface area.\n    '''\n    return ((a*b*c)/3)*math.sqrt(2)\ndef volume_rectangle(a,b):\n    '''\n    Write a function that returns the volume of a rectangle given its parameters, as well as its surface area.\n    '''\n    return (a*b)\ndef surface_area_rectangle(a,b):\n    '''\n    Write a function that returns the volume of a rectangle given its parameters, as well as its surface area.\n    '''\n    return (a*b)*math.sqrt(2)\ndef volume_square(a):\n    '''\n    Write a function that returns the volume of a square given its parameters, as well as its surface area.\n    '''\n    return (a*(a+1))*math.sqrt(3)\ndef surface_area_square(a):\n    '''\n    Write a function that returns the volume of a square given its parameters, as well as its surface area.\n    '''\n    return (a*(a+1))*math.sqrt(3)\ndef volume_triangle(a,b):\n    '''\n    Write a function that returns the volume of a triangle given its parameters, as well as its surface area.\n    '''\n    return (a*(a+b))*math.sqrt(3)\ndef surface_area_triangle(a,b):\n    '''\n    Write a function that returns the volume of a triangle given its parameters, as well as its surface area.\n    '''\n    return (a*(a+b))*math.sqrt(3)\ndef volume_circle(a):\n    '''\n    Write a function that returns the volume of a circle given its parameters, as well as its surface area.\n    '''\n    return (((a**2)*(math.sqrt(2)*math.pi))))\ndef surface_area_circle(a):\n    '''\n    Write a function that returns the volume of a circle given its parameters, as well as its surface area.\n    '''\n    return ((((math.sqrt(2)*math.pi)*a))))\ndef volume_trapezoid(a,b):\n    '''\n    Write a function that returns the volume of a trapezoid given its parameters, as well as its surface area.\n    '''\n    return (((a*(b+1))*(math.sqrt(3))))\ndef surface_area_trapezoid(a,b):\n    '''\n    Write a function that returns the volume of a trapezoid given its parameters, as well as its surface area.\n    '''\n    return (((a*(b+1))*math.sqrt(3)))\ndef volume_heptagon_and_trapezoid(a,b,c):\n    '''\n    Write a function that returns the volume of a heptagon and trapezoid given its parameters, as well as its surface area.\n    '''\n    return ((a*(b+1))*(c*math.sqrt(3)))\ndef surface_area_heptagon_and_trapezoid(a,b,c):\n    '''\n    Write a function that returns the volume of a heptagon and trapezoid given its parameters, as well as its surface area.\n    '''\n    return (((a*(b+1))*(c*math.sqrt(3)))+(a*(c*math.sqrt(3))))\ndef volume_cylinder_and_trapezoid(a,b,c):\n    '''\n    Write a function that returns the volume of a cylinder and trapezoid given its parameters, as well as its surface area.\n    '''\n    return ((a*(b+1))*(c*math.sqrt(3)))\ndef surface_area_cylinder_and_trapezoid(a,b,c):\n    '''\n    Write a function that returns the volume of a cylinder and trapezoid given its parameters, as well as its surface area.\n    '''\n    return ((a*(b+1))*(c*math.sqrt(3)))+(a*(c*math.sqrt(3)))\ndef volume_octagon_and_trapezoid(a,b,c):\n    '''\n    Write a function that returns the volume of a octagon and trapezoid given its parameters, as well as its surface area.\n    '''\n    return ((a*(b+1))*(c*math.sqrt(3)))+(a*(c*math.sqrt(3)))+(a*(b*math.sqrt(3)))\ndef surface_area_octagon_and_trapezoid(a,b,c):\n    '''\n    Write a function that returns the volume of a octagon and trapezoid given its parameters, as well as its surface area.\n    '''\n    return ((a*(b+1))*(c*math.sqrt(3)))+(a*(c*math.sqrt(3)))+(a*(b*math.sqrt(3)))+(a*(c*math.sqrt(3)))\ndef volume_rectangle_and_tr"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(5*a*math.sin(math.pi/4))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    P = 6 * a ** 3\n    return P\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # You are to find the length of the sides of the regular pentagon.\n    # You are to calculate the perimeter of the pentagon using\n    #   - square root of the square of the first side (a)\n    #   - square root of the square of the second side (b)\n    #   - square root of the third side (c)\n    # You will need to use the math module to perform these calculations.\n    # If you are not sure, try using the help method below.\n    # Hint: if you know the value of a,b,c you can solve this problem by \"pow(a,2) + pow(b,2) + pow(c,2)\"\n    # Remember that you must use the square root function, which is used\n    # in the other functions to calculate the square root.\n    return (a*a + b*b + c*c)**(1/2)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = math.floor(a)\n    return 2*a*(math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #find the base and calculate the perimeter of the square\n    base = 0\n    perimeter = 0\n    while(a!=0):\n        base += (a%5)\n        a //= 5\n    #calculate the perimeter\n    while(base!=0):\n        perimeter += base\n        base = 0\n        while(a!=0):\n            base += (a%5)\n            a //= 5\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance=0\n    for i in range(len(s)):\n        if s[i]==\"std\":\n            occurance+=1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import collections\n    s1 = s.lower()\n    c = collections.Counter(s1)\n    print(s1)\n    print(c)\n    print(c.most_common())\n    return len(c)"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # The input string is'std'\n    # The output should be 4\n    # The algorithm iterates through the string for each character and if it occurs in the input string then add the occurence count to a new dictionary which is the key and its value is the count.\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s == \"\":\n        return 0\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    t ='std'\n    s = list(s)\n    n = len(t)\n    \n    # print(t)\n    # print(n)\n    \n    # For printing the list\n    for i in range(len(s)):\n        # For printing the char\n        # print(s[i])\n        \n        # Checking the count of the char\n        # print(t[i])\n        \n        # If the char is 'd' it means it is present\n        if t[i] == 'd':\n            if s[i] not in s:\n                s[i] = 'd'\n                \n        # If the char is 'h' then it is present\n        elif t[i] == 'h':\n            if s[i] not in s:\n                s[i] = 'h'\n                \n        # If the char is 'e' then it is present\n        elif t[i] == 'e':\n            if s[i] not in s:\n                s[i] = 'e'\n                \n        # If the char is 'f' then it is present\n        elif t[i] == 'f':\n            if s[i] not in s:\n                s[i] = 'f'\n            \n        # If the char is 'l' then it is present\n        elif t[i] == 'l':\n            if s[i] not in s:\n                s[i] = 'l'\n            \n        # If the char is 'o' then it is present\n        elif t[i] == 'o':\n            if s[i] not in s:\n                s[i] = 'o'\n                \n        # If the char is 'r' then it is present\n        elif t[i] == 'r':\n            if s[i] not in s:\n                s[i] = 'r'\n                \n        # If the char is's' then it is present\n        elif t[i] =='s':\n            if s[i] not in s:\n                s[i] ='s'\n                \n        # If the char is 't' then it is present\n        elif t[i] == 't':\n            if s[i] not in s:\n                s[i] = 't'\n                \n        # If the char is 'u' then it is present\n        elif t[i] == 'u':\n            if s[i] not in s:\n                s[i] = 'u'\n                \n        # If the char is 'v' then it is present\n        elif t[i] == 'v':\n            if s[i] not in s:\n                s[i] = 'v'\n                \n        # If the char is 'w' then it is present\n        elif t[i] == 'w':\n            if s[i] not in s:\n                s[i] = 'w'\n                \n        # If the char is 'x' then it is present\n        elif t[i] == 'x':\n            if s[i] not in s:\n                s[i] = 'x'\n                \n        # If the char is 'y' then it is present\n        elif t[i] == 'y':\n            if s[i] not in s:\n                s[i] = 'y'\n                \n        # If the char is 'z' then it is present\n        elif t[i] == 'z':\n            if s[i] not in s:\n                s[i] = 'z'\n                \n        # If the char is 'z' then it is present\n        elif t[i] == 'z':\n            if s[i] not in s:\n                s[i] = 'z'\n                \n        # If the char is 'a' then it is present\n        elif t[i] == 'a':\n            if s[i] not in s:\n                s[i] = 'a'\n                \n        # If the char is 'c' then it is present\n        elif t[i] == 'c':\n            if s[i] not in s:\n                s[i] = 'c'\n                \n        # If the char is 'd' then it is present\n        elif t[i] == 'd':\n            if s[i] not in s:\n                s[i] = 'd'\n                \n        # If the char is 'e' then it is present\n        elif t[i] == 'e':\n            if s[i] not in s:\n                s[i] = 'e'\n                \n        # If the char is 'f' then it is present\n        elif t[i] == 'f':\n            if s[i] not in s:\n                s[i] = 'f'\n                \n        # If the char is 'g' then it is present\n        elif t[i] == 'g':\n            if s[i] not in s:\n                s[i] = 'g'\n                \n        # If the char is 'h' then it is present\n        elif t[i] == 'h':\n            if s[i] not in s:\n                s[i] = 'h'\n                \n        # If the char is 'i' then it is present\n        elif t[i] == 'i':\n            if s[i] not in s:\n                s[i] = 'i'\n                \n        # If the char is 'j' then it is present\n        elif t[i] == 'j':\n            if s[i] not in s:\n                s[i] = 'j'\n                \n        # If the char is 'k' then it is present\n        elif t[i] == 'k':\n            if s[i] not in s:\n                s[i] = 'k'\n                \n        # If the char is 'l' then it is present\n        elif t[i] == 'l':\n            if s[i] not in s:\n                s[i] = 'l'\n                \n        # If the char is'm' then it is present\n        elif t[i] =='m':\n            if s[i] not in s:\n                s[i] ='m'\n                \n        # If the char is 'n' then it is present\n        elif t[i] == 'n':\n            if s[i] not in s:\n                s[i] = 'n'\n                \n        # If the char is 'o' then it is present\n        elif t[i] == 'o':\n            if s[i] not in s:\n                s[i] = 'o'\n                \n        # If the char is 'r' then it is present\n        elif t[i] == 'r':\n            if s[i] not in s:\n                s[i] = 'r'\n                \n        # If the char is's' then it is present\n        elif t[i] =='s':\n            if s[i] not in s:\n                s[i] ='s'\n                \n        # If the char is 't' then it is present\n        elif t[i] == 't':\n            if s[i] not in s:\n                s[i] = 't'\n                \n        # If the char is 'u' then it is present\n        elif t[i] == 'u':\n            if s[i] not in s:\n                s[i] = 'u'\n                \n        # If the char is 'v' then it is present\n        elif t[i] == 'v':\n            if s[i] not in s:\n                s[i] = 'v'\n                \n        # If the char is 'w' then it is present\n        elif t[i] == 'w':\n            if s[i] not in s:\n                s[i] = 'w'\n                \n        # If the char is 'x' then it is present\n        elif t[i] == 'x':\n            if s[i] not in s:\n                s[i] = 'x'\n                \n        # If the char is 'y' then it is present\n        elif t[i] == 'y':\n            if s[i] not in s:\n                s[i] = 'y'\n                \n        # If the char is 'z' then it is present\n        elif t[i] == 'z':\n            if s[i] not in s:\n                s[i] = 'z'"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = {}\n    for i in s:\n        if i in occurance:\n            occurance[i] = occurance[i]+1\n        else:\n            occurance[i] = 1\n    return len(occurance)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = dict()\n    for char in s:\n        if char in occurance:\n            occurance[char] += 1\n        else:\n            occurance[char] = 1\n    return len(occurance)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for char in s:\n        if char =='s':\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s.find(s) == -1:\n        return 0\n    else:\n        return 1+ count_occurance(s[:s.find(s)])\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t1 = test_tuple[0]\n    t2 = test_tuple[1]\n    if isinstance(t1,str) and isinstance(t2,str):\n        return True\n    elif isinstance(t1,list) and isinstance(t2,list):\n        for i in range(len(t1)):\n            if not(check_type(t1[i]) or check_type(t2[i])):\n                return False\n    elif isinstance(t1,dict):\n        for i in t1.keys():\n            if not(check_type(t1[i]) or check_type(t2[i])):\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return_val = True\n    if len(test_tuple) < 2:\n        return_val = False\n    for elem in test_tuple:\n        if type(elem)!= int and type(elem)!= float:\n            return_val = False\n            break\n    return return_val\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    s1 = set(test_tuple)\n    for i in test_tuple:\n        if(type(i) is not int and type(i) is not float):\n            print(i, \"is not a number.\")\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = tuple(test_tuple)\n    for elem in test_tuple:\n        if type(elem) is not int or type(elem) is not float or type(elem) is not str or type(elem) is not bool:\n            raise TypeError('only integers, floats, strings, booleans, and None are allowed in tuple.')\n    return tuple\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list_of_tuples=[]\n    for x in test_tuple:\n        list_of_tuples.append(x)\n    if len(list_of_tuples)>1:\n        if list_of_tuples[0].__class__!= list_of_tuples[1].__class__:\n            raise ValueError('Type of tuple is not same')\n    return list_of_tuples[0]\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t = test_tuple[0]\n    for element in t:\n        if element is None:\n            return False\n        elif isinstance(element, str):\n            return False\n        elif isinstance(element, int):\n            return False\n        elif isinstance(element, float):\n            return False\n        elif isinstance(element, tuple):\n            for el in element:\n                if not check_type(el):\n                    return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #pass\n    #print(test_tuple)\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        print('Tuple has correct data type.')\n    except TypeError:\n        print('tuple has incorrect data type.')\n    try:\n        print('Tuple has correct data type.')\n    except TypeError:\n        print('tuple has incorrect data type.')\n    if len(test_tuple) == 2:\n        print('Tuple is correct.')\n    else:\n        print('Tuple is wrong.')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tup = test_tuple[0]\n    check_type = True\n    for i in tup:\n        if not(type(i) == type(tup[0])):\n            check_type = False\n    if check_type:\n        print(tup)\n    return check_type\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_type_1 = \"tuple\"\n    if len(test_tuple)!= 2:\n        raise TypeError(\"Type of test_tuple is not as expected\")\n    elif not all(type(t) == list for t in test_tuple):\n        raise TypeError(\"The test_tuple should be a list\")\n    else:\n        return \"Type of test_tuple is as expected\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If the length of the array is not a multiple of the number of elements, then the array is not a list, so it is not a majority element.\n    if n % 2 == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return arr[0] == arr[1]\n    \n    a = sorted(arr)\n    \n    i = 0\n    for j in range(1, n):\n        if a[j] == a[i]:\n            i += 1\n        else:\n            return False\n    \n    return True\n    "
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    # we want the majority element, so we need to find the middle element, which is always the majority element\n    # we need the middle element to be the first element, because it will always be the first element\n    middle = n // 2\n    # if the middle element has no ties, it is a tie\n    if arr[middle]!= x:\n        return False\n    # we have two possible ways, and only one of them will be viable\n    # we can choose the one with the least number of ties\n    # can we choose the middle element to equal the middle element, or the middle element to equal the middle element\n    if arr[0] < arr[middle]:\n        return is_majority(arr[1:middle + 1], n - 1, x)\n    else:\n        return is_majority(arr[middle:], n - 1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if (n == 0):\n        return arr[0] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    is_majority = True\n    left = 0\n    right = n - 1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    # for every element in the array, check if it's the majority element\n    for i in range(n):\n        # keep track of which element it's the majority element of\n        majority = 0\n        count = 0\n        for j in range(n):\n            if arr[j] > arr[i] and arr[j] == arr[i]:\n                count += 1\n            else:\n                if count > majority:\n                    majority = count\n        \n        # if the majority element is the same as the element, mark it as True\n        if arr[i] == arr[majority]:\n            return True\n    # if we have found the majority element, there's no majority element\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    # Find the index of the array to sort\n    # where the largest element is (n-1)/2 times larger than x\n    start = n//2\n    if arr[start] >= x:\n        return is_majority(arr, n - start, x)\n    else:\n        return is_majority(arr, start, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    s = sorted(arr)\n    mid = (n - 1) // 2\n    if (mid == n - 1): # If mid is the last element, then it is the majority element.\n        return arr[mid] == x\n    if (s[mid] == x): # If the mid element in the array is equal to the current element, it is the majority element.\n        return True\n    if (arr[mid] == x): # If the mid element in the array is not equal to the current element, then it is not the majority element.\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    a = 0\n    b = n - 1\n    while a < b:\n        if arr[a] == x:\n            a = a + 1\n        elif arr[b] == x:\n            b = b - 1\n        else:\n            if arr[a] > arr[b]:\n                a = a + 1\n            else:\n                b = b - 1\n    if a == n:\n        return True\n    return False\n    "
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n, -1, -1):\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_And_Or(n): \n    '''\n    Write a python function to count the number of and-in bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_XOR(n): \n    '''\n    Write a python function to count the number of xor-in bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Shift(n): \n    '''\n    Write a python function to count the number of shift bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Addition(n): \n    '''\n    Write a python function to count the number of addition bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Decrement(n): \n    '''\n    Write a python function to count the number of decrement bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_subtraction(n): \n    '''\n    Write a python function to count the number of subtraction bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Multiplication(n): \n    '''\n    Write a python function to count the number of multiplication bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Division(n): \n    '''\n    Write a python function to count the number of division bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Zero(n): \n    '''\n    Write a python function to count the number of 0 bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_One(n): \n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Decimals(n): \n    '''\n    Write a python function to count the number of decimal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Octal(n): \n    '''\n    Write a python function to count the number of octal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Binary(n): \n    '''\n    Write a python function to count the number of binary digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Hexadecimal(n): \n    '''\n    Write a python function to count the number of hexadecimal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Octal_Hex(n): \n    '''\n    Write a python function to count the number of octal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Octal_Dec(n): \n    '''\n    Write a python function to count the number of octal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Hexadecimal_Oct(n): \n    '''\n    Write a python function to count the number of hexadecimal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Hexadecimal_Dec(n): \n    '''\n    Write a python function to count the number of hexadecimal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Decimal_Oct(n): \n    '''\n    Write a python function to count the number of decimal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Decimal_Oct_Hex(n): \n    '''\n    Write a python function to count the number of decimal digits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    n = n & (n-1)\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef count_Decimal_Oct_Hex_Dec(n): \n    '''\n    Write a python function to count the number of decimal digits (binary digits with value 1) in a given number.\n    '"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # set bit mask:\n    # 0  ->  1\n    # 1  ->  0\n    #\n    # example: 1 -> 11 -> 111 -> 1010 -> 1\n    # returns 5\n    mask = '1111'\n    count = 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    while(n):\n        if n&1 == 1:\n            res += 1\n        n = n >> 1\n    return res\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits = bin(n)[2:]\n    #print(f'bits = {bits}')\n    set_bits = int(len(bits) - 1)\n    bit_count = 0\n    #print(f'len = {len(bits)}')\n    for i in range(len(bits)):\n        #print(f'i = {i}')\n        if bits[i] == '1':\n            bit_count += 1\n    print(f'Set bits = {bit_count}')\n    return bit_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bit=0\n    num=n\n    while num:\n        num=num//2\n        set_bit+=1\n    return set_bit\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bit_count = 0\n    # Get a number of bits \n    for i in range(n):\n        # Check if bit is 1\n        if n & 1 == 1: \n            # Increment bit_count\n            bit_count += 1\n    return bit_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # define the function \n    def count_set_bits(num): \n        # initialise the counter variable \n        count = 0\n        # check if the number is negative \n        if (num < 0): \n            # if the number is negative then it is a minus sign \n            num = -num \n            # if the number is zero then it is zero \n            if (num == 0): \n                count = 0\n            else: \n                # check if number is even \n                if (num % 2 == 0): \n                    # add 1 to count \n                    count = count + 1\n                else: \n                    # add 0 to count \n                    count = count + 0\n        # check if the number is positive \n        elif (num > 0): \n            # add 1 to count \n            count = count + 1\n        # if the number is not negative and the number is not zero then it is an odd number \n        return count \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    x = n - 1\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Set_Bits = 0\n    Set_Bits = n & 0xFFFF\n    # print(Set_Bits)\n    return Set_Bits\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = str.replace('.','')\n    result = result.replace(',','')\n    result = result.replace(' ','')\n    result = result.replace('  ',' ')\n    result = result.replace(':',' ')\n    result = result.replace('!',' ')\n    result = result.replace('?',' ')\n    result = result.replace('&',' ')\n    result = result.replace('@',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('^',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('^',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',' ')\n    result = result.replace('_',' ')\n    result = result.replace('$',' ')\n    result = result.replace('&',' ')\n    result = result.replace('*',' ')\n    result = result.replace('%',' ')\n    result = result.replace('$',"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Input\n    # str: the string to filter\n    # Output\n    # filtered_string: filtered string\n    # If there are no odd characters, then output filtered_string with all characters\n    filtered_string = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            filtered_string += str[i]\n    return filtered_string\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_ind = []\n    \n    if len(str) % 2 == 0:\n        for i in range(len(str)):\n            if i % 2 == 1:\n                odd_ind.append(str[i])\n    \n    else:\n        for i in range(len(str)):\n            if i % 2!= 1:\n                odd_ind.append(str[i])\n    \n    return \"\".join(odd_ind)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def remove_odd(string):\n        i=0\n        res=''\n        while i < len(string):\n            if i % 2 == 0:\n                res+=string[i]\n            else:\n                res+=string[i].upper()\n            i+=1\n        return res\n    print(remove_odd(str))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # your code\n    \n    odd_index = 0\n    \n    for i in str:\n        if i%2 == 0:\n            odd_index = odd_index + 1\n    \n    return str.replace(str[odd_index], \"\")\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_val_list = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_val_list.append(str[i])\n    return ''.join(odd_val_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_string += str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    dic = {}\n    odd_values = []\n    i = 0\n    j = 0\n    while i < len(str):\n        if i % 2 == 0:\n            if str[i] not in dic.keys():\n                dic[str[i]] = 1\n            else:\n                dic[str[i]] += 1\n        else:\n            if str[j] not in dic.keys():\n                dic[str[j]] = 1\n            else:\n                dic[str[j]] += 1\n        if dic[str[i]] % 2 == 1:\n            odd_values.append(str[i])\n        i += 1\n        j += 1\n    str = str.replace(\" \",\"\")\n    str = str.replace(\"-\", \"\")\n    str = str.replace(\"[\", \"\")\n    str = str.replace(\"]\", \"\")\n    return str.replace(odd_values, \"\")\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    odd_values = list(map(str, str))\n    return odd_values\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    no_of_index = 0\n    odd = 0\n    no_of_val = len(str)\n    for index in range(no_of_val):\n        if int(str[index])%2!= 0:\n            no_of_index += 1\n    for index in range(no_of_index):\n        if int(str[index])%2 == 0:\n            str = str[0:index] + str[index+1:]\n            odd += 1\n    print(str, \"has\", odd, \"index values of\", len(str), \"characters\")\n    return str\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and b > c:\n        return a\n    elif a < b and b < c:\n        return b\n    elif a < c and b > c:\n        return c\n    else:\n        return None\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return None\n    \ndef test_min_of_three():\n    assert min_of_three(1,2,3) == 1\n    assert min_of_three(1,2,5) == 1\n    assert min_of_three(2,2,2) == 2\n    assert min_of_three(3,1,3) == 1\n    assert min_of_three(3,1,5) == 3\n    assert min_of_three(1,3,3) == 3\n    assert min_of_three(1,3,5) == 3\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    elif c>a and c>b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    if b < a and b < c:\n        return b\n    if c < a and c < b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    if a==b==c:\n        return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif c>a:\n            return c\n        else:\n            return a\n    elif b>a:\n        if b>c:\n            return b\n        elif c>a:\n            return c\n        else:\n            return a\n    else:\n        if b>c:\n            return c\n        elif a>c:\n            return a\n        else:\n            return a\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a > b) and (a > c): \n        return a \n    if (b > a) and (b > c): \n        return b \n    if (c > a) and (c > b): \n        return c \n    return None \n    \ndef min_of_three2(a,b,c): \n    '''\n    Write a function that returns the minimum of three numbers.\n    '''\n    if a == b == c: \n        return a \n    if (a > b) and (a > c): \n        return a \n    if (b > a) and (b > c): \n        return b \n    if (c > a) and (c > b): \n        return c \n    return None \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    elif c>a and c>b:\n        return c\n    else:\n        return \"please enter three numbers\"\n        "
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\nprint(min_of_three(4,5,6))\nprint(min_of_three(8,6,7))\nprint(min_of_three(8,6,7))\nprint(min_of_three(7,8,7))\nprint(min_of_three(8,7,7))\nprint(min_of_three(6,7,8))\nprint(min_of_three(6,7,8))\nprint(min_of_three(6,7,7))\nprint(min_of_three(7,6,8)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c: \n        return a \n    elif b>c: \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return bin(n).count('1') == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = n+1\n    y = r-l\n    while x <= y:\n        if (n&x) == (n&x)== (n&y) == n:\n            return True\n        else:\n            x += 1\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Write your code here\n    if r > n:\n        print(\"Range is out of range\")\n        return False\n    if l > n:\n        print(\"Range is out of range\")\n        return False\n    if r < 0:\n        print(\"Range is out of range\")\n        return False\n    if l < 0:\n        print(\"Range is out of range\")\n        return False\n    bit_array = []\n    for i in range(n):\n        bit_array.append(0)\n    for i in range(n):\n        bit_array[i] = (l & 1)\n    for i in range(n):\n        if bit_array[i] == 1:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l <= n and n <= r:\n        return n == 0\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Print the given range\n    print(\"Print the given range: \",l,r)\n    #Iterate through the range\n    for i in range(l,r):\n        #Compute the bits\n        bits=bin(i)[2:].zfill(n)\n        #Check if the bits are set in the given range\n        if(int(bits,2)==1):\n            #If it is, return False\n            return False\n    #If all bits are set in the given range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n):\n        if (l+i) < n and (l+i) % 2 == 0 and (r+i) % 2 == 0:\n            print(l,r,i, l//2, r//2)\n        else:\n            print(i,l,r,i//2,r//2)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    from collections import Counter\n    count = Counter(bin(n))\n    for i in range(l,r+1):\n        if(count[i]>1):\n            print(count[i], end=' ')\n    print()\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(r-l+1):\n        if(all_Bits_Set(n,l+(i*n)%n,r+(i*n)%n)):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n >= 0 and n <= r:\n        a = bin(n)[2:]\n        if len(a) == r and int(a, 2) == n:\n            return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = abs(l)\n    r = abs(r)\n    if l+r > n:\n        return 'no'\n    elif l == r:\n        return 'yes'\n    else:\n        if l <= n and r >= n:\n            return 'yes'\n        elif l == n:\n            return 'no'\n        else:\n            return 'no'\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return []\n    if arr[0] > 0:\n        arr[0] = -1 * arr[0]\n    arr = [0] + arr\n    \n    # write the re-arranging array with the first 2 elements for the remaining elements\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] if arr[i] > 0 else -arr[i]\n    return arr[2:]"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = np.array(arr)\n    # write your code here\n    arr = arr.reshape(n, 2)\n    arr = np.sort(arr, axis=1)\n    arr = arr[::-1, :]\n    arr = arr.reshape(n, 2)\n    arr = np.sort(arr, axis=1)\n    arr = arr[::-1, :]\n    arr = arr.reshape(n, 2)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not arr:\n        return arr\n    left = 0\n    right = len(arr)\n    mid = (right + left)//2\n    while right - left > n:\n        if arr[left] < arr[right]:\n            if arr[mid] < arr[mid+1]:\n                arr[left], arr[mid] = arr[mid], arr[left]\n                left += 1\n            else:\n                arr[left], arr[mid] = arr[mid], arr[left]\n                left += 1\n                mid += 1\n        else:\n            if arr[mid] < arr[mid+1]:\n                arr[right], arr[mid] = arr[mid], arr[right]\n                right -= 1\n            else:\n                arr[right], arr[mid] = arr[mid], arr[right]\n                right -= 1\n                mid += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # YOUR CODE HERE\n    array = arr[:n]\n    array[:] = array[::-1]\n    return arra"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    index = 0\n    arr_len = len(arr)\n    while index < arr_len:\n        if arr[index] < 0:\n            arr[index], arr[index+n] = arr[index+n], arr[index]\n        index += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        arr[i] *= -1\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert 0 < n < len(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_new = arr\n    arr_new.insert(0, -arr_new[0])\n    arr_new.append(arr_new[-1])\n    arr_new.sort()\n    arr_new.reverse()\n    return arr_new"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = [x if x > 0 else -x for x in arr]\n    \n    for i in range(n):\n        arr[i] *= -1\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = list(arr)\n    if n == 0:\n        return\n    elif n < len(arr):\n        arr.extend([0] * (len(arr) - n))\n        arr[0:n] = [-1] * (n-len(arr))\n    else:\n        arr[0:n] = [-1] * n\n        arr[n-1:len(arr)] = [-1] * (n-len(arr)-1)\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1.replace(str1[i],'',1)\n        else:\n            continue\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char =='':\n        return str1.replace(' ','')\n    else:\n        return str1.replace(' ','')+char\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Time:  O(n)\n    # Space: O(1)\n    if char not in string.printable:\n        return str1\n    else:\n        temp=str1.replace(char,'*')\n        # print(temp)\n        return temp\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"(\",\"\")\n    str1 = str1.replace(\")\",\"\")\n    str1 = str1.replace(\"*\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"\\r\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"  \",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,\" \")\n    str1 = str1.replace(\" \", \"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    print(str1.replace(char,''))\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i] =='':\n            str1 = str1.replace(' ','')\n            str1 = str1.replace(char,char*len(char))\n            str1 = str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    str1=str1.replace('\\r',' ')\n    str1=str1.replace('\\s',' ')\n    if char in str1:\n        str1=str1.replace(char,' ')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for char2 in str1:\n        if char2 =='':\n            str1 = str1.replace(char2,' ')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    for i in range(n):\n        heapq.heappop(list1)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)==0:\n        return []\n    else:\n        heapq.heapify(list1)\n        return [heapq.nlargest(n,list1)[i] for i in range(0,n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return_list=[]\n    for i in range(n):\n        return_list.append(list1.pop(0))\n    return return_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # write your code here\n    q=[]\n    for i in list1:\n        heapq.heappush(q,i)\n    list_of_num=[]\n    list_of_num.append(q[0])\n    for i in range(n):\n        heapq.heappop(q)\n    heapq.heapify(q)\n    return list_of_num\n    \ndef med_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # write your code here\n    q=[]\n    for i in list1:\n        heapq.heappush(q,i)\n    list_of_num=[]\n    for i in range(n):\n        heapq.heappop(q)\n    list_of_num.append(heapq.heappop(q))\n    for i in range(n):\n        heapq.heappop(q)\n    return list_of_num\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for x in list1:\n        heapq.heappush(heap,x)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n==0:\n        return []\n    if len(list1)==0:\n        return []\n    heapq.heapify(list1)\n    \n    for i in range(n):\n        heapq.heappush(list1,heapq.heappop(list1))\n    return list1\ndef tup_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if n==0:\n        return []\n    if len(list1)==0:\n        return []\n    heapq.heapify(list1)\n    \n    for i in range(n):\n        heapq.heappush(list1,heapq.heappop(list1))\n    return list1\ndef nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if n==0:\n        return []\n    if len(list1)==0:\n        return []\n    heapq.heapify(list1)\n    \n    for i in range(n):\n        heapq.heappush(list1,heapq.heappop(list1))\n    return list1\ndef mn_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n==0:\n        return []\n    if len(list1)==0:\n        return []\n    heapq.heapify(list1)\n    \n    for i in range(n):\n        heapq.heappush(list1,heapq.heappop(list1))\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    temp = []\n    for i in list1:\n        temp.append(i)\n        if len(temp)>n:\n            temp.pop()\n    return temp\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h=[]\n    for i in list1:\n        h.append(i)\n        heapq.heapify(h)\n    h.sort()\n    list2=[]\n    for i in h:\n        list2.append(i)\n    return list2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return h*r*(1+((-1)**(r+h))/(1+(1-r)**(r+h)))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    #Write your code here\n    raise NotImplementedError('Need to write code here')\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x = ((-r**2) + (2*r*h)**2)**0.5\n    return x*(2*(1-np.cos(h*np.pi/180)) - 1)\ndef lateralsuface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    x = ((-r**2) + (2*r*h)**2)**0.5\n    return x*(2*(1-np.cos(h*np.pi/180)) - 1)\ndef glass1(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass2(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass3(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass4(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass5(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass6(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass7(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass8(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass9(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass10(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass11(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass12(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass13(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass14(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass15(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass16(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass17(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass18(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass19(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass20(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass21(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass22(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass23(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass24(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass25(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass26(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass27(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass28(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass29(l,h,diam,r):\n    '''\n    Write a function to calculate the diameter of a glass.\n    '''\n    return (2*r*h)**0.5*(l/diam + 2)**(-0.5)\ndef glass30(l,h,diam,r):\n    '"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    s = 1.5\n    r = r\n    s = s * math.sqrt(math.pow(r,2) + math.pow(s,2))\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    phi = 0.0\n    theta = 0.0\n    a = 0.0\n    b = 0.0\n    c = 0.0\n    d = 0.0\n    e = 0.0\n    f = 0.0\n    g = 0.0\n    h = 0.0\n    i = 0.0\n    l = 0.0\n    m = 0.0\n    n = 0.0\n    o = 0.0\n    p = 0.0\n    q = 0.0\n    r = 0.0\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*(r*np.sin(np.pi*h/2) + (r+1)*np.cos(np.pi*h/2))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    a=5\n    b=3\n    s=h/2\n    C0=a*(1-cos(r/a))\n    D=b*(1-cos(r/b))\n    S=C0+D*sin(r/a)\n    R=C0-D*sin(r/b)\n    if R==0:\n        return s*0\n    elif D==0:\n        return s*C0*0\n    else:\n        return R*S*0\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 0.5*r**2*h*(1.0+0.5*(r**2-h**2))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Total surface area\n    area_cylinder = (2*r*h)/3\n    # convert from mm to meter\n    area_cylinder = area_cylinder*0.01\n    return area_cylinder\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    L = 2*(2*r*h/3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    a=[]\n    for i in l:\n        a.append(i**3)\n    print(a)\n    volume=a[0]*a[1]*a[2]\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    area = l**3\n    return(area)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    n = 0\n    for i in l:\n        n = n + i * i\n    return n\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3*3*3*l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    def cube(n):\n        a=n*n*n\n        print(\"The volume of a cube with sides of\" + str(n) + \" is \" + str(a))\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l==0:\n        return 0\n    else:\n        return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Write your code here\n    \n    n = n & 0xffff\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # write your code here\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # your code goes here\n    if n == 0:\n        n = 1\n    if n == 1:\n        n = 0\n    even_bits = '0'\n    for i in range(n):\n        if (i % 2) == 0:\n            even_bits += '1'\n    return even_bits\n    \n    \n    \n    \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = []\n    for i in range(0, len(n)):\n        if n[i] % 2 == 0:\n            even_bit_set.append(1)\n        else:\n            even_bit_set.append(0)\n    return even_bit_set\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n & 1 == 0:\n            print(n, \"is even\")\n        n = n >> 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n:\n        n, r = divmod(n, 2)\n        result += r\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xFF \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    lst = list(bin(n)[2:])\n    for i in range(len(lst)):\n        if int(lst[i]) % 2 == 0:\n            lst[i] = '0'\n        else:\n            lst[i] = '1'\n    return \"\".join(lst)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for i in range(1, n):\n        if (i % 2) == 0:\n            even_bits += 2**i\n    print(even_bits)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = int(n)\n    even_bit_set = bin(n)[2:]\n    for i in range(len(even_bit_set)):\n        if int(even_bit_set[i]) == 1:\n            even_bit_set = even_bit_set[:i] + '0' + even_bit_set[i+1:]\n    return int(even_bit_set, 2)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Write your code here\n    d = Counter(test_list)\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #print(test_list)\n    counter = Counter(test_list)\n    #print(counter)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    # make a dictionary of tuples\n    for i in test_list:\n        test_dict[i[0]] = test_dict.get(i[0],0) + 1\n    #print(test_dict)\n    # count the number of keys\n    count_dict = Counter(test_dict.values())\n    #print(count_dict.most_common(4))\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = {}\n    for tuple in test_list:\n        occurence[tuple] = occurence.get(tuple,0) + 1\n    return occurence\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create a dictionary to contain the occurrence counts.\n    dictionary = {}\n    #for each tuple in the list, add to the dictionary.\n    for tuples in test_list:\n        dictionary[tuples[0]] = dictionary.get(tuples[0], 0) + 1\n    #return the dictionary.\n    return dictionary\n    \ndef main():\n    '''\n    write a function that takes in a list of tuples and returns the number of times that each tuple appears in the list.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef find_min_occurences(dictionary):\n    '''\n    Given a dictionary, write a function that returns the keys in the dictionary that have the minimum number of occurences.\n    '''\n    #create a set for the keys.\n    keys = set()\n    #for each tuple in the dictionary, add the key to the set.\n    for key in dictionary:\n        keys.add(key)\n    #remove the duplicate keys from the set.\n    keys = list(set(keys))\n    #print the number of keys with the minimum occurences.\n    print(len(keys))\n    #return the number of keys with the minimum occurences.\n    return len(keys)\n    \ndef find_mean(dictionary):\n    '''\n    Given a dictionary, write a function that returns the average of a dictionary.\n    '''\n    #print(dictionary)\n    #create a dictionary to contain the mean.\n    mean = 0\n    #for each key, add to the dictionary.\n    for key in dictionary:\n        mean = mean + key\n        #print(mean)\n    #divide by the total number of keys.\n    mean = mean / len(dictionary)\n    #print(mean)\n    #return the mean.\n    return mean\n    \ndef main():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements in the list.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef find_min_occurences_and_average(dictionary):\n    '''\n    Given a dictionary, write a function that returns the number of unique elements, the mean, and the minimum number of occurences.\n    '''\n    #create a dictionary to contain the mean.\n    mean = 0\n    #for each tuple, add to the dictionary.\n    for key in dictionary:\n        mean = mean + key\n        #print(mean)\n    #divide by the total number of keys.\n    mean = mean / len(dictionary)\n    #print(mean)\n    #return the number of keys with the minimum occurences.\n    return len(dictionary), mean\n    \ndef main2():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements in the list.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef main3():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements, the mean, and the minimum number of occurences.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef main4():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements, the mean, and the minimum number of occurences.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef main5():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements, the mean, and the minimum number of occurences.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef main6():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements, the mean, and the minimum number of occurences.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef main7():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements, the mean, and the minimum number of occurences.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef main8():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements, the mean, and the minimum number of occurences.\n    '''\n    #create a dictionary to contain the frequency counts.\n    frequency_counts = {}\n    #for each tuple, add to the dictionary.\n    for tuple in test_list:\n        if tuple[0] not in frequency_counts:\n            frequency_counts[tuple[0]] = 1\n        else:\n            frequency_counts[tuple[0]] = frequency_counts[tuple[0]] + 1\n    #return the dictionary.\n    return frequency_counts\n    \ndef main9():\n    '''\n    write a function that takes in a list of tuples and returns the number of unique elements, the mean, and the minimum number of occurence"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for tuple in test_list:\n        if tuple not in occurences:\n            occurences[tuple] = 1\n        else:\n            occurences[tuple] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    unique_counts = {}\n    \n    for tup in test_list:\n        unique_counts[tup[0]] = unique_counts.get(tup[0], 0) + 1\n    \n    return unique_counts\n        "
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    res_dict = {}\n    # loop through each item in the tuple, check if it's already in the dictionary\n    for item in test_list:\n        if item[0] in res_dict.keys():\n            res_dict[item[0]] += 1\n        else:\n            res_dict[item[0]] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for tuple in test_list:\n        if tuple[0] in test_dict:\n            test_dict[tuple[0]] += 1\n        else:\n            test_dict[tuple[0]] = 1\n    return test_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == '':\n        return 0\n    max_substr_len = 0\n    for i in range(len(str)-1):\n        if str[i:i+2].isalpha():\n            max_substr_len = max(max_substr_len, len(str[i:i+2]))\n    return max_substr_len"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+2:i+4]:\n            substrings += 1\n    return substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    s = str.lower()\n    left = 0\n    right = 0\n    count = 0\n    str = str.lower()\n    for i in range(len(str)):\n        if str[i]!= str[i+1]:\n            left = i\n            right = i+2\n            break\n    for i in range(left,len(str)):\n        if str[i]!= str[i+1]:\n            count += 1\n    return count\n    \nprint(number_of_substrings(\"   *   \")"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) <= 0:\n        return 0\n    dic = {}\n    count = 0\n    for i in str:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for j in dic:\n        if dic[j] > 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(1,l):\n        if str[i] == str[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt=0\n    l=len(str)\n    for i in range(l-1):\n        if str[i]==str[i+1]:\n            cnt=cnt+1\n    return cnt\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count_substrings(str, i, j):\n        '''\n        Args:\n            str: Input string\n            i: Starting index\n            j: Ending index\n        Returns:\n            int: Count of non-empty substrings\n        '''\n        count = 0\n        while i < j:\n            if str[i] == str[j]:\n                count += 1\n                i += 1\n                j -= 1\n            else:\n                j = max(j-1,i)\n        return count\n    def n_substrings(str):\n        '''\n        Args:\n            str: Input string\n        Returns:\n            int: Number of substrings\n        '''\n        count = 0\n        for i in range(len(str)):\n            count += count_substrings(str,i,i)\n        return count\n    n_sub = n_substrings(str)\n    return n_sub\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Write your code here\n    l=len(str)\n    count=0\n    if l==1:\n        return 1\n    for i in range(1,l):\n        if str[i]==str[i-1]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m+n-2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if j < i:\n                total += 1\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq = list(range(2, n+1)) \n    seq_to_find = list(range(2, m+1)) \n    seq_to_find.reverse() \n    seq_to_find_inverted = list(range(n, 0, -1)) \n    seq_to_find_inverted.reverse() \n    seq_to_find_inverted.reverse() \n    for num in seq_to_find: \n        print(seq, end = ', ') \n        print(seq_to_find, end = ', ') \n        print(seq_to_find_inverted, end = ', ') \n        print(seq_to_find_inverted.reverse()) \n    return(sum(seq)) \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 1 + int(math.sqrt(m) * math.sqrt(n))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Your code here\n    # Write a recursive function to find the total number of possible sequences of length n.\n    return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Create a variable called total_number_of_sequences that is a list of the total numbers of possible sequences of length n.\n    total_number_of_sequences = [0]*(n+1)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    number_of_sequences = 0\n    for i in range(m,n):\n        if i % 2 == 0:\n            number_of_sequences += 2\n        else:\n            number_of_sequences += 1\n    return number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total=0\n    for i in range(1,m+1):\n        total+=m-i\n        total+=i\n        total+=n-i\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence = 1\n    while sequence <= n:\n        if sequence % 2 == 0:\n            sequence = (sequence * (n / 2))\n        else:\n            sequence = (sequence * (n / 2)) + 1\n        \n    return sequence\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return ((m-1)*n)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    return list1 + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    return list2[-1] + list2[-2] + list2[-3] + list2[-4]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    print(list1[-1])\n    list1[-1] = list2[0]\n    print(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3 = []\n    for i in list1:\n        list3.append(i[-1])\n    for i in list2:\n        list3.append(i[-1])\n    return list3\n    \n    \n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    final_list = list1 + list2\n    print(final_list)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result_list = []\n    for index in list1:\n        result_list.append(list2[-1])\n        list2.pop()\n        # print(result_list)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \ndef string_test():\n    s = input('Please enter a string:')\n    print(count_charac(s))\n    \nstring_test()"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    count = 0\n    for i in str1:\n        if i == 'a' or i == 'b' or i == 'c' or i == 'd' or i == 'e' or i == 'f' or i == 'g' or i == 'h' or i == 'i' or i == 'j' or i == 'k' or i == 'l' or i =='m' or i == 'n' or i == 'o' or i == 'p' or i == 'q' or i == 'r' or i =='s' or i == 't' or i == 'u' or i == 'v' or i == 'w' or i == 'x' or i == 'y' or i == 'z':\n            count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    l=len(str1)\n    count=0\n    for i in str1:\n        count+=1\n    return count\ndef min_max(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the minimum and the maximum values of the string.\n    '''\n    l=len(string)\n    max=string[0]\n    min=string[0]\n    for i in string:\n        if i>max:\n            max=i\n        if i<min:\n            min=i\n    return max,min\ndef min_max_char(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the minimum and the maximum values of the string.\n    '''\n    l=len(string)\n    max=string[0]\n    min=string[0]\n    for i in range(len(string)):\n        if string[i]>max:\n            max=string[i]\n        if string[i]<min:\n            min=string[i]\n    return max,min\ndef count_lower_upper_char(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of lowercase and uppercase characters, and the number of\n    lowercase and uppercase characters that are not also lowercase.\n    '''\n    l=len(string)\n    count_lower=0\n    count_upper=0\n    for i in string:\n        if i.islower():\n            count_lower+=1\n        if i.isupper():\n            count_upper+=1\n    return count_lower,count_upper\ndef count_digits(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i.isdigit():\n            count+=1\n    return count\ndef count_total(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i.isdigit():\n            count+=1\n    return count\ndef count_num_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef count_whole_number(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='.':\n            count+=1\n    return count\ndef count_unique_char(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef count_num_char(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef count_num_char_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef count_char_zeros(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef num_digits_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef num_char_zeros(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef num_char_zeros_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef count_char_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef count_char_zeros_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef char_count(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef char_count_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef char_count_zero_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef char_count_zero_zero_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef char_count_zero_zero_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros.\n    '''\n    l=len(string)\n    count=0\n    for i in string:\n        if i=='0':\n            count+=1\n    return count\ndef char_count_zero_zero_zero(string):\n    '''\n    Write a function that returns the string in the form of a tuple\n    containing the number of digits in a string, including leading zeros."
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    cnt = 0\n    for i in str1:\n        if i == \" \":\n            cnt += 1\n    return cnt\n    \ndef main():\n    print(\"***** Test 1 *****\")\n    test1 = \"ab\"\n    print(count_charac(test1))\n    print(\"***** Test 2 *****\")\n    test2 = \"JEIRUZ\"\n    print(count_charac(test2))\n    print(\"***** Test 3 *****\")\n    test3 = \" \"\n    print(count_charac(test3))\n    print(\"***** Test 4 *****\")\n    test4 = \"  JEIRUZ\"\n    print(count_charac(test4))\n    print(\"***** Test 5 *****\")\n    test5 = \"ABCDEFG\"\n    print(count_charac(test5))\n    print(\"***** Test 6 *****\")\n    test6 = \"AY\"\n    print(count_charac(test6))\n    print(\"***** Test 7 *****\")\n    test7 = \"Z\"\n    print(count_charac(test7))\n    print(\"***** Test 8 *****\")\n    test8 = \"I\"\n    print(count_charac(test8))\n    print(\"***** Test 9 *****\")\n    test9 = \"J\"\n    print(count_charac(test9))\n    print(\"***** Test 10 *****\")\n    test10 = \"S\"\n    print(count_charac(test10))\n    print(\"***** Test 11 *****\")\n    test11 = \"T\"\n    print(count_charac(test11))\n    print(\"***** Test 12 *****\")\n    test12 = \"U\"\n    print(count_charac(test12))\n    print(\"***** Test 13 *****\")\n    test13 = \"X\"\n    print(count_charac(test13))\n    print(\"***** Test 14 *****\")\n    test14 = \"Y\"\n    print(count_charac(test14))\n    print(\"***** Test 15 *****\")\n    test15 = \"Z\"\n    print(count_charac(test15))\n    print(\"***** Test 16 *****\")\n    test16 = \" \"\n    print(count_charac(test16))\n    print(\"***** Test 17 *****\")\n    test17 = \" \"\n    print(count_charac(test17))\n    print(\"***** Test 18 *****\")\n    test18 = \" \"\n    print(count_charac(test18))\n    print(\"***** Test 19 *****\")\n    test19 = \" \"\n    print(count_charac(test19))\n    print(\"***** Test 20 *****\")\n    test20 = \" \"\n    print(count_charac(test20))\n    print(\"***** Test 21 *****\")\n    test21 = \" \"\n    print(count_charac(test21))\n    print(\"***** Test 22 *****\")\n    test22 = \" \"\n    print(count_charac(test22))\n    print(\"***** Test 23 *****\")\n    test23 = \" \"\n    print(count_charac(test23))\n    print(\"***** Test 24 *****\")\n    test24 = \" \"\n    print(count_charac(test24))\n    print(\"***** Test 25 *****\")\n    test25 = \" \"\n    print(count_charac(test25))\n    print(\"***** Test 26 *****\")\n    test26 = \" \"\n    print(count_charac(test26))\n    print(\"***** Test 27 *****\")\n    test27 = \" \"\n    print(count_charac(test27))\n    print(\"***** Test 28 *****\")\n    test28 = \" \"\n    print(count_charac(test28))\n    print(\"***** Test 29 *****\")\n    test29 = \" \"\n    print(count_charac(test29))\n    print(\"***** Test 30 *****\")\n    test30 = \" \"\n    print(count_charac(test30))\n    print(\"***** Test 31 *****\")\n    test31 = \" \"\n    print(count_charac(test31))\n    print(\"***** Test 32 *****\")\n    test32 = \" \"\n    print(count_charac(test32))\n    print(\"***** Test 33 *****\")\n    test33 = \" \"\n    print(count_charac(test33))\n    print(\"***** Test 34 *****\")\n    test34 = \" \"\n    print(count_charac(test34))\n    print(\"***** Test 35 *****\")\n    test35 = \" \"\n    print(count_charac(test35))\n    print(\"***** Test 36 *****\")\n    test36 = \" \"\n    print(count_charac(test36))\n    print(\"***** Test 37 *****\")\n    test37 = \" \"\n    print(count_charac(test37))\n    print(\"***** Test 38 *****\")\n    test38 = \" \"\n    print(count_charac(test38))\n    print(\"***** Test 39 *****\")\n    test39 = \" \"\n    print(count_charac(test39))\n    print(\"***** Test 40 *****\")\n    test40 = \" \"\n    print(count_charac(test40))\n    print(\"***** Test 41 *****\")\n    test41 = \" \"\n    print(count_charac(test41))\n    print(\"***** Test 42 *****\")\n    test42 = \" \"\n    print(count_charac(test42))\n    print(\"***** Test 43 *****\")\n    test43 = \" \"\n    print(count_charac(test43))\n    print(\"***** Test 44 *****\")\n    test44 = \" \"\n    print(count_charac(test44))\n    print(\"***** Test 45 *****\")\n    test45 = \" \"\n    print(count_charac(test45))\n    print(\"***** Test 46 *****\")\n    test46 = \" \"\n    print(count_charac(test46))\n    print(\"***** Test 47 *****\")\n    test47 = \" \"\n    print(count_charac(test47))\n    print(\"***** Test 48 *****\")\n    test48 = \" \"\n    print(count_charac(test48))\n    print(\"***** Test 49 *****\")\n    test49 = \" \"\n    print(count_charac(test49))\n    print(\"***** Test 50 *****\")\n    test50 = \" \"\n    print(count_charac(test50))\n    print(\"***** Test 51 *****\")\n    test51 = \" \"\n    print(count_charac(test51))\n    print(\"***** Test 52 *****\")\n    test52 = \" \"\n    print(count_charac(test52))\n    print(\"***** Test 53 *****\")\n    test53 = \" \"\n    print(count_charac(test53))\n    print(\"***** Test 54 *****\")\n    test54 = \" \"\n    print(count_charac(test54))\n    print(\"***** Test 55 *****\")\n    test55 = \" \"\n    print(count_charac(test55))\n    print(\"***** Test 56 *****\")\n    test56 = \" \"\n    print(count_charac(test56))\n    print(\"***** Test 57 *****\")\n    test57 = \" \"\n    print(count_charac(test57))\n    print(\"***** Test 58 *****\")\n    test58 = \" \"\n    print(count_charac(test58))\n    print(\"***** Test 59 *****\")\n    test59 = \" \"\n    print(count_charac(test59))\n    print(\"***** Test 60 *****\")\n    test60 = \" \"\n    print(count_charac(test60))\n    print(\"***** Test 61 *****\")\n    test61 = \" \"\n    print(count_charac(test61))\n    print(\"***** Test 62 *****\")\n    test62 = \" \"\n    print(count_charac(test62))\n    print(\"***** Test 63 *****\")\n    test63 = \" \"\n    print(count_charac(test63))\n    print(\"***** Test 64 *****\")\n    test64 = \" \"\n    print(count_charac(test64))\n    print(\"***** Test 65 *****\")\n    test65 = \" \"\n    print(count_charac(test65))\n    print(\"***** Test 66 *****\")\n    test66 = \" \"\n    print(count_charac(test66))\n    print(\"***** Test 67 *****\")\n    test67 = \" \"\n    print(count_charac(test67))\n    print(\"***** Test 68 ***"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(1 for i in range(len(str1)) if str1[i].isalpha())\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # your code here\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i == \" \":\n            count+=1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 2: \n        return N \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = 0\n    for i in range(1,N+1):\n        s += i**2\n        if s == N:\n            return i\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1:\n        return 1\n    if N <= 2:\n        return 2*N\n    return next_Perfect_Square(N/2) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = math.sqrt(N) \n    return 2*s + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0 or N == 1:\n        return N\n    \n    a = 2*N -1\n    while a <= math.sqrt(N):\n        if (N - a)**2 == (a**2) - N:\n            return a\n        a += 1\n    \n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = 0\n    for i in range(1, N+1):\n        s = s + (i**2)\n        if s==N:\n            return i\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==2: \n        return N \n    elif N==3:\n        return 3\n    elif N%2==0:\n        return N//2 +1\n    elif N%4==0: \n        return N//4 +1\n    else: \n        N+=2 \n        return next_Perfect_Square(N) \n    \n    # Test cases for next_Perfect_Square()\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #note that if the number is an integer, it must be positive\n    if (N<0):\n        return False\n    \n    #For every number from 0 to N, \n    #check if the square of that number is greater than N. \n    #If it is, return the square of the next perfect square greater than that square\n    for i in range(N+1):\n        if (N==0):\n            return i\n        elif (N==i):\n            return i+1\n        elif (N%i==0):\n            return i+1\n        \n    #if N is an odd number, it is not a perfect square.\n    #There is no way to calculate it's square, so return the square. \n    return (N**2) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1\n    if N == 2: \n        return 2\n    elif N > 2 and N % 2 == 0: \n        return 2+next_Perfect_Square(N//2) \n    elif N > 2 and N % 2 == 1: \n        return 3 + next_Perfect_Square(N//2) \n    else: \n        return 4 + next_Perfect_Square(N//2) \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = [0]\n    for i in range(1, len(arr)): \n        res.append(max(res[i-1], arr[i]) + arr[i])\n    return res[-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0 or n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    res = arr[0]\n    for i in range(2, n):\n        res = max(res, arr[i] + max_sum(arr[:i]))\n        res = max(res, arr[i] + max_sum(arr[i:]))\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: \n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # The minimum number of bitonic subsequences is the number of bitonic subsequences that can be formed from the sequence. \n    if(len(arr)==1): return arr[0]\n    \n    # Initialize the max_sum to 0\n    max_sum = 0\n    \n    # Start the recursion\n    for i in range(1, len(arr)): \n        # Check if we have reached the last bitonic subsequence, if so return the sum\n        if(arr[i] > arr[i-1]): return arr[i] \n        \n        # Choose the right bitonic subsequence\n        if(i % 2 == 0):\n            right_bitonic = arr[i] + arr[i-1]\n        else: \n            right_bitonic = arr[i] - arr[i-1]\n        \n        # Update the maximum sum and the minumum index \n        max_sum = max(right_bitonic, max_sum)\n        min_index = i\n        \n        # Recur for the remaining bitonic subsequences\n        # since we don't want to remove any of them, we do not need to include them. \n        while (min_index % 2 == 0): \n            max_sum = max(max_sum, right_bitonic)\n            min_index = min_index -1\n        \n    # Return the max_sum \n    return max_sum \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Time: O(n)\n    # Space: O(1)\n    i = 0\n    j = 0\n    max_sum = 0\n    \n    # For each number in the array\n    for number in arr:\n        \n        # If it's a number higher than previous, we have found a higher number\n        if number > arr[i]:\n            # If the number is not greater than the previous number, we have found a smaller number\n            if number < arr[j]:\n                # We add the current number and subtract it from the previous number\n                max_sum += number\n                # We also move the number index to the previous index\n                j -= 1\n            # If it's the same as the previous number, we have found a smaller number\n            elif number < arr[j]:\n                # We add the current number and subtract it from the previous number\n                max_sum += number\n                # We also move the number index to the previous index\n                j += 1\n            # If it's the same as the previous number, we have found a higher number\n            else:\n                # We add the current number and subtract it from the previous number\n                max_sum += number\n                # We also move the number index to the previous index\n                j -= 1\n        # If we're not at the last index of the array\n        elif number < arr[i]:\n            # We add the current number and subtract it from the previous number\n            max_sum += number\n            # We also move the number index to the previous index\n            i += 1\n    # Return the maximum sum\n    return max_sum\n    \ndef max_sum_recursive(arr):\n    '''\n    Given an array of integers, find the maximum sum in it.\n    For example, if the array is [1, 3, 5, 8, 9, 10], we would return 9, since the sequence is bitonic.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] < arr[1]:\n            return arr[1]\n        else:\n            return arr[0]\n    else:\n        # For all possible subsequences of the array\n        subsequence = []\n        for i in range(len(arr)):\n            subsequence.append(arr[i:i+2])\n        # Let's try to find the subsequences that are not decreasing\n        for subsequence in subsequence_decreasing(subsequence):\n            if arr[0] > subsequence[0]:\n                # We now have the sequence bitonic\n                return subsequence[1]\n    # We return the maximum sum\n    return max_sum_recursive(subsequence)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # define the array\n    arr = arr[:] # array to start from\n    max_sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1] and arr[i] > arr[i-2]: # if it's not increasing or decreasing\n            max_sum = max(max_sum, arr[i]) # update the max sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n            \n    for i in range(len(arr)-2):\n        left = i+1\n        right = i+3\n        \n        while left < len(arr) and right < len(arr):\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum > max_so_far:\n                max_so_far = current_sum\n            \n            left += 1\n            right += 1\n    \n    return max_so_far\n    "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # print(\"Array\")\n    # print(arr)\n    # print()\n    # print(\"Maximum\")\n    # print()\n    # print(max(arr))\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # print(\"Applying bitonic sequences...\")\n    # print()\n    # print(arr)\n    # print()\n    # prin"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: \n        return 0\n    \n    if len(arr) == 1: \n        return arr[0]\n    \n    if arr[0] > arr[1]: \n        return arr[0]\n    \n    ans = 0\n    i = 0\n    j = 1\n    \n    while i < len(arr): \n        # find minimum and maximum\n        min_val = float('inf')\n        max_val = -float('inf')\n        \n        while j < len(arr): \n            if arr[i] > arr[j]: \n                min_val = min(arr[i], min_val)\n                max_val = max(arr[j], max_val)\n            \n            j += 1\n        \n        # update min and max\n        if min_val <= max_val:\n            ans = max(ans, max_val)\n        \n        i += 1\n        j = i\n    \n    return ans"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = (1/2)*math.sqrt(number)\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not isinstance(number, int):\n        raise TypeError(\"Must input an integer\")\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = pow(number,0.5)\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = []\n    n = 0\n    while len(result) < 5:\n        if not is_babylonian(number, n):\n            result.append(number**0.5)\n            break\n        n += 1\n    return result\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number**(1/2))**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 0\n    b = 1\n    for i in range(1, number + 1):\n        a = b\n        b = a - (a * a) / i\n    return b\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return None\n    else:\n        x = number\n        for i in range(2, int(sqrt(number))):\n            if (number % i == 0):\n                x = None\n                break\n        if (x is None):\n            return None\n        else:\n            return x\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = abs(number)\n    s = 0\n    while n:\n        r = n % 10\n        s += r ** 2\n        n //= 10\n    return s\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Output:\n    # lps(s) = 2\n    # if the longest palindromic subsequence is greater than the input string.\n    # s will be longer than the longest palindromic subsequence in the input string\n    # use a dictionary that uses the following key-value pairs\n    # if the longest palindromic subsequence is greater than the input string\n    # return 1\n    # else\n    # return 0\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    palin_dict = {0: 1}\n    \n    for i in range(1, n):\n        \n        # if the current i value is the same as the next one or not\n        if str[i] in palin_dict.keys():\n            \n            # if this is the first time we've seen a palindrome, update the palin_dict to the longest palindrome\n            if palin_dict.get(i) == i:\n                palin_dict[i] = max(palin_dict.get(i - 1, 0), palin_dict.get(i - 2, 0)) + 1\n            else:\n                palin_dict[i] = max(palin_dict.get(i - 1, 0), palin_dict.get(i - 2, 0), palin_dict.get(i - 1, 0) + 1)\n            \n        else:\n            # if this is not the first time we've seen a palindrome, we will set the current value as the longest one\n            palin_dict[i] = palin_dict.get(i, 0) + 1\n        \n    return max(palin_dict.values())\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(str == ''): \n        return 0\n    if (str == str[::-1]): \n        return 1 + lps(str[1:-1])\n    else: \n        return max(lps(str[:-1]), lps(str[1:]))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    palindrome_length = 0\n    if str == 'a':\n        palindrome_length = 1\n    elif str == 'b':\n        palindrome_length = 2\n    elif str == 'c':\n        palindrome_length = 3\n    else:\n        palindrome_length = 4\n        \n    for i in range(len(str)):\n        substring = str[i:i+palindrome_length]\n        if is_palindrome(substring):\n            palindrome_length += 1\n    return palindrome_length\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    substr = []\n    \n    for i in range(len(str)):\n        substr.append(str[i:len(str)])\n        \n    substr = set(substr)\n    \n    if len(substr) == 1:\n        return len(substr)\n    \n    else:\n        end_index = -1\n        end_value = 0\n        \n        for i in range(len(substr)-1):\n            for j in range(i+1,len(substr)):\n                if str[i] == str[j]:\n                    end_index = j-1\n                    end_value = end_index+1\n                else:\n                    break\n            \n        if end_value > len(substr):\n            return len(substr)\n        \n        return end_value\n        \nstr = 'abcde'\nprint(lps(str))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps=''\n    print(len(str))\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            if str[i]==str[j] and (i!=j or str[i]!=str[j]):\n                lps=str[i:j+1]\n                break\n            elif str[i]==str[j] and (i!=j):\n                lps=str[i:j+1]\n                break\n    return len(lps)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == \"\":\n        return 0\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n    \n    dp = [[0 for i in range(len(str)+1)] for i in range(len(str)+1)]\n    \n    for i in range(1, len(str)+1):\n        for j in range(i-1, -1, -1):\n            if str[j] == str[i]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    \n    return dp[-1][-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # initialize the longest palindromic subsequence to 0. \n    longest = 0 \n    \n    # define the length of the longest palindromic subsequence. \n    # recursive to find the longest palindromic subsequence in a given string. \n    def LPS(str, k): \n        \n        # if the string is empty or contains only 1 character, \n        # the maximum length of the longest palindromic subsequence is 1 character. \n        # So we return the max length. \n        if len(str) == 1 or len(str) <= k: \n            return len(str)\n        \n        # if the current index is at the beginning of the string, \n        # then the longest palindromic subsequence is already the answer. \n        if str[0] == str[len(str) - 1]: \n            return 1 + LPS(str[1:len(str) - 1], k) \n        \n        # the first character is always in the current index, \n        # so we can just return the longest palindromic subsequence. \n        elif str[0] == str[len(str) - 1]: \n            return LPS(str[1:len(str) - 1], k) \n        \n        # the second character is not at the beginning, \n        # so we need to find the longest palindromic subsequence \n        # starting from the second character, ending at the end of the string. \n        else: \n            return max(LPS(str[1:len(str) - 1], k), LPS(str[1:len(str)], k)) \n            \n    # call the function to find the length of the longest palindromic subsequence. \n    return LPS(str, 0)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps = []\n    \n    def palindromic(i, j, s):\n        if j == j: return True\n        if s[i:j+1] == s[i:j+1][::-1]: return True\n        if s[i:j+1] == s[i:j+1][::-1][1:len(s[i:j+1])]: return True\n        return False\n    \n    def longest(l, s):\n        l.append(0)\n        for i in range(len(s)):\n            if not palindromic(i, i, s): l[0] = max(l[0], i)\n            if not palindromic(i, i+1, s): l[0] = max(l[0], i+1)\n            if not palindromic(i+1, i, s): l[0] = max(l[0], i+1)\n        return l[0]\n    \n    i = 0\n    j = len(str) - 1\n    \n    while i <= j:\n        if palindromic(i, i, str):\n            lps.append(i)\n            i += 1\n        elif palindromic(i, j, str):\n            lps.append(j)\n            j -= 1\n        else:\n            if len(lps) > len(str):\n                lps = []\n            return len(str)\n    \n    if len(lps) > len(str):\n        lps = []\n    return len(str)"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    n = len(str)\n    dp = [[-1] * n for i in range(n)]\n    result = 1\n    \n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                if j - i > 2:\n                    dp[i][j] = 2\n                    dp[j][i] = 2\n                else:\n                    dp[i][j] = 0\n                    dp[j][i] = 0\n            else:\n                if j - i > 2:\n                    dp[i][j] = 1\n                    dp[j][i] = 1\n                else:\n                    dp[i][j] = 0\n                    dp[j][i] = 0\n            if dp[i][j]!= -1:\n                result = max(result, dp[i][j])\n    return result\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [0] * n\n    for i in range(n): \n        dp[i] = 1 + max(dp[:i] + [0] + [dp[i]] + [dp[i + 1] - 1])\n    return max(dp)\n    \ndef lps_dp(str, n): \n    '''\n    Write a function that returns the longest palindromic subsequence that can be made from the given string.\n    '''\n    dp = [[0] * (n + 1) for i in range(len(str))]\n    for i in range(len(str)): \n        for j in range(len(str)):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[len(str) - 1][len(str) - 1]\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1+n/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h = n+1\n    i = 1\n    while i <= h:\n        h = n * i + 1\n        i = i + 1\n    return h\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n+1):\n        harmonic_sum += (1/i)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n + 1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n < 1:\n        return 0\n    else:\n        return (1 / (1 + (n-1) ** 2))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n - 1) * (1 + 2 * (n - 1) ) / (n + 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #Implement your code here\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n    \n    \nn = int(input(\"Enter a number: \"))\nprint(harmonic_sum(n)"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection=[]\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # write your code here\n    result = []\n    intersection = []\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                if array_nums1[i] not in result:\n                    result.append(array_nums1[i])\n                if array_nums2[j] not in result:\n                    result.append(array_nums2[j])\n    for i in result:\n        intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in range(0,len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    from itertools import combinations\n    #combinations with concatenation:\n    from collections import deque\n    #List to hold our lists:\n    arr_list = []\n    #for loop to create a list:\n    for nums in array_nums1:\n        arr_list.append(nums)\n    for nums in array_nums2:\n        arr_list.append(nums)\n    #Find the intersection of all combinations:\n    intersection = []\n    for combs in combinations(arr_list, 2):\n        if combs not in intersection:\n            intersection.append(combs)\n    #Return the intersection:\n    return intersection\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # your code goes here\n    # if len(array_nums1) < len(array_nums2):\n    #     array_nums1 = array_nums2\n    #     array_nums2 = array_nums1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here.\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #Assign the values to the respective indexes in the 2 arrays\n    index_nums1,index_nums2=0,0\n    i=0\n    j=0\n    #Find the length of the 2 arrays\n    l=len(array_nums1)\n    #Find the length of the 2 arrays\n    m=len(array_nums2)\n    #Loop through both the 2 arrays\n    while(i<l and j<m):\n        if(array_nums1[i]<array_nums2[j]):\n            index_nums1+=1\n            i+=1\n        else:\n            index_nums2+=1\n            j+=1\n    #Return the intersection\n    return index_nums1<index_nums2\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1=[]\n    array2=[]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i,j = 0,0\n    res = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            res.append(array_nums1[i])\n            i += 1\n            j += 1\n        else:\n            if array_nums1[i] < array_nums2[j]:\n                i += 1\n            else:\n                j += 1\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    count1 = collections.Counter(array_nums1)\n    count2 = collections.Counter(array_nums2)\n    return [k for k, v in count1.items() if v in count2.keys()]\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in tup:\n        if i == x:\n            occ = occ + 1\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # TODO: Write your code here\n    #print(\"x is in tuple {}\".format(x))\n    #print(\"tup is {}\".format(tup))\n    count = 0\n    for i in tup:\n        if i == x:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(tup[x])\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(y)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    return sum(1 for i in tup if i == x) \n  \ndef count_O(tup, o): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == o) \n  \ndef count_Z(tup, z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == z) \n  \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == y) \n  \ndef count_K(tup, k): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == k) \n  \ndef count_L(tup, l): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == l) \n  \ndef count_M(tup, m): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == m) \n  \ndef count_N(tup, n): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == n) \n  \ndef count_O(tup, o): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == o) \n  \ndef count_R(tup, r): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == r) \n  \ndef count_U(tup, u): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == u) \n  \ndef count_V(tup, v): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == v) \n  \ndef count_W(tup, w): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == w) \n  \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == x) \n  \ndef count_O(tup, o): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == o) \n  \ndef count_Z(tup, z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == z) \n  \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == y) \n  \ndef count_K(tup, k): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == k) \n  \ndef count_L(tup, l): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == l) \n  \ndef count_M(tup, m): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == m) \n  \ndef count_N(tup, n): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == n) \n  \ndef count_O(tup, o): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == o) \n  \ndef count_R(tup, r): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == r) \n  \ndef count_U(tup, u): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == u) \n  \ndef count_V(tup, v): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == v) \n  \ndef count_W(tup, w): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == w) \n  \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == x) \n  \ndef count_O(tup, o): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == o) \n  \ndef count_Z(tup, z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == z) \n  \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == y) \n  \ndef count_K(tup, k): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurence"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a, b = tup\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for el in tup:\n        if el == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code goes here\n    return tup.count(x)\n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element_not_found = True\n    # test if element is in list\n    for index, element in enumerate(list):\n        if element == element:\n            list[index] = element\n            element_not_found = False\n            break\n    # if not found, insert element at the end of list\n    if not element_not_found:\n        list.append(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list is None:\n        return None\n    for i in range(len(list)-1, 0, -1):\n        list[i-1] = list[i]\n    list[0] = element\n    return list\n    \ndef join_list(list):\n    '''\n    Write a function that takes in a list and returns the result of concatenating the list in the list.\n    '''\n    if list is None:\n        return None\n    for i in range(len(list)-1, 0, -1):\n        list.insert(0, list[i])\n    return list\n    \ndef test_join_list():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first and last elements of the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [1,2,3]\n    \ndef test_join_list_2():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but also the last element of the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [1,2,3]\n    \ndef test_join_list_3():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [1,2,3]\n    \ndef test_join_list_4():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, but in reverse order.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [3,2,1]\n    \ndef test_join_list_5():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, but in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [3,2,1]\n    \ndef test_join_list_6():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [2,1,3]\n    \ndef test_join_list_7():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in the list, but in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [1,2,3]\n    \ndef test_join_list_8():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [3,2,1]\n    \ndef test_join_list_9():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [2,1,3]\n    \ndef test_join_list_10():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [3,2,1]\n    \ndef test_join_list_11():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [1,2,3]\n    \ndef test_join_list_12():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [3,2,1]\n    \ndef test_join_list_13():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [2,1,3]\n    \ndef test_join_list_14():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [1,2,3]\n    \ndef test_join_list_15():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [3,2,1]\n    \ndef test_join_list_16():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [2,1,3]\n    \ndef test_join_list_17():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [1,2,3]\n    \ndef test_join_list_18():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)\n    assert result == [3,2,1]\n    \ndef test_join_list_19():\n    '''\n    Write a function that takes in a list and returns a new list that contains the values of the first element of the list, but not the last element of the list, and then in reverse order, and then in the list.\n    '''\n    list = [1,2,3]\n    result = join_list(list)"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return_list = []\n    if len(list) == 0:\n        return list\n    else:\n        for i in range(len(list)):\n            if element < list[i]:\n                return_list.append(list[i])\n                return_list.append(element)\n            else:\n                return_list.append(list[i])\n        return return_list\n        \ndef main():\n    '''\n    Implement the solution for the book.\n    '''\n    #print(insert_element([0,1,2,3,4],5))\n    print(insert_element([5,1,2,3,4,],7))\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list[i] = element\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list+[element]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element = element.lower()\n    if element not in list:\n        list.append(element)\n        return list\n    else:\n        for i in range(0,len(list)):\n            if list[i] == element:\n                list.insert(i,element)\n                break\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l=[]\n    for i in range(len(list)):\n        l.append(list[i])\n    list.remove(element)\n    for i in range(len(list)):\n        l[i]=element\n    return l\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element[0]] + [element[1]] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list)==0:\n        list.append(element)\n        return list\n    else:\n        for i in range(len(list)):\n            if list[i]<element:\n                list[i+1]=element\n                break\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    # Check if list is empty\n    if len(list) == 0:\n        return list\n    # Create a new list\n    else:\n        temp = list[:]\n        temp.insert(0,element)\n        return temp\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # getting the base and exponents\n    base = abs(numbers)\n    exp = int(cmath.log(abs(numbers), 2))\n    # returning the result\n    # print(base, exp)\n    # print(base, exp)\n    # print(base, exp)\n    return cmath.polar(base, exp)\n    \n    \ndef calculate(numbers, op, x):\n    '''\n    Write a python function to calculate the result of the operation given as string\n    '''\n    # getting the value of x\n    x = float(x)\n    # getting the base and exponents\n    base = convert(x)\n    # finding the result\n    # print(op, base, base**op)\n    # print(op, base, base**op)\n    # print(op, base, base**op)\n    # returning the result\n    return base ** op\n    \n    \ndef equal(x, y):\n    '''\n    Write a python function to check the value of both operands.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # getting the value of y\n    y = convert(y)\n    # returning the result\n    # print(x, y)\n    # print(x, y)\n    # print(x, y)\n    # returning the result\n    if x==y:\n        return True\n    else:\n        return False\n    \n    \ndef greater(x, y):\n    '''\n    Write a python function to check if the value of both operands is greater than zero.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # getting the value of y\n    y = convert(y)\n    # returning the result\n    # print(x, y)\n    # print(x, y)\n    # print(x, y)\n    # returning the result\n    if x > y:\n        return True\n    else:\n        return False\n    \n    \ndef less(x, y):\n    '''\n    Write a python function to check if the value of both operands is less than zero.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # getting the value of y\n    y = convert(y)\n    # returning the result\n    # print(x, y)\n    # print(x, y)\n    # print(x, y)\n    # returning the result\n    if x < y:\n        return True\n    else:\n        return False\n    \n    \ndef greaterOrEqual(x, y):\n    '''\n    Write a python function to check if the value of both operands is greater than zero.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # getting the value of y\n    y = convert(y)\n    # returning the result\n    # print(x, y)\n    # print(x, y)\n    # print(x, y)\n    # returning the result\n    if x >= y:\n        return True\n    else:\n        return False\n    \n    \ndef lessOrEqual(x, y):\n    '''\n    Write a python function to check if the value of both operands is less than zero.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # getting the value of y\n    y = convert(y)\n    # returning the result\n    # print(x, y)\n    # print(x, y)\n    # print(x, y)\n    # returning the result\n    if x <= y:\n        return True\n    else:\n        return False\n    \n    \ndef oneOf(x, y):\n    '''\n    Write a python function to check if the value of both operands is equal to one.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # getting the value of y\n    y = convert(y)\n    # returning the result\n    # print(x, y)\n    # print(x, y)\n    # print(x, y)\n    # returning the result\n    if x == y:\n        return True\n    else:\n        return False\n    \n    \ndef inRange(x, lower, upper):\n    '''\n    Write a python function to check if the value of both operands is in the range of the given value.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # getting the value of lower\n    lower = convert(lower)\n    # getting the value of upper\n    upper = convert(upper)\n    # returning the result\n    # print(x, lower, upper)\n    # print(x, lower, upper)\n    # print(x, lower, upper)\n    # returning the result\n    if lower <= x <= upper:\n        return True\n    else:\n        return False\n    \n    \ndef notInRange(x, lower, upper):\n    '''\n    Write a python function to check if the value of both operands is not in the range of the given value.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # getting the value of lower\n    lower = convert(lower)\n    # getting the value of upper\n    upper = convert(upper)\n    # returning the result\n    # print(x, lower, upper)\n    # print(x, lower, upper)\n    # print(x, lower, upper)\n    # returning the result\n    if lower > x or upper < x:\n        return True\n    else:\n        return False\n    \n    \ndef isPrime(x):\n    '''\n    Write a python function to check if the value of both operands is a prime number.\n    '''\n    # getting the value of x\n    x = convert(x)\n    # returning the result\n    # print(x)\n    # print(x)\n    # print(x)\n    # returning the result\n    if x>1:\n        # getting the base and exponents\n        base = x\n        exp = 1\n        # generating the result\n        # print(base, exp)\n        # print(base, exp)\n        # print(base, exp)\n        while base % 2 == 0:\n            # getting the base\n            base = base // 2\n            # getting the exponents\n            exp = exp + 1\n        # returning the result\n        # print(base, exp)\n        # print(base, exp)\n        # print(base, exp)\n        # returning the result\n        if exp > 2:\n            # getting the base\n            base = x\n            # getting the exponents\n            exp = 1\n            # generating the result\n            # print(base, exp)\n            # print(base, exp)\n            # print(base, exp)\n            while base % 2 == 0:\n                # getting the base\n                base = base // 2\n                # getting the exponents\n                exp = exp + 1\n            # returning the result\n            # print(base, exp)\n            # print(base, exp)\n            # print(base, exp)\n            # returning the result\n            if exp > 2:\n                # getting the base\n                base = x\n                # getting the exponents\n                exp = 1\n                # generating the result\n                # print(base, exp)\n                # print(base, exp)\n                # print(base, exp)\n                while base % 2 == 0:\n                    # getting the base\n                    base = base // 2\n                    # getting the exponents\n                    exp = exp + 1\n                # returning the result\n                # print(base, exp)\n                # print(base, exp)\n                # print(base, exp)\n                # returning the result\n                if exp > 2:\n                    # getting the base\n                    base = x\n                    # getting the exponents\n                    exp = 1\n                    # generating the result\n                    # print(base, exp)\n                    # print(base, exp)\n                    # print(base, exp)\n                    while base % 2 == 0:\n                        # getting the base\n                        base = base // 2\n                        # getting the exponents\n                        exp = exp + 1\n                    # returning the result\n                    # print(base, exp)\n                    # print(base, exp)\n                    # print(base, exp)\n                    # returning the result\n                    if exp > 2:\n                        # getting the base\n                        base = x\n                        # getting the exponents\n                        exp = 1\n                        # generating the result\n                        # print(base, exp)\n                        # print(base, exp)\n                        # print"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    c = numbers[1].real\n    d = numbers[1].imag\n    x = cmath.sqrt(a*a + b*b)\n    y = cmath.sqrt(c*c + d*d)\n    return x, y\ndef cos(numbers):\n    '''\n    Write a python function to compute cos(x) = e^{-x}\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(-b/2)\n    y = cmath.exp(a/2)\n    return x, y\ndef dif(numbers):\n    '''\n    Write a python function to compute dif(x, y) = e^x - e^y.\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef exp(numbers):\n    '''\n    Write a python function to compute e^x = exp(x).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef factorial(numbers):\n    '''\n    Write a python function to compute factorial(x) = x * fact(x-1).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * factorial(b - 1)\ndef sin(numbers):\n    '''\n    Write a python function to compute sin(x) = sin(x) * cosh(x)\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * cmath.cosh(x)\ndef dif(numbers):\n    '''\n    Write a python function to compute dif(x, y) = e^x - e^y.\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef exp(numbers):\n    '''\n    Write a python function to compute e^x = exp(x).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef factorial(numbers):\n    '''\n    Write a python function to compute factorial(x) = x * fact(x-1).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * factorial(b - 1)\ndef cos(numbers):\n    '''\n    Write a python function to compute cos(x) = cos(x) * cosh(x)\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * cmath.cosh(x)\ndef dif(numbers):\n    '''\n    Write a python function to compute dif(x, y) = e^x - e^y.\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef exp(numbers):\n    '''\n    Write a python function to compute e^x = exp(x).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef factorial(numbers):\n    '''\n    Write a python function to compute factorial(x) = x * fact(x-1).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * factorial(b - 1)\ndef sin(numbers):\n    '''\n    Write a python function to compute sin(x) = sin(x) * cosh(x)\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * cmath.cosh(x)\ndef dif(numbers):\n    '''\n    Write a python function to compute dif(x, y) = e^x - e^y.\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef exp(numbers):\n    '''\n    Write a python function to compute e^x = exp(x).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * exp(b/2)\ndef factorial(numbers):\n    '''\n    Write a python function to compute factorial(x) = x * fact(x-1).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * factorial(b - 1)\ndef cos(numbers):\n    '''\n    Write a python function to compute cos(x) = cos(x) * cosh(x)\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * cmath.cosh(x)\ndef dif(numbers):\n    '''\n    Write a python function to compute dif(x, y) = e^x - e^y.\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef exp(numbers):\n    '''\n    Write a python function to compute e^x = exp(x).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.exp(a/2)\n    y = cmath.exp(-b/2)\n    z = cmath.exp(b/2)\n    return z, x, y\ndef factorial(numbers):\n    '''\n    Write a python function to compute factorial(x) = x * fact(x-1).\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    x = cmath.sqrt(a)\n    if b == 0:\n        return 1\n    else:\n        return x * factorial(b "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return  [round(complex(x, y), 3) for x, y in zip(numbers[0], numbers[1])]\n    \n    \ndef polar(r,theta):\n    '''\n    Write a python function that returns the coordinates of a polar object.\n    '''\n    return [round(cmath.polar(x,y), 3) for x, y in zip(r,theta)]\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        if numbers[i].imag == 0:\n            numbers[i] = cmath.polar(numbers[i])\n    return numbers"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    f_numbers = []\n    for number in numbers:\n        f_numbers.append(((number.imag)**2 + (number.real)**2)**(1/2))\n    return f_numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #print(numbers)\n    return cmath.polar(numbers)\n    #print(convert(2.4))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    # write your code here\n    '''\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    for i in range(len(numbers)):\n        x = x * 10 + numbers[i]\n        y = y * 10 + numbers[i]\n        z = z * 10 + numbers[i]\n    r = (cmath.polar(x))\n    theta = (cmath.phase(y))\n    phi = (cmath.phase(z))\n    return r, theta, phi\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    magnitude = []\n    for i in range(len(numbers)):\n        magnitude.append(float(numbers[i].imag))\n        magnitude.append(float(numbers[i].real))\n        magnitude.append(pow(magnitude[i],2))\n        polar.append(pow(magnitude[i],1/2))\n    return polar, magnitude\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers.count(complex(0,0))!= 0:\n        if numbers.count(complex(1,0))!= 0:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n        numbers = [i.real for i in numbers]\n        numbers = [i.imag for i in numbers]\n        \n        if any(i.imag > 0 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        else:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n            \n    else:\n        numbers = [i.real for i in numbers]\n        numbers = [i.imag for i in numbers]\n        \n        if all(i.imag > 0 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        else:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n        \n    \n    if numbers[0] >= 0 and numbers[0] <= 1 and numbers[1] >= 0 and numbers[1] <= 1:\n        x = cmath.phase(numbers[0])\n        y = cmath.phase(numbers[1])\n        print(x,y)\n        if all(i.real >= 0 for i in numbers):\n            print(\"x is positive.\")\n            return x\n        if all(i.imag >= 0 for i in numbers):\n            print(\"y is positive.\")\n            return y\n        if all(i.real < 0 for i in numbers):\n            print(\"x is negative.\")\n            return -x\n        if all(i.imag < 0 for i in numbers):\n            print(\"y is negative.\")\n            return -y\n        if all(i.real == 0 for i in numbers):\n            print(\"x is zero.\")\n            return 0\n        if all(i.imag == 0 for i in numbers):\n            print(\"y is zero.\")\n            return 0\n        \n    else:\n        print(\"ERROR: input must be a complex number.\")\n        return False\n        \n        \ndef update(numbers):\n    '''\n    Write a python function to update the complex numbers.\n    '''\n    if numbers.count(complex(0,0))!= 0:\n        if numbers.count(complex(1,0))!= 0:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n        numbers = [i.real for i in numbers]\n        numbers = [i.imag for i in numbers]\n        \n        if all(i.imag > 0 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        else:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n            \n    else:\n        numbers = [i.real for i in numbers]\n        numbers = [i.imag for i in numbers]\n        \n        if all(i.imag > 0 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        else:\n            print(\"ERROR: The input must be a complex number.\")\n            return False\n        \n    if numbers[0] >= 0 and numbers[0] <= 1 and numbers[1] >= 0 and numbers[1] <= 1:\n        x = cmath.phase(numbers[0])\n        y = cmath.phase(numbers[1])\n        print(x,y)\n        if all(i.real >= 0 for i in numbers):\n            print(\"x is positive.\")\n            return x\n        if all(i.imag >= 0 for i in numbers):\n            print(\"y is positive.\")\n            return y\n        if all(i.real < 0 for i in numbers):\n            print(\"x is negative.\")\n            return -x\n        if all(i.imag < 0 for i in numbers):\n            print(\"y is negative.\")\n            return -y\n        if all(i.real == 0 for i in numbers):\n            print(\"x is zero.\")\n            return 0\n        if all(i.imag == 0 for i in numbers):\n            print(\"y is zero.\")\n            return 0\n        \n    else:\n        print(\"ERROR: input must be a complex number.\")\n        return False\n        \ndef result(numbers, x, y):\n    '''\n    Write a python function to calculate the result of a complex number.\n    '''\n    if not isinstance(numbers, list):\n        print(\"ERROR: input must be a list.\")\n        return False\n    \n    if len(numbers) == 2:\n        x = x - 0.5\n        y = y - 0.5\n        \n        if x < 0 and y > 0:\n            print(\"ERROR: the x-coordinate is negative.\")\n            return False\n        \n        if x > 0 and y < 0:\n            print(\"ERROR: the x-coordinate is negative.\")\n            return False\n        \n        if x < 0 and y > 0:\n            print(\"ERROR: the x-coordinate is positive.\")\n            return False\n        \n        if x > 0 and y < 0:\n            print(\"ERROR: the x-coordinate is positive.\")\n            return False\n        \n        if x == 0 and y == 0:\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        \n        \n        if any(abs(i.real) > 1 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        \n        if not all(abs(i.real) <= 1 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n        \n        if any(abs(i.real) > 1 for i in numbers):\n            print(\"ERROR: the input must be a complex number.\")\n            return False\n            \n        if all(abs(i.real) <= 1 for i in numbers):\n            print(\"x is positive.\")\n            return x\n        if all(abs(i.real) > 1 for i in numbers):\n            print(\"y is positive.\")\n            return y\n        if all(abs(i.real) <= 1 for i in numbers):\n            print(\"x is negative.\")\n            return -x\n        if all(abs(i.real) > 1 for i in numbers):\n            print(\"y is negative.\")\n            return -y\n        if all(abs(i.real) == 1 for i in numbers):\n            print(\"x is zero.\")\n            return 0\n        if all(abs(i.real) == 1 for i in numbers):\n            print(\"y is zero.\")\n            return 0\n            \n    else:\n        if len(numbers) == 2:\n            x = x - 0.5\n            y = y - 0.5\n            \n            if x < 0 and y > 0:\n                print(\"ERROR: the x-coordinate is negative.\")\n                return False\n            \n            if x > 0 and y < 0:\n                print(\"ERROR: the x-coordinate is negative.\")\n                return False\n            \n            if x < 0 and y > 0:\n                print(\"ERROR: the x-coordinate is positive.\")\n                return False\n            \n            if x > 0 and y < 0:\n                print(\"ERROR: the x-coordinate is positive.\")\n                return False\n            \n            if x == 0 and y == 0:\n                print(\"ERROR: the input must be a complex number.\")\n                return False\n            \n            if all(abs(i.real) > 1 for i in numbers):\n                print(\"ERROR: the input must be a complex number.\")\n                return False\n            \n            if not all(abs(i.real) <= 1 for i in numbers):\n                print(\"ERROR: the input must be a complex number.\")\n                return False\n            \n            if any(abs(i.real) > 1 for i in numbers):\n                print(\"ERROR: the input must be a complex number.\")\n                return False\n            \n            if all(abs(i.real) <= 1 for i in numbers):\n                print(\"x is positive.\")\n                return x\n            if all(abs(i.real) > 1 for i in numbers):\n                print(\"y is positive.\")\n                return y\n            if all(abs(i.real) <= 1 for i in numbers):\n                print(\"x is negative.\")\n                return -x\n            if all(abs(i.real) > 1 for i in numbers):\n                print(\"y is negative.\")\n                return -y\n            if all(abs(i.real) == 1 for i in numbers):\n                print(\"x is zero.\")\n                return 0\n            if all(abs"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total = 0\n    for i in list1:\n        if type(i) == int:\n            total = total + 1\n    return total\n    \ndef make_album(singer, album, year):\n    '''\n    Write a python function that returns a dictionary that contains information about a song album.\n    '''\n    album1 = {'title': '', 'year': '','singer': ''}\n    album1['title'] = singer + \" \" + album\n    album1['year'] = year\n    album1['singer'] = singer\n    return album1\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    #Hint: you may find the modulo operator % is the remainder operator,\n    #modulo (%) returns the remainder of the division operator.\n    number_of_integer=len(list1)\n    return number_of_integer\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    x=0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            x+=1\n    return x\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for el in list1:\n        if type(el) == int:\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i=0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            i+=1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    numbers = [1,2,3,4,5,6,7,8,9,0]\n    result = count_integer(numbers)\n    print(f\"result = {result}\")"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    from timeit import timeit\n    # YOUR CODE HERE\n    s = str(list1)\n    return len(s)\n    # This line is the same as the line before, but uses timeit's subroutine.\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #generate all combinations of the list\n    all_combinations = list(combinations_with_replacement(l, n))\n    #replace the list elements with a tuple to be used as a key in a dictionary\n    dict = {}\n    for i in all_combinations:\n        dict[i] = tuple(i)\n    return dict\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in combinations(l, n):\n        color_combinations.append(tuple(i))\n    return color_combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Your code here\n    l = list(l)\n    n = int(n)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [tuple(l)]\n    else:\n        return [tuple(l[i:i+n]) for i in range(0, len(l), n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(elem) for elem in combinations(l,n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    c = list(combinations_with_replacement(l, n))\n    return c\ndef custom_dictionaries(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    c = []\n    for i in combinations_with_replacement(l, n):\n        c.append(i)\n    return c\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for comb in list(combinations_with_replacement(l, n)):\n        result.append(tuple(comb))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    \n    for i in range(1, l+1):\n        comb.append(list(combinations_with_replacement(l, i)))\n    \n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # your code here\n    l = list(l)\n    if n == 0:\n        return l\n    else:\n        return combinations_colors(l, n-1) + [(l[i], i) for i in range(0, len(l))]\n    \ndef combination_colors(l, n, i):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # your code here\n    if n == 0:\n        return l\n    elif i == len(l):\n        return combinations_colors(l, n-1, 0)\n    else:\n        return combinations_colors(l, n, i+1) + [(l[i], i) for i in range(0, len(l))]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(sorted(i)) for i in combinations_with_replacement(l,n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if is_prime(i):\n            total += 1\n    return total\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Test your code and have fun :)\n    if n == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n + 1):\n            if is_prime(i):\n                count += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    c = 0\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j==0:\n                break\n        else:\n            c+=1\n    return c\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    lst = []\n    for i in range(n):\n        if (i==0) or (i == 1):\n            lst.append(1)\n        elif (i % 2 == 0) and (i!= 2):\n            lst.append(i)\n        elif (i % 2 == 1):\n            lst.append(i)\n        else:\n            pass\n    return len(lst)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Write your code here\n    \n    if n<=0:\n        raise ValueError\n    prime = [1 for i in range(n+1)]\n    \n    for i in range(2,n):\n        if prime[i]:\n            for j in range(i*i,n,i):\n                prime[j] = 0\n    \n    return sum(prime)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n    count = 0\n    for i in range(2,n+1):\n        if isPrime(i) == True:\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    total = 0\n    for i in range(n,1,-1):\n        isprime = True\n        for j in range(2,i):\n            if i%j == 0:\n                isprime = False\n                break\n        if isprime:\n            total+=1\n    return total\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Write your code here\n    c=0\n    for i in range(1,n):\n        if (pow(i,2) == i):\n            c=c+1\n    return c\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_list = []\n    # Create a list of all prime numbers less than given number.\n    for number in range(2,n+1):\n        is_prime = True\n        # Check if a number is not divisible by any of the numbers of the list below.\n        for divisor in range(2,number):\n            if number % divisor == 0:\n                is_prime = False\n        if is_prime:\n            prime_list.append(number)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_list = []\n    prime_list.extend(list(range(2, n)))\n    count = 0\n    for i in prime_list:\n        if i % 2 == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #raise NotImplementedError(\"Your function must be implemented!\")\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        a, b = b, a\n    tuple = a, b\n    return tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    a = b\n    b = c\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    return (second, first)\n    \n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a==b:\n        return(a,b)\n    else:\n        return (b,a)\n    # You can use this to swap two numbers, but this only works if the two numbers are not the same.\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a, b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def zip_tuples(tup1, tup2):\n        '''\n        Returns a list of tuples that sum up to the given number.\n        '''\n        return [a + b for (a, b) in zip(tup1, tup2)]\n    \n    test_tup1 = zip_tuples(test_tup1, test_tup2)\n    test_tup2 = zip_tuples(test_tup2, test_tup1)\n    \n    return test_tup1, test_tup2\n    \n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_ = max(test_tup1)\n    min_ = min(test_tup1)\n    if max_ > min_:\n        return (min_, max_)\n    else:\n        return (min_, max_)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create an empty list\n    res = []\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # WRITE YOUR CODE HERE\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # YOUR CODE HERE\n    a,b = test_tup1\n    x = min(a,b)\n    return x\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here.\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #Calculate the median, the sum, and the min of each tuple.\n    m1, s1, m2, s2 = medians(test_tup1), sum(test_tup1), min(test_tup1), max(test_tup1)\n    m3, s3, m4, s4 = medians(test_tup2), sum(test_tup2), min(test_tup2), max(test_tup2)\n    #Calculate the mean and median of each tuple.\n    m, s = mean(test_tup1), median(test_tup1)\n    m2, s2 = mean(test_tup2), median(test_tup2)\n    #Calculate the maximum and minimum of each tuple.\n    m3, s3 = max(test_tup1), min(test_tup1)\n    m4, s4 = max(test_tup2), min(test_tup2)\n    #Write the maximum and minimum tuples to a new list.\n    return [m, m2, m3, m4, m1, s, s1, s2, s3, s4, s]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = (test_tup1[0], test_tup1[1], test_tup1[2])\n    tup2 = (test_tup2[0], test_tup2[1], test_tup2[2])\n    if tup1[2] > tup2[2]:\n        return tup1\n    elif tup2[2] > tup1[2]:\n        return tup2\n    elif tup1[2] > tup2[2] and tup1[1] > tup2[1]:\n        return tup1\n    elif tup2[2] > tup1[2] and tup2[1] > tup1[1]:\n        return tup2\n    elif tup1[2] > tup2[2] and tup1[1] > tup2[1]:\n        return tup2\n    elif tup1[2] > tup2[2] and tup1[1] > tup2[1]:\n        return tup1\n    else:\n        return tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    (min1, min2) = (float('inf'), float('inf'))\n    for ele in test_tup1:\n        if ele < min1:\n            min1 = ele\n    for ele in test_tup2:\n        if ele < min2:\n            min2 = ele\n    return min1, min2\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        print(\"The nth newman\u2013shanks\u2013williams prime number is\", n)\n        return 0\n    \n    # Initialize an array of primes with all non-negative integers.\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \n    # Iterate through the primes array.\n    for i in primes:\n        # If the primes array contains a third number, then it is a prime.\n        if primes[i] == primes[i + 1] and primes[i]!= i + 2:\n            primes.append(i + 2)\n        # If the primes array contains an even number, then it is a prime.\n        if primes[i] == primes[i + 1] and primes[i]!= i + 2 and primes[i] % 2 == 0:\n            primes.append(i + 2)\n    # Use the array to search for the nth prime.\n    for j in range(len(primes) - 2, n + 1):\n        # If the current prime number is not prime, break out of the loop.\n        if j >= len(primes) - 2:\n            break\n        # If the current prime number is prime, continue to the next number.\n        if primes[j] == primes[j + 1] and primes[j]!= j + 2:\n            continue\n        else:\n            print(\"The nth newman\u2013shanks\u2013williams prime number is\", j)\n            break\n    else:\n        print(\"The nth newman\u2013shanks\u2013williams prime number is\", n)\n        return 0\n    \nif __name__ == \"__main__\":\n    # Test newman_prime()\n    newman_prime(9)\n    \n    # Test newman_prime(12)\n    newman_prime(12)\n    \n    # Test newman_prime(3)\n    newman_prime(3)"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, n):\n        if (n % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i=1\n    while(i<n):\n        if n%i==0:\n            break\n        i+=1\n    if i==n:\n        return True\n    return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if(n == 1): \n        return 2 \n    if (n == 2): \n        return 3 \n    if (n == 3): \n        return 4 \n    if (n % 2 == 0): \n        return 5 \n    if (n % 3 == 0): \n        return 6 \n    if (n % 5 == 0): \n        return 7 \n    i = 3 \n    while (i <= (n-1)//2): \n        if (n % i == 0): \n            return False\n        i = i + 2\n    return True \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    '''\n    #EASY\n    #If n is even\n    if (n % 2 == 0)\n        return newman_prime(n // 2)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # write your code here\n    \n    prime_factors = []\n    \n    for i in range(2, n): \n        \n        prime_factors.append(i)\n        \n        if n % i == 0: \n            \n            # if the current number is prime\n            # go to the next prime number\n            # until the next prime number has the same remainder \n            while n % i == 0: \n                i += 1\n                prime_factors.append(i)\n    \n    return prime_factors[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * newman_prime(n - 1) + 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    num = []\n    prime = []\n    for i in range(2,n+1):\n        if prime_factors(i) == 1:\n            num.append(i)\n    \n    # i=1\n    # n=0\n    # for i in range(2,n+1):\n    #     if prime_factors(i) == 1:\n    #         n+=1\n    #         if n==i:\n    #             prime.append(i)\n    #     else:\n    #         i+=1\n    \n    # i=1\n    # n=0\n    # while i <= n:\n    #     if prime_factors(i) == 1:\n    #         n+=1\n    #         if n==i:\n    #             prime.append(i)\n    #     i+=1\n    \n    # i=1\n    # n=1\n    # while i <= n:\n    #     if prime_factors(i) == 1:\n    #         n+=1\n    #         if n==i:\n    #             prime.append(i)\n    #     i+=1\n    \n    # i=1\n    # n=1\n    # while i <= n:\n    #     if prime_factors(i) == 1:\n    #         n+=1\n    #         if n==i:\n    #             prime.append(i)\n    #     i+=1\n    \n    # print(prime)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_number = False\n    for i in range(1, n):\n        if (n%i == 0):\n            prime_number = False\n            break\n        else:\n            prime_number = True\n            \n    if prime_number == False:\n        print(n)\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    \n    for i in range(1, n):\n        if (n % i == 0):\n            count += 1\n    if (count == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Determine which element of the tuple is greater than the other\n    greater_than_two = test_tup1[1] > test_tup2[1]\n    \n    # Add a. to the beginning of the tuple\n    test_tup1[1] = f\"{test_tup1[1]}.\"\n    test_tup2[1] = f\"{test_tup2[1]}.\"\n    \n    # Add an. to the end of the tuple\n    test_tup1[0] = f\"{test_tup1[0]}.\"\n    test_tup2[0] = f\"{test_tup2[0]}.\"\n    \n    # Add and. to the middle of the tuple\n    test_tup1[2] = f\"{test_tup1[2]}.\"\n    test_tup2[2] = f\"{test_tup2[2]}.\"\n    \n    # Return the greater than two element of the tuple\n    return (greater_than_two, test_tup1, test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if tuples are of same size\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuple sizes must match')\n    \n    # Check if tuples are of same type\n    if type(test_tup1[0])!= type(test_tup2[0]):\n        raise ValueError('Tuple types must be same')\n        \n    # Convert tuples to floats for division operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = float(test_tup1[i])\n        test_tup2[i] = float(test_tup2[i])\n        \n    # Create an empty list to contain the results\n    results = []\n    \n    # For each element in test_tup1\n    for element in test_tup1:\n        \n        # Calculate the division result\n        division_result = element / test_tup2\n        \n        # Append the division result to the results list\n        results.append(division_result)\n        \n    # Return the results list\n    return results\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0]/test_tup1[1] == test_tup2[0]/test_tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([tup[0]/tup[1] for tup in zip(test_tup1, test_tup2)])\n    "
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return list(zip(*[tup1[0]/tup2[0] for tup1 in test_tup1] + [tup1[1]/tup2[1] for tup1 in test_tup1]))\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] /= test_tup2[i]\n    else:\n        raise ValueError(\"Error: test tuples must have same length\")\n    return test_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write your code here\n    def division_op(tup1, tup2):\n        return int(tup1[0] / tup2[0])\n    return division_op(test_tup1, test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tuple = ()\n    for element in test_tup1:\n        result_tuple += element\n    for element in test_tup2:\n        result_tuple += element\n    return result_tuple\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    first = list1[:L]\n    second = list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L],list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    sublist_1 = list1[:L//2]\n    sublist_2 = list1[L//2:]\n    return (sublist_1, sublist_2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = []\n    part2 = []\n    last = L - 1\n    for i in list1:\n        if i <= last:\n            part1.append(i)\n            last -= 1\n        else:\n            part2.append(i)\n            last -= 1\n    return part1, part2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i])\n    if len(temp) < L:\n        return None\n    elif len(temp) > L:\n        temp.pop()\n    return temp\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result = []\n    for x in range(0, L):\n        result.append(list1[x])\n    return result\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create two lists: first_part, second_part\n    first_part = []\n    second_part = []\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)!= L:\n        raise ValueError('List of length {} is not a valid list'.format(L))\n    else:\n        new_list1 = []\n        new_list2 = []\n        length = 0\n        for i in range(0, L):\n            if len(list1[i]) > length:\n                length = len(list1[i])\n            new_list1.append(list1[i])\n        for i in range(0, L):\n            if len(list1[i]) < length:\n                length = len(list1[i])\n            new_list2.append(list1[i])\n        return new_list1, new_list2\n    \ndef sub_array(arr, L):\n    '''\n    Given an array of integers arr and a list of integers L, return the length of the shortest subarray that contains all the integers. The subarray should be given by arr[L[0]:L[1]], where L[0] = 0, L[1] = 1, and that subarray is defined by the integers in the range [0, L[1] - L[0]] inclusive. If there are multiple shortest subarrays, return the smallest one.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return len(arr)\n    else:\n        if arr[L[0]][0] == 0:\n            return 0\n        elif arr[L[0]][0] > L[1] - L[0]:\n            new_arr = []\n            for i in range(0, L[0]):\n                new_arr.append(arr[i])\n            return sub_array(new_arr, L)\n        else:\n            new_arr = []\n            for i in range(L[0], L[1]):\n                new_arr.append(arr[i])\n            return sub_array(new_arr, L)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    for i in range(L):\n        a.append(list1[i])\n    return a\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > 2:\n        raise ValueError('L must be greater than 2')\n    else:\n        s = []\n        if len(list1) <= L:\n            print(\"L too short for list\")\n        else:\n            i = 0\n            while i < L:\n                s.append(list1[i])\n                i += 1\n            return s, list1[:i], list1[i:]\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 365\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <=1:\n        return 0\n    elif h_age <= 2:\n        return (1+h_age*3)\n    elif h_age <= 6:\n        return (1+h_age*5)\n    else:\n        return (1+h_age*10)"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    result = 1\n    if h_age < 2:\n        result = 0\n    elif h_age >= 2 and h_age <= 4:\n        result = 1\n    elif h_age >= 5 and h_age <= 6.9:\n        result = 2\n    elif h_age >= 7 and h_age <= 8:\n        result = 3\n    elif h_age >= 9 and h_age <= 10.1:\n        result = 4\n    elif h_age >= 10.2 and h_age <= 12:\n        result = 5\n    elif h_age >= 12 and h_age <= 15:\n        result = 6\n    elif h_age >= 15 and h_age <= 17.1:\n        result = 7\n    elif h_age >= 17.2 and h_age <= 20:\n        result = 8\n    elif h_age >= 20:\n        result = 9\n    return result\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <=1:\n        return 0\n    elif h_age >= 2:\n        return h_age-1\n    else:\n        return h_age+1\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=0:\n        return 0\n    if h_age>=1 and h_age <= 4:\n        return 0\n    if h_age >=5 and h_age <= 12:\n        return 1\n    if h_age >=13 and h_age <= 17:\n        return 2\n    if h_age >=18 and h_age <= 24:\n        return 3\n    if h_age >=25 and h_age <= 29:\n        return 4\n    if h_age >=30 and h_age <= 34:\n        return 5\n    if h_age >=35 and h_age <= 39:\n        return 6\n    if h_age >=40 and h_age <= 44:\n        return 7\n    if h_age >=45 and h_age <= 49:\n        return 8\n    if h_age >=50 and h_age <= 54:\n        return 9\n    if h_age >=55 and h_age <= 59:\n        return 10\n    if h_age >=60 and h_age <= 64:\n        return 11\n    if h_age >=65 and h_age <= 79:\n        return 12\n    if h_age >=80 and h_age <= 94:\n        return 13\n    if h_age >=95 and h_age <= 99:\n        return 14\n    if h_age >=100 and h_age <= 124:\n        return 15\n    if h_age >=125 and h_age <= 149:\n        return 16\n    if h_age >=150 and h_age <= 171:\n        return 17\n    if h_age >=172 and h_age <= 194:\n        return 18\n    if h_age >=195 and h_age <= 199:\n        return 19\n    if h_age >=200 and h_age <= 204:\n        return 20\n    if h_age >=205 and h_age <= 209:\n        return 21\n    if h_age >=210 and h_age <= 234:\n        return 22\n    if h_age >=235 and h_age <= 241:\n        return 23\n    if h_age >=242 and h_age <= 250:\n        return 24\n    if h_age >=251 and h_age <= 254:\n        return 25\n    if h_age >=255 and h_age <= 259:\n        return 26\n    if h_age >=260 and h_age <= 270:\n        return 27\n    if h_age >=271 and h_age <= 294:\n        return 28\n    if h_age >=295 and h_age <= 299:\n        return 29\n    if h_age >=300 and h_age <= 304:\n        return 30\n    if h_age >=305 and h_age <= 316:\n        return 31\n    if h_age >=317 and h_age <= 323:\n        return 32\n    if h_age >=324 and h_age <= 325:\n        return 33\n    if h_age >=325 and h_age <= 348:\n        return 34\n    if h_age >=349 and h_age <= 353:\n        return 35\n    if h_age >=354 and h_age <= 365:\n        return 36\n    if h_age >=366 and h_age <= 381:\n        return 37\n    if h_age >=387 and h_age <= 404:\n        return 38\n    if h_age >=405 and h_age <= 409:\n        return 39\n    if h_age >=409 and h_age <= 432:\n        return 40\n    if h_age >=433 and h_age <= 433:\n        return 41\n    if h_age >=434 and h_age <= 441:\n        return 42\n    if h_age >=441 and h_age <= 448:\n        return 43\n    if h_age >=449 and h_age <= 474:\n        return 44\n    if h_age >=475 and h_age <= 479:\n        return 45\n    if h_age >=480 and h_age <= 483:\n        return 46\n    if h_age >=483 and h_age <= 491:\n        return 47\n    if h_age >=490 and h_age <= 494:\n        return 48\n    if h_age >=495 and h_age <= 499:\n        return 49\n    if h_age >=500 and h_age <= 503:\n        return 50\n    if h_age >=504 and h_age <= 521:\n        return 51\n    if h_age >=522 and h_age <= 541:\n        return 52\n    if h_age >=542 and h_age <= 551:\n        return 53\n    if h_age >=553 and h_age <= 581:\n        return 54\n    if h_age >=581 and h_age <= 604:\n        return 55\n    if h_age >=611 and h_age <= 623:\n        return 56\n    if h_age >=625 and h_age <= 645:\n        return 57\n    if h_age >=664 and h_age <= 681:\n        return 58\n    if h_age >=681 and h_age <= 704:\n        return 59\n    if h_age >=711 and h_age <= 723:\n        return 60\n    if h_age >=725 and h_age <= 745:\n        return 61\n    if h_age >=747 and h_age <= 791:\n        return 62\n    if h_age >=722 and h_age <= 733:\n        return 63\n    if h_age >=734 and h_age <= 741:\n        return 64\n    if h_age >=743 and h_age <= 750:\n        return 65\n    if h_age >=751 and h_age <= 764:\n        return 66\n    if h_age >=765 and h_age <= 781:\n        return 67\n    if h_age >=768 and h_age <= 793:\n        return 68\n    if h_age >=788 and h_age <= 801:\n        return 69\n    if h_age >=801 and h_age <= 812:\n        return 70\n    if h_age >=813 and h_age <= 823:\n        return 71\n    if h_age >=824 and h_age <= 841:\n        return 72\n    if h_age >=842 and h_age <= 851:\n        return 73\n    if h_age >=852 and h_age <= 861:\n        return 74\n    if h_age >=862 and h_age <= 873:\n        return 75\n    if h_age >=875 and h_age <= 879:\n        return 76\n    if h_age >=880 and h_age <= 900:\n        return 77\n    if h_age >=901 and h_age <= 912:\n        return 78\n    if h_age >=913 and h_age <= 921:\n        return 79\n    if h_age >=922 and h_age <= 941:\n        return 80\n    if h_age >=942 and h_age <= 951:\n        return 81\n    if h_age >=952 and h_age <= 961:\n        return 82\n    if h_age >=962 and h_age <= 973:\n        return 83\n    if h_age >=974 and h_age <= 981:\n        return 84\n    if h_age >=982 and h_age <= 990:\n        return 85\n    if h_age >=983 and h_age <= 992:\n        return 86\n    if h_age >=973 and h_age <= 993:\n        return 87\n    if h_age >=974 and h_age <= 996:\n        return 88\n    if h_age >=981 and h_age <= 994:\n        return 89\n    if h_age >=988 and h_age <= 994:\n        return 90\n    if h_age >=983 and h_age <= 996:\n        return 91\n    if h_age >=984 and h_age <= 991:\n        return 92\n    if h_age >=985 and h_age <= 1001:\n        return 93\n    if h_age >=1002 and h_age <= 1011:\n        return 94\n    if h_age >=1012 and h_age <= 1019:\n        return 95\n    if h_age >=1014 and h_age <= 1021:\n        return 96\n    if h_age >=1022 and h_age <= 1031:\n        return 97\n    if h_age >=1032 and h_age <= 1045:\n        return 98\n    if h_age >=1046 and h_age <= 1049:\n        return 99\n    if h_age >=1050 and h"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = (1 + h_age*7)\n    return dog_age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 2:\n        return 'Not at all'\n    elif h_age <= 4:\n        return 'Child'\n    elif h_age <= 6:\n        return 'Teenager'\n    elif h_age <= 9:\n        return 'Young Adult'\n    else:\n        return 'Adult'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 4:\n        return 0\n    elif h_age < 7:\n        return 1\n    elif h_age < 10:\n        return 2\n    elif h_age < 14:\n        return 3\n    else:\n        return 4\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=0:\n        return 0\n    else:\n        return h_age*12\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n    if h_age >=1 and h_age <=2:\n        dog_age = h_age * 4\n    elif h_age >=3 and h_age <=5:\n        dog_age = h_age * 3\n    else:\n        dog_age = h_age * 1.5\n    return dog_age\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result_lst = []\n    for i in range(0, len(S), step):\n        result_lst.append(S[i:i+step])\n    return result_lst\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if (len(S) % step)!= 0:\n        # need to keep in account for the last element (in case n is even)\n        return S[0: len(S) // step]\n    return [S[i::step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i*step:(i+1)*step] for i in range(math.floor(len(S)/step))]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new = []\n    for i in range(len(S)):\n        new.append(S[i:i+step])\n    return new\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        if i+step > len(S):\n            L.append(L[i:])\n        else:\n            L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split_list(S, n):\n        if n == 1:\n            return [S]\n        else:\n            return [S[i:i+n] for i in range(0, len(S), n)]\n    return split_list(S, step)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i + step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not S: return []\n    # TODO: Your code here\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # The O(n) solution\n    L = []\n    while len(S) > 0:\n        T = []\n        for i in range(0, len(S), step):\n            T.append(S[i : i + step])\n        L.append(T)\n        S = S[i + step :]\n    return L\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    f = 1.6\n    if l >= 0:\n        print(l**2*(f**3))\n    else:\n        print('Error')\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #TODO: Write your code here\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area=0\n    area+=l*(l*l*l)*8\n    area+=l*(l*l*l)*4\n    area+=l*(l*l*l)*(l*l*l)*3\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)*(l*l*l)\n    area+=l*(l*l*l)*(l*l*l)*(l*"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 0\n    if l <= 10:\n        s = l**2\n    else:\n        s = (l-10)**2\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (((l**2) - (l**2)) / 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    L = l\n    def area(x,y,z):\n        '''\n        Returns the area of a unit cube.\n        '''\n        return math.sqrt((x**2)*(y**2)*(z**2))\n    return area(L,area(L,area(L,L,L),L),area(L,area(L,area(L,L,L),L),L))\n    \n    \n    "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 0.5 * (l ** 2)\n    return 2 * np.pi * s * (np.sqrt(3) - 1)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 2 * (l**2) * np.pi\n    print(\"The surface area of a cube of length %.1f is: %.1f\" % (l, s))\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # TODO: Write your code here\n    if n <= 0:\n        raise Exception(\"Error: Input must be a positive integer\")\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                square_sum = i ** 2\n                return square_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = []\n    for x in range(1,n+1):\n        squares.append(x**2)\n    return sum(squares)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # find the sum of squares of odd natural numbers\n    sum_odd = 0\n    for i in range(n, 0, -2):\n        sum_odd += i**2\n    print(sum_odd)\n    # find the sum of squares of even natural numbers\n    sum_even = 0\n    for i in range(1, n, 2):\n        sum_even += i**2\n    print(sum_even)\n    # find the square of the sum\n    square_sum = sum_odd + sum_even\n    print(square_sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x = 1\n    y = 1\n    sum = 0\n    while (x < n):\n        y = x * x\n        sum = sum + y\n        x = x + 1\n    return sum\nprint(square_Sum(6))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = 0\n    for i in range(1, n+1):\n        squares = squares + i**2\n    return squares\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    summation = 0\n    for i in range(1,n):\n        if i%2 == 0:\n            summation += i\n    return summation\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = 0\n    for i in range(1,n+1,2):\n        squares += i**2\n    return squares\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i**2\n    return s\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            print(i, j)\n            if j % i == 0:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 2:\n        return 1\n    if n == 2 or n == 3:\n        return 2\n    # Write your code here.\n    return find_star_num(n-2) + n - 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1 \n    if n == 2: \n        return 3 \n    return n * find_star_num(n - 1) \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # This is a recursive function\n    # You need to update the return value here\n    return find_star_num(n-1) + 1\n    \n    "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars_num = []\n    for i in range(1, n+1):\n        if i * i!= n:\n            stars_num.append(i)\n    return stars_num[n - 1]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code goes here\n    return int(n/2)\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n % 2 == 0: \n        return find_star_num(n//2) + n//2\n    else: \n        return find_star_num(n-1) + n - 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    k = 0\n    if n == 1:\n        return 1\n    else:\n        for i in range(1, n):\n            k += 1\n            if k % 2 == 0:\n                print(k)\n            else:\n                print(k - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    if n == 3: \n        return 4\n    if n == 4: \n        return 5\n    if n == 5: \n        return 6\n    if n == 6: \n        return 7\n    if n == 7: \n        return 8\n    if n == 8: \n        return 9\n    if n == 9: \n        return 10\n    if n == 10: \n        return 11\n    if n == 11: \n        return 12\n    if n == 12: \n        return 13\n    if n == 13: \n        return 14\n    if n == 14: \n        return 15\n    if n == 15: \n        return 16\n    if n == 16: \n        return 17\n    if n == 17: \n        return 18\n    if n == 18: \n        return 19\n    if n == 19: \n        return 20\n    if n == 20: \n        return 21\n    if n == 21: \n        return 22\n    if n == 22: \n        return 23\n    if n == 23: \n        return 24\n    if n == 24: \n        return 25\n    if n == 25: \n        return 26\n    if n == 26: \n        return 27\n    if n == 27: \n        return 28\n    if n == 28: \n        return 29\n    if n == 29: \n        return 30\n    if n == 30: \n        return 31\n    if n == 31: \n        return 32\n    if n == 32: \n        return 33\n    if n == 33: \n        return 34\n    if n == 34: \n        return 35\n    if n == 35: \n        return 36\n    if n == 36: \n        return 37\n    if n == 37: \n        return 38\n    if n == 38: \n        return 39\n    if n == 39: \n        return 40\n    if n == 40: \n        return 41\n    if n == 41: \n        return 42\n    if n == 42: \n        return 43\n    if n == 43: \n        return 44\n    if n == 44: \n        return 45\n    if n == 45: \n        return 46\n    if n == 46: \n        return 47\n    if n == 47: \n        return 48\n    if n == 48: \n        return 49\n    if n == 49: \n        return 50\n    if n == 50: \n        return 51\n    if n == 51: \n        return 52\n    if n == 52: \n        return 53\n    if n == 53: \n        return 54\n    if n == 54: \n        return 55\n    if n == 55: \n        return 56\n    if n == 56: \n        return 57\n    if n == 57: \n        return 58\n    if n == 58: \n        return 59\n    if n == 59: \n        return 60\n    if n == 60: \n        return 61\n    if n == 61: \n        return 62\n    if n == 62: \n        return 63\n    if n == 63: \n        return 64\n    if n == 64: \n        return 65\n    if n == 65: \n        return 66\n    if n == 66: \n        return 67\n    if n == 67: \n        return 68\n    if n == 68: \n        return 69\n    if n == 69: \n        return 70\n    if n == 70: \n        return 71\n    if n == 71: \n        return 72\n    if n == 72: \n        return 73\n    if n == 73: \n        return 74\n    if n == 74: \n        return 75\n    if n == 75: \n        return 76\n    if n == 76: \n        return 77\n    if n == 77: \n        return 78\n    if n == 78: \n        return 79\n    if n == 79: \n        return 80\n    if n == 80: \n        return 81\n    if n == 81: \n        return 82\n    if n == 82: \n        return 83\n    if n == 83: \n        return 84\n    if n == 84: \n        return 85\n    if n == 85: \n        return 86\n    if n == 86: \n        return 87\n    if n == 87: \n        return 88\n    if n == 88: \n        return 89\n    if n == 89: \n        return 90\n    if n == 90: \n        return 91\n    if n == 91: \n        return 92\n    if n == 92: \n        return 93\n    if n == 93: \n        return 94\n    if n == 94: \n        return 95\n    if n == 95: \n        return 96\n    if n == 96: \n        return 97\n    if n == 97: \n        return 98\n    if n == 98: \n        return 99\n    if n == 99: \n        return 100\n    if n == 100: \n        return 101\n    if n == 101: \n        return 102\n    if n == 102: \n        return 103\n    if n == 103: \n        return 104\n    if n == 104: \n        return 105\n    if n == 105: \n        return 106\n    if n == 106: \n        return 107\n    if n == 107: \n        return 108\n    if n == 108: \n        return 109\n    if n == 109: \n        return 110\n    if n == 110: \n        return 111\n    if n == 111: \n        return 112\n    if n == 112: \n        return 113\n    if n == 113: \n        return 114\n    if n == 114: \n        return 115\n    if n == 115: \n        return 116\n    if n == 116: \n        return 117\n    if n == 117: \n        return 118\n    if n == 118: \n        return 119\n    if n == 119: \n        return 120\n    if n == 120: \n        return 121\n    if n == 121: \n        return 122\n    if n == 122: \n        return 123\n    if n == 123: \n        return 124\n    if n == 124: \n        return 125\n    if n == 125: \n        return 126\n    if n == 126: \n        return 127\n    if n == 127: \n        return 128\n    if n == 128: \n        return 129\n    if n == 129: \n        return 130\n    if n == 130: \n        return 131\n    if n == 131: \n        return 132\n    if n == 132: \n        return 133\n    if n == 133: \n        return 134\n    if n == 134: \n        return 135\n    if n == 135: \n        return 136\n    if n == 136: \n        return 137\n    if n == 137: \n        return 138\n    if n == 138: \n        return 139\n    if n == 139: \n        return 140\n    if n == 140: \n        return 141\n    if n == 141: \n        return 142\n    if n == 142: \n        return 143\n    if n == 143: \n        return 144\n    if n == 144: \n        return 145\n    if n == 145: \n        return 146\n    if n == 146: \n        return 147\n    if n == 147: \n        return 148\n    if n == 148: \n        return 149\n    if n == 149: \n        return 150\n    if n == 150: \n        return 151\n    if n == 151: \n        return 152\n    if n == 152: \n        return 153\n    if n == 153: \n        return 154\n    if n == 154: \n        return 155\n    if n == 155: \n        return 156\n    if n == 156: \n        return 157\n    if n == 157: \n        return 158\n    if n == 158: \n        return 159\n    if n == 159: \n        return 160\n    if n == 160: \n        return 161\n    if n == 161: \n        return 162\n    if n == 162: \n        return 163\n    if n == 163: \n        return 164\n    if n == 164: \n        return 165\n    if n == 165: \n        return 166\n    if n == 166: \n        return 167\n    if n == 167: \n        return 168\n    if n == 168: \n        return 16"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        k = '!'\n    if k == '\\n' or k == '\\r':\n        k =''\n    return chr(ord(k) - ord('a'))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[0]\n    \ndef ascii_value_decode(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[1]\n    \ndef ascii_value_list(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k.encode('ascii')\n    return char[2:]\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    print(hex(k).upper().lstrip('0x'))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == '':\n        return''\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(k)\n    except:\n        return '#'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return int(k, 16)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k) - ord('a'))\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    summ = 0\n    for i in arr:\n        if (i % 2) == 0:\n            summ += i\n    return summ\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n            if arr[i] % 2 == 0:\n                even_index += 1\n    return sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_index_sum += num\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in arr:\n        if i%2==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for x in range(0, len(arr)):\n        if arr[x] % 2 == 0:\n            sum += arr[x]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even = 0 \n    for i in range(len(arr)):\n        if i%2 == 0:\n            sum_of_even += arr[i]\n    return sum_of_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += arr[i]\n    return count\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            s = s + arr[i]\n    return s\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <=0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (even_Power_Sum(n-1)) + (4 * even_Power_Sum(n-2))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            even_power_sum += i\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        if i%5==0:\n            num += i\n    return num\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n):\n        total = total + ((i ** 5) + 1)\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s = 0\n    for x in range(1, n):\n        if x%2 == 0:\n            s = s + x\n    return s\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n,0,-2):\n        if i % 2!= 0:\n            sum += i\n        else:\n            break\n    print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    evens = [i for i in range(n) if i % 2 == 0 and i % 5!= 0]\n    sum = 0\n    for i in evens:\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 0\n    # see https://docs.python.org/3/tutorial/classes.html#classes-and-programming-recursion\n    while n > 0:\n        power = power + n\n        n = n - 1\n    return power\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return int(n*(n+1)/2)\ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    return int(n*(n-1)/2)\ndef Even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return int(n*(n+1)/2)\ndef Odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    return int(n*(n-1)/2)\ndef return_Sum_of_3_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 3 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_6_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 6 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_9_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 9 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_10_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 10 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_11_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 11 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_12_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 12 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_13_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 13 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_14_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 14 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_15_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 15 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_16_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 16 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_17_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 17 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_18_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 18 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_19_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 19 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_20_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 20 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_21_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 21 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_22_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 22 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_23_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 23 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_24_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 24 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_25_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 25 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_26_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 26 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_27_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 27 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_28_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 28 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_29_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 29 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_30_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 30 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_31_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 31 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_32_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 32 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_33_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 33 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_34_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 34 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_35_Numbers(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n 35 natural numbers.\n    '''\n    return int(n*(n+1)/2)\ndef return_Sum_of_36_Numbers(n): \n    '''\n    Write a pytho"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list_rear = []\n    for i in range(len(test_list)):\n        test_list_rear.append(test_list[i][1])\n    return test_list_rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[0] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for tup in test_list:\n        rear_extracted.append(tup[1])\n    return rear_extracted\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[0])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # your code here\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for (key, value) in test_list:\n        rear_list.append(value)\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    l = list()\n    for i in test_list:\n        l.append(i[-1])\n    return l\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract_list = []\n    for element in test_list:\n        rear_extract_list.append(element[0])\n    return rear_extract_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[0] for x in test_list"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[1] for elem in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tup1 - tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = test_tup1[1:]\n    tup2 = test_tup2[1:]\n    sub_tup1 = (tup1[0] - tup2[0], tup1[1] - tup2[1])\n    return(sub_tup1)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    x = 0\n    y = 0\n    for i in test_tup1:\n        x += i\n    for i in test_tup2:\n        y += i\n    return x - y\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = test_tup1[:]\n    for index in range(len(test_tup1)):\n        if index < len(test_tup2):\n            result[index] = test_tup2[index] - test_tup1[index]\n        else:\n            result[index] = test_tup1[index]\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x for x in test_tup2 if x not in test_tup1)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Test tuples must have the same length.')\n    else:\n        for i in range(len(test_tup1)):\n            if i < len(test_tup2):\n                test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index. \n    # Note: If you don't know what an index, you'll have to iterate through the tuples and add the elements of that tuple to the second tuple.\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return None\n    else:\n        tup1 = test_tup1\n        tup2 = test_tup2\n        # Get the first element of the two tuples\n        first_element = tup1[0]\n        # Get the second element of the two tuples\n        second_element = tup2[0]\n        # Assign the first element of the second tuple to a temporary variable\n        temp = second_element\n        # Iterate through the elements of the second tuple\n        for i in range(1,len(tup2)):\n            # If the temp value is equal to the second element, set the temp value to the second element\n            if temp == second_element:\n                tup2[i] = second_element\n            # If the temp value is not equal to the second element, set the temp value to the first element\n            else:\n                tup2[i] = first_element\n                first_element = second_element\n                second_element = temp\n        # Return the resulting tuples\n        return tup1, tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    # print(test_tup1, \":\", test_tup2)\n    # print(test_tup2)\n    # print(test_tup2[0])\n    \n    # TODO: Call this function to calculate the difference between the two tuples and return the value of the difference\n    difference = test_tup2[0] - test_tup1[0]\n    # print(difference)\n    return difference\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    i,j = len(test_tup1[0]), len(test_tup2[0])\n    count = 0\n    for i in range(0, i):\n        for j in range(0, j):\n            if test_tup1[i][j]!= test_tup2[j][i]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    i=1\n    sum = 0\n    while i <= n:\n        binomial = math.factorial(i)\n        binomial = binomial / (math.factorial(n - i))\n        sum = sum + binomial\n        i = i + 1\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    num = n*(n+1)//2\n    denom = n*(n+2)\n    if n%2 == 0:\n        return (num/denom)\n    else:\n        return (num + (2*even_binomial_Coeff_Sum(n/2)))\n    \n    \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    num = n*(n+1)//2\n    denom = n*(n+1)\n    if n%2 == 0:\n        return (num/denom)\n    else:\n        return (num - (num+(2*odd_binomial_Coeff_Sum(n/2))))\n    \n    \ndef Even_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    num = n*(n+1)//2\n    return (num + even_binomial_Coeff_Sum(num/2))\n    \n    \ndef Odd_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of odd index binomial coefficients.\n    '''\n    num = n*(n+1)//2\n    return (num - odd_binomial_Coeff_Sum(num/2))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    b = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        b = b + (n//i) * (i**2) * math.factorial(i)\n    return b \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_sum = 0\n    for i in range(n):\n        binomial_sum += i**2\n    return binomial_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # if n is zero or negative, return 0\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    # if n is odd, get the odd index binomial coefficients\n    odd_index_binomial_coeff = even_binomial_Coeff_Sum(n-1)\n    # if n is even, add the odd index binomial coefficients to the sum\n    even_index_binomial_coeff = even_binomial_Coeff_Sum(n-1)\n    return odd_index_binomial_coeff + even_index_binomial_coeff\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    sum=0\n    for i in range(n+1):\n        sum+=even_binomial_Coeff(i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * math.factorial(i-1) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per3( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per4( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per5( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per6( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per7( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per8( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per9( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per10( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per11( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per12( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per13( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per14( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per15( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per16( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per17( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per18( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(n-i) * math.pow(i, n-i)\n    return sum\n    # END FUNCTION\n    \ndef even_binomial_Coeff_Sum_Per19( n):\n    '''\n    Write a python functio"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return ((n-1) * (n*(n+1)//2))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return math.factorial(n) / math.factorial(n // 2) * (n - 1) * (n // 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n    if n == 6:\n        return 10\n    if n == 7:\n        return 12\n    if n == 8:\n        return 14\n    if n == 9:\n        return 16\n    if n == 10:\n        return 18\n    if n == 11:\n        return 20\n    if n == 12:\n        return 22\n    if n == 13:\n        return 24\n    if n == 14:\n        return 26\n    if n == 15:\n        return 28\n    if n == 16:\n        return 30\n    if n == 17:\n        return 32\n    if n == 18:\n        return 34\n    if n == 19:\n        return 36\n    if n == 20:\n        return 38\n    if n == 21:\n        return 40\n    if n == 22:\n        return 42\n    if n == 23:\n        return 44\n    if n == 24:\n        return 46\n    if n == 25:\n        return 48\n    if n == 26:\n        return 50\n    if n == 27:\n        return 52\n    if n == 28:\n        return 54\n    if n == 29:\n        return 56\n    if n == 30:\n        return 58\n    if n == 31:\n        return 60\n    if n == 32:\n        return 62\n    if n == 33:\n        return 64\n    if n == 34:\n        return 66\n    if n == 35:\n        return 68\n    if n == 36:\n        return 70\n    if n == 37:\n        return 72\n    if n == 38:\n        return 74\n    if n == 39:\n        return 76\n    if n == 40:\n        return 78\n    if n == 41:\n        return 80\n    if n == 42:\n        return 82\n    if n == 43:\n        return 84\n    if n == 44:\n        return 86\n    if n == 45:\n        return 88\n    if n == 46:\n        return 90\n    if n == 47:\n        return 92\n    if n == 48:\n        return 94\n    if n == 49:\n        return 96\n    if n == 50:\n        return 98\n    if n == 51:\n        return 100\n    if n == 52:\n        return 102\n    if n == 53:\n        return 104\n    if n == 54:\n        return 106\n    if n == 55:\n        return 108\n    if n == 56:\n        return 110\n    if n == 57:\n        return 112\n    if n == 58:\n        return 114\n    if n == 59:\n        return 116\n    if n == 60:\n        return 118\n    if n == 61:\n        return 120\n    if n == 62:\n        return 122\n    if n == 63:\n        return 124\n    if n == 64:\n        return 126\n    if n == 65:\n        return 128\n    if n == 66:\n        return 130\n    if n == 67:\n        return 132\n    if n == 68:\n        return 134\n    if n == 69:\n        return 136\n    if n == 70:\n        return 138\n    if n == 71:\n        return 140\n    if n == 72:\n        return 142\n    if n == 73:\n        return 144\n    if n == 74:\n        return 146\n    if n == 75:\n        return 148\n    if n == 76:\n        return 150\n    if n == 77:\n        return 152\n    if n == 78:\n        return 154\n    if n == 79:\n        return 156\n    if n == 80:\n        return 158\n    if n == 81:\n        return 160\n    if n == 82:\n        return 162\n    if n == 83:\n        return 164\n    if n == 84:\n        return 166\n    if n == 85:\n        return 168\n    if n == 86:\n        return 170\n    if n == 87:\n        return 172\n    if n == 88:\n        return 174\n    if n == 89:\n        return 176\n    if n == 90:\n        return 178\n    if n == 91:\n        return 180\n    if n == 92:\n        return 182\n    if n == 93:\n        return 184\n    if n == 94:\n        return 186\n    if n == 95:\n        return 188\n    if n == 96:\n        return 190\n    if n == 97:\n        return 192\n    if n == 98:\n        return 194\n    if n == 99:\n        return 196\n    if n == 100:\n        return 198\n    if n == 101:\n        return 200\n    if n == 102:\n        return 202\n    if n == 103:\n        return 204\n    if n == 104:\n        return 206\n    if n == 105:\n        return 208\n    if n == 106:\n        return 210\n    if n == 107:\n        return 212\n    if n == 108:\n        return 214\n    if n == 109:\n        return 216\n    if n == 110:\n        return 218\n    if n == 111:\n        return 220\n    if n == 112:\n        return 222\n    if n == 113:\n        return 224\n    if n == 114:\n        return 226\n    if n == 115:\n        return 228\n    if n == 116:\n        return 230\n    if n == 117:\n        return 232\n    if n == 118:\n        return 234\n    if n == 119:\n        return 236\n    if n == 120:\n        return 238\n    if n == 121:\n        return 240\n    if n == 122:\n        return 242\n    if n == 123:\n        return 244\n    if n == 124:\n        return 246\n    if n == 125:\n        return 248\n    if n == 126:\n        return 250\n    if n == 127:\n        return 252\n    if n == 128:\n        return 254\n    if n == 129:\n        return 256\n    if n == 130:\n        return 258\n    if n == 131:\n        return 260\n    if n == 132:\n        return 262\n    if n == 133:\n        return 264\n    if n == 134:\n        return 266\n    if n == 135:\n        return 268\n    if n == 136:\n        return 270\n    if n == 137:\n        return 272\n    if n == 138:\n        return 274\n    if n == 139:\n        return 276\n    if n == 140:\n        return 278\n    if n == 141:\n        return 280\n    if n == 142:\n        return 282\n    if n == 143:\n        return 284\n    if n == 144:\n        return 286\n    if n == 145:\n        return 288\n    if n == 146:\n        return 290\n    if n == 147:\n        return 292\n    if n == 148:\n        return 294\n    if n == 149:\n        return 296\n    if n == 150:\n        return 298\n    if n == 151:\n        return 300\n    if n == 152:\n        return 302\n    if n == 153:\n        return 304\n    if n == 154:\n        return 306\n    if n == 155:\n        return 308\n    if n == 156:\n        return 310\n    if n == 157:\n        return 312\n    if n == 158:\n        return 314\n    if n == 159:\n        return 316\n    if n == 160:\n        return 318\n    if n == 161:\n        return 320\n    if n == 162:\n        return 322\n    if n == 163:\n        return 324\n    if n == 164:\n        return 326\n    if n == 165:\n        return 328\n    if n == 166:\n        return 330\n    if n == 167:\n        return 332\n    if n == 168:\n        return 334\n    if n == 169:\n        return 336\n    if n == 170:\n        return 338\n    if n == 171:\n        return 340\n    if n == 172:\n        return 342\n    if n == 173:\n        return 344\n    if n == 174:\n        return 346\n    if n == 175:\n        return 348\n    if n == 176:\n        return 350\n    if n == 177:\n        return 352\n    if n == 178:\n        return 354\n    if n == 179:\n        return 356\n    if n == 180:\n        return 368\n    if n == 18"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=4/3*3.14*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4.0*(r*h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3/4)*h**3*np.pi*r**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3/h**3*np.pi\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14 * r**2 * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 4/3*math.pi*r**3\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4 * pi * r * r * (2 * pi)**2\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    print(filtered_dict)\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict1={}\n    for k,v in dict.items():\n        if type(v)==int:\n            dict1[k]=v\n        elif type(v)==str:\n            dict1[k]=v.replace(\" \",\"\")\n    for k,v in dict1.items():\n        if type(v)==int:\n            if v>=n:\n                dict1[k]=v\n    return dict1\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Write your code here\n    return dict.values()\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = True\n        else:\n            filtered_dict[key] = False\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key in dict:\n        if len(dict[key])>=n:\n            new_dict[key]=dict[key]\n    return new_dict\ndef dict_to_list(dict):\n    '''\n    Write a function that takes in a dictionary and returns a list of the keys in the dictionary.\n    '''\n    return [i for i in dict]\ndef list_to_dict(lst):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary of the strings mapped to their values.\n    '''\n    return dict(zip(lst,range(len(lst))))\ndef dict_from_list(lst):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary of the strings mapped to their values.\n    '''\n    return dict(zip(lst,range(len(lst))))\ndef dict_from_list(lst):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary of the strings mapped to their values.\n    '''\n    return dict(zip(range(len(lst)),lst))\ndef dict_from_list(lst):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary of the strings mapped to their values.\n    '''\n    return dict(zip(lst,range(len(lst))))\ndef filter_by_value(d,n):\n    '''\n    Write a function that takes in a dictionary and a value and returns a dictionary with only the values for which the key is equal to n.\n    '''\n    new_dict={}\n    for key in d:\n        if d[key]==n:\n            new_dict[key]=d[key]\n    return new_dict\ndef replace_char(string, old, new):\n    '''\n    Write a function that takes in a string and a character and returns a string with the character replaced with the new character.\n    '''\n    return string.replace(old,new)\ndef replace_char_list(string, old, new):\n    '''\n    Write a function that takes in a string and a character and returns a string with the character replaced with the new character.\n    '''\n    return string.replace(old,new)\ndef make_dict(lst):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for string in lst:\n        if string not in new_dict:\n            new_dict[string]=1\n        else:\n            new_dict[string]=new_dict[string]+1\n    return new_dict\ndef new_dictionary(lst, n):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for string in lst:\n        if string not in new_dict:\n            new_dict[string]=1\n        else:\n            new_dict[string]=new_dict[string]+1\n    new_dict={key:new_dict[key] for key in new_dict}\n    new_dict[n]=-1\n    return new_dict\ndef remove_value(dict,n):\n    '''\n    Write a function that takes in a dictionary and a value and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in dict:\n        if dict[key]==n:\n            new_dict[key]=1\n    return new_dict\ndef remove_value_list(dict,n):\n    '''\n    Write a function that takes in a dictionary and a value and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in dict:\n        if dict[key]==n:\n            new_dict[key]=1\n    return new_dict\ndef dict_add(d,n):\n    '''\n    Write a function that takes in a dictionary and a value and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        if d[key]==n:\n            new_dict[key]=1\n    return new_dict\ndef dict_add_list(d,n):\n    '''\n    Write a function that takes in a dictionary and a value and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        if d[key]==n:\n            new_dict[key]=1\n    return new_dict\ndef dict_remove(d,n):\n    '''\n    Write a function that takes in a dictionary and a value and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        if d[key]==n:\n            new_dict[key]=1\n    return new_dict\ndef dict_remove_list(d,n):\n    '''\n    Write a function that takes in a dictionary and a value and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        if d[key]==n:\n            new_dict[key]=1\n    return new_dict\ndef dict_reverse(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        new_dict[key]=d[key]\n    return new_dict\ndef dict_sort(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        new_dict[key]=d[key]\n    return sorted(new_dict,key=lambda key:new_dict[key])\ndef dict_sort_list(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        new_dict[key]=d[key]\n    return sorted(new_dict,key=lambda key:new_dict[key])\ndef dict_unique(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        if d[key] not in new_dict:\n            new_dict[d[key]]=1\n        else:\n            new_dict[d[key]]+=1\n    return new_dict\ndef dict_sorted(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary of the strings mapped to their values.\n    '''\n    new_dict={}\n    for key in d:\n        new_dict[key]=d[key]\n    return sorted(new_dict)\ndef list_remove(lst, n):\n    '''\n    Write a function that takes in a list and a value and returns a list without the value from the list.\n    '''\n    new_list=[]\n    for i in range(len(lst)):\n        if lst[i]!=n:\n            new_list.append(lst[i])\n    return new_list\ndef list_remove_list(lst, n):\n    '''\n    Write a function that takes in a list and a value and returns a list without the value from the list.\n    '''\n    new_list=[]\n    for i in range(len(lst)):\n        if lst[i]!=n:\n            new_list.append(lst[i])\n    return new_list\ndef list_remove_dict(lst,n):\n    '''\n    Write a function that takes in a list and a value and returns a dictionary without the value from the list.\n    '''\n    new_dict={}\n    for i in range(len(lst)):\n        if lst[i]!=n:\n            new_dict[lst[i]]=1\n    return new_dict\ndef list_remove_list_dict(lst,n):\n    '''\n    Write a function that takes in "
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out = []\n    for k, v in dict.items():\n        if v >= n:\n            out.append(k)\n    return out\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dictionary = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dictionary[key] = value\n    return new_dictionary"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.items()[n-1:n+1]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.values() <= n\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for value in dict:\n        if dict[value] >= n:\n            new_dict[value] = dict[value]\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    elements=test_tup[1::2]\n    return len(elements)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i+1] < test_tup[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for ele in test_tup:\n        if ele < test_tup[counter][0]:\n            counter += 1\n        else:\n            break\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    start = 0\n    end = 0\n    while end < len(test_tup):\n        start = end\n        end += 1\n        while end < len(test_tup):\n            if test_tup[end] == test_tup[start]:\n                end += 1\n            else:\n                break\n    return end - start\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if(test_tup[i] == test_tup[0]):\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Your code here\n    counter=0\n    for i in range(len(test_tup)):\n        if i==0:\n            if test_tup[i]==test_tup[i+1]:\n                counter+=1\n                break\n    return counter\n    \n    # ------------Outside the function------------\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code goes here\n    if len(test_tup) <= 0:\n        return 0\n    else:\n        count = 0\n        for i in test_tup:\n            if i < test_tup[0]:\n                count += 1\n        return coun"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<=2:\n        return 1\n    elif n%2 == 0:\n        return n//2\n    else:\n        return n-1\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        remainder = n%10\n        if remainder == 0:\n            return 9 * (remainder + 1)\n        elif remainder == 9:\n            return 9 * (remainder + 1) + 1\n        elif remainder == 2:\n            return 9 * (remainder + 1) + 2\n        elif remainder == 3:\n            return 9 * (remainder + 1) + 3\n        elif remainder == 4:\n            return 9 * (remainder + 1) + 4\n        elif remainder == 5:\n            return 9 * (remainder + 1) + 5\n        elif remainder == 6:\n            return 9 * (remainder + 1) + 6\n        elif remainder == 7:\n            return 9 * (remainder + 1) + 7\n        elif remainder == 8:\n            return 9 * (remainder + 1) + 8\n        elif remainder == 9:\n            return 9 * (remainder + 1) + 9\n        elif remainder == 10:\n            return 9 * (remainder + 1) + 10\n    \nn = int(input())\nprint(is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    import math\n    if n < 0: \n        return 0\n    \n    elif n == 0: \n        return 1\n    \n    elif n == 1: \n        return n\n    \n    else:\n        return math.gcd(n, (n - 1))"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if(n==0): \n        return 0\n    if(n==1): \n        return 1\n    if(n==2): \n        return 3\n    if(n==3): \n        return 5\n    if(n==4): \n        return 8\n    if(n==5): \n        return 10\n    if(n==6): \n        return 15\n    if(n==7): \n        return 20\n    if(n==8): \n        return 25\n    if(n==9): \n        return 30\n    if(n==10): \n        return 35\n    if(n==11): \n        return 40\n    if(n==12): \n        return 45\n    if(n==13): \n        return 50\n    if(n==14): \n        return 55\n    if(n==15): \n        return 60\n    if(n==16): \n        return 65\n    if(n==17): \n        return 70\n    if(n==18): \n        return 75\n    if(n==19): \n        return 80\n    if(n==20): \n        return 85\n    if(n==21): \n        return 90\n    if(n==22): \n        return 95\n    if(n==23): \n        return 100\n    if(n==24): \n        return 105\n    if(n==25): \n        return 110\n    if(n==26): \n        return 115\n    if(n==27): \n        return 120\n    if(n==28): \n        return 125\n    if(n==29): \n        return 130\n    if(n==30): \n        return 135\n    if(n==31): \n        return 140\n    if(n==32): \n        return 145\n    if(n==33): \n        return 150\n    if(n==34): \n        return 155\n    if(n==35): \n        return 160\n    if(n==36): \n        return 165\n    if(n==37): \n        return 170\n    if(n==38): \n        return 175\n    if(n==39): \n        return 180\n    if(n==40): \n        return 185\n    if(n==41): \n        return 190\n    if(n==42): \n        return 195\n    if(n==43): \n        return 200\n    if(n==44): \n        return 205\n    if(n==45): \n        return 210\n    if(n==46): \n        return 215\n    if(n==47): \n        return 220\n    if(n==48): \n        return 225\n    if(n==49): \n        return 230\n    if(n==50): \n        return 235\n    if(n==51): \n        return 240\n    if(n==52): \n        return 245\n    if(n==53): \n        return 250\n    if(n==54): \n        return 255\n    if(n==55): \n        return 260\n    if(n==56): \n        return 265\n    if(n==57): \n        return 270\n    if(n==58): \n        return 275\n    if(n==59): \n        return 280\n    if(n==60): \n        return 285\n    if(n==61): \n        return 290\n    if(n==62): \n        return 295\n    if(n==63): \n        return 300\n    if(n==64): \n        return 305\n    if(n==65): \n        return 310\n    if(n==66): \n        return 315\n    if(n==67): \n        return 320\n    if(n==68): \n        return 325\n    if(n==69): \n        return 330\n    if(n==70): \n        return 335\n    if(n==71): \n        return 340\n    if(n==72): \n        return 345\n    if(n==73): \n        return 350\n    if(n==74): \n        return 355\n    if(n==75): \n        return 360\n    if(n==76): \n        return 365\n    if(n==77): \n        return 370\n    if(n==78): \n        return 375\n    if(n==79): \n        return 380\n    if(n==80): \n        return 385\n    if(n==81): \n        return 390\n    if(n==82): \n        return 395\n    if(n==83): \n        return 400\n    if(n==84): \n        return 405\n    if(n==85): \n        return 410\n    if(n==86): \n        return 415\n    if(n==87): \n        return 420\n    if(n==88): \n        return 425\n    if(n==89): \n        return 430\n    if(n==90): \n        return 435\n    if(n==91): \n        return 440\n    if(n==92): \n        return 445\n    if(n==93): \n        return 450\n    if(n==94): \n        return 455\n    if(n==95): \n        return 460\n    if(n==96): \n        return 465\n    if(n==97): \n        return 470\n    if(n==98): \n        return 475\n    if(n==99): \n        return 490\n    if(n==100): \n        return 495\n    if(n==101): \n        return 500\n    if(n==102): \n        return 505\n    if(n==103): \n        return 510\n    if(n==104): \n        return 515\n    if(n==105): \n        return 520\n    if(n==106): \n        return 525\n    if(n==107): \n        return 530\n    if(n==108): \n        return 535\n    if(n==109): \n        return 540\n    if(n==110): \n        return 555\n    if(n==111): \n        return 570\n    if(n==112): \n        return 575\n    if(n==113): \n        return 580\n    if(n==114): \n        return 585\n    if(n==115): \n        return 590\n    if(n==116): \n        return 595\n    if(n==117): \n        return 600\n    if(n==118): \n        return 515\n    if(n==119): \n        return 540\n    if(n==120): \n        return 535\n    if(n==121): \n        return 570\n    if(n==122): \n        return 575\n    if(n==123): \n        return 580\n    if(n==124): \n        return 585\n    if(n==125): \n        return 590\n    if(n==126): \n        return 595\n    if(n==127): \n        return 600\n    if(n==128): \n        return 605\n    if(n==129): \n        return 610\n    if(n==130): \n        return 625\n    if(n==131): \n        return 630\n    if(n==132): \n        return 635\n    if(n==133): \n        return 660\n    if(n==134): \n        return 665\n    if(n==135): \n        return 670\n    if(n==136): \n        return 675\n    if(n==137): \n        return 680\n    if(n==138): \n        return 685\n    if(n==139): \n        return 690\n    if(n==140): \n        return 695\n    if(n==141): \n        return 700\n    if(n==142): \n        return 705\n    if(n==143): \n        return 710\n    if(n==144): \n        return 715\n    if(n==145): \n        return 720\n    if(n==146): \n        return 725\n    if(n==147): \n        return 730\n    if(n==148): \n        return 735\n    if(n==149): \n        return 740\n    if(n==150): \n        return 745\n    if(n==151): \n        return 750\n    if(n==152): \n    "
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    dec = 0\n    while i < n:\n        j = (n-i)\n        print(j)\n        num = -1\n        if j % 2!= 0:\n            num = j // 2\n            print(num)\n            dec = dec + num\n        else:\n            num = j // 2\n            print(num)\n            dec = dec + num\n        i = i+1\n    return dec\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n-1) * (n-1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n= int(n)\n    if n<1:\n        return print('Invalid Input')\n    elif n==1:\n        return 1\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0 or n == 1 or n == 2:\n        return n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = int(n)\n    if num <= 9:\n        if n%2 == 0:\n            return num\n        else:\n            return num + 1\n    else:\n        return num + 2\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2) + is_num_decagonal(n-3)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    while i < len(dlist) and i < len(dlist):\n        if dlist[i] == item:\n            return (True, i)\n        i = i + 1\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            position = i\n    return position\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    start_index = 0\n    end_index = len(dlist)-1\n    while start_index <= end_index:\n        midpoint = (start_index + end_index)//2\n        midpoint_element = dlist[midpoint]\n        if item == midpoint_element:\n            return True, midpoint\n        elif item > midpoint_element:\n            start_index = midpoint + 1\n        else:\n            end_index = midpoint - 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n    \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n    return (index, index+1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n        elif dlist[i] > item:\n            return (False,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n        else:\n            return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n    \ndef test_unique_0():\n    assert all_unique([]) == True\n    assert all_unique(['1', '1', '1']) == True\n    assert all_unique(['1', '2', '1', '1']) == False\n    assert all_unique(['1', '1', '1', '2']) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 2, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 2, 1, 1, 1]) == True\n    assert all_unique([1, 1, 1, 1, 1, 1, 2, 1, 1, 2]) == True\n    assert all_unique([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]) == True\n    assert all_unique([1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 2, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 2, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 2, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 2, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 2, 1, 1, 1, 1, 1]) == True\n    assert all_unique([1, 1, 1, 1, 2, 1, 1, 1, 1]) == True\n    assert all_unique([1, 1, 1, 1, 1, 2, 1, 1, 1]) == True\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1]) == True\n    assert all_unique([1, 2, 1, 1, 1, 1, 1, 1, 1]) == True\n    assert all_unique([1, 1, 1, 1, 1, 2, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 2, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 2, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 2, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 2, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 2, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 2, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 2, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == False\n    assert all_unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #pass\n    if len(set(test_list))==len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    test_list_set = set(test_list)\n    if len(test_list_set) == len(test_list):\n        return True\n    return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # TO DO\n    # write your code here\n    count = 0\n    for i in test_list:\n        if i in test_list:\n            count += 1\n    if count == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #write your code here\n    for element in test_list:\n        if element in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for element in test_list:\n        if element not in test_list:\n            unique = False\n            break\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    \n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n    \ndef is_prime(number):\n    '''\n    Write a python function to check if the number given by the user is prime or not.\n    '''\n    if number > 1:\n        for i in range(2, number):\n            if (number % i) == 0:\n                return False\n        return True\n    return False\n    \ndef concatenate(a,b):\n    '''\n    Write a python function to concatenate the input two lists of integers.\n    '''\n    result = []\n    \n    for i in range(len(a)):\n        result.append(a[i] + b[i])\n    return result\n    \ndef reverse(num):\n    '''\n    Write a python function to reverse the given number of characters.\n    '''\n    for i in range(len(num)):\n        num[i] = num[i][::-1]\n    return num\n    \ndef palindrome(word):\n    '''\n    Write a python function to check if the word given by the user is a palindrome or not.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-1 - i]:\n            return False\n    return True\n    \ndef palindrome_without_punctuation(word):\n    '''\n    Write a python function to check if the word given by the user is a palindrome without punctuation or not.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-1 - i]:\n            return False\n    return True\n    \ndef prime_numbers(num):\n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num == 1 or num == 4:\n        return False\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    elif num % 5 == 0:\n        return False\n    else:\n        for i in range(5):\n            if (num % i == 0):\n                return False\n        return True\n    \ndef reverse_string(word):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return word[::-1]\n    \ndef factorial(num):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        result = num * factorial(num-1)\n        return result\n    \ndef is_pangram(word):\n    '''\n    Write a python function to check if a given string is a pangram or not.\n    '''\n    for i in range(len(word)):\n        if word[i] not in alphabet:\n            return False\n    return True\n    \ndef generate_alphabet(n):\n    '''\n    Write a python function to generate a given string of characters and check if it is a valid pangram or not.\n    '''\n    for i in range(1,n+1):\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        word = ''\n        for j in range(len(alphabet)):\n            word += alphabet[j]\n        if is_pangram(word):\n            print(word,'is a pangram')\n        else:\n            print(word,'is not a pangram')\n    return True\n    \ndef no_space_left(text):\n    '''\n    Write a python function to check if a given string contains no spaces or not.\n    '''\n    for i in text:\n        if'' in text:\n            return False\n    return True\n    \ndef is_under(num):\n    '''\n    Write a python function to check if a given number is a number or not.\n    '''\n    if num == 2:\n        return True\n    elif num == 3:\n        return False\n    elif num == 4:\n        return True\n    else:\n        for i in range(num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_prime_number(num):\n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # if the lists are of the same length then\n    # make them of size n\n    if len(nums1)!= len(nums2):\n        return 'Sizes of the two lists must be equal'\n    # if the first list has a size n then\n    # remove the first element of the second list\n    if len(nums1) == 1:\n        nums2.pop(nums2.index(nums1[0]))\n    # if the second list has a size n then\n    # remove the second element of the first list\n    if len(nums2) == 1:\n        nums1.pop(nums1.index(nums2[0]))\n    # return the result of the two lists\n    return nums1,nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Code here\n    return [nums1[i] - nums2[i] for i in range(len(nums1))"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i] - nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not nums1:\n        return []\n    if not nums2:\n        return []\n    if len(nums1)!= len(nums2):\n        return nums1\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    s = []\n    for num in nums2:\n        s.append(num-nums1[0])\n    return s\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for index in range(len(nums1)):\n        nums1[index] -= nums2[index]\n        \n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a = []\n    for i in nums2:\n        if i not in nums1:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n    \nnumbers_to_remove = sub_list(numbers,sub_list(numbers,numbers))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    count = 0\n    sub_list = []\n    while count < len(nums1):\n        for elem in nums2:\n            if elem in nums1:\n                sub_list.append(elem)\n            count += 1\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = nums1[:]\n    l2 = nums2[:]\n    i = 0\n    j = 0\n    while i < len(l1):\n        while j < len(l2):\n            if l1[i] < l2[j]:\n                l1[i] -= l2[j]\n            j += 1\n        i += 1\n    return l1\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(i) for i in str(n)]\n    for i in digits:\n        if i == digits[0]:\n            digits.remove(digits[0])\n    return digits\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    from pynput import keyboard\n    from pynput.keyboard import Key, Controller\n    import time\n    controller = Controller()\n    keyboard = keyboard.Controller()\n    try:\n        print('-'*20 +'Checking number'+ n + '.' + '-'*20)\n        while True:\n            count = 0\n            for i in n:\n                if i.isnumeric():\n                    count += 1\n            if count == len(n):\n                break\n        print('-'*20 +'Done.' + '-'*20)\n        time.sleep(1)\n    except KeyboardInterrupt:\n        print('KeyboardInterrupt.')\n        time.sleep(2)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in n:\n        if i in '0123456789':\n            count += 1\n    return count == n.count('1')\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    '''\n    for i in range(0, len(n)):\n        if n[i] <= n[i+1]:\n            return False\n    '''\n    \n    '''\n    # We will start counting at the end of the input\n    # The frequency of each digit is the number of times\n    # it appears in the string.\n    \n    # For example, if n = 123 and we have:\n    #\n    #\n    #\n    # Then, we will count 123: 1\n    # 123: 2\n    # 123: 3\n    # 123: 4\n    # 123: 5\n    #\n    # We will check whether 123, 123, and 345 are all less than or\n    # equal to the digit 13. If they are, we return false.\n    \n    # For example, if n = 123, and we have:\n    #\n    #\n    #\n    #\n    # Then, we will check whether 123, and 123 is equal to the digit 13.\n    # If they are, we return false.\n    \n    # For example, if n = 1234, and we have:\n    #\n    #\n    #\n    #\n    # Then, we will check whether 1234, and 1234 are equal to the digit 13.\n    # If they are, we return false.\n    \n    # For example, if n = 1234, and we have:\n    #\n    #\n    #\n    #\n    #\n    # Then, we will check whether 1234, and 1234 are equal to the digit 13.\n    \n    # Now, we will count the digit 13, which is less than 1234, and are less than 13.\n    # We will then return false.\n    #\n    # If we count the digit 13, and it is less than 1234, then\n    # we will check whether 1234, and 1234 are equal to the digit 13.\n    # If they are, we return false.\n    \n    # For example, if n = 1234, and we have:\n    #\n    #\n    #\n    #\n    # Then, we will count the digit 13, and it is less than 1234, and are less than 13.\n    # We will then check whether 1234, and 1234 are equal to the digit 13.\n    # If they are, we return false.\n    '''\n    \n    # First, we will create a variable that will contain all the digits of the input number.\n    \n    # We'll then create a list that will contain all the digits of each number from the number we have.\n    \n    # This will be a list of strings and it will be a list of the digits of each number.\n    # We'll then check for each number with the function validate() with the digits we have.\n    \n    # Lastly, we'll create a list of the characters which we will then check for.\n    # We'll then return the results as a list.\n    \n    # For example, if we have:\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if there are any characters that we have not accounted for.\n    # If they are, then we return false.\n    \n    # For example, if we have:\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if there are any characters that we have not accounted for.\n    # If they are, then we return false.\n    \n    # For example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if there are any characters that we have not accounted for.\n    # If they are, then we return false.\n    #\n    # Then, we'll check to see if there are any characters that we have not accounted for.\n    # If they are, then we return false.\n    \n    # This will be a list of strings and it will be a list of the digits of each number from the number we have.\n    # We'll then check for each number with the function validate() with the digits we have.\n    \n    # Now, we'll check to see if the number is less than or equal to the digit 13.\n    \n    # If we have the numbers that we have, then we'll check to see if they are less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # For example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # For example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # For example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # And for example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    #\n    #\n    # Now that we have the correct digits, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    #\n    # Again, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # For example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # Now, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # And for example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    #\n    # And for example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # Now, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    #\n    #\n    # And for example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # We'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # And for example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    # Finally, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    \n    \n    # For example, if we have:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # Then, we'll check to see if the number is less than or equal to the digit 13.\n    # If they are, then we return false.\n    #\n    # And for example, if we have:\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits=list(map(int,str(n)))\n    return sum(digits)<=n\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for digit in n: \n        if digit not in digits: \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = n.split(\"0\")\n    for digit in digits:\n        if not digit.isdigit():\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Write your code here\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    return n%10 == 0\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n > 0:\n        s = []\n        for i in str(n):\n            s.append(i)\n        if n in s:\n            return print('yes')\n        else:\n            return print('no')\n    else:\n        return print('no')\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    is_equal=True\n    for element_item in list:\n        if element_item!=element:\n            is_equal=False\n    return is_equal\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for ele in list:\n        if ele!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == None or len(list) < 2:\n        raise ValueError(\"List must be a non-empty list\")\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    i = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    def is_valid(text):\n        \"\"\"\n        Returns:\n            string: whether the string contains the 'a' character followed by two or three 'b' characters\n        \"\"\"\n        return bool(re.match(r'^([ab])(\\1)(\\2)*$', text))\n    def convert_text_to_int(text):\n        \"\"\"\n        Returns:\n            string: the string that is converted to an int\n        \"\"\"\n        def get_int_from_text(text):\n            \"\"\"\n            Returns:\n                int: the int value of the string that is passed as parameter\n            \"\"\"\n            return int(text)\n        \n        # read text as string\n        if not is_valid(text):\n            raise ValueError('Invalid input')\n        \n        # convert text to int\n        return get_int_from_text(text)\n    \n    def convert_text_to_bool(text):\n        \"\"\"\n        Returns:\n            string: the string that is converted to a bool\n        \"\"\"\n        # read text as string\n        if not is_valid(text):\n            raise ValueError('Invalid input')\n        \n        # convert text to bool\n        return bool(re.match(r'^(\\w+)(\\w+)\\b$', text))\n    \n    # if the string has only one letter, it is not valid\n    return is_valid(text) and len(text) == 1 and convert_text_to_int(text) == 1\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # your code goes here\n    a = 0\n    b = 0\n    c = 0\n    string = re.findall(r\"[A-Za-z0-9\\s]+b\", text)\n    for x in string:\n        if x == 'a':\n            a += 1\n        elif x == 'b':\n            b += 1\n        elif x == 'c':\n            c += 1\n    if a == 2 and b == 2 and c == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_1 = re.search(r'\\b[a-zA-Z0-9][a-zA-Z0-9_]*\\b', text)\n    match_2 = re.search(r'(?=[a-zA-Z0-9_])[b-zA-Z0-9_]*', text)\n    \n    if match_1 and match_2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    p = 0\n    while i < len(text) and j < len(text):\n        if text[i] == 'a' and text[j] == 'b':\n            k += 1\n            i += 1\n            j += 1\n        elif text[i] == 'b' and text[j] == 'b':\n            k -= 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if p == 0:\n        if k == 2:\n            return True\n    else:\n        if k == 3:\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if(text == 'a') or (text == 'b') or (text == 'c') or (text == 'd'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_split = re.split(r'\\w+\\s{2,}',text)\n    if len(text_split)!= 3:\n        return False\n    for word in text_split:\n        if word.count('a')!= 1:\n            return False\n        if word.count('b')!= 2:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = r'a[bc]+b[bc]+c'\n    a_or_b = re.findall(regex, text)\n    if len(a_or_b) == 2:\n        return True\n    elif len(a_or_b) == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # 'a' followed by two or three 'b' characters\n    for i in range(len(text)-2):\n        if text[i] == 'b' and text[i+1] == 'a':\n            return True\n    # 'a' followed by three 'b' characters\n    for i in range(len(text)-2):\n        if text[i] == 'b' and text[i+1] == 'a':\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_two_three_regex = re.compile('[ab]')\n    text_three_regex = re.compile('[bab]')\n    return text_two_three_regex.search(text) or text_three_regex.search(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_string = text.replace('a', 'b')\n    if text_string.count('b') >= 1:\n        return True\n    elif text_string.count('b') == 2:\n        return True\n    elif text_string.count('b') == 3:\n        return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = []\n    sum = 0\n    for i in range(k):\n        sum = sum + a[i]\n        l.append(sum)\n    l = l + a[n:]\n    for i in range(k, len(a)):\n        sum = sum + a[i]\n        l.append(sum)\n    return max(l)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # check if the given array is empty or not.\n    if not a or len(a) == 0:\n        return 0\n    max_sub_array_sum = a[0]\n    curr_sub_array_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    l, r = 0, 1\n    result = 0\n    \n    while r < n:\n        result += a[l]\n        l += 1\n        r += k\n        \n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a)\n    if n < k: \n        return -1\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = 0\n    max_sum = 0\n    left, right = 0, 1\n    while right <= n:\n        s += a[right]\n        if s > max_sum:\n            max_sum = s\n        right += 1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_of_a = 0\n    sub_array_sum = 0\n    for i in range(0, n):\n        sub_array_sum += a[i]\n        # If the number of a's sub array sum is less than the maximum sub array sum, then the array\n        if sub_array_sum < k:\n            sub_array_sum += a[i]\n            # If the new sub array sum is greater than the max sub array sum, then the array is not updated\n            if sub_array_sum > max_sum_of_a:\n                max_sum_of_a = sub_array_sum\n    return max_sum_of_a\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Your code here\n    \n    result = 0\n    l = len(a)\n    i = 0\n    for j in range(n, l):\n        result = max(result + a[j - i], a[j])\n        i = j\n    return result\n    \ndef run():\n    a = [int(i) for i in input().strip().split()]\n    n = len(a)\n    k = int(input())\n    print(max_sub_array_sum_repeated(a, n, k))\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -sys.maxsize\n    arr_list = []\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = len(a)\n    m = max(a[0], a[1], a[2]) + k\n    for i in range(3, l): \n        m = max(m, a[i] + a[i-3] + a[i-2] + a[i-1] + a[i]) \n    return m\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n**2)  \n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_square_numbers = 0\n    for i in range(1,n):\n        sum_square_numbers += i**2\n    return sum_square_numbers\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            square = i**2\n            squares.append(square)\n    return sum(squares)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    i = 1\n    while i < n:\n        result += (i ** 2)\n        i += 2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*n\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares = []\n    for i in range(1,n+1):\n        num = i**2\n        squares.append(num)\n    return squares[1:n+1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sub_list in list1:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len,list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    lengths = []\n    \n    for sublist in list1:\n        lengths.append(len(sublist))\n    \n    return max(lengths)\n    \nlist1 = [[1,2,3], [1,2,3], [1,2,3]]\nlist1.sort()\nprint(list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for list1_item in list1:\n        if len(list1_item) > max_length:\n            max_length = len(list1_item)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = len(list1)\n    if l == 0:\n        return 0\n    else:\n        return max(max_length(list1[i]) for i in range(l))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Create a max_length list, and loop through the list\n    max_length = []\n    for sublist in list1:\n        # Loop through each item in the sublist\n        for item in sublist:\n            # Add each item to the max_length list\n            if len(str(item)) > max(max_length):\n                max_length = [item]\n            elif len(str(item)) > max(max_length):\n                max_length = [item]\n    # Return the max_length list\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    def max_length_2(lst):\n        '''\n        find the maximum length of a list of lists.\n        '''\n        list1_2 = []\n        for i in range(len(lst)):\n            list1_2.append(max(lst[i]))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    length = 0\n    for i in list1:\n        length += len(i)\n    \n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    return max([len(sublist) for sublist in list1])\n    \ndef is_even(n):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    return n%2 == 0\n    \ndef is_odd(n):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    return n%2!= 0\n    \ndef is_prime(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num==1:\n        return False\n    \n    if num==2:\n        return True\n        \n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # case 1\n    if n==1:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    m=1\n    for i in range(n):\n        for j in range(i+1, n):\n            if (k>=2):\n                m = m +1\n            else:\n                break\n    return m\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Your code here\n    \n    if n <= 2:\n        return 1\n    \n    elif k == 0 or n == 1:\n        return 1\n    \n    elif k > n or n == 2:\n        return 0\n    \n    else:\n        ways = [count_no_of_ways(n-1, k-1) for _ in range(n)]\n        ways[0] = 1\n        ways[n-1] = 1\n        return ways[n-2] * ways[n-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # base cases\n    if n == 1 or k == 1:\n        return 1\n    if n == 2:\n        return 2\n    if k == 2:\n        return 3\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k <= 2:\n        return n\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    if k == n-1:\n        return 2\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n < 2:\n        return n\n    \n    f = [0 for i in range(k)]\n    f[0] = 1\n    f[1] = 1\n    f[2] = 2\n    for i in range(3, n + 1):\n        f[i] = (f[i - 2] + f[i - 1]) * f[i - 1]\n    return f[n - 1]"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case - all empty / empty squares have equal color \n    if n == 0 and k == 0: \n        return 1\n    if n < 0 or k < 0: \n        return 0\n    \n    # base case - there are only 2 adjacent squares with the same color \n    if n < k and k < n: \n        return count_no_of_ways(n, k-1) + count_no_of_ways(n-1, k-1)\n        \n    # to check whether n is smaller than k \n    if n < k: \n        return count_no_of_ways(n, k-1)\n    \n    # to check whether k is smaller than n \n    if k < n: \n        return count_no_of_ways(n, k-1) \n    \n    return count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if k > n:\n        return 0\n    elif n == 1 and k > 1:\n        return 1\n    elif n == 1 and k == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return 1 + count_no_of_ways(n - 1, k) + count_no_of_ways(n, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    return nums[nums[k] - 1]\n    \ndef staircase(n, k): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    return nums[nums[k] - 1]\n    \ndef one_direction_staircase(n, k): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    return nums[nums[k] - 1]\n    \ndef staircase_with_probability(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \ndef staircase_with_probability_v2(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \ndef staircase_with_probability_v3(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \ndef staircase_with_probability_v4(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \ndef staircase_with_probability_v5(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \ndef staircase_with_probability_v6(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \n    \ndef staircase_with_probability_v7(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \ndef staircase_with_probability_v8(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \ndef staircase_with_probability_v9(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k] - 1] * probability\n    \ndef staircase_with_probability_v10(n, k, p): \n    ''' \n    Write a function that returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \n    The fence is painted with odd numbers representing red and even numbers representing blue. \n    The probability that we paint the fence with the given number of posts is p/n and the probability that we paint the fence with the given number of posts is 1/n is (1 - p). \n    '''\n    nums = [2 ** k - 1 for _ in range(n)]\n    probability = p / n\n    return nums[nums[k"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    if n > m:\n        return find(n, m % n)\n    return find(n % m, m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    res = []\n    l = []\n    for i in range(m):\n        l.append(int(str(n)[i] + str(n)[i+1]))\n    for i in range(1, m):\n        if (l[i] < l[i-1]):\n            res.append(l[i])\n        else:\n            res.append(l[i-1])\n    return res\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #if n is 0 or m is 0\n    if n==0 and m==0:\n        return 0\n    #if n is positive or m is positive\n    if n>0 and m>0:\n        #if n is less than m\n        if n<m:\n            #return floor(n/m)\n            return n//m\n        #else return floor(n/m)\n        else:\n            #return floor(m/n)\n            return m//n\n    #if n is negative\n    else:\n        return -1\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    # if first number is even\n    if n % 2 == 0:\n        return (n // 2)\n    else:\n        # if n is odd\n        return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        return find(n,m/2)\n    elif n == m:\n        return m\n    elif n > m:\n        return find(n/m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return find(m,n-1)\n    elif n==m:\n        return n\n    else:\n        return int(round(m/n))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 1:\n        return n\n    return find(n,m-1) + n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n=int(n)\n    m=int(m)\n    if m==0:\n        return 0\n    if n==0:\n        return 0\n    rem=m%10\n    if rem==n%10:\n        return n\n    else:\n        return find(n,rem)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        n, m = m, n\n    while n>0 and m>0:\n        if n%m == 0:\n            return n//m\n        elif n%m > 0:\n            n = n//m\n        else:\n            return 0\n    return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    if m==0:\n        return 1\n    if n==1:\n        return 1\n    if m==1:\n        return 2\n    if n<=m:\n        ans=n//m\n        return ans\n    else:\n        ans=m//n\n        return ans\n        \n    \n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(h**2 + w**2)\n    return a,b\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w<h:\n        w,h = h,w\n    triangle = ((w+h)/2)*math.sin(math.radians(360-math.degrees(math.atan(1/math.sqrt(w**2+h**2)))))/math.sqrt(w**2+h**2)\n    return triangle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Compute the area of the triangle\n    A = w*h*3/2\n    # Compute the semi-perimeter\n    S = math.sqrt(A)\n    # Compute the area of the triangle\n    area = (S*(S-w)/2)/math.sqrt(3)\n    # Return the third side\n    return area\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return math.pi/4\n    elif w<h:\n        return 2*math.pi/3\n    else:\n        return 0\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # return a result\n    return (math.sqrt(w*h*(w+h)))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (h/2) * math.tan(math.radians(90)/3) * w\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = math.atan((w*h)/(math.sqrt(w*w+h*h)))\n    return angle - math.pi/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x=w/2\n    y=h/2\n    z=0\n    if x>y:\n        z=math.sqrt(x**2+y**2)\n    elif y>x:\n        z=math.sqrt(x**2+y**2)\n    return z\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w*w + h*h),2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = 0.5 * (w * h)\n    \n    if area > 7:\n        return 6\n    elif (area < 7) and (area > 6):\n        return (area - 3) / 2\n    elif (area == 7) and (area > 6):\n        return 0\n    else:\n        return 0\n    \ndef triangle_area(w,h):\n    '''\n    A function to find the area of a triangle\n    '''\n    area = 0.5 * (w * h)\n    \n    if (area == 0):\n        return 0\n    elif (area > 7):\n        return 6\n    elif (area < 7) and (area > 6):\n        return (area - 3) / 2\n    elif (area == 7) and (area > 6):\n        return 0\n    else:\n        return 0\n    \ndef otherside_rightangle_prod(w,h):\n    '''\n    a function to find the product of the other side of a right angled triangle\n    '''\n    area = 0.5 * (w * h)\n    \n    if area > 7:\n        return 6\n    elif (area < 7) and (area > 6):\n        return (area - 3) / 2\n    elif (area == 7) and (area > 6):\n        return 0\n    else:\n        return 0\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for element in listval:\n        if element > max_val:\n            max_val = element\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Check to see if the list is empty\n    if not listval:\n        return None\n    \n    # Use recursion to find the max value\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n    \n    # Test your function\n    # return None if the list is empty\n    # return the max value if the list is non empty\n    return listval[0]\n    "
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if max_val < i:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    elif len(listval) == 2:\n        return max(listval)\n    else:\n        return max(listval[0], max_val(listval[1:]), key=listval.count)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    if len(listval) == 2:\n        return max(listval)\n    if listval[0] < listval[1]:\n        return listval[1]\n    return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for x in listval:\n        if x > maxval:\n            maxval = x\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(0, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val == None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    elif number == 0:\n        return 0\n    else:\n        return sum_div(number - 1) + sum_div(number - 2)\n        "
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def is_divisible(number):\n        '''\n        Check if a number is divisible by itself or any divisor.\n        '''\n        if number % 2 == 0:\n            return False\n        else:\n            return True\n    return sum(filter(is_divisible, range(1, number + 1)))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1,number+1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if(number == 0):\n        return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    print(number)\n    for i in range(1, number + 1):\n        if number % i == 0:\n            if i == number / i:\n                print(i, \"is a divisor\")\n            else:\n                print(i, \"is not a divisor\")\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        if number == 1:\n            return 1\n        else:\n            result = 0\n            while number!= 1:\n                if number%2 == 0:\n                    result += number\n                    number /= 2\n                else:\n                    number = number / 2\n            return result\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # check if the number is divisible by the current number\n    if number % number!= 0:\n        return number + sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = []\n    for i in range(1, number):\n        if number % i == 0:\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    def check_for_divisors(number):\n        if number == 1:\n            return number\n        if number % 2 == 0:\n            return check_for_divisors(number // 2)\n        if number % 3 == 0:\n            return check_for_divisors(number // 3)\n        return check_for_divisors(number // 4)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    cnt = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i] and cnt == 2:\n                cnt += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return cnt\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    max = max(arr)\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Code here\n    count=0\n    sorted_arr=sorted(arr)\n    for i in range(len(sorted_arr)):\n        for j in range(len(sorted_arr)):\n            if i!=j and sorted_arr[j]<sorted_arr[i]:\n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Count = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] < arr[i]:\n                Count += 1\n    return Count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count+=1\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1] and arr[j] > arr[j+2]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    print(count)\n    return(count)\n    \ndef mergeSort(arr):\n    '''\n    Write a Python function to sort an array in ascending order.\n    '''\n    if len(arr) < 2:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = mergeSort(left)\n    right = mergeSort(right)\n    return merge(left,right)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #arr=[]\n    #l=list()\n    \n    #for i in range(len(arr)):\n        #l.append(arr[i])\n    #print(l)\n    \n    #for i in range(len(arr)):\n        #if arr[i]>arr[i+1]:\n            #arr[i],arr[i+1]=arr[i+1],arr[i]\n    #return len(arr)\n    #print(arr)\n    #return arr.count(arr[0])+arr.count(arr[1])-arr.count(arr[-1])\n    '''\n    a=int(input())\n    for i in range(a):\n        b,c=map(int,input().split())\n        arr.append(b)\n        arr.append(c)\n    print(arr)\n    '''\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array.\n    arr.sort()\n    # Copy the sorted array\n    inv_arr = arr[:]\n    # Check the inversion count.\n    inv_count = 0\n    # For the inversion count, set the equal to 0.\n    for i in range(len(arr)-1):\n        # Check the element between the i and i+1.\n        if inv_arr[i+1] > inv_arr[i]:\n            # If the element is greater than the element.\n            inv_count += 1\n        # The array is not inversable.\n        if inv_arr[i]!= inv_arr[i+1]:\n            # The two are equal.\n            # The element is not inversable.\n            return inv_count\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # define count as 0\n    count = 0\n    \n    # loop through the array (check if each element in the array is in the same position)\n    for i in range(len(arr)):\n        \n        # if the current value in the array is greater than the next value in the array\n        if arr[i] > arr[i + 1]:\n            # increment the count by 1\n            count += 1\n            \n    # return the count\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0: \n        return 0\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            flatten.append(list1[i][j])\n    return flatten\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #Step 1: initiate an empty list to store the values of the nested list\n    flattened_list = []\n    #Step 2: iterate through the nested list and store the values in the flattened list\n    for item in list1:\n        if type(item)!= list:\n            flattened_list.append(item)\n        else:\n            for element in item:\n                flattened_list.append(element)\n    #Step 3: return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # nested_list_1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    # nested_list_2 = [[1, 2, [3, 4, [5, 6, [7, 8, 9]], 10]], 11]\n    # nested_list_3 = [[1, 2, 3], [4, 5, [6, 7, 8], 9]]\n    # nested_list_4 = [[1, 2, 3], [4, 5, [6, [7, [8, 9], 10]], 11]]\n    \n    return [item for sublist in list1 for item in sublist]"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            flattened.extend(flatten_list(list1[i]))\n        else:\n            flattened.append(list1[i])\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    if type(list1)!= list:\n        return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        # first convert list to a flat array\n        temp = []\n        for item in list1:\n            if isinstance(item,list):\n                temp.extend(flatten_list(item))\n            else:\n                temp.append(item)\n        return temp\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # create a temporary list containing the elements\n    temp_list = []\n    # traverse the nested list\n    for element in list1:\n        # append the element to the temporary list\n        temp_list.append(element)\n        # traverse the nested list\n        if len(temp_list) > 1:\n            # if the list contains more than one element\n            # traverse the element\n            for i in range(len(temp_list)):\n                # append the element to the temporary list\n                temp_list.append(temp_list[i])\n    return temp_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain(*list1))\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maximum = 0\n    for item in stdata:\n        if item[1] > maximum:\n            maximum = item[1]\n    return maximum\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # TODO: add your code here\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(map(lambda item: item[1], stdata), key=lambda x: x[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_function = 0\n    for list_item in stdata:\n        aggregate_func = 0\n        for item in list_item:\n            aggregate_func = aggregate_func + item\n        if aggregate_func > max_aggregate_function:\n            max_aggregate_function = aggregate_func\n    return max_aggregate_function\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = []\n    for d in stdata:\n        data.append(d[1])\n    return max(data)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [(int(item[0]), item[1]) for item in stdata]\n    stdata = sorted(stdata, key = lambda item: item[0])\n    result = [stdata[0]]\n    for item in stdata[1:]:\n        if result[-1][1] < item[1]:\n            result.append(item)\n        else:\n            break\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    v=[s for s in stdata if s[2]>0]\n    s=v[0]\n    for i in v[1:]:\n        if i[2]>s[2]:\n            s=i\n    s.append(s[2]+s[3])\n    s.append(s[2]+s[4])\n    return max(s)\n    \n    \n    \ndef find_min_max_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    for s in stdata:\n        agg[s[0]]=s[2]+s[3]+s[4]\n    return agg\n    \n    \n    \ndef find_min_max_min_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            agg[s[0]]=s[2]+s[3]+s[4]\n        else:\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[3])\n            agg[s[0]]=s[2]+s[3]+s[4]\n    return agg    \n    \n    \n    \ndef find_min_max_min_max_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            agg[s[0]]=s[2]+s[3]+s[4]\n        else:\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[3])\n            agg[s[0]]=s[2]+s[3]+s[4]\n    return agg    \n    \n    \n    \ndef find_min_max_min_max_avg_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            agg[s[0]]=s[2]+s[3]+s[4]\n        else:\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[3])\n            agg[s[0]]=s[2]+s[3]+s[4]\n    return agg\n    \n    \n    \ndef find_min_max_min_avg_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            agg[s[0]]=s[2]+s[3]+s[4]\n        else:\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[3])\n            agg[s[0]]=s[2]+s[3]+s[4]\n    return agg\n    \n    \n    \n    \ndef find_min_max_min_avg_min_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            agg[s[0]]=s[2]+s[3]+s[4]\n        else:\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[3])\n            agg[s[0]]=s[2]+s[3]+s[4]\n    return agg\n    \n    \n    \ndef find_min_max_min_avg_max_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            agg[s[0]]=s[2]+s[3]+s[4]\n        else:\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[3])\n            agg[s[0]]=s[2]+s[3]+s[4]\n    return agg    \n    \n    \n    \ndef find_min_max_min_avg_max_min_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            agg[s[0]]=s[2]+s[3]+s[4]\n        else:\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[3])\n            agg[s[0]]=s[2]+s[3]+s[4]\n    return agg\n    \n    \n    \ndef find_min_max_min_avg_min_max_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            agg[s[0]]=s[2]+s[3]+s[4]\n        else:\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[3])\n            agg[s[0]]=s[2]+s[3]+s[4]\n    return agg    \n    \n    \n    \ndef find_min_max_min_avg_min_avg_aggregate(stdata):\n    '''\n    Write a function that takes a list of tuples as input and returns a dictionary. \n    The keys of this dictionary are the name and the values are the aggregate.\n    '''\n    \n    agg={}\n    s=[]\n    for s in stdata:\n        if s[2]>0:\n            s.append(s[2]+s[3])\n            s.append(s[2]+s[4])\n            s.append(s[2]+s[5])\n        "
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Use a list comprehension for this\n    return max(tuple(map(lambda x: max(x), stdata)))/max(list(map(lambda x: max(x), stdata)))\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for (key, value) in stdata:\n        aggregate = max(aggregate, value)\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # List for storing the counts\n    counts = []\n    # Loop through the list of tuples\n    for tup in stdata:\n        # Check the type of the tuple\n        if isinstance(tup, tuple):\n            # If it's a tuple, calculate the max aggregated count\n            count = max_aggregate(tup)\n            # Append the aggregated count to the list\n            counts.append(count)\n        else:\n            # If it's not a tuple, keep the count as is\n            counts.append(tup)\n    # Return the maximum aggregate\n    return max(counts)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n    \ndef binary_seq_search(num, l, r):\n    if l > r:\n        return -1\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i & 1)\n    return total\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    from collections import Counter\n    c=0\n    for i in range(n):\n        c=c+bin(i)[2:]\n    return c\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n,s):\n        count = 0\n        for i in range(n):\n            count += ((s >> i) & 1)\n        return count\n    \n    def count_binary(n):\n        count = 0\n        for i in range(n):\n            if (i & 1):\n                count += 1\n        return count\n    \n    if (n == 0):\n        return 0\n    else:\n        return count(n,0) + count(n,n) + count_binary(n-1)\n    \n    \ndef binary_concat(a,b):\n    '''\n    Write a function to return a concatenation of two binary strings a and b.\n    '''\n    result = \"\"\n    carry = 0\n    \n    # Check if any of the bits are 1.\n    for i in range(len(b)):\n        if (b[i] & 1):\n            # Carry logic to the right.\n            carry = 1\n        else:\n            carry = 0\n        # Add the carry to the result.\n        result = (result + str(carry))\n    # Return the result.\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def recurse(i, j, k, n):\n        if (n <= k):\n            return 1\n        else:\n            return (i + j + recurse(i, j, k, n - k)) % (10**9+7)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 1:\n        return 1\n    \n    seq = bin(n)[2:]\n    \n    for i in range(1, len(seq)):\n        if seq[i] == '1':\n            seq[i] = '0'\n            # print('seq: ', seq)\n        else:\n            # print('seq[i]: ', seq)\n            seq[i] = '1'\n            # print('seq[i]: ', seq)\n            # print('\\n')\n        \n        print(seq)\n        print('\\n')\n    \n    sum_first = sum(seq)\n    # print('\\n sum: ', sum_first)\n    sum_last = sum(seq[::-1])\n    # print('sum_last: ', sum_last)\n    \n    # print('\\n sum_last: ', sum_last)\n    \n    # print('\\n sum_first: ', sum_first)\n    \n    sum_binary_first = sum_first // 2\n    \n    sum_binary_last = sum_last // 2\n    \n    print('sum_binary_first: ', sum_binary_first)\n    print('sum_binary_last: ', sum_binary_last)\n    \n    return (sum_binary_first + sum_binary_last) // 2\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 0: \n        return 0\n    else: \n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    print(bin(n)[2:][::-1].count('1'))\n    \ncount_binary_seq(20) \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Using for loop to calculate sum of first n bits \n    sum = 0 \n    for i in range(1, n+1): \n        sum += 2**i \n    # Using bitwise AND operator \n    ans = sum & n \n    # Using bitwise OR operator \n    ans = (sum | n) & n \n    # Return result \n    return ans \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # n = 1, 2, 3, 4, 5,..., 31\n    # x = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,..., 31\n    #..., 31, 32, 33, 34, 35, 36, 37, 38, 39,..., 31\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,..., 31\n    #..., 32, 33, 34, 35, 36, 37, 38, 39,..., 31\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if type(v) is dict:\n            depth += dict_depth(v)\n        elif type(v) is list:\n            depth += len(v) + dict_depth(v[0])\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    n = len(d.keys())\n    for k in range(n-1, -1, -1):\n        if d[k] == None:\n            n -= 1\n            continue\n        if d[k] == 'None':\n            n -= 1\n        else:\n            return n\n    return n\n    \ndef dict_keys(d):\n    '''\n    Write a function to return all the keys of a dictionary.\n    '''\n    return list(d.keys())\n    \ndef dict_values(d):\n    '''\n    Write a function to return all the values of a dictionary.\n    '''\n    return list(d.values())\n    \ndef dict_items(d):\n    '''\n    Write a function to return all the items of a dictionary.\n    '''\n    return list(d.items())\n    \ndef dict_equality(d1, d2):\n    '''\n    Write a function to return the value of a dictionary equal to another dictionary.\n    '''\n    for k in d1.keys():\n        if k in d2.keys():\n            if d1[k]!= d2[k]:\n                return False\n        else:\n            return False\n    return True\n    \ndef dict_nesting(d1, d2):\n    '''\n    Write a function to return the number of nested dictionaries.\n    '''\n    return len(list(d1.values())) - 1\n    \ndef dict_hash(d):\n    '''\n    Write a function to hash a dictionary.\n    '''\n    h = {}\n    for k, v in d.items():\n        if isinstance(v, dict):\n            h[k] = dict_hash(v)\n        else:\n            h[k] = hash(str(v))\n    return h"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 0\n    if type(d) is not dict:\n        return -1\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    if type(d) is not dict:\n        return 0\n    if d.__class__ is dict:\n        return 1 + dict_depth(d.keys())\n    return max(dict_depth(k) for k in d) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i, j in d.items():\n        if i > depth:\n            depth = i\n        if j > depth:\n            depth = j\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return d['_depth']\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    if isinstance(d, dict):\n        return 0\n    else:\n        depth = 0\n        for key in d:\n            depth += dict_depth(d[key])\n        return depth\n    "
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(dict_depth(d[k]), dict_depth(d[k+1]) for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict: return 0\n    depth = 1\n    for k in d:\n        depth = max(depth, dict_depth(d[k]))\n    return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # (1) Construct array\n    n = len(arr)\n    if n <= 0 :\n        return -1\n    ranges = sorted(ranges)\n    rotations = sorted(rotations)\n    # (2) Construct the ranges and rotations\n    mid_index = int(n/2)\n    mid_value = arr[mid_index]\n    ranges_start = ranges[mid_index]\n    ranges_end = ranges[mid_index + 1]\n    rotations_start = rotations[mid_index]\n    rotations_end = rotations[mid_index + 1]\n    # (3) Check whether the index is in the range\n    if ranges_start >= ranges_end or rotations_start >= rotations_end :\n        return -1\n    # (4) Find the index where the mid point is\n    # (5) Find the mid point index and the range to start\n    if ranges_start < mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    # (6) Check whether the mid point is on the left side\n    # (7) Find the mid point index and the range to end\n    if ranges_start < mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    # (8) Find the mid point index and the range to start\n    elif ranges_start > mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    # (9) Check whether the mid point is on the right side\n    # (10) Find the mid point index and the range to end\n    if ranges_start < mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start == mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start == mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start == mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    # (11) Check whether the mid point is on the right side\n    # (12) Find the mid point index and the range to start\n    if ranges_start > mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    # (13) Check whether the mid point is on the left side\n    # (14) Find the mid point index and the range to end\n    if ranges_start < mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    # (15) Check whether the mid point is on the right side\n    # (16) Find the mid point index and the range to end\n    if ranges_start < mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start == mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start == mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start == mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    # (17) Check whether the mid point is on the left side\n    # (18) Find the mid point index and the range to end\n    if ranges_start > mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    # (19) Check whether the mid point is on the right side\n    # (20) Find the mid point index and the range to end\n    if ranges_start > mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start > mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    # (21) Check whether the mid point is on the left side\n    # (22) Find the mid point index and the range to end\n    if ranges_start < mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start > mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start < mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_value and rotations_start == mid_value :\n        return (mid_index + ranges_start)\n    elif ranges_start < mid_valu"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges[index]) :\n        for j in range(len(arr)):\n            if arr[j] == ranges[index] :\n                return arr[j]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    element = -1\n    for i in range(len(ranges)) :\n        if ranges[i][0] < r and ranges[i][1] > r and (ranges[i][0] < index < ranges[i][1]) :\n            element = arr[index]\n            index = ranges[i][1] - ranges[i][0]\n            break\n    return element,index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(rotations>len(ranges)):\n        return arr[index]\n    if(len(arr[index])>2):\n        for i in range(0,len(arr)-1,2):\n            if(arr[i]!=arr[i+1]):\n                index=i+1\n                break\n    \n    else:\n        index=index+1\n    \n    for i in range(ranges[rotations][0],ranges[rotations][1]):\n        if(arr[i]==arr[i+1]):\n            index=i\n            break\n    \n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index+ranges[0]:index+ranges[1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try : \n        for x in range(0,len(arr),1) :\n            if rotations > x :\n                rotations = rotations - 1\n                index = index + 1\n            else :\n                index = index + 1\n                rotations = rotations + 1\n                break\n    except :\n        pass\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) <= 0 or len(rotations) <= 0 or index <= 0 :\n        return -1\n    else :\n        \n        # if rotated array is sorted\n        if (arr[index-1] <= arr[index]) :\n            return arr[index-1]\n        else :\n            return find_Element(arr,ranges[:index-1] + ranges[index+1:],rotations[:len(ranges)-1]+rotations[len(ranges)+1:],index-1)\n        \n        \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(ranges[0]==ranges[1] and ranges[1]!=ranges[2] and ranges[1]!=ranges[3]):\n        return arr[index]\n    \n    if(ranges[0]<ranges[1] and ranges[1]<ranges[2] and ranges[2]<ranges[3]):\n        if(rotations==1):\n            if(index==(len(arr)-1)):\n                return arr[index]\n            return arr[index+1]\n        if(rotations==2):\n            if(index==(len(arr)-2)):\n                return arr[index+2]\n            return arr[index+1]\n        if(rotations==3):\n            if(index==(len(arr)-3)):\n                return arr[index+3]\n            return arr[index+2]\n        \n    if(ranges[0]<ranges[1] and ranges[1]>ranges[2] and ranges[2]>ranges[3]):\n        if(rotations==1):\n            if(index==0):\n                return arr[index]\n            if(index==(len(arr)-1)):\n                return arr[index-1]\n            return arr[index-1]\n        if(rotations==2):\n            if(index==0):\n                return arr[index]\n            if(index==(len(arr)-2)):\n                return arr[index+1]\n            return arr[index+1]\n        if(rotations==3):\n            if(index==0):\n                return arr[index]\n            if(index==(len(arr)-3)):\n                return arr[index+2]\n            return arr[index+2]\n    return 'Not found'\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    temp_arr = arr[:]\n    if len(ranges)==len(rotations) and len(ranges)==len(rotations[0]):\n        for i in range(len(ranges)):\n            for j in range(len(ranges[0])):\n                if ranges[i][j]<=index and index<ranges[i][j] and index<=ranges[i][j]<=index+len(temp_arr):\n                    temp_arr.pop(index)\n                    temp_arr.insert(index,arr[index])\n                    break\n    if len(ranges)>len(rotations) and len(ranges)>len(rotations[0]):\n        for i in range(len(ranges)):\n            for j in range(len(rotations)):\n                if ranges[i][j]<=index and index<ranges[i][j] and index<=ranges[i][j]<=index+len(temp_arr):\n                    temp_arr.pop(index)\n                    temp_arr.insert(index,arr[index])\n                    break\n    if len(ranges)==len(rotations) and len(ranges)==len(rotations[0]):\n        for i in range(len(ranges)):\n            for j in range(len(ranges[0])):\n                if ranges[i][j]<=index and index<ranges[i][j] and index<=ranges[i][j]<=index+len(temp_arr):\n                    temp_arr.pop(index)\n                    temp_arr.insert(index,arr[index])\n                    break\n    for i in range(len(rotations)):\n        temp_arr.pop(index)\n        temp_arr.insert(index,arr[index])\n    return temp_arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr)\n    #print(ranges)\n    #print(rotations)\n    #print(index)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word = words[0]\n    if word[0] == 'p':\n        for i in words[1:]:\n            if i[0] == 'p':\n                return word, i\n    return word, None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # TODO: Complete this function\n    '''\n    Your code here\n    '''\n    x = []\n    for i in words:\n        if i.startswith('p'):\n            x.append(i)\n    return x\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = words[0][0]\n    n = words[0][1:]\n    return p,n\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [i for i in words if i[0] == 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = [word for word in words if word[:2] == 'p']\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0]=='p':\n            return i[1:], i[:1]\n    return '',''\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # words = words.split()\n    # return words[0], words[1]\n    if len(words) > 1 and words[0][0] == 'p':\n        return words[0][1:], words[1]\n    return words[0]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    test_word = []\n    test_word.append(\"p\")\n    test_word.append(words[0])\n    test_word.append(words[1][:len(words[0])-1])\n    return test_word\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    test_word = []\n    test_word.append(\"p\")\n    test_word.append(words[0])\n    test_word.append(words[1][:len(words[0])-1])\n    return test_word\ndef valid_p(word):\n    '''\n    Check if the string is a valid palindrome.\n    '''\n    return word == word[::-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    x = re.search(r'[p]',words)\n    if x is not None:\n        return words[0:x.start()],words[x.start()+1:]\n    return words,None\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    prev_sum = float('-inf')\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index] > 0 and (index == k - 1 or (index + 1) < n):\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n):\n        return a[index]\n    elif (index < n):\n        return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n or a[index] < a[index + 1]:\n        return a[index + 1]\n    \n    if index == 0 or a[index] == a[index + 1]:\n        return a[index + 1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    if n == 0 or k == 0 or index == 0:\n        return 0\n    for i in range(index, n):\n        if a[i] <= a[index] and a[i] < a[i + 1] and index < i + k:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if there are only one element, return it\n    if index == n:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return sum(a[:k])\n    if k == index:\n        return sum(a[:k]) + max(a[k:index])\n    if k < index:\n        return -1\n    if k >= index:\n        return max_sum_increasing_subseq(a, n, index, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    a = sorted(a)\n    i = index\n    j = index\n    k = k % n\n    while i >= 0:\n        # find the prefix of a[i]\n        if j < n and a[i] > a[j]:\n            a[j] = a[i]\n            j += 1\n            i -= 1\n        elif j < n and a[j] > a[i]:\n            # we have an increasing subsequence of a[j + 1:i]\n            a[i] = a[j + 1]\n            j += 1\n        else:\n            break\n    a[i] = a[n]\n    # find the kth element from the subsequence\n    j = index + 1\n    k = k % n\n    while j < n and k >= 0:\n        # find the prefix of a[j]\n        if j < n and a[j] > a[k]:\n            a[j] = a[k]\n            k += 1\n            j += 1\n        elif j < n and a[j] > a[i]:\n            # we have an increasing subsequence of a[j + 1:i]\n            a[i] = a[j + 1]\n            j += 1\n        else:\n            break\n    a[i] = a[n]\n    # backtrack\n    j = index + 1\n    while j < n:\n        # find the prefix of a[j]\n        if j < n and a[j] > a[i]:\n            a[j] = a[i]\n            i += 1\n        elif j < n and a[j] > a[j + 1]:\n            # we have an increasing subsequence of a[j + 1:i]\n            a[i] = a[j + 1]\n            j += 1\n        else:\n            break\n    a[i] = a[n]\n    return max(a)\n    #print(a)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index] > k:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    if index == n:\n        return a[index]\n    if k >= index:\n        return max(a[index] + min(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                                    max_sum_increasing_subseq(a, n, index + 1, k))\n                , a[index] + min(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                                    max_sum_increasing_subseq(a, n, index + 1, k)))\n    return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if n == 0 or index == 0 or k == 0:\n        return a[index]\n    if index == n:\n        return a[index - k]\n    if a[index] > a[index - k]:\n        return max_sum_increasing_subseq(a, n-1, index, k)\n    if a[index-k] < a[index]:\n        return max_sum_increasing_subseq(a, n-1, index-k, k)\n    return a[index] + max_sum_increasing_subseq(a, n-1, index-k-1, k)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return [x[:m]+'.'+x[m+1:] for x in tuplex[:n]]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return tuplex\n    else:\n        return (tuplex[:m] + (m+1,)*n)\n    pass\ndef colon_flattu(flattu,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return flattu\n    else:\n        return (flattu[:m] + (m+1,)*n)\n    pass\ndef colon_flatt(flattu,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return flattu\n    else:\n        return (flattu[:m] + (m+1,)*n)\n    pass\ndef sum_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return (tuplex1[0][1]+tuplex2[0][1],)\n        else:\n            return (tuplex1[0][1]+tuplex2[0][1],) + sum_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef get_sum_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1]+get_sum_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef cross(tuplex1,tuplex2):\n    '''\n    Write a function to cross two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return (tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1])\n        else:\n            return (tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]) + cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef get_cross_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to cross two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + get_cross_tuplex(tuplex1[1:],tuplex2[1:])\n    pass\ndef union(tuplex1,tuplex2):\n    '''\n    Write a function to union two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + union(tuplex1[1:],tuplex2[1:])\n    pass\ndef intersection(tuplex1,tuplex2):\n    '''\n    Write a function to intersection two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + intersection(tuplex1[1:],tuplex2[1:])\n    pass\ndef left_cross(tuplex1,tuplex2):\n    '''\n    Write a function to left a cross of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + left_cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef right_cross(tuplex1,tuplex2):\n    '''\n    Write a function to right a cross of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return None\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1]\n        else:\n            return tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1],tuplex1[0][1]+tuplex2[0][1] + right_cross(tuplex1[1:],tuplex2[1:])\n    pass\ndef sum_left(tuplex1,tuplex2):\n    '''\n    Write a function to compute the sum of two tuples.\n    '''\n    if len(tuplex1)==0 or len(tuplex2)==0:\n        return 0\n    else:\n        if tuplex1[0][0]==tuplex2[0][0]:\n            retur"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # your code here\n    return tuplex[m+1:]\n    "
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    i=0\n    j=0\n    k=0\n    while i < n:\n        if tuplex[i] == m[j] and tuplex[i]!= m[k]:\n            tuplex[i] = m[j]\n            i+=1\n            j+=1\n        else:\n            i+=1\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def get_colon(tuplex):\n        x,y=tuplex\n        colon=[]\n        for i in range(0,len(y)):\n            if y[i] in x:\n                colon.append(x[y[i]])\n            else:\n                colon.append(y[i])\n        return tuple(colon)\n    return get_colon(tuplex)\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def get_colon(tuplex):\n        return tuplex[::-1]\n    return get_colon(tuplex)\ndef colon_tuple_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def get_colon(tuplex):\n        return tuple(sorted(tuplex[::-1]))\n    return get_colon(tuplex)\ndef colon_list(tuplex,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    def get_colon(tuplex):\n        return tuplex[::-1]\n    return get_colon(tuplex)\ndef colon_list_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    def get_colon(tuplex):\n        return sorted(tuplex[::-1],reverse=True)\n    return get_colon(tuplex)\ndef colon_set(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return tuplex[::-1]\n    return get_colon(tuplex)\ndef colon_set_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return sorted(tuplex[::-1],reverse=True)\n    return get_colon(tuplex)\ndef colon_dict(tuplex,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    def get_colon(tuplex):\n        d=dict(zip(tuplex[::-1],range(len(tuplex))))\n        for i in d.keys():\n            d[i]=tuplex[d[i]]\n        return tuple(d.keys())\n    return get_colon(tuplex)\ndef colon_dict_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    def get_colon(tuplex):\n        d=dict(zip(tuplex[::-1],range(len(tuplex))))\n        for i in d.keys():\n            d[i]=tuplex[d[i]]\n        return tuple(d.values())\n    return get_colon(tuplex)\ndef colon_set_dict(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        d=dict(zip(tuplex[::-1],range(len(tuplex))))\n        for i in d.keys():\n            d[i]=tuplex[d[i]]\n        return tuple(d.values())\n    return get_colon(tuplex)\ndef colon_set_dict_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        d=dict(zip(tuplex[::-1],range(len(tuplex))))\n        for i in d.keys():\n            d[i]=tuplex[d[i]]\n        return tuple(d.values())\n    return get_colon(tuplex)\ndef colon_set_list(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return tuple(sorted(tuplex[::-1],reverse=True))\n    return get_colon(tuplex)\ndef colon_set_list_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return sorted(tuplex[::-1],reverse=True)\n    return get_colon(tuplex)\ndef colon_dict_set(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return tuple(sorted(tuplex[::-1],reverse=True))\n    return get_colon(tuplex)\ndef colon_dict_set_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return sorted(tuplex[::-1],reverse=True)\n    return get_colon(tuplex)\ndef colon_list_set(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return tuple(sorted(tuplex[::-1],reverse=True))\n    return get_colon(tuplex)\ndef colon_list_set_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return sorted(tuplex[::-1],reverse=True)\n    return get_colon(tuplex)\ndef colon_set_set(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return tuple(sorted(tuplex[::-1],reverse=True))\n    return get_colon(tuplex)\ndef colon_set_set_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return sorted(tuplex[::-1],reverse=True)\n    return get_colon(tuplex)\ndef colon_set_set_dict(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return tuple(sorted(tuplex[::-1],reverse=True))\n    return get_colon(tuplex)\ndef colon_set_set_dict_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return sorted(tuplex[::-1],reverse=True)\n    return get_colon(tuplex)\ndef colon_dict_set_dict(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return tuple(sorted(tuplex[::-1],reverse=True))\n    return get_colon(tuplex)\ndef colon_dict_set_dict_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    def get_colon(tuplex):\n        return sorted(tuplex[::-1],reverse=True)\n    return get_colon(tuplex)\ndef colon_list_set_dict_set(tuplex,m"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) < m + n:\n        return None\n    else:\n        return tuple(tuplex[m:m+n])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s = deepcopy(tuplex)\n    m = m - len(s)\n    n = n - len(s)\n    if n < 0:\n        return None\n    s[m+n] = s[m] + s[n]\n    s[m+n] = '$'\n    return s\n    \ndef colon_tuplex_add_counter(tuplex,m,n):\n    '''\n    Add the counter to a tuple\n    '''\n    s = deepcopy(tuplex)\n    m = m - len(s)\n    n = n - len(s)\n    if n < 0:\n        return None\n    s[m+n] = s[m] + '$'\n    s[m+n] = '$'\n    return s\n    \ndef is_valid(tuplex,m,n,i,j,n_m,n_n,n_n_m,m_m,m_n,m_n_m,m_m_m):\n    '''\n    A valid function that returns True if the tuple is valid and false otherwise.\n    '''\n    m_n = m_n - len(tuplex[m+n])\n    if i >= m_m or j >= n_n or tuplex[i][j] == '.':\n        return False\n    if tuplex[i][j] == '$':\n        if m_n < 0:\n            return False\n        n_m = n_m - len(tuplex[m_m+n])\n        if n_m < 0:\n            return False\n        m_n = m_n - len(tuplex[m_n+n])\n        if n_n < 0:\n            return False\n    if m_n < 0:\n        return False\n    if m_n < 0 or m_n < 0 or m_n < 0:\n        return False\n    if n_m < 0:\n        return False\n    if n_m < 0 or n_m < 0 or n_m < 0:\n        return False\n    if m_n < 0 or m_n < 0 or m_n < 0:\n        return False\n    if n_m < 0 or m_m < 0 or m_m < 0:\n        return False\n    if m_m < 0 or m_m < 0 or m_m < 0:\n        return False\n    if n_n < 0 or m_n < 0 or n_n < 0:\n        return False\n    if m_n < 0 or m_n < 0 or n_n < 0:\n        return False\n    if n_n < 0 or m_n < 0 or n_n < 0:\n        return False\n    return True\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\ndef colon_list(list,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    return list[m:n]\ndef colon_dict(dict,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    return dict[m:n]\ndef colon_set(set,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    return set[m:n]\ndef row_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    return tuplex[:m]\ndef row_list(list,m,n):\n    '''\n    Write a function to get a row of a list.\n    '''\n    return list[:m]\ndef row_dict(dict,m,n):\n    '''\n    Write a function to get a row of a dictionary.\n    '''\n    return dict[:m]\ndef row_set(set,m,n):\n    '''\n    Write a function to get a row of a set.\n    '''\n    return set[:m]\ndef col_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    return tuplex[m:]\ndef col_list(list,m,n):\n    '''\n    Write a function to get a column of a list.\n    '''\n    return list[m:]\ndef col_dict(dict,m,n):\n    '''\n    Write a function to get a column of a dictionary.\n    '''\n    return dict[m:n]\ndef col_set(set,m,n):\n    '''\n    Write a function to get a column of a set.\n    '''\n    return set[m:n]\ndef count_column(list,m,n):\n    '''\n    Write a function to count the number of columns of a list.\n    '''\n    return len(list[:m])\ndef count_columns(tuplex,m,n):\n    '''\n    Write a function to count the number of columns of a tuple.\n    '''\n    return len(tuplex[:m])\ndef is_tuplex(list,m,n):\n    '''\n    Write a function to check if a list is a tuple.\n    '''\n    return len(list[:m])==len(list[m:n])\ndef is_list(list,m,n):\n    '''\n    Write a function to check if a list is a list.\n    '''\n    return len(list)==len(list[m:n])\ndef is_dict(dict,m,n):\n    '''\n    Write a function to check if a dictionary is a dictionary.\n    '''\n    return len(dict)==len(dict[m:n])\ndef is_set(set,m,n):\n    '''\n    Write a function to check if a set is a set.\n    '''\n    return len(set)==len(set[m:n])\ndef get_list(list,m,n):\n    '''\n    Write a function to get a list.\n    '''\n    return list[:m]\ndef get_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple.\n    '''\n    return tuplex[m:]\ndef get_dict(dict,m,n):\n    '''\n    Write a function to get a dictionary.\n    '''\n    return dict[m:]\ndef get_set(set,m,n):\n    '''\n    Write a function to get a set.\n    '''\n    return set[m:]\ndef get_col_list(list,m,n):\n    '''\n    Write a function to get a list of columns of a list.\n    '''\n    return list[m:n]\ndef get_col_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a list of columns of a tuple.\n    '''\n    return tuplex[m:n]\ndef get_col_dict(dict,m,n):\n    '''\n    Write a function to get a list of columns of a dictionary.\n    '''\n    return dict[m:n]\ndef get_col_set(set,m,n):\n    '''\n    Write a function to get a list of columns of a set.\n    '''\n    return set[m:n]\ndef get_count_col(list,m,n):\n    '''\n    Write a function to get the number of columns of a list.\n    '''\n    return len(list[:m])\ndef get_count_cols(tuplex,m,n):\n    '''\n    Write a function to get the number of columns of a tuple.\n    '''\n    return len(tuplex[:m])\ndef get_count_cols_set(set,m,n):\n    '''\n    Write a function to get the number of columns of a set.\n    '''\n    return len(set[m:n])\ndef get_count_rows(list,m,n):\n    '''\n    Write a function to get the number of rows of a list.\n    '''\n    return len(list[m:n])\ndef get_count_rows_list(list,m,n):\n    '''\n    Write a function to get the number of rows of a tuple.\n    '''\n    return len(list[m:n])\ndef get_count_rows_dict(dict,m,n):\n    '''\n    Write a function to get the number of rows of a dictionary.\n    '''\n    return len(dict[m:n])\ndef get_count_rows_set(set,m,n):\n    '''\n    Write a function to get the number of rows of a set.\n    '''\n    return len(set[m:n])\ndef get_count_rows_list_set(list,m,n):\n    '''\n    Write a function to get the number of rows of a list.\n    '''\n    return len(list[m:n])\ndef get_count_rows_list_dict(dict,m,n):\n    '''\n    Write a function to get the number of rows of a dictionary.\n    '''\n    return len(dict[m:n])\ndef get_count_rows_list_set_set(list,m,n):\n    '''\n    Write a function to get the number of rows of a set.\n    '''\n    return len(list[m:n])\ndef get_count_rows_dict_dict(dict,m,n):\n    '''\n    Write a function to get the number of rows of a dictionary.\n    '''\n    return len(dict[m:n])\ndef get_count_rows_dict_set(set,m,n):\n    '''\n    Write a function to get the number of rows of a set.\n    '''\n    return len(set[m:n])\ndef get_count_rows_set_list(list,m,n):\n    '''\n    Write a function to get the number of rows of a list.\n    '''\n    return len(list[m:n])\ndef get_count_rows_set_list_set(list,m,n):\n    '''\n    Write a function to get the number of rows of a set.\n    '''\n    return len(list[m:n])\ndef get_count_rows_dict_list(dict,m,n):\n    '''\n    Write a function to get the number of rows of a dictionary.\n    '''\n    return len(dict[m:n])\ndef get_count_rows_dict_list_set(set,m,n):\n    '''\n    Write a function to get the number of rows of a set.\n    '''\n    return len(set[m:n])\ndef get_count_rows_dict_dict_list(dict,m,n):\n    '''\n    Write a function to get the number of rows of a dictionary.\n    '''\n    return len(dict[m:n])\ndef get_count_rows_dic"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(0,len(tuplex)):\n        colon.append(tuplex[i][n])\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[:m],tuplex[m:n])\ndef xor_tuple(a,b):\n    '''\n    Write a function to xor two tuples.\n    '''\n    return(a[1]^b[1])\ndef mod_exp(a,b,p):\n    '''\n    Write a function to calculate the modulo exponents of a and b\n    '''\n    return pow(a,b,p)\ndef add(a,b):\n    '''\n    Write a function to add two tuples.\n    '''\n    return (a[0]+b[0],a[1]+b[1])\ndef sub(a,b):\n    '''\n    Write a function to subtract two tuples.\n    '''\n    return (a[0]-b[0],a[1]-b[1])\ndef mul(a,b):\n    '''\n    Write a function to multiply two tuples.\n    '''\n    return (a[0]*b[0],a[1]*b[1])\ndef div(a,b):\n    '''\n    Write a function to divide two tuples.\n    '''\n    return (a[0]/b[0],a[1]/b[1])\ndef pow(a,b):\n    '''\n    Write a function to calculate a and b power.\n    '''\n    return pow(a[0]*b[0],a[1]+b[1])\ndef neg(a):\n    '''\n    Write a function to negate the argument.\n    '''\n    return (a[0]*-1,a[1])\ndef mul_matrix(a,b):\n    '''\n    Write a function to multiply a matrix with b.\n    '''\n    return(a[0]*b[0][0],a[1]*b[1][0],a[0]*b[0][1],a[1]*b[1][1])\ndef transpose(a):\n    '''\n    Write a function to calculate the transpose of a matrix.\n    '''\n    return (a[1][1],a[0][1])\ndef matrix_inverse(a):\n    '''\n    Write a function to calculate the inverse of a matrix.\n    '''\n    return(matrix_transpose(mul_matrix(a,[1,0],)))\ndef matrix_transpose(a):\n    '''\n    Write a function to transpose a matrix.\n    '''\n    return(a[1][1])\ndef matrix_scalar(a):\n    '''\n    Write a function to get a scalar.\n    '''\n    return a[0]\ndef matrix_scalar_inverse(a):\n    '''\n    Write a function to get a scalar inverse.\n    '''\n    return(matrix_transpose(mul_matrix(a,[1,1],)))\ndef matrix_product(a,b):\n    '''\n    Write a function to get the matrix product.\n    '''\n    return(matrix_transpose(mul_matrix(a,[1,1],b)))\ndef matrix_product_inverse(a,b):\n    '''\n    Write a function to get the inverse matrix product.\n    '''\n    return(matrix_transpose(mul_matrix(a,[1,1],b)))\ndef matrix_multiply(a,b):\n    '''\n    Write a function to multiply two matrices.\n    '''\n    return(matrix_transpose(mul_matrix(a,[1,1],b)))\ndef matrix_multiply_inverse(a,b):\n    '''\n    Write a function to multiply two matrices in inverse.\n    '''\n    return(matrix_transpose(mul_matrix(a,[1,1],b)))\ndef matrix_inverse_multiply(a,b):\n    '''\n    Write a function to multiply a matrix in inverse.\n    '''\n    return(matrix_transpose(mul_matrix(a,[1,1],b)))\ndef matrix_inverse_multiply_inverse(a,b):\n    '''\n    Write a function to multiply a matrix in inverse and inverse\n    of a matrix in inverse.\n    '''\n    return(matrix_transpose(mul_matrix(a,[1,1],b)))\ndef matrix_multiply_matrix(a,b):\n    '''\n    Write a function to multiply a matrix with b.\n    '''\n    return(matrix_transpose(mul_matrix(a,b)))\ndef matrix_multiply_matrix_inverse(a,b):\n    '''\n    Write a function to multiply a matrix with b in inverse.\n    '''\n    return(matrix_transpose(mul_matrix(a,b)))\ndef matrix_add_matrix(a,b):\n    '''\n    Write a function to add a matrix to another matrix.\n    '''\n    return(matrix_transpose(matrix_scalar_inverse(mul_matrix(a,b))))\ndef matrix_add_matrix_inverse(a,b):\n    '''\n    Write a function to add a matrix to another matrix in inverse.\n    '''\n    return(matrix_transpose(matrix_scalar_inverse(matrix_scalar_inverse(a))))\ndef matrix_transpose_matrix_multiply(a,b):\n    '''\n    Write a function to transpose a matrix multiply.\n    '''\n    return(matrix_transpose(matrix_scalar_inverse(mul_matrix(a,b))))\ndef matrix_scalar_matrix_multiply(a,b):\n    '''\n    Write a function to get a scalar multiply a matrix multiply.\n    '''\n    return(matrix_scalar_inverse(matrix_scalar_inverse(mul_matrix(a,b))))\ndef matrix_add_matrix_scalar(a,b):\n    '''\n    Write a function to add a matrix to another matrix and get a scalar multiply.\n    '''\n    return(matrix_scalar_inverse(matrix_scalar_inverse(matrix_scalar_inverse(a,b))))\ndef matrix_add_matrix_scalar_inverse(a,b):\n    '''\n    Write a function to add a matrix to another matrix and get a scalar inverse.\n    '''\n    return(matrix_scalar_inverse(matrix_scalar_inverse(matrix_scalar_inverse(a,b))))\ndef matrix_transpose_matrix_scalar(a):\n    '''\n    Write a function to transpose a matrix and get a scalar multiply.\n    '''\n    return(matrix_transpose(matrix_scalar_inverse(matrix_scalar_inverse(a))))\ndef matrix_scalar_matrix_multiply(a,b):\n    '''\n    Write a function to get a scalar multiply a matrix multiply.\n    '''\n    return(matrix_scalar_inverse(matrix_scalar_inverse(matrix_scalar_inverse(a,b))))\ndef matrix_scalar_matrix_multiply_inverse(a,b):\n    '''\n    Write a function to get a scalar multiply inverse of a matrix multiply\n    '''\n    return(matrix_scalar_inverse(matrix_scalar_inverse(matrix_scalar_inverse(a,b))))\ndef matrix_multiply_matrix_matrix(a,b):\n    '''\n    Write a function to multiply a matrix with a matrix.\n    '''\n    return(matrix_transpose(matrix_scalar_inverse(matrix_scalar_inverse(matrix_scalar_inverse(matrix_scalar_inverse(a,b),b)))\n    ))\ndef matrix_multiply_matrix_matrix_inverse(a,b):\n    '''\n    Write a function to multiply a matrix with a matrix in inverse.\n    '''\n    return(matrix_scalar"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Your code here\n    product = 1\n    for i in range(N):\n        for j in range(N):\n            if nums1[i] * nums2[j] == 0:\n                product *= nums1[i]\n            elif nums1[i] * nums2[j] > 0:\n                product = nums1[i] * nums2[j]\n    return product\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    l = len(nums1)\n    m = len(nums2)\n    print(l, m)\n    dp = [[0]*(N+1) for i in range(l+1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N+1):\n        for j in range(l+1):\n            if j >= m:\n                break\n            if nums2[j] > nums1[i-1]:\n                dp[j+1][i] = (dp[j][i] * dp[j][i-1] % 1000000000)\n            else:\n                dp[j+1][i] = (dp[j][i] * nums1[j-1] % 1000000000)\n    return dp[N][m] % 1000000000\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    i = 0\n    while (i < len(nums1)):\n        while (i < len(nums2) and (nums1[i] * nums2[i] == N)):\n            i += 1\n        if i == len(nums2):\n            break\n        \n        if (i!= len(nums2) - 1):\n            products.append(nums1[i] * nums2[i+1])\n        else:\n            products.append(nums1[i])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        bigger_list = nums1\n        smaller_list = nums2\n    else:\n        bigger_list = nums2\n        smaller_list = nums1\n    res = []\n    count = 1\n    for i in range(len(smaller_list)):\n        for j in range(len(bigger_list)):\n            if smaller_list[i] == bigger_list[j]:\n                count += 1\n                res.append(count)\n                break\n        else:\n            count = 1\n        if count > N:\n            break\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < len(nums2):\n        for i in range(0, len(nums2)):\n            nums2[i] = int(nums2[i])\n        if len(nums1) > len(nums2):\n            for j in range(0, len(nums1)):\n                nums1[j] = int(nums1[j])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    lens = len(nums1)\n    sums = [sum(x) for x in zip(*nums1)]\n    elements = [int(e) for e in sums]\n    product = 1\n    for i in range(0, lens):\n        product *= elements[i]\n    ans = product/N\n    return ans\n    \ndef large_product_2(nums1, nums2, N):\n    '''\n    Write a function that takes two lists of numbers and returns the product of the two lists, as a string.\n    '''\n    lens = len(nums1)\n    sums = [sum(x) for x in zip(*nums1)]\n    elements = [int(e) for e in sums]\n    product = 1\n    for i in range(0, lens):\n        product *= elements[i]\n    return product\n    \ndef large_product_3(nums1, nums2, N):\n    '''\n    Write a function that takes two lists of numbers and returns the product of the two lists, as a string.\n    '''\n    lens = len(nums1)\n    sums = [sum(x) for x in zip(*nums1)]\n    elements = [int(e) for e in sums]\n    product = 1\n    for i in range(0, lens):\n        product *= elements[i]\n    return product\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = [nums1[i] for i in range(len(nums1))]\n    nums2 = [nums2[i] for i in range(len(nums2))]\n    return max([large_product(nums1, nums2, N-1) * nums1[i] for i in range(len(nums1))])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    num1 = sorted(nums1)\n    num2 = sorted(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    num_lst = []\n    for i in nums1:\n        num_lst.append(i)\n    for j in nums2:\n        num_lst.append(j)\n    if len(num_lst) == 0:\n        return None\n    product = 1\n    for i in range(N-1):\n        product *= num_lst[i]\n    return product\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Take a copy of the lists and put it in a variable\n    factors = []\n    for i in range(len(nums1)):\n        factors.append(nums1[i])\n        factors.append(nums2[i])\n    \n    # Use the built in function to compute the product\n    m = N\n    for i in range(N):\n        if factors[i] % m!= 0:\n            m = factors[i] % m\n        factors[i] = factors[i] / m\n    \n    # Return the product\n    return int(sum(factors))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a = a+b\n    b = a-b\n    c = a*b\n    d = a/b\n    return max(c,d)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    c=a+b\n    return c\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return b\n    elif b>a:\n        return a\n    else:\n        return 'None'\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a == b:\n        return a\n    if a < b:\n        return b\n    if b < a:\n        return a\n    \n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a == b:\n        return a\n    if a > b:\n        return b\n    if b > a:\n        return a\n        \n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (b<a):\n        print(\"the maximum is\",a)\n    else:\n        print(\"the maximum is\",b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n    return a if a > b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (list(str1))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = ()\n    for character in str1:\n        if character not in result:\n            result += character\n    return result\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (ord(c) for c in str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = tuple(str1)\n    return tup\n    \ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    string = \"\"\n    for i in tup:\n        string += i\n    return string\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if num < 10:\n        return True\n    elif num < 100:\n        return False\n    else:\n        #check digits are in reverse order\n        if num % 10!= 0:\n            return False\n        \n        rev_num = num//10\n        #rev_num does not need to be converted to a number\n        #since all digits have been converted to a number\n        for i in range(rev_num):\n            num = num*10 + i\n            if num < 10:\n                return False\n            else:\n                return True\n    \n    \ndef is_palindrome_v1(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if num < 10:\n        return True\n    elif num < 100:\n        return False\n    else:\n        rev_num = num//10\n        rev_num2 = rev_num*10\n        rev_num3 = rev_num2\n        \n        for i in range(rev_num):\n            num = num*10 + i\n            if num < 10:\n                return False\n            else:\n                return True\n    \ndef is_palindrome_v2(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    rev_num = num//10\n    rev_num2 = rev_num*10\n    rev_num3 = rev_num2\n    \n    if num < 10:\n        return True\n    elif num < 100:\n        return False\n    else:\n        for i in range(rev_num,rev_num3):\n            num = num*10 + i\n            if num < 10:\n                return False\n            else:\n                return True\n            \ndef is_palindrome_v3(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if num < 10:\n        return True\n    elif num < 100:\n        return False\n    else:\n        rev_num = num//10\n        rev_num2 = rev_num*10\n        rev_num3 = rev_num2\n        \n        rev_num4 = rev_num3\n        for i in range(rev_num,rev_num4):\n            num = num*10 + i\n            if num < 10:\n                return False\n            else:\n                return True\n            \n    \ndef test_is_palindrome(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v1(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v1(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v2(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v2(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v3(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v3(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v4(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v4(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v5(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v5(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v6(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v6(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v7(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v7(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v8(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v8(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v9(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v9(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v10(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v10(num):\n        return True\n    else:\n        return False\n    \n    \ndef test_is_palindrome_v11(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v11(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v12(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v12(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v13(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v13(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v14(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v14(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v15(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v15(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v16(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v16(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v17(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v17(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v18(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if is_palindrome_v18(num):\n        return True\n    else:\n        return False\n    \ndef test_is_palindrome_v19(num):\n    '"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_l = []\n    for i in str1:\n        if i not in 'abcdefghijklmnopqrstuvwxyz':\n            return str1\n        str_l.append(i)\n    return tuple(str_l)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = ()\n    for c in str1:\n        res = res + (c,)\n    return res\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1.split())\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = []\n    for char in str1:\n        char_list.append(char)\n    return tuple(char_list)\n    \ndef print_tuple(tup):\n    '''\n    Write a function to print a given tuple in a readable format.\n    '''\n    for i, char in enumerate(tup):\n        if i == len(tup)-1:\n            print(char, end=' ')\n        else:\n            print(char, end=' ')\n    print()\n    \ndef main():\n    str1 = input('Enter a string: ')\n    print(string_to_tuple(str1))\n    print(tuple(str1))\n    print_tuple(string_to_tuple(str1))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # TODO: write code here\n    #base = n & 0b10000000\n    #print(base)\n    #return base\n    #\n    #print(n)\n    #print(bin(n))\n    #print(bin(n)[2:])\n    #print(bin(n)[0:])\n    #print(bin(n)[2:0])\n    \n    base = n & 0b11000000\n    print(base)\n    return base\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 2:\n        return n\n    else:\n        return n | 2\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n|0x80\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n == 0): \n        n = 1 \n    return n \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n & 1) == 0:\n        n = n >> 1\n    else:\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 0x01: \n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Write your code here\n    if n > 0:\n        a = bin(n)[2:].zfill(8)\n        a = a + a[::-1]\n        a = a[::-1]\n        print(a[0])\n        if a[0] == '1':\n            print('1')\n        else:\n            print('0')\n    else:\n        print('0')\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # e.g. for n = 9\n    while n >= 10:\n        n = n & 0b111111111\n    # e.g. for n = 0b01101\n    return (n << 2) & 0b11111111"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    try:\n        m = n - 1\n        n = int(n)\n        while n:\n            n >>= 1\n            m >>= 1\n        return m\n    except:\n        return None\n    \ndef generate_deterministic_key(n, a): \n    '''\n    Generates a deterministic key.\n    '''\n    # Initialize a (half) inverse, a, that is, a^-1 = 1\n    # and set all bits in a to 1.\n    # Set a = 1\n    a |= 1 << (n - 1)\n    # Set all bits in a to 0.\n    for i in range(n):\n        a <<= 1\n        a &= (1 << i) - 1\n    # Return a\n    return a\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    f = open(\"unset_bit.txt\", \"w\")\n    for i in range(0, n+1):\n        if i == 0 or i == n:\n            f.write('0')\n        else:\n            f.write('1')\n    f.close()\n    return None\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # This function calculates the volume of a cone\n    # Using the Pythagorean theorem\n    # r = radius of the cone\n    # h = height of the cone\n    # If r > h, h should be a height\n    if r > h:\n        return 0\n    elif r == h:\n        return r*h*math.pi*2\n    elif r == h**2:\n        return (h/2)*r*h*math.pi*2\n    else:\n        return (h/2)*r*h*math.pi*(r-h)\n        # return (r*h*math.pi*2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4 * math.pi * (math.pow(r,3) - (4 * math.pow(r,2) + (4 * h * r))) * math.pow(r,3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 1\n    for i in range(r,0,-1):\n        v *= i\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi*(r**2)*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*(h**2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*(math.pi*r**2*h**3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a=2*math.pi*r*h/3\n    return a\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = r**3 * math.pi * h / 3\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4 * math.pi * math.pow(math.pow(r, 2) - math.pow(math.pow(r, 2) + math.pow(r, 3), 0.5), 2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=0\n    a=math.sqrt(r*r-h*h)\n    while a:\n        a-=1\n        if a<0:\n            a=a*3\n            print(a)\n        d=(-1.0)*h/a\n        v+=d*h\n        \n    return v\n    \n    "
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPower = 0\n    for i in range(1, n): \n        if (i**2) < n: \n            highestPower = i**2\n    return highestPower \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    for i in range(1, n+1):\n        if i**2 > n:\n            return i\n            \n    "
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    count = 0\n    while(i <= n):\n        if(pow(i, 2) <= n):\n            count += 1\n        i += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=1\n    while i < n:\n        if i%2==1:\n            if n%i==0:\n                return i\n        else:\n            return i\n        i+=1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power_of_2(num): \n        return num*2\n    if (n < 2):\n        return 0\n    elif(n <= 6):\n        return 2**n\n    elif(n <= 9):\n        return 3**n\n    elif(n <= 12):\n        return 5**n\n    elif(n <= 15):\n        return 7**n\n    elif(n <= 18):\n        return 11**n\n    elif(n <= 24):\n        return 13**n\n    elif(n <= 36):\n        return 17**n\n    elif(n <= 48):\n        return 19**n\n    elif(n <= 96):\n        return 23**n\n    elif(n <= 192):\n        return 29**n\n    elif(n <= 384):\n        return 31**n\n    elif(n <= 584):\n        return 37**n\n    elif(n <= 592):\n        return 41**n\n    elif(n <= 784):\n        return 43**n\n    elif(n <= 1024):\n        return 47**n\n    elif(n <= 1268):\n        return 51**n\n    elif(n <= 1568):\n        return 53**n\n    elif(n <= 1768):\n        return 57**n\n    elif(n <= 1868):\n        return 61**n\n    elif(n <= 2468):\n        return 63**n\n    elif(n <= 384):\n        return 67**n\n    elif(n <= 584):\n        return 71**n\n    elif(n <= 784):\n        return 73**n\n    elif(n <= 1024):\n        return 75**n\n    elif(n <= 1268):\n        return 77**n\n    elif(n <= 1568):\n        return 81**n\n    elif(n <= 1768):\n        return 83**n\n    elif(n <= 1868):\n        return 85**n\n    elif(n <= 2468):\n        return 87**n\n    elif(n <= 384):\n        return 89**n\n    elif(n <= 584):\n        return 91**n\n    elif(n <= 784):\n        return 93**n\n    elif(n <= 1024):\n        return 95**n\n    elif(n <= 1268):\n        return 97**n\n    elif(n <= 1568):\n        return 99**n\n    elif(n <= 1768):\n        return 101**n\n    elif(n <= 1868):\n        return 103**n\n    elif(n <= 2468):\n        return 105**n\n    elif(n <= 384):\n        return 107**n\n    elif(n <= 584):\n        return 109**n\n    elif(n <= 784):\n        return 111**n\n    elif(n <= 1024):\n        return 113**n\n    elif(n <= 1268):\n        return 115**n\n    elif(n <= 1568):\n        return 117**n\n    elif(n <= 1768):\n        return 119**n\n    elif(n <= 1868):\n        return 121**n\n    elif(n <= 2468):\n        return 123**n\n    elif(n <= 384):\n        return 125**n\n    elif(n <= 584):\n        return 127**n\n    elif(n <= 784):\n        return 129**n\n    elif(n <= 1024):\n        return 131**n\n    elif(n <= 1268):\n        return 133**n\n    elif(n <= 1568):\n        return 135**n\n    elif(n <= 1768):\n        return 137**n\n    elif(n <= 1868):\n        return 139**n\n    elif(n <= 2468):\n        return 141**n\n    elif(n <= 384):\n        return 143**n\n    elif(n <= 584):\n        return 145**n\n    elif(n <= 784):\n        return 147**n\n    elif(n <= 1024):\n        return 149**n\n    elif(n <= 1268):\n        return 151**n\n    elif(n <= 1568):\n        return 153**n\n    elif(n <= 1768):\n        return 155**n\n    elif(n <= 1868):\n        return 157**n\n    elif(n <= 2468):\n        return 159**n\n    elif(n <= 384):\n        return 161**n\n    elif(n <= 584):\n        return 163**n\n    elif(n <= 784):\n        return 165**n\n    elif(n <= 1024):\n        return 167**n\n    elif(n <= 1268):\n        return 169**n\n    elif(n <= 1568):\n        return 171**n\n    elif(n <= 1768):\n        return 173**n\n    elif(n <= 1868):\n        return 175**n\n    elif(n <= 2468):\n        return 177**n\n    elif(n <= 384):\n        return 179**n\n    elif(n <= 584):\n        return 181**n\n    elif(n <= 784):\n        return 183**n\n    elif(n <= 1024):\n        return 185**n\n    elif(n <= 1268):\n        return 187**n\n    elif(n <= 1568):\n        return 189**n\n    elif(n <= 1768):\n        return 191**n\n    elif(n <= 1868):\n        return 193**n\n    elif(n <= 2468):\n        return 195**n\n    elif(n <= 384):\n        return 197**n\n    elif(n <= 584):\n        return 199**n\n    elif(n <= 784):\n        return 201**n\n    elif(n <= 1024):\n        return 203**n\n    elif(n <= 1268):\n        return 205**n\n    elif(n <= 1568):\n        return 207**n\n    elif(n <= 1768):\n        return 209**n\n    elif(n <= 1868):\n        return 211**n\n    elif(n <= 2468):\n        return 213**n\n    elif(n <= 384):\n        return 215**n\n    elif(n <= 584):\n        return 217**n\n    elif(n <= 784):\n        return 219**n\n    elif(n <= 1024):\n        return 221**n\n    elif(n <= 1268):\n        return 223**n\n    elif(n <= 1568):\n        return 225**n\n    elif(n <= 1768):\n        return 227**n\n    elif(n <= 1868):\n        return 229**n\n    elif(n <= 2468):\n        return 231**n\n    elif(n <= 384):\n        return 233**n\n    elif(n <= 584):\n        return 235**n\n    elif(n <= 784):\n        return 237**n\n    elif(n <= 1024):\n        return 239**n\n    elif(n <= 1268):\n        return 241**n\n    elif(n <= 1568):\n        return 243**n\n    elif(n <= 1768):\n        return 245**n\n    elif(n <= 1868):\n        return 247**n\n    elif(n <= 2468):\n        return 249**n\n    elif(n <= 384):\n        return 251**n\n    elif(n <= 584):\n        return 253**n\n    elif(n <= 784):\n        return 255**n\n    elif(n <= 1024):\n        return 257**n\n    elif(n <= 1268):\n        return 259**n\n    elif(n <= 1568):\n        return 261**n\n    elif(n <= 1768):\n        return 263**n\n    elif(n <= 1868):\n        return 265**n\n    elif(n <= 2468):\n        return 267**n\n    elif(n <= 384):\n        return 269**n\n    elif(n <= 584):\n        return 271**n\n    elif(n <= 784):\n        return 273**n\n    elif(n <= 1024):\n        return 275**n\n    elif(n <= 1268):\n        return 277**n\n    elif(n <= 1568):\n        return 279**n\n    elif(n <= 1768):\n    "
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n <= 1):\n        return n\n    else:\n        return highest_Power_of_2(n - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    for i in range(n):\n        if n % 2!= 0:\n            power = 2 ** power\n            print(power)\n        else:\n            power = 2 ** power + 1\n            print(power)\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result=0\n    for i in range(n,1,-1):\n        if n%i==0:\n            result=i\n            break\n    return result\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l = n\n    while l % 2 == 0:\n        l /= 2\n    if l <= n:\n        return l\n    else:\n        return highest_Power_of_2(n - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    \n    # check for n as a input\n    if n<=0:\n        return \"Input must be a positive number\"\n        \n    else:\n        # check if n is even\n        if n%2==0:\n            return n-1\n            \n        else:\n            # find the largest power of 2\n            if n>2:\n                \n                # find the remainder\n                rem = n%2\n                \n                # find the highest power of 2\n                highest_power_2 = 2**(rem+1)\n                \n                # return the highest power of 2\n                return highest_power_2\n            \n            else:\n                return \"Input must be an even number\"\n                \n                \n        \n            \n        "
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n, L):\n        if n == 0:\n            return [0, 1]\n        \n        left, right = lucas(n - 1, L)\n        \n        if n % 2 == 0:\n            return [left + right, left + right + 2]\n        else:\n            return [left + right + 2, left + right + 2]\n        \n    return lucas(n, 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [0,1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = [1,1,2,3,5,8,13]\n    b = [1,2,3,4,6,8,9,10,12,15,20]\n    c = [1,2,3,4,5,7,9,12,15,18,19,20]\n    d = [1,2,3,4,6,8,11,14,16,19,22]\n    \n    e = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    i = 0\n    while n > i:\n        if n % 3 == 0:\n            return n\n        else:\n            n = n / 3\n            i += 1\n    return None\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = 0\n    l = n//2\n    while x < l: \n        y = x + 1\n        if y == n: \n            y = 0\n        if n % y == 0:\n            x = x + 1\n            l = n//y\n        else: \n            x = x + 1\n            y = n//y\n    return x\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # write your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 32\n    elif n == 5:\n        return 64\n    elif n == 6:\n        return 128\n    elif n == 7:\n        return 256\n    elif n == 8:\n        return 512\n    elif n == 9:\n        return 1024\n    elif n == 10:\n        return 2048\n    elif n == 11:\n        return 4096\n    elif n == 12:\n        return 8192\n    elif n == 13:\n        return 16384\n    elif n == 14:\n        return 32768\n    elif n == 15:\n        return 65536\n    elif n == 16:\n        return 131072\n    elif n == 17:\n        return 262144\n    elif n == 18:\n        return 524288\n    elif n == 19:\n        return 1048576\n    elif n == 20:\n        return 2097152\n    elif n == 21:\n        return 4194304\n    elif n == 22:\n        return 8388608\n    elif n == 23:\n        return 16777216\n    elif n == 24:\n        return 33554432\n    elif n == 25:\n        return 67108864\n    elif n == 26:\n        return 134217728\n    elif n == 27:\n        return 268435456\n    elif n == 28:\n        return 536870912\n    elif n == 29:\n        return 1073741824\n    elif n == 30:\n        return -2147483648\n    elif n == 31:\n        return 9223372036854775807\n    elif n == 32:\n        return 9223372036854775808\n    elif n == 33:\n        return 9223372036854775809\n    elif n == 34:\n        return 922337203685477581\n    elif n == 35:\n        return -2147483648\n    elif n == 36:\n        return -2147483648\n    elif n == 37:\n        return 9223372036854775808\n    elif n == 38:\n        return -2147483648\n    elif n == 39:\n        return -2147483648\n    elif n == 40:\n        return -2147483648\n    elif n == 41:\n        return -2147483648\n    elif n == 42:\n        return -2147483648\n    elif n == 43:\n        return -2147483648\n    elif n == 44:\n        return -2147483648\n    elif n == 45:\n        return -2147483648\n    elif n == 46:\n        return -2147483648\n    elif n == 47:\n        return -2147483648\n    elif n == 48:\n        return -2147483648\n    elif n == 49:\n        return -2147483648\n    elif n == 50:\n        return -2147483648\n    elif n == 51:\n        return -2147483648\n    elif n == 52:\n        return -2147483648\n    elif n == 53:\n        return -2147483648\n    elif n == 54:\n        return -2147483648\n    elif n == 55:\n        return -2147483648\n    elif n == 56:\n        return -2147483648\n    elif n == 57:\n        return -2147483648\n    elif n == 58:\n        return -2147483648\n    elif n == 59:\n        return -2147483648\n    elif n == 60:\n        return -2147483648\n    elif n == 61:\n        return -2147483648\n    elif n == 62:\n        return -2147483648\n    elif n == 63:\n        return -2147483648\n    elif n == 64:\n        return -2147483648\n    elif n == 65:\n        return -2147483648\n    elif n == 66:\n        return -2147483648\n    elif n == 67:\n        return -2147483648\n    elif n == 68:\n        return -2147483648\n    elif n == 69:\n        return -2147483648\n    elif n == 70:\n        return -2147483648\n    elif n == 71:\n        return -2147483648\n    elif n == 72:\n        return -2147483648\n    elif n == 73:\n        return -2147483648\n    elif n == 74:\n        return -2147483648\n    elif n == 75:\n        return -2147483648\n    elif n == 76:\n        return -2147483648\n    elif n == 77:\n        return -2147483648\n    elif n == 78:\n        return -2147483648\n    elif n == 79:\n        return -2147483648\n    elif n == 80:\n        return -2147483648\n    elif n == 81:\n        return -2147483648\n    elif n == 82:\n        return -2147483648\n    elif n == 83:\n        return -2147483648\n    elif n == 84:\n        return -2147483648\n    elif n == 85:\n        return -2147483648\n    elif n == 86:\n        return -2147483648\n    elif n == 87:\n        return -2147483648\n    elif n == 88:\n        return -2147483648\n    elif n == 89:\n        return -2147483648\n    elif n == 90:\n        return -2147483648\n    elif n == 91:\n        return -2147483648\n    elif n == 92:\n        return -2147483648\n    elif n == 93:\n        return -2147483648\n    elif n == 94:\n        return -2147483648\n    elif n == 95:\n        return -2147483648\n    elif n == 96:\n        return -2147483648\n    elif n == 97:\n        return -2147483648\n    elif n == 98:\n        return -2147483648\n    elif n == 99:\n        return -2147483648\n    elif n == 100:\n        return -2147483648\n    elif n == 101:\n        return -2147483648\n    elif n == 102:\n        return -2147483648\n    elif n == 103:\n        return -2147483648\n    elif n == 104:\n        return -2147483648\n    elif n == 105:\n        return -2147483648\n    elif n == 106:\n        return -2147483648\n    elif n == 107:\n        return -2147483648\n    elif n == 108:\n        return -2147483648\n    elif n == 109:\n        return -2147483648\n    elif n == 110:\n        return -2147483648\n    elif n == 111:\n        return -2147483648\n    elif n == 112:\n        return -2147483648\n    elif n == 113:\n        return -2147483648\n    elif n == 114:\n        return -2147483648\n    elif n == 115:\n        return -2147483648\n    elif n == 116:\n        return -2147483648\n    elif n == 117:\n        return -2147483648\n    elif n == 118:\n        return -2147483648\n    elif n == 119:\n        return -2147483648\n    elif n == 120:\n        return -2147483648\n    elif n == 121:\n        return -2147483648\n    elif n == 122:\n        return -2147483648\n    elif n == 123:\n        return -2147483648\n    elif n == 124:\n    "
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 10: \n        return n \n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        lucas = 1\n        i = 2\n        while n > 1:\n            if n % i == 0:\n                n = n / i\n                lucas = lucas + 1\n            i = i + 1\n        return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    while (n > 0):\n        if (n % 2 == 0):\n            print(n)\n            return\n        n = n//2\n        \nn = int(input(\"Enter a number: \"))\nfind_lucas(n)"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = 2\n    while (x <= n):\n        y = x + 1\n        if (y < n):\n            if (y%2 == 0):\n                y = y//2\n                print(y)\n            else:\n                y = (y+1)//2\n                print(y)\n        else:\n            print(0)\n        x += 1\n    else:\n        print(0)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(i.format(string))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Your code here\n    string_to_apply = list_\n    if type(string_to_apply)!= str:\n        raise TypeError('Expected a string')\n    elif type(string_to_apply)!= str:\n        raise TypeError('Expected a string')\n    else:\n        string_to_apply = string_to_apply.replace(\" \", \"\")\n        string_to_apply = string_to_apply.replace(\"\\n\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\t\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\r\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x0b\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x0c\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x0d\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x0e\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x0f\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x10\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x11\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x12\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x13\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x14\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x15\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x16\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x17\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x18\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x19\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1a\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1b\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1c\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1d\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1e\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1f\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x10\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x11\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x12\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x13\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x14\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x15\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x16\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x17\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x18\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x19\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1a\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1b\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1c\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1d\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1e\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1f\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x10\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x11\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x12\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x13\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x14\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x15\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x16\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x17\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x18\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x19\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1a\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1b\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1c\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1d\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1e\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1f\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x10\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x11\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x12\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x13\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x14\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x15\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x16\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x17\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x18\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x19\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1a\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1b\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1c\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1d\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1e\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1f\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x10\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x11\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x12\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x13\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x14\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x15\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x16\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x17\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x18\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x19\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1a\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1b\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1c\", \"\")\n        string_to_apply = string_to_apply.replace(\"\\x1d\""
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [list_]\n    for el in list_:\n        el.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    index = 0\n    for char in string:\n        result.append(list_[index] if index < len(list_) else '')\n        index += 1\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Write your code here\n    result = \"\"\n    for string in string:\n        result += str(list_[list_.index(string)])\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    def apply_list(list_, list_str):\n        '''\n        Apply a given format string to all elements in a list, given a list of strings.\n        '''\n        for string in list_str:\n            for element in list_:\n                if element == string:\n                    list_.remove(element)\n                    list_.append(string)\n        return list_\n    \n    def get_length(list_):\n        '''\n        Return the length of a list of strings, given a list of strings.\n        '''\n        length = 0\n        for string in list_:\n            length += len(string)\n        return length\n    \n    def apply_list_to_string(list_, list_str):\n        '''\n        Apply a given format string to all elements in a list, given a list of strings.\n        '''\n        for string in list_str:\n            for element in list_:\n                if element == string:\n                    list_.remove(element)\n                    list_.append(string)\n    \n    def get_element(list_, string):\n        '''\n        Find the first element in a list that has the given string.\n        '''\n        index = 0\n        for element in list_:\n            if string == element:\n                return index\n            index += 1\n        return -1\n    \n    def apply_list_to_string_to_element(list_, list_str, element):\n        '''\n        Apply a given format string to all elements in a list, given a list of strings and an element.\n        '''\n        for string in list_str:\n            for element_ in list_:\n                if element == element_:\n                    list_.remove(element_)\n                    list_.append(string)\n    \n    def apply_list_to_string_to_list(list_, list_str, element):\n        '''\n        Apply a given format string to all elements in a list, given a list of strings and an element.\n        '''\n        for string in list_str:\n            for element_ in list_:\n                if element == element_:\n                    list_.remove(element_)\n                    list_.append(string)\n    \n    def get_list_length(list_):\n        '''\n        Return the length of a list of strings, given a list of strings.\n        '''\n        length = 0\n        for string in list_:\n            length += len(string)\n        return length\n    \n    def apply_list_to_string_to_list_to_element(list_, list_str, element):\n        '''\n        Apply a given format string to all elements in a list, given a list of strings and an element.\n        '''\n        for string in list_str:\n            for element_ in list_:\n                if element == element_:\n                    list_.remove(element_)\n                    list_.append(string)\n    \n    def get_list_length_to_element(list_, element):\n        '''\n        Return the length of a list of strings, given a list of strings and an element.\n        '''\n        length = 0\n        for string in list_:\n            if element == string:\n                length += 1\n        return length\n    \n    def get_string(list_, string):\n        '''\n        Find the first string in a list that has the given string.\n        '''\n        index = 0\n        for element in list_:\n            if string == element:\n                return index\n            index += 1\n        return -1\n    \n    def apply_string_to_list(list_, string):\n        '''\n        Apply a given format string to all elements in a list, given a list of strings.\n        '''\n        for element in list_:\n            if string == element:\n                return element\n    \n    def get_list_string(list_):\n        '''\n        Return the string in a list, given a list of strings.\n        '''\n        string = ''\n        for element in list_:\n            string += element\n        return string\n    \n    def get_list_string_to_string(list_):\n        '''\n        Return the string in a list, given a list of strings.\n        '''\n        string = ''\n        for element in list_:\n            string += element\n        return string\n    \n    def get_list_string_to_string_to_string(list_):\n        '''\n        Return the string in a list, given a list of strings and a string.\n        '''\n        string = ''\n        for element in list_:\n            for element_ in list_:\n                string += element_\n        return string\n    \n    def get_list_string_to_string_to_list_to_string(list_):\n        '''\n        Return the string in a list, given a list of strings and a list of strings.\n        '''\n        string = ''\n        for element in list_:\n            for string_ in list_:\n                if element == string_:\n                    string += string_\n        return string\n    \n    def get_list_string_to_string_to_list_to_list_to_string(list_):\n        '''\n        Return the string in a list, given a list of strings and a list of strings and a string.\n        '''\n        string = ''\n        for element in list_:\n            for element_ in list_:\n                string += element_\n        return string\n    \n    def apply_list_to_string_to_string_to_list_to_list_to_list_to_list_to_list_to_string(list_, list_str, element):\n        '''\n        Apply a given format string to all elements in a list, given a list of strings and an element.\n        '''\n        for string in list_str:\n            for element_ in list_:\n                if element == element_:\n                    list_.remove(element_)\n                    list_.append(string)\n    \n    def get_list_string_to_list(list_):\n        '''\n        Return a list of strings, given a list of strings.\n        '''\n        string = []\n        for element in list_:\n            for string_ in string:\n                if string_ == element:\n                    string.remove(element)\n                    string.append(element)\n        return string\n    \n    def apply_list_to_list_to_string_to_list_to_list_to_list_to_list_to_list_to_list_to_string(list_, list_str, element):\n        '''\n        Apply a given format string to all elements in a list, given a list of strings and an element.\n        '''\n        for string in list_str:\n            for element_ in list_:\n                if element == element_:\n                    list_.remove(element_)\n                    list_.append(string)\n    \n    def get_list_string_to_list_to_list_to_string_to_list(list_):\n        '''\n        Return a list of strings, given a list of strings and a list of strings and a list of strings.\n        '''\n        string = []\n        for element in list_:\n            for element_ in list_:\n                for string_ in string:\n                    if element == element_:\n                        string.remove(element_)\n                        string.append(element)\n        return string\n    \n    def get_list_string_to_list_to_list_to_list_to_list_to_list_to_string_to_list(list_):\n        '''\n        Return a list of strings, given a list of strings and a list of strings and a list of strings.\n        '''\n        string = []\n        for element in list_:\n            for element_ in list_:\n                for element_ in list_:\n                    for string_ in string:\n                        if element == element_:\n                            string.remove(element_)\n                            string.append(element)\n        return string\n    \n    def get_list_string_to_list_to_list_to_string_to_list_to_list_to_string_to_list(list_):\n        '''\n        Return a list of strings, given a list of strings and a list of strings and a list of strings and a list of strings.\n        '''\n        string = []\n        for element in list_:\n            for element_ in list_:\n                for element_ in list_:\n                    for string_ in string:\n                        if element == element_:\n                        "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        item = item.replace(string, '')\n        item = item.replace('\\n', '')\n        item = item.replace('\\t', '')\n        item = item.replace('\\x0A', '')\n        item = item.replace('\\x0D', '')\n        item = item.replace('\\x1C', '')\n        item = item.replace('\\x1F', '')\n        item = item.replace('\\x85', '')\n        item = item.replace('\\uFEFF', '')\n        item = item.replace('\\uFFFD', '')\n        item = item.replace('\\uFFFF', '')\n        item = item.replace('\\uD800', '')\n        item = item.replace('\\uE000', '')\n        item = item.replace('\\uE001', '')\n        item = item.replace('\\uE002', '')\n        item = item.replace('\\uE003', '')\n        item = item.replace('\\uE004', '')\n        item = item.replace('\\uE005', '')\n        item = item.replace('\\uE006', '')\n        item = item.replace('\\uE007', '')\n        item = item.replace('\\uE008', '')\n        item = item.replace('\\uE009', '')\n        item = item.replace('\\uE00A', '')\n        item = item.replace('\\uE00B', '')\n        item = item.replace('\\uE00C', '')\n        item = item.replace('\\uE00D', '')\n        item = item.replace('\\uE00E', '')\n        item = item.replace('\\uE00F', '')\n        item = item.replace('\\uE010', '')\n        item = item.replace('\\uE011', '')\n        item = item.replace('\\uE012', '')\n        item = item.replace('\\uE013', '')\n        item = item.replace('\\uE014', '')\n        item = item.replace('\\uE015', '')\n        item = item.replace('\\uE016', '')\n        item = item.replace('\\uE017', '')\n        item = item.replace('\\uE018', '')\n        item = item.replace('\\uE019', '')\n        item = item.replace('\\uE01A', '')\n        item = item.replace('\\uE01B', '')\n        item = item.replace('\\uE01C', '')\n        item = item.replace('\\uE01D', '')\n        item = item.replace('\\uE01E', '')\n        item = item.replace('\\uE01F', '')\n        item = item.replace('\\uE020', '')\n        item = item.replace('\\uE021', '')\n        item = item.replace('\\uE022', '')\n        item = item.replace('\\uE023', '')\n        item = item.replace('\\uE024', '')\n        item = item.replace('\\uE025', '')\n        item = item.replace('\\uE026', '')\n        item = item.replace('\\uE027', '')\n        item = item.replace('\\uE028', '')\n        item = item.replace('\\uE029', '')\n        item = item.replace('\\uE02A', '')\n        item = item.replace('\\uE02B', '')\n        item = item.replace('\\uE02C', '')\n        item = item.replace('\\uE02D', '')\n        item = item.replace('\\uE02E', '')\n        item = item.replace('\\uE02F', '')\n        item = item.replace('\\uE030', '')\n        item = item.replace('\\uE031', '')\n        item = item.replace('\\uE032', '')\n        item = item.replace('\\uE033', '')\n        item = item.replace('\\uE034', '')\n        item = item.replace('\\uE035', '')\n        item = item.replace('\\uE036', '')\n        item = item.replace('\\uE037', '')\n        item = item.replace('\\uE038', '')\n        item = item.replace('\\uE039', '')\n        item = item.replace('\\uE03A', '')\n        item = item.replace('\\uE03B', '')\n        item = item.replace('\\uE03C', '')\n        item = item.replace('\\uE03D', '')\n        item = item.replace('\\uE03E', '')\n        item = item.replace('\\uE03F', '')\n        item = item.replace('\\uE040', '')\n        item = item.replace('\\uE041', '')\n        item = item.replace('\\uE042', '')\n        item = item.replace('\\uE043', '')\n        item = item.replace('\\uE044', '')\n        item = item.replace('\\uE045', '')\n        item = item.replace('\\uE046', '')\n        item = item.replace('\\uE047', '')\n        item = item.replace('\\uE048', '')\n        item = item.replace('\\uE049', '')\n        item = item.replace('\\uE04A', '')\n        item = item.replace('\\uE04B', '')\n        item = item.replace('\\uE04C', '')\n        item = item.replace('\\uE04D', '')\n        item = item.replace('\\uE04E', '')\n        item = item.replace('\\uE04F', '')\n        item = item.replace('\\uE050', '')\n        item = item.replace('\\uE051', '')\n        item = item.replace('\\uE052', '')\n        item = item.replace('\\uE053', '')\n        item = item.replace('\\uE054', '')\n        item = item.replace('\\uE055', '')\n        item = item.replace('\\uE056', '')\n        item = item.replace('\\uE057', '')\n        item = item.replace('\\uE058', '')\n        item = item.replace('\\uE059', '')\n        item = item.replace('\\uE05A', '')\n        item = item.replace('\\uE05B', '')\n        item = item.replace('\\uE05C', '')\n        item = item.replace('\\uE05D', '')\n        item = item.replace('\\uE05E', '')\n        item = item.replace('\\uE05F', '')\n        item = item.replace('\\uE060', '')\n        item = item.replace('\\uE061', '')\n        item = item.replace('\\uE062', '')\n        item = item.replace('\\uE063', '')\n        item = item.replace('\\uE064', '')\n        item = item.replace('\\uE065', '')\n        item = item.replace('\\uE066', '')\n        item = item.replace('\\uE067', '')\n        item = item.replace('\\uE068', '')\n        item = item.replace('\\uE069', '')\n        item = item.replace('\\uE06A', '')\n        item = item.replace('\\uE06B', '')\n        item = item.replace('\\uE06C', '')\n        item = item.replace('\\uE06D', '')\n        item = item.replace('\\uE06E', '')\n        item = item.replace('\\uE06F', '')\n        item = item.replace('\\uE070', '')\n        item = item.replace('\\uE071', '')\n        item = item.replace('\\uE072', '')\n        item = item.replace('\\uE073', '')\n        item = item.replace('\\uE074', '')\n        item = item.replace('\\u"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for el in list_:\n        el.format = string.replace('%', '$')\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for el in list_:\n        new_list.append(string.format(el))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i.append(string)\n    return list_\n    "
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    l1.sort()\n    d1['first'] = l1[0]\n    d1['second'] = l1[1]\n    d1['third'] = l1[2]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #create a nested dictionary\n    d = {}\n    #iterate through the lists, check for length\n    for i in range(len(l1)):\n        #get the key and value for each item\n        key = l1[i]\n        value = l2[i]\n        #if the key is in the dictionary, append the value\n        if key in d:\n            #append the value\n            d[key].append(value)\n        #if not, create a new dictionary\n        else:\n            #create a new dictionary\n            d[key] = []\n            #append the value\n            d[key].append(value)\n            #if the value is a list, append the key and value\n            if isinstance(value, list):\n                d[key].append(l3[i])\n    #return the dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    d = {key: [] for key in l1}\n    for i in range(len(l1)):\n        d[l1[i]].append(l2[i])\n    for i in range(len(l1)):\n        for j in range(len(l1)):\n            d[l1[i]].append(l3[j][i])\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [convert_list_dictionary(x, y, z) for (x, y, z) in zip(l1, l2, l3)]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_data = {}\n    if l1!= [] and l2!= [] and l3!= []:\n        for elem1 in l1:\n            dict_data[elem1] = {}\n        for elem2 in l2:\n            if elem2!= \"\":\n                dict_data[elem1][elem2] = []\n            else:\n                dict_data[elem1] = {}\n        for elem in l3:\n            if elem!= \"\":\n                dict_data[elem1][elem] = []\n            else:\n                dict_data[elem1] = {}\n    return dict_data\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l4 = []\n    for l in l1:\n        d = dict()\n        for k, v in l.items():\n            d[k] = v\n        l4.append(d)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create dictionary out of one list\n    d1 = dict()\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for l in l1:\n        for k, v in l.items():\n            d1[k] = v\n    d2 = {}\n    for l in l2:\n        for k, v in l.items():\n            d2[k] = v\n    d3 = {}\n    for l in l3:\n        for k, v in l.items():\n            d3[k] = v\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n        d2[l1[i]] = l3[i]\n    return d1, d2, d3\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    possible_sum = 0\n    for i in range (1, n + 1):\n        possible_sum += (i/3)\n    return possible_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Your code here\n    f = 0\n    if n % 2 == 0:\n        f = n//2\n        if f > n//2:\n            f = n//2\n    elif n % 3 == 0:\n        f = n//3\n        if f > n//3:\n            f = n//3\n    else:\n        f = n//4\n        if f > n//4:\n            f = n//4\n    return f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Define f(n) as the sum of all numbers under n\n    f = 0\n    for i in range (1, n):\n        f += i\n    # Define g as the difference between the sum of numbers under n and the value of f\n    g = f - n\n    # Define max_sum as the max of g and f\n    max_sum = max (g, f)\n    # Return max_sum\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def calculate(n):\n        if n == 1:\n            return 0\n        elif n % 2 == 0:\n            return calculate(n/2) + calculate(n/2)\n        elif n % 3 == 0:\n            return calculate(n/3) + calculate(n/3)\n        else:\n            return calculate(n/4) + calculate(n/4) + calculate(n/5)\n    \n    return calculate(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n < 2):\n        return 0\n    elif (n == 2):\n        return n\n    elif (n == 3):\n        return n * n\n    elif (n == 4):\n        return n * (n + 1)\n    elif (n == 5):\n        return n * (n + 2)\n    elif (n == 6):\n        return n * (n + 3)\n    else:\n        return n * max(get_max_sum(n-1), get_max_sum(n-2), get_max_sum(n-3), get_max_sum(n-4), get_max_sum(n-5))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 9\n    elif n == 7:\n        return 11\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    p = 2\n    for i in range(1, n+1):\n        if i % p == 0:\n            max_sum = max(max_sum, i)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a, b, c = 0, 0, 0\n    for i in range(1, n):\n        a += i\n        b = n / 2\n        c = n / 3\n        if(a + b + c > n):\n            break\n    return max(a, b, c)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Variable to store the maximum possible sum\n    max_sum = 0\n    \n    # Loop through the integer n\n    for n in range (2,n):\n        # Find the sum of f(n/2)\n        sum = n * (n+1)/2\n        # Check whether the sum can be added to the sum\n        if sum < n:\n            continue\n        # Check whether sum of f(n/2) and f(n/3) can be added to the sum\n        if sum == n:\n            if n % 2 == 0:\n                sum = n * (n+1)/2\n            elif n % 3 == 0:\n                sum = n * (n+1)/2\n            else:\n                sum = n * (n+1)/2\n        # Check whether sum of f(n/3) and f(n/4) can be added to the sum\n        if sum == n:\n            if n % 3 == 0:\n                sum = n * (n+1)/2\n            elif n % 4 == 0:\n                sum = n * (n+1)/2\n            else:\n                sum = n * (n+1)/2\n        # Check whether sum of f(n/4) and f(n/5) can be added to the sum\n        if sum == n:\n            if n % 4 == 0:\n                sum = n * (n+1)/2\n            elif n % 5 == 0:\n                sum = n * (n+1)/2\n            else:\n                sum = n * (n+1)/2\n        # If sum of the above equation can be added to the maximum sum, then reset the loop\n        if sum > max_sum:\n            max_sum = sum\n            \n    return max_sum\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for value in input_list:\n        if len(str(value)) > max_length:\n            max_length = len(str(value))\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #max_length_list = 0\n    #for i in range(len(input_list)):\n        #if input_list[i] > max_length_list:\n            #max_length_list = input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = input_list[i]\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    for element in input_list:\n        if len(element) > maximum:\n            maximum = len(element)\n    return maximum\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_tup)\n    #return len(set(t)) == len(t)\n    \n    if type(test_tup) is not tuple:\n        raise TypeError(\"Expected a tuple\")\n    #t = tuple(test_tup)\n    #if len(set(t))!= len(t):\n    #    return False\n    \n    for el in test_tup:\n        if el in set(test_tup):\n            return False\n    \n    return True\n    \n    \ndef check_dictionaries(test_tup):\n    '''\n    Write a function to check if given tuples contain only unique entries.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_tup)\n    #if type(test_tup) is not tuple:\n    #    raise TypeError(\"Expected a tuple\")\n    \n    if type(test_tup) is not tuple:\n        raise TypeError(\"Expected a tuple\")\n    \n    for el in test_tup:\n        if el in set(test_tup):\n            raise ValueError(\"Duplicate values are not allowed\")\n    \n    return True\n    \n    \ndef check_dictionary_keys(test_dict):\n    '''\n    Write a function to check if given dictionary contains only unique keys.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_dict)\n    #if type(test_dict) is not dict:\n    #    raise TypeError(\"Expected a dictionary\")\n    \n    if type(test_dict) is not dict:\n        raise TypeError(\"Expected a dictionary\")\n    \n    for el in test_dict:\n        if el in set(test_dict.keys()):\n            raise ValueError(\"Duplicate keys are not allowed\")\n    \n    return True\n    \n    \ndef check_dictionary_values(test_dict):\n    '''\n    Write a function to check if given dictionary contains only unique values.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_dict)\n    #if type(test_dict) is not dict:\n    #    raise TypeError(\"Expected a dictionary\")\n    \n    if type(test_dict) is not dict:\n        raise TypeError(\"Expected a dictionary\")\n    \n    for el in test_dict:\n        if el in set(test_dict.values()):\n            raise ValueError(\"Duplicate values are not allowed\")\n    \n    return True\n    \n    \ndef check_dict_keys_values(test_dict):\n    '''\n    Write a function to check if given dictionary contains all given keys and values.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_dict)\n    #if type(test_dict) is not dict:\n    #    raise TypeError(\"Expected a dictionary\")\n    \n    if type(test_dict) is not dict:\n        raise TypeError(\"Expected a dictionary\")\n    \n    if set(test_dict.keys())!= set(test_dict.values()):\n        raise ValueError(\"Duplicate keys are not allowed\")\n    \n    for el in test_dict:\n        if el in set(test_dict.keys()):\n            raise ValueError(\"Duplicate values are not allowed\")\n    \n    return True\n    \n    \n    \ndef check_dictionary_values_keys(test_dict):\n    '''\n    Write a function to check if given dictionary contains all given keys and values.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_dict)\n    #if type(test_dict) is not dict:\n    #    raise TypeError(\"Expected a dictionary\")\n    \n    if type(test_dict) is not dict:\n        raise TypeError(\"Expected a dictionary\")\n    \n    if set(test_dict.values())!= set(test_dict.keys()):\n        raise ValueError(\"Duplicate values are not allowed\")\n    \n    for el in test_dict:\n        if el in set(test_dict.values()):\n            raise ValueError(\"Duplicate keys are not allowed\")\n    \n    return True\n    \n    \ndef check_dict_values_keys(test_dict):\n    '''\n    Write a function to check if given dictionary contains all given keys and values.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_dict)\n    #if type(test_dict) is not dict:\n    #    raise TypeError(\"Expected a dictionary\")\n    \n    if type(test_dict) is not dict:\n        raise TypeError(\"Expected a dictionary\")\n    \n    if set(test_dict.values())!= set(test_dict.keys()):\n        raise ValueError(\"Duplicate values are not allowed\")\n    \n    for el in test_dict:\n        if el in set(test_dict.values()):\n            raise ValueError(\"Duplicate keys are not allowed\")\n    \n    return True\n    \n    \ndef check_dictionary_elements(test_dict):\n    '''\n    Write a function to check if given dictionary contains all given values.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_dict)\n    #if type(test_dict) is not dict:\n    #    raise TypeError(\"Expected a dictionary\")\n    \n    if type(test_dict) is not dict:\n        raise TypeError(\"Expected a dictionary\")\n    \n    for el in test_dict.values():\n        if el in set(test_dict.values()):\n            raise ValueError(\"Duplicate values are not allowed\")\n    \n    return True\n    \n    \ndef check_dict_elements(test_dict):\n    '''\n    Write a function to check if given dictionary contains all given values.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_dict)\n    #if type(test_dict) is not dict:\n    #    raise TypeError(\"Expected a dictionary\")\n    \n    if type(test_dict) is not dict:\n        raise TypeError(\"Expected a dictionary\")\n    \n    for el in test_dict.values():\n        if el in set(test_dict.values()):\n            raise ValueError(\"Duplicate values are not allowed\")\n    \n    return True\n    \n    \ndef check_list(test_list):\n    '''\n    Write a function to check if given list contains all values.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_list)\n    #if type(test_list) is not list:\n    #    raise TypeError(\"Expected a list\")\n    \n    if type(test_list) is not list:\n        raise TypeError(\"Expected a list\")\n    \n    for el in test_list:\n        if el in set(test_list):\n            raise ValueError(\"Duplicate values are not allowed\")\n    \n    return True\n    \n    \ndef check_tuple(test_tuple):\n    '''\n    Write a function to check if given tuple contains all values.\n    '''\n    #TODO: check if tuple is always unique\n    #Do not use set to avoid duplicate entries\n    #t = tuple(test_tuple)\n    #if type(test_tuple) is not tuple:\n    #    raise TypeError(\"Expected a tuple\")\n    \n    if type(test_tuple) is not tuple:\n        raise TypeError(\"Expected a tuple\")\n    \n    for el in test_tuple:\n        if el in set(test_tuple):\n            raise ValueError(\"Duplicate keys are not allowed\")\n    \n    return True\n    \n    \ndef check_set(test_set):"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    flag = True\n    for i in test_tup:\n        if i in test_tup:\n            flag = False\n    return flag\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # write your logic here\n    tup = tuple(test_tup)\n    return len(tup) == len(set(tup))\n    \n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = sorted(test_tup)\n    return all(tup == test_tup[-1] for tup in test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for t in test_tup:\n        if t in test_tup:\n            count += 1\n    return count == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for tup in test_tup:\n        if tup in test_tup:\n            return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = set(tup)\n    if len(unique_tup)!= len(tup):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # get length of tuple\n    length = len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_char = []\n    for char in str1:\n        if char not in first_char:\n            first_char.append(char)\n    return first_char[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1)<=1:\n        return''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return''\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set(str1.lower())\n    for c in char_set:\n        if char_set.count(c)!= 1:\n            return c\n    return''\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Store all characters in list\n    all_char = []\n    for char in str1:\n        if char not in all_char:\n            all_char.append(char)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # TODO: Write your code here\n    start, end = 0, 0\n    while end < len(str1):\n        if str1[start] == str1[end]:\n            start += 1\n            end += 1\n        else:\n            end = 0\n    return str1[start+1:end]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    l = []\n    for i in range(len(str1)):\n        if str1[i] not in l:\n            l.append(str1[i])\n    return str(l)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #hash = dict()\n    hash={}\n    for i in str1:\n        if i in hash.keys():\n            hash[i] +=1\n        else:\n            hash[i] = 1\n    for j in hash.values():\n        if j == 1:\n            return str1.index(i)\n    return None\ndef second_non_repeating_character(str1):\n    '''\n    Write a python function to find the second non-repeated character in a given string.\n    '''\n    #hash = dict()\n    hash={}\n    for i in str1:\n        if i in hash.keys():\n            hash[i] +=1\n        else:\n            hash[i] = 1\n    for j in hash.values():\n        if j == 1:\n            return str1.index(i,2)\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in char_dict:\n        if char_dict[char] == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_lst = str1.split()\n    print(char_lst)\n    count = 0\n    for i in char_lst:\n        if i!= '':\n            count = count + 1\n    print(count)\n    \n    if count == len(char_lst):\n        return '$'\n    else:\n        return ''\n    \n    \ndef first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_lst = str1.split()\n    print(char_lst)\n    count = 0\n    for i in char_lst:\n        if i!= '':\n            count = count + 1\n    \n    if count == len(char_lst):\n        return '$'\n    else:\n        return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = list(str1.lower())\n    char_set = set(char_list)\n    char_count = 0\n    for char in char_list:\n        if char in char_set:\n            char_count += 1\n    if char_count == len(char_list):\n        return char_list[0]\n    else:\n        return''\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # we have to import re to avoid running this module's code on this file.\n    # this also means that we can't use regex anymore\n    import re\n    if len(string) <=1: \n        print(string +'is invalid')\n        return False\n    # i.e. we have a string\n    pattern = re.compile(regex)\n    print(pattern.search(string))\n    # if we find an match\n    if pattern.search(string):\n        print('The string starts with %s' %string[0])\n        return True\n    # if we don't find the match\n    else:\n        print('The string does not start with %s' %string[0])\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    check = True\n    for char in string:\n        if char.lower() == char.upper():\n            check = True\n        else:\n            check = False\n    return check\n    \ndef check_structure(string):\n    '''\n    Write a function to check whether the given string is a valid email structure.\n    '''\n    res = True\n    if len(string) == 0:\n        return res\n    for char in string:\n        if not(check_char(char)) and not(char.isalpha()) and not(char.isdigit()) and not(char == '_'):\n            res = False\n    return res\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 0:\n        if string[0]!= string[-1]:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return not bool(re.match(regex, string) is None)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith(string) or string.endswith(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else: \n        return False\ndef check_word(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same word or not.\n    '''\n    if string[:2] == string[2:].lower():\n        return True\n    else:\n        return False\ndef validate_word(word):\n    '''\n    Check whether the given word is a valid word or not.\n    '''\n    if check_word(word):\n        return True\n    else:\n        return False\ndef validate_char(char):\n    '''\n    Check whether the given character is a valid character or not.\n    '''\n    if re.match(regex, char):\n        return True\n    else:\n        return False\ndef validate_alphabet(char):\n    '''\n    Check whether the given character is a valid alphabet or not.\n    '''\n    if re.match(regex, char):\n        return True\n    else:\n        return False\ndef valid_string(string):\n    '''\n    Check whether the given string is valid or not.\n    '''\n    if validate_word(string):\n        return True\n    else:\n        return False\ndef check_character(string):\n    '''\n    Check whether the given string is valid or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\ndef check_alphabet(string):\n    '''\n    Check whether the given string is valid or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\ndef invalid_string(string):\n    '''\n    Check whether the given string is invalid or not.\n    '''\n    if check_char(string):\n        return True\n    else:\n        return False\ndef invert_alphabet(string):\n    '''\n    Check whether the given string is invalid or not.\n    '''\n    if check_alphabet(string):\n        return True\n    else:\n        return False\ndef clean_up(string):\n    '''\n    Remove any unwanted characters from the given string.\n    '''\n    string = re.sub(r'[^a-zA-Z0-9]','',string)\n    string = re.sub(r'^\\s+','',string)\n    string = re.sub(r'\\s+$','',string)\n    string = re.sub(r'^\\s+$','',string)\n    string = re.sub(r'[^\\s\\w]','',string)\n    string = re.sub(r'^\\s+','',string)\n    string = re.sub(r'^\\s+$','',string)\n    return string\ndef clean_string(string):\n    '''\n    Remove any unnecessary characters from the given string.\n    '''\n    string = re.sub(r'[^a-zA-Z0-9]','',string)\n    string = re.sub(r'^\\s+','',string)\n    string = re.sub(r'\\s+$','',string)\n    string = re.sub(r'^\\s+$','',string)\n    string = re.sub(r'[^\\s\\w]','',string)\n    string = re.sub(r'^\\s+','',string)\n    string = re.sub(r'^\\s+$','',string)\n    return string\ndef is_invalid(string):\n    '''\n    Check whether the given string is invalid or not.\n    '''\n    if invalid_string(string):\n        return True\n    else:\n        return False\ndef is_valid(string):\n    '''\n    Check whether the given string is valid or not.\n    '''\n    if valid_string(string):\n        return True\n    else:\n        return False\ndef is_valid_alphabet(string):\n    '''\n    Check whether the given string is valid or not.\n    '''\n    if validate_alphabet(string):\n        return True\n    else:\n        return False\ndef is_valid_word(string):\n    '''\n    Check whether the given string is valid or not.\n    '''\n    if validate_word(string):\n        return True\n    else:\n        return False\ndef is_valid_char(string):\n    '''\n    Check whether the given string is valid or not.\n    '''\n    if validate_char(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # print(string)\n    if len(string) == 0:\n        return \"empty\"\n    elif string[0]!= string[-1]:\n        return \"not match\"\n    else:\n        return string\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-zA-Z]+$'\n    m = re.match(pattern, string) \n    if not m: \n        return False\n    if not m.end(0): \n        return False\n    return True\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0:\n        return -1\n    elif len(a) == 1:\n        return a[0]\n    elif len(a) == 2:\n        return (a[0] + a[1])/2\n    elif len(a) == 3:\n        return (a[0] + a[2])/2\n    else:\n        med_num_1 = median_numbers(a[0:3])\n        med_num_2 = median_numbers(a[0:2])\n        med_num_3 = median_numbers(a[0:1])\n        if med_num_1 == -1:\n            med_num_1 = a[0]\n        if med_num_2 == -1:\n            med_num_2 = a[1]\n        if med_num_3 == -1:\n            med_num_3 = a[2]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    #Passing variables into a list.\n    a = [int(i) for i in a]\n    b = [int(i) for i in b]\n    c = [int(i) for i in c]\n    \n    #Finding the average of all three numbers.\n    sum = a+b+c\n    avg = (sum[0]+sum[1]+sum[2])/3\n    \n    #Checking if any of the numbers are even.\n    if sum[0]%2 == 0:\n        if sum[1]%2 == 0:\n            if sum[2]%2 == 0:\n                return [avg,avg,avg]\n            else:\n                return [avg,avg,avg]\n        else:\n            return [avg,avg,avg]\n    else:\n        return [avg,avg,avg]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a.sort()\n    b.sort()\n    c.sort()\n    n = len(a)\n    if n % 2!= 0:\n        return ((a[n//2] + b[n//2] + c[n//2]) / 3)\n    else:\n        return (a[n//2] + c[n//2])\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    a_median = sorted(a)\n    b_median = sorted(b)\n    c_median = sorted(c)\n    \n    if (len(a) == len(b) == len(c)):\n        return (a_median[int(len(a)/2)] + b_median[int(len(b)/2)] + c_median[int(len(c)/2)])/3\n    else:\n        return (a_median[int(len(a)/2)] + b_median[int(len(b)/2)] + c_median[int(len(c)/2)])/2"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c<a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if len(a) > 1 or len(b) > 1 or len(c) > 1:\n        return 'invalid'\n    \n    if len(a) == 1:\n        return a[0]\n    elif len(b) == 1:\n        return b[0]\n    else:\n        return (a[0] + b[0]) / 2\n        "
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == len(b) == len(c):\n        if len(a) % 2 == 0:\n            return a[int(len(a)/2)]\n        else:\n            return (a[int(len(a)/2-1)] + a[int(len(a)/2)])/2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return a[0]\n    if len(a)==2:\n        if a[0]>a[1]:\n            return a[0]\n        else:\n            return a[1]\n    if len(a)==3:\n        if (a[0]+a[1]+a[2])%3==0:\n            return (a[0]+a[1]+a[2])//3\n        else:\n            return (a[0]+a[1]+a[2])//3\n    if len(a)==4:\n        if (a[0]+a[1]+a[2]+a[3])%3==0:\n            return (a[0]+a[1]+a[2]+a[3])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3])//3\n    if len(a)==5:\n        if (a[0]+a[1]+a[2]+a[3]+a[4])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4])//3\n    if len(a)==6:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5])//3\n    if len(a)==7:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6])//3\n    if len(a)==8:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7])//3\n    if len(a)==9:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8])//3\n    if len(a)==10:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9])//3\n    if len(a)==11:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10])//3\n    if len(a)==12:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11])//3\n    if len(a)==13:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12])//3\n    if len(a)==14:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12]+a[13])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12]+a[13])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12]+a[13])//3\n    if len(a)==15:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12]+a[13]+a[14])%3==0:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12]+a[13]+a[14])//3\n        else:\n            return (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12]+a[13]+a[14])//3\n    if len(a)==16:\n        if (a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12]+a[13]+a[14]+a[15])%3==0:\n        "
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if len(a) < 3:\n        return None\n    median = []\n    for i in range(len(a)):\n        median.append((a[i]+b[i]+c[i])/3)\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==b==c:\n        return a\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Take in the first number.\n    sum_digit = 0\n    # Loop over the number list\n    for num in nums:\n        # Check that the number is greater than 0,\n        # if so, add it to the sum.\n        if num > 0:\n            sum_digit += num\n    return sum_digit\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums_sum = 0\n    for num in nums:\n        nums_sum += num\n    return nums_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #return sum(int(n) for n in nums if n!= 0)\n    return sum([int(n) for n in nums if n!= 0])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        print(sum(map(int,str(num))))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda num: int(num), filter(lambda num: num, nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = 0\n    for num in nums:\n        res += num\n    return res\n    \ndef sum_of_digits2(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(sum(nums))])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + num\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n    return total_sum\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return {\n        'name' : 'bitwise_xor',\n        'level' : 'basic',\n        'params': [test_tup1, test_tup2],\n        'hint' : 'For the bitwise xor operation to be defined, a tuple is expected. However, the tuples will be of the same size and order',\n        'description' : 'This function will perform the bitwise xor operation between two tuples.'\n    }\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([i for i in test_tup1[0] ^ test_tup2[0] for j in range(len(test_tup1[0]))])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = 0\n    for i in range(len(test_tup1)):\n        xor += test_tup1[i]*test_tup2[i]\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0] ^ test_tup2[0]) ^ (test_tup1[1] ^ test_tup2[1]))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = str(test_tup1)\n    test_tup2 = str(test_tup2)\n    \n    test_tup = '0' + test_tup1 + '0' + test_tup2 + '0'\n    test_tup = test_tup.upper()\n    \n    return test_tup\n    \ndef float_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = str(test_tup1)\n    test_tup2 = str(test_tup2)\n    \n    test_tup = float(test_tup1) + float(test_tup2)\n    test_tup = test_tup / 2\n    \n    test_tup = str(test_tup)\n    test_tup = test_tup.upper()\n    \n    return test_tup\n    \ndef find_digit(test_tup, digit):\n    '''\n    Find the first digit of the given tuple and return it.\n    '''\n    test_tup = str(test_tup)\n    test_tup = test_tup.upper()\n    \n    if '0' in test_tup:\n        return '0'\n    \n    if '1' in test_tup:\n        return '1'\n    \n    if '2' in test_tup:\n        return '2'\n    \n    if '3' in test_tup:\n        return '3'\n    \n    if '4' in test_tup:\n        return '4'\n    \n    if '5' in test_tup:\n        return '5'\n    \n    if '6' in test_tup:\n        return '6'\n    \n    if '7' in test_tup:\n        return '7'\n    \n    if '8' in test_tup:\n        return '8'\n    \n    if '9' in test_tup:\n        return '9'\n    \n    if '0' in test_tup:\n        return '0'\n    \n    if '.' in test_tup:\n        return '.'\n    \n    if ',' in test_tup:\n        return ','\n    \n    if'' in test_tup:\n        return''\n    \n    if '!' in test_tup:\n        return '!'\n    \n    if '!' in test_tup:\n        return '!'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if '\"' in test_tup:\n        return '\"'\n    \n    if '_' in test_tup:\n        return '_'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if '<' in test_tup:\n        return '<'\n    \n    if '>' in test_tup:\n        return '>'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if '<' in test_tup:\n        return '<'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if'' in test_tup:\n        return''\n    \n    if ',' in test_tup:\n        return ','\n    \n    if '.' in test_tup:\n        return '.'\n    \n    if ',' in test_tup:\n        return ','\n    \n    if'' in test_tup:\n        return''\n    \n    if '!' in test_tup:\n        return '!'\n    \n    if '!' in test_tup:\n        return '!'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if '.' in test_tup:\n        return '.'\n    \n    if '_' in test_tup:\n        return '_'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if '<' in test_tup:\n        return '<'\n    \n    if '>' in test_tup:\n        return '>'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if '<' in test_tup:\n        return '<'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if'' in test_tup:\n        return''\n    \n    if ',' in test_tup:\n        return ','\n    \n    if '.' in test_tup:\n        return '.'\n    \n    if ',' in test_tup:\n        return ','\n    \n    if'' in test_tup:\n        return''\n    \n    if '!' in test_tup:\n        return '!'\n    \n    if '!' in test_tup:\n        return '!'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if '.' in test_tup:\n        return '.'\n    \n    if '_' in test_tup:\n        return '_'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if '.' in test_tup:\n        return '.'\n    \n    if '_' in test_tup:\n        return '_'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if '<' in test_tup:\n        return '<'\n    \n    if '>' in test_tup:\n        return '>'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if '<' in test_tup:\n        return '<'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if'' in test_tup:\n        return''\n    \n    if ',' in test_tup:\n        return ','\n    \n    if '.' in test_tup:\n        return '.'\n    \n    if ',' in test_tup:\n        return ','\n    \n    if'' in test_tup:\n        return''\n    \n    if '!' in test_tup:\n        return '!'\n    \n    if '!' in test_tup:\n        return '!'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if ':' in test_tup:\n        return ':'\n    \n    if ';' in test_tup:\n        return ';'\n    \n    if '=' in test_tup:\n        return '='\n    \n    if '.' in test_tup:\n        return '.'\n    \n    if '_' in test_tup:\n        return '_'\n    \n    if ';' in test_tu"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result += test_tup1[i] ^ test_tup2[i]\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    def binary_xor(test_tup1, test_tup2):\n        '''\n        Write a function to perform the binary xor operation across the given tuples.\n        '''\n        def check(tup1, tup2):\n            '''\n            Check if two tuples are equal.\n            '''\n            for i in range(len(tup1)):\n                if tup1[i]!= tup2[i]:\n                    return False\n            return True\n        \n        def expand(s, tup):\n            '''\n            expand the bits of a tuple.\n            '''\n            if tup == ():\n                return s\n            else:\n                return s + expand(s, tup[0])\n        \n        def invert(s, tup):\n            '''\n            invert the bits of a tuple.\n            '''\n            if tup == ():\n                return s\n            else:\n                return expand(expand(s, tup[1:]), tup)\n        \n        def swap(s, tup):\n            '''\n            swap the bits of a tuple.\n            '''\n            if tup == ():\n                return s\n            else:\n                return s + expand(swap(s, tup[1:]), tup[0])\n        \n        def int_to_b(s):\n            '''\n            Convert a string into a binary.\n            '''\n            return bin(int(s))[2:]\n        \n        def int_to_f(s):\n            '''\n            Convert a string into a hexadecimal.\n            '''\n            return hex(int(s))[2:]\n        \n        def f_to_int(s):\n            '''\n            Convert a hexadecimal into an integer.\n            '''\n            return int(s, 16)\n        \n        def f_to_hex(s):\n            '''\n            Convert a hexadecimal into an integer.\n            '''\n            return int(s, 2)\n        \n        def result(s1, s2):\n            '''\n            Return the bitwise xor result of two integers.\n            '''\n            if type(s1) is int and type(s2) is int:\n                return int_to_b(s1) + int_to_b(s2)\n            elif type(s1) is int and type(s2) is str:\n                return s1 + s2\n            elif type(s1) is str and type(s2) is int:\n                return f_to_int(s1) + f_to_int(s2)\n            elif type(s1) is str and type(s2) is str:\n                return f_to_hex(s1) + f_to_hex(s2)\n        \n        result1 = binary_xor(test_tup1, test_tup2)\n        result2 = binary_xor(expand(result1, test_tup1), test_tup2)\n        result3 = binary_xor(invert(result1, test_tup1), test_tup2)\n        result4 = binary_xor(swap(result1, test_tup1), test_tup2)\n        result5 = binary_xor(int_to_b(result2), test_tup2)\n        result6 = binary_xor(int_to_f(result2), test_tup2)\n        result7 = binary_xor(f_to_int(result2), test_tup2)\n        result8 = binary_xor(f_to_hex(result2), test_tup2)\n        result9 = binary_xor(result3, test_tup2)\n        result10 = binary_xor(result4, test_tup2)\n        result11 = binary_xor(result5, test_tup2)\n        result12 = binary_xor(result6, test_tup2)\n        result13 = binary_xor(result7, test_tup2)\n        result14 = binary_xor(result8, test_tup2)\n        result15 = binary_xor(result9, test_tup2)\n        result16 = binary_xor(result10, test_tup2)\n        result17 = binary_xor(result11, test_tup2)\n        result18 = binary_xor(result12, test_tup2)\n        result19 = binary_xor(result13, test_tup2)\n        result20 = binary_xor(result14, test_tup2)\n        result21 = binary_xor(result15, test_tup2)\n        result22 = binary_xor(result16, test_tup2)\n        result23 = binary_xor(result17, test_tup2)\n        result24 = binary_xor(result18, test_tup2)\n        result25 = binary_xor(result19, test_tup2)\n        result26 = binary_xor(result20, test_tup2)\n        result27 = binary_xor(result21, test_tup2)\n        result28 = binary_xor(result22, test_tup2)\n        result29 = binary_xor(result23, test_tup2)\n        result30 = binary_xor(result24, test_tup2)\n        result31 = binary_xor(result25, test_tup2)\n        result32 = binary_xor(result26, test_tup2)\n        result33 = binary_xor(result27, test_tup2)\n        result34 = binary_xor(result28, test_tup2)\n        result35 = binary_xor(result29, test_tup2)\n        result36 = binary_xor(result30, test_tup2)\n        result37 = binary_xor(result31, test_tup2)\n        result38 = binary_xor(result32, test_tup2)\n        result39 = binary_xor(result33, test_tup2)\n        result40 = binary_xor(result34, test_tup2)\n        result41 = binary_xor(result35, test_tup2)\n        result42 = binary_xor(result36, test_tup2)\n        result43 = binary_xor(result37, test_tup2)\n        result44 = binary_xor(result38, test_tup2)\n        result45 = binary_xor(result39, test_tup2)\n        result46 = binary_xor(result40, test_tup2)\n        result47 = binary_xor(result41, test_tup2)\n        result48 = binary_xor(result42, test_tup2)\n        result49 = binary_xor(result43, test_tup2)\n        result50 = binary_xor(result44, test_tup2)\n        result51 = binary_xor(result45, test_tup2)\n        result52 = binary_xor(result46, test_tup2)\n        result53 = binary_xor(result47, test_tup2)\n        result54 = binary_xor(result48, test_tup2)\n        result55 = binary_xor(result49, test_tup2)\n        result56 = binary_xor(result50, test_tup2)\n        result57 = binary_xor(result51, test_tup2)\n        result58 = binary_xor(result52, test_tup2)\n        result59 = binary_xor(result53, test_tup2)\n        result60 = binary_xor(result54, test_tup2)\n        result61 = binary_xor(result55, test_tup2)\n        result62 = binary_xor(result56, test_tup2)\n        result63 = binary_xor(result57, test_tup2)\n        result64 = binary_xor(result58, test_tup2)\n        result65 = binary_xor(result59, test_tup2)\n        result66 = binary_xor(result60, test_tup2)\n        result67 = binary_xor(result61, test_tup2"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Not a valid operation\"\n    res = []\n    for t in range(len(test_tup1)):\n        res.append(test_tup1[t] ^ test_tup2[t])\n    return tuple(res)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_unique_tuples = 0\n    for element in test_list:\n        num_unique_tuples += len(element)\n    return num_unique_tuples\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    totals = 0\n    for i in range(len(test_list)):\n        totals += len(test_list[i])\n    return totals\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for i in test_list:\n        count = 0\n        for j in range(len(i)):\n            if i[j][0] == '&':\n                count += 1\n            else:\n                break\n        for k in range(len(i)):\n            if i[k][0] == '&':\n                count += 1\n            else:\n                break\n        if count > 1:\n            return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = set(test_list)\n    freq = len(unique_tuple)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    import collections\n    freq = collections.Counter()\n    for tup in test_list:\n        freq[tup[0]] += 1\n    return(len(freq))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # use a dictionary to keep track of the number of unique tuples\n    # The function returns the number of unique tuples\n    # NOTE: you'll have to store the number of unique tuples in a variable\n    # and use it to compare to your answer\n    num_unique = 0\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    my_dict = Counter(test_list)\n    for key in my_dict:\n        if my_dict[key] == 1:\n            my_dict[key] = \"1\"\n    return len(my_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # complete this function\n    print(\"extract_freq()\")\n    freq = Counter()\n    for el in test_list:\n        freq[el]+=1\n    return len(freq.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    f_set = set()\n    for elt in test_list:\n        f_set.add((elt[0],elt[1]))\n    return len(f_set)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    add_tup = []\n    add_tup.append((test_tup1[0], test_tup2[0]))\n    add_tup.append((test_tup1[1], test_tup2[1]))\n    return add_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tuple(x + y for x,y in zip(tup1,tup2)) for tup1,tup2 in zip(test_tup1,test_tup2))\n    \n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('---Nested tuple addition---')\n    print('---')\n    for i in range(len(test_tup1)):\n        print('---', test_tup1[i])\n        print('---', test_tup2[i])\n        print('---')\n        test_tup1[i] = test_tup1[i] + test_tup2[i]\n        print(test_tup1[i])\n    print('---')\n    print(test_tup1)\n    print('---')\n    print(test_tup2)\n    print('---')\n    print(test_tup1[0])\n    print('---')\n    print(test_tup2[0])\n    print('---')\n    print(test_tup1[1])\n    print('---')\n    print(test_tup2[1])\n    print('---')\n    print(test_tup1[2])\n    print('---')\n    print(test_tup2[2])\n    print('---')\n    print(test_tup1[3])\n    print('---')\n    print(test_tup2[3])\n    print('---')\n    print(test_tup1[4])\n    print('---')\n    print(test_tup2[4])\n    print('---')\n    print(test_tup1[5])\n    print('---')\n    print(test_tup2[5])\n    print('---')\n    print(test_tup1[6])\n    print('---')\n    print(test_tup2[6])\n    print('---')\n    print(test_tup1[7])\n    print('---')\n    print(test_tup2[7])\n    print('---')\n    print(test_tup1[8])\n    print('---')\n    print(test_tup2[8])\n    print('---')\n    print(test_tup1[9])\n    print('---')\n    print(test_tup2[9])\n    print('---')\n    print(test_tup1[10])\n    print('---')\n    print(test_tup2[10])\n    print('---')\n    print(test_tup1[11])\n    print('---')\n    print(test_tup2[11])\n    print('---')\n    print(test_tup1[12])\n    print('---')\n    print(test_tup2[12])\n    print('---')\n    print(test_tup1[13])\n    print('---')\n    print(test_tup2[13])\n    print('---')\n    print(test_tup1[14])\n    print('---')\n    print(test_tup2[14])\n    print('---')\n    print(test_tup1[15])\n    print('---')\n    print(test_tup2[15])\n    print('---')\n    print(test_tup1[16])\n    print('---')\n    print(test_tup2[16])\n    print('---')\n    print(test_tup1[17])\n    print('---')\n    print(test_tup2[17])\n    print('---')\n    print(test_tup1[18])\n    print('---')\n    print(test_tup2[18])\n    print('---')\n    print(test_tup1[19])\n    print('---')\n    print(test_tup2[19])\n    print('---')\n    print(test_tup1[20])\n    print('---')\n    print(test_tup2[20])\n    print('---')\n    print(test_tup1[21])\n    print('---')\n    print(test_tup2[21])\n    print('---')\n    print(test_tup1[22])\n    print('---')\n    print(test_tup2[22])\n    print('---')\n    print(test_tup1[23])\n    print('---')\n    print(test_tup2[23])\n    print('---')\n    print(test_tup1[24])\n    print('---')\n    print(test_tup2[24])\n    print('---')\n    print(test_tup1[25])\n    print('---')\n    print(test_tup2[25])\n    print('---')\n    print(test_tup1[26])\n    print('---')\n    print(test_tup2[26])\n    print('---')\n    print(test_tup1[27])\n    print('---')\n    print(test_tup2[27])\n    print('---')\n    print(test_tup1[28])\n    print('---')\n    print(test_tup2[28])\n    print('---')\n    print(test_tup1[29])\n    print('---')\n    print(test_tup2[29])\n    print('---')\n    print(test_tup1[30])\n    print('---')\n    print(test_tup2[30])\n    print('---')\n    print(test_tup1[31])\n    print('---')\n    print(test_tup2[31])\n    print('---')\n    print(test_tup1[32])\n    print('---')\n    print(test_tup2[32])\n    print('---')\n    print(test_tup1[33])\n    print('---')\n    print(test_tup2[33])\n    print('---')\n    print(test_tup1[34])\n    print('---')\n    print(test_tup2[34])\n    print('---')\n    print(test_tup1[35])\n    print('---')\n    print(test_tup2[35])\n    print('---')\n    print(test_tup1[36])\n    print('---')\n    print(test_tup2[36])\n    print('---')\n    print(test_tup1[37])\n    print('---')\n    print(test_tup2[37])\n    print('---')\n    print(test_tup1[38])\n    print('---')\n    print(test_tup2[38])\n    print('---')\n    print(test_tup1[39])\n    print('---')\n    print(test_tup2[39])\n    print('---')\n    print(test_tup1[40])\n    print('---')\n    print(test_tup2[40])\n    print('---')\n    print(test_tup1[41])\n    print('---')\n    print(test_tup2[41])\n    print('---')\n    print(test_tup1[42])\n    print('---')\n    print(test_tup2[42])\n    print('---')\n    print(test_tup1[43])\n    print('---')\n    print(test_tup2[43])\n    print('---')\n    print(test_tup1[44])\n    print('---')\n    print(test_tup2[44])\n    print('---')\n    print(test_tup1[45])\n    print('---')\n    print(test_tup2[45])\n    print('---')\n    print(test_tup1[46])\n    print('---')\n    print(test_tup2[46])\n    print('---')\n    print(test_tup1[47])\n    print('---')\n    print(test_tup2[47])\n    print('---')\n    print(test_tup1[48])\n    print('---')\n    print(test_tup2[48])\n    print('---')\n    print(test_tup1[49])\n    print('---')\n    print(test_tup2[49])\n    print('---')\n    print(test_tup1[50])\n    print('---')\n    print(test_tup2[50])\n    print('---')\n    print(test_tup1[51])\n    print('--"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    if test_tup1 is None:\n        return test_tup2\n    if test_tup2 is None:\n        return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('\\n', test_tup1, 'and', test_tup2, 'are: \\n', test_tup1 + test_tup2, '\\n')\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # We will use a for loop to iterate over all the items in the two tuples.\n    # The for loop will iterate over all the items and add the corresponding items to the resulttuple.\n    # This way, we can run a for loop over the two tuples and obtain the resulttuple.\n    # We can then iterate through the two tuples one time.\n    # Then we will use the add method to add the corresponding items.\n    # We will use the.append method to add the item in the resulttuple.\n    # Now, we will call the.extend method to add the item in the resulttuple.\n    # And now we will call the.insert method to add the item in the resulttuple.\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # TODO: Write code that performs the following operations\n    # 1. Add the tuples.\n    # 2. Add the tuples.\n    # 3. Add the tuples.\n    # 4. Add the tuples.\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #returns tuple\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize empty list of tuples\n    test_tup1_list = []\n    test_tup2_list = []\n    # Recursively call add_nested_tuples function with two tuples\n    add_nested_tuples(test_tup1, test_tup2)\n    # Append the tuples to the appropriate list\n    test_tup1_list.append(tuple(test_tup1))\n    test_tup2_list.append(tuple(test_tup2))\n    # Return the new list of tuples\n    return test_tup1_list, test_tup2_list\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a == b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=a+b\n    print(a)\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    while a<b:\n        if a>0 and b>0:\n            a -= a % 10\n            b -= b % 10\n        elif a<0 and b<0:\n            b += b % 10\n        else:\n            a += a % 10\n            b += b % 10\n    return a, b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a) is not int or type(b) is not int:\n        return -1\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return a\n    m=a\n    while a>b:\n        a=a-b\n        m=m\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        min_a=a\n        min_b=b\n    else:\n        min_b=a\n        min_a=b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # your code goes here\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        a,b = b,a\n    min = a\n    if (a==0 or b==0):\n        return 0\n    for i in range(b,0,-1):\n        if (a%i==0 and b%i==0):\n            min = i\n            break\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    c=a\n    if b>c:\n        c=b\n        b=a\n    return b\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #create an empty list to insert tuples into\n    list_tuplex=[]\n    #loop over tuple to insert the tuple into a list\n    for index,value in enumerate(tuplex):\n        list_tuplex.append(value)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_list = []\n    tuplex_list = tuplex.tuple_values()\n    for tuplex_item in tuplex_list:\n        if tuplex_item in tuple1:\n            return True\n        return False\ndef check_list(list,tuple_item):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    list_list = []\n    list_list = list.list_values()\n    for list_item in list_list:\n        if list_item in tuple_item:\n            return True\n        return False\ndef check_dict(dict,tuple_item):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    dict_list = []\n    dict_list = dict.dict_values()\n    for dict_item in dict_list:\n        if dict_item in tuple_item:\n            return True\n        return False\ndef check_dict_keys(dict,tuple_item):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    dict_list = []\n    dict_list = dict.dict_values()\n    for dict_item in dict_list:\n        if dict_item in tuple_item.keys():\n            return True\n        return False\ndef check_dict_values(dict,tuple_item):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    dict_list = []\n    dict_list = dict.dict_values()\n    for dict_item in dict_list:\n        if dict_item in tuple_item.values():\n            return True\n        return False\ndef check_dict_contains(dict,tuple_item):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    dict_list = []\n    dict_list = dict.dict_values()\n    for dict_item in dict_list:\n        if dict_item in tuple_item:\n            return True\n        return False\ndef check_str_contains(string,tuple_item):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    string_list = []\n    string_list = string.str_values()\n    for string_item in string_list:\n        if string_item in tuple_item:\n            return True\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple(tuplex) == tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem not in tuple1:\n            return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    flag = False\n    for x in tuplex:\n        if tuplex.count(x)>1:\n            flag = True\n    if flag == True:\n        flag1 = False\n        for y in tuple1:\n            if tuple1.count(y)>1:\n                flag1 = True\n        if flag1 == True:\n            flag2 = False\n            for z in tuplex:\n                if tuplex.count(z)>1:\n                    flag2 = True\n        if flag2 == True:\n            print('TUPLE EXISTS!')\n        else:\n            print('TUPLE DOESN\\'T EXISTS!')\n    else:\n        print('TUPLE ISN\\'T EACH ELEMENT IN A TUPLE!')\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check whether tuple is empty\n    if tuple1 == ():\n        return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # iterate over the list to determine whether the element in the tuple exists\n    for i in range(0,len(tuplex)): \n        # check whether the element in the tuple exists\n        if tuplex[i] == tuple1: \n            # if so, return the index of the tuple. Return -1 if not found. \n            return i \n    return -1 \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        i = 0\n        if tuplex[i] in tuple1:\n            return True\n        else:\n            return False\n    except IndexError:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Get the number\n    x = int(x)\n    if x % 2 == 1:\n        # Return true\n        return True\n    else:\n        # Return false\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if all of the digits are even \n    # if so return False, else return True\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n    \ndef find_Even(x): \n    '''\n    Write a python function to check whether a given number is even.\n    '''\n    # check if all of the digits are even \n    # if so return False, else return True\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n    \ndef find_Odd(x): \n    '''\n    Write a python function to check whether a given number is odd.\n    '''\n    # check if all of the digits are odd \n    # if so return False, else return True\n    if x % 2!= 0:\n        return False\n    else:\n        return True\n    \n    \ndef main():\n    print(\"Parity checker\")\n    print(\"Type q to quit\")\n    x = int(input(\"Enter a number: \"))\n    while x!= 'q':\n        if find_Parity(x) == True:\n            print(\"%d is a Parity\" % x)\n        elif find_Parity(x) == False:\n            print(\"%d is an Odd\" % x)\n        elif find_Even(x) == True:\n            print(\"%d is an Even\" % x)\n        elif find_Odd(x) == True:\n            print(\"%d is an Odd\" % x)\n        x = int(input(\"Enter a number: \"))\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    print(\"Quitting...\")\n    prin"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # iterate over the number \n    for num in range(1,x+1): \n        if num % 2 == 0: \n            print(num, end ='') \n    print()\n    \nfind_Parity(9)"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0):\n        return x % 2\n    else:\n        return x % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #Your code goes here\n    if x % 2 == 0:\n        print('This is an odd number!')\n    else:\n        print('This is an even number!')\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'odd'\n    else:\n        return 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code here\n    if x%2 == 0:\n        print(x,\" is even\")\n    else:\n        print(x,\" is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum=0\n    for i in range(len(x)-1,0,-1):\n        sum += x[i]\n    if sum%2!=0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arranged_digits = []\n    for i in range(n, 1, -1):\n        arranged_digits.append(str(i)[::-1])\n    return int(\"\".join(arranged_digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    rem = []\n    for i in range(len(n)):\n        rem.append(n[len(n)-i-1])\n    for i in range(len(n)):\n        for j in range(len(rem)):\n            n[i] = str(n[i]) + rem[j]\n    return n\n    \ndef three(n):\n    '''\n    Write a function to check whether the sum of the digits of the next bigger number is equal to the sum of the digits of the previous bigger number.\n    '''\n    # List comprehension\n    # return [int(i) for i in str(n[0])] + [int(i) for i in str(n[1])] + [int(i) for i in str(n[2])]\n    # return [int(i) for i in str(n[0])] + [int(i) for i in str(n[1])] + [int(i) for i in str(n[2])]\n    # return [int(i) for i in str(n[0])] + [int(i) for i in str(n[1])] + [int(i) for i in str(n[2])]\n    \n    # Format the digits of the next bigger number into a string\n    # remove all the digits in the number\n    # add the previous digits to the list\n    # return the sum of digits of the next bigger number\n    # do the same to the previous digits\n    # return the sum of the digits of the next bigger number\n    \n    digits = []\n    sum = 0\n    for i in str(n[0]):\n        digits.append(int(i))\n    for i in str(n[1]):\n        digits.append(int(i))\n    for i in str(n[2]):\n        digits.append(int(i))\n    \n    # Remove all the digits in the number\n    # add the previous digits to the list\n    # return the sum of digits of the next bigger number\n    return sum(digits[:-1]) + sum(digits[1:])\n    \ndef sorted_digits(n):\n    '''\n    Write a function to calculate the next bigger number by sorting the digits of a given number.\n    '''\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    digits.sort()\n    return digits[-1]\n    \ndef check(n,j):\n    '''\n    Write a function to calculate the next bigger number by checking whether the number of the digits of the next bigger number has to be less than or equal to j.\n    '''\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    digits.sort()\n    return digits[-j]\n    \ndef binary_search(n,j):\n    '''\n    Write a function to check whether a given number has the next bigger number.\n    '''\n    # generate a list of digits\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    digits.sort()\n    \n    # find the index of the next bigger number\n    start = 0\n    end = len(digits) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if digits[mid] < n:\n            start = mid + 1\n        elif digits[mid] > n:\n            end = mid - 1\n        else:\n            return True\n    \n    # there is no next bigger number\n    return False\n    \ndef iterate_arr(n):\n    '''\n    Write a function to check whether a given number has the next bigger number.\n    '''\n    # generate a list of digits\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    digits.sort()\n    \n    # find the index of the next bigger number\n    start = 0\n    end = len(digits) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if digits[mid] < n:\n            start = mid + 1\n        elif digits[mid] > n:\n            end = mid - 1\n        else:\n            return True\n    \n    # there is no next bigger number\n    return False\n    \ndef main():\n    while True:\n        try:\n            n = int(input('Give me a number: '))\n            print('The next bigger number is: ', end='')\n            print(rearrange_bigger(n))\n            print('The next bigger number is: ', end='')\n            print(three(n))\n            print('The next bigger number is: ', end='')\n            print(sorted_digits(n))\n            print('The next bigger number is: ', end='')\n            print(check(n,3))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,3))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,4))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,5))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,6))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,7))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,8))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,9))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,10))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,11))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,12))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,13))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,14))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,15))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,16))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,17))\n            print('The next bigger number is: ', end='')\n            print(iterate_arr(n))\n            print('The next bigger number is: ', end='')\n            print(binary_search(n,18))\n            print('The next bigger number is: ', end='')\n            prin"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return str(0) + str(n)[::-1]\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        if n%10<10:\n            n+=1\n        else:\n            n+=10\n            n-=10\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def bigger(n):\n        return n % 10\n    for i in range(n):\n        n = n // 10\n        s = str(n)\n        if s[i]!= '0':\n            continue\n        else:\n            return n\n    return 0\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    current_bigger_digit = 10\n    for i in range(1, n+1):\n        number = int(str(i) * current_bigger_digit)\n        if number > 9:\n            temp = number % 10\n            number = number // 10\n            temp = temp * 10 + temp * 9\n            print(temp)\n        else:\n            number = number * 10\n            print(number)\n        current_bigger_digit = current_bigger_digit * 10\n    return number\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_in_base10 = n[-1]\n    n = n[:-1]\n    n = n[::-1]\n    n = n + n_in_base10\n    return int(n)"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # https://www.geeksforgeeks.org/rearrange-digits-to-the-next-bigger-number-in-python/\n    # https://www.w3resource.com/python-exercises/python-basic-exercises.php\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    remainder = n % 10\n    n = n // 10\n    remainder = remainder % 10\n    for _ in range(2):\n        remainder = remainder * 10 + remainder % 10\n    n = remainder\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 9:\n        return n\n    else:\n        return n % 10 + rearrange_bigger(n // 10)\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # heap_size should be pre-allocated, so that the heap will always consist of the first elements of the arrays\n    heap = []\n    heapq.heapify(heap)\n    for num in nums1:\n        heapq.heappush(heap, (abs(nums1.index(num) - nums2.index(num)), num))\n    \n    # make a list of k elements, which will be put in the heap\n    k_smallest_array = []\n    for _ in range(k):\n        smallest_heap = heapq.heappop(heap)\n        smallest_heap_index = smallest_heap[1]\n        k_smallest_array.append(smallest_heap_index)\n        heapq.heappush(heap, (smallest_heap[0], smallest_heap_index))\n        \n    # return the list of k elements\n    return k_smallest_array"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    k = set(k)\n    \n    for i in range(0, len(nums1)):\n        for j in range(i, len(nums2)):\n            if nums1[i] + nums2[j] in k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n    \n    return len(min_heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #solution 1:\n    #use heap to sort\n    \n    #initially we have to find the smallest and the smallest pair\n    #then we keep iterating for the second array till we reach the end of first array \n    #then we append the smallest pair to the answer\n    #the second array is the smallest pair till now\n    \n    smallest = None\n    smallest_pair = None\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if smallest == None:\n                smallest = nums1[i]\n                smallest_pair = nums2[j]\n            elif smallest[0] > nums1[i][0] and smallest[1] > nums2[j][0]:\n                smallest = nums1[i]\n                smallest_pair = nums2[j]\n            elif smallest[0] > nums1[i][0] and smallest[1] < nums2[j][0]:\n                smallest = nums1[i]\n                smallest_pair = nums2[j]\n            elif smallest[0] < nums1[i][0] and smallest[1] < nums2[j][0]:\n                smallest = nums1[i]\n                smallest_pair = nums2[j]\n            elif smallest[0] < nums1[i][0] and smallest[1] > nums2[j][0]:\n                smallest = nums1[i]\n                smallest_pair = nums2[j]\n    return smallest_pair, smallest\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pair = []\n    for i in nums1:\n        for j in nums2:\n            if i!= j:\n                pair.append([i,j])\n                break\n    if len(pair) == 0:\n        return 0\n    pair.sort()\n    return len(pair)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # O(n1+n2)\n    # O(n2)\n    heap = []\n    for num1 in nums1:\n        #O(n1)\n        heapq.heappush(heap, (num1, num1))\n    for num2 in nums2:\n        #O(n2)\n        heapq.heappush(heap, (num2, num2))\n    pairs = []\n    while heap:\n        pairs.append(heapq.heappop(heap))\n    return pairs[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a heap\n    heap = []\n    \n    #Build the heap\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    \n    for i in range(len(nums2)):\n        heapq.heappush(heap, (nums2[i], i))\n        \n    #Check for pair\n    while len(heap) > k:\n        small = heapq.heappop(heap)\n        small_index = small[1]\n        small_item = small[0]\n        if len(heap) > 0:\n            heapq.heappush(heap, (nums1[small_index], small_index))\n            heapq.heappush(heap, (nums2[small_index], small_index))\n            \n        else:\n            return (small_item, 0)\n            \n    #If we reach this point, then the smallest pair is all in the heap.\n    return (0, 0)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # In this code we'll iterate through both arrays and keep track of the number of elements in each array\n    k = min(k, len(nums1) + len(nums2))\n    # We'll first create a min heap to store the numbers in the first array\n    h1 = []\n    for i in nums1:\n        heapq.heappush(h1, i)\n    # We'll also keep track of the number of elements in the second array\n    h2 = []\n    for j in nums2:\n        heapq.heappush(h2, j)\n    # We'll compare the number of elements in each heap to the number of elements in second heap\n    # We'll keep track of the number of smaller elements\n    smaller_element = 0\n    for i in range(k):\n        smaller_element += min(h1[i], h2[i])\n    # We'll return the number of elements in the smallest array\n    return smaller_element\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if(len(nums1) > len(nums2)):\n        index_arr1 = []\n        index_arr2 = []\n        for i in range(len(nums1)):\n            index_arr1.append(i)\n        for i in range(len(nums2)):\n            index_arr2.append(i)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    heap = []\n    # we will find the k smallest numbers\n    # and put them in a heap\n    # to do this we can use heappush which stores the smallest numbers and the index of the smallest numbers\n    # and the heapq.heappush we can access the smallest numbers and insert them to the heap\n    \n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i]*nums2[i], i, nums1[i]))\n    \n    # we will access the smallest numbers and remove them from the heap\n    for i in range(k):\n        smallest_index = heapq.heappop(heap)[2]\n        smallest_value = heapq.heappop(heap)[1]\n        smallest_nums1 = nums1[smallest_index]\n        smallest_nums2 = nums2[smallest_index]\n        heapq.heappush(heap, (smallest_value*smallest_nums2, smallest_index, smallest_nums1))\n    \n    # if the input array is empty it means that all the elements are the same, so return an empty array\n    if heap == []:\n        return []\n    \n    # the smallest numbers are returned in the array\n    return heap\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        heapq.heappush(heap, num1)\n    for num2 in nums2:\n        heapq.heappush(heap, num2)\n    \n    d = {}\n    for num in heap:\n        if num not in d.keys():\n            d[num] = 1\n        else:\n            d[num] += 1\n    \n    result = []\n    for num in d:\n        if d[num] == k:\n            result.append((num, d[num]))\n    result.sort()\n    \n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return\n    elif len(list1) == 2:\n        return (list1[0][0] * list1[1][1])\n    else:\n        list1.sort()\n        summation = 0\n        for i in range(0, len(list1) - 1):\n            for j in range(i + 1, len(list1)):\n                summation += list1[i][0] * list1[j][1]\n        return (list1[0][0] * list1[len(list1) - 1][1]) + summation\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple1 = tuple1 = ()\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if tuple1 < list1[i][j]:\n                tuple1 = (list1[i][0], list1[j][0])\n                tuple2 = (list1[i][1], list1[j][1])\n    return min(tuple1, tuple2)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = list()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if(list1[i][0]*list1[j][0])<(list1[i][1]*list1[j][1]):\n                products.append(list1[i])\n                products.append(list1[j])\n    return min(products)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_val = sys.maxsize\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            min_val = min(list1[i][1]*list1[j][1],min_val)\n    return min_val\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_price=100000000\n    min_tuple=[]\n    for i in list1:\n        for j in list1:\n            if i[0]<j[0] and i[1]<j[1]:\n                tuple=i+j\n                if tuple[0]<min_price and tuple[1]<min_price:\n                    min_price=tuple[0]\n                    min_tuple=tuple\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]\n    min_product_index = 0\n    for i in range(1,len(list1)):\n        if list1[i][0] < list1[min_product_index][0]:\n            min_product = list1[i]\n            min_product_index = i\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    s1 = set(list1)\n    product = 1\n    for i in list1:\n        product = product * i\n    print('The minimum product is: ', product)\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][1]\n    for i in range(len(list1)):\n        if list1[i][1] < min_product:\n            min_product = list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_tuple = None\n    min_value = None\n    for tuple_1 in list1:\n        for tuple_2 in list1:\n            if tuple_1[0] <= tuple_2[0] and tuple_1[1] <= tuple_2[1]:\n                if min_value == None:\n                    min_tuple = tuple_1\n                    min_value = min_tuple[1]\n                elif min_value < tuple_1[1]:\n                    min_tuple = tuple_1\n                    min_value = min_tuple[1]\n    return min_value\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            min_product.append(list1[i][0]*list1[j][0])\n    return min(min_product)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return -1\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        smallest = listval[0]\n        for element in listval:\n            if smallest > element:\n                smallest = element\n        return smallest\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=listval[0]\n    for i in listval:\n        if i<min_val:\n            min_val=i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_index = 0\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n            min_index = i\n    return min_index\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_index = 0\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n            max_index = i\n    return max_index\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0];\n    for i in range(len(listval)):\n        if min>listval[i]:\n            min=listval[i];\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = 0\n    for val in listval:\n        if(min > val):\n            min = val\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = 0\n    for i in range(len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l=[]\n    for i in listval:\n        l.append(i)\n    return l[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for val in listval:\n        if val < minimum:\n            minimum = val\n    return minimum\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.match(r'^[A-Z]+$',word):\n        return word.upper()\n    elif re.match(r'^[A-Z]+$', word.title()):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    else:\n        return word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if re.match(r'^[A-Z]+$',word):\n        return word.lower()\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.lower()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.title()\n    else:\n        return word\ndef remove_dash(word):\n    '''\n    Write a function to remove the dash from the given string.\n    '''\n    if re.match(r'^[A-Z]+$', word):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.replace('-',' ')\n    elif re.match(r'^[A-Z]+\\.', word.title()):\n        return word.replace('-',' ')\n    else:\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    w = re.sub('[^A-Za-z0-9_]', '', word)\n    l = []\n    while len(w) > 0:\n        if w[0].isupper():\n            l.append(w[0] + w[1])\n            w = w[2:]\n        else:\n            w = w[1:]\n            l.append(w[0] + w[1])\n            w = w[2:]\n    return \"\".join(l)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # your code goes here\n    # replace the string\n    # print(re.sub(\"([a-z])([A-Z])([a-z])\", \"\\\\1_\\\\2_\\\\3\", word))\n    # replace the string\n    # return the replaced string\n    return re.sub(\"([a-z])([A-Z])([a-z])\", \"\\\\1_\\\\2_\\\\3\", word.lower())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    l = []\n    i = 0\n    dic = dict()\n    while i < len(word):\n        if word[i].isupper():\n            l.append(word[i].lower())\n        elif word[i].islower():\n            l.append(word[i].upper())\n        elif word[i].isdigit():\n            l.append(word[i])\n        else:\n            l.append(word[i])\n        i += 1\n    l = \"\".join(l)\n    return l\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word.lower())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_dict = {\"a\": \"A\", \"e\": \"E\", \"i\": \"I\", \"o\": \"O\", \"u\": \"U\", \"y\": \"Y\"}\n    camel_word = \"\"\n    for letter in word:\n        if letter == \"_\" or letter in word_dict:\n            camel_word += word_dict[letter]\n        else:\n            camel_word += letter\n    return camel_word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # make a regex pattern\n    # used to find snake case\n    snake_case_pattern = re.compile('(.)([A-Z][a-z]+)')\n    # make a substitution\n    # used to convert snake case to camel case\n    # regex does not require the enclosing curly braces,\n    # so we don't need curly braces in the substitution\n    substitution = re.compile('([a-z][A-Z]+)')\n    # return the result\n    return substitution.sub(lambda m: m.group(1).upper(), snake_case_pattern.sub(lambda m: substitution.sub(lambda m: m.group(1).lower(), m.group(2)), word))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(?=[A-Z])', '_', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort(reverse=True)\n    i=0\n    while i<len(l):\n        if l[i]%2!=0:\n            l.remove(l[i])\n        else:\n            i+=1\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    l_to_remove = []\n    i = 0\n    while(i<len(l)):\n        if l[i]%2 == 1:\n            l_to_remove.append(l[i])\n            i = i+1\n        else:\n            i = i + 1\n    return l_to_remove\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_lst = []\n    for i in l:\n        if i % 2 == 0:\n            odd_lst.append(i)\n    return odd_lst\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    odd_count = 0\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l[i] = l[i] // 2\n            odd_count += 1\n    if odd_count % 2 == 1:\n        return (l)\n    else:\n        return (l)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    if len(l)%2==0:\n        l_even=l[::2]\n        l_odd=l[1::2]\n        print(l_even)\n        print(l_odd)\n        l_even.sort()\n        l_odd.sort()\n        print(l_even)\n        print(l_odd)\n        return [l_even,l_odd]\n    else:\n        print(\"No odd numbers found\")\n        return []\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1=[]\n    for i in l:\n        if i%2==0:\n            l1.append(i)\n    print(l1)\n    return l1"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Use a for loop to iterate over the list.\n    # Find the index of the first occurance of 0.\n    # Add this index to a list.\n    # Add that index to the end of the list.\n    # Return the list.\n    # >>> l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # >>> list(filter(lambda x: x % 2 == 0, l))\n    # [1, 3, 5]\n    # >>> list(filter(lambda x: x % 2 == 0, l))\n    # [2, 4, 6]\n    # >>> list(filter(lambda x: x % 2 == 1, l))\n    # [1, 3, 5, 7, 9]\n    odd_nums = [x for x in l if x % 2 == 1]\n    l.extend(odd_nums)\n    l.sort()\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2!=0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not l:\n        return []\n    odd = []\n    for i in l:\n        if not i % 2:\n            odd.append(i)\n    return odd\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    first_index = 0\n    second_index = 1\n    last_index = len(list1) - 1\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Write your code here.\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        print(f'Index {n} out of range. Did you forget to pass a valid value?')\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < len(list1):\n        return list1[n]\n    else:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if not list1:\n            return None\n        list1.sort()\n        if n == 1:\n            return list1[0]\n        elif n == 2:\n            return list1[0][1]\n        else:\n            lst = list1[0]\n            for i in range(n - 2):\n                lst = lst[1]\n            return lst[1]\n    except Exception as e:\n        print(e)\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    index = 0\n    while index <= len(list1):\n        index += 1\n        if len(list1) - index <= n:\n            return list1[index - 1]\n    else:\n        return None\n    \nprint(extract_nth_element([(1, 2), (1, 3), (2, 4)], 2))\nprint(extract_nth_element([(1, 2), (1, 3), (2, 4), (5, 6), (7, 8), (9, 10)], 2))\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 1:\n        return list1[0]\n    else:\n        return list1[-1][n - 1]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Initialize a list to hold all values that occur in both the lists\n    val_list = []\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #initializing a empty list\n    final_list = []\n    #if length of two lists are the same\n    if len(list1) == len(list2):\n        for x in list1:\n            for y in list2:\n                if x == y:\n                    final_list.append(x)\n        if len(list1) == len(final_list):\n            print(\"Both lists are the same length\")\n        else:\n            print(\"The list is not completely equivalent\")\n    else:\n        print(\"The two lists are not equal length\")\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overall=0\n    for item in list1:\n        if item in list2:\n            overall=overall+1\n    return overall\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    from itertools import combinations\n    def check(lst):\n        for i in list(combinations(lst, r=2)):\n            if i == list(lst):\n                return True\n    if check(list1) or check(list2):\n        return True\n    else:\n        return False\n    \nprint(overlapping([1,2,3,4],[5,6,7,8])"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if any(list1[i]<=list2[i] for i in range(len(list1))):\n        return True\n    else:\n        return False\n    \ndef intersection(list1,list2):\n    '''\n    Write a python function to return the intersection of two lists.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    return list(set(list1).intersection(set(list2)))\n    \ndef union(list1,list2):\n    '''\n    Write a python function to return the union of two lists.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    return list(set(list1).union(set(list2)))\n    \ndef contains(list1,list2):\n    '''\n    Write a python function to check if any value in a sequence is present in another sequence.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    return list1.__contains__(list2)\n    \ndef replace(list1,list2,list3):\n    '''\n    Write a python function to replace the value in a list.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    list3 = list(list3)\n    list1.extend(list2)\n    list1.extend(list3)\n    list1 = list(set(list1))\n    list1 = list(set(list1))\n    return list1\n    \ndef delete(list1,list2):\n    '''\n    Write a python function to delete a value from a list.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    list1.remove(list2[0])\n    list1.remove(list2[1])\n    return list1\n    \ndef reverse(list1):\n    '''\n    Write a python function to return a list of all the elements from the original list.\n    '''\n    list1 = list(list1)\n    list1.reverse()\n    return list1\n    \ndef partition(list1,list2):\n    '''\n    Write a python function to return a new list that contains all values that appear in a given list or string.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    list1.sort()\n    list2.sort()\n    list1.append(list2[0])\n    list1.append(list2[1])\n    return list1\n    \ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return string == string[::-1]\n    \ndef isprime(number):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    else:\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n    \ndef insert(list1,list2,list3):\n    '''\n    Write a python function to insert the given values into a list.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    list3 = list(list3)\n    list1.extend(list2)\n    list1.extend(list3)\n    list1 = list(set(list1))\n    list1 = list(set(list1))\n    return list1\n    \ndef isSum(num1,num2):\n    '''\n    Write a python function to check whether a given sum is a number or not.\n    '''\n    return num1 + num2 == num1 + num2 + num1 + num2 + num1 + num2\n    \ndef factorial(num):\n    '''\n    Write a python function to return the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(num,0,-1):\n        factorial *= i\n    return factorial\n    \ndef fibonacci(num):\n    '''\n    Write a python function to return the Fibonacci of a given number.\n    '''\n    if num <= 1:\n        return num\n    return fibonacci(num - 1) + fibonacci(num - 2)\n    \ndef fibonacci_r(num):\n    '''\n    Write a python function to return the Fibonacci of a given number using recursive.\n    '''\n    if num == 1 or num == 0:\n        return num\n    return fibonacci_r(num - 1) + fibonacci_r(num - 2)\n    \ndef fibonacci_gen(num):\n    '''\n    Write a python function to return the Fibonacci of a given number using generator function.\n    '''\n    if num == 0 or num == 1:\n        yield num\n        return\n    yield fibonacci_gen(num - 1) + fibonacci_gen(num - 2)\n    \ndef fibonacci_gen_r(num):\n    '''\n    Write a python function to return the Fibonacci of a given number using generator function.\n    '''\n    if num == 0 or num == 1:\n        yield num\n        return\n    for i in range(num - 1):\n        yield fibonacci_gen_r(i + 1) + fibonacci_gen_r(i + 2)\n        \ndef is_prime(n):\n    '''\n    Write a python function to return whether a number is a prime or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to return whether a number is a prime or not.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0 and n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 5):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_primes(n):\n    '''\n    Write a python function to return whether a number is a prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef product_list(L1, L2):\n    '''\n    Write a python function to return the product of two lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in L1:\n        if i in L2:\n            list1.append(i)\n    for i in L2:\n        if i not in list1:\n            list2.append(i)\n    return list1, list2\n    \ndef add(a,b):\n    '''\n    Write a python function to add the two values of a given number.\n    '''\n    a = int(a)\n    b = int(b)\n    return a + b\n    \ndef remove(L, elem):\n    '''\n    Write a python function to remove the first occurrence of a given value in a given list.\n    '''\n    L = list(L)\n    L.remove(elem)\n    return L\n    \ndef remove_index(L, elem):\n    '''\n    Write a python function to remove a value in a given list by index.\n    '''\n    L = list(L)\n    L.remove(elem)\n    return L\n    \ndef remove_slice(L, start, end):\n    '''\n    Write a python function to remove a value in a given list by a slice.\n    '''\n    L = list(L)\n    L.remove(L[start])\n    L.remove(L[end])\n    return L\n    \ndef remove_range(L, start, end):\n    '''\n    Write a python function to remove a value in a given list by a range.\n    '''\n    "
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # copy of list\n    result = list1 + list2\n    # make a set\n    result.sort()\n    # compare all values in the list\n    return result.count(list2) == 0\n    #if all the values in the list are the same\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=0\n    for i in list1:\n        if i in list2:\n            result+=1\n    return result>0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    total_product = 0\n    for i in arr: \n        total_product = total_product*i\n    return total_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # declare empty array\n    max_product = []\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = len(arr)\n    max_p = -1\n    for i in range(l):\n        for j in range(i+1,l):\n            if(arr[i]*arr[j]) > max_p:\n                max_p = arr[i]*arr[j]\n                max_index = i\n                min_index = j\n    return (max_index,max_p)"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return -1\n    max_Product = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_Product:\n                max_Product = product\n                result = [i,j]\n    return result"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Write your code here\n    n = len(arr)\n    for i in range(n):\n        max_product = arr[i]*(i+1)\n        for j in range(i,n):\n            max_product = max(max_product,arr[j]*(j+1))\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = -9999999999\n    max_num_index = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] * arr[j] > max_num:\n                max_num = arr[i] * arr[j]\n                max_num_index = i\n    return max_num_index\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                result = [arr[i], arr[j]]\n    return result\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1:\n        return (-1, -1)\n    max_Product = -1\n    \n    arr.sort()\n    \n    # we have found a pair with maximum product\n    for i in range(len(arr)-1):\n        \n        left = arr[i]\n        right = arr[i+1]\n        # if this is a pair, then we need to find the minimum product of left and right\n        if left * right > 0:\n            \n            return (left, right)\n    \n    # if no pairs were found, return (-1, -1)\n    return (-1, -1)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    prod = arr[0]*arr[1]\n    count = 1\n    for i in range(1,len(arr)):\n        if arr[i]*prod > arr[i-1]:\n            prod = arr[i]*arr[i-1]\n            count = i\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #create a empty dictionary and set the length of the array to be 2 \n    max_dict = {}\n    length = 2\n    #create a for loop to iterate over all the elements of the array.\n    for i in arr:\n        #if the element is not in the dictionary, append it to the dictionary.\n        if i not in max_dict:\n            max_dict[i] = i\n        #if the element is already in the dictionary, add the number that is smaller to the dictionary.\n        else:\n            if i < max_dict[i]:\n                max_dict[i] = i\n    #return the max_product\n    return max_dict\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # util = collections.Counter(Input)\n    # return util.most_common(1)[0][0]\n    list = []\n    for tup in Input:\n        list.append(tup[0])\n    return list[0]\n    \ndef average_length_dict(dict):\n    '''\n    Return the average length of the given dictionary.\n    '''\n    list = []\n    for k, v in dict.items():\n        list.append(v)\n    return sum(list)/len(list)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort(reverse = True)\n    Result = []\n    for i in range(len(Input)):\n        if i == 0: Result.append(Input[i])\n        if Input[i] == Input[i+1]: Result.append(Input[i])\n        else: \n            while len(Result) > 0 and (Input[i]!= Result[-1]): Result.pop()\n            Result.append(Input[i])\n    return Result\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[i])\n    \n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    li = []\n    for i in Input:\n        li.append(i[0])\n    return li\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list1 = Input[0:int(len(Input)/2)]\n    list2 = Input[int(len(Input)/2):]\n    for i in list1:\n        if i in list2:\n            return i\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    #make a list of tuples\n    input_tuples = []\n    for i in range(len(Input)):\n        input_tuples.append(Input[i])\n        \n    #get unique elements\n    Unique_elements = list(set(input_tuples))\n    \n    #list for the first element in Unique_elements\n    first_element = []\n    for i in range(len(Unique_elements)):\n        first_element.append(Unique_elements[i][0])\n    \n    return first_element\n    \ndef list_to_string(Input):\n    '''\n    Write a function that takes a list and returns a string of the list.\n    '''\n    #get list of tuples\n    Input = Input[:]\n    #make a list of strings\n    Output = []\n    for i in range(len(Input)):\n        Output.append(f'{Input[i][0]} {i+1} - {Input[i][1]} {Input[i][2]}')\n    return Output\n    \ndef save_to_csv(Input):\n    '''\n    Write a function that takes a list and saves the list to a csv file.\n    '''\n    #get list of tuples\n    Input = Input[:]\n    #make a list of strings\n    Output = []\n    for i in range(len(Input)):\n        Output.append([Input[i][0], i+1, Input[i][1], Input[i][2]])\n    \n    #create a csv file\n    with open(\"Output.csv\", 'w', newline=\"\") as f:\n        write = csv.writer(f)\n        write.writerows(Output)\n    \n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in Input:\n        if i not in Output:\n            Output.append(i)\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    input_arr = Input.split(\",\")\n    arr_len = len(input_arr)\n    result_arr = []\n    for i in range(arr_len):\n        result_arr.append(input_arr[i][0])\n    return(result_arr)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    def find_first(Input):\n        \n        for i in range(len(Input)):\n            if Input[i][0] == Input[0][0]:\n                return Input[i]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # taking the input as list \n    TUPLE_LIST = Input \n    # taking the first element \n    FIRST_ELEMENT = TUPLE_LIST[0] \n    # taking the second element \n    SECOND_ELEMENT = TUPLE_LIST[1] \n    # taking the third element \n    THIRD_ELEMENT = TUPLE_LIST[2] \n    # returning the common element \n    return SECOND_ELEMENT, FIRST_ELEMENT, THIRD_ELEMENT\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_length = len(lst)\n    max = lst[0]\n    index = 0\n    for i in range(1, lst_length):\n        if(lst[i] > max):\n            max = lst[i]\n            index = i\n    return(max, index)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #Create a copy of the list\n    lst1=lst[:]\n    max_length=0\n    for i in lst1:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n    \nif __name__ == \"__main__\":\n    lst=[1, 2, 3, 4, 5, 6]\n    print(Find_Max(lst)"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = -99999999999999\n    k = 0\n    for i in lst: \n        if max < i: \n            max = i\n            k = k + 1\n        if k > 1: \n            break\n    return max"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = lst[::-1]\n    return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #Code here \n    # get a new list of integers\n    # for item in lst:\n    #     print(item, end ='')\n    # print()\n    # Get the max element of the list \n    # for item in lst:\n    #     if item == max(lst):\n    #         return item\n    # return -1\n    \n    # Driver code \n    max_item = lst[0]\n    for item in lst:\n        if item > max_item:\n            max_item = item\n    return max_item\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i],2)\n    return list1\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    lenght = len(list1)\n    for num in list1:\n        total += num\n    return total / lenght\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return list1[0]\n    elif len(list1)==2:\n        return list1[0]*list1[1]\n    elif len(list1)==3:\n        return list1[0]*list1[1]*list1[2]\n    elif len(list1)==4:\n        return list1[0]*list1[1]*list1[2]*list1[3]\n    else:\n        return list1[0]*list1[1]*list1[2]*list1[3]*list1[4]\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for element in list1:\n        total += element\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    num_list = []\n    for num in list1:\n        num_list.append(round(num))\n    print(num_list)\n    return sum(num_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    num = []\n    sum = 0\n    for i in list1:\n        num.append(int(i))\n    for j in num:\n        sum = sum + j\n    print(sum*len(num))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    l = len(list1)\n    total = 0\n    for x in list1:\n        total += x\n    return total * l\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = 0\n    for item in list1:\n        sum_list += item\n    print(sum_list * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #initializing the sum\n    sum = 0\n    \n    #iterating over the list\n    for num in list1:\n        #applying the division\n        sum = sum + num / len(list1)\n    \n    #returning the sum\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n=int(n)\n    a=0\n    b=0\n    c=1\n    for i in range(1,n+1):\n        a=a+i*c\n        c+=1\n    for i in range(0,n-1):\n        b=b+i*a\n    return b\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==1 or n==2:\n        return n\n    else:\n        return n*(n+1)*(n+2)\n        \ndef odd_sum(n): \n    '''\n    Write a python function to find the odd sum of first n odd natural numbers.\n    '''\n    if n==1 or n==3:\n        return n\n    else:\n        return n*(n-1)*(n-2)\n        \ndef main(): \n    print(\"The cube sum is \", cube_Sum(int(input())))\n    print(\"The odd sum is \", odd_sum(int(input())))\n    \nif __name__==\"__main__\": \n    main() "
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum+=i**3\n        i+=1\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return int(n**0.5)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    import math\n    n = int(n)\n    cube_Sum = 0\n    for i in range(1, n+1):\n        cube_Sum = math.pow(i, 3)\n    return cube_Sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    n = int(input('Enter the total number of numbers to be entered'))\n    if n<=0:\n        print('Please enter a positive number')\n    else:\n        for i in range(1, n+1):\n            total = total + (i**3)\n        print('The sum of first ',n,' natural numbers is: ', total)\n        \ncube_Sum(6"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res_list = []\n    for i in test_tup:\n        res_list.append(i[0])\n        for j in range(1,len(i)):\n            res_list.append(i[j])\n    return tuple(res_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple = []\n    for i in range(len(test_tup)):\n        tuple.append(test_tup[i])\n    return tuple\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = tuple(test_tup)\n    return tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = tuple(map(lambda x: x[0] + \" \" + x[1], test_tup))\n    return tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out = ''\n    for i in test_tup:\n        out = out + '\"' + str(i) + '\"' + ','\n    return out[0:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(e) for e in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (','.join(list(test_tup)))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for e in test_tup:\n        result += e\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup[i] for i in range(len(test_tup)))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(0,n):\n        total += i **3\n    return total / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    square_list = []\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum_of_Cubes = 0\n    for i in range(1, n+1):\n        Sum_of_Cubes += i**3\n    return Sum_of_Cubes / (n * (n**2))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    i = 1\n    while i <= n:\n        avg += i**3\n        i += 1\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + i * i\n        i += 1\n    return sum / (n * n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Write your code here\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * find_Average_Of_Cube(n-1)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # loop for every natural number n\n    for i in range(1,n+1):\n        # sum of natural numbers starting from 1 to i\n        sum = 0\n        for j in range(1,i+1):\n            sum = sum + j\n        # average of all natural numbers\n        average = sum / i\n        return average"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0][-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    t_array = test_tuple[0].split(' ')\n    rear_index_tuple = ()\n    for elem in t_array:\n        if elem!= '':\n            rear_index_tuple += (int(elem),)\n    return rear_index_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for idx, element in enumerate(test_tuple):\n        if idx == len(test_tuple)-1:\n            rear_index.append(element)\n        else:\n            rear_index.append(element[idx+1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #return tuple with the rear index element\n    return tuple(test_tuple[i:i+3] for i in range(len(test_tuple)-3))\n    \ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    #return tuple with the front index element\n    return tuple(test_tuple[i:i+3] for i in range(len(test_tuple)-3))\n    \ndef get_rear_front(list_tuple):\n    '''\n    Write a function to extract the rear and front elements of each string in the given tuple.\n    '''\n    return tuple(test_tuple[i:i+3] for i in range(len(test_tuple)-3))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i][-1] == 'r':\n            rear_index.append(i)\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i][0]=='R':\n            return i\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # first pull out the rear list\n    rear_list = []\n    for j in range(0,len(test_tuple),2):\n        rear_list.append(test_tuple[j])\n    \n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # TODO\n    return test_tuple[0]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    test_list = []\n    for item in test_tuple:\n        if type(item) == str:\n            test_list.append(item.split(' ')[-1])\n    \n    return test_list\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for element in list1:\n        if element == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    l = []\n    for i in list1: \n        if i == x: \n            l.append(len(i))\n    return l\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for item in list1:\n        if item == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if sublist[x] == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # your code here\n    return list(filter(lambda x: not nums.count(x) % 2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # i is the starting index and j is the ending index.\n    i = 0\n    j = len(nums) - 1\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # assert isinstance(nums, list), \"Input must be a list\"\n    # assert len(nums) > 0, \"List must not be empty\"\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i % 2!= 0:\n            oddnumbers.append(i)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = list(filter(lambda num: not num % 2, nums))\n    return filtered_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 1:\n            nums.pop(i)\n            i = i - 1\n        i = i + 1\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            nums[i] = 0\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_list = list(filter(lambda x: x % 2!= 0, nums))\n    return filtered_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new = []\n    for i in nums:\n        if i % 2 == 1:\n            new.append(i)\n    return new\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if '-' in dt:\n        dt = dt.split('-')\n        if dt[2] == '0':\n            dt[2] = '00'\n        else:\n            dt[2] = '0' + dt[2]\n    if dt[1] == '0':\n        dt[1] = '00'\n    if dt[0] == '0':\n        dt[0] = '00'\n    if dt[1] == '0':\n        dt[1] = '00'\n    if dt[2] == '0':\n        dt[2] = '00'\n    if dt[0] == '0':\n        dt[0] = '00'\n    if dt[2] == '0':\n        dt[2] = '00'\n    dt[1] = dt[1].zfill(2)\n    dt[2] = dt[2].zfill(2)\n    dt = '{0}-{1}-{2}'.format(dt[0], dt[1], dt[2])\n    return dt\ndef remove_unnecessary_numbers(dt):\n    '''\n    Remove unnecessary number from a date.\n    '''\n    if dt[-2:] == '0':\n        dt = dt[:-2]\n    if dt[-1] == '0':\n        dt = dt[:-1]\n    if dt[-2:] == '00':\n        dt = dt[:-2]\n    if dt[-1] == '0':\n        dt = dt[:-1]\n    if dt[-2:] == '0':\n        dt = dt[:-2]\n    if dt[-1] == '0':\n        dt = dt[:-1]\n    dt = dt.lstrip('-0')\n    dt = dt.lstrip('-')\n    return dt\ndef change_datetime_format(dt):\n    '''\n    Write a function to convert a datetime format to dd-mm-yyyy format.\n    '''\n    if '-' in dt:\n        dt = dt.split('-')\n        if dt[2] == '0':\n            dt[2] = '00'\n        else:\n            dt[2] = '0' + dt[2]\n    if dt[1] == '0':\n        dt[1] = '00'\n    if dt[0] == '0':\n        dt[0] = '00'\n    if dt[1] == '0':\n        dt[1] = '00'\n    if dt[2] == '0':\n        dt[2] = '00'\n    if dt[0] == '0':\n        dt[0] = '00'\n    if dt[2] == '0':\n        dt[2] = '00'\n    dt[1] = dt[1].zfill(2)\n    dt[2] = dt[2].zfill(2)\n    dt = '{0}-{1}-{2}'.format(dt[0], dt[1], dt[2])\n    return dt\ndef get_service_time(dt):\n    '''\n    Read a date and time from service.\n    '''\n    service_date = dt.split('-')\n    service_time = service_date[2] + service_date[1] + service_date[0]\n    return service_time\ndef remove_white_space(dt):\n    '''\n    Remove the white space from a date.\n    '''\n    dt = dt.lstrip()\n    dt = dt.replace(' ', '')\n    return dt\ndef remove_multiple_spaces(dt):\n    '''\n    Remove multiple spaces from a date.\n    '''\n    dt = dt.lstrip(' ')\n    dt = dt.replace(' ', '')\n    return dt\ndef remove_non_digit(dt):\n    '''\n    Remove the non digit from a date.\n    '''\n    dt = dt.lstrip('0')\n    dt = dt.replace('0', '')\n    return dt\ndef convert_date_format(dt):\n    '''\n    Convert a date to dd-mm-yyyy format.\n    '''\n    if dt[-2:] == '0':\n        dt = dt[:-2]\n    if dt[-1] == '0':\n        dt = dt[:-1]\n    if dt[-2:] == '00':\n        dt = dt[:-2]\n    if dt[-1] == '0':\n        dt = dt[:-1]\n    if dt[-2:] == '00':\n        dt = dt[:-2]\n    if dt[-1] == '0':\n        dt = dt[:-1]\n    dt = dt.lstrip('-0')\n    dt = dt.lstrip('-')\n    return dt\ndef change_datetime_format(dt):\n    '''\n    Convert a datetime to dd-mm-yyyy format.\n    '''\n    if '-' in dt:\n        dt = dt.split('-')\n        if dt[2] == '0':\n            dt[2] = '00'\n        else:\n            dt[2] = '0' + dt[2]\n    if dt[1] == '0':\n        dt[1] = '00'\n    if dt[0] == '0':\n        dt[0] = '00'\n    if dt[1] == '0':\n        dt[1] = '00'\n    if dt[2] == '0':\n        dt[2] = '00'\n    if dt[0] == '0':\n        dt[0] = '00'\n    if dt[2] == '0':\n        dt[2] = '00'\n    dt[1] = dt[1].zfill(2)\n    dt[2] = dt[2].zfill(2)\n    dt = '{0}-{1}-{2}'.format(dt[0], dt[1], dt[2])\n    return dt\ndef get_service_time(dt):\n    '''\n    Read a date and time from service.\n    '''\n    service_date = dt.split('-')\n    service_time = service_date[2] + service_date[1] + service_date[0]\n    return service_time\ndef remove_non_digit(dt):\n    '''\n    Remove the non digit from a date.\n    '''\n    dt = dt.lstrip('0')\n    dt = dt.replace('0', '')\n    return dt\ndef get_service_date(dt):\n    '''\n    Read a date and time from service.\n    '''\n    service_date = dt.split('-')\n    service_date = service_date[0] + service_date[1] + service_date[2]\n    return service_date\ndef remove_invalid_date_format(dt):\n    '''\n    Remove invalid date format.\n    '''\n    if '-' in dt:\n        dt = dt.split('-')\n        if dt[2] == '0':\n            dt[2] = '00'\n        else:\n            dt[2] = '0' + dt[2]\n    if dt[1] == '0':\n        dt[1] = '00'\n    if dt[0] == '0':\n        dt[0] = '00'\n    if dt[1] == '0':\n        dt[1] = '00'\n    if dt[2] == '0':\n        dt[2] = '00'\n    if dt[0] == '0':\n        dt[0] = '00'\n    if dt[2] == '0':\n        dt[2] = '00'\n    dt = '{0}-{1}-{2}'.format(dt[0], dt[1], dt[2])\n    return dt\ndef get_service_time(dt):\n    '''\n    Read a date and time from service"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # The normal time format is [yyyy]MM[/dd][/hhmm]\n    # Note: dd/mm/yyyy will be replaced to dd-mm-yyyy.\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.find('-') == -1:\n        return dt\n    else:\n        year = dt[:4]\n        month = dt[4:6]\n        day = dt[6:8]\n        return '%s-%s-%s' % (year, month, day)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d,m,y = dt.split('-')\n    #replace d with dd, m with mm, y with yyyy\n    dd, mm, y = d.split('-')\n    #add 12 because d and y are 1 digit\n    dd, m, y = int(dd)+12, int(m), int(y)+int(y)+int(y)+int(y)+int(y)+int(y)+int(y)+int(y)\n    #replace y with yyyy\n    dt = d + '-' + m + '-' + y\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime(\"%d-%m-%Y\")\ndef is_valid_date(date_string):\n    '''\n    Write a function that takes a date in string format and checks whether it is a valid date\n    '''\n    is_valid_date = False\n    regex = r\"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\"\n    match = re.match(regex, date_string)\n    if match:\n        is_valid_date = True\n    else:\n        is_valid_date = False\n    return is_valid_date\ndef reform_name(name):\n    '''\n    Write a function that returns the name of the user using the name input.\n    '''\n    return name.title()\ndef set_date_format(dt):\n    '''\n    Write a function to change the format of date input\n    '''\n    return dt\ndef set_is_valid_date(date):\n    '''\n    Write a function to convert a date to an integer in the interval [0, 31].\n    '''\n    return date.isnumeric()\ndef check_user_input_valid(date_str):\n    '''\n    Write a function that checks whether the input date is a valid date\n    '''\n    if is_valid_date(date_str):\n        return date_str\n    else:\n        raise ValueError(\"Invalid date: '%s' is not a valid date.\" % date_str)\ndef check_user_input_format(date_str):\n    '''\n    Write a function that checks whether the input date is a valid date format\n    '''\n    return is_valid_date(date_str)\ndef check_user_input_is_not_empty(date_str):\n    '''\n    Write a function that checks whether the input date is empty.\n    '''\n    if len(date_str) == 0:\n        raise ValueError(\"Input cannot be an empty string.\")\n    return date_str\ndef check_user_input_is_valid(date_str):\n    '''\n    Write a function that checks whether the input date is a valid date.\n    '''\n    is_valid_date = is_valid_date(date_str)\n    return is_valid_date\ndef get_days_in_month(month, day):\n    '''\n    Write a function that calculates the days in a month, assuming leap years\n    '''\n    if month == 2:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 3:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 12:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    else:\n        return 0\ndef get_days_in_month_negative(month, day):\n    '''\n    Write a function that calculates the days in a month, assuming leap years\n    '''\n    if month == 2:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 3:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 12:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    else:\n        return 0\ndef get_days_in_month_positive(month, day):\n    '''\n    Write a function that calculates the days in a month, assuming leap years\n    '''\n    if month == 2:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 3:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 12:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    else:\n        return 0\ndef days_in_month(month, day):\n    '''\n    Write a function that returns the number of days in a month\n    '''\n    if month == 2:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 3:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 12:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    else:\n        return 0\ndef days_in_month_negative(month, day):\n    '''\n    Write a function that returns the number of days in a month\n    '''\n    if month == 2:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 3:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 12:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    else:\n        return 0\ndef days_in_month_positive(month, day):\n    '''\n    Write a function that returns the number of days in a month\n    '''\n    if month == 2:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 3:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    elif month == 12:\n        if day > 31 or day < 1:\n            return 31\n        else:\n            return (day + 1)\n    else:\n        return 0\ndef day_with_most_days(month, day):\n    '''\n    Write a function that returns the day with the most days.\n    '''\n    if day == 31:\n        return \"The day has 31 days.\"\n    elif day == 30:\n        return \"The day has 30 days.\"\n    elif day == 29:\n        return \"The day has 29 days.\"\n    elif day == 28:\n        return \"The day has 28 days.\"\n    elif day == 27:\n        return \"The day has 27 days.\"\n    elif day == 26:\n        return \"The day has 26 days.\"\n    elif day == 25:\n        return \"The day has 25 days.\"\n    elif day == 24:\n        return \"The day has 24 days.\"\n    elif day == 23:\n        return \"The day has 23 days.\"\n    elif day == 22:\n        return \"The day has 22 days.\"\n    elif day == 21:\n        return \"The day has 21 days.\"\n    elif day == 20:\n        return \"The day has 20 days.\"\n    elif day == 19:\n        return \"The day has 19 days.\"\n    elif day == 1"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    m = d[1].split('.')\n    dt = dt.split('-')\n    if m[0] == '':\n        return''.join(dt)\n    else:\n        return ''.join(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.find('-') == -1:\n        return dt\n    else:\n        m = dt.find('-')\n        if m == -1:\n            return dt\n        else:\n            y = dt[m+1:]\n            m = y.find('-')\n            if m == -1:\n                return dt\n            else:\n                d = y[:m]\n                y = y[m+1:]\n                return d + '-' + y + '-' + dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    date[1] = date[1][:2]\n    date[2] = date[2][:2]\n    date[0] = date[0][:4]\n    date_str = ''\n    for d in date:\n        date_str += d + '-'\n    return date_str[:-1]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    date = dt[4:8]\n    return '{}-{}-{}'.format(yyyy, mm, dd)\ndef check_format(dt):\n    '''\n    Write a function that takes a date as input and returns whether or not it is in format of dd-mm-yyyy.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    if len(dd) == 2:\n        if int(dd[0]) < 10 and int(dd[1]) < 10:\n            return True\n        else:\n            return False\n    elif len(dd) == 3:\n        if int(dd[0]) < 10 and int(dd[1]) < 10 and int(dd[2]) < 10:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef change_time(time):\n    '''\n    Write a function that converts a time to HH:MM:SS format.\n    '''\n    HH = time[:2]\n    MM = time[2:4]\n    SS = time[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef change_date_time(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    HH = dt[:2]\n    MM = dt[2:4]\n    SS = dt[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef change_date_time_format(dt):\n    '''\n    Write a function that converts a date and time to dd-mm-yyyy format.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    date = dt[4:8]\n    return '{}-{}-{}'.format(yyyy, mm, dd)\ndef change_time_format(time):\n    '''\n    Write a function that converts a time to HH:MM:SS format.\n    '''\n    HH = time[:2]\n    MM = time[2:4]\n    SS = time[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef change_time_format_format(time):\n    '''\n    Write a function that converts a time to HH:MM:SS format.\n    '''\n    HH = time[:2]\n    MM = time[2:4]\n    SS = time[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef replace_date_time(dt):\n    '''\n    Write a function that replaces a date and time with a date and time with HH:MM:SS format.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    date = dt[4:8]\n    return '{}-{}-{}'.format(yyyy, mm, dd)\ndef add_date_time(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    HH = dt[:2]\n    MM = dt[2:4]\n    SS = dt[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef change_date_time_format_format(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    date = dt[4:8]\n    return '{}-{}-{}'.format(yyyy, mm, dd)\ndef check_date_time_format_format(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    date = dt[4:8]\n    return '{}-{}-{}'.format(yyyy, mm, dd)\ndef replace_time_format_format(time):\n    '''\n    Write a function that replaces a date and time with a date and time with HH:MM:SS format.\n    '''\n    HH = time[:2]\n    MM = time[2:4]\n    SS = time[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef change_time_format_format(time):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    HH = time[:2]\n    MM = time[2:4]\n    SS = time[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef check_time_format_format(time):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    HH = time[:2]\n    MM = time[2:4]\n    SS = time[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef change_time_format_format_format(time):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    HH = time[:2]\n    MM = time[2:4]\n    SS = time[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef date_time_regex_format(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    HH = dt[:2]\n    MM = dt[2:4]\n    SS = dt[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef add_time_time_format(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    HH = dt[:2]\n    MM = dt[2:4]\n    SS = dt[4:6]\n    return '{}:{}:{}'.format(HH, MM, SS)\ndef change_date_time_format_format(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    date = dt[4:8]\n    return '{}-{}-{}'.format(yyyy, mm, dd)\ndef add_date_time_format(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    date = dt[4:8]\n    return '{}-{}-{}'.format(yyyy, mm, dd)\ndef check_date_time_format_format(dt):\n    '''\n    Write a function that converts a date and time to HH:MM:SS format.\n    '''\n    dd = dt[-2:].split('-')\n    mm = dt[:2].split('-')\n    yyyy = dt[:4]\n    date = dt[4:8]\n    return '"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.search('[0-9]{4}-',dt)\n    if m:\n        return dt[0:6]+'-'+dt[7:9]+'-'+dt[10:12]\n    else:\n        return dt\ndef get_float(date_str):\n    '''\n    Get the number from a date string.\n    '''\n    m = re.search('\\d+',date_str)\n    if m:\n        return float(date_str[0:m.start()])\n    else:\n        return 0\ndef load_category_code(c_cat_list,c_cat_list_to_show):\n    '''\n    Load the category codes to the list.\n    '''\n    d_cat_list={}\n    d_cat_list_to_show={}\n    for c_cat in c_cat_list:\n        if c_cat in c_cat_list_to_show:\n            d_cat_list_to_show[c_cat]+=c_cat_list[c_cat]\n            continue\n        c_cat_list_to_show[c_cat]=c_cat_list[c_cat]\n    return d_cat_list_to_show\ndef write_json(dic,file):\n    '''\n    Write the dictionary to json file.\n    '''\n    with open(file, 'w') as f:\n        json.dump(dic,f,indent=4)\n    \ndef read_json(file):\n    '''\n    Read the dictionary from json file.\n    '''\n    with open(file,'r') as f:\n        dic=json.load(f)\n    return dic\ndef check_file_exits(filename):\n    '''\n    Check whether the file exits.\n    '''\n    return os.path.exists(filename)\ndef load_json(filename):\n    '''\n    Load the dictionary from json file.\n    '''\n    with open(filename,'r') as f:\n        dic=json.load(f)\n    return dic\ndef read_json_from_file(filename):\n    '''\n    Read the dictionary from json file.\n    '''\n    dic=read_json(filename)\n    return dic\ndef write_json_to_file(dic,filename):\n    '''\n    Write the dictionary to json file.\n    '''\n    with open(filename,'w') as f:\n        json.dump(dic,f,indent=4)\ndef read_json_from_file_to_file(filename):\n    '''\n    Read the dictionary from json file.\n    '''\n    with open(filename,'r') as f:\n        dic=json.load(f)\n    with open(filename,'w') as f:\n        json.dump(dic,f,indent=4)\n    return dic\ndef create_category_code(category_str):\n    '''\n    Create the category code for categories.\n    '''\n    m = re.search('[a-zA-Z]',category_str)\n    if m:\n        return category_str[0:m.start()]+'_'+category_str[m.start():len(category_str)-1]\n    else:\n        return category_str\ndef check_for_dates(dt_str):\n    '''\n    Check whether the string includes a date in the format: \"dd-mm-yyyy\".\n    '''\n    m = re.search('\\d{4}-\\d{2}-\\d{2}',dt_str)\n    if m:\n        return True\n    else:\n        return False\ndef get_date(dt_str):\n    '''\n    Get the date from a string of the format: \"dd-mm-yyyy\".\n    '''\n    m = re.search('\\d{4}-\\d{2}-\\d{2}',dt_str)\n    if m:\n        return dt_str[0:m.start()]\n    else:\n        return ''\ndef load_category_list(c_cat_list):\n    '''\n    Load the category codes to the list.\n    '''\n    d_cat_list={}\n    for c_cat in c_cat_list:\n        if c_cat in d_cat_list:\n            d_cat_list[c_cat].append(c_cat)\n        else:\n            d_cat_list[c_cat]=[c_cat]\n    return d_cat_list\ndef write_category_list(d_cat_list,cat_list,file):\n    '''\n    Write the category codes to the list.\n    '''\n    d_cat_list=load_category_list(d_cat_list)\n    for c_cat in d_cat_list:\n        d_cat_list[c_cat].sort()\n        c_cat_str=create_category_code(c_cat)\n        with open(file, 'a') as f:\n            for c_cat in d_cat_list[c_cat]:\n                f.write(c_cat_str+'\\n')\n    return d_cat_list\ndef read_category_list(file):\n    '''\n    Read the dictionary from json file.\n    '''\n    with open(file,'r') as f:\n        dic=json.load(f)\n    return dic\ndef create_category_list(c_cat_list):\n    '''\n    Create the category codes for categories.\n    '''\n    d_cat_list={}\n    for c_cat in c_cat_list:\n        if c_cat in d_cat_list:\n            d_cat_list[c_cat]+=c_cat_list[c_cat]\n        else:\n            d_cat_list[c_cat]=[c_cat]\n    return d_cat_list\ndef check_for_dates_and_category_code(dt_str):\n    '''\n    Check whether the string includes a date in the format: \"dd-mm-yyyy\".\n    '''\n    m = re.search('\\d{4}-\\d{2}-\\d{2}',dt_str)\n    if m:\n        return True\n    else:\n        return False\ndef get_date_list(dt_str):\n    '''\n    Get the date from a string of the format: \"dd-mm-yyyy\".\n    '''\n    m = re.search('\\d{4}-\\d{2}-\\d{2}',dt_str)\n    if m:\n        return dt_str[0:m.start()]\n    else:\n        return ''\ndef get_category_str(category_str):\n    '''\n    Get the category code from the string.\n    '''\n    m = re.search('\\d{4}',category_str)\n    if m:\n        return category_str[0:m.start()]+'_'+category_str[m.start():len(category_str)-1]\n    else:\n        return category_str\ndef get_category_list(category_str):\n    '''\n    Get the category codes from the string.\n    '''\n    d_cat_list={}\n    for c_cat in category_str:\n        if c_cat in d_cat_list:\n            d_cat_list[c_cat].append(c_cat)\n        else:\n            d_cat_list[c_cat]=[c_cat]\n    return d_cat_list\ndef load_category_list_to_show(c_cat_list_to_show):\n    '''\n    Load the category codes to the list.\n    '''\n    d_cat_list_to_show={}\n    for c_cat in c_cat_list_to_show:\n        if c_cat in d_cat_list_to_show:\n            d_cat_list_to_show[c_cat]+=c_cat_list_to_show[c_cat]\n        else:\n            d_cat_list_to_show[c_cat]=[c_cat]\n    return d_cat_list_to_show\ndef write_category_list_to_show(d_cat_list_to_show,cat_lis"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    for j in range(n):\n        for i in range(0, n-j):\n            if my_list[i] > my_list[i+1]:\n                my_list[i], my_list[i+1] = my_list[i+1], my_list[i]\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    \n    # initiate the temp arrays\n    temp_array = [0] * (n)\n    \n    # create a temp_array with the first element equal to the head\n    for i in range(0, n):\n        temp_array[i] = my_list[i]\n    \n    # loop through the temp_array\n    for i in range(1, n):\n        \n        # get the last element of the previous array\n        # point to the temp_array\n        j = n - 1\n        \n        # while the loop is not over,\n        # increment the j by 1\n        # if the j is not equal to 0,\n        # swap the elements, and continue\n        # in the loop.\n        while j >= 0 and temp_array[j] > temp_array[j + 1]:\n            temp_array[j] = my_list[j]\n            j -= 1\n        \n        # swap the elements if the j is not equal to 0\n        # to the last element of the array\n        temp_array[j + 1] = my_list[j]\n        \n        # increment the j by 1\n        # if the j is not equal to 0,\n        # swap the elements, and continue\n        # in the loop.\n        while j >= 0:\n            my_list[j] = temp_array[j]\n            j -= 1\n            \n    # return the list\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_helper(array, start_index, end_index):\n        if end_index == len(array):\n            return\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Create a 2D array.\n    array = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        for j in range(n-i-1):\n            if(array[j][i]>array[j+1][i]):\n                array[j][i],array[j+1][i] = array[j+1][i],array[j][i]\n    return array\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # O(n^2) time complexity\n    # O(n) space complexity\n    \n    # This function sorts an array into increasing and decreasing order\n    # \n    # Iterate through array and increment the values of each position\n    # until the array is already sorted. \n    # Once the array is sorted, no more changes are possible\n    #\n    # Complexity: O(n^2)\n    # Space: O(1)\n    \n    # Note: I'm not using __iter__ because a list can be iterated over\n    # (in theory) and it's not recommended for time performance to maintain\n    # reference to the list itself.\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # nested loop to sort\n    for i in range(len(my_list)-1,0,-1):\n        # find pivot index\n        pivot_index = i\n        # find all elements less than pivot\n        for j in range(i):\n            if my_list[j] < my_list[pivot_index]:\n                pivot_index = j\n        # swap elements with the pivot and continue\n        my_list[i],my_list[pivot_index] = my_list[pivot_index],my_list[i]\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup3 = test_tup1 * test_tup2\n    return test_tup3\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # TODO: your code here\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"The elements of the tuples must be the same length.\")\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(tuple(i for i,j in test_tup1+test_tup2 if i==j))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(sorted((test_tup1 + test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 & test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # TODO: Write your code here\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n    # TODO: Write your code here\n    # TODO: Write your code here\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1, test_tup2 = sorted(test_tup1), sorted(test_tup2)\n    res = []\n    for a, b in zip(test_tup1, test_tup2):\n        res.append((a, b))\n    return tuple(res)"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Add more code here\n    \n    # Returns True if both tuples are same length\n    if len(test_tup1) == len(test_tup2):\n        \n        for index in range(len(test_tup1)):\n            if test_tup1[index]!= test_tup2[index]:\n                return False\n            \n        return True\n    \n    return False\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Declare a tuple of tuples\n    tup = tup1, tup2\n    # Use a for loop to extract the tuple and combine the elements in a list\n    # In the loop the list has to be split in chunks of two\n    test_list = list()\n    for i in range(len(tup)):\n        test_list.extend(tup[i])\n    return list(test_list)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n    "
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0: \n        return c\n    else: \n        return (b * parabola_directrix(a - 1, b, c)) / (a - 1)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((b**2)-(4*a*c))/2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a1 = (b*b-4*a*c)\n    b1 = 2*(b*b-4*a*c)\n    c1 = 2*(b*b-4*a*c)\n    return [round(a1,2), round(b1,2), round(c1,2)]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b*c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = [a, b, c]\n    y = [0, 0, 0]\n    x.sort()\n    y.sort()\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    result = 0\n    if a == 0 and b == 0 and c == 0:\n        result = 0\n    elif a == 0 and b == 0:\n        result = (c**2)\n    elif a == 0:\n        result = (b**2 - c**2)\n    elif b == 0:\n        result = (a**2 - c**2)\n    else:\n        result = a * (b**2 - c**2)\n    return result\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if not a or not b or not c:\n        print(\"The function has a problem.\")\n        return\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b ** 2 - 4 * a * c\n    if d > 0:\n        return d, (-b + (b ** 2 - 4 * a * c) ** (1/2)) / (2 * a), (-b + (b ** 2 - 4 * a * c) ** (1/2)) / (2 * a)\n    else:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # input: a,b,c, a,b,c\n    # output: x,y,z\n    if (a == 0) and (b == 0) and (c == 0):\n        return [0, 0, 0]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import degrees, radians\n    from math import sqrt\n    from math import atan2, degrees, asin\n    from math import acos\n    x = sqrt(b**2 + 4 * a * c)\n    y = asin((b * a) / x)\n    z = degrees(atan2(b, a) - degrees(y))\n    return z\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    return list1==list2\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    \n    for item in list1:\n        if item in list2:\n            if len(item) > len(list2[0]):\n                common = True\n        else:\n            common = False\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(list2)) > 0\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common.append(list1[i])\n            \n    if len(common) > 0:\n        return True\n    else:\n        return False\n    \ndef common_elements(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common.append(list1[i])\n    \n    if len(common) == 0:\n        return False\n    else:\n        return True\n    \ndef common_multiple(list1, list2):\n    '''\n    Write a function that takes two lists and returns the product of the list elements.\n    '''\n    \n    product = 1\n    for i in list1:\n        product *= i\n    \n    return product\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) > 0 and len(list2) > 0 and list1[0] == list2[0]\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return common_element(list1, list2[1:])\n    elif len(list1) > len(list2):\n        return common_element(list2, list1[1:])\n    else:\n        return list1[0] == list2[0]\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    for i in range(0, len(list1)):\n        if list1[i] in list2:\n            common += 1\n    if common!= len(list1) and common!= len(list2):\n        return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    #Check for number of elements\n    if len(list1) > len(list2):\n        return False\n    \n    #Check for empty lists\n    if len(list1) == 0:\n        return False\n    \n    #Check for duplicate elements\n    if len(list1) == len(set(list1)):\n        return False\n    \n    #Check for duplicate elements\n    for i in list1:\n        if list1.count(i) > 1:\n            return False\n    \n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    print('\\n##############################')\n    # Write your code here. Make sure to indent the code to the next line.\n    common=[]\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    return len(common) >= 2\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list_1 = len(list1)\n    list_2 = len(list2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height<=0:\n        return 0\n    else:\n        lengths = []\n        for i in range(0,len(base1)):\n            lengths.append(base1[i]-base2[i])\n        sorted_lengths = sorted(lengths)\n        index = 0\n        if sorted_lengths[(len(sorted_lengths)-1)//2]<=sorted_lengths[0]:\n            index = sorted_lengths[(len(sorted_lengths)-1)//2]\n        else:\n            index = sorted_lengths[(len(sorted_lengths)-1)//2]\n        middle_length = (len(base1)-1)*height+(len(base2)-1)*(height-1)//2\n        return (middle_length - index)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    middle_index = int(len(base1) / 2)\n    \n    if height == 0:\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def lenth(n):\n        return (n/2)+n*height\n    def median(list):\n        return (list[len(list)//2]+list[(len(list)-1)//2])/2\n    return median(list(map(lenth,base1+base2)))\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1+base2==0:\n        return height/2\n    elif base1>base2:\n        return (height/2)*(base1+base2)/(base1+base2+1)\n    else:\n        return (height/2)*(base2+base1)/(base2+base1+1)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height<=1:\n        return height\n    else:\n        mid=int(height/2)\n        #length of trapezium\n        trapezium_length=base1*mid+base2\n        #width of trapezium\n        trapezium_width=base2-base1\n        #trapezium with the median of base1 and base2\n        trapezium=base1+trapezium_length/2.0\n        #trapezium with the median of base2 and height\n        trapezium_mid=base2+trapezium_width/2.0\n        return median_trapezium(trapezium,trapezium_mid)\n    \ndef median_trapezium_bis(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height<=1:\n        return height\n    else:\n        mid=int(height/2)\n        #length of trapezium\n        trapezium_length=base1*mid+base2\n        #width of trapezium\n        trapezium_width=base2-base1\n        #trapezium with the median of base1 and base2\n        trapezium=base1+trapezium_length/2.0\n        #trapezium with the median of base2 and height\n        trapezium_mid=base2+trapezium_width/2.0\n        return median_trapezium_bis(trapezium,trapezium_mid)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 == base2:\n        median = (base1+base2)/2\n    else:\n        if base1<base2:\n            median = (base1+base2+height)/2\n        else:\n            median = (base1+base2-height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium = (base1 + base2)/2\n    left_side = (height/2) - trapezium\n    right_side = (height/2) + trapezium\n    if (left_side<0 or right_side<0):\n        return -1\n    else:\n        return (right_side + left_side)/2\n        \n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = int(base1 + base2)\n    if height <= a:\n        print(\"the trapezium is not monotonic\")\n    else:\n        i = 0\n        j = a\n        k = 0\n        while (j-i > 0):\n            if height < (j-i):\n                k = j-i\n                break\n            j-=1\n            i+=1\n        print(\"the mediana is at index {}\".format(k))\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height<=0:\n        return 0\n    if height>10:\n        return 0\n    if height>1:\n        return (base1+base2+height)/2\n    return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"Median is:\",(base1+base2)/2)\n    return (base1+base2)/2\ndef average(list):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum=sum+i\n    return sum/len(list)\ndef mean_list(list):\n    '''\n    Write a function to compute the mean of a list of numbers.\n    '''\n    return sum(list)/len(list)\ndef mode_list(list):\n    '''\n    Write a function to compute the mode of a list of numbers.\n    '''\n    return mode(list)\ndef length_list(list):\n    '''\n    Write a function to compute the length of a list.\n    '''\n    return len(list)\ndef median(list):\n    '''\n    Write a function to compute the median of a list of numbers.\n    '''\n    if len(list)%2==0:\n        return (average(list[0::2]))\n    else:\n        return (average(list[int(len(list)/2) - 1::2]))\ndef sum_list(list):\n    '''\n    Write a function to compute the sum of a list of numbers.\n    '''\n    return sum(list)\ndef standard_dev(list):\n    '''\n    Write a function to compute the standard deviation of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum=sum+(i-mean_list(list))**2\n    return math.sqrt(sum/(len(list)-1))\ndef sum_of_squares(list):\n    '''\n    Write a function to compute the sum of squares of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum=sum+i*i\n    return math.sqrt(sum)\ndef variance_of_squares(list):\n    '''\n    Write a function to compute the variance of squares of a list of numbers.\n    '''\n    sum=0\n    for i in list:\n        sum=sum+i*i\n    return sum/(len(list)-1)\ndef mode_of_squares(list):\n    '''\n    Write a function to compute the mode of squares of a list of numbers.\n    '''\n    return mode(list)\ndef test():\n    print(median([1,3,4,6,8,9,10,12,15,20,30,40,50,60]))\n    print(average([2,4,6,8,10]))\n    print(mean_list([1,2,3]))\n    print(mode_list([1,2,3]))\n    print(length_list([2,4,6,8,10]))\n    print(sum_list([1,2,3]))\n    print(standard_dev([1,2,3]))\n    print(sum_of_squares([1,2,3]))\n    print(variance_of_squares([1,2,3]))\n    print(mode_of_squares([1,2,3]))\n    print()\ndef main():\n    test()\n    print(median([1,3,4,6,8,9,10,12,15,20,30,40,50,60]))\n    print(average([2,4,6,8,10]))\n    print(mean_list([1,2,3]))\n    print(mode_list([1,2,3]))\n    print(length_list([2,4,6,8,10]))\n    print(sum_list([1,2,3]))\n    print(standard_dev([1,2,3]))\n    print(sum_of_squares([1,2,3]))\n    print(variance_of_squares([1,2,3]))\n    print(mode_of_squares([1,2,3]))\nmain()"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == None or number < arr[0] or number > arr[-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == None:\n        return False\n    \n    for i in arr:\n        if i > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = []\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater.append(arr[i])\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number == None:\n        return -1\n    if len(arr) == 1:\n        if arr[0] > number:\n            return 1\n        else:\n            return 0\n    else:\n        result = check_greater(arr[1:], number)\n        if result == 0:\n            result = check_greater(arr[1:], arr[0])\n            if result == 0:\n                return -1\n            else:\n                return result\n        else:\n            return result\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    if number > arr[0]:\n        return 1\n    \n    return "
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # code here\n    if arr[0]<number:\n        return False\n    for i in arr:\n        if i<number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return True\n    if arr[0] > number:\n        return False\n    if number < arr[0]:\n        return True\n    return check_greater(arr[1:], number)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def as_one_b(b):\n        if b.startswith(\"A\"):\n            return \"1\"\n        else:\n            return \"0\"\n    def as_two_b(b):\n        if b.startswith(\"B\"):\n            return \"2\"\n        else:\n            return \"0\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"([b]{0,1}[a-z]{1,2})\")\n    return pattern.findall(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # def test_string_match_one(test_str):\n    if (len(text) % 2) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Initialize variables\n    A = re.findall('[a-zA-Z]', text)\n    b = re.findall('[b-zB]', text)\n    c = re.findall('[c-zC]', text)\n    # Match the first letter\n    match = re.search('[a-zA-Z]', text)\n    if match:\n        return f'a-z{match.group()}'\n    # Match the second letter\n    match = re.search('[a-zA-Z]', text)\n    if match:\n        return f'a-z{match.group()}'\n    # Match the third letter\n    match = re.search('[a-zA-Z]', text)\n    if match:\n        return f'a-z{match.group()}'\n    # Match the forth letter\n    match = re.search('[a-zA-Z]', text)\n    if match:\n        return f'a-z{match.group()}'\n    # Match the fifth letter\n    match = re.search('[a-zA-Z]', text)\n    if match:\n        return f'a-z{match.group()}'\n    return None\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    return \" \".join(text.split()[1:])\n    \n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has two or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[2:])\n    \n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has three or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[3:])\n    \n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has four or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[4:])\n    \n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has five or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[5:])\n    \n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has six or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[6:])\n    \n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has seven or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[7:])\n    \n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has eight or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[8:])\n    \n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has nine or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[9:])\n    \n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has ten or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[10:])\n    \n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has eleven or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[11:])\n    \n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has twelve or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[12:])\n    \n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has thirteen or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[13:])\n    \n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has fourteen or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[14:])\n    \n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has fifteen or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[15:])\n    \n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has sixteen or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[16:])\n    \n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has seventeen or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[17:])\n    \n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has eighteen or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[18:])\n    \n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has nineteen or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[19:])\n    \n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has twenty or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[20:])\n    \n    \ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has thirty or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[21:])\n    \n    \ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has forty or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[22:])\n    \n    \ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has fifty or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[23:])\n    \n    \ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has sixty or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[24:])\n    \n    \ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has seventy or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[25:])\n    \n    \ndef text_match_eighty(text):\n    '''\n    Write a function that matches a string that has eighty or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[26:])\n    \n    \ndef text_match_hundred(text):\n    '''\n    Write a function that matches a string that has hundred or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[27:])\n    \n    \ndef text_match_thousand(text):\n    '''\n    Write a function that matches a string that has thousands or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[28:])\n    \n    \ndef text_match_decimals(text):\n    '''\n    Write a function that matches a string that has decimal places or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[29:])\n    \n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has one or more or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[30:])\n    \n    \ndef text_match_two_or_more(text):\n    '''\n    Write a function that matches a string that has two or more or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[31:])\n    \n    \ndef text_match_three_or_more(text):\n    '''\n    Write a function that matches a string that has three or more or more a's followed by a b's.\n    '''\n    \n    return \" \".join(text.split()[32:])\n    \n    \ndef text_match_four_or_more(text):\n    '''\n    Write a function that matches a string that has four or more or more a's followed by a b's.\n    '''\n    \n    return \" \".joi"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    b_pattern = re.compile(r'\\b(a){2,}\\b')\n    match_one = re.search(b_pattern, text)\n    if match_one:\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more b's, separated by spaces.\n    '''\n    \n    b_pattern = re.compile(r'\\b(a){1,}\\b')\n    match_two = re.search(b_pattern, text)\n    if match_two:\n        return True\n    else:\n        return False\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has one or more b's.\n    '''\n    \n    b_pattern = re.compile(r'\\b(a){1,}\\b')\n    match_three = re.search(b_pattern, text)\n    if match_three:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = []\n    text = re.sub(r'\\b(a|A|b)', r'\\1', text)\n    text = text.lower()\n    text = re.sub(r'\\b(and|Or|or|and|Or|and|or|and|Or|or|and|Or|or|and|Or|and|and|Or|or|or|and|Or|or|and|Or|and|or|and|Or|or|and|Or|or|and|or|Or|and|or|or|and|Or|or|and|Or|and|and|Or|or|and|Or|and|and|Or|or|or|and|Or|or|or|and|Or|or|and|Or|and|Or|or|and|Or|and|or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|and|or|or|and|Or|or|or|and|Or|or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or|or|and|Or"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print('--------------text match one----------------')\n    \n    #Example 1:\n    #Input: text = \"aab\"\n    #Output: True\n    #Explanation:\n    #A sequence of three letters that begin with a matches a sequence of three letters that end with b.\n    \n    #Example 2:\n    #Input: text = \"abab\"\n    #Output: True\n    #Explanation:\n    #A sequence of three letters that begin with a matches a sequence of three letters that end with b.\n    #A sequence of three letters that begin with a matches a sequence of three letters that end with b.\n    #A sequence of three letters that begin with a matches a sequence of three letters that end with b.\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub(r'(b.+|b\\*|b\\*\\*)', '\\\\1', text)\n    pattern = re.compile(r'[a-zA-Z]\\w*')\n    match = pattern.findall(text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    return int(s[-1])\n    \n    #driver code\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 9 :\n        return \"Invalid Number\"\n    else :\n        return n % 10\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    if n < 0 :\n        return last_Digit(n*-1)\n    elif n%10 == 0 :\n        return last_Digit(n/10)\n    else :\n        return last_Digit(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 10 :\n        return n % 10\n    elif n >= 9 :\n        return int(n / 10)\n    elif n >= 8 :\n        return int(n / 100)\n    elif n >= 7 :\n        return int(n / 1000)\n    elif n >= 6 :\n        return int(n / 10000)\n    elif n >= 5 :\n        return int(n / 100000)\n    elif n >= 4 :\n        return int(n / 1000000)\n    elif n >= 3 :\n        return int(n / 10000000)\n    elif n >= 2 :\n        return int(n / 100000000)\n    elif n >= 1 :\n        return int(n / 1000000000)\n    elif n >= 0 :\n        return int(n / 10000000000)\n    elif n >= -1 :\n        return int(n / 1000000000000)\n    else :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lastDigit = 0\n    while n!= 0:\n        lastDigit = n % 10\n        n = n // 10\n    return lastDigit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n[-1])\n    \n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    lst = []\n    for i in list1:\n        lst.append(-i)\n    return lst\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(-list1[i])\n        else:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # your code goes here\n    neg=[]\n    for i in list1:\n        if i<0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list = []\n    for num in list1:\n        if num < 0:\n            neg_nos_list.append(-num)\n        else:\n            neg_nos_list.append(num)\n    return neg_nos_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for i in list1:\n        neg_num.append(-i)\n    return neg_num\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n    \ndef swap_num(list1):\n    '''\n    Write a python function that swaps the numbers in a list.\n    '''\n    swap_list = []\n    for i in list1:\n        swap_list.append(i)\n    return swap_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str(2), '')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i % 2 == 1:\n            count = count + 1\n    if count == 0:\n        return str1\n    else:\n        return str1[0:count] + str1[count+1:]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    count_odd = 0\n    for i in str1:\n        if i % 2!= 0:\n            count_odd += 1\n    if count_odd == 0:\n        return str1\n    else:\n        return str1[:count_odd] + str1[count_odd:]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1=='':\n        return ''\n    if len(str1)==1:\n        return str1\n    if len(str1)%2==0:\n        if str1[len(str1)//2]%2==0:\n            return str1[0:len(str1)//2]+str1[len(str1)//2:]\n        else:\n            return str1[0:len(str1)//2]+str1[len(str1)//2-1:]\n    if str1[len(str1)//2]%2==0:\n        return str1[0:len(str1)//2]+str1[len(str1)//2+1:]\n    else:\n        return str1[0:len(str1)//2]+str1[len(str1)//2:]\n        \nif __name__ == \"__main__\":\n    str1 = input()\n    print(remove_odd(str1)"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Your code here\n    l = len(str1)\n    odd_char = \"o\"\n    for i in range(l):\n        if (str1[i] % 2 == 1):\n            # If odd, move to the next index\n            str1 = str1[:i] + odd_char + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odds = []\n    for i in range(len(str1)):\n        if str1[i]%2!= 0:\n            odds.append(str1[i])\n    return ''.join(odds)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(1, len(str1)):\n        if str1[i]%2==1:\n            continue\n        else:\n            str1=str1[:i]+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = ''\n    for char in str1:\n        if char % 2!= 0:\n            res += char\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    output = ''\n    for char in str1:\n        if char % 2!= 0:\n            output += char\n    return output\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([chr(char) if char % 2 == 1 else char for char in str1])\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    list_of_counts = {}\n    test_list_of_dicts = test_list\n    # iterate over the test_list_of_dicts\n    for element in test_list_of_dicts:\n        # if the element is a tuple,\n        # add a count to the dictionary\n        if type(element) is tuple:\n            if element not in list_of_counts:\n                list_of_counts[element] = 1\n            else:\n                list_of_counts[element] += 1\n    # sort the dictionary\n    for key, value in sorted(list_of_counts.items()):\n        print('{}: {}'.format(key, value))\n        # delete the tuple from the list\n        del list_of_counts[key]\n        # print the list\n        print(list_of_counts)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # count pair of elements as bidirectional\n    # returns dict of bidirectional elements\n    # Example (check if items in list)\n    # count_bidirectional([('g', 'o'), ('g', 'p'), ('o', 'n')])\n    # Result\n    # {'o': 2, 'g': 2, 'n': 1, 'p': 1, 'p': 1}\n    \n    result = {}\n    for tuple in test_list:\n        if tuple[1]!= tuple[0]:\n            if tuple[1] not in result:\n                result[tuple[1]] = 0\n            result[tuple[1]] += 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    pair_dict = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            pair = test_list[i] + \",\" + test_list[j]\n            if pair not in pair_dict:\n                pair_dict[pair] = 1\n            else:\n                pair_dict[pair] += 1\n    print(pair_dict)\n    return pair_dict\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for tup in test_list:\n        if (tup[0] == tup[1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    count = 0\n    for x in range(n):\n        for y in range(x+1,n):\n            if test_list[x][1]>test_list[y][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[1] == pair[0]:\n            count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    num_brackets = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == '(' and test_list[i][-1] == ')':\n            num_brackets += 1\n        if test_list[i][0] == '[' and test_list[i][-1] == ']':\n            num_brackets += 1\n    print(f'There are {len(test_list)} bacchus!')\n    print(f'There are {num_brackets} bacchus inside.')\n    if num_brackets == 0:\n        print('No bidirectional pairs found.')\n    else:\n        print('There are'+ str(num_brackets) +'bidirectional pairs.')\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[0] == j[1] and i[1] == j[0]:\n                bidirectional_count += 1\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # print('test_list:',test_list)\n    \n    # count_pair = 0\n    \n    # for ele in test_list:\n    #     if isinstance(ele, tuple):\n    #         # print(ele)\n    #         count_pair += 1\n    #         # print(count_pair)\n    \n    # print(count_pair)\n    \n    # count_pair_as_tuple = count_pair\n    # count_bidirectional_as_tuple = 0\n    \n    # for ele in test_list:\n    #     if isinstance(ele, tuple):\n    #         # print(ele)\n    #         if ele[0] < ele[1]:\n    #             count_bidirectional_as_tuple += 1\n    #         else:\n    #             count_bidirectional_as_tuple += 0\n    #     else:\n    #         count_bidirectional_as_tuple += 0\n    \n    # print(count_bidirectional_as_tuple, count_bidirectional_as_tuple)\n    \n    \n    # def check_bidirectional(test_list):\n    #     '''\n    #     Write a function to check whether a list of tuples is bidirectional.\n    #     '''\n    #     count_pair_as_tuple = count_pair\n    #     count_bidirectional_as_tuple = 0\n    #     \n    #     for ele in test_list:\n    #         if isinstance(ele, tuple):\n    #             # print(ele)\n    #             if ele[0] < ele[1]:\n    #                 count_bidirectional_as_tuple += 1\n    #             else:\n    #                 count_bidirectional_as_tuple += 0\n    #         else:\n    #             count_bidirectional_as_tuple += 0\n    #     \n    #     count_pair_as_tuple += count_bidirectional_as_tuple\n    \n    #     return count_bidirectional_as_tuple\n    \n    # def check_bidirectional(test_list):\n    #     '''\n    #     Write a function to check whether a list of tuples is bidirectional.\n    #     '''\n    #     count_pair_as_tuple = count_pair\n    #     count_bidirectional_as_tuple = 0\n    #     \n    #     for ele in test_list:\n    #         if isinstance(ele, tuple):\n    #             # print(ele)\n    #             if ele[0] < ele[1]:\n    #                 count_bidirectional_as_tuple += 1\n    #             else:\n    #                 count_bidirectional_as_tuple += 0\n    #         else:\n    #             count_bidirectional_as_tuple += 0\n    #     \n    #     count_pair_as_tuple += count_bidirectional_as_tuple\n    \n    #     return count_bidirectional_as_tuple\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(test_list)\n    \n    # count_bidirectional(tes"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if test_list[i][1] < test_list[i][0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x+y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x+y, map(int,L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(L)\n    L_len = len(L)\n    \n    if L_len == 0:\n        return 0\n    \n    num = 0\n    \n    while L_len > 0:\n        num = num + L.pop()\n        L_len -= 1\n    \n    return num\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def to_single(L):\n        return int(''.join(str(x) for x in L))\n    return to_single\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x, y: x + y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = []\n    for i in L:\n        res.append(i)\n    return res\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    joined = 0\n    for elem in L:\n        joined += elem\n    return joined\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = []\n    for i in L:\n        ans.append(i)\n    return sum(ans)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # TODO: replace the following code with your solution\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] in \"AaEeIiOoUu\":\n            result += text[i]\n    result = result.lower()\n    result = result.replace(\" \", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"?\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"^\", \"\")\n    result = result.replace(\"&\", \"\")\n    result = result.replace(\"*\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"{\", \"\")\n    result = result.replace(\"}\", \"\")\n    result = result.replace(\",\", \"\")\n    result = result.replace(\";\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\".\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"{\", \"\")\n    result = result.replace(\"}\", \"\")\n    result = result.replace(\"'\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"\\n\", \"\")\n    result = result.replace(\".\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"$\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"=\", \"\")\n    result = result.replace(\"#\", \"\")\n    result = result.replace(\"@\", \"\")\n    result = result.replace(\"@\", \"\")\n    result = result.replace(\"~\", \"\")\n    result = result.replace(\"&\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"\\n\", \"\")\n    result = result.replace(\"{\", \"\")\n    result = result.replace(\"}\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"|\", \"\")\n    result = result.replace(\".\", \"\")\n    result = result.replace(\"&\", \"\")\n    result = result.replace(\"=\", \"\")\n    result = result.replace(\"*\", \"\")\n    result = result.replace(\"$\", \"\")\n    result = result.replace(\"$\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"$\", \"\")\n    result = result.replace(\"^\", \"\")\n    result = result.replace(\"&\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"{\", \"\")\n    result = result.replace(\"}\", \"\")\n    result = result.replace(\"*\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\".\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"$\", \"\")\n    result = result.replace(\"*\", \"\")\n    result = result.replace(\"$\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"$\", \"\")\n    result = result.replace(\"*\", \"\")\n    result = result.replace(\"^\", \"\")\n    result = result.replace(\"&\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"{\", \"\")\n    result = result.replace(\"}\", \"\")\n    result = result.replace(\"*\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\".\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"{\", \"\")\n    result = result.replace(\"}\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"(\", \"\")\n    result = result.replace(\")\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"%\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"-\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"!\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result.replace(\"+\", \"\")\n    result = result.replace(\"\u00ac\", \"\")\n    result = result"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['a.', 'a.e.', 'a.s.', 'a.s.e.', 'a.v.', 'a.v.e.', 'a.v.s.', 'a.v.s.e.', 'a.v.s.v.', 'a.v.s.v.e.', 'a.v.s.v.s.', 'a.v.s.v.s.e.', 'a.n.', 'a.o.', 'a.p.', 'a.p.e.', 'a.p.s.', 'a.p.s.e.', 'a.p.v.', 'a.p.v.e.', 'a.p.v.s.', 'a.p.v.s.e.', 'a.p.v.s.v.', 'a.p.v.s.v.e.', 'a.p.v.s.v.s.', 'a.r.', 'a.s.', 'a.t.', 'a.v.e.', 'a.v.s.', 'a.v.s.e.', 'a.v.s.v.', 'a.v.s.v.e.', 'a.v.s.v.s.', 'a.v.s.v.s.e.', 'a.w.', 'a.v.s.', 'a.v.s.e.', 'a.v.s.v.s.', 'a.v.s.v.s.e.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.', 'a.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.', 'a.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.', 'a.v.s.v.s.v.s.e.', 'a.v.s.v.s.v.s.v.', 'a.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.', 'a.v.s.v.s.v.s.v.s.e.', 'a.v.s.v.s.v.s.v.s.v.', 'a.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.', 'a.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.e.', 'a.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v.s.v"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # go through the sentence and find the first adverb\n    index_to_adverb_dict = {}\n    for i, c in enumerate(text):\n        if c in ['a','e','i','o','u']:\n            if i == 0:\n                # loop through the first word and find the first adverb\n                for j in range(len(text)):\n                    if text[j] in ['a','e','i','o','u']:\n                        index_to_adverb_dict[j] = i\n            else:\n                # loop through the second word and find the first adverb\n                for j in range(len(text)):\n                    if text[j] in ['a','e','i','o','u']:\n                        index_to_adverb_dict[j] = i\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['adverb','very','singular', 'plural', 'plural-form']\n    result = []\n    for a in adverbs:\n        regex = re.compile('^' + a + '$')\n        position = regex.findall(text)\n        if position:\n            if position[0][0] =='verb':\n                result.append([a, position[0][1]])\n            else:\n                result.append([a, position[0][0]])\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # 1st rule is to check if the text contains an adverb\n    if re.search(r'\\b\\w+\\b', text):\n        return {'adverb':1}\n    # 2nd rule is to find the text for the adverbs\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if a == 'an':\n            return {'adverb':1}\n    # 3rd rule is to find the text for the first verb that doesn't contain a adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' not in a:\n            return {'adverb':1}\n    # 4th rule is to find the first verb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if a == 'an':\n            return {'adverb':1}\n    # 5th rule is to check if there's a verb with a noun that has adverbs\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if re.search(r'\\b\\w+\\b', a):\n            for b in re.findall(r'\\b\\w+\\b', a):\n                if 'an' in b and 'adverb' not in b:\n                    return {'adverb':1}\n    # 6th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 7th rule is to find the first verb with a noun that has an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' in a:\n            return {'adverb':1}\n    # 8th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 9th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 10th rule is to find the first verb with a noun that has an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' in a:\n            return {'adverb':1}\n    # 11th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 12th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 13th rule is to find the first verb with a noun that has an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' in a:\n            return {'adverb':1}\n    # 14th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 15th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 16th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 17th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 18th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 19th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 20th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 21st rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 22th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 23th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 24th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 25th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 26th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 27th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 28th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb' not in a:\n            return {'adverb':1}\n    # 29th rule is to find the first verb with a noun that doesn't contain an adverb\n    for a in re.findall(r'\\b\\w+\\b', text):\n        if 'an' in a and 'adverb"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #INPUT: string text (the sentence to be analyzed)\n    #OUTPUT: list of tuples of word and position in string\n    #EXAMPLES:\n    #find_adverb_position('The spoon is the spoonful of the whole.')\n    #find_adverb_position('The')\n    #find_adverb_position('I was a dog.')\n    #find_adverb_position('The spoon is the spoonful of the whole.')\n    #find_adverb_position('I was a dog.')\n    #find_adverb_position('The spoonful of the whole.')\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # split text into lines\n    text = text.split()\n    # find the first adverb\n    index = text.index(\"adverb\")\n    # get start position of adverb\n    start = index + 2\n    # get end position of adverb\n    end = text.index(\"adverb\")\n    # check if the end is before the first adverb\n    if end < start:\n        print(text)\n        print(\"\\nERROR: 'adverb' not found\")\n        return\n    else:\n        # get the first adverb\n        adverb = text[index+1]\n        # get the start position of the next adverb\n        start_index = text.index(\"adverb\")\n        # iterate from start_index to end_index, which is the end of the first adverb\n        for i in range(start_index, end, 1):\n            # get the next adverb\n            adverb = text[i]\n            # if the next adverb is a number, return the position\n            if re.search(r'\\d+', adverb):\n                return index + 2, i + 1\n        print(text)\n        print(\"\\nERROR: 'adverb' not found\")\n        return\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def get_adverb_position(sentence):\n        '''\n        Given a sentence, return the position of its first adverb word, and the position of its \n        first next adverb word.\n        '''\n        pattern = r\"\\b({})\\b\".format(sentence)\n        match = re.finditer(pattern, sentence)\n        for match_group in match:\n            adverb = match_group.group()\n            next_adverb = None\n            for next_adverb_group in sentence.split(adverb)[1::]:\n                if next_adverb_group:\n                    adverb_position = next_adverb_group.split()[1]\n                    break\n            else:\n                adverb_position = None\n            return adverb, adverb_position\n    result = get_adverb_position(text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    i = 0\n    adverbs = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    while i < len(text):\n        if text[i:i+2] in adverbs:\n            position = i + 2\n            adverb = text[i:position]\n            position = text.index(adverb)\n            text = text[:position] + \" \" + text[position + 2:]\n            i = i + 2\n        else:\n            i += 1\n    return text\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #we will create a dictionary where we have the keys are the adverbs and the values are the positions\n    #we then can create a new dictionary where we have the keys are the adverbs and the values are the position\n    #we then combine them and give them all into a new dictionary\n    #then we iterate over each word in the sentence\n    #in the sentence we check if it is an adverb (if it is, it should be at the beginning of the sentence)\n    #if it is not, we will add the word to the dictionary, with the position it is\n    new_dic={}\n    new_dic['']={}\n    for word in text.split():\n        if '^' in word:\n            new_dic[word[0]]={}\n            new_dic[word[0]][word[0]]=word\n        else:\n            if word not in new_dic.keys():\n                new_dic[word]={}\n                new_dic[word][word] = word\n    return new_dic\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = (l[0]*l[1])+(l[1]*l[2])+(l[2]*l[3])\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                area = area + 4 * ((l/3) * i + (l/3) * j + (l/3) * k)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l):\n        for j in range(i+1, l):\n            for k in range(j+1, l):\n                area += l**3\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 5*l*l*l*l*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return pow(l[0]**3 + l[1]**3 + l[2]**3, 1/3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in l:\n        area += i**3\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area=0\n    for i in l:\n        for j in i:\n            area+=j*j\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l*l\n    area = (4*a)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 1\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    def surfacearea(r):\n        '''\n        Calculate the surface area of a cube of given size\n        '''\n        return (4*math.pi*r**3)/3\n    \n    surfacearea_cube= surfacearea(l)\n    print(surfacearea_cube)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Set a min and max, check if there is any negative numbers\n    min = nums[0]\n    max = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n    # If there are no negatives, return 0.\n    if len(nums) == 0:\n        return 0\n    # If there is only one negative, return 0.\n    if len(nums) == 1:\n        return 0\n    # Calculate ration of all negatives\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p_sum=sum(nums)\n    if p_sum>0:\n        return int(p_sum/len(nums))\n    else:\n        return 0\n    \n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    counter = 0\n    for i in nums:\n        if i > 0:\n            counter += 1\n    return counter/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Base Case:\n    if len(nums) == 1:\n        return 1\n    # Base Case:\n    elif len(nums) == 2:\n        if nums[0] > nums[1]:\n            return 1\n        else:\n            return 0\n    # Recursion:\n    else:\n        ratio = nums[0] / nums[1]\n        res = positive_count(nums[2:])\n        if res > ratio:\n            return res\n        else:\n            return ratio\ndef str_count(nums):\n    '''\n    Write a function to count the number of strings in an array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        res = 0\n        for i in range(len(nums)):\n            res += (str_count(nums[:i]) + 1) * 2\n        return res\ndef count_string(nums):\n    '''\n    Write a function to count the number of strings in an array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        res = 0\n        for i in range(len(nums)):\n            res += (count_string(nums[:i]) + 1) * 2\n        return res\ndef normalize(nums):\n    '''\n    Write a function to return the strings in a normal form\n    '''\n    if len(nums) == 0:\n        return ''\n    else:\n        l = len(nums)\n        new_l = int(l / 2)\n        res = ''\n        for i in range(new_l):\n            res += (str(nums[i]) +'')\n        res = res[:-1]\n        return res\ndef count_string_in_array(array, s):\n    '''\n    Write a function that returns the number of times that a string in array is present in the string s.\n    '''\n    if len(array) == 0:\n        return 0\n    else:\n        # Base Case:\n        if len(s) == 0:\n            return 1\n        # Base Case:\n        elif s[0] in array:\n            res = array.count(s[0])\n            # Increment:\n            return res + count_string_in_array(array, s[1:])\n    # Recursive:\ndef count_string_in_array2(array, s):\n    '''\n    Write a function that returns the number of times that a string in array is present in the string s.\n    '''\n    if len(array) == 0:\n        return 0\n    else:\n        # Base Case:\n        if s[0] in array:\n            return 1 + count_string_in_array2(array, s[1:])\n        # Base Case:\n        else:\n            return 0\ndef count_string_in_array3(array, s):\n    '''\n    Write a function that returns the number of times that a string in array is present in the string s.\n    '''\n    if len(array) == 0:\n        return 0\n    else:\n        # Base Case:\n        if s[0] in array:\n            return 1 + count_string_in_array3(array, s[1:])\n        # Base Case:\n        else:\n            return 0\ndef normalize_by_string(nums):\n    '''\n    Write a function that returns the normal form of a string.\n    '''\n    if len(nums) == 0:\n        return ''\n    else:\n        nums = array('b', nums)\n        s = normalize(nums)\n        return s\ndef check(nums):\n    '''\n    Write a function that takes an array of integers and a string and checks if a string is a permutation of the array.\n    '''\n    if len(nums) == 0:\n        return True\n    elif nums[0] > nums[-1]:\n        return False\n    else:\n        # Recursive:\n        res = check(nums[1:])\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1] and nums[i]!= nums[i-1]:\n                res = False\n                return res\n        return True\ndef check_string(nums):\n    '''\n    Write a function that takes an array of strings and a string and checks if a string is a permutation of the array.\n    '''\n    if len(nums) == 0:\n        return ''\n    else:\n        return normalize_by_string(nums)\ndef normalize_by_string2(nums):\n    '''\n    Write a function that returns the normal form of a string.\n    '''\n    if len(nums) == 0:\n        return ''\n    else:\n        nums = array('b', nums)\n        s = normalize(nums)\n        return s\ndef check_string2(nums):\n    '''\n    Write a function that takes an array of strings and a string and checks if a string is a permutation of the array.\n    '''\n    if len(nums) == 0:\n        return True\n    else:\n        # Recursive:\n        res = check_string2(nums[1:])\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1] and nums[i]!= nums[i-1]:\n                res = False\n                return res\n        return True\ndef normalize_by_string3(nums):\n    '''\n    Write a function that returns the normal form of a string.\n    '''\n    if len(nums) == 0:\n        return ''\n    else:\n        nums = array('b', nums)\n        s = normalize(nums)\n        return s\ndef check_string3(nums):\n    '''\n    Write a function that takes an array of strings and a string and checks if a string is a permutation of the array.\n    '''\n    if len(nums) == 0:\n        return True\n    else:\n        # Recursive:\n        res = check_string3(nums[1:])\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1] and nums[i]!= nums[i-1]:\n                res = False\n                return res\n        return True\ndef check_string4(nums):\n    '''\n    Write a function that takes an array of strings and a string and checks if a string is a permutation of the array.\n    '''\n    if len(nums) == 0:\n        return True\n    else:\n        # Recursive:\n        res = check_string4(nums[1:])\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1] and nums[i]!= nums[i-1]:\n                res = False\n                return res\n        return True\ndef check_string4_2(nums):\n    '''\n    Write a function that takes an array of strings and a string and checks if a string is a permutation of the array.\n    '''\n    if len(nums) == 0:\n        return True\n    else:\n        # Recursive:\n        res = check_string4_2(nums[1:])\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1] and nums[i]!= nums[i-1]:\n                res = False\n                return res\n        return True\ndef normalize_by_string_v2(nums):\n    '''\n    Write a function that returns the normal form of a string.\n    '''\n    if len(nums) == 0:\n        return ''\n    else:\n        nums = array('b', nums)\n        s = normalize(nums)\n        return s\ndef check_string_v2(nums):\n    '''\n    Write a function that takes an array of strings and a string and checks if a string is a permutation of the array.\n    '''\n    if len(nums) == 0:\n        return True\n    else:\n        # Recursive:\n        res = check_string_"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = sorted(nums)\n    return nums.count(nums[0]) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    ans=[]\n    for i in range(len(nums)):\n        if nums[i]>0:\n            ans.append(nums[i]/nums[i])\n    return ans\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i', [0])\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n            positives.append(num)\n    return (count/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if nums[i] > 0:\n                count += 1\n            elif nums[j] < 0:\n                count += 1\n        if count > 0:\n            return count\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    print(count)\n    \n    \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize variables to store maximum and minimum values. \n    max = list1[0]\n    min = list1[0]\n    \n    # iterate through list until we find the maximum value. \n    for i in list1: \n        if i < 0: \n            # update largest and smallest values. \n            if i > max: \n                max = i \n            elif i < min: \n                min = i \n                \n    return [min, max]\n    "
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    # Your code here\n    if list1:\n        return max(list1)\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negs = []\n    for el in list1:\n        if el < 0:\n            negs.append(el)\n    return max(negs)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    neg = 0\n    for i in list1:\n        if i < 0:\n            neg = neg + 1\n        if i < 0:\n            if neg > largest:\n                largest = neg\n            neg = 0\n    if neg > largest:\n        largest = neg\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = sorted(list1, reverse = True)\n    return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for item in list1:\n        if item < 0:\n            if item < max_neg:\n                max_neg = item\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = -list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1 == []:\n        return 0\n    else:\n        for i in range(len(list1)):\n            for j in range(i,len(list1)):\n                if list1[i] < list1[j]:\n                    list1[i],list1[j] = list1[j],list1[i]\n        return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(-num for num in list1 if num<0)"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==0: \n        return 0\n    elif list1[0]<list1[-1]: \n        return list1[0]\n    else: \n        return list1[-1]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(\"Trimming list to k:\")\n    for i in range(0, len(test_list)):\n        print(test_list[i][:-K])\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Make a copy of the list\n    test_list = list(test_list)\n    # loop through the list\n    for i in range(0, len(test_list)):\n        # Check if the tuple is of the right length\n        if len(test_list[i])!= K:\n            test_list[i] = test_list[i][0:K]\n    # Convert the list to string\n    result = ''.join(test_list)\n    # return the result\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # check if empty\n    if len(test_list) < 1:\n        return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for x in test_list:\n        if len(x) > K:\n            result.append(x[:K])\n        else:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        for j in range(K):\n            return_list.append(test_list[i][j])\n    return return_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            result.append(test_list[i][:K])\n        else:\n            result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    t = test_list\n    if len(t) < K:\n        print(\"Tuple is not of length \" + str(K))\n        return\n    return_tuple = []\n    for i in range(K):\n        return_tuple.append(t.pop(0))\n    return return_tuple\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for el in test_list:\n        for i in range(K-1):\n            result.append(el[i])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(K):\n        if len(test_list) == 1:\n            return test_list\n        elif test_list[i][0]!= test_list[i][1]:\n            test_list = [x for x in test_list if x[0]!= test_list[i][0]]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for item in test_list:\n        while len(item) < K:\n            item = (0,) + item\n        test_list.remove(item)\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_tuple = tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n    return index_multiplication_tuple\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for index in range(0, len(test_tup1)):\n        result = test_tup1[index] * test_tup2[index]\n        print(result, end=' ')\n    print()\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index = 1\n    for x in range(len(test_tup1)):\n        for y in range(len(test_tup2)):\n            index *= test_tup1[x][y]\n    return index\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0]*test_tup2[1], test_tup1[1]*test_tup2[0]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your code here\n    return (test_tup1[0] * test_tup2[1], test_tup1[1] * test_tup2[0])\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] * test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_tuple_x=[]\n    index_tuple_y=[]\n    for i in range(len(test_tup1)):\n        index_tuple_x.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        index_tuple_y.append(test_tup2[i])\n    index_tuple_x=tuple(index_tuple_x)\n    index_tuple_y=tuple(index_tuple_y)\n    index_tuple_x=list(index_tuple_x)\n    index_tuple_y=list(index_tuple_y)\n    return(index_tuple_x, index_tuple_y)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    output = 0\n    for i in range(len(test_tup1)):\n        output += test_tup1[i] * test_tup2[i]\n    return output\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_tup1, index_tup2 = 0, 0\n    result_tup1, result_tup2 = (), ()\n    while index_tup1 < len(test_tup1) and index_tup2 < len(test_tup2):\n        result_tup1 += test_tup1[index_tup1] * test_tup2[index_tup2]\n        index_tup1 += 1\n        index_tup2 += 1\n    return result_tup1, result_tup2\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # convert the given tuple to a list to create a list of tuples\n    test_tup_list = list(test_tup1)\n    # create a new list to perform the multiplication operation\n    tuple_list = []\n    # iterate through the tuples\n    for i in range(len(test_tup_list)):\n        # append each element of the tuple into the tuple list\n        tuple_list.append(test_tup_list[i][0] * test_tup_list[i][1])\n    # create a new tuple from the list\n    return tuple(tuple_list)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = 0\n    for i in tup: \n        occurence = occurence + lst.count(i)\n    return occurence \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst) \n    return counter \n \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = 0\n    for i in range(len(lst)):\n        c+= lst[i]*tup[i]\n    return c \ndef count_Occurrence_2(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = 0\n    for i in range(len(lst)):\n        c+= lst[i]*tup[i]**2\n    return c \ndef concordance(count_Occurrence_2, count_Occurrence_1):\n    '''\n    Write a python function to concordance an array of count of elements of all the tuples in a list.\n    '''\n    c = 0\n    for i in range(len(count_Occurrence_2)):\n        c+= count_Occurrence_2[i]*count_Occurrence_1[i]\n    return c \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len([item for item in lst if tup[item] == lst[item]])\n    \ndef count_Occurrence_by_sub(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [tup[i] for i in range(len(tup)) if tup[i] in lst]\n    \ndef count_Occurrence_by_key(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum([tup[i] for i in range(len(tup)) if tup[i] in lst])\n    \ndef remove_list(tup, lst): \n    '''\n    Write a python function to remove the elements of a tuple from a list.\n    '''\n    return [tup.pop(i) for i in range(len(tup)) if tup[i] in lst]\n    \ndef duplicate_list(tup, lst): \n    '''\n    Write a python function to find the duplicate list from a tuple.\n    '''\n    count = count_Occurrence(tup, lst)\n    return [item for item, count in Counter(lst).items() if count > 1]\n    \ndef join_list(lst): \n    '''\n    Write a python function to join the elements of a list to a string.\n    '''\n    return ''.join(lst)\n    \ndef remove_duplicate(lst,duplicate_list): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    return [item for item, count in Counter(lst).items() if count > 1]\n    \ndef contains_list(lst,lst_tup): \n    '''\n    Write a python function to check if a list contains a tuple.\n    '''\n    count = 0\n    for item in lst_tup:\n        if item in lst:\n            count += 1\n    return count == len(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if not tup:\n        return 0\n    for i in range(len(lst)):\n        if lst[i] not in tup:\n            tup.append(lst[i])\n        else:\n            tup.remove(lst[i])\n    return len(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a counter object \n    counter = Counter(lst)\n    # count the occurrence \n    return(counter.values()) \ndef main():\n    # get the input \n    input_file = sys.stdin.readline()\n    # convert to list and split them \n    n = int(input_file.split()[0])\n    lst = input_file.split()[1:]\n    # create a set \n    set_lst = set(lst)\n    # initialize result \n    result = 0\n    # loop \n    for i in range(n): \n        # get the element from the list \n        lst_i = lst[i] \n        # count the occurrence \n        result = result + count_Occurrence(lst_i, set_lst)\n    # convert the result to string \n    result = str(result) \n    # return the result \n    return(result) \nif __name__ == '__main__':\n    print(main()"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrences = Counter(lst)\n    occurrence_count = 0\n    for item in tup:\n        occurrence_count += occurrences[item]\n    return occurrence_count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dic = {}\n    count = 0\n    for el in lst:\n        count_dic[el] = lst.count(el)\n    return count_dic\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = 0\n    for i in range(len(lst)):\n        if tup[i] in lst[i]:\n            occurence+=1\n    print(\"The occurence of all the elements of the list is : \",occurence)\ndef str_to_list(txt):\n    '''\n    Write a python function to convert a string into a list\n    '''\n    lst = []\n    for i in txt:\n        lst.append(i)\n    return lst\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [x**3 for x in nums]\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # write your code here\n    cubes = []\n    for num in nums:\n        cube = num * num * num\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cubes(nums):\n        cubes = [num**3 for num in nums]\n        return cubes\n    cubes_l = cubes(nums)\n    cubes_l_dec = [cubes(i) for i in nums]\n    print(cubes_l_dec)\n    return cubes_l_dec\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [1]\n    for i in range(len(nums)):\n        cubes.append(cubes[i] * cubes[i])\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube_of_num for num in nums for cube_of_num in (num * num * num)]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube_num(nums, index, idx):\n        if index >= len(nums):\n            return 0\n        if nums[index] == idx:\n            return 1 + cube_num(nums, index+1, idx)\n        return cube_num(nums, index+1, idx)\n    return cube_num(nums, 0, 0)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    l = []\n    for i in nums:\n        l.append(i**3)\n    return l\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    import math\n    return (math.factorial(n) // (math.factorial(n - 1) * math.factorial(n - 2)))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(1, n+1):\n        s += i \n    return s \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    answer = 0\n    for i in range(1, n + 1):\n        answer += i\n    return answer\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    print('sum is ', sum)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=1:\n        return n\n    elif n==2:\n        return 1\n    elif n%2==0:\n        return n*cal_sum(n//2)\n    else:\n        return n*cal_sum(n-1)\n    \ndef sum_of_three():\n    print('The sum of 3 numbers is',cal_sum(3))\n    print('The sum of 5 numbers is',cal_sum(5))\n    print('The sum of 7 numbers is',cal_sum(7))\n    print('The sum of 13 numbers is',cal_sum(13))\n    print('The sum of 17 numbers is',cal_sum(17))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\ndef cal_avg(n):\n    '''\n    Write a function that takes a list of numbers and returns the average.\n    '''\n    sum = 0\n    for i in n:\n        sum += i\n    avg = sum/len(n)\n    return avg\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1,n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n+1) // 2\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return''.join([i.strip() for i in str if len(i.strip()) >= l])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    l.sort()\n    for i in range(0, len(l)-1):\n        if l[i+1] > l[i]:\n            # print(i)\n            # print(l[i])\n            l[i] = l[i+1]\n            # print(l[i])\n            # print(l[i+1])\n    # print(l)\n    return l\n    \ndef extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    l.sort()\n    return l[l.index(max(l))]\n    \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        return str[l-1:l+1]\n    except:\n        return '0'\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if type(str)!= list:\n        str = [str]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return_string = \"\"\n    for item in l:\n        return_string += str[item+len(item)]\n    return return_string\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while(i < len(str)):\n        if str[i:i+len(l)] == l:\n            return str[i+len(l):len(str)]\n        i += len(l)\n    return None\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = [i.strip() for i in l]\n    result = ''.join(l)\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in l:\n        extracted_strings.append(str[str.index(i)+1:str.index(i)+int(i.split(\"_\")[0])])\n    return extracted_strings\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # init answer\n    ans = ''\n    # loop through values\n    for x in range(0, l):\n        # extract each letter\n        ans += str[x].lower()\n    return ans\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = 0\n    while end < len(str):\n        if len(str[start:end+1]) > l:\n            end = end + 1\n        else:\n            break\n        start = end\n    return str[start: end+1]\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\ndef remove_punc(text1):\n    '''\n    Write a function to remove all punctuation marks from the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]','', text1)\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    return re.sub(r'\\d+', '', text1)\ndef remove_punct(text1):\n    '''\n    Write a function to remove all punctuation marks from the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef convert_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'[^0-9]', '', text1)\ndef remove_first_and_last_punct(text1):\n    '''\n    Convert all the punctuation marks in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_consonants(text1):\n    '''\n    Convert all the consonants in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_consonants2(text1):\n    '''\n    Convert all the consonants in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_whitespaces2(text1):\n    '''\n    Convert all the whitespaces in the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\ndef remove_punc2(text1):\n    '''\n    Convert all the punctuation marks in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_digits2(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_first_and_last_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_last_and_first_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_consonants_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'[^0-9]+','', text1)\ndef remove_whitespaces_digits(text1):\n    '''\n    Convert all the whitespaces in the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\ndef remove_punct_digits(text1):\n    '''\n    Convert all the punctuation marks in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_digits_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digits_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digit_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digit_digits2(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digits3(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digits3(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digits3(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digit_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_consonants(text1):\n    '''\n    Convert all the consonants in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_consonants(text1):\n    '''\n    Convert all the consonants in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_consonants2(text1):\n    '''\n    Convert all the consonants in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_digits_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digit_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digit_digits2(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_consonants_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_whitespaces_digits(text1):\n    '''\n    Convert all the whitespaces in the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\ndef remove_punct(text1):\n    '''\n    Convert all the punctuation marks in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_punct(text1):\n    '''\n    Convert all the punctuation marks in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+','', text1)\ndef remove_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\d+','', text1)\ndef remove_digits(text1):\n    '''\n    Convert all the digits in the given string.\n    '''\n    return re.sub(r'\\"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = \"\"\n    for letter in text1:\n        if letter!= \" \":\n            text2 += letter\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = \"\"\n    for char in text1:\n        if char == \" \":\n            text2 += char\n        else:\n            text2 += char\n    return text2\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation marks from the given string.\n    '''\n    text2 = \"\"\n    for char in text1:\n        if char in \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\":\n            text2 += char\n        else:\n            text2 += char\n    return text2\ndef is_url_valid(url):\n    '''\n    Write a function to check if the given URL is a valid URL or not.\n    '''\n    if not re.match(r\"^[a-zA-Z_][\\w\\d\\+\\-\\.\\_\\_]*$\", url):\n        return False\n    else:\n        return True\ndef read_url(filepath):\n    '''\n    Read a file containing a string containing a URL.\n    '''\n    with open(filepath) as f:\n        url = f.read()\n        return url\ndef write_output_file(url, query, query_type, output_file_path):\n    '''\n    Write an output file containing the output of the given queries.\n    '''\n    f = open(output_file_path, \"a\")\n    f.write(url)\n    f.write(\"\\n\")\n    f.write(\"Query Type: {}\\n\".format(query_type))\n    f.write(\"Query: {}\\n\".format(query))\n    f.close()\ndef clean_data(data):\n    '''\n    Write a function that cleans the given data and returns it in a clean form.\n    '''\n    data = remove_whitespaces(data)\n    data = remove_punctuation(data)\n    data = data.lower()\n    return data\ndef read_file(filepath):\n    '''\n    Read a file containing the data from a file and returns it as a list of strings.\n    '''\n    with open(filepath) as f:\n        data = f.read()\n        return data\ndef write_file(filepath, data):\n    '''\n    Write a file containing the data from a file and returns it as a string.\n    '''\n    with open(filepath, \"w\") as f:\n        f.write(data)\n    return data\ndef clean_and_process_file(filepath):\n    '''\n    Clean and process the given file.\n    '''\n    data = read_file(filepath)\n    data = clean_data(data)\n    return data\ndef clean_and_process_url(url):\n    '''\n    Clean and process the given URL.\n    '''\n    url = re.sub(r\"http://\\w+\\.\\w+\", \"\", url)\n    url = re.sub(r\"https://\\w+\\.\\w+\", \"\", url)\n    url = re.sub(r\"www\\.\\w+\", \"\", url)\n    url = re.sub(r\"^(http|https)://\", \"\", url)\n    return url\ndef process_file(filepath):\n    '''\n    Process a file and returns a dictionary containing the cleaned file data and the keyword list.\n    '''\n    data = read_file(filepath)\n    data = clean_data(data)\n    return data\ndef process_url(url):\n    '''\n    Process a URL.\n    '''\n    data = clean_and_process_url(url)\n    return data\ndef process_file_and_url(filepath, query, query_type):\n    '''\n    Process a file and a URL and returns a dictionary containing the cleaned file data and the keyword list.\n    '''\n    data = process_file(filepath)\n    url = clean_and_process_url(data)\n    if query == \"\":\n        return url, data\n    else:\n        data_url = {\"data\": {\"query_type\": query_type, \"query\": query}}\n        url = re.sub(r\"\\w+\\.\\w+\", \"\", url)\n        url = re.sub(r\"http://\\w+\\.\\w+\", \"\", url)\n        url = re.sub(r\"https://\\w+\\.\\w+\", \"\", url)\n        url = re.sub(r\"www\\.\\w+\", \"\", url)\n        url = re.sub(r\"^(http|https)://\", \"\", url)\n        return url, data_url\ndef process_url_and_file(filepath, query, query_type):\n    '''\n    Process a URL and a file and returns a dictionary containing the cleaned file data and the keyword list.\n    '''\n    url, data = process_file_and_url(filepath, query, query_type)\n    url = remove_punctuation(url)\n    url = remove_whitespaces(url)\n    url = remove_whitespaces(url)\n    return url, data\ndef clean_data_and_file(data, filepath):\n    '''\n    Clean and process the given data and save it as a file.\n    '''\n    data = remove_whitespaces(data)\n    data = remove_punctuation(data)\n    data = data.lower()\n    data = data.split(\",\")\n    data = [clean_data(item) for item in data]\n    data = [item for item in data if item!= \"\"]\n    with open(filepath, \"w\") as f:\n        for item in data:\n            f.write(\"{}\\n\".format(item))\n    return data\ndef process_file_and_url_and_clean_data(filepath, query, query_type):\n    '''\n    Process a file and a URL and clean the given data and save it as a file.\n    '''\n    data = process_file(filepath)\n    url, data = process_url(data)\n    url = remove_punctuation(url)\n    url = remove_whitespaces(url)\n    url = remove_whitespaces(url)\n    return url, data\ndef process_file_and_url_and_clean_data_and_url(filepath, query, query_type):\n    '''\n    Process a file and a URL and clean the given data and save it as a file.\n    '''\n    url, data = process_file_and_url_and_clean_data(filepath, query, query_type)\n    data_url = {\"data\": {\"query_type\": query_type, \"query\": query}}\n    url = remove_punctuation(url)\n    url = remove_whitespaces(url)\n    url = remove_whitespaces(url)\n    return url, data_url\ndef create_url_query_type_and_query(url, data):\n    '''\n    Create a url and a type of query for a given URL.\n    '''\n    return url, data\ndef create_url_query_type_and_query_url(url, data):\n    '''\n    Create a url and a type of query for a given URL.\n    '''\n    return remove_punctuation(url), data\ndef create_url_query_type_and_query_url_and_url(url, data):\n    '''\n    Create a url and a type of query for a given URL.\n    '''\n    return remove_punctuation(url), data\ndef create_url_query_type_and_query_url_and_file(filepath, query, query_type):\n    '''\n    Create a url and a type of query for a given URL.\n    '''\n    url, data = process_file_and_url_and_url(filepath, query, query_type)\n    url = remove_punctuation(url)\n    url = remove_whitespaces(url)\n    url = remove_whitespaces(url)\n    return url, data\ndef create_url_query_type_and_query_url_and_file_and_url(filepath, query, query_type):\n    '''\n    Create a url and a type of query for a given URL.\n    '''\n    url, data = process_file_and_url_and_url(filepath, query, query_type)\n    url "
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    regex = re.compile('\\s+')\n    text2 = regex.sub('', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile('\\s+')\n    return pattern.sub(' ', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    def remove_wsp_chars(text):\n        '''\n        Write a function to remove all whitespace characters in the given string.\n        '''\n        text = re.sub(r'\\s+','', text)\n        return text\n    return remove_wsp_chars(text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''\n    text = re.sub('^[ \\t]*', '', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+',' ',text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_sale_cost = sale_amount * actual_cost\n    if sale_amount < 0:\n        return 0\n    if sale_amount > actual_sale_cost:\n        return actual_sale_cost\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount*(1+actual_cost/100)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #Error checking and validation\n    if (actual_cost - sale_amount < 0):\n        return 0.0\n    else: \n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost==sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == actual_cost:\n        return sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    pass\n    # YOUR CODE HERE\n    # raise NotImplementedError #replace with your code\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 :\n        return n\n    else :\n        n1 = n // 2\n        n2 = sumofFactors(n1)\n        # print(n1,n2)\n        return n1 * n2\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0) : \n        return 0\n    for i in range(2, math.floor(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            print (i)\n            return (n / i)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Your code goes here\n    return sum(i for i in range(1, n) if (n%i==0))\n    \n    \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return math.factorial(n) // math.factorial(n - 1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            count += i\n            if (n//i==i) :\n                count += (i*(i+1))//2\n    return count\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0:\n            sum += i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        return sumofFactors(n - 1) + sumofFactors(n - 2) \n    \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=2\n    s=0\n    while (i<math.sqrt(n)) :\n        if n % i == 0 :\n            s += i\n            n = n//i\n            i += 1\n            continue\n        i += 1\n    return s\ndef factorial(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    i=1\n    factorial=1\n    while i<=n :\n        factorial*=i\n        i+=1\n    return factorial\ndef primeFactors(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 2 or n==3 : return True\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0:\n            return False\n    return True\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0:\n            return False\n    return True\ndef factorial2(n) :\n    '''\n    Use the factorial function to calculate the factorial of a number.\n    '''\n    fact=1\n    while n>=2 :\n        fact*=n\n        n-=1\n    return fact\ndef isPrime2(n) : \n    '''\n    Use the isPrime function to check whether a number is prime or not.\n    '''\n    for i in range(2,n+1) : \n        if n%i == 0: \n            return False\n    return True\ndef main() :\n    '''\n    Calculate the sum of all factors of a number.\n    '''\n    print('Input a number:')\n    num=int(input())\n    print(sumofFactors(num))\n    print(factorial(num))\n    print(primeFactors(num))\n    print(isPrime(num))\n    print(isPrime2(num))\nmain()"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n%2 == 0 :\n        return n/2\n    else :\n        return n*sumofFactors(n-1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors += i\n    if n > 1:\n        factors += n // math.factorial(n)\n    return factors\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    import os\n    try:\n        f=open(text,'r')\n        a=f.read()\n        f.close()\n    except:\n        return 'File not found'\n    \n    f=open(text,'r')\n    t=f.read().replace('\"z\"',' ')\n    f.close()\n    p=re.compile(r'\\b\\w+\\b')\n    res=p.findall(t)\n    if len(res)>0:\n        return res[0]\n    else:\n        return 'No z word found in this text'\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #text = input('Enter text: ')\n    text = text.lower()\n    result = re.search('z', text)\n    if result!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print(text)\n    x = re.findall(r'z', text)\n    #print(x)\n    if len(x) > 0:\n        #print(x)\n        return True\n    else:\n        #print('No z')\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # split the string into a list of words\n    words_in_string = text.split()\n    # iterate over the words in the list and check if the first word\n    # matches the 'z' pattern\n    for word in words_in_string:\n        if re.match(r'[a-z]*z', word):\n            # return the first word that matches the 'z' pattern\n            return word\n    return None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'[a-z]\\w+z\\w+', text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex_str = '\\w{2,}z?'\n    return re.match(regex_str, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # The first group of the word is the pattern to match\n    pattern = r\"\\b[a-z]{1}\\b\"\n    # When the word is matched, the function returns a true value\n    # and the match is not part of the word\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    search_words = ['z', 'Z', 'JU', 'j', 'o', 'O', 'a', 'A']\n    # remove upper case letters\n    text = text.replace('z', '')\n    text = text.replace('Z', '')\n    text = text.replace('JU', '')\n    text = text.replace('j', '')\n    text = text.replace('o', '')\n    text = text.replace('O', '')\n    text = text.replace('a', '')\n    text = text.replace('A', '')\n    # remove punctuation\n    text = re.sub(r'[^a-zA-Z]','', text)\n    # remove all spaces\n    text = re.sub(r'\\s+','', text)\n    text = text.split()\n    for word in search_words:\n        text = [w for w in text if re.search(word, w) is not None]\n    # remove duplicate words\n    text = list(set(text))\n    # remove new line\n    text = [x.strip() for x in text]\n    # remove stopwords\n    text = [x.split() for x in text if x.strip()!= '']\n    # remove empty words\n    text = [x for x in text if x!= []]\n    # return the clean text\n    return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return 'z' in re.findall(r'z',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # The string that will be returned\n    match_string = ''\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 >= 1) and (monthnum2 <= 12):\n        return True\n    else:\n        return False\n        \ndef get_days_between(day1, day2):\n    '''\n    Calculate the number of days between two days.\n    '''\n    diff = abs(day1 - day2)\n    return diff\n    \ndef get_the_starts_ends_days(start, end):\n    '''\n    Calculate the number of days between two points of the time interval.\n    '''\n    diff = abs(start - end)\n    return diff\n    \ndef get_the_number_of_days_in_interval(start, end):\n    '''\n    Calculate the number of days between two points of the time interval.\n    '''\n    days_in_interval = get_the_days_between(start, end)\n    return days_in_interval\n    \ndef get_the_average_duration_of_the_times_in_interval(times_in_interval):\n    '''\n    Calculate the average duration of all the times in the interval.\n    '''\n    average_duration = 0\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_average_duration_of_the_times_in_interval_without_average(times_in_interval):\n    '''\n    Calculate the average duration of all the times in the interval without the average duration.\n    '''\n    average_duration = 0\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_average_duration_of_the_times_in_interval_with_average(times_in_interval, average_duration):\n    '''\n    Calculate the average duration of all the times in the interval with the average duration.\n    '''\n    average_duration = average_duration/len(times_in_interval)\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_average_duration_of_the_times_in_interval_without_average_and_average(times_in_interval):\n    '''\n    Calculate the average duration of all the times in the interval without the average duration and the average duration.\n    '''\n    average_duration = 0\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_duration_of_the_times_in_interval(times_in_interval):\n    '''\n    Calculate the duration of all the times in the interval.\n    '''\n    duration = 0\n    for time in times_in_interval:\n        duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return duration\n    \ndef get_the_average_duration_of_the_times_in_interval(times_in_interval):\n    '''\n    Calculate the average duration of all the times in the interval.\n    '''\n    average_duration = 0\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_duration_of_the_times_in_interval_with_average(times_in_interval, average_duration):\n    '''\n    Calculate the average duration of all the times in the interval with the average duration.\n    '''\n    average_duration = average_duration/len(times_in_interval)\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_average_duration_of_the_times_in_interval_without_average(times_in_interval):\n    '''\n    Calculate the average duration of all the times in the interval without the average duration.\n    '''\n    average_duration = 0\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_average_duration_of_the_times_in_interval_without_average_and_average(times_in_interval):\n    '''\n    Calculate the average duration of all the times in the interval without the average duration and the average duration.\n    '''\n    average_duration = 0\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_duration_of_the_times_in_interval_without_average_and_average(times_in_interval):\n    '''\n    Calculate the duration of all the times in the interval without the average duration and the average duration.\n    '''\n    average_duration = 0\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_average_duration_of_the_times_in_interval_with_average(times_in_interval, average_duration):\n    '''\n    Calculate the average duration of all the times in the interval with the average duration.\n    '''\n    average_duration = average_duration/len(times_in_interval)\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_duration_of_the_times_in_interval_with_average(times_in_interval, average_duration):\n    '''\n    Calculate the average duration of all the times in the interval with the average duration.\n    '''\n    average_duration = average_duration/len(times_in_interval)\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_average_duration_of_the_times_in_interval_with_average_and_average(times_in_interval):\n    '''\n    Calculate the average duration of all the times in the interval with the average duration and the average duration.\n    '''\n    average_duration = 0\n    for time in times_in_interval:\n        average_duration += get_the_days_between(times_in_interval[time][1], times_in_interval[time][0])\n    return average_duration/len(times_in_interval)\n    \ndef get_the_average_duration_of_th"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum=monthnum2\n    if monthnum<0 or monthnum>12:\n        return False\n    if monthnum == 1:\n        return True\n    if monthnum == 2:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 3:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 4:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 5:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 6:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 7:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 8:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 9:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 10:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 11:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    elif monthnum == 12:\n        if monthnum<3 or monthnum>12:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2<=12 and monthnum2>=1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1, 13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # if month is january\n    if monthnum2 == 1:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1:\n        return True\n    else:\n        if monthnum2 == 2:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 3:\n                    return True\n                else:\n                    if monthnum2 == 4:\n                        return True\n                    else:\n                        if monthnum2 == 5:\n                            return True\n                        else:\n                            if monthnum2 == 6:\n                                return True\n                            else:\n                                if monthnum2 == 7:\n                                    return True\n                                else:\n                                    if monthnum2 == 8:\n                                        return True\n                                    else:\n                                        if monthnum2 == 9:\n                                            return True\n                                        else:\n                                            if monthnum2 == 10:\n                                                return True\n                                            else:\n                                                if monthnum2 == 11:\n                                                    return True\n                                            else:\n                                                if monthnum2 == 12:\n                                                    return True\n                                        else:\n                                            return False\n        elif monthnum2 == 3:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 2:\n                    return True\n                else:\n                    if monthnum2 == 4:\n                        return True\n                    else:\n                        if monthnum2 == 5:\n                            return True\n                        else:\n                            if monthnum2 == 6:\n                                return True\n                            else:\n                                if monthnum2 == 7:\n                                    return True\n                                else:\n                                    if monthnum2 == 8:\n                                        return True\n                                    else:\n                                        if monthnum2 == 9:\n                                            return True\n                                        else:\n                                            if monthnum2 == 10:\n                                                return True\n                                            else:\n                                                if monthnum2 == 11:\n                                                    return True\n                                            else:\n                                                if monthnum2 == 12:\n                                                    return True\n                                        else:\n                                            return False\n        elif monthnum2 == 4:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 2:\n                    return True\n                else:\n                    if monthnum2 == 3:\n                        return True\n                    else:\n                        if monthnum2 == 5:\n                            return True\n                        else:\n                            if monthnum2 == 6:\n                                return True\n                            else:\n                                if monthnum2 == 7:\n                                    return True\n                                else:\n                                    if monthnum2 == 8:\n                                        return True\n                                    else:\n                                        if monthnum2 == 9:\n                                            return True\n                                        else:\n                                            if monthnum2 == 10:\n                                                return True\n                                            else:\n                                                if monthnum2 == 11:\n                                                    return True\n                                            else:\n                                                if monthnum2 == 12:\n                                                    return True\n                                        else:\n                                            return False\n        elif monthnum2 == 5:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 2:\n                    return True\n                else:\n                    if monthnum2 == 3:\n                        return True\n                    else:\n                        if monthnum2 == 4:\n                            return True\n                        else:\n                            if monthnum2 == 5:\n                                return True\n                            else:\n                                if monthnum2 == 6:\n                                    return True\n                                else:\n                                    if monthnum2 == 7:\n                                        return True\n                                else:\n                                    if monthnum2 == 8:\n                                        return True\n                                    else:\n                                        if monthnum2 == 9:\n                                            return True\n                                        else:\n                                            if monthnum2 == 10:\n                                                return True\n                                            else:\n                                                if monthnum2 == 11:\n                                                    return True\n                                            else:\n                                                if monthnum2 == 12:\n                                                    return True\n                                        else:\n                                            return False\n        elif monthnum2 == 6:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 2:\n                    return True\n                else:\n                    if monthnum2 == 3:\n                        return True\n                    else:\n                        if monthnum2 == 4:\n                            return True\n                        else:\n                            if monthnum2 == 5:\n                                return True\n                            else:\n                                if monthnum2 == 6:\n                                    return True\n                                else:\n                                    if monthnum2 == 7:\n                                        return True\n                                else:\n                                    if monthnum2 == 8:\n                                        return True\n                                    else:\n                                        if monthnum2 == 9:\n                                            return True\n                                        else:\n                                            if monthnum2 == 10:\n                                                return True\n                                            else:\n                                                if monthnum2 == 11:\n                                                    return True\n                                            else:\n                                                if monthnum2 == 12:\n                                                    return True\n                                        else:\n                                            return False\n        elif monthnum2 == 7:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 2:\n                    return True\n                else:\n                    if monthnum2 == 3:\n                        return True\n                    else:\n                        if monthnum2 == 4:\n                            return True\n                        else:\n                            if monthnum2 == 5:\n                                return True\n                            else:\n                                if monthnum2 == 6:\n                                    return True\n                                else:\n                                    if monthnum2 == 7:\n                                        return True\n                                else:\n                                    if monthnum2 == 8:\n                                        return True\n                                else:\n                                    if monthnum2 == 9:\n                                        return True\n                                    else:\n                                        if monthnum2 == 10:\n                                            return True\n                                        else:\n                                            if monthnum2 == 11:\n                                                return True\n                                            else:\n                                                if monthnum2 == 12:\n                                                    return True\n                                            else:\n                                                return False\n        elif monthnum2 == 8:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 2:\n                    return True\n                else:\n                    if monthnum2 == 3:\n                        return True\n                    else:\n                        if monthnum2 == 4:\n                            return True\n                        else:\n                            if monthnum2 == 5:\n                                return True\n                            else:\n                                if monthnum2 == 6:\n                                    return True\n                                else:\n                                    if monthnum2 == 7:\n                                        return True\n                                else:\n                                    if monthnum2 == 8:\n                                        return True\n                                else:\n                                    if monthnum2 == 9:\n                                        return True\n                                    else:\n                                        if monthnum2 == 10:\n                                            return True\n                                        else:\n                                            if monthnum2 == 11:\n                                                return True\n                                            else:\n                                                if monthnum2 == 12:\n                                                    return True\n                                            else:\n                                                return False\n        elif monthnum2 == 9:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 2:\n                    return True\n                else:\n                    if monthnum2 == 3:\n                        return True\n                    else:\n                        if monthnum2 == 4:\n                            return True\n                        else:\n                            if monthnum2 == 5:\n                                return True\n                            else:\n                                if monthnum2 == 6:\n                                    return True\n                                else:\n                                    if monthnum2 == 7:\n                                        return True\n                                else:\n                                    if monthnum2 == 8:\n                                        return True\n                                else:\n                                    if monthnum2 == 9:\n                                        return True\n                                    else:\n                                        if monthnum2 == 10:\n                                            return True\n                                        else:\n                                            if monthnum2 == 11:\n                                                return True\n                                            else:\n                                                if monthnum2 == 12:\n                                                    return True\n                                            else:\n                                                return False\n        elif monthnum2 == 10:\n            if monthnum2 == 1:\n                return True\n            else:\n                if monthnum2 == 2:\n                    return True\n                else:\n                    if monthnum2 == 3:\n                        return True\n                    else:\n                        if monthnum2 == 4:\n                            return True\n                        else:\n                            if monthnum2 == 5:\n                                return True\n                            else:\n                                if monthnum2 == 6:\n                                    return True\n                                else:\n                                    if monthnum2 ="
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12 or monthnum2 < 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 2:\n        return False\n    elif monthnum2 == 2:\n        if monthnum2 == 1:\n            return True\n    elif monthnum2 == 3:\n        if monthnum2 == 4:\n            return True\n    elif monthnum2 == 5:\n        if monthnum2 == 6:\n            return True\n    elif monthnum2 == 7:\n        if monthnum2 == 8:\n            return True\n    elif monthnum2 == 9:\n        if monthnum2 == 10:\n            return True\n    elif monthnum2 == 11:\n        if monthnum2 == 12:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if int(monthnum2) % 4!= 0 and int(monthnum2) % 100!= 0 and int(monthnum2) % 400!= 0:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_list = list(str(monthnum2))\n    if (monthnumb_list[0] == '0'):\n        monthnumb_list[0] = '1'\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in stringlist:\n        new_list.append(i[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse = []\n    for i in range(len(stringlist)):\n        reverse.append(stringlist[i])\n        reverse.reverse()\n    return reverse\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return ''.join(stringlist[::-1]"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == []:\n        return stringlist\n    else:\n        return reverse_string_list(stringlist[1:]) + stringlist[0]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print(\">> Doing reverse string lists\")\n    for i in range(len(stringlist)):\n        print(stringlist[i],end=', ')\n    print()\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for index, value in enumerate(stringlist):\n        stringlist[index] = value[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n    \ndef sort_list(l):\n    '''\n    Write a function to sort a given list of integers.\n    '''\n    return sorted(l)\n    \ndef reverse_string(stringlist):\n    '''\n    Write a function to reverse a given string list.\n    '''\n    return reverse_string_list(stringlist)\n    \ndef sort_string(l):\n    '''\n    Write a function to sort a given string list.\n    '''\n    return sort_list(l)\n    \ndef string_length(stringlist):\n    '''\n    Write a function to get the length of a given list of strings.\n    '''\n    return len(stringlist)\n    \ndef string_join(stringlist):\n    '''\n    Write a function to join a given list of strings.\n    '''\n    return ''.join(stringlist)\n    \ndef int_input(stringlist):\n    '''\n    Write a function to get an integer from a given list of strings.\n    '''\n    return int(input(stringlist))\n    \ndef string_output(stringlist):\n    '''\n    Write a function to get a string from a given list of strings.\n    '''\n    return''.join(stringlist)\n    \ndef int_list_input(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_input(input(stringlist))\n    \ndef string_list_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_output(string_input(input(stringlist)))\n    \ndef int_list_string_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_list_output(string_input(string_input(input(stringlist))))\n    \ndef int_string_list_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_list_output(string_input(string_input(string_input(input(stringlist)))))\n    \ndef int_string_list_input(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_input(input(stringlist))\n    \ndef int_string_list_string_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_list_output(string_input(string_input(string_input(input(stringlist)))));\n    \ndef int_string_list_int_string_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_list_output(string_input(string_input(string_input(string_input(input(stringlist))))));\n    \ndef int_string_list_input(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_input(input(stringlist))\n    \ndef int_string_list_string_input(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_input(input(string_input(string_input(string_input(input(stringlist))))));\n    \ndef int_string_list_int_string_input(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_input(input(string_input(string_input(string_input(string_input(string_input(input(stringlist))))))))\n    \ndef int_string_list_int_string_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_output(string_input(input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(input(stringlist)))))))))));\n    \ndef string_list_input(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_input(input(input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(input(stringlist))))))))))))\n    \ndef string_list_int_string_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_output(input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(input(stringlist))))))))))))));\n    \ndef int_string_list_int_string_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_output(input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(input(stringlist)))))))))))))))))))));\n    \ndef int_string_list_string_output(stringlist):\n    '''\n    Write a function to get a list from an integer input from the user.\n    '''\n    return string_output(input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_input(string_inpu"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # def reverse_string_list(stringlist):\n    #     reversed = []\n    #     for s in stringlist:\n    #         reversed.append(s[::-1])\n    #     return reversed\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[i::-1] for i in range(len(stringlist))]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst) # Take the sorted list and check for max length and return the minimum length.\n    lst_copy = lst.copy() # copy the list to avoid modifying the original.\n    min_len = lst[0] # assign the minimum length to min_len\n    for i in lst_copy: # while the list is not empty, find the min and assign it to the min_len.\n        if len(str(i)) < min_len: # if the list has less than the min_len, assign the new value to min_len.\n            min_len = i\n    return min_len # return the sublist with minimum length.\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    start,end=0,len(lst)-1\n    #we do this because for lst[0:5], we will get sublist of length 5.\n    while start < end:\n        mid = (start + end) // 2\n        if lst[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)): \n        if lst[i] < min: \n            min = lst[i] \n    return min \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst, key=len)\n    return(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    minLen = lst[0]\n    i = 0\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i] < minLen:\n            minLen = lst[i+1] - lst[i]\n    print(minLen)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) < 2: \n        return lst \n    else: \n        if lst[0] > lst[1]: \n            return Find_Min(lst[1:]) \n        else: \n            return Find_Min(lst[:2]) \n "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # looping through each element in the list \n    for i in range(len(lst)):\n        if lst[i] < lst[0]: \n            continue\n        j = 0\n        for j in range(i+1,len(lst)): \n            if lst[j] < lst[i]: \n                j += 1\n        lst[i], lst[j] = lst[j], lst[i] \n    return lst \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # find length of list\n    length = len(lst)\n    # create an empty list to store minimum length\n    min_list = []\n    for i in range(0, length):\n        min_list.append(lst[i])\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    \n    min = lst[0]\n    index = 0\n    for i in range(1,len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n            index = i\n    lst = lst[:index+1]\n    return Find_Min(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if lst[i] > lst[j]: \n                lst[i], lst[j] = lst[j], lst[i] \n    return lst\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return 0.5*(l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    "
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #removes uppercase letters\n    str1 = re.sub(r'[A-Z]','',str1.lower())\n    #removes special characters\n    str1 = re.sub(r'[!@#$%&*+]','',str1)\n    #removes uninteresting characters\n    str1 = re.sub(r'[^a-zA-Z0-9]','',str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[^A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str=''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str+=str1[i].lower()\n        else:\n            new_str+=str1[i]\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"(.)\\1+\", \"\\g<1>\\1\", str1, flags=re.MULTILINE)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a variable to store the substring\n    substring = ''\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.upper()\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NUMERIC'))\ndef remove_numbers_without_spaces(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NUMERIC'))\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NUMERIC'))\ndef remove_acronyms(str1):\n    '''\n    Write a function to remove acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('','','ACRONYMS'))\ndef remove_exclamation_marks(str1):\n    '''\n    Write a function to remove exclamation marks from a given string.\n    '''\n    return str1.translate(str.maketrans('','','EXCLAMATIONS'))\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','','PUNCT'))\ndef remove_quotations(str1):\n    '''\n    Write a function to remove quotations from a given string.\n    '''\n    return str1.translate(str.maketrans('','','QUOTATIONS'))\ndef remove_till_space(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','TILL SPACE'))\ndef remove_invalid_symbols(str1):\n    '''\n    Write a function to remove invalid symbols from a given string.\n    '''\n    return str1.translate(str.maketrans('','','INVALID SYMBOLS'))\ndef remove_common_symbols(str1):\n    '''\n    Write a function to remove common symbols from a given string.\n    '''\n    return str1.translate(str.maketrans('','','COMMON SYMBOLS'))\ndef remove_non_space_characters(str1):\n    '''\n    Write a function to remove non-space characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NOT SPACE CHARACTERS'))\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','SPECIAL CHARACTERS'))\ndef remove_number(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NUMERIC'))\ndef remove_special_symbols(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','SPECIAL SYMBOLS'))\ndef remove_common_symbols(str1):\n    '''\n    Write a function to remove common symbols from a given string.\n    '''\n    return str1.translate(str.maketrans('','','COMMON SYMBOLS'))\ndef remove_digits_without_spaces(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NUMERIC'))\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','','PUNCT'))\ndef remove_acronyms(str1):\n    '''\n    Write a function to remove acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('','','ACRONYMS'))\ndef remove_exclamation_marks(str1):\n    '''\n    Write a function to remove exclamation marks from a given string.\n    '''\n    return str1.translate(str.maketrans('','','EXCLAMATIONS'))\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('','','PUNCT'))\ndef remove_quotations(str1):\n    '''\n    Write a function to remove quotations from a given string.\n    '''\n    return str1.translate(str.maketrans('','','QUOTATIONS'))\ndef remove_till_space(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','TILL SPACE'))\ndef remove_invalid_symbols(str1):\n    '''\n    Write a function to remove invalid symbols from a given string.\n    '''\n    return str1.translate(str.maketrans('','','INVALID SYMBOLS'))\ndef remove_common_symbols(str1):\n    '''\n    Write a function to remove common symbols from a given string.\n    '''\n    return str1.translate(str.maketrans('','','COMMON SYMBOLS'))\ndef remove_number(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NUMERIC'))\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','SPECIAL CHARACTERS'))\ndef remove_non_space_characters(str1):\n    '''\n    Write a function to remove non-space characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NOT SPACE CHARACTERS'))\ndef remove_special_symbols(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','','SPECIAL SYMBOLS'))\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NUMERIC'))\ndef remove_common_symbols(str1):\n    '''\n    Write a function to remove common symbols from a given string.\n    '''\n    return str1.translate(str.maketrans('','','COMMON SYMBOLS'))\ndef remove_digits_without_spaces(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans('','','NUMERIC'))\ndef remove_acronyms(str1):\n    '''\n    Write a function to remove acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('','','ACRONYMS'))\ndef remove_exclamation_marks(str1):\n    '''\n    Write a function to remove exclamation marks from a given string.\n    '''\n    return str1.translate(str.maketrans('','','EXCLAMATIONS'))\ndef remove_punctuation(str1):\n    '''\n    Writ"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    p = re.compile('[^A-Z]')\n    return p.sub('', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str2 += str1[i].upper()\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\w+\\'\\w+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    # Write your code here\n    # if \" \" in str1:\n    #     str2 = str1.replace(\" \", \"\")\n    #     str3 = re.sub('[^a-zA-Z]', '', str2)\n    #     return str3\n    # else:\n    #     return str1\n    \n    return str1.replace(\" \", \"\")\n    \n    \ndef remove_spaces(str1):\n    '''\n    Write a function that removes any whitespace characters from a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1)\n    \n    \ndef remove_at_beginning(str1):\n    '''\n    Write a function that removes any whitespace characters at the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:1])\n    \n    \ndef remove_at_end(str1):\n    '''\n    Write a function that removes any whitespace characters at the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[-1:])\n    \n    \ndef remove_at_most_k_characters(str1, k):\n    '''\n    Write a function that removes any whitespace characters at the beginning or the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:k] + str1[k + 1:])\n    \n    \ndef remove_repeated_letters(str1):\n    '''\n    Write a function that removes any whitespace characters from a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1)\n    \n    \ndef remove_at_most_k_letter(str1, k):\n    '''\n    Write a function that removes any whitespace characters from the beginning or the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:k] + str1[k:])\n    \n    \ndef remove_at_most_k_letter_case(str1, k):\n    '''\n    Write a function that removes any whitespace characters from the beginning or the end of a string.\n    '''\n    \n    return re.sub('[^A-Z]', '', str1[:k] + str1[k:])\n    \n    \ndef remove_at_most_k_letter_uppercase(str1, k):\n    '''\n    Write a function that removes any whitespace characters from the beginning or the end of a string.\n    '''\n    \n    return re.sub('[^A-Z0-9]', '', str1[:k] + str1[k:])\n    \n    \ndef remove_space(str1):\n    '''\n    Write a function that removes any whitespace characters from a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1)\n    \n    \ndef is_binary_string(str1):\n    '''\n    Write a function that checks whether a string is a valid binary string.\n    '''\n    \n    return len(str1) % 2 == 0\n    \n    \ndef remove_spaces_before_first_exclamation(str1):\n    '''\n    Write a function that removes any whitespace characters from the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[1:])\n    \n    \ndef remove_spaces_before_last_exclamation(str1):\n    '''\n    Write a function that removes any whitespace characters from the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_space_before_first_exclamation(str1):\n    '''\n    Write a function that removes any whitespace characters from the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[1:1])\n    \n    \ndef remove_space_after_first_exclamation(str1):\n    '''\n    Write a function that removes any whitespace characters from the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_space_before_last_exclamation(str1):\n    '''\n    Write a function that removes any whitespace characters from the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_space_after_last_exclamation(str1):\n    '''\n    Write a function that removes any whitespace characters from the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_spaces_before_first_quotation(str1):\n    '''\n    Write a function that removes any whitespace characters from the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[1:])\n    \n    \ndef remove_spaces_after_first_quotation(str1):\n    '''\n    Write a function that removes any whitespace characters from the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_quotation_before_first_exclamation(str1):\n    '''\n    Write a function that removes any whitespace characters from the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_quotation_after_first_exclamation(str1):\n    '''\n    Write a function that removes any whitespace characters from the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_space_before_last_quotation(str1):\n    '''\n    Write a function that removes any whitespace characters from the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_space_after_last_quotation(str1):\n    '''\n    Write a function that removes any whitespace characters from the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1])\n    \n    \ndef remove_space_before_first_quotation_and_last_quotation(str1):\n    '''\n    Write a function that removes any whitespace characters from the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1]) + str1[-1:]\n    \n    \ndef remove_space_after_first_quotation_and_last_quotation(str1):\n    '''\n    Write a function that removes any whitespace characters from the end of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[:-1]) + str1[-1:]\n    \n    \ndef remove_space_before_middle_quotation(str1):\n    '''\n    Write a function that removes any whitespace characters from the beginning of a string.\n    '''\n    \n    return re.sub('[^a-zA-Z0-9]', '', str1[1:])"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    for index, list in enumerate(lst): \n        for element in list: \n            print(element) \n            break\n    # The index of each element \n    # in list \n    # e.g. for index, element in enumerate(lst): \n    #    print(index, element) \n    # will print 0 1 2 \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    str = lst[0]\n    for i in range(len(lst)): \n        str = str + lst[i][0]\n    return str \ndef get_number_of_pulses(lst): \n    '''\n    Write a python function to get the number of pulses in a list of sublists.\n    '''\n    num = 0\n    for i in range(len(lst)): \n        if i > 0: \n            num = num + (lst[i][1] - lst[i-1][1])\n    return num \ndef get_average(lst): \n    '''\n    Write a python function to get the average value of a sublist of a list of sublists.\n    '''\n    return (sum(lst)/len(lst))\ndef get_median(lst): \n    '''\n    Write a python function to get the median value of a sublist of a list of sublists.\n    '''\n    return get_number_of_pulses(lst) / 2\ndef get_standard_deviation(lst): \n    '''\n    Write a python function to get the standard deviation of a sublist of a list of sublists.\n    '''\n    return (get_number_of_pulses(lst)**0.5)\ndef get_mode(lst): \n    '''\n    Write a python function to get the mode value of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (Extract(lst))\n    else: \n        return (Extract(lst) + get_average(lst))\ndef get_variance(lst): \n    '''\n    Write a python function to get the variance value of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))\n    else: \n        return (get_standard_deviation(lst)**2)\ndef get_iqr(lst): \n    '''\n    Write a python function to get the IQR value of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))**2\n    else: \n        return (get_standard_deviation(lst)**2)**(1/2)\ndef get_rms(lst): \n    '''\n    Write a python function to get the RMS value of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))**2\n    else: \n        return (get_standard_deviation(lst)**2)**(1/2)\ndef get_mode_of_pulses(lst): \n    '''\n    Write a python function to get the mode of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_mode(lst))\n    else: \n        return (get_mode(lst) + get_average(lst))\ndef get_median_of_pulses(lst): \n    '''\n    Write a python function to get the median of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_mode(lst))\n    else: \n        return (get_mode(lst) + get_average(lst))/2\ndef get_standard_deviation_of_pulses(lst): \n    '''\n    Write a python function to get the standard deviation of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))\n    else: \n        return (get_standard_deviation(lst)**2)\ndef get_skewness_of_pulses(lst): \n    '''\n    Write a python function to get the skewness of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))\n    else: \n        return (get_standard_deviation(lst)**2)**(1/2)\ndef get_kurtosis_of_pulses(lst): \n    '''\n    Write a python function to get the kurtosis of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))**2\n    else: \n        return (get_standard_deviation(lst)**2)**(1/2)\ndef get_quantile_of_pulses(lst): \n    '''\n    Write a python function to get the quantile of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))**2\n    else: \n        return (get_standard_deviation(lst)**2)**(1/2)\ndef get_skewness_of_the_iqr(lst): \n    '''\n    Write a python function to get the skewness of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))**2\n    else: \n        return (get_standard_deviation(lst)**2)**(1/2)**(1/2)\ndef get_kurtosis_of_the_iqr(lst): \n    '''\n    Write a python function to get the kurtosis of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))**2\n    else: \n        return (get_standard_deviation(lst)**2)**(1/2)**(1/2)\ndef get_mode_of_the_iqr(lst): \n    '''\n    Write a python function to get the mode of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_mode(lst))\n    else: \n        return (get_mode(lst) + get_average(lst))/2\ndef get_median_of_the_iqr(lst): \n    '''\n    Write a python function to get the median of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))**2\n    else: \n        return (get_standard_deviation(lst)**2)**(1/2)**(1/2)\ndef get_standard_deviation_of_the_iqr(lst): \n    '''\n    Write a python function to get the standard deviation of a sublist of a list of sublists.\n    '''\n    num = get_number_of_pulses(lst)\n    if num%2 == 0: \n        return (get_standard_deviation(lst))\n    else: \n        return (get"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def getElem(lst, index):\n        '''\n        Helper function to get the element of a sublist.\n        '''\n        return lst[index][0]\n    \n    def getSecond(lst, index):\n        '''\n        Helper function to get the second element of a sublist.\n        '''\n        return lst[index][1]\n        \n    def getFirst(lst, index):\n        '''\n        Helper function to get the first element of a sublist.\n        '''\n        return lst[index][0]\n        \n    def getMiddle(lst, index):\n        '''\n        Helper function to get the middle element of a sublist.\n        '''\n        return lst[index][2]\n        \n    def getCount(lst, index):\n        '''\n        Helper function to get the count of elements in a sublist.\n        '''\n        return lst[index][3]\n        \n    # Function to create the answer list using the helper function.\n    list = [getElem(lst, index) for index in range(len(lst))]\n    \n    # Function to create the answer list using the helper function.\n    list = [getSecond(lst, index) for index in range(len(lst))]\n    list = [getFirst(lst, index) for index in range(len(lst))]\n    list = [getMiddle(lst, index) for index in range(len(lst))]\n    \n    # Function to create the answer list using the helper function.\n    list = [getCount(lst, index) for index in range(len(lst))]\n        \n    # print(list)\n    return list\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    temp = []\n    for i in lst: \n        temp.append(i[0]) \n    return temp\n    \ndef Sum(lst): \n    '''\n    Write a python function to get the sum of all the elements of the sublist.\n    '''\n    temp = []\n    for i in lst: \n        temp.append(i[1]) \n    return sum(temp)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        if len(i) == 1: \n            return i[0] \n        else: \n            return Extract(i[1:]) \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Step 1: Create the empty list\n    list_lst = []\n    # Step 2: Append the elements of a list to a list_lst\n    for ele in lst:\n        list_lst.append(ele[0])\n    # Step 3: Return the first element of the list_lst\n    return list_lst[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str_len = len(str)\n    upper_case = 0\n    for i in range(str_len):\n        if str[i].isupper():\n            upper_case += 1\n    return upper_case\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return(str.upper().count('U'))\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper=0\n    for i in str:\n        if i.isupper():\n            upper+=1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # write your solution here\n    return str.upper().count('U')\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower_ctr = 0\n    for i in str:\n        if i.isupper():\n            lower_ctr += 1\n    return lower_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # pass\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    print(upper)\n    return upper\nupper_ctr(input('Enter a string: '))\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lst = [i for i in str]\n    for char in lst:\n        if char.isupper():\n            lst[lst.index(char)] = char.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return (str.upper().count('U'))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result=[]\n    for i in list1:\n        result.append(list(i))\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # The empty list is used to store the possible combinations\n    combinations = []\n    \n    # Add each element to the list of combinations\n    for i in range(len(list1) + 1):\n        combinations.append([])\n        # Add each element to the list of combinations\n        for element in list1:\n            combinations[i].append(element)\n            \n    return combinations\n    "
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    if list1:\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                comb.append([list1[i], list1[j]])\n    return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in combinations(list1,i):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n    else:\n        return combinations_list(list1[1:]) + combinations_list(list1[:1])\n        \ndef count_combinations_list(list1, count):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n    else:\n        return count_combinations_list(list1[1:], count+1) + count_combinations_list(list1[:1], count)\n        \nprint(count_combinations_list([1,2,3,4,5],3)"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            l.append(list1[i]+list1[j])\n    return l\ndef main():\n    list1=['a','b','c','d','e']\n    print(combinations_list(list1))\nmain("
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for el in list1:\n        result.append(list(el))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def is_valid_combination(lst):\n        '''\n        Return True if all the combinations of the list lst are valid, else return False\n        '''\n        for i in range(len(lst)-1):\n            if lst[i] == lst[i+1] == lst[i+2]:\n                return False\n        return True\n    def find_next_valid_combination(lst):\n        '''\n        Return the next valid combination with the given list of elements.\n        '''\n        # Let's start with the first combination, which is the combination with itself\n        # and the first possible next combination\n        if len(lst) > 1:\n            possible_next_valid_combination = lst[:]\n            possible_next_valid_combination.insert(0,lst[0])\n            # The possible next valid combinations are the combinations of elements of lst\n            # that are not included in the current combination.\n            for x in range(len(lst)):\n                # At this point the current combination is a valid combination of lst[x],\n                # but it's possible that it has been skipped.\n                if not is_valid_combination(lst[x:x+3]):\n                    # It is a valid combination, so we append the new elements to the list\n                    # and continue with the next iteration\n                    possible_next_valid_combination.append(lst[x:x+3])\n                    continue\n        # There are no valid combinations, so the next iteration is the combination with itself\n        if len(lst) == 1:\n            return lst\n        # We now have a valid combination, but we skip it\n        else:\n            return lst[1:]\n    # Let's now find the next valid combination, and then return the resulting combination\n    return find_next_valid_combination(lst)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    longest_subarray = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Creating empty array for storing the product\n    prod_array = []\n    for i in range(len(arr)):\n        prod_array.append(arr[i])\n    # Iterate through the array\n    for i in range(len(arr) - 1):\n        # loop through each element to calculate max of the subarray\n        for j in range(i, len(arr)):\n            prod = arr[i] * arr[j]\n            prod_array[j] = max(prod_array[j], prod)\n    return prod_array\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr\n    l = len(arr)\n    if l <= 1:\n        return arr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    current_product = 1\n    for i in range(len(arr)-1):\n        product = arr[i] * current_product\n        if product > max_product:\n            max_product = product\n        current_product = product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sub_product = 1\n    for i in range(len(arr) - 1):\n        for j in range(i, len(arr)):\n            if arr[j] > arr[i] * arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                max_sub_product = max(max_sub_product, arr[i] * arr[j])\n                arr[i] = arr[j]\n    return max_sub_product"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = -1\n    for i in range(1, len(arr)):\n        prod = 1\n        for j in range(i):\n            prod = prod * arr[j]\n        if max_prod < prod:\n            max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        for j in range(i,n):\n            if j>i and arr[j] > arr[j-1]:\n                arr[j] *= arr[j-1]\n            if arr[j] > max_sum:\n                max_sum = arr[j]\n    return max_sum\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_length = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        product = arr[i] * max(arr[i-1], max(arr[i-1]))\n        if max_product < product:\n            max_product = product\n            max_index = i\n    return max_product, max_index\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def get_max_product(arr, start, end):\n        if start == end:\n            return arr[start]\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n >= len(dict):\n        return True\n    for key in dict:\n        if n == len(dict[key]):\n            return True\n        if n == len(dict[key]) + 1:\n            return False\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if not key in n and n[key]!= dict[key]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if k.isdigit() == False:\n            print(\"Missing digit key\")\n            return False\n        if len(str(v))!= n:\n            print(\"Length of values does not match\")\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if key not in dict.keys():\n            return False\n        elif type(dict[key]) is not dict:\n            return False\n        elif n!= len(dict[key]):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict.values():\n        if type(x) is not dict:\n            raise TypeError(\"The dictionary must be a dictionary.\")\n    if len(dict)!= n:\n        raise ValueError(\"The dictionary must contain the same number of values.\")\n    for x in dict.values():\n        if len(x)!= n:\n            raise ValueError(\"The dictionary must contain the same number of values.\")\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        for i in dict.values():\n            if i!= dict[i]:\n                return False\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if type(i)!= dict:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i] == n:\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    for key, value in dict.items():\n        if not isinstance(value, dict):\n            return False\n        elif value == {}:\n            return False\n        else:\n            for k, v in value.items():\n                if k!= 'items':\n                    if not isinstance(v, dict):\n                        return False\n                    elif value!= {}:\n                        if not isinstance(v, dict):\n                            return False\n                        elif v == {}:\n                            return False\n                    elif v == {}:\n                        return False\n        return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = dict1.copy()\n    for key in result:\n        if len(result[key]) == 0:\n            del result[key]\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if len(dict1[key]) == 0:\n            del dict1[key]\n    return dict1\n    \ndef dict_add(dict1, dict2):\n    '''\n    Write a function that adds two dictionaries, but preserves their keys.\n    '''\n    for key in dict1.keys():\n        if key in dict2.keys():\n            dict1[key].update(dict2[key])\n    return dict1\n    \ndef dict_filter(dict1, dict2):\n    '''\n    Write a function that removes items from a given dictionary that are in\n    both dictionaries.\n    '''\n    for key in dict1.keys():\n        if key in dict2.keys():\n            if dict1[key] == dict2[key]:\n                dict1.pop(key)\n    return dict1\n    \ndef dict_map(dict1, dict2):\n    '''\n    Write a function that maps two dictionaries into a new dictionary.\n    '''\n    return {key: dict1[key] for key in dict2.keys() if key in dict1.keys()}\n    \ndef dict_filter_vals(dict1):\n    '''\n    Write a function that removes all items from a dictionary, but retains the\n    keys.\n    '''\n    for key in dict1.keys():\n        dict1[key] = sorted(dict1[key])\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if dict1[i] == []:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if dict1[i] == None:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    list1=list()\n    for k, v in dict1.items():\n        if v == None:\n            list1.append(k)\n    # print(list1)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if i:\n            pass\n        else:\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value == {}:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # loop through dictionary\n    for key in dict1.keys():\n        # if the value is empty\n        if len(dict1[key]) == 0:\n            # remove it from the dictionary\n            dict1.pop(key)\n        # if the value is not empty, return the updated dictionary\n        else:\n            return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # TODO: Write your code here\n    return dict"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        product = max(product * arr[i], arr[i])\n        max_val = max(max_val, product)\n    return max_val\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    dp=arr[0]\n    for i in range(1,len(arr)):\n        dp=max(dp*arr[i],arr[i])\n    return dp\n    \narr=[2,2,3,4,5,6,7,8,9,10]\nprint(max_product(arr)"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = arr.sort()\n    i = 0\n    length = len(arr)\n    while i < length - 1:\n        if arr[i] > arr[i + 1]:\n            return arr[i]\n        elif arr[i] == arr[i + 1]:\n            i += 1\n        else:\n            arr[i] *= arr[i + 1]\n            i += 1\n    return arr[-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max_product = [0] * len(arr)\n    sum_sum = arr[0]\n    for i in range(1,len(arr)):\n        sum_sum *= arr[i]\n        max_product[i] = sum_sum\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    count = 0\n    max_prod = 0\n    for x in range(1, len(arr)):\n        if arr[x] <= arr[x-1]:\n            count += 1\n        else:\n            if count > max_prod:\n                max_prod = count\n            count = 0\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # init\n    product = 1\n    maximum = arr[0]*arr[0]\n    \n    for i in range(1, len(arr)):\n        product = product * arr[i]\n        if product > maximum:\n            maximum = product\n    \n    return maximum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 0\n    \n    for i in range(len(arr)):\n        if i!= 0:\n            for j in range(i):\n                if arr[i] < arr[j] and result < arr[i] * arr[j]:\n                    result = arr[i] * arr[j]\n        if result > 0:\n            break\n    return result\n    \ndef divisors(num):\n    '''\n    Write a function to find the divisors of a positive integer.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num < 0:\n        return 1\n    \n    result = 1\n    for i in range(1, num//2 + 1):\n        if num % i == 0:\n            result = result * i\n            if result == num:\n                return i\n    return 1\n    \ndef count_palindromes(num):\n    '''\n    Write a function to count the number of palindromes.\n    '''\n    \n    count = 0\n    for i in range(1, num):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n    \ndef find_triplets(arr):\n    '''\n    Write a function to find the triplets in an array that sum up to a given sum.\n    '''\n    result = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum(arr):\n                result.append([arr[i], arr[j]])\n    return result\n    \ndef find_palindromes(num):\n    '''\n    Write a function that returns the number of palindromes in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if i + str(i) == sum(str(i)):\n            count += 1\n    return count\n    \ndef find_fibonacci_numbers(num):\n    '''\n    Write a function that returns the number of fibonacci numbers in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if i + 1 in arr:\n            count += 1\n    return count\n    \ndef find_the_triplets(arr):\n    '''\n    Write a function that returns the number of triplets in an array that sums up to a given sum.\n    '''\n    result = 0\n    for i in range(1, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum(arr):\n                result += 1\n    return result\n    \ndef find_the_palindromes(num):\n    '''\n    Write a function that returns the number of palindromes in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if str(i) == str(i)[::-1] and arr.count(str(i)) == 0:\n            count += 1\n    return count\n    \ndef find_the_fibonacci_numbers(num):\n    '''\n    Write a function that returns the number of fibonacci numbers in an array that sums up to a given sum.\n    '''\n    result = 0\n    for i in range(1, num):\n        if arr.count(str(i)) == 0 and arr.count(str(i + 1)) == 0:\n            result += 1\n    return result\n    \ndef find_the_palinodos(num):\n    '''\n    Write a function that returns the number of palindromes in an array that sums up to a given sum.\n    '''\n    result = 0\n    for i in range(1, num):\n        if str(i) == str(i)[::-1] and arr.count(str(i)) == 0:\n            result += 1\n    return result\n    \ndef find_the_triplets(arr):\n    '''\n    Write a function that returns the number of triplets in an array that sums up to a given sum.\n    '''\n    result = 0\n    for i in range(1, len(arr)):\n        if arr[i] + arr[i + 1] == sum(arr):\n            result += 1\n    return result\n    \ndef find_the_palindromes(num):\n    '''\n    Write a function that returns the number of palindromes in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if arr[i] + arr[i + 1] == sum(str(i)) and arr.count(str(i)) == 0:\n            count += 1\n    return count\n    \ndef find_the_fibonacci_numbers(num):\n    '''\n    Write a function that returns the number of fibonacci numbers in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if str(i) == str(i)[::-1] and arr.count(str(i)) == 0:\n            count += 1\n    return count\n    \ndef find_the_palinodos(num):\n    '''\n    Write a function that returns the number of palindromes in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if arr[i] + arr[i + 1] == sum(str(i)) and arr.count(str(i)) == 0:\n            count += 1\n    return count\n    \ndef find_the_triplets(arr):\n    '''\n    Write a function that returns the number of triplets in an array that sums up to a given sum.\n    '''\n    result = 0\n    for i in range(1, len(arr)):\n        if arr[i] + arr[i + 1] == sum(str(i)) and arr.count(str(i)) == 0:\n            result += 1\n    return result\n    \ndef find_the_palindromes(num):\n    '''\n    Write a function that returns the number of palindromes in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if arr[i] + arr[i + 1] == sum(str(i)) and arr.count(str(i)) == 0:\n            count += 1\n    return count\n    \ndef find_the_fibonacci_numbers(num):\n    '''\n    Write a function that returns the number of fibonacci numbers in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if arr[i] + arr[i + 1] == sum(str(i)) and arr.count(str(i)) == 0:\n            count += 1\n    return count\n    \ndef find_the_palinodos(num):\n    '''\n    Write a function that returns the number of palindromes in an array that sums up to a given sum.\n    '''\n    count = 0\n    for i in range(1, num):\n        if arr[i] + arr[i + 1] == sum(str(i)) and arr.count(str(i)) == 0:\n            count += 1\n    return count\n    \ndef find_the_triplets(arr):\n    '''\n    Write a function that returns the number of triplets in an array that sums up to a given sum.\n    '''\n    result = 0\n    for i in range(1, len(arr)):\n        if arr[i] + arr[i + 1] == sum(str(i)) and arr.count(str(i)) == 0:\n            result += 1\n    return result\n    \ndef find_the_palindromes(num):\n    '''\n    Write a function that returns the number of palindromes in an array that sums up to a given sum.\n    '''\n    result = 0\n    for i in range(1, num):\n        if arr[i] + arr[i + 1] == sum(str(i)) and arr.count(str(i)"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    pass\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] * max_product(arr[1:])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    ### Dictionaries to store the resulting pairwise result\n    \n    a={}\n    b={}\n    \n    for i in test_tup:\n        a[i[0]]=i[1]\n        b[i[1]]=i[0]\n    \n    ### The result is a dictionary with the keys as the coordinates of the given tuple and the values as the sum of the coordinates\n    \n    return a,b\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)!= 2:\n        raise ValueError(\"Invalid number of elements\")\n    \n    if test_tup[0] == test_tup[1]:\n        return (test_tup[0], test_tup[1])\n    elif test_tup[0] == test_tup[2]:\n        return (test_tup[0], test_tup[2])\n    elif test_tup[0] == test_tup[3]:\n        return (test_tup[0], test_tup[3])\n    elif test_tup[2] == test_tup[3]:\n        return (test_tup[2], test_tup[3])\n    elif test_tup[1] == test_tup[2]:\n        return (test_tup[1], test_tup[2])\n    elif test_tup[1] == test_tup[3]:\n        return (test_tup[1], test_tup[3])\n    elif test_tup[3] == test_tup[2]:\n        return (test_tup[3], test_tup[2])\n    elif test_tup[3] == test_tup[1]:\n        return (test_tup[3], test_tup[1])\n    \n    return ()"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def get_pairwise(tup):\n        if tup[0] == tup[1]:\n            return [tup]\n        if tup[1] == tup[0]:\n            return [tup]\n        return get_pairwise(tup[::-1])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Your code here\n    new_tuple = tuple(sorted(test_tup, key = lambda x: x[1]))\n    \n    return new_tuple"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(tup[1] for tup in test_tup[1])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x_int = int(test_tup[0])\n    y_int = int(test_tup[1])\n    return x_int - y_int\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # get the first two elements\n    first_one = test_tup[0]\n    second_one = test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    return x+y\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    return a + b\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    c = test_tup[2]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Note : multiplication of two ints is 1\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    k = 1\n    while(k <= n):\n        print(k, end=' ')\n        k = k * arr[-1]\n    print()\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m = len(arr)\n    mod_n = n % m\n    return arr[mod_n] * find_remainder(arr, m) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Convert the array to an int list \n    n_list = list(map(int, arr)) \n  \n    # Convert the list back to an array. \n    res = []\n    for i in range(0, len(n_list)): \n        res.append((n_list[i] * arr[i]) % n) \n    return res \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product=1\n    for i in arr:\n        product=product*i\n    return product%n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n==0: return 1\n    result = 0\n    while n: \n        result = result * arr[n % len(arr)] \n        n //= len(arr) \n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def find_remainder_rec(arr, n, index, curr): \n        if(index >= n):\n            return curr \n        else: \n            return find_remainder_rec(arr, n, index + 1, curr * arr[index])\n    \n    return find_remainder_rec(arr, n, 0, 1) \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (sum(arr) * (n%len(arr))) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    start = 0\n    end = len(arr)\n    result = []\n    while start <= end:\n        if start == end:\n            result.append(arr[start])\n        elif arr[start] % arr[end] == 0:\n            result.append(arr[start] // arr[end])\n        else:\n            result.append(arr[start])\n        start += 1\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    s, rem = 1, arr[0]\n    for i in range(1, len(arr)):\n        s, rem = s * arr[i], rem % n\n    return s % n\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for num in l:\n        if num == 0:\n            return False\n        elif num % 10 == 0:\n            return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1): \n        if l[i]!= l[i + 1]: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    for x in l: \n        if x % 2 == 0: \n            c += 1\n    if c == 2: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)>=3:\n        for i in range(0,len(l)-2):\n            if l[i]==l[i+1] and l[i+1]==l[i+2]:\n                return \"Failed\"\n    else:\n        return \"Failed\"\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)):\n        if l[i] - l[i-1] == 1:\n            count += 1\n        if l[i] - l[i-1] == 2:\n            count += 1\n        if count >= 2:\n            print(\"YES\")\n            return\n    print(\"NO\")\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0:\n        return False\n    l.sort()\n    i=0\n    j=0\n    flag=0\n    while i<len(l)-1:\n        if l[i]==l[i+1] and flag==0:\n            if l[i]>=l[i+1]:\n                flag=1\n        if flag==0:\n            if l[i]>=l[i+1]:\n                flag=1\n        i+=1\n    return flag==0\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    if(l[0]!= l[len(l) - 1]): \n        return False \n    else: \n        for i in range(1, len(l)): \n            if l[i] == l[i - 1]: \n                return True \n    return False \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    if len(l) == 0: \n        return True\n    for i in range(0, len(l)): \n        if l[i] % 10 == l[i - 1] % 10: \n            count += 1\n        else: \n            return False\n    if count == len(l) - 1: \n        return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    t=list()\n    \n    for i in l:\n        if i not in t:\n            t.append(i)\n        else:\n            continue\n    return t    \n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersection_list.append((i,j))\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_tuple = []\n    for i in test_list1:\n        if i in test_list2:\n            intersect_tuple.append(i)\n    return intersect_tuple\n    \n    \n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = ()\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1[0] == tup2[0]:\n                result = (tup1[0], tup1[1] + tup2[1])\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set containing the first item in the given tuple list.\n    first_item_set = set(test_list1)\n    # Create a set containing the second item in the given tuple list.\n    second_item_set = set(test_list2)\n    # Create an empty dictionary, which will be populated with the two sets.\n    returned_dict = {}\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1 & set2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersected_list = []\n    for i in range(len(test_list1)):\n        for j in range(i+1,len(test_list1)):\n            if test_list1[i] < test_list1[j]:\n                intersected_list.append(test_list1[i])\n                break\n            elif test_list1[i] > test_list1[j]:\n                intersected_list.append(test_list1[j])\n                break\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return (test_list1[0], test_list1[1], test_list1[2], test_list1[3], test_list1[4], test_list1[5], test_list1[6], test_list1[7], test_list1[8], test_list1[9])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_tuple = ()\n    for i in test_list2:\n        test_tuple = test_tuple + (i, )\n    test_tuple = tuple(sorted(test_tuple))\n    for i in test_list1:\n        if i in test_tuple:\n            test_tuple = test_tuple + (i, )\n    return test_tuple\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for ch in str1:\n        if ch!=ch:\n            str2+=newch\n        else:\n            str2+=ch\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #Hash table\n    idx = 0\n    #Hash table\n    hash = {}\n    #Hash table\n    table = {}\n    #Current character to be replaced\n    c = ch\n    #New character to be added\n    new_ch = newch\n    #Iterate through the string\n    for char in str1:\n        #If char is not a letter, then try to replace the character\n        if char not in hash.keys():\n            #Add the character to the hash table\n            hash[char] = idx\n            #Add the new character to the hash table\n            table[idx] = new_ch\n            #Set the index to be the current index\n            idx = hash[char]\n        else:\n            #Move the current character to the new character\n            table[idx] = new_ch\n            #Set the index to be the current index\n            idx = hash[char]\n    #Return the new string\n    return str1.replace(c, table[c])"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for c in str1:\n        if c == ch:\n            new_str += newch\n        else:\n            new_str += c\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = ''\n    for i in range(len(str1)):\n        if (str1[i] == ch or str1[i] == newch):\n            res += ch\n        else:\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if (ch == str1[i]):\n            str2 = str2+newch\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    import string\n    newstr = \"\"\n    for i in range(len(str1)):\n        if (ch == str1[i]):\n            newstr = newstr + newch\n        else:\n            newstr = newstr + str1[i]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str2=str2+newch\n        else:\n            str2=str2+str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1.replace(ch,newch)\n    return newstr\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if not str1:\n        return \"\"\n    \n    if ch.isalpha():\n        return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    sorted_dict = dict()\n    for key, value in dict1.items():\n        sorted_dict[key] = value\n    sorted_dict = dict(sorted(sorted_dict.items(), key = lambda x: x[1]))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1_sorted = dict(sorted(dict1.items(), key = lambda item: item[1]))\n    return dict1_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict1.copy()\n    dict2.sort()\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = dict1.values()\n    count.sort()\n    print(count)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = dict(sorted(dict1.items(), key= lambda item: item[1]))\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in dict1:\n        dict1[key].sort(reverse = True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = {}\n    dict2.fromkeys(dict1.keys(), [])\n    dict2 = sorted(dict2.items(), key=lambda item: item[1], reverse=True)\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict1\n    sorted_dict = sorted(sorted_dict.items(),key=lambda item:item[1])\n    return(sorted_dict)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1_copy = dict1\n    dict1_keys = list(dict1_copy.keys())\n    dict1_values = list(dict1_copy.values())\n    dict1_count = dict1_values.count(1)\n    \n    dict1_copy = dict1_copy.copy()\n    dict1_copy.sort()\n    dict1_keys = list(dict1_copy.keys())\n    dict1_values = list(dict1_copy.values())\n    dict1_count = dict1_values.count(1)\n    \n    dict1_key_sort = list(dict1_keys)\n    dict1_key_sort.sort()\n    dict1_value_sort = list(dict1_values)\n    dict1_value_sort.sort()\n    dict1_count_sort = list(dict1_count)\n    dict1_count_sort.sort()\n    \n    dict1_dict = {}\n    dict1_dict['value'] = dict1_values\n    dict1_dict['key'] = dict1_keys\n    dict1_dict['count'] = dict1_count\n    dict1_dict['key_sort'] = dict1_key_sort\n    dict1_dict['value_sort'] = dict1_value_sort\n    dict1_dict['count_sort'] = dict1_count_sort\n    \n    return dict1_dict\n    \ndef majority(dict1):\n    '''\n    Write a function to calculate the majority element in a dictionary.\n    '''\n    dict1_copy = dict1\n    dict1_keys = list(dict1_copy.keys())\n    dict1_values = list(dict1_copy.values())\n    dict1_count = dict1_values.count(1)\n    dict1_sort = dict1_keys\n    \n    dict1_count_sort = list(dict1_count)\n    dict1_sort = dict1_sort.sort()\n    \n    dict1_keys = list(dict1_copy.keys())\n    dict1_values = list(dict1_copy.values())\n    dict1_count = dict1_values.count(1)\n    \n    dict1_value_sort = list(dict1_values)\n    dict1_value_sort.sort()\n    \n    dict1_sort_value_count = dict1_value_sort.count(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_value_count\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value_count = dict1_sort_value_count.index(dict1_count[0])\n    dict1_sort_value_count.sort()\n    \n    dict1_sort_count = dict1_sort_count.index(dict1_count[0])\n    dict1_sort_count.sort()\n    \n    dict1_sort_value"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the index of the largest value\n    largest_index = max(nums)\n    # Find the index of the smallest value\n    smallest_index = min(nums)\n    # Calculate the sum\n    return(largest_index + smallest_index + sum(nums))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    a = nums[0]\n    b = nums[0]\n    for i in range(1,len(nums)):\n        if a>nums[i]:\n            a = nums[i]\n        elif b<nums[i]:\n            b = nums[i]\n    return a+b\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    if total > max(nums):\n        max(nums)\n    elif total < min(nums):\n        min(nums)\n    return total\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return min_val + max_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Empty array to store values\n    result = []\n    # Find the largest value in the array\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[j] > nums[i]:\n                result.append(nums[j])\n    # Find the smallest value in the array\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                result.append(nums[i])\n                break\n    print(result)\n    print(sum(result))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # if the array is empty\n    if not nums:\n        return 0\n    # sort the array\n    nums.sort()\n    # get the first value\n    first_val = nums[0]\n    # get the last value\n    last_val = nums[-1]\n    # return the sum\n    return first_val + last_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = 0\n    n = len(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # create a list with the numbers\n    my_list = []\n    for i in nums:\n        my_list.append(i)\n    # find the max and min\n    num_list = [nums[0], nums[0]]\n    for i in nums:\n        if i > num_list[0]:\n            num_list[0] = i\n        if i < num_list[0]:\n            num_list[0] = i\n    for i in nums:\n        if i < num_list[0]:\n            num_list[0] = i\n    for i in nums:\n        if i > num_list[0]:\n            num_list[1] = i\n    # check if sum is largest or smallest\n    if num_list[0] == num_list[1]:\n        return num_list[0]\n    else:\n        return num_list[0] - num_list[1]\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isupper():\n        return string.lower()\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # This solution is faster and will be written in one line\n    # The solution is better for large strings\n    return string.islower()\n    # return string.lower().islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            result += char\n    return result\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \":;&*!?\u2019,._!-\":\n            result += char\n    return result\ndef convert_to_integer(str1):\n    '''\n    Write a function to convert a string of words, characters, and digits to their integer representations.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += int(char)\n        else:\n            result += ord(char)\n    return result\ndef remove_words(str1):\n    '''\n    Write a function to remove words from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isalpha():\n            result += char\n    return result\ndef remove_chars(str1):\n    '''\n    Write a function to remove characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"abcdefghijklmnopqrstuvwxyz\" or char in \"0123456789\" or char in \"!#$%&*()_?><\":\n            result += char\n    return result\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result\ndef convert_to_vowels(str1):\n    '''\n    Write a function to convert a string to lowercase vowels.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\ndef remove_vowels(str1):\n    '''\n    Write a function to remove vowels from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isupper() and char in \"aeiou\":\n            result += char.lower()\n        else:\n            result += char\n    return result\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            result += char\n    return result\ndef remove_special_char_vowels(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n    return result\ndef remove_special_char_vowels_double(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n        if char in \"aeiou\":\n            result += char\n    return result\ndef remove_special_char_vowels_double_vowels(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n    return result\ndef remove_double_special_char_vowels(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            result += char\n    return result\ndef remove_double_special_char_vowels_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n        if char in \"aeiou\":\n            result += char\n    return result\ndef remove_double_special_char_vowels_double_vowels(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n        if char in \"aeiou\":\n            result += char\n    return result\ndef remove_special_char_double(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            result += char\n    return result\ndef remove_double_special_char_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            result += char\n    return result\ndef remove_special_char_double_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n    return result\ndef remove_special_char_double_double_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n    return result\ndef remove_double_special_char_double_double_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n    return result\ndef remove_double_special_char_double_double_double_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n    return result\ndef remove_double_special_char_double_double_double_double_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n    return result\ndef remove_double_special_char_double_double_double_double_double_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char in \"!@#$%&*()_?><\":\n            if char not in \"aeiou\":\n                result += char\n    return result\ndef remove_double_special_char_double_double_double_double_double_double_double_double(str1):\n    '''\n    Write a function to remove double special characters from a given string.\n    '''\n    result = \"\"\n    for char in str"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str2 = str1.replace('.','-')\n    str3 = str2.replace(',',' ')\n    str4 = re.sub('[a-z]',' ',str3)\n    str5 = str4.replace('.','-')\n    str6 = str5.replace('- ',' ')\n    str7 = re.sub('[\\W_]+',' ',str6)\n    str8 = str7.replace(' ',',')\n    str9 = re.sub('[A-Z]',' ',str8)\n    str10 = str9.replace('- ',' ')\n    str11 = re.sub('[A-Z]',' ',str10)\n    str12 = re.sub('[\\W_]+',' ',str11)\n    str13 = re.sub('[\\W_]+',' ',str12)\n    str14 = re.sub('[A-Z]+',' ',str13)\n    str15 = re.sub('[A-Z]+',' ',str14)\n    str16 = re.sub('[A-Z]+',' ',str15)\n    str17 = re.sub('[A-Z]+',' ',str16)\n    return str17\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return str1.replace(str1.lower(),'').replace(str1.lower(),'')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i:i+2].islower():\n            str1 = str1[:i] + str1[i+2:]\n            i = i - 2\n        else:\n            i = i + 1\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'(^| )(\\w+)([a-z]\\w+)$'\n    result = re.findall(pattern,str1,flags=re.IGNORECASE)\n    return ''.join([x[0] for x in result])\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile('[a-z]')\n    result = lowercase_pattern.sub('', str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_accented(str1):\n    '''\n    Write a function to remove any accented characters from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-]')\n    return pattern.sub(' ', str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    pattern = re.compile('[0-9]')\n    return pattern.sub(' ', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_emails(str1):\n    '''\n    Write a function to remove emails from a given string.\n    '''\n    pattern = re.compile('[\\w\\-\\+\\.]+')\n    return pattern.sub('', str1)\ndef remove_multiple_chars(str1):\n    '''\n    Write a function to remove multiple consecutive characters from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-\\_]')\n    return pattern.sub(' ', str1)\ndef remove_multiple_lowercase(str1):\n    '''\n    Write a function to remove multiple lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_multiple_accented(str1):\n    '''\n    Write a function to remove multiple accented characters from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', str1)\ndef remove_multiple_punctuation(str1):\n    '''\n    Write a function to remove multiple punctuation from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-]')\n    return pattern.sub('', str1)\ndef remove_multiple_digits(str1):\n    '''\n    Write a function to remove multiple digits from a given string.\n    '''\n    pattern = re.compile('[0-9]')\n    return pattern.sub('', str1)\ndef remove_multiple_stopwords(str1):\n    '''\n    Write a function to remove multiple stopwords from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_multiple_emails(str1):\n    '''\n    Write a function to remove multiple emails from a given string.\n    '''\n    pattern = re.compile('[\\w\\-\\+\\.]+')\n    return pattern.sub('', str1)\ndef remove_multiple_special_characters(str1):\n    '''\n    Write a function to remove multiple consecutive characters from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-\\_]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_lowercase(str1):\n    '''\n    Write a function to remove multiple lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_accented(str1):\n    '''\n    Write a function to remove multiple accented characters from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_punctuation(str1):\n    '''\n    Write a function to remove multiple punctuation from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_digits(str1):\n    '''\n    Write a function to remove multiple digits from a given string.\n    '''\n    pattern = re.compile('[0-9]')\n    return pattern.sub('', str1)\ndef remove_multiple_stopwords(str1):\n    '''\n    Write a function to remove multiple stopwords from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_multiple_emails(str1):\n    '''\n    Write a function to remove multiple emails from a given string.\n    '''\n    pattern = re.compile('[\\w\\-\\+\\.]+')\n    return pattern.sub('', str1)\ndef remove_multiple_special_characters(str1):\n    '''\n    Write a function to remove multiple consecutive characters from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-\\_]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_lowercase(str1):\n    '''\n    Write a function to remove multiple lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_accented(str1):\n    '''\n    Write a function to remove multiple accented characters from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_punctuation(str1):\n    '''\n    Write a function to remove multiple punctuation from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_digits(str1):\n    '''\n    Write a function to remove multiple digits from a given string.\n    '''\n    pattern = re.compile('[0-9]')\n    return pattern.sub('', str1)\ndef remove_multiple_stopwords(str1):\n    '''\n    Write a function to remove multiple stopwords from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_multiple_emails(str1):\n    '''\n    Write a function to remove multiple emails from a given string.\n    '''\n    pattern = re.compile('[\\w\\-\\+\\.]+')\n    return pattern.sub('', str1)\ndef remove_multiple_special_characters(str1):\n    '''\n    Write a function to remove multiple consecutive characters from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-\\_]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_lowercase(str1):\n    '''\n    Write a function to remove multiple lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_accented(str1):\n    '''\n    Write a function to remove multiple accented characters from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', str1)\ndef remove_multiple_multiple_punctuation(str1):\n    '''\n    Write a function to remove multiple punctuation from a given string.\n    '''\n    pattern = re.compile('[^a-z0-9\\-]')\n    return patter"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans({' ':'', '.':'', '?':'', ':','+','!','(',')'}))\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Your code here\n    for i in range(len(str1)):\n        str1 = str1.replace(str1[i], str1[i].lower())\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # step 1\n    str1 = str1.lower()\n    # step 2\n    str1 = str1.replace(\"\\'\", \"\")\n    str1 = str1.replace(\"[\", \"\")\n    str1 = str1.replace(\"]\", \"\")\n    str1 = str1.replace(\" \", \"\")\n    str1 = str1.replace(\"-\", \"\")\n    str1 = str1.replace(\"_\", \"\")\n    str1 = str1.replace(\"{\", \"\")\n    str1 = str1.replace(\"}\", \"\")\n    str1 = str1.replace(\"#\", \"\")\n    # step 3\n    str1 = re.sub(\"[^a-zA-Z0-9_]\", \"\", str1)\n    return str1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0:\n        return 0\n    while n:\n        n=n//10\n        # print(n)\n        if n:\n            return n\n    return -1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    sum = 0\n    while (n!= 0):\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    res = 0 \n    for i in str(n) : \n        res += int(i) \n    return res \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digits=[]\n    for i in range(0,len(n)):\n        if n[i].isdigit():\n            digits.append(n[i])\n    return int(digits[0])\ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    digits=[]\n    for i in range(0,len(n)):\n        if n[i].isdigit():\n            digits.append(n[i])\n    return int(digits[-1])\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    lst = []\n    while n > 0 :\n        r = n % 10\n        lst.append(r)\n        n = n // 10\n    return lst[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 : return n\n    else : return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    firstDigit = int(str(n)[0])  \n    return firstDigit\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    a = n\n    while a > 0 :\n        a, b = a % 10, b\n    return b\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        print(int(n))\n        return int(n)\n    if n == 0:\n        return 0\n    for i in range(1, 10) :\n        if n % i == 0 :\n            print(i)\n            return i\n    print(int(n))\n    return int(n)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in range(len(list)):\n        if list[i]%2!=0:\n            odd.append(list[i])\n    print(odd)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odds = [] \n    for num in list: \n        if num % 2!= 0: \n            odds.append(num) \n    print(odds) \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    for i in list:\n        if (i % 2!= 0):\n            even.append(i)\n    return even\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\nprint(Split( [1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(list)\n    a = []\n    for i in list:\n        if(i % 2!= 0):\n            a.append(i)\n    print(a)\n    return a\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    even = []\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!=0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    def odd(num): \n        return num%2!= 0\n    odd_list = filter(odd, list)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #Your code here\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return (n **3) - n *(n **2)\n        \n        \n        \n    \n        \n        \n        \n        \n        \n        \n    \n    \n        \n        \n    \n    \n    \n    \n        \n    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum = sum + (n*n)\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum(n) :\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1,n+1):\n            sum = sum + i * i\n        return sum\n    def cube(n) :\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        cube = n*n*n\n        return cube\n    sum = sum(n)\n    cube = cube(n)\n    return sum-cube\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for n in range(n) :\n        sum += (n + 1)**3\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n < 0:\n        return 'ERROR'\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 2460\n    elif n == 8:\n        return 3680\n    elif n == 9:\n        return 3040\n    elif n == 10:\n        return 3680\n    elif n == 11:\n        return 3104\n    elif n == 12:\n        return 3840\n    elif n == 13:\n        return 3104\n    elif n == 14:\n        return 3840\n    elif n == 15:\n        return 3104\n    elif n == 16:\n        return 3840\n    elif n == 17:\n        return 3104\n    elif n == 18:\n        return 3840\n    elif n == 19:\n        return 3104\n    elif n == 20:\n        return 3840\n    elif n == 21:\n        return 3104\n    elif n == 22:\n        return 3840\n    elif n == 23:\n        return 3104\n    elif n == 24:\n        return 3840\n    elif n == 25:\n        return 3104\n    elif n == 26:\n        return 3840\n    elif n == 27:\n        return 3104\n    elif n == 28:\n        return 3840\n    elif n == 29:\n        return 3104\n    elif n == 30:\n        return 3840\n    elif n == 31:\n        return 3104\n    elif n == 32:\n        return 3840\n    elif n == 33:\n        return 3104\n    elif n == 34:\n        return 3840\n    elif n == 35:\n        return 3104\n    elif n == 36:\n        return 3840\n    elif n == 37:\n        return 3104\n    elif n == 38:\n        return 3840\n    elif n == 39:\n        return 3104\n    elif n == 40:\n        return 3840\n    elif n == 41:\n        return 3104\n    elif n == 42:\n        return 3840\n    elif n == 43:\n        return 3104\n    elif n == 44:\n        return 3840\n    elif n == 45:\n        return 3104\n    elif n == 46:\n        return 3840\n    elif n == 47:\n        return 3104\n    elif n == 48:\n        return 3840\n    elif n == 49:\n        return 3104\n    elif n == 50:\n        return 3840\n    elif n == 51:\n        return 3104\n    elif n == 52:\n        return 3840\n    elif n == 53:\n        return 3104\n    elif n == 54:\n        return 3840\n    elif n == 55:\n        return 3104\n    elif n == 56:\n        return 3840\n    elif n == 57:\n        return 3104\n    elif n == 58:\n        return 3840\n    elif n == 59:\n        return 3104\n    elif n == 60:\n        return 3840\n    elif n == 61:\n        return 3104\n    elif n == 62:\n        return 3840\n    elif n == 63:\n        return 3104\n    elif n == 64:\n        return 3840\n    elif n == 65:\n        return 3104\n    elif n == 66:\n        return 3840\n    elif n == 67:\n        return 3104\n    elif n == 68:\n        return 3840\n    elif n == 69:\n        return 3104\n    elif n == 70:\n        return 3840\n    elif n == 71:\n        return 3104\n    elif n == 72:\n        return 3840\n    elif n == 73:\n        return 3104\n    elif n == 74:\n        return 3840\n    elif n == 75:\n        return 3104\n    elif n == 76:\n        return 3840\n    elif n == 77:\n        return 3104\n    elif n == 78:\n        return 3840\n    elif n == 79:\n        return 3104\n    elif n == 80:\n        return 3840\n    elif n == 81:\n        return 3104\n    elif n == 82:\n        return 3840\n    elif n == 83:\n        return 3104\n    elif n == 84:\n        return 3840\n    elif n == 85:\n        return 3104\n    elif n == 86:\n        return 3840\n    elif n == 87:\n        return 3104\n    elif n == 88:\n        return 3840\n    elif n == 89:\n        return 3104\n    elif n == 90:\n        return 3840\n    elif n == 91:\n        return 3104\n    elif n == 92:\n        return 3840\n    elif n == 93:\n        return 3104\n    elif n == 94:\n        return 3840\n    elif n == 95:\n        return 3104\n    elif n == 96:\n        return 3840\n    elif n == 97:\n        return 3104\n    elif n == 98:\n        return 3840\n    elif n == 99:\n        return 3104\n    elif n == 100:\n        return 3840\n    elif n == 101:\n        return 3104\n    elif n == 102:\n        return 3840\n    elif n == 103:\n        return 3104\n    elif n == 104:\n        return 3840\n    elif n == 105:\n        return 3104\n    elif n == 106:\n        return 3840\n    elif n == 107:\n        return 3104\n    elif n == 108:\n        return 3840\n    elif n == 109:\n        return 3104\n    elif n == 110:\n        return 3840\n    elif n == 111:\n        return 3104\n    elif n == 112:\n        return 3840\n    elif n == 113:\n        return 3104\n    elif n == 114:\n        return 3840\n    elif n == 115:\n        return 3104\n    elif n == 116:\n        return 3840\n    elif n == 117:\n        return 3104\n    elif n == 118:\n        return 3840\n    elif n == 119:\n        return 3104\n    elif n == 120:\n        return 3840\n    elif n == 121:\n        return 3104\n    elif n == 122:\n        return 3840\n    elif n == 123:\n        return 3104\n    elif n == 124:\n        return 3840\n    elif n == 125:\n        return 3104\n    elif n == 126:\n        return 3840\n    elif n == 127:\n        return 3104\n    elif n == 128:\n        return 3840\n    elif n == 129:\n        return 3104\n    elif n == 130:\n        return 3840\n    elif n == 131:\n        return 3104\n    elif n == 132:\n        return 3840\n    elif n == 133:\n        return 3104\n    elif n == 134:\n        return 3840\n    elif n == 135:\n        return 3104\n    elif n == 136:\n        return 3840\n    elif n == 137:\n        return 3104\n    elif n == 138:\n        return 3840\n    elif n == 139:\n        return 3104\n    elif n == 140:\n        return 3840\n    elif n == 141:\n        return 3104\n    elif n == 142:\n        return 3840\n    elif n == 143:\n        return 3104\n    elif n == 144:\n        return 3840\n    elif n == 145:\n        return 3104\n    elif n == 146:\n        return 3840\n    elif n == 147:\n        return 3104\n    elif n == 148:\n        return 3840\n    elif n == 149:\n        return 3104\n    elif n == 150:\n        return 3840\n    elif n == 151:\n        return 3104\n    elif n == 152:\n        return 3840\n    elif n == 15"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1) :\n        a = a + i*(i**3)\n    return a\n    \n    \n    \ndef sum_diff(n) :\n    '''\n    Write a python function to find the sum of the difference between the cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    b = 0\n    for i in range(1,n+1) :\n        b = b + i*(i**3)\n    return b\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    if n<=0:\n        return None\n    if n==1:\n        return 1\n    \n    return n*n*(n+1)//2\n    \n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # your code here\n    cube=0\n    cube=n**3\n    return cube\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #Your code goes here\n    n=int(input(\"Enter the number of natural numbers:\"))\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+cubes(i)\n        i=i+1\n    return sum\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) : \n        for j in range(i, N-1) : \n            xor = A[i] ^ A[j] \n            if xor == xor : \n                if A[i] == A[j] : \n                    count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    a = []\n    for i in range(N-1):\n        b = []\n        for j in range(i+1,N):\n            if A[i]&A[j] == A[i]^A[j]:\n                b.append(A[i]^A[j])\n        if len(b) == 0:\n            continue\n        else:\n            a.append(b)\n    return len(a)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if A[N] == A[N - 1] :\n        return 1\n    else :\n        return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #Makes copies of list a. \n    a = list(A)\n    #Creates a count variable.\n    count = 0\n    #Creates an index variable.\n    i = 0\n    #Loops through the list.\n    while i < len(a) : \n        #If the xor of a[i] and a[j] is odd, add one to the count. \n        if a[i] ^ a[j]!= 0 : \n            count += 1\n        #If a[i] and a[j] are not odd, add them to the list. \n        else : \n            #Appends a[i] to the end of a[j]. \n            a.append(a[j])\n        #Increments the index of the a[i] \n        i += 1\n    #Returns the count. \n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Dict = {} \n    for i in range(0,N): \n        x = A[i] \n        y = A[N-1-i] \n        if x ^ y  in Dict : \n            Dict[x ^ y] += 1 \n        else : \n            Dict[x ^ y] = 1 \n    return len(Dict) \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i,j = 0,0\n    count = 0\n    while i<N and j<N :\n        x = A[i] ^ A[j]\n        if x & 1 == 1 :\n            count += 1\n        i+=1\n        j+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)) :\n        for j in range(len(A)) :\n            if i!= j :\n                if A[i] ^ A[j]!= 1 :\n                    count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)) : \n        for j in range(i + 1, len(A)) :\n            if A[i] ^ A[j] == 0 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # return 0 if A is an empty array\n    if A == [] : \n        return 0\n    \n    # if the array is already sorted then we do not need to check\n    # for duplicate values\n    # so we can use O(N) time complexity\n    # Hint : could do the O(n^2) solution\n    if not sorted(A) : \n        return 0\n    \n    # if the first element is equal to the second element\n    # then they are both odd numbers\n    if A[0] == A[1] :\n        return 1\n    \n    # if the first element is not the second element\n    # then it is an odd number\n    # so we can use O(N) time complexity\n    # Hint : could do the O(N) solution\n    if A[0]!= A[1] :\n        return 0\n    \n    # create an array to keep track of the pairs\n    # pairs = [[A[0], A[1]], [A[1], A[2]]]\n    pairs = []\n    \n    # traverses through the array\n    for i in range(2, len(A)) : \n        # checks if the array is sorted\n        # by increasing the value of A[i]\n        if A[i] > A[i-1] :\n            # if the element is greater than the previous element\n            # then we add it to the pairs array\n            # so we can use O(N) time complexity\n            # Hint : could do the O(N) solution\n            if A[i-1] > A[i] :\n                pairs.append([A[i-1], A[i]])\n    \n    # we are at the end of the array\n    if pairs == [] : \n        return 1\n    \n    # count pairs whose xor value is odd\n    # and return the number of pairs\n    count = 0\n    \n    # we traverse through the pairs array and \n    # if the value of each element in the pairs array \n    # is odd then we check if there is a pair with \n    # the odd xor value in the pairs array\n    # i.e. A[0]^x = A[1]^x \n    for i in range(len(pairs)):\n        if not pairs[i][0] ^ pairs[i][1] :\n            count += 1\n    \n    # if count is 0, then no pair has an odd xor value \n    # so return 1\n    if count == 0 :\n        return 1\n    \n    # return count\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(1,N) : \n        if A[i] == A[i-1] : \n            odd += 1\n    if (odd % 2 == 0): \n        return 1\n    else : \n        return 0\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # if case == 'upper':\n    #     return string.swapcase()\n    # elif case == 'lower':\n    #     return string.casefold()\n    # elif case == 'capitalize':\n    #     return string.title()\n    # elif case == 'capitalize':\n    #     return string.title()\n    # elif case =='strip':\n    #     return string.lstrip()\n    # elif case =='remove':\n    #     return string.rstrip()\n    return string.replace(' ', '')\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.casefold() == string:\n        return string\n    else:\n        return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return \"\"\n    else:\n        first = string[0]\n        last = string[-1]\n        if first!= last:\n            return ''.join(s for s in string if s!= first)\n        else:\n            return ''.join(s for s in string if s!= first) + last\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = string.lower()\n    result = result.replace(\" \", \"\")\n    result = result.replace(\"\\n\", \"\")\n    result = result.replace(\"\\t\", \"\")\n    result = result.replace(\"\\r\", \"\")\n    result = result.replace(\"\\xa0\", \" \")\n    result = result.replace(\" \", \"\")\n    result = result.replace(\"\\n\", \"\")\n    result = result.replace(\"\\t\", \"\")\n    result = result.replace(\"\\r\", \"\")\n    result = result.replace(\"\\xa0\", \" \")\n    result = result.replace(\" \", \"\")\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    upper_string = ''\n    lower_string = ''\n    for char in string:\n        if char.isupper():\n            upper_string += char.lower()\n        elif char.islower():\n            lower_string += char.upper()\n    return upper_string + lower_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string=='':\n        return ''\n    else:\n        return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if'' in string:\n        new_string = string.lower()\n    else:\n        new_string = string.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i].islower():\n            string[i] = string[i].upper()\n    string = \"\".join(string)\n    return string\n    \ndef toggle_bool(bool_val):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    bool_val = list(bool_val)\n    for i in range(len(bool_val)):\n        if bool_val[i].isupper():\n            bool_val[i] = bool_val[i].lower()\n    bool_val = \"\".join(bool_val)\n    return bool_val\n    \ndef toggle_ints(ints_val):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    ints_val = list(ints_val)\n    for i in range(len(ints_val)):\n        if ints_val[i].isalpha():\n            ints_val[i] = ints_val[i].upper()\n    ints_val = \"\".join(ints_val)\n    return ints_val\n    \ndef toggle_char(char_val):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    char_val = list(char_val)\n    for i in range(len(char_val)):\n        if char_val[i].isupper():\n            char_val[i] = char_val[i].lower()\n    char_val = \"\".join(char_val)\n    return char_val\n    \ndef toggle_int_list(ints_list):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    ints_list = list(ints_list)\n    for i in range(len(ints_list)):\n        if ints_list[i].isdigit():\n            ints_list[i] = ints_list[i].upper()\n    ints_list = \"\".join(ints_list)\n    return ints_list\n    \ndef toggle_long_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i].isalpha():\n            string[i] = string[i].upper()\n    string = \"\".join(string)\n    return string\n    \ndef toggle_dict(dct):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    dct = list(dct)\n    for i in range(len(dct)):\n        if dct[i].isupper():\n            dct[i] = dct[i].lower()\n    dct = \"\".join(dct)\n    return dct\n    \ndef toggle_obj_dict(obj_dct):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    obj_dct = list(obj_dct)\n    for i in range(len(obj_dct)):\n        if obj_dct[i].isupper():\n            obj_dct[i] = obj_dct[i].lower()\n    obj_dct = \"\".join(obj_dct)\n    return obj_dct\n    \ndef toggle_obj_list(obj_lst):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    obj_lst = list(obj_lst)\n    for i in range(len(obj_lst)):\n        if obj_lst[i].isupper():\n            obj_lst[i] = obj_lst[i].lower()\n    obj_lst = \"\".join(obj_lst)\n    return obj_lst\n    \ndef toggle_str_list(str_lst):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    str_lst = list(str_lst)\n    for i in range(len(str_lst)):\n        if str_lst[i].isalpha():\n            str_lst[i] = str_lst[i].upper()\n    str_lst = \"\".join(str_lst)\n    return str_lst\n    \ndef toggle_dict_list(dct_lst):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    dct_lst = list(dct_lst)\n    for i in range(len(dct_lst)):\n        if dct_lst[i].isupper():\n            dct_lst[i] = dct_lst[i].lower()\n    dct_lst = \"\".join(dct_lst)\n    return dct_lst\n    \ndef toggle_obj_list_dict(obj_lst_dct):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    obj_lst_dct = list(obj_lst_dct)\n    for i in range(len(obj_lst_dct)):\n        if obj_lst_dct[i].isupper():\n            obj_lst_dct[i] = obj_lst_dct[i].lower()\n    obj_lst_dct = \"\".join(obj_lst_dct)\n    return obj_lst_dct\n    \ndef toggle_str_list_dict(str_lst_dct):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    str_lst_dct = list(str_lst_dct)\n    for i in range(len(str_lst_dct)):\n        if str_lst_dct[i].isalpha():\n            str_lst_dct[i] = str_lst_dct[i].upper()\n    str_lst_dct = \"\".join(str_lst_dct)\n    return str_lst_dct\n    \ndef toggle_dict_set(dict_set):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    dict_set = list(dict_set)\n    for i in range(len(dict_set)):\n        if dict_set[i].isupper():\n            dict_set[i] = dict_set[i].lower()\n    dict_set = \"\".join(dict_set)\n    return dict_set\n    \ndef toggle_dict_list_set(dct_set):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    dct_set = list(dct_set)\n    for i in range(len(dct_set)):\n        if dct_set[i].isupper():\n            dct_set[i] = dct_set[i].lower()\n    dct_set = \"\".join(dct_set)\n    return dct_set\n    \ndef toggle_str_list_set(str_set):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    str_set = list(str_set)\n    for i in range(len(str_set)):\n        if str_set[i].isalpha():\n            str_set[i] = str_set[i].upper()\n    str_set = \"\".join(str_set)\n    return str_set\n    \ndef toggle_obj_list_list(obj_lst_lst):\n    '''\n    Write a function to toggle the case of all characters in a dictionary.\n    '''\n    obj_lst_lst = list(obj_lst_lst)\n    for i in range(len(obj_lst_lst)):\n        if obj_lst_lst[i].isupper():\n            obj_lst_lst[i] = obj_lst_lst[i].lower()\n    obj_lst_lst = \"\".join(obj_lst_lst)\n    retur"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new = []\n    for letter in string:\n        if letter.isupper():\n            new.append('A')\n        elif letter.islower():\n            new.append('a')\n        elif letter.isdigit():\n            new.append('0')\n        else:\n            new.append(letter)\n    return new\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_x = ord(n1[0])\n    n2_x = ord(n2[0])\n    if n1_x > n2_x:\n        n1, n2 = n2, n1\n    return abs(n1_x - n2_x)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0:\n        return n2\n    return n1 - digit_distance_nums(n1 - 1, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    res = n1 - n2\n    return (res * 10)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    # convert the numbers to a list\n    n1 = list(n1)\n    n2 = list(n2)\n    \n    # check if the list contains any numbers\n    if n1!= n2:\n        return -1\n    \n    # calculate the sum of the difference\n    sum_of_diff = 0\n    \n    # iterate through the numbers and add to the sum\n    for i in range(len(n1)):\n        # if the digit is a digit, add it to the sum\n        if i % 2 == 0:\n            sum_of_diff += n1[i] - n2[i]\n    \n    # return the sum of the difference\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(n1 - n2) for n1, n2 in zip(n1, n2)])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return (n1 - n2) * 10\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #return the sum of all the differences in each digit\n    digit_sum = 0\n    for i in range(len(n1)):\n        digit_sum += abs(n1[i] - n2[i])\n    return digit_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(n1[i]-n2[i] for i in range(len(n1)))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    import math\n    dist = 0\n    while n1 < n2:\n        dist += (n1 - n2)\n        n1 += 1\n        n2 += 1\n    return dist\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    t = []\n    for i in range(size):\n        t.append(0)\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n        while len(t) > 0 and sum > t[-1]:\n            sum -= t[-1]\n            t.pop()\n        if sum == 0:\n            return sum\n        else:\n            t.append(sum)\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_arr = []\n    start_index = 0\n    end_index = size\n    for i in range(size):\n        max_sub_arr.append(a[start_index])\n        start_index += 1\n        end_index -= 1\n        while end_index < size:\n            if sum(max_sub_arr) > a[end_index]:\n                max_sub_arr[i] = a[end_index]\n                end_index += 1\n            else:\n                break\n    return max_sub_arr\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or size == 1:\n        return a[size-1]\n    if size == 2:\n        return max(a[0]+a[1], a[1])\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_sum = 0\n    arr = []\n    for i in range(len(a)):\n        if(len(arr) < size):\n            arr.append(a[i])\n        else:\n            if(arr[len(arr)-1] < arr[i]):\n                arr[len(arr)-1] = a[i]\n            else:\n                arr[len(arr)-1] = arr[i]\n    for i in arr:\n        sub_sum = sub_sum + i\n    return sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    \n    s = sum([a[i] for i in range(size)])\n    return max(s, max_sub_array_sum(a, size-1), s+a[size-1])\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = 0\n    max_sub = []\n    start_idx = 0\n    for end_idx in range(len(a)):\n        sub_sum = 0\n        max_sub = []\n        while(start_idx < end_idx):\n            #print(start_idx, end_idx)\n            sub_sum += a[start_idx]\n            #print(sub_sum)\n            #print(start_idx, end_idx)\n            if(a[start_idx] < a[end_idx]):\n                max_sub.append(a[start_idx])\n                start_idx += 1\n            else:\n                max_sub.append(a[end_idx])\n                end_idx += 1\n        #print(max_sub)\n        if(len(max_sub)>0):\n            max_sub_sum += sub_sum\n        #print(max_sub_sum)\n        #print(max_sub_sum)\n        #print(max_sub)\n        max_sub_sum = max(max_sub_sum, sub_sum)\n        #print(max_sub_sum)\n        #print(sub_sum)\n        if(sub_sum > max_sub_sum):\n            max_sub_sum = sub_sum\n        if(sub_sum < max_sub_sum):\n            max_sub_sum = sub_sum\n        if(max_sub_sum == sub_sum):\n            #print(max_sub_sum)\n            max_sub = max(max_sub, max_sub_sum)\n    return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    for i in range(0, size):\n        sum += a[i]\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    res = 0\n    for i in range(0, size):\n        temp = a[i]\n        for j in range(i, size):\n            temp = temp - a[j]\n            if temp > 0:\n                res = max(res, temp)\n    return res"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    i = 0\n    for j in range(size):\n        while sum < size:\n            sum += a[i]\n            i += 1\n        sum = sum - a[j]\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return find_sum(a, size, 0, 0)\n    \ndef find_sum(a, size, start, end):\n    sum = 0\n    for i in range(start, end):\n        sum += a[i]\n    return sum\n    \ndef test():\n    a = [1,2,3,4,5,6]\n    size = 3\n    print(a)\n    print(max_sub_array_sum(a, size))\n    \ntest()"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Edge case\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return []\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # This solution is O(n) time complexity.\n    # It takes O(n) space.\n    # This solution is not used because it can be slow on large tuples.\n    \n    t1_sorted = sorted(test_tup1)\n    t2_sorted = sorted(test_tup2)\n    \n    if len(t1_sorted) > len(t2_sorted):\n        t1 = t1_sorted\n        t2 = t2_sorted\n    else:\n        t1 = t2_sorted\n        t2 = t1_sorted\n    \n    while True:\n        if len(t1) == len(t2):\n            return t1 + t2\n        elif len(t1) > len(t2):\n            return t1 + t2\n        elif len(t1) < len(t2):\n            return t2 + t1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # using the test cases from previous exercises \n    # but not the original one because the tuple is not in the same order\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    union = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            union.append(test_tup1[i])\n            \n    return union\n        "
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1 or not test_tup2:\n        return None\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return None\n    elif len(test_tup1) == 1 and len(test_tup2) == 1:\n        return test_tup1[0]\n    elif len(test_tup1) == 1:\n        return test_tup2[0]\n    else:\n        pivot = test_tup2[0]\n        \n        test_tup1, test_tup2 = test_tup2, test_tup1\n        i, j = 0, 0\n        \n        while True:\n            if i >= len(test_tup1) or j >= len(test_tup2):\n                return test_tup1[i]\n            \n            if test_tup1[i] < pivot:\n                i += 1\n                \n            elif test_tup1[i] > pivot:\n                j += 1\n                \n            else:\n                test_tup1 = test_tup1[:i] + test_tup1[i + 1:]\n                test_tup2 = test_tup2[:j] + test_tup2[j + 1:]\n                \n                return test_tup1[0]\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return ''.join([x for i,x in sorted(zip(test_tup1, test_tup2))])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    if test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup_1 = [i[0] for i in test_tup1]\n    tup_2 = [i[0] for i in test_tup2]\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1 or not test_tup2:\n        return None\n    if len(test_tup1) == len(test_tup2):\n        return tuple(sorted(test_tup1 + test_tup2))\n    return tuple(sorted(test_tup1[:-1] + test_tup2))"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if (test_tup1[0] < test_tup2[0]):\n        first = test_tup1\n        second = test_tup2\n    else:\n        first = test_tup2\n        second = test_tup1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > Max_length:\n            Max_length = len(lst[i])\n    return Max_length\n    \n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    i=0\n    count=0\n    lst=lst[::-1]\n    while i<len(lst):\n        count+=1\n        #find the max\n        j=i\n        while j<len(lst):\n            if lst[j]==lst[i]:\n                j+=1\n            else:\n                break\n        i=j\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen = 0\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] == 1:\n                count += 1\n        if count > maxLen:\n            maxLen = count\n        # print(lst[i], '-', count)\n    return maxLen\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    max_length = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (lst[i] > lst[j]):\n                max_length += 1\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                max_length = max(len(lst[i]), max_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return len(lst)\n    elif len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen = 0\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i + 1] - lst[i] > maxLen:\n            maxLen = lst[i + 1] - lst[i]\n    return maxLen\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l=lst[0]\n    r=len(lst)\n    s=0\n    for i in range(1, r):\n        if lst[i] > lst[i-1]:\n            l=l+1\n        else:\n            s=s+1\n    return l, s\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*)\"'\n    res = re.findall(pattern, text)\n    return res\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'[\\'\\\"](?=\\w+)',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # strip() function to remove all whitespaces \n    text = text.strip()\n    # split() function to separate the words in a string and return them as a list\n    return text.split('\"')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(\\S+)(\\s*)([\\S]+)(\\s*)(\\S+)')\n    results = pattern.findall(text)\n    text = list(results)\n    result = [(''.join(map(str, result[:3])), result[3], result[4].strip()) for result in text]\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    r = re.compile('^[\\'\"]([^\"]*)[\\'\"].*[\\'\"].*$')\n    matches = r.findall(text)\n    return [value for value in matches if value.strip()]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotation_mark_regex = re.compile(r'^(\\'?)([^\\'\"])')\n    matched_words = quotation_mark_regex.findall(text)\n    return matched_words\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    value = ''\n    reg_value = re.compile(r'''\\$''')\n    for match in re.finditer(reg_value, text):\n        value = match.group()\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = \"['](.+?)[']'\\s*$\"\n    regexp = r\"\\{(.+?)\\}\"\n    reg = re.compile(regex)\n    regp = re.compile(regexp)\n    result = regp.findall(text)\n    return result\ndef make_list(values, name):\n    '''\n    Write a function that takes a list of values and a name and \n    returns a list with the values separated by spaces.\n    '''\n    result = []\n    for value in values:\n        result.append(value.replace('\\n',''))\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.replace('\"', '\"')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return [value.replace(\"'\", \"\").replace('\"', \"\") for value in re.findall(r'[^\"]*\"|[^\"]*\"', text)]\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j] or arr[i]!=arr[j] or arr[i]==arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return 1\n    elif arr[0]==arr[1]:\n        return count_Pairs(arr[2:],n) + count_Pairs(arr[1:],n)\n    else:\n        return count_Pairs(arr[2:],n)+count_Pairs(arr[1:],n)\narr=[1,2,3,5,7,8,9,10]\nprint(count_Pairs(arr,10)"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j] and arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 2\n    for i in range(0,n-1):\n        for j in range(0,n-1):\n            if((arr[i]<arr[j]) and (arr[i]!=arr[j])):\n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    l= len(arr)\n    if (l==0):\n        return 0\n    if (l==1):\n        return 1\n    if (arr[0]!=arr[1]):\n        return (count_Pairs(arr,n-1))\n    return count_Pairs(arr,n-1)+count_Pairs(arr,n-2)"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total = 0\n    pairs = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j] and (arr[i] not in pairs):\n                pairs.append(arr[i])\n                total += 1\n    return total\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # your code goes here\n    if n<3:\n        return 0\n    if n==3:\n        return 2*(len(set(arr)))\n    if n==4:\n        return 2*(len(set(arr)))\n    #return len(set(arr))**2\n    if arr[0] == arr[1] or arr[1] == arr[2] or arr[2] == arr[3]:\n        return 2*len(set(arr))\n    else:\n        return count_Pairs(arr[0:3],n-2) + count_Pairs(arr[3:],n-2)\ndef print_count(cnt): \n    '''\n    Prints the count.\n    '''\n    print(cnt)\n    return\ndef create_permutation(arr): \n    '''\n    Given a list of numbers and a starting index, return a list where all the elements in the list are \n    equal except at the starting index.\n    '''\n    # your code goes here\n    if len(arr)==0:\n        return []\n    if len(arr)==1:\n        return [arr[0]]\n    if len(arr)==2:\n        return [arr[0],arr[1]]\n    if len(arr)==3:\n        return [arr[0],arr[2],arr[1]]\n    if arr[1]<arr[0]:\n        return create_permutation(arr[1:])\n    else:\n        return create_permutation([arr[0]]+create_permutation(arr[2:]))\ndef main():\n    '''\n    Driver code to test your solution.\n    '''\n    print('Create a permutation of a given list:')\n    perm = create_permutation([1,2,3])\n    print(perm)\n    print('Count the number of possible pairs in the permutation:')\n    print(count_Pairs(perm,4))\n    print('Print the count of possible unordered pairs:')\n    print_count(count_Pairs(perm,4))\n    perm = create_permutation([1,2,3,4])\n    print(perm)\n    print('Count the number of possible unordered pairs:')\n    print(count_Pairs(perm,4))\n    print('Print the count of possible unordered pairs:')\n    print_count(count_Pairs(perm,4))\n    perm = create_permutation([1,2,3,4,5,6,7])\n    print(perm)\n    print('Count the number of possible unordered pairs:')\n    print(count_Pairs(perm,4))\n    print('Print the count of possible unordered pairs:')\n    print_count(count_Pairs(perm,4))\nmain("
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\ndef check_Unordered(arr,n):\n    '''\n    Write a python function which checks whether the input array is unordered or not\n    '''\n    count = 0\n    for i in range(0,n):\n        if arr[i] == arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    pass"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s = \"\"\n    for char in word:\n        if char.isalnum():\n            s += char\n        else:\n            if char == \" \":\n                s += char\n    return s\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return ''.join(c for c in word if c not in '0123456789-.')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return ''.join(char for char in word if char not in '.,')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return (word[i:i+2] for i in range(len(word)-1))\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    words = word.split(' ') \n    return words\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    char = []\n    while len(word) > 0:\n        char.append(word[0])\n        word = word[1:]\n    return ''.join(char)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # // is a modulo operator\n    if (n == 0):\n        return 0\n    else:\n        return int(n%10) + sum_digits(int(n/10))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError\n    if n < 0:\n        raise ValueError\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num = 0\n    while n!= 0:\n        num = num*10 + n % 10\n        n = n//10\n    return num\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s = s + n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num = n\n    sum = 0\n    while num > 0:\n        sum = sum * 10 + num % 10\n        num = num // 10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[j] > list1[i]:\n                temp = list1[j]\n                list1[j] = list1[i]\n                list1[i] = temp\n    return list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for index in range(len(list1)-1):\n            if list1[index+1] < list1[index]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i=0\n    j=len(list1)-1\n    \n    while i<j:\n        if list1[i]<list1[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n        \ndef issort_list_rec(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return False\n    if len(list1)==1:\n        return True\n    if list1[0]<list1[1]:\n        return False\n    if not issort_list_rec(list1[1:]):\n        return False\n    return True\n        \ndef issort_list_rec_rec(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return False\n    if len(list1)==1:\n        return True\n    if list1[0]<list1[1]:\n        return False\n    if not issort_list_rec_rec(list1[1:]):\n        return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 is None or len(list1) == 0:\n        return False\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i + 1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return False\n    if len(list1) == 1:\n        return list1[0] == list1[-1]\n    if list1[0] > list1[-1]:\n        return False\n    if len(list1) % 2 == 0:\n        midpoint = len(list1) // 2\n        return issort_list(list1[:midpoint]) and issort_list(list1[midpoint:])\n    else:\n        midpoint = len(list1) // 2\n        return issort_list(list1[:midpoint]) and issort_list(list1[midpoint + 1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] > list1[j]:\n                return False\n    return True\n    "
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if any number is less than 0\n    if not list1:\n        return True\n    # check if the last element is greater than the first element\n    elif list1[0] >= list1[1]:\n        return True\n    else:\n        return False\n    \n    "
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(0, length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n    \ndef dict_builder(string):\n    '''\n    Write a function that takes a string of words as an input and returns\n    a list of dictionaries where each dictionary has the same set of keys as\n    the input string.\n    '''\n    empty_list = empty_list(len(string))\n    return empty_list\n    \ndef list_builder(string):\n    '''\n    Write a function that takes a string of words as an input and returns\n    a list of dictionaries where each dictionary has the same set of keys\n    as the input string.\n    '''\n    empty_list = empty_list(len(string))\n    for i in range(len(string)):\n        empty_list[i] = dict_builder(string[i])\n    return empty_list\n        \ndef dict_builder_function(string):\n    '''\n    Write a function that takes a string of words as an input and returns\n    a list of dictionaries where each dictionary has the same set of keys\n    as the input string.\n    '''\n    empty_list = empty_list(len(string))\n    for i in range(len(string)):\n        empty_list[i] = dict(**string[i])\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({\"name\": \"John\", \"age\": 40})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Handle each list by reversing the order of sublists\n    list1.reverse()\n    # Loop through each sublist and swap the first element\n    # with the first element in the reversed sublist\n    for i in range(len(list1)):\n        list1[i], list1[0] = list1[0], list1[i]\n    # Sort the sublists by the first element\n    list1.sort()\n    # Reverse the sublists\n    list1.reverse()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for i in list1:\n        tmp_list = []\n        for j in i:\n            tmp_list.append(j)\n        sorted_list.append(tmp_list)\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    len_list1 = len(list1)\n    for i in range(len_list1):\n        for j in range(len_list1):\n            if list1[i][j]!= \" \":\n                print(list1[i][j])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = list1[i][j].lower()\n            list1[i][j] = list1[i][j].title()\n    return list1\n    \ndef search_word(list1, word):\n    '''\n    Write a function to return the index of the first occurrence of a given word\n    in a given list.\n    '''\n    index = -1\n    for i in range(len(list1)):\n        if list1[i][1] == word:\n            index = i\n            break\n    return index\n    \ndef sort_words(list1):\n    '''\n    Write a function to sort each sublist of words in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = list1[i][j].title()\n            list1[i][j] = list1[i][j].lower()\n    return list1\n    \ndef check_sublist(list1, sublist):\n    '''\n    Write a function to check if a list of sublists is a subset of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in sublist:\n                return False\n    return True\n    \ndef sort_lists(list1):\n    '''\n    Write a function to return a list of sublists with all the letters of\n    the alphabet sorted alphabetically.\n    '''\n    list2 = list1.copy()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list2[i][j] = list1[i][j].lower()\n            list2[i][j] = list2[i][j].title()\n    return list2\n    \ndef match_word(list1, word):\n    '''\n    Write a function to return the index of the first occurrence of a given word\n    in a given list.\n    '''\n    index = -1\n    for i in range(len(list1)):\n        if list1[i][1] == word:\n            index = i\n            break\n    return index\n    \ndef search_word_list(list1, word_list):\n    '''\n    Write a function to return the index of the first occurrence of a given word\n    in a given list of words.\n    '''\n    index = -1\n    for i in range(len(list1)):\n        if list1[i][1] in word_list:\n            index = i\n            break\n    return index\n    \ndef check_word(list1, word):\n    '''\n    Write a function to check if the word is in a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i][1] == word:\n            return True\n    return False\n    \ndef check_word_list(list1, word_list):\n    '''\n    Write a function to check if the word is in a given list of words.\n    '''\n    for i in range(len(list1)):\n        if list1[i][1] in word_list:\n            return True\n    return False\n    \ndef find_in_lists(list1, word):\n    '''\n    Write a function to return the index of the first occurrence of a given word\n    in a given list.\n    '''\n    index = -1\n    for i in range(len(list1)):\n        if list1[i][1] == word:\n            index = i\n            break\n    return index\n    \ndef find_in_lists_list(list1, word_list):\n    '''\n    Write a function to return the index of the first occurrence of a given word\n    in a given list of words.\n    '''\n    index = -1\n    for i in range(len(list1)):\n        if list1[i][1] in word_list:\n            index = i\n            break\n    return index\n    \ndef insert_word(list1, word):\n    '''\n    Write a function to insert a word in a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i][1] == word:\n            list1.insert(i, word)\n            break\n    return list1\n    \ndef remove_word(list1, word):\n    '''\n    Write a function to remove a word from a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i][1] == word:\n            list1.pop(i)\n            break\n    return list1\n    \ndef add_word(list1, word):\n    '''\n    Write a function to add a word to a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i][1] == word:\n            list1.insert(i, word)\n            break\n    return list1\n    \ndef find_words(list1):\n    '''\n    Write a function to return the index of the first occurrence of a given word\n    in a given list.\n    '''\n    index = -1\n    for i in range(len(list1)):\n        if list1[i][1] in word_list:\n            index = i\n            break\n    return index\n    \ndef find_words_list(list1):\n    '''\n    Write a function to return the index of the first occurrence of a given word\n    in a given list of words.\n    '''\n    index = -1\n    for i in range(len(list1)):\n        if list1[i][1] in word_list:\n            index = i\n            break\n    return index\n    \ndef remove_first_word(list1):\n    '''\n    Write a function to remove the first occurrence of a given word in a given\n    list.\n    '''\n    list1.remove(list1[0])\n    return list1\n    \ndef add_word_to_list(list1, word):\n    '''\n    Write a function to add a word to a given list.\n    '''\n    list1.append((word, len(list1)))\n    return list1\n    \ndef delete_word_from_list(list1, word):\n    '''\n    Write a function to delete a word from a given list.\n    '''\n    index = find_word_list(list1, word)\n    list1.pop(index)\n    return list1\n    \ndef get_word(list1):\n    '''\n    Write a function to return the first word of a given list.\n    '''\n    index = find_word_list(list1, word_list)\n    return list1[index][1]\n    \ndef print_list(list1):\n    '''\n    Write a function to print the list in a given format.\n    '''\n    for i in range(len(list1)):\n        print(list1[i][0])\n    \ndef find_word_list_length(list1):\n    '''\n    Write a function to return the number of words in a given list.\n    '''\n    length = 0\n    for i in range(len(list1)):\n        length += list1[i][1]\n    return length\n    \ndef find_word_list_length_list(list1):\n    '''\n    Write a function to return the number of words in a given list.\n    '''\n    length = 0\n    for i in range(len(list1)):\n        length += 1\n        list1.insert(i, length)\n    return length\n    \ndef calculate_word_count(list1, word):\n    '''\n    Write a function to count the number of times a given word occurs\n    in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i][1] == word:\n            count += 1\n    return count\n    \ndef find_sublist(list1, sublist):\n    '''\n    Write a function to return the sublist of a given list.\n    ''"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=str.casefold)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        newlist = []\n        for item in sublist:\n            newlist.append(item.upper())\n        sublist.clear()\n        sublist = newlist\n    return sublist\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_by_string(list2):\n        '''\n        Write a function to sort each sublist of strings in a given list of lists.\n        '''\n        def sort_sublists_by_string_rev(list2):\n            '''\n            Write a function to sort each sublist of strings in a given list of lists.\n            '''\n            def sort_sublists_by_string_rev_rev(list2):\n                '''\n                Write a function to sort each sublist of strings in a given list of lists.\n                '''\n                def sort_sublists_by_string_rev_rev_rev(list2):\n                    '''\n                    Write a function to sort each sublist of strings in a given list of lists.\n                    '''\n                    def sort_sublists_by_string_rev_rev_rev_rev(list2):\n                        '''\n                        Write a function to sort each sublist of strings in a given list of lists.\n                        '''\n                        def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                            '''\n                            Write a function to sort each sublist of strings in a given list of lists.\n                            '''\n                            def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                '''\n                                Write a function to sort each sublist of strings in a given list of lists.\n                                '''\n                                def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                    '''\n                                    Write a function to sort each sublist of strings in a given list of lists.\n                                    '''\n                                    def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                        '''\n                                        Write a function to sort each sublist of strings in a given list of lists.\n                                        '''\n                                        def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                            '''\n                                            Write a function to sort each sublist of strings in a given list of lists.\n                                            '''\n                                            def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                                '''\n                                                Write a function to sort each sublist of strings in a given list of lists.\n                                                '''\n                                                def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                                    '''\n                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                    '''\n                                                    def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                                        '''\n                                                        Write a function to sort each sublist of strings in a given list of lists.\n                                                        '''\n                                                        def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                                            '''\n                                                            Write a function to sort each sublist of strings in a given list of lists.\n                                                            '''\n                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                                                '''\n                                                                Write a function to sort each sublist of strings in a given list of lists.\n                                                                '''\n                                                                def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                                                    '''\n                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                    '''\n                                                                    def sort_sublists_by_string_rev_rev_rev_rev_rev(list2):\n                                                                        '''\n                                                                        Write a function to sort each sublist of strings in a given list of lists.\n                                                                        '''\n                                                                        def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                            '''\n                                                                            Write a function to sort each sublist of strings in a given list of lists.\n                                                                            '''\n                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                '''\n                                                                                Write a function to sort each sublist of strings in a given list of lists.\n                                                                                '''\n                                                                                def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                    '''\n                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                    '''\n                                                                                    def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                    '''\n                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                    '''\n                                                                                    def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                        '''\n                                                                                        Write a function to sort each sublist of strings in a given list of lists.\n                                                                                        '''\n                                                                                        def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                            '''\n                                                                                            Write a function to sort each sublist of strings in a given list of lists.\n                                                                                            '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                '''\n                                                                                                Write a function to sort each sublist of strings in a given list of lists.\n                                                                                            '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort each sublist of strings in a given list of lists.\n                                                                                                '''\n                                                                                            def sort_sublists_by_string_rev_rev_rev_rev_rev_rev(list2):\n                                                                                                    Write a function to sort eac"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    list1.sort(key = lambda x: x[1])\n    for i in range(len(list1)):\n        if i > 0:\n            if list1[i][1] < list1[i-1][1]:\n                temp_temp = list1[i]\n                list1[i] = list1[i-1]\n                list1[i-1] = temp_temp\n        sorted_list.append(list1[i])\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # remove duplicates from list1\n    list1 = list(set(list1))\n    # sort sublists\n    list1.sort()\n    # return list1\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new = []\n    for num in nums:\n        if num not in new:\n            new.append(num)\n    return new\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = set(nums)\n    return [num for num in nums if num not in unique]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = {}\n    for x in nums:\n        if x not in seen:\n            seen[x] = 0\n        else:\n            seen[x] += 1\n    return seen\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    duplicate_list = []\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] == nums[j]:\n                nums[i] = nums[j]\n                nums.pop(j)\n                break\n    for i in range(len(nums)):\n        if nums[i] not in duplicate_list:\n            duplicate_list.append(nums[i])\n    return duplicate_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # list_a = [1, 2, 3, 2, 2, 1]\n    # list_b = [2, 2, 1, 2, 3, 3]\n    # list_c = [2, 3, 3, 2, 3, 1, 2, 3]\n    # return list(set(list_a) & set(list_b) & set(list_c))\n    '''\n    [1, 2, 3, 2, 2, 1]\n    [2, 3, 3, 2, 3, 1, 2, 3]\n    [2, 2, 1, 2, 3, 3, 3]\n    '''\n    # nums = [1,2,2,1,1,1,2,2,3,3,3,3,4,4,5,5,6,6,6,7,7,7,8,8,9,9,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,18,18,18,18,18,19,19,19,19,19,19,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,23,23,23,23,23,24,24,24,24,25,25,25,25,25,26,26,26,26,27,27,27,27,27,28,28,28,28,28,29,29,29,29,29,30,30,30,30,30,30,31,31,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,43,44,44,44,45,45,45,45,46,46,46,46,47,47,47,47,48,48,48,49,49,49,50,50,51,51,51,51,52,52,52,52,53,53,53,54,54,54,55,55,55,56,56,57,57,57,58,59,60,61,61,61,62,63,63,64,65,65,66,66,67,68,69,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,72"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    count = dict()\n    for n in nums:\n        count[n] = count.get(n, 0) + 1\n    for k in nums:\n        if count[k] == 1:\n            nums.remove(k)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return sorted(set(nums)"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set_nums = set(nums)\n    return list(set_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    arr = []\n    for i in nums:\n        if i not in arr:\n            arr.append(i)\n    return arr\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_unique_numbers = []\n    for value in list_data:\n        if value not in list_unique_numbers:\n            list_unique_numbers.append(value)\n    return list_unique_numbers\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for i in list_data:\n        if i not in unique_product:\n            unique_product += 1\n    return unique_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print('Unique Product:', list_data)\n    sum_data = 0\n    for i in list_data:\n        sum_data += i\n    print('Sum: ', sum_data)\n    print('Product:', list_data)\n    return sum_data\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst = list(set(list_data))\n    lst = [lst.index(i) for i in list_data]\n    prod = 1\n    for i in lst:\n        prod *= i\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # For loop to get the length of the list\n    for i in range(0,len(list_data)):\n        for j in range(0,len(list_data)):\n            # If the i and j are the same number then it must not be in the same list\n            if(list_data[i] == list_data[j]):\n                pass\n            else:\n                # If the number is not a duplicate then it is not the duplicate number\n                # And add it to the product\n                # print(list_data[i] + \",\" + list_data[j])\n                product = list_data[i] * list_data[j]\n                return product\n    # If the list is empty then return 0\n    return 0\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data.sort()\n    product = 1\n    for number in list_data:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    def unique_product(list_data):\n        '''\n        Write a python function to calculate the product of the unique numbers in a given list.\n        '''\n        product=0\n        for i in range(len(list_data)):\n            product+=list_data[i]**2\n        return product\n    return unique_product(list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for i in range(len(list_data)):\n        product*=list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(0,len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    product = len(unique_list)\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for x in list_data:\n        if x == x:\n            x = x + 1\n        else:\n            x = 1\n    return x * list_data\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r*h)/2*np.pi\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r**2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # TODO: Calculate surface area of a cylinder given its radius r and height h\n    # Assume r and h are floats\n    # Return value is the surface area of the cylinder\n    # h and r are float\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (r*(math.pi))*(h**2)\n    print(f'The surface area of the cylinder is {area}')\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 4*h*(r**2)\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = r*h/2\n    b = r*h/4\n    c = r*h/6\n    return (a + b + c)*(2*h + 2*a + 2*b + c)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h*np.pi\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 4*pi*r**2*h**2\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=6*r*h\n    return a\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #check if A is sublist of B\n    if is_Sub_List(A,B): \n        return True\n    #if B is sublist of A\n    else: \n        return False \n        \ndef is_Sub_List(A,B): \n    '''\n    Write a python function to check whether A is sublist of B or not.\n    '''\n    for i in range(0,len(A)): \n        if A[i]==B[i]: \n            pass \n        else: \n            return False \n    return True \n    \ndef main(): \n    A = [1,2,3,4] \n    B = [4,4,4,4] \n    print(is_Sub_Array(A,B)) \n    print(is_Sub_List(A,B)) \n    \nif __name__ == '__main__': \n    main()"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \ndef is_Uniq_Array(A): \n    '''\n    Write a python function to check whether a list is uniq or not.\n    '''\n    A.sort()\n    if A==A[::-1] :\n        return True\n    else:\n        return False\n    \n    \ndef is_Strict_Array(A): \n    '''\n    Write a python function to check whether a list is strict or not.\n    '''\n    if len(A) == len(set(A)):\n        return True\n    else:\n        return False\n        \n    \n    \ndef is_Empty_Array(A): \n    '''\n    Write a python function to check whether a list is empty or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_Sub_strict_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \ndef is_Uniq_strict_Array(A): \n    '''\n    Write a python function to check whether a list is uniq or not.\n    '''\n    A.sort()\n    if A==A[::-1] :\n        return True\n    else:\n        return False\n    \n    \ndef is_Strict_strict_Array(A): \n    '''\n    Write a python function to check whether a list is strict and also sublist of another or not.\n    '''\n    if len(A) == len(set(A)):\n        return True\n    else:\n        return False\n    \n    \ndef is_Empty_strict_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_Sub_Uniq_strict_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \ndef is_Uniq_uniq_strict_Array(A): \n    '''\n    Write a python function to check whether a list is uniq and sublist of another or not.\n    '''\n    if len(A) == len(set(A)):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Strict_uniq_strict_Array(A): \n    '''\n    Write a python function to check whether a list is strict and also sublist of another or not.\n    '''\n    if len(A) == len(set(A)):\n        return True\n    else:\n        return False\n    \n    \ndef is_Empty_strict_uniq_strict_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_Sub_Uniq_strict_uniq_strict_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \ndef is_Uniq_sub_strict_Array(A): \n    '''\n    Write a python function to check whether a list is uniq and sublist of another or not.\n    '''\n    if len(A) == len(set(A)):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Empty_sub_strict_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_Sub_Uniq_strict_uniq_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Uniq_sub_strict_uniq_Array(A): \n    '''\n    Write a python function to check whether a list is uniq and sublist of another or not.\n    '''\n    if len(A) == len(set(A)):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Empty_Sub_Strict_uniq_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Sub_Uniq_strict_uniq_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Empty_Uniq_strict_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Sub_Uniq_strict_uniq_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Empty_Sub_Strict_uniq_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Sub_Uniq_strict_uniq_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Empty_Sub_Uniq_strict_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Sub_Uniq_strict_uniq_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Empty_Sub_Strict_uniq_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Sub_Uniq_strict_uniq_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A :\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Empty_Uniq_strict_Array(A): \n    '''\n    Write a python function to check whether a list is empty and also sublist of another or not.\n    '''\n    if len(A) == 0"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    C = A\n    for i in B:\n        C = C.intersection(i)\n        if len(C) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    try:\n        A = list(A)\n        B = list(B)\n        if len(A)!= len(B):\n            return False\n        i = 0\n        j = 0\n        flag = False\n        while i < len(A) and j < len(B):\n            if A[i] == B[j]:\n                flag = True\n                i += 1\n                j += 1\n            else:\n                flag = False\n                break\n        if flag == False:\n            return False\n        else:\n            return True\n    except:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==1:\n        return B==A[0]\n    else:\n        if A[0] in B and is_Sub_Array(A[1:],B):\n            return True\n        else:\n            return False\n    "
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        for j in range(len(A)):\n            if A[i] == B[j]:\n                break\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #1. Create a flag to know if the list is a sublist or not\n    #2. Create a list to keep track of sublist\n    #3. Iterate over the list to check if the list is sublist of another list\n    #4. If the list is sublist of another list then return false \n    #5. If the list is not a sublist then return true \n    return B in A or B in A[1:] or B in A[:-1]\n    \ndef merge_sort(array):\n    '''\n    Use recursion to sort the elements in the input array\n    '''\n    if len(array) == 0 or len(array) == 1:\n        return array\n    else:\n        return merge_sort(array[1:]) + array[:1]\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(A[0] == B[0]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]==B[j] or B[i]==A[j]:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if A[0] == B[0] and A[1] == B[1]:\n        return True\n    else:\n        return False\ndef is_Sub_Array2(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    return A[0:len(A)] == B[0:len(B)]\ndef max_sum(A,B,n):\n    '''\n    Write a python function to find the maximum sum.\n    '''\n    \n    sum1 = 0\n    sum2 = 0\n    \n    for i in range(0,n):\n        sum1 += A[i]\n        sum2 += B[i]\n        \n    max_sum = max(sum1, sum2)\n    \n    if max_sum == sum1:\n        return max_sum\n    else:\n        return max_sum + sum1\ndef min_sum(A,B,n):\n    '''\n    Write a python function to find the minimum sum.\n    '''\n    \n    sum1 = 0\n    sum2 = 0\n    \n    for i in range(0,n):\n        sum1 += A[i]\n        sum2 += B[i]\n        \n    min_sum = min(sum1, sum2)\n    \n    if min_sum == sum1:\n        return min_sum\n    else:\n        return min_sum + sum1\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial_divided_by_2 = 0\n    factorial_divided_by_3 = 1\n    i = 0\n    while n!= 0: \n        n = n//10\n        factorial_divided_by_3 *= 10\n        i += 1\n        if i == factorial_divided_by_3: \n            factorial_divided_by_3 = factorial_divided_by_3 * 10\n            i = 0\n    return factorial_divided_by_3\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n!= 0: \n        n, mod = n % 10, n//10\n        if mod == 0: \n            return mod \n        else: \n            return last_Digit_Factorial(mod)"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    while n>0:\n        fact=fact*n\n        n=n-1\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    else: \n        digit = n % 10\n        return digit * last_Digit_Factorial(n / 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Write your code here\n    return str(n % 10) + last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n!= 0:\n        n = n // 10\n        factorial *= n\n    return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    from functools import reduce\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #Your code goes here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n%10 + last_Digit_Factorial(n//10)\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1,list2,list3]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[]\n    i=0\n    while i<len(list1):\n        list4.append(list1[i])\n        i+=1\n    i=0\n    while i<len(list2):\n        list4.append(list2[i])\n        i+=1\n    i=0\n    while i<len(list3):\n        list4.append(list3[i])\n        i+=1\n    return list4\n    \ndef main():\n    list1=[]\n    list2=[]\n    list3=[]\n    \n    for i in range(5):\n        num=int(input(\"How many numbers in the list? \"))\n        for j in range(num):\n            num=int(input(\"Enter a number: \"))\n            list1.append(num)\n    print(\"\\nList 1:\",list1)\n    \n    for i in range(5):\n        num=int(input(\"How many numbers in the list? \"))\n        for j in range(num):\n            num=int(input(\"Enter a number: \"))\n            list2.append(num)\n    print(\"\\nList 2:\",list2)\n    \n    for i in range(5):\n        num=int(input(\"How many numbers in the list? \"))\n        for j in range(num):\n            num=int(input(\"Enter a number: \"))\n            list3.append(num)\n    print(\"\\nList 3:\",list3)\n    \n    print(\"\\nInterleaved list:\",interleave_lists(list1,list2,list3))\n    \nif __name__ == \"__main__\":\n    main()\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newList = []\n    newList2 = []\n    newList3 = []\n    if len(list1)!= len(list2):\n        return 'List Length Must Match!'\n    elif len(list1)!= len(list3):\n        return 'List Length Must Match!'\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                newList.append(list1[i])\n                newList.append(list2[j])\n                newList.append(list3[i])\n        return newList\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list = []\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            inter_list.append(list1[i] + list2[j] + list3[j])\n            j+=1\n            i+=1\n        i+=1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return ''\n    else:\n        list1 = list1[:]\n        for x in range(len(list1)):\n            for y in range(len(list2)):\n                list1[x][y] = list2[y][x]\n        for y in range(len(list3)):\n            list3[y] = list3[y][:]\n            for x in range(len(list3)):\n                list3[x][y] = list1[x][y]\n        return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list=[]\n    new_list1=[]\n    new_list2=[]\n    new_list3=[]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x+y for x,y in zip(list1,list2)]+[x+y for x,y in zip(list3,list2)]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result=[]\n    # the outer loop will iterate over each list of the different lengths\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # the inner loop will iterate over each list of the same length\n            for k in range(len(list3)):\n                result.append(list1[i]+list2[j]+list3[k])\n    return result\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # First check if all lists are empty\n    # if they are, throw an exception\n    if len(list1) == 0 and len(list2) == 0 and len(list3) == 0:\n        # If none are empty, print an error message and return the empty list\n        raise ValueError(\"list1 and list2 or list3 are empty\")\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup_1 = test_tup1[:]\n    test_tup_2 = test_tup2[:]\n    \n    dissim = []\n    for test_tup in test_tup_1:\n        for test_tup2 in test_tup_2:\n            dissim.append(test_tup + test_tup2)\n    return dissim\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Declare a mapping for the matching elements\n    matching_elems = {}\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list = []\n    test_list.append(test_tup1[0])\n    test_list.append(test_tup2[0])\n    test_list.append(test_tup1[1])\n    test_list.append(test_tup2[1])\n    test_list.sort()\n    for i in range(len(test_list)):\n        test_list[i] = str(test_list[i])\n    test_list = list(map(int, test_list))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            return test_tup1[i]\n    return None"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                dissimilar.append((i, j))\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    x = 0\n    y = 0\n    # print(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # print(test_tup1[i])\n            x = x + 1\n    # print(x)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tuples = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            dissimilar_tuples.append(tup)\n    return dissimilar_tuples\n    \ndef find_similar(test_tup1, test_tup2):\n    '''\n    Write a function to find the similar elements in the given two tuples.\n    '''\n    similar_tuples = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            similar_tuples.append(tup)\n    return similar_tuples\n    "
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    l1 = len(tup1)\n    l2 = len(tup2)\n    if l1 < l2:\n        return\n    for i in range(l1-1):\n        if tup1[i]!= tup2[i]:\n            return\n    return (tup1,tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1=[]\n    lst2=[]\n    if len(test_tup1)!=len(test_tup2):\n        raise Exception(\"The tuples must be the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in lst1 and test_tup2[i] not in lst2:\n            lst1.append(test_tup1[i])\n            lst2.append(test_tup2[i])\n    return lst1, lst2\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    \n    for el in test_tuple:\n        if even_fnc(el) == True:\n            result.append(el)\n        elif even_fnc(el) == False:\n            result.append(el)\n            \n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, even_fnc)\n    return tuple(filter(lambda x: x%2==0, test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    odd_tuple = test_tuple[1]\n    odd_tuple_2 = test_tuple[2]\n    even_tuple_2 = odd_tuple[0]\n    if even_fnc(odd_tuple_2, odd_tuple[1]):\n        even_tuple = even_tuple_2\n    else:\n        even_tuple = odd_tuple[0]\n    if even_fnc(even_tuple_2, even_tuple):\n        odd_tuple_2 = even_tuple_2\n    else:\n        odd_tuple_2 = even_tuple[0]\n    return odd_tuple_2\n    \ndef even_ele_v2(test_tuple, even_fnc):\n    '''\n    Remove even elements in the nested mixed tuple and then in even_fnc\n    '''\n    even_tuple = test_tuple[0]\n    if even_fnc(even_tuple, even_tuple[1]):\n        even_tuple = even_tuple[0]\n    else:\n        even_tuple = even_tuple[0]\n    return even_tuple\n    \ndef odd_ele_v2(test_tuple, odd_fnc):\n    '''\n    Remove odd elements in the nested mixed tuple and then in odd_fnc\n    '''\n    odd_tuple = test_tuple[0]\n    if odd_fnc(odd_tuple, odd_tuple[1]):\n        odd_tuple = odd_tuple[0]\n    else:\n        odd_tuple = odd_tuple[0]\n    return odd_tuple\n    \n    \ndef v1(nested_tuple):\n    '''\n    Return a new tuple containing only the even elements.\n    '''\n    even_ele_v2 = even_ele(nested_tuple, even_fnc=even_ele)\n    odd_ele_v2 = odd_ele(nested_tuple, odd_fnc=odd_ele)\n    return even_ele_v2, odd_ele_v2\n    \ndef v2(nested_tuple):\n    '''\n    Return a new tuple containing only the odd elements.\n    '''\n    even_ele_v2 = even_ele(nested_tuple, odd_fnc=odd_ele)\n    odd_ele_v2 = odd_ele(nested_tuple, even_fnc=even_ele)\n    return even_ele_v2, odd_ele_v2\n    \ndef v3(nested_tuple):\n    '''\n    Return a new tuple containing all odd and even elements of the \n    nested tuple.\n    '''\n    return even_ele_v2, odd_ele_v2\n    \ndef v4(nested_tuple):\n    '''\n    Return a new tuple containing only the even elements of the \n    nested tuple.\n    '''\n    return even_ele_v2, odd_ele_v2\n    \n    \ndef test(f):\n    '''\n    Returns a tuple of all tests passed\n    '''\n    \n    tests = []\n    tests.append( (v1, (1,)))\n    tests.append( (v2, (1,2,3,4,5,6,7,8,9,10)))\n    tests.append( (v3, (1,2,3,4,5,6,7,8,9,10)))\n    tests.append( (v4, (1,2,3,4,5,6,7,8,9,10)))\n    \n    return tests\n    \ndef main():\n    '''\n    Parse command line arguments and call functions.\n    '''\n    \n    # create test tuples from command line argument\n    test_tuple = (test(v1)((1,2,3,4,5,6,7,8,9,10)))\n    \n    # Create two nested tuples from test tuples\n    test_tuple = (test(v1)((1,2,3,4,5,6,7,8,9,10)),\n                 (test(v2)((1,2,3,4,5,6,7,8,9,10)),\n                  test(v3)((1,2,3,4,5,6,7,8,9,10)))\n                )\n    \n    # Display results\n    for i, tuple in enumerate(test_tuple):\n        print(\"Test {}:\".format(i+1))\n        print(\"Output:\")\n        print(*tuple)\n        print()\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if even_fnc(test_tuple[0]) == test_tuple[1]:\n        return (test_tuple[0])\n    else:\n        return test_tuple[1]\n    \n    "
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple[0], test_tuple[1])\n    even_fnc(test_tuple[1], test_tuple[0])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_fnc(even_list, test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    even_list = test_tuple[0]\n    for i in range(len(test_tuple) - 1):\n        if i % 2!= 0:\n            even_list = even_list + test_tuple[i + 1]\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for key, value in test_tuple.items():\n        if key % 2 == 0:\n            even_fnc(value, key)\n        else:\n            odd_fnc(value, key)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_index = 0\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]) == True:\n            even_index += 1\n        else:\n            even_index = 0\n    return even_index\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            if len(item) % 2 == 0:\n                result.append(item[0])\n            else:\n                result.append(item[1])\n        else:\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"** Bases: \",b)\n    print(\"** Sides: \",s)\n    print(\"** Base edge: \",b//2)\n    print(\"** Height: \",s//2)\n    print(\"** Surface area: \", (b**2)//2)\n    print(\"** volume: \", (b**2)//2)\n    print(\"** Area of the pyramid: \", (b**2)//2*s)\n    print(\"** Volume of the pyramid: \", ((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"** Area of the pyramid is: \",(b**2)//2*s)\n    print(\"** Volume of the pyramid is: \",((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Area of the pyramid is: \",(b**2)//2*s)\n    print(\"** Volume of the pyramid is: \",((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"** Base edge: \",b//2)\n    print(\"** Height: \",s//2)\n    print(\"** Surface area: \", (b**2)//2)\n    print(\"** Volume of the pyramid is: \", ((b**2)//2)*s)\n    print(\"** Area of the pyramid is: \", (b**2)//2*s)\n    print(\"** Volume of the pyramid is: \", ((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Area of the pyramid is: \",(b**2)//2*s)\n    print(\"** Volume of the pyramid is: \",((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"** Base edge: \",b//2)\n    print(\"** Height: \",s//2)\n    print(\"** Surface area: \", (b**2)//2)\n    print(\"** Volume of the pyramid is: \", ((b**2)//2)*s)\n    print(\"** Area of the pyramid is: \", (b**2)//2*s)\n    print(\"** Volume of the pyramid is: \", ((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Area of the pyramid is: \",(b**2)//2*s)\n    print(\"** Volume of the pyramid is: \",((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"** Base edge: \",b//2)\n    print(\"** Height: \",s//2)\n    print(\"** Surface area: \", (b**2)//2)\n    print(\"** Volume of the pyramid is: \", ((b**2)//2)*s)\n    print(\"** Area of the pyramid is: \", (b**2)//2*s)\n    print(\"** Volume of the pyramid is: \", ((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Area of the pyramid is: \",(b**2)//2*s)\n    print(\"** Volume of the pyramid is: \",((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"** Base edge: \",b//2)\n    print(\"** Height: \",s//2)\n    print(\"** Surface area: \", (b**2)//2)\n    print(\"** Volume of the pyramid is: \", ((b**2)//2)*s)\n    print(\"** Area of the pyramid is: \", (b**2)//2*s)\n    print(\"** Volume of the pyramid is: \", ((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Area of the pyramid is: \",(b**2)//2*s)\n    print(\"** Volume of the pyramid is: \",((b**2)//2)*s)\n    print(\"** Surface area of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**2)//2*s)\n    print(\"** Volume of a square pyramid with base edge of \",b//2,\" and height of \",s//2,\" is: \",(b**"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = b * (b - 1)\n    S = (A* (A - 1)) / 2\n    return(S)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # remove spaces around string\n    s = s.replace(' ','')\n    # split into list of strings\n    s = s.split(' ')\n    # get the edge length\n    e = len(s[0])\n    # get the height\n    h = len(s)\n    # calculate area\n    area = ((e - 1) * (h - 1) * b) / 2\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4/3)*s**2"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (b*2)/(s*s)\n    print(\"The surface area of the pyramid with base edge\", b, \"and height\", s, \"is\", a)\n    return a\nprint(surface_Area(1,2))\nprint(surface_Area(1,4))\nprint(surface_Area(5,7))\nprint(surface_Area(5,10))\nprint(surface_Area(10,11))\nprint(surface_Area(10,12))\nprint(surface_Area(10,14))\nprint(surface_Area(6,8))\nprint(surface_Area(7,6))\nprint(surface_Area(9,6))\nprint(surface_Area(9,10))"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    Area = 0\n    b = int(b)\n    s = int(s)\n    for i in range(s,0,-1):\n        Area += i**3\n        b = i\n    return Area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = int(b)\n    l = int(s)\n    l = l/2\n    r = a\n    area = 0\n    if a > 2*l:\n        while r<=l:\n            area = area + 4*(r**2)\n            r = r + 0.01\n    else:\n        area = 4*(a**2)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Write your code here\n    if b==1:\n        return 0\n    if s>=b:\n        return (2*s*(b-1))\n    if s<=b:\n        return (s*(b-1))\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1== {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        for j in dict1:\n            if i == j:\n                return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    \n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        raise ValueError('Number should be positive.')\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 6\n    if num == 4:\n        return 24\n    if num == 5:\n        return 120\n    if num == 6:\n        return 720\n    if num == 7:\n        return 2880\n    if num == 8:\n        return 2480\n    if num == 9:\n        return 6048\n    if num == 10:\n        return 362880\n    if num == 11:\n        return 18144\n    if num == 12:\n        return 2**31\n    if num == 13:\n        return 2**52\n    if num == 14:\n        return 2**60\n    if num == 15:\n        return 2**80\n    if num == 16:\n        return 2**96\n    if num == 17:\n        return 2**128\n    if num == 18:\n        return 2**144\n    if num == 19:\n        return 2**192\n    if num == 20:\n        return 2**256\n    if num == 21:\n        return 2**320\n    if num == 22:\n        return 2**512\n    if num == 23:\n        return 2**640\n    if num == 24:\n        return 2**720\n    if num == 25:\n        return 2**8192\n    if num == 26:\n        return 2**16384\n    if num == 27:\n        return 2**32768\n    if num == 28:\n        return 2**512\n    if num == 29:\n        return 2**768\n    if num == 30:\n        return 2**1920\n    if num == 31:\n        return 2**2**21\n    if num == 32:\n        return 2**11\n    if num == 33:\n        return 2**21\n    if num == 34:\n        return 2**11\n    if num == 35:\n        return 2**45\n    if num == 36:\n        return 2**125\n    if num == 37:\n        return 2**375\n    if num == 38:\n        return 2**1175\n    if num == 39:\n        return 2**375\n    if num == 40:\n        return 2**12765\n    if num == 41:\n        return 2**25\n    if num == 42:\n        return 2**127\n    if num == 43:\n        return 2**5625\n    if num == 44:\n        return 2**50625\n    if num == 45:\n        return 2**4875\n    if num == 46:\n        return 2**6075\n    if num == 47:\n        return 2**51475\n    if num == 48:\n        return 2**4625\n    if num == 49:\n        return 2**1024\n    if num == 50:\n        return 2**2325\n    if num == 51:\n        return 2**1625\n    if num == 52:\n        return 2**1225\n    if num == 53:\n        return 2**1024\n    if num == 54:\n        return 2**1175\n    if num == 55:\n        return 2**3525\n    if num == 56:\n        return 2**25\n    if num == 57:\n        return 2**125\n    if num == 58:\n        return 2**1024\n    if num == 59:\n        return 2**2**55\n    if num == 60:\n        return 2**1\n    if num == 61:\n        return 2**1\n    if num == 62:\n        return 2**1\n    if num == 63:\n        return 2**1\n    if num == 64:\n        return 2**1\n    if num == 65:\n        return 2**1\n    if num == 66:\n        return 2**1\n    if num == 67:\n        return 2**1\n    if num == 68:\n        return 2**1\n    if num == 69:\n        return 2**1\n    if num == 70:\n        return 2**1\n    if num == 71:\n        return 2**1\n    if num == 72:\n        return 2**1\n    if num == 73:\n        return 2**1\n    if num == 74:\n        return 2**1\n    if num == 75:\n        return 2**1\n    if num == 76:\n        return 2**1\n    if num == 77:\n        return 2**1\n    if num == 78:\n        return 2**1\n    if num == 79:\n        return 2**1\n    if num == 80:\n        return 2**1\n    if num == 81:\n        return 2**1\n    if num == 82:\n        return 2**1\n    if num == 83:\n        return 2**1\n    if num == 84:\n        return 2**1\n    if num == 85:\n        return 2**1\n    if num == 86:\n        return 2**1\n    if num == 87:\n        return 2**1\n    if num == 88:\n        return 2**1\n    if num == 89:\n        return 2**1\n    if num == 90:\n        return 2**1\n    if num == 91:\n        return 2**1\n    if num == 92:\n        return 2**1\n    if num == 93:\n        return 2**1\n    if num == 94:\n        return 2**1\n    if num == 95:\n        return 2**1\n    if num == 96:\n        return 2**1\n    if num == 97:\n        return 2**1\n    if num == 98:\n        return 2**1\n    if num == 99:\n        return 2**1\n    if num == 100:\n        return 2**1\n    if num == 101:\n        return 2**1\n    if num == 102:\n        return 2**1\n    if num == 103:\n        return 2**1\n    if num == 104:\n        return 2**1\n    if num == 105:\n        return 2**1\n    if num == 106:\n        return 2**1\n    if num == 107:\n        return 2**1\n    if num == 108:\n        return 2**1\n    if num == 109:\n        return 2**1\n    if num == 110:\n        return 2**1\n    if num == 111:\n        return 2**1\n    if num == 112:\n        return 2**1\n    if num == 113:\n        return 2**1\n    if num == 114:\n        return 2**1\n    if num == 115:\n        return 2**1\n    if num == 116:\n        return 2**1\n    if num == 117:\n        return 2**1\n    if num == 118:\n        return 2**1\n    if num == 119:\n        return 2**1\n    if num == 120:\n        return 2**1\n    if num == 121:\n        return 2**1\n    if num == 122:\n        return 2**1\n    if num == 123:\n        return 2**1\n    if num == 124:\n        return 2**1\n    if num == 125:\n        return 2**1\n    if num == 126:\n        return 2**1\n    if num == 127:\n        return 2**1\n    if num == 128:\n        return 2**1\n    if num == 129:\n        return 2**1\n    if num == 130:\n        return 2**1\n    if num == 131:\n        return 2**1\n    if num == 132:\n        return 2**1\n    if num == 133:\n        return 2**1\n    if num == 134:\n        return 2**1\n    if num == 135:\n        return 2**1\n    if num == 136:\n        return 2**1\n    if num == 137:\n        return 2**1\n    if num == 138:\n        return 2**1\n    if num == 139:\n        return 2**1\n    if num == 140:\n        return 2**1\n    if num == 141:\n        return 2**1\n    if num == 142:\n        return 2**1\n    if num == 143:\n        return 2**1\n    if num == 144:\n        return 2**1\n    if num == 145:\n        return 2**1\n    if num == 146:\n        return 2**1\n    if num == 147:\n        return 2**1\n    if num == 148:\n        return 2**1\n    if num == 149:\n        return 2**1\n    if num == 150:\n        return 2**1\n    if num == 151:\n        return 2**1\n    if num == 152:\n        return 2**1\n    if num == 153:\n        return 2**1\n    if num == 154"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = 0\n    count = 1\n    for i in range(num, 0, -1):\n        result = i*result\n        count = count + 1\n    return count\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def counter(num):\n        '''\n        Computes the count of the nth catalan number.\n        '''\n        cat_dict = {\n            1: 1,\n            2: 1\n        }\n        if num <= 1:\n            return cat_dict[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 1 or num == 0:\n        return num\n    else:\n        return (catalan_number(num-1) + catalan_number(num-2))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print(f\"Please enter a positive number\")\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    for i in range(1,num+1):\n        c = num*i\n        yield c\n        \ndef nth_catalan(n):\n    '''\n    Return the nth catalan number.\n    '''\n    return sum(catalan_number(i+1) for i in range(n))\n    \ndef nth_catalan_recursive(n):\n    '''\n    Return the nth catalan number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    return nth_catalan_recursive(n-2) + nth_catalan_recursive(n-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = 0\n    if(num == 0):\n        return 0\n    if(num == 1):\n        return 1\n    if(num == 2):\n        return 1\n    if(num == 3):\n        return 1\n    if(num == 4):\n        return 2\n    if(num == 5):\n        return 2\n    if(num == 6):\n        return 3\n    if(num == 7):\n        return 4\n    if(num == 8):\n        return 5\n    if(num == 9):\n        return 6\n    if(num == 10):\n        return 7\n    if(num == 11):\n        return 8\n    if(num == 12):\n        return 9\n    if(num == 13):\n        return 10\n    if(num == 14):\n        return 11\n    if(num == 15):\n        return 12\n    if(num == 16):\n        return 13\n    if(num == 17):\n        return 14\n    if(num == 18):\n        return 15\n    if(num == 19):\n        return 16\n    if(num == 20):\n        return 17\n    if(num == 21):\n        return 18\n    if(num == 22):\n        return 19\n    if(num == 23):\n        return 20\n    if(num == 24):\n        return 21\n    if(num == 25):\n        return 22\n    if(num == 26):\n        return 23\n    if(num == 27):\n        return 24\n    if(num == 28):\n        return 25\n    if(num == 29):\n        return 26\n    if(num == 30):\n        return 27\n    if(num == 31):\n        return 28\n    if(num == 32):\n        return 29\n    if(num == 33):\n        return 30\n    if(num == 34):\n        return 31\n    if(num == 35):\n        return 32\n    if(num == 36):\n        return 33\n    if(num == 37):\n        return 34\n    if(num == 38):\n        return 35\n    if(num == 39):\n        return 36\n    if(num == 40):\n        return 37\n    if(num == 41):\n        return 38\n    if(num == 42):\n        return 39\n    if(num == 43):\n        return 40\n    if(num == 44):\n        return 41\n    if(num == 45):\n        return 42\n    if(num == 46):\n        return 43\n    if(num == 47):\n        return 44\n    if(num == 48):\n        return 45\n    if(num == 49):\n        return 46\n    if(num == 50):\n        return 47\n    if(num == 51):\n        return 48\n    if(num == 52):\n        return 49\n    if(num == 53):\n        return 50\n    if(num == 54):\n        return 51\n    if(num == 55):\n        return 52\n    if(num == 56):\n        return 53\n    if(num == 57):\n        return 54\n    if(num == 58):\n        return 55\n    if(num == 59):\n        return 56\n    if(num == 60):\n        return 57\n    if(num == 61):\n        return 58\n    if(num == 62):\n        return 59\n    if(num == 63):\n        return 60\n    if(num == 64):\n        return 61\n    if(num == 65):\n        return 62\n    if(num == 66):\n        return 63\n    if(num == 67):\n        return 64\n    if(num == 68):\n        return 65\n    if(num == 69):\n        return 66\n    if(num == 70):\n        return 67\n    if(num == 71):\n        return 68\n    if(num == 72):\n        return 69\n    if(num == 73):\n        return 70\n    if(num == 74):\n        return 71\n    if(num == 75):\n        return 72\n    if(num == 76):\n        return 73\n    if(num == 77):\n        return 74\n    if(num == 78):\n        return 75\n    if(num == 79):\n        return 76\n    if(num == 80):\n        return 77\n    if(num == 81):\n        return 78\n    if(num == 82):\n        return 79\n    if(num == 83):\n        return 80\n    if(num == 84):\n        return 81\n    if(num == 85):\n        return 82\n    if(num == 86):\n        return 83\n    if(num == 87):\n        return 84\n    if(num == 88):\n        return 85\n    if(num == 89):\n        return 86\n    if(num == 90):\n        return 87\n    if(num == 91):\n        return 88\n    if(num == 92):\n        return 89\n    if(num == 93):\n        return 90\n    if(num == 94):\n        return 91\n    if(num == 95):\n        return 92\n    if(num == 96):\n        return 93\n    if(num == 97):\n        return 94\n    if(num == 98):\n        return 95\n    if(num == 99):\n        return 96\n    if(num == 100):\n        return 97\n    if(num == 101):\n        return 98\n    if(num == 102):\n        return 99\n    if(num == 103):\n        return 100\n    if(num == 104):\n        return 101\n    if(num == 105):\n        return 102\n    if(num == 106):\n        return 103\n    if(num == 107):\n        return 104\n    if(num == 108):\n        return 105\n    if(num == 109):\n        return 106\n    if(num == 110):\n        return 107\n    if(num == 111):\n        return 108\n    if(num == 112):\n        return 109\n    if(num == 113):\n        return 110\n    if(num == 114):\n        return 111\n    if(num == 115):\n        return 112\n    if(num == 116):\n        return 113\n    if(num == 117):\n        return 114\n    if(num == 118):\n        return 115\n    if(num == 119):\n        return 116\n    if(num == 120):\n        return 117\n    if(num == 121):\n        return 118\n    if(num == 122):\n        return 119\n    if(num == 123):\n        return 120\n    if(num == 124):\n        return 121\n    if(num == 125):\n        return 122\n    if(num == 126):\n        return 123\n    if(num == 127):\n        return 124\n    if(num == 128):\n        return 125\n    if(num == 129):\n        return 126\n    if(num == 130):\n        return 127\n    if(num == 131):\n        return 128\n    if(num == 132):\n        return 129\n    if(num == 133):\n        return 130\n    if(num == 134):\n        return 131\n    if(num == 135):\n        return 132\n    if(num == 136):\n        return 133\n    if(num == 137):\n        return 134\n    if(num == 138):\n        return 135\n    if(num == 139):\n        return 136\n    if(num == 140):\n        return 137\n    if(num == 141):\n        return 138\n    if(num == 142):\n        return 139\n    if(num == 143):\n        return 140\n    if(num == 144):\n        return 141\n    if(num == 145):\n        return 142\n    if(num == 146):\n        return 143\n    if(num == 147):\n        return 144\n    if(num == 148):\n        return 145\n    if(num == 149):\n        return 146\n    if(num == 150):\n        return 147\n    if(num == 151):\n        return 148\n    if(num == 152):\n        return 149\n    if(num == 153):\n        return 150\n    if(num == 154):\n        return 151\n    if(num == 155):\n        return 152\n    if(num == 156):\n        return 153\n    if(num == 157):\n        return 154\n    if(num == 158):\n        return 155\n    if(num == 159):\n        return 156\n    if(num == 160):\n        return 157\n    if(num == 161):\n        return 158\n    if(num == 162):\n        return 159\n    if(num == 163):\n        return 160\n    if(num == 164):\n        return 161\n    if(num == 165):\n        return 162\n    if(num == 166):\n        return 163\n    if(num == 167):\n    "
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    from math import factorial\n    \n    fact = factorial(num)\n    \n    return fact"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 4\n    elif num == 3:\n        return 8\n    elif num == 4:\n        return 16\n    elif num == 5:\n        return 25\n    elif num == 6:\n        return 36\n    elif num == 7:\n        return 49\n    elif num == 8:\n        return 64\n    elif num == 9:\n        return 81\n    elif num == 10:\n        return 100\n    elif num == 11:\n        return 121\n    elif num == 12:\n        return 144\n    elif num == 13:\n        return 169\n    elif num == 14:\n        return 196\n    elif num == 15:\n        return 225\n    elif num == 16:\n        return 256\n    elif num == 17:\n        return 275\n    elif num == 18:\n        return 304\n    elif num == 19:\n        return 331\n    elif num == 20:\n        return 336\n    elif num == 21:\n        return 352\n    elif num == 22:\n        return 377\n    elif num == 23:\n        return 404\n    elif num == 24:\n        return 454\n    elif num == 25:\n        return 474\n    elif num == 26:\n        return 492\n    elif num == 27:\n        return 504\n    elif num == 28:\n        return 531\n    elif num == 29:\n        return 546\n    elif num == 30:\n        return 571\n    elif num == 31:\n        return 616\n    elif num == 32:\n        return 652\n    elif num == 33:\n        return 681\n    elif num == 34:\n        return 704\n    elif num == 35:\n        return 724\n    elif num == 36:\n        return 754\n    elif num == 37:\n        return 784\n    elif num == 38:\n        return 801\n    elif num == 39:\n        return 824\n    elif num == 40:\n        return 864\n    elif num == 41:\n        return 912\n    elif num == 42:\n        return 936\n    elif num == 43:\n        return 961\n    elif num == 44:\n        return 986\n    elif num == 45:\n        return 1041\n    elif num == 46:\n        return 1063\n    elif num == 47:\n        return 1079\n    elif num == 48:\n        return 1135\n    elif num == 49:\n        return 1156\n    elif num == 50:\n        return 1201\n    elif num == 51:\n        return 1224\n    elif num == 52:\n        return 1263\n    elif num == 53:\n        return 1281\n    elif num == 54:\n        return 1315\n    elif num == 55:\n        return 1346\n    elif num == 56:\n        return 1371\n    elif num == 57:\n        return 1409\n    elif num == 58:\n        return 1433\n    elif num == 59:\n        return 1449\n    elif num == 60:\n        return 1466\n    elif num == 61:\n        return 1511\n    elif num == 62:\n        return 1544\n    elif num == 63:\n        return 1573\n    elif num == 64:\n        return 1605\n    elif num == 65:\n        return 1626\n    elif num == 66:\n        return 1653\n    elif num == 67:\n        return 1679\n    elif num == 68:\n        return 1735\n    elif num == 69:\n        return 1756\n    elif num == 70:\n        return 1771\n    elif num == 71:\n        return 1815\n    elif num == 72:\n        return 1846\n    elif num == 73:\n        return 1861\n    elif num == 74:\n        return 1900\n    elif num == 75:\n        return 1995\n    elif num == 76:\n        return 2037\n    elif num == 77:\n        return 2056\n    elif num == 78:\n        return 2071\n    elif num == 79:\n        return 2105\n    elif num == 80:\n        return 2146\n    elif num == 81:\n        return 2183\n    elif num == 82:\n        return 2249\n    elif num == 83:\n        return 2253\n    elif num == 84:\n        return 2644\n    elif num == 85:\n        return 2281\n    elif num == 86:\n        return 2305\n    elif num == 87:\n        return 2326\n    elif num == 88:\n        return 2353\n    elif num == 89:\n        return 2379\n    elif num == 90:\n        return 2435\n    elif num == 91:\n        return 2456\n    elif num == 92:\n        return 2471\n    elif num == 93:\n        return 2515\n    elif num == 94:\n        return 2546\n    elif num == 95:\n        return 2571\n    elif num == 96:\n        return 2613\n    elif num == 97:\n        return 2648\n    elif num == 98:\n        return 2663\n    elif num == 99:\n        return 2680\n    elif num == 100:\n        return 2735\n    elif num == 101:\n        return 2756\n    elif num == 102:\n        return 2771\n    elif num == 103:\n        return 2801\n    elif num == 104:\n        return 2824\n    elif num == 105:\n        return 2863\n    elif num == 106:\n        return 2881\n    elif num == 107:\n        return 2915\n    elif num == 108:\n        return 2946\n    elif num == 109:\n        return 2971\n    elif num == 110:\n        return 3023\n    elif num == 111:\n        return 3050\n    elif num == 112:\n        return 3071\n    elif num == 113:\n        return 3135\n    elif num == 114:\n        return 3146\n    elif num == 115:\n        return 3183\n    elif num == 116:\n        return 3249\n    elif num == 117:\n        return 3274\n    elif num == 118:\n        return 3286\n    elif num == 119:\n        return 3313\n    elif num == 120:\n        return 3344\n    elif num == 121:\n        return 3373\n    elif num == 122:\n        return 3413\n    elif num == 123:\n        return 3445\n    elif num == 124:\n        return 3466\n    elif num == 125:\n        return 3501\n    elif num == 126:\n        return 3524\n    elif num == 127:\n        return 3563\n    elif num == 128:\n        return 3581\n    elif num == 129:\n        return 3601\n    elif num == 130:\n        return 3624\n    elif num == 131:\n        return 3663\n    elif num == 132:\n        return 3701\n    elif num == 133:\n        return 3724\n    elif num == 134:\n        return 3763\n    elif num == 135:\n        return 3803\n    elif num == 136:\n        return 3824\n    elif num == 137:\n        return 3863\n    elif num == 138:\n        return 3903\n    elif num == 139:\n        return 3926\n    elif num == 140:\n        return 3963\n    elif num == 141:\n        return 4021\n    elif num == 142:\n        return 4054\n    elif num == 143:\n        return 4093\n    elif num == 144:\n        return 4139\n    elif num == 145:\n        return 4164\n    elif num == 146:\n        return 4183\n    elif num == 147:\n        return 4249\n    elif num == 148:\n        return 4266\n    elif num == 149:\n        return 4321\n    elif num == 150:\n        return 4346\n    elif num == 151:\n        return 4371\n    elif num == 152:\n        return 4401\n    elif num == 153:\n        return 4424\n    elif num == 154:\n        return 4453\n    elif num == 155:\n        return 4489\n    elif num == 156:\n        return 4524\n    elif num == 157:\n        return 4563\n    elif nu"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if len(text) == 0:\n        return\n    if text[-1] == '.':\n        #print('next')\n        return\n    if text[-1]!= '.':\n        #print('bad')\n        return\n    if text[-2].isalpha():\n        #print('second')\n        return\n    adverbs = []\n    for i in range(len(text) - 2):\n        #print('before')\n        if text[i].isalpha():\n            #print('alphabet')\n            adverbs.append(text[i])\n        else:\n            if text[i].isalpha():\n                #print('special')\n                adverbs.append(text[i])\n    #print('after')\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb = ''\n    positions = []\n    for index, char in enumerate(text):\n        if char.lower() == 'ly':\n            adverb = char\n            positions.append(index)\n    return adverb, positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create regex and find all adverbs\n    # returns list of tuples with first index being the position in the text and second being the adverb\n    adverbs = re.findall(r'(.+)(ly|ly|ly|ly)',text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    list_of_words = text.split(\" \")\n    adverbs = []\n    for i in list_of_words:\n        if 'ly' in i:\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] == 'ly':\n            if i == len(text)-1:\n                return False\n            for j in range(i+1, len(text)):\n                if text[j] == 'ly':\n                    return (i, j)\n    return False\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #remove words\n    text = re.sub(r\"\\w+[0-9]*$\", \"\", text)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos_of_adverb = -1\n    for i,word in enumerate(text):\n        if word[-1] in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"] and word[-2:].lower()==\"ly\":\n            pos_of_adverb = i\n    return pos_of_adverb\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    res = re.findall(r\"[a-z].*ly$\", text)\n    return res\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = 0\n    if re.search(\"ly\", text):\n        while re.search(\"ly\", text, pos):\n            pos = text.find('ly', pos) + 4\n        return text[pos:]\n    return ''\ndef find_pos(text, lst):\n    '''\n    Given a string, return a list of positions where the first element in the list is a ly.\n    '''\n    for pos in range(len(lst)):\n        if lst[pos] == \"ly\":\n            return pos\n    return []\ndef find_nouns(text):\n    '''\n    Given a string, return a list of possible nouns in the text.\n    '''\n    pos = 0\n    lst = re.split(\"ly\", text)\n    while re.search(\"ly\", lst[pos]):\n        pos = lst[pos].find('ly') + 6\n    nouns = re.split('ly', lst[pos])\n    return nouns\ndef find_adjectives(text):\n    '''\n    Given a string, return a list of possible adjectives in the text.\n    '''\n    adjectives = re.findall(r\"(?:[^.]*\\.)(?:[^.]*\\.)\", text)\n    return adjectives\ndef replace_and_split(text):\n    '''\n    Given a string, return a list of words in the text, but each word is split and only the last part is returned.\n    '''\n    list_of_words = re.split(\"[.?!]\", text)\n    new_list = []\n    for word in list_of_words:\n        if len(word) == 1:\n            new_list.append(word)\n        else:\n            new_list.append(word[:-1])\n    return new_list\ndef replace_nouns(text):\n    '''\n    Given a string, return a string that has the words that are present in the nouns and the last part of the nouns replaced with a last part of the nouns.\n    '''\n    list_of_nouns = re.split(\"[.?!]\", text)\n    for index in range(len(list_of_nouns)):\n        if len(list_of_nouns[index]) == 1:\n            list_of_nouns[index] = list_of_nouns[index][:-1]\n    new_text = \" \".join(list_of_nouns)\n    return new_text\ndef replace_adjectives(text):\n    '''\n    Given a string, return a string that has the words that are present in the adjectives and the last part of the adjectives replaced with a last part of the adjectives.\n    '''\n    list_of_adjectives = re.split(\"[.?!]\", text)\n    for index in range(len(list_of_adjectives)):\n        if len(list_of_adjectives[index]) == 1:\n            list_of_adjectives[index] = list_of_adjectives[index][:-1]\n    new_text = \" \".join(list_of_adjectives)\n    return new_text\ndef remove_stopwords(text):\n    '''\n    Given a string, remove all stopwords and return the text after removing them.\n    '''\n    stopwords = list(set(stopwords.words(\"english\")))\n    text = \" \".join([word for word in text.split() if word not in stopwords])\n    return text\ndef remove_punctuation(text):\n    '''\n    Given a string, remove all punctuation marks and return the text after removing them.\n    '''\n    punctuations = \"'''\"\n    punctuation_regex = \"\".join(re.escape(p) for p in punctuations)\n    text = \" \".join([word for word in text.split() if re.search(punctuation_regex, word)])\n    return text\ndef preprocess(text):\n    '''\n    Given a string, replace all adverbs with ly and append the current text to the end.\n    '''\n    text = text.replace(find_adverbs(text), 'ly')\n    text = re.sub('ly', 'ly', text)\n    text = re.sub('ly', 'ly', text)\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace('ly', 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace('ly', 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace('ly', 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replace(\"ly\", 'ly')\n    text = text.replac"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    s = 0\n    for i in range(n):\n        s += items[i]\n        heapq.heappush(heap,s)\n    if heap:\n        m = heapq.nlargest(n,heap)\n        return m\n    else:\n        return None\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = []\n    for i in items:\n        heapq.heappush(heap, i[1])\n    \n    for _ in range(n):\n        i = heapq.heappop(heap)\n        print(i)\n    \ndef make_dataset(n,m):\n    '''\n    Write a function to generate a dataset, \n    that can be used as a pruning schedule.\n    '''\n    \n    items = []\n    \n    for i in range(n):\n        items.append([random.randint(1,m),random.randint(1,m)])\n    \n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    # loop through the items and append them to the heap\n    for item in items:\n        heapq.heappush(heap,item[1])\n    # if the heap has a length of n, return that length\n    if len(heap) == n:\n        return heap[0]\n    # if the heap has a length of 0, return -1\n    if len(heap) == 0:\n        return -1\n    # if the heap has a length of 1, return the first element\n    if len(heap) == 1:\n        return heap[0]\n    # if the heap has a length of n, return -2\n    elif len(heap) == n:\n        return -2\n    # if the heap has a length of 2, return the second element\n    elif len(heap) == n/2:\n        return heap[0]\n    # if the heap has a length of 3, return the third element\n    elif len(heap) == n*2:\n        return heap[0]\n    # if the heap has a length of 4, return the fourth element\n    elif len(heap) == n*3:\n        return heap[0]\n    # if the heap has a length of 5, return the fifth element\n    elif len(heap) == n*4:\n        return heap[0]\n    # if the heap has a length of 6, return the sixth element\n    elif len(heap) == n*5:\n        return heap[0]\n    # if the heap has a length of 7, return the seventh element\n    elif len(heap) == n*6:\n        return heap[0]\n    # if the heap has a length of 8, return the eighth element\n    elif len(heap) == n*7:\n        return heap[0]\n    # if the heap has a length of 9, return the ninth element\n    elif len(heap) == n*8:\n        return heap[0]\n    # if the heap has a length of 10, return the tenth element\n    elif len(heap) == n*9:\n        return heap[0]\n    # if the heap has a length of 11, return the thirteenth element\n    elif len(heap) == n*10:\n        return heap[0]\n    # if the heap has a length of 12, return the fourteenth element\n    elif len(heap) == n*11:\n        return heap[0]\n    # if the heap has a length of 13, return the fiveteenth element\n    elif len(heap) == n*12:\n        return heap[0]\n    # if the heap has a length of 14, return the sixteenth element\n    elif len(heap) == n*13:\n        return heap[0]\n    # if the heap has a length of 15, return the seventeenth element\n    elif len(heap) == n*14:\n        return heap[0]\n    # if the heap has a length of 16, return the eighteenth element\n    elif len(heap) == n*15:\n        return heap[0]\n    # if the heap has a length of 17, return the nineteenth element\n    elif len(heap) == n*16:\n        return heap[0]\n    # if the heap has a length of 18, return the twentieth element\n    elif len(heap) == n*17:\n        return heap[0]\n    # if the heap has a length of 19, return the twentieth element\n    elif len(heap) == n*18:\n        return heap[0]\n    # if the heap has a length of 20, return the nineteenth element\n    elif len(heap) == n*19:\n        return heap[0]\n    # if the heap has a length of 21, return the twentieth element\n    elif len(heap) == n*20:\n        return heap[0]\n    # if the heap has a length of 22, return the twentieth element\n    elif len(heap) == n*21:\n        return heap[0]\n    # if the heap has a length of 23, return the twentieth element\n    elif len(heap) == n*22:\n        return heap[0]\n    # if the heap has a length of 24, return the twentieth element\n    elif len(heap) == n*23:\n        return heap[0]\n    # if the heap has a length of 25, return the twentieth element\n    elif len(heap) == n*24:\n        return heap[0]\n    # if the heap has a length of 26, return the twentieth element\n    elif len(heap) == n*25:\n        return heap[0]\n    # if the heap has a length of 27, return the twentieth element\n    elif len(heap) == n*26:\n        return heap[0]\n    # if the heap has a length of 28, return the twentieth element\n    elif len(heap) == n*27:\n        return heap[0]\n    # if the heap has a length of 29, return the twentieth element\n    elif len(heap) == n*28:\n        return heap[0]\n    # if the heap has a length of 30, return the twentieth element\n    elif len(heap) == n*29:\n        return heap[0]\n    # if the heap has a length of 31, return the twentieth element\n    elif len(heap) == n*30:\n        return heap[0]\n    # if the heap has a length of 32, return the twentieth element\n    elif len(heap) == n*31:\n        return heap[0]\n    # if the heap has a length of 33, return the twentieth element\n    elif len(heap) == n*32:\n        return heap[0]\n    # if the heap has a length of 34, return the twentieth element\n    elif len(heap) == n*33:\n        return heap[0]\n    # if the heap has a length of 35, return the twentieth element\n    elif len(heap) == n*34:\n        return heap[0]\n    # if the heap has a length of 36, return the twentieth element\n    elif len(heap) == n*35:\n        return heap[0]\n    # if the heap has a length of 37, return the twentieth element\n    elif len(heap) == n*36:\n        return heap[0]\n    # if the heap has a length of 38, return the twentieth element\n    elif len(heap) == n*37:\n        return heap[0]\n    # if the heap has a length of 39, return the twentieth element\n    elif len(heap) == n*38:\n        return heap[0]\n    # if the heap has a length of 40, return the twentieth element\n    elif len(heap) == n*39:\n        return heap[0]\n    # if the heap has a length of 41, return the twentieth element\n    elif len(heap) == n*40:\n        return heap[0]\n    # if the heap has a length of 42, return the twentieth element\n    elif len(heap) == n*41:\n        return heap[0]\n    # if the heap has a length of 43, return the twentieth element\n    elif len(heap) == n*42:\n        return heap[0]\n    # if the heap has a length of 44, return the twentieth element\n    elif len(heap) == n*43:\n        return heap[0]\n    # if the heap has a length of 45, return the twentieth element\n    elif len(heap) == n*44:\n        return heap[0]\n    # if the heap has a length of 46, return the twentieth element\n    elif len(heap) == n*45:\n        return heap[0]\n    # if the heap has a length of 47, return the twentieth element\n    elif len(heap) == n*46:\n        return heap[0]\n    # if the heap has a length of 48, return the twentieth element\n    elif len(heap) == n*47:\n        return heap[0]\n    # if the heap has a length of 49, return the twentieth element\n    elif len(heap) == n*48:\n        return heap[0]\n    # if the heap has a length of 50, return the twentieth element\n    elif len(heap) == n*49:\n        return heap[0]\n    # if the heap has a length of 51, return the twentieth element"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(items)):\n        heapq.heappush(heap, items[i][1])\n    for i in range(n-1):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef least_expensive_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v2(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v3(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v4(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v5(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v6(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v7(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v8(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v9(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\ndef sort_and_filter_v10(items,n):\n    '''\n    Sort an array of items in descending order and return only the n most expensive and n least expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    heapq.heappush(heap,0)\n    result = []\n    result_dict = {}\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        result_dict[heapq.heappop(heap)] = heapq.heappop(heap)\n    return result,result_dict\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[1])\n    answer = []\n    for i in range(n):\n        answer.append(heapq.heappop(heap))\n    return answer"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Calculate the total count of each item\n    total_count = []\n    for i in items:\n        total_count.append(items.count(i))\n    #Return the n most expensive items\n    return heapq.nlargest(n,total_count,total_count.sort)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heap\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension3(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension4(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension5(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension6(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension7(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension8(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension9(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension10(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension11(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension12(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension13(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension14(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension15(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension16(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension17(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension18(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension19(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i][1],items[i][0]))\n    return heapq.nlargest(n,heap)\ndef list_comprehension20(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, "
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1]/item[0])\n    return [heapq.nlargest(n,heap)[-1][0],heapq.nsmallest(n,heap)[0][0]]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items=sorted(items,reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i = 0\n    for x in l:\n        i+=1\n        if i == n:\n            l[i-1] = l[i-1] + x\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = []\n    b = []\n    c = []\n    for i in range(len(l)):\n        if i % n == 0:\n            a.append(l[i])\n        elif i % n!= 0:\n            b.append(l[i])\n        else:\n            c.append(l[i])\n    return a, b, c\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0,len(l),n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return []\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(len(l)):\n        l[i] = l[i].rstrip()\n        l[i] = l[i].lstrip()\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_len = len(l)\n    if l_len <= n:\n        return l\n    return [l[:n]] + split_Arr(l[n:], n)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return\n    return [l[n]] + split_Arr(l, n+1)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n    #return list(tup)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    lst = []\n    for i in listx:\n        lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx)!= 0:\n        return list(listx[0])\n    else:\n        return []\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for el in listx:\n        t += (el, )\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = tuple(listx)\n    return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(\"A tuple is a collection of items. \")\n    print(\"Each item should be a tuple.\")\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n    \ndef list_range(*args):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(range(*args))\n    \n    \n    \ndef reverse(listy):\n    '''\n    Write a function to reverse a list.\n    '''\n    return listy[::-1]\n    \n    \ndef is_odd(n):\n    '''\n    Write a function to check if a number is odd.\n    '''\n    return n%2 == 1\n    \n    \ndef read_file():\n    '''\n    Write a function to read a file and return its content as a list.\n    '''\n    return list(open('input.txt').read().split())\n    \n    \ndef read_file2(file_name):\n    '''\n    Write a function to read a file and return its content as a list.\n    '''\n    return list(open(file_name).read().split())\n    \n    \ndef read_int():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int2():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int3():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int4():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int5():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int6():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int7():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int8():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int9():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int10():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int11():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int12():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int13():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int14():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int15():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int16():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int17():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int18():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int19():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int20():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int21():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int22():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int23():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int24():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int25():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int26():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int27():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int28():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int29():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int30():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int31():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int32():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int33():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int34():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int35():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int36():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int37():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int38():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int39():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int40():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int41():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int42():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int43():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int44():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int45():\n    '''\n    Write a function to read an integer and return it.\n    '''\n    return int(input())\n    \n    \ndef read_int46():\n    '''\n    Write a function to read an integer and return i"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val - min_val\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    s = sum(nums)\n    if s == 0:\n        return 0\n    elif s < 0:\n        return largest-smallest\n    else:\n        return largest-smallest-smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    sorted_nums = sorted(nums)\n    max_val = sorted_nums[-1]\n    min_val = sorted_nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return nums[0] - nums[1]\n    else:\n        return max(nums[0], nums[1]) - min(nums[0], nums[1])\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    nums.sort()\n    #print(nums)\n    return (nums[-1] - nums[0]) - (largest - smallest)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return (max(nums) - min(nums)) // 2\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    diff = abs(largest - smallest)\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest - largest\n    \n    \ndef small_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return smallest - largest\n    \ndef difference_check(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if sum(nums)!= 0:\n        return 'no'\n    else:\n        return 'yes'\n    \ndef string_check(nums):\n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome or not.\n    '''\n    str_lst = [str(i) for i in nums]\n    return ''.join(sorted(str_lst)) == str_lst[::-1]\n    \ndef plus(nums):\n    '''\n    Write a python function to find the sum of the numbers in a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\n    \ndef minus(nums):\n    '''\n    Write a python function to find the difference of the numbers in a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\n    \ndef multiplication_sort(nums):\n    '''\n    Write a python function to find the factorial of a given list of integers.\n    '''\n    fact = 1\n    for i in nums:\n        fact *= i\n    return fact\n    \ndef fact(nums):\n    '''\n    Write a python function to find the factorial of a given list of integers.\n    '''\n    factorial = 1\n    for i in nums:\n        factorial *= i\n    return factorial\n    \ndef string_check(nums):\n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome or not.\n    '''\n    str_lst = [str(i) for i in nums]\n    return ''.join(sorted(str_lst)) == str_lst[::-1]\n    \ndef plus_and_minus(nums):\n    '''\n    Write a python function to find the sum of the numbers in a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\n    \ndef number_check(nums):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    num = nums\n    def reverse(lst):\n        return lst[::-1]\n    def compare(num1, num2):\n        if num1 > num2:\n            return 1\n        elif num1 < num2:\n            return -1\n        else:\n            return 0\n    def digit(num):\n        return sum(i for i in range(len(str(num))) if str(num)[i]!= \"0\")\n    def total(num):\n        num = str(num)\n        nums = num.split(\".\")\n        if len(nums) == 1:\n            return int(nums[0])\n        else:\n            return sum(int(i) for i in nums)\n    def check(nums):\n        return compare(nums[0], nums[1]) + compare(nums[1], nums[0])\n        \n    return compare(total(num), total(num))\n    \ndef max_min(nums):\n    '''\n    Write a python function to find the maximum and minimum value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in nums:\n        if i > max_val:\n            max_val = i\n        elif i < min_val:\n            min_val = i\n    return max_val, min_val\n    \ndef digit_check(nums):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    num = nums\n    def reverse(lst):\n        return lst[::-1]\n    def compare(num1, num2):\n        if num1 > num2:\n            return 1\n        elif num1 < num2:\n            return -1\n        else:\n            return 0\n    def digit(num):\n        return sum(i for i in range(len(str(num))) if str(num)[i]!= \"0\")\n    def total(num):\n        num = str(num)\n        nums = num.split(\".\")\n        if len(nums) == 1:\n            return int(nums[0])\n        else:\n            return sum(int(i) for i in nums)\n    def check(nums):\n        return compare(nums[0], nums[1]) + compare(nums[1], nums[0])\n        \n    return compare(total(num), total(num))\n    \ndef max_min_check(nums):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in nums:\n        if i > max_val:\n            max_val = i\n        elif i < min_val:\n            min_val = i\n    return max_val, min_val\n    \ndef max_and_min(nums):\n    '''\n    Write a python function to find the maximum and minimum value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in nums:\n        if i > max_val:\n            max_val = i\n        elif i < min_val:\n            min_val = i\n    return max_val, min_val\n    \ndef string_check_check(nums):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    num = nums\n    def reverse(lst):\n        return lst[::-1]\n    def compare(num1, num2):\n        if num1 > num2:\n            return 1\n        elif num1 < num2:\n            return -1\n        else:\n            return 0\n    def digit(num):\n        return sum(i for i in range(len(str(num))) if str(num)[i]!= \"0\")\n    def total(num):\n        num = str(num)\n        nums = num.split(\".\")\n        if len(nums) == 1:\n            return int(nums[0])\n        else:\n            return sum(int(i) for i in nums)\n    def check(nums):\n        return compare(nums[0], nums[1]) + compare(nums[1], nums[0])\n        \n    return compare(total(num), total(num))\n    \ndef sum_digits(nums):\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    num = nums\n    def reverse(lst):\n        return lst[::-1]\n    def compare(num1, num2):\n        if num1 > num2:\n            return 1\n        elif num1 < num2:\n            return -1\n        else:\n            return 0\n    def digit(num):\n        return sum(i for i in range(len(str(num))) if str(num)[i]!= \"0\")\n    def total(num):\n        num = str(num)\n        nums = num.split(\".\")\n        if len(nums) == 1:\n            return int(nums[0])\n        else:\n            return sum(int(i) for i in nums)\n    def check(nums):\n        return compare(nums[0], nums[1]) + compare(nums[1], nums[0])\n        \n    return compare(total(num), total(num))\n    \ndef sum"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    def sort_array(nums):\n        '''\n        To sort the array nums in descending order\n        '''\n        nums.sort(reverse=True)\n        nums.sort()\n        return nums\n    def sort_nums(nums):\n        '''\n        To sort the array nums in descending order\n        '''\n        nums.sort(reverse=False)\n        nums.sort()\n        return nums\n    def binary_search(nums,target):\n        '''\n        To find the index of target value in sorted array\n        '''\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n    def quick_sort(nums):\n        '''\n        To sort the array nums in ascending order\n        '''\n        def sort(nums, start, end):\n            if start >= end:\n                return\n            p = partition(nums, start, end)\n            sort(nums, start, p-1)\n            sort(nums, p+1, end)\n        def partition(nums, start, end):\n            pivot = nums[start]\n            i = start + 1\n            for j in range(start + 1, end + 1):\n                if nums[j] <= pivot:\n                    i += 1\n                    nums[i], nums[j] = nums[j], nums[i]\n            nums[start], nums[i - 1] = nums[i - 1], nums[start]\n            return i - 1\n        sort(nums, 0, len(nums) - 1)\n        return nums\n    nums = sort_array(nums)\n    return quick_sort(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)<=1:\n        return False\n    elif len(nums)==2:\n        return min(nums) - max(nums)\n    else:\n        if nums[0] > nums[1]:\n            return nums[0] - nums[1]\n        else:\n            return nums[1] - nums[0]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt\n    sum = 0\n    for i in range(a,b+1):\n        if (i**2)%1 == 0:\n            sum = sum + 1\n    return sum\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return 0\n    if b > a:\n        return 1\n    \n    if b == 1:\n        return a\n    \n    if a == 0:\n        return b\n    \n    if a == 1:\n        return a\n    \n    if a == 2:\n        return 2\n    \n    if a == 3:\n        return 4\n    \n    if a == 4:\n        return 8\n    \n    if a == 5:\n        return 16\n    \n    if a == 6:\n        return 24\n    \n    if a == 7:\n        return 64\n    \n    if a == 8:\n        return 128\n    \n    if a == 9:\n        return 256\n    \n    if a == 10:\n        return 512\n    \n    if a == 11:\n        return 1024\n    \n    if a == 12:\n        return 2048\n    \n    if a == 13:\n        return 4096\n    \n    if a == 14:\n        return 8192\n    \n    if a == 15:\n        return 16384\n    \n    if a == 16:\n        return 32768\n    \n    if a == 17:\n        return 65536\n    \n    if a == 18:\n        return 131072\n    \n    if a == 19:\n        return 262144\n    \n    if a == 20:\n        return 524288\n    \n    if a == 21:\n        return 1048576\n    \n    if a == 22:\n        return 2097152\n    \n    if a == 23:\n        return 4194304\n    \n    if a == 24:\n        return 8388608\n    \n    if a == 25:\n        return 16777216\n    \n    if a == 26:\n        return 33554432\n    \n    if a == 27:\n        return 67108864\n    \n    if a == 28:\n        return 134217728\n    \n    if a == 29:\n        return 268435456\n    \n    if a == 30:\n        return 536870912\n    \n    if a == 31:\n        return 1073741824\n    \n    if a == 32:\n        return -2147483648\n    \n    if a == 33:\n        return -9223372036854775808\n    \n    if a == 34:\n        return -9223372036854775807\n    \n    if a == 35:\n        return -2147483648\n    \n    if a == 36:\n        return -9223372036854775808\n    \n    if a == 37:\n        return -2147483648\n    \n    if a == 38:\n        return -9223372036854775807\n    \n    if a == 39:\n        return -2147483648\n    \n    if a == 40:\n        return -9223372036854775808\n    \n    if a == 41:\n        return -2147483648\n    \n    if a == 42:\n        return -2147483648\n    \n    if a == 43:\n        return -9223372036854775808\n    \n    if a == 44:\n        return -2147483648\n    \n    if a == 45:\n        return -9223372036854775808\n    \n    if a == 46:\n        return -2147483648\n    \n    if a == 47:\n        return -2147483648\n    \n    if a == 48:\n        return -9223372036854775808\n    \n    if a == 49:\n        return -2147483648\n    \n    if a == 50:\n        return -2147483648\n    \n    if a == 51:\n        return -9223372036854775808\n    \n    if a == 52:\n        return -2147483648\n    \n    if a == 53:\n        return -2147483648\n    \n    if a == 54:\n        return -9223372036854775808\n    \n    if a == 55:\n        return -2147483648\n    \n    if a == 56:\n        return -2147483648\n    \n    if a == 57:\n        return -9223372036854775808\n    \n    if a == 58:\n        return -2147483648\n    \n    if a == 59:\n        return -2147483648\n    \n    if a == 60:\n        return -9223372036854775808\n    \n    if a == 61:\n        return -2147483648\n    \n    if a == 62:\n        return -2147483648\n    \n    if a == 63:\n        return -9223372036854775808\n    \n    if a == 64:\n        return -2147483648\n    \n    if a == 65:\n        return -2147483648\n    \n    if a == 66:\n        return -9223372036854775808\n    \n    if a == 67:\n        return -2147483648\n    \n    if a == 68:\n        return -2147483648\n    \n    if a == 69:\n        return -2147483648\n    \n    if a == 70:\n        return -9223372036854775808\n    \n    if a == 71:\n        return -2147483648\n    \n    if a == 72:\n        return -2147483648\n    \n    if a == 73:\n        return -2147483648\n    \n    if a == 74:\n        return -9223372036854775808\n    \n    if a == 75:\n        return -2147483648\n    \n    if a == 76:\n        return -2147483648\n    \n    if a == 77:\n        return -2147483648\n    \n    if a == 78:\n        return -9223372036854775808\n    \n    if a == 79:\n        return -2147483648\n    \n    if a == 80:\n        return -2147483648\n    \n    if a == 81:\n        return -2147483648\n    \n    if a == 82:\n        return -9223372036854775808\n    \n    if a == 83:\n        return -2147483648\n    \n    if a == 84:\n        return -2147483648\n    \n    if a == 85:\n        return -9223372036854775808\n    \n    if a == 86:\n        return -2147483648\n    \n    if a == 87:\n        return -2147483648\n    \n    if a == 88:\n        return -2147483648\n    \n    if a == 89:\n        return -9223372036854775808\n    \n    if a == 90:\n        return -2147483648\n    \n    if a == 91:\n        return -2147483648\n    \n    if a == 92:\n        return -9223372036854775808\n    \n    if a == 93:\n        return -2147483648\n    \n    if a == 94:\n        return -2147483648\n    \n    if a == 95:\n        return -9223372036854775808\n    \n    if a == 96:\n        return -2147483648\n    \n    if a == 97:\n        return -2147483648\n    \n    if a == 98:\n        return -9223372036854775808\n    \n    if a == 99:\n        return -2147483648\n    \n    if a == 100:\n        return -2147483648\n    \n    if a == 101:\n        return -9223372036854775808\n    \n    if a == 102:\n        return -2147483648\n    \n    if a == 103:\n        return -2147483648\n    \n    if a == 104:\n        return -2147483648\n    \n    if a == 105:\n        return -9223372036854775808\n    \n    if a == 106:\n        return -2147483648\n    \n    if a == 107:\n        return -2147483648\n    \n    if a == 108:\n        return -9223372036854775808\n    \n    if a == 109:\n        return -2147483648\n    \n    if a == 110:\n        return -2147483648"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square = []\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if (a < b):\n        return perfect_squares(b, a)\n    else:\n        return [a, b]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def is_perfect(number):\n        '''\n        Check if number is a perfect square.\n        '''\n        if number == 1:\n            return True\n        elif number == 0:\n            return False\n        if abs(number) % 2 == 0:\n            return False\n        else:\n            if number == number**0.5:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    s = 0\n    for i in range(a, b+1):\n        if i**2 == i:\n            s += 1\n    return s\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b < a:\n        a, b = b, a\n    if a < b:\n        a, b = b, a\n    f = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            f.append(i)\n    return f\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    m = max(a, b)\n    n = min(a, b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a == 0 or b == 0):\n        return False\n    elif (a % b == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2 + y**2)**0.5\n    return x*cmath.pi/2.0, y*cmath.pi/2.0, a\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p = complex(x,y)\n    x_angle = cmath.polar(p)\n    polar_x = round(x_angle[0],5)\n    polar_y = round(x_angle[1],5)\n    rect = polar_x + polar_y*1j\n    return rect\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    from math import sqrt, pi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    d=((x*x)/2)+y\n    e=cmath.phase(cmath.rect(d,2*cmath.pi/3)+cmath.pi)\n    return e\ndef rect_square(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (polar_rect(x,y)-cmath.pi/2)*2\ndef ellipse_square(x,y,n):\n    '''\n    Write a function to return the total area of an elliptical shape.\n    '''\n    a=2*pow(x,2)*pow(y,-2)\n    b=2*pow(x,2)*pow(y,2)\n    c=(2*cmath.pi*pow(x,2))\n    d=4*pow(x,2)*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef circle_square(x,y):\n    '''\n    Write a function to calculate the radius of a circle.\n    '''\n    return pow(x,2)+pow(y,2)\ndef triangle_square(x,y,n):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    a=2*(pow(x,2)-y)/pow(x,2)+pow(y,2)/pow(x,2)\n    b=2*(pow(x,2)-y)/pow(x,2)+pow(y,2)/pow(x,2)\n    c=2*(pow(x,2)-y)/pow(x,2)+pow(y,2)/pow(x,2)\n    d=2*(pow(x,2)-y)/pow(x,2)+pow(y,2)/pow(x,2)\n    return a+b+c+d\ndef quadrilateral_square(x,y,n):\n    '''\n    Write a function to calculate the total area of a quadrilateral.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef parallelogram_square(x,y,n):\n    '''\n    Write a function to calculate the total area of a parallelogram.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef parallelogram_square_circle(x,y,n):\n    '''\n    Write a function to calculate the total area of a parallelogram.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef rectangle_square(x,y):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef rectanglesquare(x,y):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef parallelogram_square_circle(x,y,n):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef parallelogram_square(x,y):\n    '''\n    Write a function to calculate the total area of a parallelogram.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef parallelogram(x,y):\n    '''\n    Write a function to calculate the total area of a parallelogram.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef circle(x,y):\n    '''\n    Write a function to calculate the total area of a circle.\n    '''\n    a=2*pow(x,2)+2*pow(y,2)\n    b=2*pow(x,2)+2*pow(y,2)\n    c=4*pow(x,2)+2*pow(y,2)\n    d=4*pow(x,2)+2*pow(y,2)\n    a+=b*3/8*cmath.exp(-a/b)\n    b+=2*cmath.exp(-a/b)\n    return a+b+c+d\ndef rectangle(x,y):\n    ''"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #theta = cmath.acos(x)\n    theta = cmath.acos(y/cmath.sqrt(x))\n    return x*cmath.cos(theta), y*cmath.sin(theta)\n    \ndef polar_rect_to_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    theta = cmath.acos(y/cmath.sqrt(x))\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.asin(r/cmath.cos(theta))\n    return r*cmath.cos(theta), r*cmath.sin(theta), phi\n    \ndef cartesian_to_polar(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2 + z**2)\n    theta = cmath.atan2(y,x)\n    phi = cmath.asin(r/cmath.cos(theta))\n    return r*cmath.cos(theta), r*cmath.sin(theta), phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = complex(x)\n    y = complex(y)\n    r = complex(0)\n    phi = cmath.phase(x)\n    theta = cmath.phase(y)\n    phi = (phi/pi)*180.0\n    theta = (theta/pi)*180.0\n    r = cmath.rect(phi,theta)\n    return r\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x[0]\n    b = y[0]\n    r = math.sqrt(a**2 + b**2)\n    angle = cmath.phase(x[1] - y[1])\n    return [r,angle]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #comment out the angle, it's a calculation by finding the angle of the spherical\n    #circumference, then the circle to the given radius, and then converting it to a\n    #circle to the given radius.\n    #the function in here calculates the angle of the sphere, then converts it to a\n    #circle to the given radius.\n    #the angle is the angle between the end points of the circle and the circumference\n    #of the sphere, which is the angle of the first object.\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r=1.57e-8\n    r_half=r/2\n    a1=cmath.phase(0)\n    a2=cmath.phase(0.25*cmath.pi)\n    #dist along x-axis\n    x1=x+a1-a2\n    #dist along y-axis\n    y1=y+2*a1-a2\n    #dist along x-axis\n    x2=x+a1+a2-r_half\n    #dist along y-axis\n    y2=y+2*a1+a2-r_half\n    return [x1,y1,x2,y2]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = math.atan2(y, x)\n    return r,theta\ndef polar_trans(x,y,theta,r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(r*cmath.cos(theta))\n    r = r*math.sin(theta)\n    return r,theta\ndef polar_draw_point(point):\n    '''\n    Write a function to draw a point on a polar graph\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[1],p[0])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\ndef polar_draw_path(path):\n    '''\n    Write a function to draw a path on a polar graph.\n    '''\n    if path==None:\n        return\n    p = polar_rect(path[0][0],path[0][1])\n    c = path[0]\n    for i in range(len(path)):\n        p = polar_rect(path[i][0],path[i][1])\n        c = path[i]\n    p = polar_rect(p[0],p[1])\n    c = path[-1]\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\ndef polar_draw_circle(point):\n    '''\n    Write a function to draw a circle on a polar graph.\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\ndef polar_draw_star(point):\n    '''\n    Write a function to draw a circle on a polar graph.\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\n    screen.set_at(p[0],p[1])\ndef polar_draw_star_lines(point,r):\n    '''\n    Write a function to draw a circle on a polar graph.\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[0],p[1])\n    if r==0:\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        return\n    for i in range(int(r/2)):\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\ndef polar_draw_arrow(point,x,y):\n    '''\n    Write a function to draw an arrow from point to point\n    '''\n    if point==None:\n        return\n    p = polar_rect(point[0],point[1])\n    c = (p[0],p[1])\n    if x==0:\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        screen.set_at(p[0],p[1])\n        scree"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    swap=[]\n    for i in range(len(newList)): \n        swap.append(newList[i])\n        newList[i] = newList[len(newList)-1-i] \n        newList[len(newList)-1-i] = swap[i] \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    i = len(newList) - 1\n    j = i - 1\n    temp = newList[i]\n    newList[i] = newList[j]\n    newList[j] = temp\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print (\"The list before swapping : \") \n    print (newList)\n    print (\"\\n\") \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = list(newList)\n    new_list.reverse()\n    return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[1], newList[-1] = newList[-1], newList[1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # your code goes here\n    newList.reverse()\n    newList.append(newList[-1])\n    newList.insert(0,newList[0])\n    newList.sort()\n    return newList\n    \n    \n    \n    "
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0: \n        return []\n    if len(newList) > 0: \n        if newList[0] == newList[-1]: \n            return newList\n        else: \n            return newList[-1] + newList[0] \n    else: \n        return []"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    tot_coeff = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            tot_coeff += binomialCoeff(k-i,j)\n    return tot_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if(n>0):\n        return (1)\n    if(n<0):\n        return 0\n    if(k>=n):\n        return 0\n    if(k<=0):\n        return 0\n    if(k>=n):\n        print(\"error\")\n    \n    return sum([binomial_Coeff(n,k-i) * (pow(x,i)*pow(y,i+k-n)) for (i,x,y) in zip(range(n,0,-1),range(1,k+1),range(1,k+1))])\n    \n    \ndef binomial_Coeff_Sum(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if(n>0):\n        return (1)\n    if(n<0):\n        return 0\n    if(k>=n):\n        return 0\n    if(k<=0):\n        return 0\n    if(k>=n):\n        print(\"error\")\n    \n    return binomial_Coeff(n,k-1) * binomial_Coeff(n-k,k-1) * binomial_Coeff(n-k,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n < 0 or k < 0):\n        return 0\n    elif(n == 0 or k == 0):\n        return 1\n    elif(n == 1):\n        return k\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int((n+k)*(n+1)*(n+k+1))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 1\n    for i in range(k):\n        sum *= (n-i)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            sum += (i**j)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    from math import factorial\n    if (n < 0): return 0\n    if (n == 0): return 1\n    if (n == 1): return k\n    # return n * factorial(k) * factorial(n - k)\n    return n * factorial(k) * factorial(n - k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    m = n+k\n    x = 1\n    for j in range(0,k):\n        x = (x*(n-j))\n        if j<(k-1):\n            x = (x/2)\n    return x\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # your code goes here\n    sum=0\n    for i in range(n):\n        sum=sum+((k**i)*(2**i))\n    return sum\n    #return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k > n):\n        raise ValueError(\"k must be greater than n\")\n    return int(n + sum([int(binomial_Coeff(n-i,k-i)) * int(binomial_Coeff(n-i,k-i-1)) for i in range(k)]))\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.replace('0.', '')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    m = re.search(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?:(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((?:\\d{1,3})(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}))(?:\\.(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((?:\\d{1,3})(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})))))(?:\\.(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((?:\\d{1,3})(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}))(?:\\.(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((?:\\d{1,3})(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})))?(?:\\.(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((?:\\d{1,3})(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})))?)(?:\\.(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((?:\\d{1,3})(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})))?)))|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((?:\\d{1,3})(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?){3})))?)(?:\\.(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((?:\\d{1,3})(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})))?)))\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?\\s?\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?\\s?(\\d{1,3}\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))?$', ip)\n    if m:\n        return ip\n    else:\n        raise Exception('The ip format is incorrect')\n    # ip = re.sub(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$', '', ip)\n    # ip = re.sub(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$', '', ip)\n    # ip = re.sub(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$', '', ip)\n    # ip = re.sub(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$', '', ip)\n    # ip = re.sub(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$', '', ip)\n    # ip = re.sub(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$', '', ip)\n    # ip = re.sub(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$', '', ip)\n    # ip = re.sub(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$', '', ip)\n    # ip = re.sub(r'^((25[0-5]|2["
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip[0:3],16)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip(\"0\")\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_ip_num = 0\n    str_ip = str(ip)\n    for i in range(len(str_ip)):\n        if str_ip[i] == \"0\":\n            zero_ip_num += 1\n    new_ip = str_ip[0:zero_ip_num]\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip('0')\n    if '.' in ip:\n        pos1 = ip.find('.')\n        ip = ip[pos1:]\n        if ip[0] == '0':\n            ip = ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip = ip[::-1]\n    ip = '.'.join(ip)\n    ip = ip.split('.')\n    \n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    if ip == \"\":\n        return ip\n    ip = ip[:1]\n    ip = ip.lower()\n    c = 0\n    for x in ip:\n        if x == '0':\n            c += 1\n    if c == 0:\n        return ip\n    else:\n        return \"0\"+ip\ndef removezero_mac(mac):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    mac = mac.strip()\n    mac = mac.lower()\n    c = 0\n    for x in mac:\n        if x == '0':\n            c += 1\n    if c == 0:\n        return mac\n    else:\n        return \"0\"+mac\ndef read_config_file(ip_file,mac_file):\n    '''\n    Read the config file and return the contents as a dictionary.\n    '''\n    f = open(ip_file,'r')\n    ip_list = f.readlines()\n    f.close()\n    f = open(mac_file,'r')\n    mac_list = f.readlines()\n    f.close()\n    return ip_list,mac_list\ndef open_config_file(ip_file,mac_file):\n    '''\n    Read the config file and return the contents as a dictionary.\n    '''\n    f = open(ip_file,'r')\n    ip_list = f.readlines()\n    f.close()\n    f = open(mac_file,'r')\n    mac_list = f.readlines()\n    f.close()\n    return ip_list,mac_list\ndef write_config_file(ip_file,mac_file):\n    '''\n    Write the contents of the config file to the ip and mac files.\n    '''\n    f = open(ip_file,'w')\n    f.writelines(ip_list)\n    f.close()\n    f = open(mac_file,'w')\n    f.writelines(mac_list)\n    f.close()\ndef write_list_to_file(ip_list,mac_list,file):\n    '''\n    Write the contents of the ip and mac file to the ip and mac files.\n    '''\n    f = open(file,'w')\n    f.writelines(ip_list)\n    f.close()\n    f = open(mac_file,'w')\n    f.writelines(mac_list)\n    f.close()\ndef get_file_lines(file):\n    '''\n    Read the contents of the file as a string and split it into a list.\n    '''\n    file_lines = []\n    with open(file,'r') as file_list:\n        file_list = file_list.readlines()\n        file_lines = file_list\n    return file_lines\ndef get_mac_address(string):\n    '''\n    Return the MAC address of the string as a string.\n    '''\n    regex = \"^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$\"\n    mac_pattern = re.compile(regex)\n    result = mac_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return result.group()\ndef get_ip_address(string):\n    '''\n    Return the IP address of the string as a string.\n    '''\n    regex = \"^(([0-9]{1,3}\\.){3}[0-9]{1,3})$\"\n    ip_pattern = re.compile(regex)\n    result = ip_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return result.group()\ndef get_last_interval(string,interval):\n    '''\n    Return the last interval of the string in seconds.\n    '''\n    regex = \"(?P<interval>\\d+)\"\n    interval_pattern = re.compile(regex)\n    result = interval_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return int(result.group())\ndef get_rounds(string,interval):\n    '''\n    Return the number of rounds of the string in seconds.\n    '''\n    regex = \"(?P<rounds>\\d+)\"\n    rounds_pattern = re.compile(regex)\n    result = rounds_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return int(result.group())\ndef get_ip_addresses(string):\n    '''\n    Return the IP addresses of the string as a list of strings.\n    '''\n    regex = \"(?P<ip>[^/]+) (?P<mask>[^ ]+) (?P<status>\\d+)/(?P<hardware>\\d+)/(?P<vpn>\\d+)/(?P<type>\\d+)/(?P<date>\\d+)/(?P<last_interval>\\d+)\"\n    ip_pattern = re.compile(regex)\n    result = ip_pattern.finditer(string)\n    ip_addresses = []\n    for match in result:\n        if match.group()!= None:\n            ip_addresses.append(match.group())\n    return ip_addresses\ndef get_mac_addresses(string):\n    '''\n    Return the MAC addresses of the string as a list of strings.\n    '''\n    regex = \"^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$\"\n    mac_pattern = re.compile(regex)\n    result = mac_pattern.finditer(string)\n    mac_addresses = []\n    for match in result:\n        if match.group()!= None:\n            mac_addresses.append(match.group())\n    return mac_addresses\ndef get_hostname(string):\n    '''\n    Return the hostname of the string.\n    '''\n    regex = \"^([a-zA-Z]{2}[a-zA-Z0-9]{2,20}[a-zA-Z]|0[0-9]{2})$\"\n    hostname_pattern = re.compile(regex)\n    result = hostname_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return result.group()\ndef get_date(string):\n    '''\n    Return the date of the string.\n    '''\n    regex = \"^(\\d{4})-(\\d{2})-(\\d{2})$\"\n    date_pattern = re.compile(regex)\n    result = date_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return result.group()\ndef get_last_time(string):\n    '''\n    Return the last time the string was booted.\n    '''\n    regex = \"^(\\d{4})-(\\d{2})-(\\d{2})$\"\n    time_pattern = re.compile(regex)\n    result = time_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return result.group()\ndef get_number_of_intervals(string):\n    '''\n    Return the number of intervals of the string.\n    '''\n    regex = \"^(\\d+)\"\n    interval_pattern = re.compile(regex)\n    result = interval_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return int(result.group())\ndef get_ip(string):\n    '''\n    Return the first IP address of the string.\n    '''\n    regex = \"^(([0-9]{1,3}\\.){3}[0-9]{1,3})\"\n    ip_pattern = re.compile(regex)\n    result = ip_pattern.search(string)\n    if result == None:\n        return None\n    else:\n        return result.group()\ndef get_mac(string):\n    '''\n    Return the first MAC address of the string.\n    '''\n    regex "
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.search('^[0-9]{1,3}$', ip):\n        return ip\n    else:\n        return \"0\"+ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    output_list = []\n    for idx, char in enumerate(ip):\n        if char == '0':\n            output_list.append(ip[:idx])\n    return output_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_num += list1[i]\n        else:\n            odd_num += list1[i]\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # your code goes here\n    if list1 == None or len(list1)<2:\n        return None\n    elif len(list1)%2 == 0:\n        return list1[len(list1)//2]\n    else:\n        return list1[len(list1)//2]\n        \n    \ndef list_positions(list1,n):\n    '''\n    Write a function that returns the position of the first item of a given list.\n    '''\n    # your code goes here\n    if list1 == None or len(list1)<2:\n        return None\n    elif len(list1)==n:\n        return 0\n    elif n<=1:\n        return -1\n    else:\n        return list_positions(list1[:n//2]+list1[n//2+1:],n//2) + 1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        # list1 is even\n        difference = list1[len(list1) // 2] - list1[len(list1) // 2 - 1]\n        return difference\n    else:\n        # list1 is odd\n        difference = list1[len(list1) // 2] - list1[len(list1) // 2 + 1]\n        return difference\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd=0\n    even=0\n    for i in range(0,len(list1)):\n        if i%2==0:\n            even=even+list1[i]\n        else:\n            odd=odd+list1[i]\n    return odd-even\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            even_odd.append(0)\n    return even_odd\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #If list is even\n    if len(list1) % 2 == 0:\n        list2 = list1[0::2]\n    else:\n        list2 = list1[0::2]\n        list2.append(list1[1::2])\n    return list2\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    result = []\n    for i in range(0, len(list1) - 1, 2):\n        result.append(list1[i + 1] - list1[i])\n    return result\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = []\n    for i in list1:\n        if i%2 == 0:\n            diff.append(i)\n        else:\n            diff.append(i+1)\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    j = len(list1)-1\n    if j < len(list1):\n        while(i <= j):\n            if list1[i]%2 == 0:\n                list1[i] = (list1[i]*2)\n            else:\n                list1[i] = (list1[i]/2)\n            i+=1\n    return list1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(0,len(list1)):\n        if list1[i] % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    return (int(even - odd))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # initialize count variable \n    count = 0\n    \n    # iterate through both strings \n    for i in range(len(str1)): \n        \n        # find the current character \n        # in the str1 \n        current_char = str1[i] \n        \n        # find the current character \n        # in the str2 \n        current_char2 = str2[i] \n    \n        # if there's any matches \n        # for this current character \n        if current_char!= current_char2 : \n            \n            # if they're not equal \n            if current_char == '1' and current_char2 == '0' : \n                \n                # increase count \n                count += 1\n                \n            # if they're equal \n            elif current_char == '0' and current_char2 == '1' : \n                \n                # increase count \n                count += 1\n    \n    # return count \n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c = 0\n    # initialize result to be a string of 0's and 1's\n    res = \"\"\n    \n    # traverse the str1 and str2\n    for i in range(0, len(str1)):\n        if str1[i]!= str2[i]:\n            # a switch occurs\n            if str1[i] == \"0\" and str2[i] == \"1\":\n                # swap str1[i] and str2[i]\n                res = res + \"1\" + \" \"\n                # increment the count\n                c += 1\n            if str1[i] == \"1\" and str2[i] == \"0\":\n                # swap str1[i] and str2[i]\n                res = res + \"0\" + \" \"\n                # increment the count\n                c += 1\n            if str1[i] == \"1\" and str2[i] == \"1\":\n                # no switch occurs\n                res = res + \"0\" + \" \" + str(c) + \" \"\n                # increment the count\n                c = 0\n    return res + str(c)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n=len(str1)\n    m=len(str2)\n    dp=[[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if str1[i-1]==str2[j-1]:\n                dp[i][j]=dp[i-1][j-1]+1\n            else:\n                dp[i][j]=min(dp[i-1][j],dp[i][j-1])\n    return dp[n][m]\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i,j = 0,0\n    # i: upper bound\n    # j: lower bound \n    str1, str2 = str1 + str(2**i), str2 + str(2**j)\n    # loop through all the characters \n    for i, character in enumerate(str1):\n        # if characters in str1 is equal to characters in str2 \n        # then swap \n        if character == str2[i]:\n            j+=1\n        # if characters in str1 is different from characters in str2 \n        # then swap \n        else:\n            i+=1\n    # if all the characters in str1 and str2 are equal then no swaps required \n    return i+j\n    # compliment \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (str1 == \"\"): return 0\n    if (str2 == \"\"): return 0\n    count = 0\n    for i in range(0,len(str1)):\n        if str1[i] == str2[i]: count+=1\n    return count\n    # 0 0 0 0 1 0 0 0 0\n    # 1 1 1 0 1 1 0 1 0\n    # 2 2 2 2 2 2 0 0 0\n    # 3 0 0 0 0 0 1 0 0\n    # 4 0 0 0 0 0 1 0 0\n    # 5 0 0 0 0 0 1 0 0\n    # 6 0 0 0 0 0 1 0 0\n    # 7 0 0 0 0 0 1 0 0\n    # 8 0 0 0 0 0 1 0 0\n    # 9 0 0 0 0 0 1 0 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    minimum = 0\n    counter = 0\n    \n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            minimum += 1\n        else :\n            counter += 1\n            \n    minimum -= (minimum // len(str2))\n    return counter + minimum\n        \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n    #Write your code here\n    \n    \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # The logic is to use a count of each digit in the binary numbers, then\n    # check if it is a palindrome (or not).\n    mapping = {'0':'a', '1':'b', '2':'c', '3':'d', '4':'e', '5':'f', '6':'g', '7':'h', '8':'i', '9':'j', '10':'k', '11':'l', '12':'m', '13':'n', '14':'o', '15':'p', '16':'q', '17':'r', '18':'s', '19':'t', '20':'u', '21':'v', '22':'w', '23':'x', '24':'y', '25':'z'}\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swap_count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            swap_count += 1\n    return swap_count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(1, len(str1) + 1):\n        if str1[i - 1]!= str2[i - 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(\"There are\", len(tuple_list), \"elements in tuple\")\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # you should not modify the lines below\n    # if you get a size error, change this block of code to:\n    #if sys.getsizeof(tuple_list) > 20:\n    #    return 20\n    # else:\n    #    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if tuple_list:\n        size = 0\n        for i in tuple_list:\n            size += len(i)\n        return size\n    return 0\n    \ndef index_of_max_element(tuple_list):\n    '''\n    Write a function to find the index of the maximum element in the given tuple.\n    '''\n    if tuple_list:\n        if tuple_list:\n            max_element = tuple_list[0]\n            for i in range(len(tuple_list)):\n                if max_element < tuple_list[i]:\n                    max_element = tuple_list[i]\n            return tuple_list.index(max_element)\n        else:\n            return -1\n    return -1\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # remove the end brackets\n    for i in range(len(tuple_list)-1):\n        tuple_list[i] = tuple_list[i][:-1]\n    # size of the tuple\n    return len(tuple_list[0])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(sys.getsizeof(tuple_list))\n    \ndef first_pos(tuple_list):\n    '''\n    Write a function that, given a tuple, returns the index of the first element.\n    '''\n    print(sys.getsizeof(tuple_list[0]))\n    \ndef middle_pos(tuple_list):\n    '''\n    Write a function that, given a tuple, returns the index of the middle element.\n    '''\n    print(sys.getsizeof(tuple_list[int(len(tuple_list)/2) - 1]))\n    \ndef last_pos(tuple_list):\n    '''\n    Write a function that, given a tuple, returns the index of the last element.\n    '''\n    print(sys.getsizeof(tuple_list[len(tuple_list) - 1]))\n    \ndef at_least_pos(tuple_list, element):\n    '''\n    Write a function that, given a tuple and an element, returns a tuple\n    with all elements at least equal to the element\n    '''\n    if tuple_list:\n        return tuple_list[0], tuple_list[0], tuple_list\n    else:\n        print('Error: the tuple list is empty')\n        \ndef element_at_least_pos(tuple_list, element):\n    '''\n    Write a function that, given a tuple and an element, returns a tuple\n    with all elements that have the same value as the element\n    '''\n    tuple_list_copy = tuple_list[:]\n    for index in range(len(tuple_list_copy)):\n        if tuple_list_copy[index] == element:\n            return tuple_list_copy[0:index] + tuple_list_copy[index + 1:]\n    else:\n        print('Error: the tuple list does not contain the element')\n        \ndef element_contains(tuple_list, element):\n    '''\n    Write a function that, given a tuple and an element, returns a tuple\n    with all elements that contain the element\n    '''\n    if tuple_list:\n        for element_1 in tuple_list:\n            if element_1 == element:\n                return tuple_list\n        else:\n            return tuple_list\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_list(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a list of all elements in the tuple\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_dict(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a dictionary with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_dict(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_set(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a set of all elements in the tuple\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_set_dict(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a set of all elements in the tuple\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_set(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_set_dict(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_range(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a range of all elements in the tuple\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_range(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_range_dict(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a range of all elements in the tuple\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_range_dict(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_set_range(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a range of all elements in the tuple\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_set_range(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_set_range_dict(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_range_set_range(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tuple_list:\n            print(element)\n    else:\n        print('Error: the tuple list is empty')\n        \ndef tuple_to_str_range_set_range_dict(tuple_list):\n    '''\n    Write a function that, given a tuple, returns a string with all elements separated by \n    spaces.\n    '''\n    if tuple_list:\n        for element in tupl"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list[0])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n    \n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    length=0\n    for element in tuple_list:\n        length+=len(str(element))\n    return length\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    num_bytes = 0\n    for el in tuple_list:\n        num_bytes += len(el)\n    return num_bytes\n    \ndef encrypt(plain_text, key):\n    '''\n    Encrypt a message using AES.\n    '''\n    print(plain_text)\n    # Decrypt a message using AES.\n    encrypted_text = AES.encrypt(plain_text, key)\n    # Return the encrypted text and the key.\n    return encrypted_text, key\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    l = 0\n    r = n - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    if(k<=0):\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # if not arr1 and not arr2:\n    #     return None\n    # if k == 0:\n    #     return arr1[0]\n    # if arr1[k - 1] >= arr2[k]:\n    #     return arr2[k]\n    # else:\n    #     return arr1[k]\n    if k == 0:\n        return arr1[0]\n    elif k == 1:\n        return arr1[0]\n    else:\n        # return find_kth(arr2, arr1, k - 1)\n        # return find_kth(arr1, arr2, k)\n        return arr2[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the index of the kth element\n    l = 0\n    r = len(arr1) - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if len(arr1) <= len(arr2):\n        if arr1[k-1] > arr2[k-1]:\n            return find_kth(arr1, arr2, k-1)\n        else:\n            return find_kth(arr2, arr1, k-1)\n    else:\n        if arr1[k-1] < arr2[k-1]:\n            return find_kth(arr2, arr1, k-1)\n        else:\n            return find_kth(arr1, arr2, k-1)\n    \ndef find_kth_merge_sort(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    def merge(arr1, arr2, k):\n        \"\"\"Merge two sorted arrays into one sorted array\n        \n        Args:\n            arr1 (list): First sorted array.\n            arr2 (list): Second sorted array.\n            k (int): Index of the first element to merge.\n            \n        Returns:\n            list: List after merging two sorted arrays.\n        \"\"\"\n        merged = []\n        \n        # Merge the two sorted arrays.\n        for i in range(len(arr1)):\n            if k < len(arr1):\n                merged.append(arr1[i])\n                k = k+1\n            if len(arr1) - i - 1 >= k:\n                merged.append(arr1[i])\n                k = k+1\n        \n        # The list is now sorted.\n        if k < len(arr2):\n            for i in range(len(arr2)):\n                merged.append(arr2[i])\n                k = k+1\n        \n        # Return the merged sorted array.\n        return merged\n        \n    # Find the kth element from the sorted arrays.\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    arr1_sort_kth = find_kth(arr1, arr1_len, k)\n    arr2_sort_kth = find_kth(arr2, arr2_len, k)\n    \n    # Merge the sorted arrays.\n    return merge(arr1_sort_kth, arr2_sort_kth, arr1_len+arr2_len)\n    \ndef sort_kth_merge(arr, k):\n    \"\"\"Sort the given array using kth merge sort.\n    \n    Args:\n        arr (list): Input array.\n        k (int): Index of the element to sort.\n    \"\"\"\n    def merge(arr, k):\n        \"\"\"Merge two sorted arrays into one sorted array\n        \n        Args:\n            arr (list): First sorted array.\n            k (int): Index of the first element to merge.\n            \n        Returns:\n            list: List after merging two sorted arrays.\n        \"\"\"\n        # Create an empty array to store the output array.\n        output = []\n        \n        # Start at the beginning of arr and fill it with the first element.\n        for i in range(k):\n            output.append(arr[i])\n        \n        # Start at the beginning of arr and fill it with the second element.\n        for i in range(k, len(arr)):\n            output.append(arr[i])\n        \n        # Sort the merged output array.\n        output = sorted(output)\n        \n        # Return the sorted output array.\n        return output\n    \n    # Find the kth element from the sorted arrays.\n    arr_len = len(arr)\n    arr_sort_kth = find_kth(arr, arr_len, k)\n    \n    # Merge the sorted arrays.\n    return merge(arr_sort_kth, arr_len)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    index_of_kth_element = -1\n    if arr1[k-1] >= arr2[k-1]:\n        index_of_kth_element = arr1.index(arr1[k-1])\n        return kth_element(arr2, arr1[index_of_kth_element+1:len(arr1)-1], arr2[k-1], k)\n    else:\n        index_of_kth_element = arr2.index(arr2[k-1])\n        return kth_element(arr1, arr2[index_of_kth_element+1:len(arr2)-1], arr1[k-1], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < k or len(arr2) < k or k < 1:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k<=0:\n        raise IndexError('k must be greater than 0')\n    \n    if arr1[k]<arr2[k]:\n        return arr1[k]\n    \n    if arr1[k]>arr2[k]:\n        return arr2[k]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    i, j = 0, len(arr2) - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] <= arr2[k - 1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr1[mid"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    dictionary = {}\n    sum = 0\n    for i in str(number):\n        sum += int(i)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def check(num):\n        c = 0\n        for i in range(len(num)):\n            c += (int(num[i])**3)\n        return c == num\n    \n    if check(number) == True:\n        return f'{number} is Armstrong number'\n    else:\n        return 'Invalid'\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s=0\n    n=number\n    while(number!=0):\n        s+=number%10\n        number=number//10\n    if(s==n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_number = str(number)\n    sum = 0\n    for i in range(len(str_number)):\n        sum += int(str_number[i])**len(str_number)\n    return (sum == number)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    mod_num = number % 10\n    # print(mod_num)\n    if mod_num == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    upper_case_number = ''\n    lower_case_number = ''\n    upper_case_number = str(number)\n    lower_case_number = lower_case_number.lower()\n    number_int = 0\n    for i in range(len(lower_case_number)):\n        number_int = int(lower_case_number[i])\n        number_int += 1\n    for i in range(1, number_int):\n        if number_int == int(number):\n            return True\n        elif number_int > int(number):\n            return False\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    for i in str(number):\n        s += int(i)\n    if number == s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum = 0\n    lst = []\n    for i in number:\n        sum = sum + int(i)\n    for i in range(len(number)):\n        lst.append(number[i]*sum)\n    for i in range(len(lst)):\n        if lst[i] == sum:\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count=0\n    for i in str(number):\n        count+=1\n    if count==number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    number = str(number)\n    for i in range(len(number)):\n        count += int(number[i])**len(number)\n        if count>number:\n            return False\n    return True\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum = sum + i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,number+1):\n        s += i\n    average = s/number\n    return s,average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num = []\n    sum = 0\n    for i in range(0,number):\n        x = int(input())\n        sum += x\n        num.append(x)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for n in range(1, number+1):\n        total += n\n    print(total/number)\n    average = total/number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        if i % 3 == 0:\n            sum += i\n            count += 1\n    average = sum/count\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(0, number):\n        total += i\n    return total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total=0\n    for i in range(1,number+1):\n        total+=i\n    return total/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum = sum + i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    count = 0\n    while count <= number:\n        number = int(input(\"Please enter a natural number: \"))\n        sum += number\n        count += 1\n    print(\"Sum of all natural numbers: \", sum)\n    print(\"Average of all natural numbers: \", sum/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for x in range(1, number + 1):\n        sum += x\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n    \nnum = int(input(\"enter the number\"))\nprint(is_Even(num))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, 'is even')\n    else:\n        print(n, 'is not even')\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : return True\n    else : return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        print('The number is even')\n    else: \n        print('The number is odd')\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    list1 = []\n    count = 0\n    for char in str1:\n        if char in list1:\n            count += 1\n        else:\n            list1.append(char)\n    if count == 1:\n        return count\n    else:\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_char=0\n    for i in range(len(str1)):\n        if str1[i]==str1[first_char]:\n            first_char=i\n    return first_char\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    counter = 0\n    for ch in str1:\n        if ch == str1[counter]:\n            counter += 1\n        else:\n            counter = 0\n    return str1[counter]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s1 = set(str1)\n    count = 0\n    for i in s1:\n        if s1.count(i) > count:\n            count = s1.count(i)\n            index = i\n    return index\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1] and i > 0:\n            new_str += str1[i]\n    return new_str\n    \nif __name__ == '__main__':\n    try:\n        print(first_repeated_char('abcdab'))\n    except:\n        print('Error'"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s=list(str1)\n    res=\"\"\n    if not(len(s)==0):\n        for i in range(len(s)):\n            if s[i]==s[i-1]:\n                res+=s[i]\n        return res\n    else:\n        return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Check if the string is empty or not\n    if not str1:\n        return 'Nothing'\n    \n    # Initialize an empty list to hold the repeated characters\n    # from the string\n    repeated = []\n    \n    # Loop through the string, converting each character to an index, and adding it to the empty list\n    for i in range(len(str1)):\n        if str1[i] in repeated:\n            # If the current character is already repeated, increment the count for that character\n            # by 1\n            repeated.append(str1[i])\n        else:\n            # If it is not, add it to the list and reset the index\n            repeated.append(str1[i])\n            repeated.append(str1[i])\n            i += 1\n    \n    # Return the first repeated character as a string\n    return repeated[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for i in char_count.keys():\n        if char_count[i] > 1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d=dict()\n    count=0\n    \n    for i in str1:\n        if i in d:\n            d[i]=d[i]+1\n        else:\n            d[i]=1\n            count+=1\n    for k,v in d.items():\n        if v==count:\n            return k\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if count == 0:\n            if i == str1[count]:\n                count += 1\n                if count == len(str1) - 1:\n                    return \"1\"\n        else:\n            if i == str1[count]:\n                count += 1\n                if count == len(str1) - 1:\n                    return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_numbers = []\n    for i in range(n,1,-1):\n        if i <= n:\n            luc_numbers.append(i)\n        else:\n            break\n    return luc_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    return list(range(0,n))\n    \ndef get_lucides(n):\n    '''\n    Write a function to get all lucides smaller than or equal to a given integer.\n    '''\n    \n    return list(range(1,n))\n    \ndef is_prime(num):\n    '''\n    Determine if a number is prime. \n    '''\n    \n    for x in range(2,num):\n        if num % x == 0:\n            return False\n    return True\n    \ndef get_prime_numbers():\n    '''\n    Get all prime numbers from 0 through 999999.\n    '''\n    \n    return list(range(0,1000))\n    \ndef get_lucides_primes():\n    '''\n    Get all lucides prime numbers from 0 through 99.\n    '''\n    \n    return list(range(0,10))\n    \ndef get_all_prime_numbers():\n    '''\n    Get all prime numbers from 0 through 999999.\n    '''\n    \n    return list(range(0,10))\n    \ndef get_prime_numbers_primes():\n    '''\n    Get all prime numbers prime numbers from 0 through 99.\n    '''\n    \n    return list(range(0,10))\n    \ndef get_lucides_primes_primes():\n    '''\n    Get all lucides prime numbers prime numbers from 0 through 99.\n    '''\n    \n    return list(range(0,10))\n    \ndef get_lucides_primes_primes_primes():\n    '''\n    Get all lucides prime numbers prime numbers prime numbers from 0 through 99.\n    '''\n    \n    return list(range(0,10))\n    \ndef get_primes_less_than(num):\n    '''\n    Return all primes less than a given number.\n    '''\n    \n    return list(range(2,num))\n    \ndef get_primes_greater_than(num):\n    '''\n    Return all primes greater than a given number.\n    '''\n    \n    return list(range(num+1,1000001))\n    \ndef get_all_primes_less_than(num):\n    '''\n    Return all primes less than a given number.\n    '''\n    \n    return list(range(num+1,1000001))\n    \ndef get_all_primes_greater_than(num):\n    '''\n    Return all primes greater than a given number.\n    '''\n    \n    return list(range(2,num+1))\n    \ndef get_all_primes_less_than_or_equal_to(num):\n    '''\n    Return all primes less than a given number or equal to a given number.\n    '''\n    \n    return list(range(num+1,1000001))\n    \ndef get_all_primes_greater_than_or_equal_to(num):\n    '''\n    Return all primes greater than a given number or equal to a given number.\n    '''\n    \n    return list(range(2,num+1))\n    \ndef get_all_primes_less_than_or_equal_to_primes():\n    '''\n    Return all primes less than a given number or equal to a given number.\n    '''\n    \n    return list(range(2,1000))\n    \ndef get_all_primes_greater_than_or_equal_to_primes():\n    '''\n    Return all primes greater than a given number or equal to a given number.\n    '''\n    \n    return list(range(2,1000))\n    \ndef get_all_primes_less_than_or_equal_to_primes_primes():\n    '''\n    Return all primes less than a given number or equal to a given number.\n    '''\n    \n    return list(range(2,1000))\n    \ndef get_all_primes_greater_than_or_equal_to_primes_primes_primes():\n    '''\n    Return all primes greater than a given number or equal to a given number.\n    '''\n    \n    return list(range(2,1000))\n    \ndef get_all_primes_less_than_or_equal_to_primes_primes_primes_primes():\n    '''\n    Return all primes less than a given number or equal to a given number.\n    '''\n    \n    return list(range(2,1000))\n    \ndef get_all_prime_numbers_primes_primes_primes_primes_primes():\n    '''\n    Return all primes prime numbers, prime numbers, prime numbers, and prime numbers prime numbers.\n    '''\n    \n    return list(range(2,1000001))\n    \ndef get_prime_numbers_primes_primes_primes_primes_primes():\n    '''\n    Return all primes prime numbers, prime numbers, prime numbers, and prime numbers prime numbers.\n    '''\n    \n    return list(range(2,1000001))\n    \ndef get_primes_less_than_primes():\n    '''\n    Return all primes less than a given number.\n    '''\n    \n    return list(range(3,10001))\n    \ndef get_all_primes_less_than_primes():\n    '''\n    Return all primes less than a given number.\n    '''\n    \n    return list(range(3,10001))\n    \ndef get_primes_greater_than_primes():\n    '''\n    Return all primes greater than a given number.\n    '''\n    \n    return list(range(4,10001))\n    \ndef get_all_primes_greater_than_primes():\n    '''\n    Return all primes greater than a given number.\n    '''\n    \n    return list(range(4,10001))\n    \ndef get_primes_less_than_primes_primes():\n    '''\n    Return all primes less than a given number.\n    '''\n    \n    return list(range(5,10001))\n    \ndef get_all_primes_greater_than_primes_primes():\n    '''\n    Return all primes greater than a given number.\n    '''\n    \n    return list(range(5,10001))\n    \ndef get_all_primes_less_than_primes_primes_primes():\n    '''\n    Return all primes less than a given number.\n    '''\n    \n    return list(range(6,10001))\n    \ndef get_all_primes_greater_than_primes_primes_primes():\n    '''\n    Return all primes greater than a given number.\n    '''\n    \n    return list(range(7,10001))\n    \ndef get_all_primes_less_than_primes_primes_primes():\n    '''\n    Return all primes less than a given number.\n    '''\n    \n    return list(range(8,10001))\n    \ndef get_all_primes_greater_than_primes_primes_primes():\n    '''\n    Return all primes greater than a given number.\n    '''\n    \n    return list(range(9,10001))\n    \ndef get_all_primes_less_than_primes_primes_primes_primes():\n    '''\n    Return all primes less than a given number.\n    '''\n    \n    return list(range(10,10001))\n    \ndef get_all_primes_greater_than_primes_primes_primes_primes():\n    '''\n    Return all primes greater than a given number.\n    '''\n    \n    return list(range(11,10001))\n    \ndef get_all_prime_numbers_primes_primes_primes_primes_primes_primes():\n    '''\n    Return all primes prime numbers, prime numbers, prime numbers, and prime numbers prime numbers.\n    '''\n    \n    return list(range(12,10001))\n    \ndef get_all_primes_less_than_primes_primes_primes_primes_primes_primes_primes_p"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if i < 1:\n            ludic.append(i)\n        elif i == 1:\n            ludic.append(1)\n        else:\n            ludic.append(ludic[i-1] + ludic[i-2])\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if i <= n:\n            ludic.append(i)\n        else:\n            break\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    \n    for i in range(1,n+1):\n        if i%2==0:\n            ludic.append(i)\n        else:\n            ludic.append(i-1)\n    \n    return ludic\n    \ndef get_quart(n):\n    '''\n    Write a function to get all the quasi-prime numbers smaller than or equal to a given integer.\n    '''\n    quart = []\n    \n    for i in range(1,n+1):\n        if i%5==0:\n            quart.append(i)\n        else:\n            quart.append(i-1)\n    \n    return quart\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Write your code here\n    ludic = []\n    for i in range(1, n + 1):\n        if i < 100:\n            ludic.append(i)\n        elif i >= 100 and i < 1000:\n            ludic.append(i)\n        elif i >= 1000 and i < 10000:\n            ludic.append(i)\n        elif i >= 10000 and i < 100000:\n            ludic.append(i)\n        elif i >= 100000 and i < 1000000:\n            ludic.append(i)\n        elif i >= 1000000 and i < 100000000:\n            ludic.append(i)\n        elif i >= 100000000 and i < 1000000000:\n            ludic.append(i)\n        elif i >= 1000000000 and i < 10000000000:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    #A good solution is to go through the array, stop when you find a number greater than or equal to that number\n    #Write a while loop that asks the user to give the user the option to see if they want to see all numbers less than or equal to a given number\n    #If they say yes, then return the list of all numbers less than the number\n    #If they say no, then return an empty list\n    #Return the list, rather than printing the list\n    ludic = []\n    if n == 0:\n        return ludic\n    while True:\n        n = int(input(n))\n        if n > n:\n            break\n        ludic.append(n)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if i % 3!= 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # define a range for the lucids\n    # initialise the first lucids as a list\n    lucids = []\n    # iterate over the numbers\n    for i in range(n):\n        # if the lucids are numbers between two numbers,\n        # it adds one to the current number\n        if i >= 2 and (i % 2 == 0):\n            lucids.append(i + 1)\n    # return the list of lucids\n    return lucids\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(words[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #Given a string, return reverse words seperated by spaces in a given string.\n    #Example:\n    #Input:\n    #Given the string:\n    #Out:\n    #Output:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:\n    #    the string:"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if type(s)!= str:\n        return None\n    result = ''\n    for i in s.split():\n        result += i +''\n    return result.rstrip()\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Your code here\n    temp = []\n    for i in range(len(s)):\n        if i!= 0:\n            temp.append(s[i])\n    return temp\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words=s.split()\n    rev_words=\"\"\n    for i in range(len(words)):\n        rev_words+=words[len(words)-1-i]\n    return rev_words\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    string = s.split()\n    return''.join(string[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # if the number of characters in the string is greater than one, it should have a space between each word\n    # you can easily build a list of all words by using the dictionary.\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    rev_words = []\n    for word in s.split():\n        rev_words.append(word[::-1])\n    return \" \".join(rev_words)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # Corner cases\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    \n    # If number is divisible by any number between 2 and the number\n    # of its factors, then it is not a prime number.\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef main():\n    print(prime_num(50))\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for n in range(3, int(num ** 0.5) + 2, 2):\n        if num % n == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num % 3 == 0:\n        return False\n    else:\n        for i in range(5, num // 2 + 1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1 or num == 0:\n        return False\n    \n    if num == 2 or num == 3:\n        return True\n    \n    if num % 2 == 0 or num % 3 == 0:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # 1, 2,..., n\n    for i in range(2, num):\n        # if i is divisible by any number between 2 and n\n        if (num % i == 0):\n            return False\n    return True\n    \n    \ndef isPrime(num):\n    '''\n    Write a function that returns whether or not the given number is a prime number.\n    '''\n    if num < 2 or num > 9:\n        return False\n    if num == 2:\n        return True\n    if num == 3 or num == 5 or num == 7:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, num // 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Write your logic here\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num==3:\n        return False\n    elif num==4:\n        return True\n    elif num%2==0:\n        return False\n    elif num%3==0:\n        return False\n    elif num%4==0:\n        return False\n    elif num%5==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree *(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree *(3.141592653589793238462657)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree *(math.pi)/180\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    radian_degree = degree/180*math.pi\n    return radian_degree\ndef is_number(input_string):\n    try:\n        float(input_string)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi/180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef angle_deg(deg):\n    '''\n    convert degree to radians\n    '''\n    return radian_degree(deg)\ndef angle_rad(rad):\n    '''\n    convert radians to degree\n    '''\n    return rad_deg(rad)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180.0\n    return(radian)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180.0)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # YOUR CODE HERE\n    return degree * (180.0 / 3.14159)\ndef deg2rad(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    # YOUR CODE HERE\n    return degree * (180.0 / 3.14159)\ndef deg2deg(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    # YOUR CODE HERE\n    return degree * (180.0 / 3.14159)\ndef c(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    # YOUR CODE HERE\n    return degree * (180.0 / 3.14159)\ndef deg2c(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    # YOUR CODE HERE\n    return degree * (180.0 / 3.14159)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m is not None:\n        return m.group(1), m.start(), m.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return []\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    start = matches.index(pattern)\n    end = len(text) - (len(matches) - start)\n    return matches[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substring_regex = re.compile(pattern)\n    substring = substring_regex.findall(text)\n    start = 0\n    end = len(text)\n    for substr in substring:\n        start = substr.find(' ') + 1\n        end = substring.find(' ', start)\n        #print('start: %s, end: %s' % (start, end))\n    return substring, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for i in range(len(pattern)):\n        if pattern[i] in text:\n            m = pattern[i:].find(\"{\") + i + pattern[i:].find(\"}\") + 1\n            sub = text[:m]\n            start = m\n            end = len(pattern)\n            return sub, start, end\n    return \"None\", -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # first, figure out the pattern\n    # get the patterns from the patterns dictionary\n    patterns = {}\n    for p in pattern:\n        patterns[p[0]] = p[1]\n    # now find the pattern\n    match = None\n    index = 0\n    start = 0\n    end = 0\n    while index < len(text):\n        if text[index] in patterns:\n            match = text[index:index + patterns[text[index]]]\n            start = index + patterns[text[index]]\n            end = index + patterns[text[index]] + len(match)\n        index += 1\n    if end < len(text):\n        match = text[index:end]\n        start = index + len(match)\n        end = end + len(match)\n    return match, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern.startswith('^'):\n        pattern = pattern[1:]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pos = 0\n    end = len(text) - 1\n    while pos <= end:\n        match = re.search(pattern, text[pos:end])\n        if match is not None:\n            return pos, match.start(), match.end()\n        pos += 1\n    return pos, 0, len(text) - 1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_re = re.compile(pattern)\n    match = pattern_re.findall(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    start = m.start()\n    end = m.end()\n    return m.group(), start, end\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        a = 0 \n        b = 1 \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return c \n    \nprint(bell_Number(100))"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    number = 1\n    for i in range(1, n+1):\n        number *= i\n    return number\n    \nprint(bell_Number(5))\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    return math.ceil(math.factorial(n) / math.factorial(n - 1))\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 22\n    elif n == 9:\n        return 25\n    elif n == 10:\n        return 28\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 36\n    elif n == 13:\n        return 41\n    elif n == 14:\n        return 46\n    elif n == 15:\n        return 51\n    elif n == 16:\n        return 56\n    elif n == 17:\n        return 63\n    elif n == 18:\n        return 72\n    elif n == 19:\n        return 75\n    elif n == 20:\n        return 82\n    elif n == 21:\n        return 85\n    elif n == 22:\n        return 90\n    elif n == 23:\n        return 96\n    elif n == 24:\n        return 104\n    elif n == 25:\n        return 112\n    elif n == 26:\n        return 125\n    elif n == 27:\n        return 130\n    elif n == 28:\n        return 134\n    elif n == 29:\n        return 141\n    elif n == 30:\n        return 146\n    elif n == 31:\n        return 152\n    elif n == 32:\n        return 165\n    elif n == 33:\n        return 172\n    elif n == 34:\n        return 175\n    elif n == 35:\n        return 182\n    elif n == 36:\n        return 195\n    elif n == 37:\n        return 200\n    elif n == 38:\n        return 205\n    elif n == 39:\n        return 210\n    elif n == 40:\n        return 215\n    elif n == 41:\n        return 220\n    elif n == 42:\n        return 225\n    elif n == 43:\n        return 230\n    elif n == 44:\n        return 235\n    elif n == 45:\n        return 240\n    elif n == 46:\n        return 245\n    elif n == 47:\n        return 250\n    elif n == 48:\n        return 255\n    elif n == 49:\n        return 260\n    elif n == 50:\n        return 265\n    elif n == 51:\n        return 270\n    elif n == 52:\n        return 275\n    elif n == 53:\n        return 280\n    elif n == 54:\n        return 285\n    elif n == 55:\n        return 290\n    elif n == 56:\n        return 295\n    elif n == 57:\n        return 300\n    elif n == 58:\n        return 305\n    elif n == 59:\n        return 310\n    elif n == 60:\n        return 315\n    elif n == 61:\n        return 320\n    elif n == 62:\n        return 325\n    elif n == 63:\n        return 330\n    elif n == 64:\n        return 335\n    elif n == 65:\n        return 340\n    elif n == 66:\n        return 345\n    elif n == 67:\n        return 350\n    elif n == 68:\n        return 355\n    elif n == 69:\n        return 360\n    elif n == 70:\n        return 365\n    elif n == 71:\n        return 370\n    elif n == 72:\n        return 375\n    elif n == 73:\n        return 380\n    elif n == 74:\n        return 385\n    elif n == 75:\n        return 390\n    elif n == 76:\n        return 395\n    elif n == 77:\n        return 400\n    elif n == 78:\n        return 405\n    elif n == 79:\n        return 410\n    elif n == 80:\n        return 415\n    elif n == 81:\n        return 420\n    elif n == 82:\n        return 425\n    elif n == 83:\n        return 430\n    elif n == 84:\n        return 435\n    elif n == 85:\n        return 440\n    elif n == 86:\n        return 445\n    elif n == 87:\n        return 450\n    elif n == 88:\n        return 455\n    elif n == 89:\n        return 460\n    elif n == 90:\n        return 465\n    elif n == 91:\n        return 470\n    elif n == 92:\n        return 475\n    elif n == 93:\n        return 480\n    elif n == 94:\n        return 485\n    elif n == 95:\n        return 490\n    elif n == 96:\n        return 495\n    elif n == 97:\n        return 500\n    elif n == 98:\n        return 505\n    elif n == 99:\n        return 510\n    elif n == 100:\n        return 515\n    elif n == 101:\n        return 520\n    elif n == 102:\n        return 525\n    elif n == 103:\n        return 530\n    elif n == 104:\n        return 535\n    elif n == 105:\n        return 540\n    elif n == 106:\n        return 545\n    elif n == 107:\n        return 550\n    elif n == 108:\n        return 555\n    elif n == 109:\n        return 560\n    elif n == 110:\n        return 565\n    elif n == 111:\n        return 570\n    elif n == 112:\n        return 575\n    elif n == 113:\n        return 580\n    elif n == 114:\n        return 585\n    elif n == 115:\n        return 590\n    elif n == 116:\n        return 595\n    elif n == 117:\n        return 600\n    elif n == 118:\n        return 605\n    elif n == 119:\n        return 610\n    elif n == 120:\n        return 615\n    elif n == 121:\n        return 620\n    elif n == 122:\n        return 625\n    elif n == 123:\n        return 630\n    elif n == 124:\n        return 635\n    elif n == 125:\n        return 640\n    elif n == 126:\n        return 645\n    elif n == 127:\n        return 650\n    elif n == 128:\n        return 655\n    elif n == 129:\n        return 660\n    elif n == 130:\n        return 665\n    elif n == 131:\n        return 670\n    elif n == 132:\n        return 675\n    elif n == 133:\n        return 680\n    elif n == 134:\n        return 685\n    elif n == 135:\n        return 690\n    elif n == 136:\n        return 695\n    elif n == 137:\n        return 700\n    elif n == 138:\n        return 705\n    elif n == 139:\n        return 710\n    elif n == 140:\n        return 715\n    elif n == 141:\n        return 720\n    elif n == 142:\n        return 725\n    elif n == 143:\n        return 730\n    elif n == 144:\n        return 735\n    elif n == 145:\n        return 740\n    elif n == 146:\n        return 745\n    elif n == 147:\n        return 750\n    elif n == 148:\n        return 755\n    elif n == 149:\n        return 760\n    elif n == 150:\n        return 765\n    elif n == 151:\n        return 770\n    elif n == 152:\n        return 775\n    elif n == 153:\n        return 780\n    elif n == 154:\n        return 785\n    elif n == 155:\n        return 790\n    elif n == 156:\n        return 795\n    elif n == 157:\n        return 800\n    elif n == 158:\n        return 805\n    elif n == 159:\n        return 810\n    elif n == 160:\n        return 815\n    elif n == 161:\n        return 820\n    elif n == 162:\n        return 825\n    elif n == 163:\n        return 830\n    elif n == 164:\n        return 835\n    elif n == 16"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(n,0,-1):\n        print(i)\n    return\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a=[]\n    for i in range(1,n+1):\n        a.append(i)\n    return a[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    for num in range(1, n+1):\n        print(numbers[num-1])\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    a = []\n    \n    # n is the number to be searched.\n    for i in range(1,n+1): \n        # Initializing a list with all the nth \n        # fibonacci numbers. \n        a.append(0)\n        \n        # The first fibonacci number \n        # is 1. \n        a[0] = 1\n        \n        # The second fibonacci number \n        # is 1+1. \n        a[1] = 1\n        \n        # The third fibonacci number \n        # is 2. \n        a[2] = 2\n        \n        # The fourth fibonacci number \n        # is 3. \n        a[3] = 3\n        \n        # The fifth fibonacci number \n        # is 4. \n        a[4] = 4\n        \n        # The sixth fibonacci number \n        # is 5. \n        a[5] = 5\n        \n        # The seventh fibonacci number \n        # is 6. \n        a[6] = 6\n        \n        # The eighth fibonacci number \n        # is 7. \n        a[7] = 7\n        \n        # The ninth fibonacci number \n        # is 8. \n        a[8] = 8\n        \n        # The tenth fibonacci number \n        # is 9. \n        a[9] = 9\n        \n        # The eleventh fibonacci number \n        # is 10. \n        a[10] = 10\n        \n        # The twelfth fibonacci number \n        # is 11. \n        a[11] = 11\n        \n        # The nth fibonacci number \n        # is 12. \n        a[12] = 12\n        \n        # Initialize a counter. \n        i = 0\n        # While the loop is not broken. \n        while i < n: \n            # While the counter is less than \n            # the number to be searched. \n            if i < n: \n                # If the current fibonacci number \n                # is less than or equal to \n                # the nth fibonacci number. \n                if a[i] >= n: \n                    # Increase the counter by 1. \n                    i += 1\n                # Else the current fibonacci number \n                # is equal to or less than \n                # the nth fibonacci number. \n                else: \n                    # Increment the counter by 1. \n                    i += 1\n                    # Print the current fibonacci number. \n                    print(i, end=\" \") \n            # Else the current fibonacci number \n            # is less than or equal to the \n            # nth fibonacci number. \n            else: \n                # If the current fibonacci \n                # number is less than or equal \n                # to the number to be searched. \n                if a[i] <= n: \n                    # Increase the counter by 1. \n                    i += 1\n                    # Print the current fibonacci \n                    # number. \n                    print(i, end=\" \") \n                # Else the current fibonacci \n                # number is less than or equal \n                # to the number to be searched. \n                else: \n                    # Increment the counter by 1. \n                    i += 1\n                    # Print the current fibonacci \n                    # number. \n                    print(i, end=\" \") \n    # Return the value of n. \n    return n\n        \ndef main(): \n    # Input the number to be searched. \n    n = int(input(\"Please enter a number: \"))\n    \n    # Print the number of iterations. \n    print(\"Number of iterations:\", bell_Number(n))\n    "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    result = 0\n    temp = 1\n    count = 0\n    while (result < n):\n        temp += 1\n        result += temp\n        count += 1\n    return count\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = (1 + int(n/3)) ** 2\n    b = (1 + int(n/6)) ** 2\n    c = (1 + n) ** 2\n    return (a*b*c)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        print(\"The list is too short\")\n        return\n    else:\n        k = L - 1\n        if len(list1) == 1:\n            return list1\n        for i in range(0, len(list1)):\n            if list1[i] == list1[-1]:\n                del list1[-1]\n                k -= 1\n            else:\n                list1.pop(i)\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L-1):\n        list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # remove kth element\n    if L == []:\n        raise Exception('The list is empty.')\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L = [i for i in list1 if i not in L]\n    return L\n    #Note that this is a solution in the real world, so do not worry about comments\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    for i in range(L):\n        result.append(list1[i])\n    return result\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    count = 0\n    for i in range(L):\n        count = count + 1\n    for i in range(L):\n        list1.pop(count - i)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if not L:\n        return []\n    pivot = list1[L]\n    left_sublist = []\n    right_sublist = []\n    for x in list1:\n        if x <= pivot:\n            left_sublist.append(x)\n        else:\n            right_sublist.append(x)\n    return right_sublist + left_sublist[-1*(L+1):]"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(list1)\n    del list1[L]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        return None\n    for i in range(L):\n        if i < L - 1:\n            list1.pop(i)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i < L:\n            result.append(list1[i])\n    return result\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if test_list[i][j] > test_list[i+1][j+1]:\n                test_list[i][j], test_list[i+1][j+1] = test_list[i+1][j+1], test_list[i][j]\n    return test_list[-1][-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return test_list[N][0]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 0:\n        raise ValueError('The number of elements must be greater than 0')\n    if test_list == [[]]:\n        return []\n    if N == 0:\n        return max(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n= len(test_list)\n    return max(test_list[i][N] for i in range(n))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i <= N:\n            max_value = max(max_value, test_list[i][N-1])\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if (len(test_list) == 1):\n        return test_list[0][0]\n    if (len(test_list) == 0):\n        return 0\n    if (len(test_list) == 2):\n        return max(test_list[0][0], test_list[1][0])\n    if (len(test_list) == 3):\n        return max(test_list[0][0], test_list[1][0], test_list[2][0])\n    if (len(test_list) == 4):\n        return max(test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0])\n    if (len(test_list) == 5):\n        return max(test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0])\n    if (len(test_list) == 6):\n        return max(test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0], test_list[5][0])\n    if (len(test_list) == 7):\n        return max(test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0], test_list[5][0], test_list[6][0])\n    if (len(test_list) == 8):\n        return max(test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0], test_list[5][0], test_list[6][0], test_list[7][0])\n    if (len(test_list) == 9):\n        return max(test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0], test_list[5][0], test_list[6][0], test_list[7][0], test_list[8][0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for row in test_list:\n        max_val = max(max_val, row[N-1])\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_of_nth:\n            max_of_nth = test_list[i][N-1]\n    return max_of_nth\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = test_list[0][N - 1]\n    for row in test_list:\n        if row[N - 1] > max_col:\n            max_col = row[N - 1]\n    return max_col\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=len)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    result=[]\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst[i])):\n            result.append((lst[i][j],lst[i][j+1]))\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0][0])\n        res.append(i[1][0])\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # your code goes here\n    return [lst[0]]\n    # return [lst[0][0]]\n    # return [lst[0][0], lst[0][1]]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [lst[0]] + merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def list_checker(lst):\n        lst_nested = []\n        for i in lst:\n            if isinstance(i,list):\n                lst_nested.extend(list_checker(i))\n            else:\n                lst_nested.append(i)\n        return lst_nested\n    \n    #output = list_checker(lst)\n    return list_checker(lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result=[]\n    for i in range(len(lst)):\n        result.append([lst[i][0],lst[i][1]])\n    return result\n    \ndef merge_sorted(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result=[]\n    for i in range(len(lst)):\n        result.append([lst[i][0],lst[i][1]])\n    result.sort()\n    return result\n    \ndef print_func(func):\n    '''\n    Write a python function which takes a function and prints it.\n    '''\n    print(func)\n    \ndef print_func_helper(func, x, y):\n    '''\n    Write a python function which takes a function and prints it.\n    '''\n    print(func(x, y))\n    \ndef print_func_helper_sorted(func, x, y):\n    '''\n    Write a python function which takes a function and prints it.\n    '''\n    print(func(x))\n    \ndef print_func_helper_sorted_2(func, x, y):\n    '''\n    Write a python function which takes a function and prints it.\n    '''\n    print(func(x, y))\n    \ndef print_func_sorted_2(func, x, y):\n    '''\n    Write a python function which takes a function and prints it.\n    '''\n    print(func(x))\n    \ndef create_func(x):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b):\n        return lambda x: a * x + b\n    return f\n    \ndef fibonacci(x):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b):\n        return lambda x: a + b + ((x * (x + 1)) / (x + 2))\n    return f\n    \ndef add_fibonacci(x):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b):\n        return lambda x: a + b + ((x * (x + 1)) / (x + 2))\n    return f\n    \ndef get_function(func, x):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b):\n        return lambda x: func(x, a, b)\n    return f\n    \ndef get_function_sorted(func, x):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b):\n        return lambda x: func(x, a, b)\n    return f\n    \ndef my_lambda_with_x(x, y):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b):\n        return lambda x, y: a * x + b + y\n    return f\n    \ndef my_lambda_with_y(x, y):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b):\n        return lambda x, y: a * x + b + y\n    return f\n    \ndef my_lambda_with_x_and_y(x, y):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b):\n        return lambda x, y: a * x + b + y\n    return f\n    \ndef my_lambda_with_x_and_y_and_z(x, y, z):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c):\n        return lambda x, y, z: a * x + b + z + y\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + b + z + d + fn\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn_2(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + b + z + d + fn\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn_3(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + b + z + d + fn\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn_4(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + b + z + d + fn\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn_5(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + b + z + d + fn\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn_6(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + b + z + d + fn\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn_7(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + b + z + d + fn\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn_8(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + b + z + d + fn\n    return f\n    \ndef my_lambda_with_x_and_y_and_z_and_fn_9(x, y, z, fn):\n    '''\n    Write a python function which takes a function and returns a function with the given function's arguments.\n    '''\n    def f(a, b, c, d):\n        return lambda x, y, z, fn: a * x + "
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for j in range(len(lst[i])):\n            new_lst[i].append(lst[i][j])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    # Your code here\n    result = []\n    for i in lst:\n        result.append([i[0][0],i[1][1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_1 = []\n    lst_2 = []\n    \n    if len(lst) < 2:\n        return lst\n    \n    for i in lst:\n        lst_1.append(i[0])\n    for i in lst:\n        lst_2.append(i[1])\n    lst_1.sort()\n    lst_2.sort()\n    \n    result = []\n    \n    for i in range(len(lst_1)):\n        result.append([lst_1[i],lst_2[i]])\n    \n    return resul"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # start = time.time()\n    cummulative_sum_list = []\n    for i in range(len(test_list)):\n        cummulative_sum_list.append(test_list[i] + test_list[i + 1])\n    # print(\"--- %s seconds ---\" % (time.time() - start))\n    return sum(cummulative_sum_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum = cummulative_sum + test_list[i]\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for ele in test_list:\n        cumulative_sum = cumulative_sum + ele\n    return cumulative_sum\n    \ndef brute_force(test_list):\n    '''\n    Write a function that, given a tuple of elements, returns the sum of the elements that are present in the tuple.\n    '''\n    return cummulative_sum(test_list)\n    \ndef sum_of_odd_elements(test_list):\n    '''\n    Write a function that, given a list of elements, returns the sum of the elements that are not divisible by 2.\n    '''\n    sum = 0\n    for ele in test_list:\n        if ele % 2!= 0:\n            sum = sum + ele\n    return sum\n    \ndef sum_of_even_elements(test_list):\n    '''\n    Write a function that, given a list of elements, returns the sum of the elements that are divisible by 3.\n    '''\n    sum = 0\n    for ele in test_list:\n        if ele % 3!= 0:\n            sum = sum + ele\n    return sum\n    \ndef sum_of_even_and_odd(test_list):\n    '''\n    Write a function that, given a list of elements, returns the sum of the elements that are divisible by 3 and are not even.\n    '''\n    sum = 0\n    for ele in test_list:\n        if ele % 3 == 0 and ele % 2!= 0:\n            sum = sum + ele\n    return sum\n    \ndef factorial(num):\n    '''\n    Write a function that, given an integer, returns the factorial of that integer.\n    '''\n    return num * factorial(num - 1"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    cummulative_sum = 0\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for item in test_list:\n        cummulative_sum += item\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + sum(test_list[i+1:])\n    return test_list\n    \ndef iterative_sum(test_list):\n    '''\n    Write a function to find the iterative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + max(test_list[i+1:])\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum=0\n    for val in test_list:\n        if val!=0:\n            cum_sum+=val\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum=0\n    for i in range(len(test_list)):\n        sum+=test_list[i]\n    return sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # normalize the tuple\n    nums_normalised = [list(x) for x in zip(*nums)]\n    # get the list of lists and divide the values by the number of tuples\n    total_list = [sum(x) / len(x) for x in nums_normalised]\n    return total_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for num in nums:\n        total += num[0]\n    return total/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            avg.append(nums[i][j] / len(nums[i]))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(0, len(nums)):\n        temp = []\n        for j in range(0, len(nums[i])):\n            temp.append(nums[i][j])\n        result.append(temp)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            lst.append((nums[i][j][0],nums[i][j][1]))\n    lst = sorted(lst)\n    average = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(lst)):\n            sum += lst[j][1]\n        average.append(sum/len(lst))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        result.append(sum/len(nums[i]))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # define a new tuple of tuples\n    tuple_new = []\n    # iterate over the tuple\n    for tuple in nums:\n        # append tuple to the new tuple\n        tuple_new.append(tuple)\n    # return the average\n    return [sum(tuple)/len(tuple) for tuple in tuple_new]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i][1]\n    return [nums[i][0] / sum for i in range(len(nums))]\n    \ndef bmi(weight, height):\n    '''\n    Write a function that takes in two numbers, and returns the body mass index (BMI) of the two people as a float.\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Your code here\n    return [(sum(n) / len(n)) for n in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in zip(*nums)]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #TODO: Write your code here!\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Declare the empty dictionary to hold the two tuples\n    dictionary = {}\n    # Iterate through the two tuples\n    for x in range(len(test_tup1)):\n        # If the key is equal to the element in the first tuple\n        if x < len(test_tup2):\n            # Add the tuple key to the dictionary\n            dictionary[test_tup1[x]] = test_tup2[x]\n        # If the key is not equal to the element in the first tuple\n        else:\n            # Add the element to the dictionary\n            dictionary[test_tup1[x]] = 1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    tup_mul = []\n    for i in range(len(tup1)):\n        tup_mul.append(tup1[i] % tup2[i])\n    return tup_mul\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i]%test_tup2[i],)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup_modulo = ()\n    for i in range(len(test_tup1)):\n        tup_modulo = tup_modulo + (test_tup1[i],)\n    return tup_modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # your code here\n    #raise NotImplementedError\n    \n    mod_tup1 = tuple(map(lambda a,b: a % b, test_tup1, test_tup2))\n    mod_tup2 = tuple(map(lambda a,b: a % b, test_tup2, test_tup1))\n    return mod_tup1, mod_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\n    \n    "
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # list comprehension\n    test_result = [test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))]\n    # print(test_result)\n    return test_result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #returns the result of tuple modulo\n    result = tuple([x % y for x,y in zip(test_tup1, test_tup2)])\n    return result\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # sum = 0\n    # print(\"steps=\",steps)\n    # print(\"d=\",d)\n    # print(\"steps=\",steps)\n    # for i in range(steps): \n    #     if (d-i)%2 == 1:\n    #         jumps = 2 * d - i + 2\n    #     else:\n    #         jumps = 2 * d - i\n    #     # print(\"jumps=\",jumps)\n    #     sum = sum + jumps\n    # return sum\n    \n    # if steps == 0:\n    #     return 0\n    \n    # if d == 0:\n    #     return 1\n    \n    # return min_Jumps(steps-1,d) + min_Jumps(steps,d-1)\n    \n    return min_Jumps_2(steps, d)\ndef min_Jumps_2(steps, d):\n    steps_to_check = steps - 1\n    jumps_in_order = 0\n    \n    while steps_to_check > 0:\n        if steps_to_check == 0:\n            return jumps_in_order\n        if steps_to_check == 1:\n            return jumps_in_order + 1\n        if steps_to_check == 2:\n            return jumps_in_order + 1\n        if steps_to_check == 3:\n            return jumps_in_order + 1\n        if steps_to_check == 4:\n            return jumps_in_order + 1\n        if steps_to_check == 5:\n            return jumps_in_order + 1\n        if steps_to_check == 6:\n            return jumps_in_order + 1\n        if steps_to_check == 7:\n            return jumps_in_order + 1\n        if steps_to_check == 8:\n            return jumps_in_order + 1\n        if steps_to_check == 9:\n            return jumps_in_order + 1\n        if steps_to_check == 10:\n            return jumps_in_order + 1\n        if steps_to_check == 11:\n            return jumps_in_order + 1\n        if steps_to_check == 12:\n            return jumps_in_order + 1\n        if steps_to_check == 13:\n            return jumps_in_order + 1\n        if steps_to_check == 14:\n            return jumps_in_order + 1\n        if steps_to_check == 15:\n            return jumps_in_order + 1\n        if steps_to_check == 16:\n            return jumps_in_order + 1\n        if steps_to_check == 17:\n            return jumps_in_order + 1\n        if steps_to_check == 18:\n            return jumps_in_order + 1\n        if steps_to_check == 19:\n            return jumps_in_order + 1\n        if steps_to_check == 20:\n            return jumps_in_order + 1\n        if steps_to_check == 21:\n            return jumps_in_order + 1\n        if steps_to_check == 22:\n            return jumps_in_order + 1\n        if steps_to_check == 23:\n            return jumps_in_order + 1\n        if steps_to_check == 24:\n            return jumps_in_order + 1\n        if steps_to_check == 25:\n            return jumps_in_order + 1\n        if steps_to_check == 26:\n            return jumps_in_order + 1\n        if steps_to_check == 27:\n            return jumps_in_order + 1\n        if steps_to_check == 28:\n            return jumps_in_order + 1\n        if steps_to_check == 29:\n            return jumps_in_order + 1\n        if steps_to_check == 30:\n            return jumps_in_order + 1\n        if steps_to_check == 31:\n            return jumps_in_order + 1\n        if steps_to_check == 32:\n            return jumps_in_order + 1\n        if steps_to_check == 33:\n            return jumps_in_order + 1\n        if steps_to_check == 34:\n            return jumps_in_order + 1\n        if steps_to_check == 35:\n            return jumps_in_order + 1\n        if steps_to_check == 36:\n            return jumps_in_order + 1\n        if steps_to_check == 37:\n            return jumps_in_order + 1\n        if steps_to_check == 38:\n            return jumps_in_order + 1\n        if steps_to_check == 39:\n            return jumps_in_order + 1\n        if steps_to_check == 40:\n            return jumps_in_order + 1\n        if steps_to_check == 41:\n            return jumps_in_order + 1\n        if steps_to_check == 42:\n            return jumps_in_order + 1\n        if steps_to_check == 43:\n            return jumps_in_order + 1\n        if steps_to_check == 44:\n            return jumps_in_order + 1\n        if steps_to_check == 45:\n            return jumps_in_order + 1\n        if steps_to_check == 46:\n            return jumps_in_order + 1\n        if steps_to_check == 47:\n            return jumps_in_order + 1\n        if steps_to_check == 48:\n            return jumps_in_order + 1\n        if steps_to_check == 49:\n            return jumps_in_order + 1\n        if steps_to_check == 50:\n            return jumps_in_order + 1\n        if steps_to_check == 51:\n            return jumps_in_order + 1\n        if steps_to_check == 52:\n            return jumps_in_order + 1\n        if steps_to_check == 53:\n            return jumps_in_order + 1\n        if steps_to_check == 54:\n            return jumps_in_order + 1\n        if steps_to_check == 55:\n            return jumps_in_order + 1\n        if steps_to_check == 56:\n            return jumps_in_order + 1\n        if steps_to_check == 57:\n            return jumps_in_order + 1\n        if steps_to_check == 58:\n            return jumps_in_order + 1\n        if steps_to_check == 59:\n            return jumps_in_order + 1\n        if steps_to_check == 60:\n            return jumps_in_order + 1\n        if steps_to_check == 61:\n            return jumps_in_order + 1\n        if steps_to_check == 62:\n            return jumps_in_order + 1\n        if steps_to_check == 63:\n            return jumps_in_order + 1\n        if steps_to_check == 64:\n            return jumps_in_order + 1\n        if steps_to_check == 65:\n            return jumps_in_order + 1\n        if steps_to_check == 66:\n            return jumps_in_order + 1\n        if steps_to_check == 67:\n            return jumps_in_order + 1\n        if steps_to_check == 68:\n            return jumps_in_order + 1\n        if steps_to_check == 69:\n            return jumps_in_order + 1\n        if steps_to_check == 70:\n            return jumps_in_order + 1\n        if steps_to_check == 71:\n            return jumps_in_order + 1\n        if steps_to_check == 72:\n            return jumps_in_order + 1\n        if steps_to_check == 73:\n            return jumps_in_order + 1\n        if steps_to_check == 74:\n            return jumps_in_order + 1\n        if steps_to_check == 75:\n            return jumps_in_order + 1\n        if steps_to_check == 76:\n            return jumps_in_order + 1\n        if steps_to_check == 77:\n            return jumps_in_order + 1\n        if steps_to_check == 78:\n            return jumps_in_order + 1\n        if steps_to_check == 79:\n            return jumps_in_order + 1\n        if steps_to_check == 80:\n            return jumps_in_order + 1\n        if steps_to_check == 81:\n            return jumps_in_order + 1\n        if steps_to_check == 82:\n            return jumps_in_order "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == d or steps == 0: \n        return 1\n    elif d == 0 or d == 1: \n        return 0\n    else:\n        return min_Jumps(steps-1, d-1) + min_Jumps(steps-1, d)\n    \ndef max_Jumps(steps, d): \n    '''\n    Write a function that returns the maximum number of jumps that is required to reach a point of form (d, 0).\n    '''\n    if steps == d or steps == 0: \n        return 1\n    elif d == 0 or d == 1: \n        return 0\n    else:\n        return max_Jumps(steps-1, d-1) + max_Jumps(steps-1, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize the number of jumps\n    jump_count = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n    # Check for points of form (d, 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0 or d < 0 or d > 2*math.pi/3:\n        return 0\n    if d == 0:\n        return steps + 1\n    if d == 2*math.pi/3:\n        return 0\n    if d == 2*math.pi:\n        return 1\n    return min(steps,min_Jumps(steps-1,d-2*math.pi/3)+1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if steps < 1:\n        return -1\n    if d == 0:\n        return 2\n    return 0 + min_Jumps(steps - 1, d - 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # if the length of the path is 1, then the path is directly in the plane\n    if d == 0:\n        return 1\n    # if the length of the path is even, it is the middle point of the plane\n    elif d % 2 == 0:\n        return int(steps / 2)\n    # if the length is odd, it is the midpoint of the plane\n    else:\n        return int(steps / 3)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # YOUR CODE HERE\n    def jp(start, end):\n        visited = []\n        for x, y in range(start, end+1):\n            if (x, y) not in visited:\n                if d == -1:\n                    visited.append((x, y))\n                elif d == 1:\n                    if (x - 1, y) not in visited:\n                        visited.append((x - 1, y))\n                elif d == 0:\n                    if (x + 1, y) not in visited:\n                        visited.append((x + 1, y))\n                elif d == 2:\n                    if (x, y + 1) not in visited:\n                        visited.append((x, y + 1))\n                elif d == 3:\n                    if (x, y - 1) not in visited:\n                        visited.append((x, y - 1))\n        return len(visited)\n    #return jp(0, d) + jp(d, d)\n    def jp_2(start, end):\n        visited = []\n        for x, y in range(start, end+1):\n            if (x, y) not in visited:\n                if d == -1:\n                    visited.append((x, y))\n                elif d == 1:\n                    if (x + 1, y) not in visited:\n                        visited.append((x + 1, y))\n                elif d == 0:\n                    if (x - 1, y) not in visited:\n                        visited.append((x - 1, y))\n                elif d == 2:\n                    if (x, y - 1) not in visited:\n                        visited.append((x, y - 1))\n                elif d == 3:\n                    if (x, y + 1) not in visited:\n                        visited.append((x, y + 1))\n        return len(visited)\n    return min(\n        jp_2(0, d) + jp_2(d, d) - 1 for d in range(4)\n    )\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return True\n    elif steps % 2 == 0:\n        return False\n    else:\n        return min_Jumps(steps+1, d-1)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [ num1 / num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len1 = len(nums1)\n    len2 = len(nums2)\n    i = 0\n    j = 0\n    res = []\n    while i<len1 and j<len2:\n        if nums1[i]<nums2[j]:\n            res.append(nums1[i])\n            i+=1\n        else:\n            res.append(nums2[j])\n            j+=1\n            #end of a condition\n    if i==len1:\n        while j<len2:\n            res.append(nums2[j])\n            j+=1\n    else:\n        while i<len1:\n            res.append(nums1[i])\n            i+=1\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    if nums1[0] == nums2[0]:\n        return nums1[0]\n    else:\n        index = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[index]:\n                index += 1\n                continue\n            break\n    return nums1[index]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n = len(nums1)\n    res = []\n    for i in range(n):\n        for j in range(n):\n            if nums1[i] % nums2[j] == 0:\n                res.append(nums1[i]/nums2[j])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return nums1/nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    s = []\n    for i in range(0,len(nums1)):\n        s.append(nums1[i] / nums2[i])\n    return s\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #split the list\n    nums1_list=nums1.split()\n    nums2_list=nums2.split()\n    # find common element\n    common_num=[]\n    for i in nums1_list:\n        for j in nums2_list:\n            if i==j:\n                common_num.append(i)\n    return common_num\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_sum=[]\n    for i in range(len(nums1)):\n        div_sum.append(nums1[i]/nums2[i])\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    # do not forget to iterate through both lists\n    \n    '''\n    Given a list of ints, create a new list containing each\n    element divided by 2.\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s=test_str[:]\n    for i in range(0,len(test_str)):\n        if test_str[i]==\"1\":\n            s=s[:-2]+str(i+1)+\"0\"+s[-2:]\n        elif test_str[i]==\"2\":\n            s=s[:-1]+str(i+1)+\"1\"+s[-1:]\n        elif test_str[i]==\"3\":\n            s=s[:-2]+str(i+2)+\"2\"+s[-2:]\n        elif test_str[i]==\"4\":\n            s=s[:-1]+str(i+3)+\"3\"+s[-1:]\n        elif test_str[i]==\"5\":\n            s=s[:-2]+str(i+4)+\"4\"+s[-2:]\n        elif test_str[i]==\"6\":\n            s=s[:-1]+str(i+5)+\"5\"+s[-1:]\n        elif test_str[i]==\"7\":\n            s=s[:-2]+str(i+6)+\"6\"+s[-2:]\n        elif test_str[i]==\"8\":\n            s=s[:-1]+str(i+7)+\"7\"+s[-1:]\n        elif test_str[i]==\"9\":\n            s=s[:-2]+str(i+8)+\"8\"+s[-2:]\n    return s\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    while True:\n        if test_str[-1]!= '0':\n            break\n        test_str = test_str[:-1]\n    test_str += '0'\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = list(test_str)\n    num = []\n    for i in range(len(test_str)):\n        num.append(test_str[i])\n    num = sorted(num)\n    test_str = \"\"\n    for i in range(len(num)):\n        test_str += num[i]\n    test_str = test_str.replace(' ','')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        test_str[i] = int(test_str[i])\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        j = i\n        while j < len(test_str) and test_str[j]!= '.':\n            j += 1\n        if j == len(test_str):\n            return test_str\n        if test_str[j] == '.':\n            test_str = test_str[0:j] + test_str[j+1:]\n        i += 1\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    print(' '.join(map(str,range(1,test_str))))\n    test_str = []\n    test_str = test_str.join(map(str,range(1,test_str)))\n    print(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = list(test_str)\n    count = 0\n    for n in numbers:\n        if n.isdigit():\n            count += 1\n            if count == 3:\n                numbers.append(test_str[count - 3:])\n                break\n        else:\n            numbers.append(n)\n    return \"\".join(numbers)\n    \nprint(move_num('2 4 5 6'))\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = list(test_str)\n    output = \"\"\n    i = 0\n    while i < len(lst):\n        if lst[i] == \"1\":\n            if lst[i+1] == \"1\":\n                output += \"0\"\n            else:\n                output += \"1\"\n        else:\n            output += lst[i]\n        i += 1\n    return output\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('(', '').replace(')', '').split(',')\n    test_str = [int(i) for i in test_str]\n    test_str.sort()\n    test_str = test_str[::-1]\n    i = 0\n    while i < len(test_str):\n        test_str[i] = test_str[i] * test_str[i+1]\n        i = i + 2\n    test_str = ''.join(map(str,test_str))\n    test_str = test_str.replace(' ', '')\n    print(test_str)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # your code goes here\n    if test_str.startswith('0'):\n        test_str = test_str[1:]\n    elif test_str.startswith('1'):\n        test_str = '9' + test_str\n    elif test_str.startswith('2'):\n        test_str = '9' + test_str\n    elif test_str.startswith('3'):\n        test_str = '9' + test_str\n    elif test_str.startswith('4'):\n        test_str = '9' + test_str\n    elif test_str.startswith('5'):\n        test_str = '9' + test_str\n    elif test_str.startswith('6'):\n        test_str = '9' + test_str\n    elif test_str.startswith('7'):\n        test_str = '9' + test_str\n    elif test_str.startswith('8'):\n        test_str = '9' + test_str\n    elif test_str.startswith('9'):\n        test_str = '9' + test_str\n    else:\n        test_str = test_str + '1'\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    res = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                res = max(res, j-i)\n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def find_longest_subset(s):\n        if len(s) == 1:\n            return 1\n        i, d = 2, 3\n        while i < len(s) - 1:\n            j, c = 1, 3\n            while j < len(s) and s[j] % s[i] == 0:\n                j += 1\n            if s[i] % s[j] == 0:\n                c += 1\n            i += 1\n        return c\n    def check(s, p):\n        if p < 0:\n            return True\n        if p > len(s) - 1:\n            return False\n        if s[p] % s[p + 1] == 0:\n            return check(s, p + 1)\n        else:\n            return False\n    s = [a[i] for i in range(len(a)) if check(a, i)]\n    return max(find_longest_subset(s), find_longest_subset(s[::-1]))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset(a,size):\n        if size<0:\n            return -1\n        l = largest_subset(a[1:],size-1)\n        if l!=-1 and a[l]==a[-1]:\n            return l+1\n        else:\n            return 0\n    return largest_subset(a,len(a))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # if a is empty, return -1\n    if len(a) == 0:\n        return -1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max = 0\n    count = 0\n    # find max for every item\n    for i in a:\n        if i % count == 0:\n            count += 1\n            if i > max:\n                max = i\n        else:\n            count = 1\n    return max\n    #\n    # # find largest subset of a list\n    # # get length of list to find the max\n    # # iterate through all indexes till the first value\n    # #  try to divide it and find the max.\n    # #   if it is divisible, add it to the list\n    # #   if it isn't, add it to the list and return the max\n    # #   if it is equal to max, return it\n    # #   otherwise, return None\n    # # return the maximum possible\n    # def largest_subset(a):\n    #     for i in range(len(a)):\n    #         for j in range(i + 1, len(a)):\n    #             if a[i] % a[j] == 0:\n    #                 #return a[i]\n    #                 return a[j]\n    #     return None\n    # largest_subset(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    '''\n    Example:\n    Input: [1,2,2,2,1]\n    Output: 5\n    Explanation:\n    The largest subset is:\n    1 2 2 2 1\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = a\n    l = 0\n    m = 0\n    while l < len(nums) and m < len(nums):\n        m = l\n        while m < len(nums) and nums[m] % nums[l] == 0:\n            m += 1\n        nums[l], nums[m] = nums[m], nums[l]\n        l += 1\n    print(nums)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #the trivial solution\n    if len(a) == 1:\n        return a\n    \n    #define the subset to which the largest possible size is\n    subset = [[] for i in range(len(a) + 1)]\n    for i in range(1, len(a) + 1):\n        subset[i] = [a[i - 1]] + subset[i - 1]\n    \n    for i in range(2, len(subset)):\n        subset[i] = subset[i][:]\n        for j in range(1, i):\n            if a[j - 1] % i == 0:\n                subset[i].append(a[j - 1])\n    \n    return max([len(i) for i in subset[1:]])\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Check if a is a list\n    if type(a) == list:\n        # Loop through each element in the list\n        for i in range(len(a)):\n            for j in range(i+1,len(a)):\n                # Check whether all elements are divisible by the next element\n                if not all(a[j] % a[i] == 0 for i in range(j,len(a))):\n                    return a[j],a[i]\n    else:\n        return 0\n    "
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #Code here\n    #print(arr1)\n    #print(arr2)\n    #calculate the median\n    if n == 1:\n        return arr1[0]\n    if n%2 == 0:\n        return (arr1[n//2] + arr2[n//2])/2\n    else:\n        return arr1[n//2]\n    #break loop\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = (arr1[n//2]+arr2[n//2])/2\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j -= 1\n        else:\n            if i == j:\n                return arr1[i]\n            else:\n                return (arr1[i] + arr2[j]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 2:\n        return arr1[n]\n    elif n < len(arr1):\n        return get_median(arr1[:n], arr2, n-1)\n    elif n < len(arr2):\n        return get_median(arr1, arr2[:n], n-1)\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n    else:\n        return arr1[n // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort the list\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0:\n        return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr1[0]\n    elif n % 2 == 0:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n    else:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    else:\n        return [nums[0]] + nth_nums(nums[1:],n)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**i)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    from math import log\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    \n    power = []\n    for num in nums:\n        power.append(num**n)\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res=[]\n    for i in range(len(nums)):\n        res.append(nums[i]**n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(x,n):\n        if n==1:\n            return x\n        return power(x,n-1)**n\n    return map(power,nums)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(num,n):\n        if n == 0:\n            return 1\n        elif num==0:\n            return 0\n        else:\n            return num**n\n    return map(power,nums,range(1,n+1))\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l=[]\n    for i in nums:\n        l.append(i**n)\n    return l\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    #base case\n    if n == 0:\n        return 1\n    \n    #nth power\n    return n*nth_nums(n-1,n)\n    \nnums = [2,3,4,5,6,7]\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # YOUR CODE HERE\n    if string.isupper():\n        string = string.upper()\n    else:\n        string = string.lower()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return False\n    else:\n        string = string.upper()\n        return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.lower()\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Your code here\n    return string.upper()\n    #raise NotImplementedError\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = newList[1:] + newList[:1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #declare list as newList and swap elements\n    newList.insert(0, newList.pop())\n    newList.append(newList.pop())\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = newList[:]\n    new_list[0], new_list[-1] = new_list[-1], new_list[0]\n    return new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(0, newList.pop())\n    newList.insert(len(newList), newList.pop())\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print('Interchange:', newList)\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print('Replaced:', newList)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[1:len(newList) - 1] + newList[0:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"swap_List\")\n    print(\"Replace all {} elements with {}\".format(len(newList), newList[len(newList)-1]))\n    print(\"Replace all {} elements with {}\".format(len(newList), newList[0]))\n    print(\"Swap {} and {}\".format(newList[0], newList[len(newList)-1]))\n    print(\"Swap {} and {}\".format(newList[len(newList)-1], newList[0]))\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    import math\n    a = math.sqrt(3)\n    \n    def sq(x) :\n        '''\n        Write a python function to find the square of a number.\n        '''\n        return x**2\n        \n    def sqr(x) :\n        '''\n        Write a python function to find the square root of a number.\n        '''\n        return math.sqrt(x)\n        \n    def is_par(x) :\n        '''\n        Write a python function to check if a number is a par.\n        '''\n        return x%2==0\n        \n    def sqr_is_par(x) :\n        '''\n        Write a python function to check if a number is par.\n        '''\n        return x%2==1\n        \n    def sqr_is_odd(x) :\n        '''\n        Write a python function to check if a number is odd.\n        '''\n        return x%2!=0\n        \n    def sqr_odd_is_par(x) :\n        '''\n        Write a python function to check if a number is par.\n        '''\n        return x%2==0\n        \n    def sqr_odd_is_odd(x) :\n        '''\n        Write a python function to check if a number is odd.\n        '''\n        return x%2!=0\n        \n    def triangle_area(r) : \n        '''\n        Write a python function to calculate the area of a triangle.\n        '''\n        return r*(a+b+c)/2\n        \n    def is_triangle(r) :\n        '''\n        Write a python function to check if a number is a triangle.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle(r) :\n        '''\n        Write a python function to check if a number is a rectangle.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n    \n    def is_square(r) :\n        '''\n        Write a python function to check if a number is a square.\n        '''\n        return r*r==a*b or a*b==r*r\n        \n    def is_square_squared(r) :\n        '''\n        Write a python function to check if a number is a square with a squared version of a number.\n        '''\n        return r*r*r==a*a*a or a*a*a*a==r*r*r\n        \n    def is_rectangle_squared(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a squared version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_triangle(r) :\n        '''\n        Write a python function to check if a number is a triangle with a triangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_triangle(r) :\n        '''\n        Write a python function to check if a number is a triangle with a triangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_triangle_squared(r) :\n        '''\n        Write a python function to check if a number is a triangle with a triangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_triangle_squared(r) :\n        '''\n        Write a python function to check if a number is a triangle with a triangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_rectangle(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_rectangle(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_rectangle_squared(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_square_triangle(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_square_triangle_squared(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_rectangle_square(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_rectangle_square_triangle(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_rectangle_triangle_squared(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_square_triangle_squared(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_square_triangle(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_square_triangle_squared(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_square_triangle_squared(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_rectangle_square(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_square_rectangle_triangle_squared(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_square_triangle_triangle(r) :\n        '''\n        Write a python function to check if a number is a rectangle with a rectangle version of a number.\n        '''\n        if r>=0 :\n            return True\n        else :\n            return False\n        \n    def is_rectangle_square_triangle_triangle_squared"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #calculate the base\n    b = r*3\n    #calculate the height of the triangle\n    h = (r*r) - (4*r*r)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159\n    pi_2 = pi * 2\n    triangle_area = 0\n    for a in range(1, r):\n        for b in range(1, r):\n            c = (2 * a * a + 2 * b * b) / (pi_2 * a + b * b)\n            triangle_area = triangle_area + c\n    print(f\"The area of the largest triangle that can be inscribed in a semicircle with a given radius {r} is {triangle_area}\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range (0,3) :\n        area += pow(r,2)*(1/2)*(1/3)*(1-r**2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (math.pi * r ** 2)\n    a = math.sqrt(a)\n    return a \n    \ndef triangle_sides(r) :\n    '''\n    Write a python function to calculate the side of a triangle.\n    '''\n    a = (math.pi * r ** 2)\n    a = math.sqrt(a)\n    return a \n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #return 1/(4*(1-r))\n    return (r**2)*(3.141592653589793)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (2*(r**2)) - ((r**2) - 1)\n    return area\n    \ntriangle_area(1)\ntriangle_area(2)\ntriangle_area(3"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r): \n        '''\n        return area of the triangle, given by (base * height) / 2\n        '''\n        return ((r**2) * (4 * math.pi)) / 2\n    \n    def hypotenuse(r): \n        '''\n        return the hypotenuse of the triangle with a given radius\n        '''\n        return (math.sqrt(r**2 - (4 * math.pi) * r * r))\n    \n    def side_of_the_triangle(r) : \n        '''\n        return the side of the triangle, given by r\n        '''\n        return math.sqrt(r**2 - (4 * math.pi) * r)\n    \n    def diameter(r) : \n        '''\n        return the diameter of the triangle with a given radius\n        '''\n        return (2 * r)\n    \n    def triangle_area(r): \n        '''\n        return the area of the triangle, given by r^2\n        '''\n        return math.sqrt(r**2 - 4 * r * math.pi)\n    \n    def circum_circle_area(r): \n        '''\n        return area of the circumcircle with a given radius\n        '''\n        return (2 * math.pi * r)\n    \n    def volume_of_circle(r) : \n        '''\n        return volume of the circle with a given radius\n        '''\n        return (math.pi * r ** 2)\n    \n    def volume_of_triangle(r): \n        '''\n        return the volume of the triangle with a given radius\n        '''\n        return (r**3) * (math.pi)\n    \n    def circum_circle_volume(r): \n        '''\n        return volume of the circumcircle with a given radius\n        '''\n        return (math.pi * r ** 2)\n    \n    def perimeter(r): \n        '''\n        return the perimeter of the triangle with a given radius\n        '''\n        return 2 * r * math.pi\n    \n    def volume_of_triangle_volume(r): \n        '''\n        return volume of the triangle with a given radius\n        '''\n        return r**3 * math.pi\n    \n    def circumference(r): \n        '''\n        return the circumference of the triangle with a given radius\n        '''\n        return (2 * r * math.pi)\n    \n    def diameter(r) : \n        '''\n        return the diameter of the triangle with a given radius\n        '''\n        return math.sqrt(r**2 - 4 * r * math.pi)\n    \n    def perimeter_area(r) : \n        '''\n        return the perimeter of the triangle, given by r^2\n        '''\n        return r**2 * (math.pi)\n    \n    def circum_circle_perimeter_area(r): \n        '''\n        return the perimeter of the circumcircle with a given radius\n        '''\n        return r**2 * (math.pi)\n    \n    def triangle_volume(r): \n        '''\n        return the volume of the triangle, given by r^3\n        '''\n        return r**3 * (math.pi)\n    \n    def quadrilateral_volume(r): \n        '''\n        return the volume of the quadrilateral with a given radius\n        '''\n        return r**4 * (math.pi)\n    \n    def rectangle_volume(r): \n        '''\n        return the volume of the rectangle with a given radius\n        '''\n        return r**2 * (math.pi)\n    \n    def rectangle_area(r): \n        '''\n        return the area of the rectangle with a given radius\n        '''\n        return r * r * math.pi\n    \n    def rectangle_perimeter(r): \n        '''\n        return the perimeter of the rectangle with a given radius\n        '''\n        return 2 * r * math.pi\n    \n    def rectangle_perimeter_area(r): \n        '''\n        return the perimeter of the rectangle with a given radius\n        '''\n        return r**2 * (math.pi)\n    \n    def parallelogram_volume(r): \n        '''\n        return the volume of the parallelogram with a given radius\n        '''\n        return (r**2 * math.pi)\n    \n    def parallelogram_area(r): \n        '''\n        return the area of the parallelogram with a given radius\n        '''\n        return r * r * math.pi\n    \n    def parallelogram_perimeter(r): \n        '''\n        return the perimeter of the parallelogram with a given radius\n        '''\n        return 2 * r * math.pi\n    \n    def parallelogram_perimeter_area(r): \n        '''\n        return the perimeter of the parallelogram with a given radius\n        '''\n        return r**2 * (math.pi)\n    \n    def circle_area(r): \n        '''\n        return the area of the circle with a given radius\n        '''\n        return math.pi * r ** 2\n    \n    def circle_perimeter(r): \n        '''\n        return the perimeter of the circle with a given radius\n        '''\n        return 2 * math.pi * r\n    \n    def circle_volume(r): \n        '''\n        return the volume of the circle with a given radius\n        '''\n        return r ** 2 * math.pi\n    \n    def circle_volume_area(r): \n        '''\n        return the volume of the circle with a given radius\n        '''\n        return r ** 2 * math.pi\n    \n    def circle_perimeter_area(r): \n        '''\n        return the perimeter of the circle with a given radius\n        '''\n        return 2 * math.pi * r\n    \n    def circle_perimeter_volume(r): \n        '''\n        return the volume of the circle with a given radius\n        '''\n        return math.pi * r ** 2\n    \n    def circle_area(r): \n        '''\n        return the area of the circle with a given radius\n        '''\n        return math.pi * r ** 2\n    \n    def circle_volume(r): \n        '''\n        return the volume of the circle with a given radius\n        '''\n        return math.pi * r ** 2\n    \n    def square_area(r): \n        '''\n        return the area of the square with a given radius\n        '''\n        return r ** 2\n    \n    def square_volume(r): \n        '''\n        return the volume of the square with a given radius\n        '''\n        return r**2\n    \n    def square_volume_area(r): \n        '''\n        return the volume of the square with a given radius\n        '''\n        return r**2 * math.pi\n    \n    def square_perimeter_area(r): \n        '''\n        return the perimeter of the square with a given radius\n        '''\n        return 2 * r\n    \n    def square_volume_area(r): \n        '''\n        return the volume of the square with a given radius\n        '''\n        return r**2 * math.pi\n    \n    def triangle_area(r): \n        '''\n        return the area of the triangle with a given radius\n        '''\n        return (r**2) * math.pi\n    \n    def triangle_volume(r): \n        '''\n        return the volume of the triangle with a given radius\n        '''\n        return (r**2 * math.pi)\n    \n    def quadrilateral_area(r): \n        '''\n        return the area of the quadrilateral with a given radius\n        '''\n        return (r**2 * math.pi)\n    \n    def quadrilateral_volume(r): \n        '''\n        return the volume of the quadrilateral with a given radius\n        '''\n        return r**2 * math.pi\n    \n    def quadrilateral_volume_area(r): \n        '''\n        return the volume of the quadrilateral with a given radius\n        '''\n        return (r**2 * math.pi)\n    \n    def parallelogram_area(r): \n        '''\n        return the area of the parallelogram with a given radius"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r >= 0 :\n        c = (1/2)*(1-r/2)\n        s = ((1/2)**2)-c\n        return c*s\n    else :\n        raise ValueError(\"Radius should be positive.\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop\n    '''\n    '''\n    Implement the function using a loop"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start < 0 or end > len(array) - 1:\n        return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n    if start > end:\n        return 0\n    \n    while start<=end:\n        mid = (start+end)//2\n        if array[mid]>mid:\n            end = mid-1\n        else:\n            start = mid+1\n    return end\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    \n    if start == end:\n        return array[start]\n    \n    # If we are on the middle, no need to go back and check the next\n    if start > end:\n        return find_First_Missing(array,start,end-1)\n    \n    # There is no need to go back\n    # But if we are on the left side, no need to go back and check the next\n    if start == 0:\n        return array[end]\n    \n    # We need to go back and check the next\n    if array[start] < array[end]:\n        return find_First_Missing(array,start,end-1)\n    \n    # We need to go back and check the next\n    return find_First_Missing(array,start-1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array) - 1\n    if start>end:\n        return None\n    elif start == end:\n        return array[start]\n    elif array[start] == array[end]:\n        return array[end]\n    else:\n        mid = (start + end)//2\n        if array[mid] > array[end]:\n            return find_First_Missing(array,start,mid)\n        elif array[mid] < array[end]:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return mid\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    low = start\n    high = end\n    mid = (start+end) // 2\n    while high >= low:\n        mid = (start+end) // 2\n        if array[mid] < array[mid+1]:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    for i in range(start,end):\n        if array[i]!= array[i+1]:\n            return array[i]\n    return end\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start >= len(array):\n        print(\"No missing numbers\")\n        return\n    if end is None:\n        end = len(array)-1\n    if end-start == 1:\n        print(array[start])\n        return\n    midpoint = (start+end)//2\n    if array[midpoint]==midpoint:\n        return find_First_Missing(array,midpoint+1,end)\n    elif array[midpoint]>midpoint:\n        return find_First_Missing(array,start,midpoint)\n    else:\n        return find_First_Missing(array,midpoint+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    start=start if start<=end else start-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return\n    i,j = start,end\n    while i < j:\n        m = array[i] + array[j]\n        if m < array[j]:\n            i +=1\n        elif m > array[i]:\n            j -= 1\n        else:\n            return m\n    return array[i]\n    \n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # your code goes here\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n    \ndef clear_spaces(string):\n    '''\n    Write a function to remove all spaces in the given string.\n    '''\n    return string.replace(' ','')\n    \ndef convert_date(string):\n    '''\n    Read a date string and convert it into a YYYY-MM-DD string.\n    '''\n    return string.replace('-','').replace('/','')\n    \ndef create_text(string):\n    '''\n    Read a string and create a dictionary of the results.\n    '''\n    return {'description':string,'price':string.replace('\u00a3','')}\n    \ndef convert_dollars(string):\n    '''\n    Read a string and convert it into a dollar string.\n    '''\n    return string.replace('$','')\n    \ndef convert_to_dollar(string):\n    '''\n    Read a string and convert it into a dollar string.\n    '''\n    return string.replace('$','')\n    \ndef convert_to_pound(string):\n    '''\n    Read a string and convert it into a pound string.\n    '''\n    return string.replace('\u00a3','')\n    \ndef get_data(df):\n    '''\n    Get the data from the given dataframe\n    '''\n    return df.to_dict()\n    \ndef get_order_items(df):\n    '''\n    Get all of the order items from the given dataframe\n    '''\n    return df['Order Item'].tolist()\n    \ndef order_items(df):\n    '''\n    Get all of the order items from the given dataframe\n    '''\n    return df['Order Item'].tolist()\n    \ndef get_total(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total'].tolist()\n    \ndef get_total_greece(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total Greece'].tolist()\n    \ndef get_total_america(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America'].tolist()\n    \ndef get_number_of_orders(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Number of Orders'].tolist()\n    \ndef get_subtotal(df):\n    '''\n    Get the subtotal from the given dataframe\n    '''\n    return df['Subtotal'].tolist()\n    \ndef get_order_price(df):\n    '''\n    Get the order price from the given dataframe\n    '''\n    return df['Order Price'].tolist()\n    \ndef get_shipping_cost(df):\n    '''\n    Get the shipping cost from the given dataframe\n    '''\n    return df['Shipping Cost'].tolist()\n    \ndef get_unit_price(df):\n    '''\n    Get the unit price from the given dataframe\n    '''\n    return df['Unit Price'].tolist()\n    \ndef get_total_greece_subtotal(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total Greece Subtotal'].tolist()\n    \ndef get_total_america_subtotal(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal'].tolist()\n    \ndef get_order_qty(df):\n    '''\n    Get the order quantity from the given dataframe\n    '''\n    return df['Order Quantity'].tolist()\n    \ndef get_subtotal_greece(df):\n    '''\n    Get the subtotal from the given dataframe\n    '''\n    return df['Subtotal Greece'].tolist()\n    \ndef get_subtotal_america(df):\n    '''\n    Get the subtotal from the given dataframe\n    '''\n    return df['Subtotal America'].tolist()\n    \ndef get_total_greece_subtotal_greece(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total Greece Subtotal Greece'].tolist()\n    \ndef get_total_america_subtotal_america(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal America'].tolist()\n    \ndef get_total_america_subtotal_greece(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Greece'].tolist()\n    \ndef get_total_america_subtotal_greece_america(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Greece America'].tolist()\n    \ndef get_total_america_subtotal_subtotal_america(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Subtotal'].tolist()\n    \ndef get_total_america_subtotal_subtotal(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Subtotal'].tolist()\n    \ndef get_total_america_subtotal_greece(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Greece'].tolist()\n    \ndef get_total_america_subtotal_greece_america(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Greece America'].tolist()\n    \ndef get_total_america_subtotal_greece_subtotal_america(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Greece Subtotal America'].tolist()\n    \ndef get_total_america_subtotal_subtotal(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Subtotal'].tolist()\n    \ndef get_total_america_subtotal_subtotal_greece(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Subtotal Greece'].tolist()\n    \ndef get_total_america_subtotal_subtotal_america(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Subtotal America'].tolist()\n    \ndef get_total_america_subtotal_subtotal_greece_america(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Subtotal Greece Subtotal America'].tolist()\n    \ndef get_total_america_subtotal_subtotal_subtotal(df):\n    '''\n    Get the total from the given dataframe\n    '''\n    return df['Total America Subtotal Subtotal Subtotal'].tolist()\n    \ndef get_subtotal_greece_america(df):\n    '''\n    Get the subtotal from the given dataframe\n    '''\n    return df['Subtotal Greece America'].tolist()\n    \ndef get_subtotal_america(df):\n    '''\n    Get the subtotal from the given dataframe\n    '''\n    return df['Subtotal America'].tolist()\n    \ndef get_subtotal_america_america(df):\n    '''\n    Get the subtotal from the given dataframe\n    '''\n    return df['Subtotal America Subtotal America'].tolist()\n    \ndef get_subtotal_america_subtotal_america(df):\n    '''\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # get the length of the string\n    length = len(string)\n    # for every character in the string\n    for i in range(length):\n        # if the character is a space\n        if string[i] =='':\n            # replace the spaces with %20\n            string = string.replace(' ','%20')\n        else:\n            # otherwise, just add the character to the string\n            string += string[i]\n    # return the modified string\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    string = string.replace('-', '%20')\n    string = string.replace('.', '%20')\n    string = string.replace(':', '%20')\n    string = string.replace('/', '%20')\n    string = string.replace('(', '%20')\n    string = string.replace(')', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return''.join(string.split()"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = re.sub(' +', '%20', string)\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Write your code here\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for item in list:\n        if item % 2 == 0:\n            even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    evenList = []\n    for item in list:\n        if item % 2 == 0:\n            evenList.append(item)\n            \n    return evenList\n    \nprint(Split([1, 2, 3, 4, 5]))\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    numbers = []\n    for i in list:\n        if i % 2!= 0:\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = list[::2]\n    odd = list[1::2]\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = []\n    for i in range(len(list)):\n        if list[i]%2==0:\n            l.append(list[i])\n    return l\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if (i%2 == 0):\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if(i%2==0):\n            even.append(i)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Your code here\n    if len(list) % 2!= 0:\n        return False\n    \n    split = []\n    for i in range(len(list)):\n        if i % 2 == 0:\n            split.append(list[i])\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even = []\n    odd = []\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ((ele[0]+sub[0][0], ele[1]+sub[0][1]),\n            (ele[0]-sub[1][0], ele[1]-sub[1][1]),\n            (ele[0]+sub[1][0], ele[1]-sub[1][1]),\n            (ele[0]-sub[0][0], ele[1]+sub[0][1]),\n            (ele[0]+sub[0][0], ele[1]+sub[0][1]),\n            (ele[0]+sub[1][0], ele[1]-sub[1][1]),\n            (ele[0]-sub[1][0], ele[1]-sub[1][1]),\n            (ele[0]-sub[0][0], ele[1]-sub[0][1]),\n            (ele[0]+sub[0][0], ele[1]-sub[0][1]),\n            (ele[0]+sub[1][0], ele[1]+sub[1][1]))\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in ele: \n        if sub == []: \n            sub = [] \n        sub.append(i) \n    return sub \n    \ndef is_same(ele): \n    ''' \n    Write a function to check whether two coordinates are the same. \n    '''\n    if ele[0] == ele[1]: \n        return True\n    return False\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele.difference(sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele[0], ele[1]\n    if len(sub) > 1:\n        x, y = y, x\n        sub.pop()\n    if len(sub) == 1:\n        return sub[0]\n    return sub + [ (x, y+1), (x, y-1), (x+1, y), (x-1, y) ]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    n = len(sub)\n    if n == 0:\n        return sub\n    elif n == 1:\n        return [ele[0], ele[1]-1, ele[0], ele[1]+1]\n    else:\n        return [ele[0]+sub[0][0], ele[1]+sub[0][1], ele[0]+sub[1][0], ele[1]+sub[1][1]]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    if x-1 >= 0 and x-1 < len(tiles) and y-1 >= 0 and y-1 < len(tiles[0]):\n        if tiles[x-1][y-1] == 1:\n            sub.append((x-1,y-1))\n        if tiles[x-1][y] == 1:\n            sub.append((x-1,y))\n        if tiles[x+1][y-1] == 1:\n            sub.append((x+1,y-1))\n        if tiles[x+1][y] == 1:\n            sub.append((x+1,y))\n        if tiles[x][y-1] == 1:\n            sub.append((x,y-1))\n        if tiles[x][y+1] == 1:\n            sub.append((x,y+1))\n        \n        if not sub:\n            sub = []\n        return sub\n    else:\n        return []\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [ (ele[0] + ele[1], ele[2]) ] \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[1] == ele[0]:\n        if ele[1] == 0: return sub\n        sub.append((ele[1] - 1, ele[0]))\n        sub.append((ele[1] + 1, ele[0]))\n    elif ele[0] == 0:\n        if ele[1] == 0: return sub\n        sub.append((ele[1] - 1, ele[0]))\n        sub.append((ele[1] + 1, ele[0]))\n    else:\n        sub.append(ele)\n        return adjac(ele, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\", \" \").replace(\" \",\"_\").replace(\"_\",\" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text = text.replace(' ', '_')\n    text = text.replace('-', '_')\n    text = text.replace('(', '_')\n    text = text.replace(')', '_')\n    text = text.replace('{', '_')\n    text = text.replace('}', '_')\n    return text\n    \nif __name__ == '__main__':\n    \n    # Create a list of all our strings\n    L = [\n    'The sunset sets at twelve o'\n    ' clock.'\n    '2023 a.m.'\n    '2028 b.m.'\n    '2045 c.m.'\n    '2050 d.m.'\n    '2060 e.m.'\n    '2071 f.m.'\n    '2077 g.m.'\n    '208 h.m.'\n    '2093 i.m.'\n    '2139 j.m.'\n    '2138 k.m.'\n    '2145 l.m.'\n    '2148 m.m.'\n    '2159 n.m.'\n    '2176 o.m.'\n    '2180 p.m.'\n    '2184 q.m.'\n    '2190 r.m.'\n    '2198 s.m.'\n    '2295 t.m.'\n    '2300 u.m.'\n    '2316 v.m.'\n    '2322 w.m.'\n    '2363 x.m.'\n    '2368 y.m.'\n    '2371 z.m.'\n    '2380 w.m.'\n    '2416']\n    \n    # Call our helper function and replace all our spaces to underscores\n    # Take the list as a parameter.\n    # The list is a list of strings\n    output = replace_spaces(L)\n    print(output)"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('_','-')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\"  \", \"_\").replace(\"   \", \"_\").replace(\"    \", \"_\").replace(\"  \", \"_\").replace(\"   \", \"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('.','_')\n    text = text.replace(':','_')\n    text = text.replace('-','_')\n    text = text.replace('!','_')\n    text = text.replace('?','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    ans = []\n    for i, j in enumerate(text):\n        if j.isspace():\n            ans.append('_')\n            continue\n        elif j.isupper():\n            ans.append('_'+i+j)\n        else:\n            ans.append(i+j)\n    return ''.join(ans)"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n', '_')"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ', '_')\n    text = text.replace('  ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('  ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('  ','').replace('   ','')\n    #return text.replace('  ', '_').replace('   ', '_')\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    for num in num_list:\n        if num!= 0:\n            num_list.remove(num)\n            num_list.insert(len(num_list), num)\n    return num_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list:\n        i = 0\n        while i < len(num_list):\n            if num_list[i] == 0:\n                del num_list[i]\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            pass\n        else:\n            new_list.append(i)\n    return new_list\n    \ndef next_palindrome(list):\n    '''\n    Write a python function to check whether the given list is a palindrome or not.\n    '''\n    if list == list[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n    return new_list\n    \n    "
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = list(num_list)\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = 0\n            num_list.pop(i)\n    return num_list\n    \n    \n    \n    \n    "
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count=0\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            count+=1\n            del num_list[i]\n        else:\n            pass\n    if count>0:\n        for i in range(count):\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[i+1]\n            num_list[i+1] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n    \ndef move_one(num_list):\n    '''\n    Write a python function to move all 1s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 1:\n            num_list.pop(i)\n            num_list.append(1)\n    return num_list\n    \ndef move_two(num_list):\n    '''\n    Write a python function to move all 2s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 2:\n            num_list.pop(i)\n            num_list.append(2)\n    return num_list\n    \ndef move_three(num_list):\n    '''\n    Write a python function to move all 3s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 3:\n            num_list.pop(i)\n            num_list.append(3)\n    return num_list\n    \ndef move_four(num_list):\n    '''\n    Write a python function to move all 4s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 4:\n            num_list.pop(i)\n            num_list.append(4)\n    return num_list\n    \ndef move_five(num_list):\n    '''\n    Write a python function to move all 5s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 5:\n            num_list.pop(i)\n            num_list.append(5)\n    return num_list\n    \ndef move_six(num_list):\n    '''\n    Write a python function to move all 6s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 6:\n            num_list.pop(i)\n            num_list.append(6)\n    return num_list\n    \ndef move_seven(num_list):\n    '''\n    Write a python function to move all 7s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 7:\n            num_list.pop(i)\n            num_list.append(7)\n    return num_list\n    \ndef move_eight(num_list):\n    '''\n    Write a python function to move all 8s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 8:\n            num_list.pop(i)\n            num_list.append(8)\n    return num_list\n    \ndef move_nine(num_list):\n    '''\n    Write a python function to move all 9s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 9:\n            num_list.pop(i)\n            num_list.append(9)\n    return num_list\n    \ndef move_ten(num_list):\n    '''\n    Write a python function to move all 10s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 10:\n            num_list.pop(i)\n            num_list.append(10)\n    return num_list\n    \ndef move_eleven(num_list):\n    '''\n    Write a python function to move all 11s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 11:\n            num_list.pop(i)\n            num_list.append(11)\n    return num_list\n    \ndef move_twelve(num_list):\n    '''\n    Write a python function to move all 12s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 12:\n            num_list.pop(i)\n            num_list.append(12)\n    return num_list\n    \ndef move_thirteen(num_list):\n    '''\n    Write a python function to move all 13s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 13:\n            num_list.pop(i)\n            num_list.append(13)\n    return num_list\n    \ndef move_fourteen(num_list):\n    '''\n    Write a python function to move all 14s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 14:\n            num_list.pop(i)\n            num_list.append(14)\n    return num_list\n    \ndef move_fifteen(num_list):\n    '''\n    Write a python function to move all 15s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 15:\n            num_list.pop(i)\n            num_list.append(15)\n    return num_list\n    \ndef move_sixteen(num_list):\n    '''\n    Write a python function to move all 16s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 16:\n            num_list.pop(i)\n            num_list.append(16)\n    return num_list\n    \ndef move_seventeen(num_list):\n    '''\n    Write a python function to move all 17s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 17:\n            num_list.pop(i)\n            num_list.append(17)\n    return num_list\n    \ndef move_eighteen(num_list):\n    '''\n    Write a python function to move all 18s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 18:\n            num_list.pop(i)\n            num_list.append(18)\n    return num_list\n    \ndef move_nineteen(num_list):\n    '''\n    Write a python function to move all 19s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 19:\n            num_list.pop(i)\n            num_list.append(19)\n    return num_list\n    \ndef move_twenty(num_list):\n    '''\n    Write a python function to move all 20s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 20:\n            num_list.pop(i)\n            num_list.append(20)\n    return num_list\n    \ndef move_thirty(num_list):\n    '''\n    Write a python function to move all 21s to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 21:\n            num_list.pop(i)\n            num_list.append(21)\n    return num_list\n    \ndef move_forty(num_list):\n    '''\n    Write a python function to move all 22s to the end of the given list"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = list(map(lambda x: x if x!= 0 else 0, num_list))\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 1 or n == 0 : \n        return 0\n    a = 0\n    b = 0\n    for i in range(n) : \n        a = a + arr[i] \n        b = b + arr[i] \n    return a - b\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor=0\n    arr=[int(i) for i in arr]\n    n=len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            xor=xor^(arr[i]^arr[j])\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # First, use a bit array to represent the entire list\n    \n    arr = [0] + arr\n    \n    # Initialize a bit array to store the pairs of elements with a xor\n    pairs = [0]*(n+1)\n    \n    # Store the pairs with their xor\n    for i in range(1,n+1):\n        pairs[i] = (arr[i] ^ arr[i-1])\n    \n    # Sum of each pair\n    for i in range(1,n+1):\n        pairs[i] = pairs[i] + pairs[i-1]\n    \n    return pairs[n]\n    \n    \ndef pair_xor_Sum_2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize a bit array to store the pairs of elements with a xor\n    pairs = [0]*(n+1)\n    \n    # Store the pairs with their xor\n    for i in range(1,n+1):\n        pairs[i] = (arr[i] ^ arr[i-1])\n    \n    # Sum of each pair\n    for i in range(1,n+1):\n        pairs[i] = pairs[i] + pairs[i-1]\n    \n    return pairs[n]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(0,i):\n            if (arr[i]!= arr[j]) :\n                count = count + 1\n    if count == n-1 :\n        return True\n    else:\n        return False\ndef is_pairwise_xor(arr, n) :\n    '''\n    Write a python function to check if a given list of numbers contains pairs of xor values as a\n    pair of non-negative integers.\n    '''\n    # Write your code here\n    if (not pair_xor_Sum(arr, n)):\n        print(\"pairs not found\")\n    else:\n        print(\"pairs found\")\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    summ = 0\n    for i in range(len(arr)-1):\n        for j in range(i,len(arr)-1):\n            summ += arr[i] ^ arr[j]\n    return summ\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(len(arr)-1): \n        for j in range(i+1,len(arr)): \n            total += arr[j] ^ arr[i] \n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = sum(arr)\n    if x%n!= 0:\n        print(\"Not possible\")\n    else:\n        sum_ = 0\n        for i in range(0,n-2):\n            xor = x & arr[i]\n            sum_ = sum_ + xor\n        print(x)\n        print(sum_)\n    \n    \n    \n    \n    "
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0 or n == 1 : return 0\n    res = [0,0]\n    arr = sorted(arr)\n    l = len(arr)\n    for i in range(0,l-1) : \n        for j in range(i+1,l) : \n            if arr[i]!= arr[j] : \n                res[0] += 1\n                break\n    for i in range(0,l-1) : \n        for j in range(i+1,l) : \n            if arr[i]!= arr[j] : \n                res[1] += 1\n                break\n    return res[0]*res[1]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(map(lambda x: x^n, arr))\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # TODO: Create a new, sorted list\n    # Create a new list to keep track of the sorted elements\n    sorted_list = []\n    for el in iterable:\n        sorted_list.append(el)\n        # Move the next element one position up.\n        sorted_list.sort(reverse=True)\n    # return the sorted list\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=heapq.nlargest)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # create a heap\n    heap = []\n    # for each element in the iterable\n    for i in iterable:\n        # if element is greater than the heap's head,\n        # then heapify it, and add it to heap\n        heap_item = i\n        # if element is less than the heap's head\n        # then heapify it, and add it to heap\n        if len(heap) < 1:\n            heapq.heappush(heap, heap_item)\n        else:\n            # if element is greater than heap's head,\n            # then swap it with heap's head, and add it to heap\n            # then swap heap's head with the heap's tail\n            heapq.heapreplace(heap, heap_item)\n            heapq.heapify(heap)\n    # return the heap\n    return heap\n    "
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    it = iter(iterable)\n    hq.heapify(it)\n    for i in range(len(it)):\n        hq.heappushpop(it, it.next())\n        print(i, it, it.next())\n    return hq.heappop(it)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h,item)\n    for i in range(len(h)):\n        hq.heapreplace(h,hq.heappop(h) + hq.heappop(h))\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(0, len(iterable)):\n        for j in range(0, len(iterable) - i - 1):\n            if iterable[j] > iterable[j + 1]:\n                iterable[j], iterable[j + 1] = iterable[j + 1], iterable[j]\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Use a built-in function from the heapq module for heap-sort\n    n = len(iterable)\n    for i in range(n-1, 0, -1):\n        hq.heapify(iterable)\n        hq.heappushpop(iterable, hq.heappop(hq.heap))\n        # Reassign the value at i to 0\n        hq.heapify(iterable)\n        # Now do the same for the remaining items\n        for j in range(i):\n            hq.heapreplace(iterable, iterable[j])\n            hq.heapreplace(iterable, iterable[j])\n        # Return the heap\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # create a minheap to store the items in the heap\n    hq = []\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _heapify(iterable):\n        '''\n        Recursive helper for heapify.\n        '''\n        index = len(iterable) // 2\n        if index <= 0:\n            return iterable\n        if iterable[index] < iterable[index + 1]:\n            index += 1\n        if iterable[index] < iterable[-1]:\n            return iterable[index], iterable[index + 1]\n        return iterable[index + 1], iterable[-1]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable) // 2, -1, -1):\n        hq.heapify(iterable)\n        for j in range(len(iterable) - i - 1, -1, -1):\n            hq.heapreplace(iterable, hq.heappop(iterable))\n    return iterable\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = 0\n    if sale_amount >= actual_cost:\n        print(sale_amount)\n        print(actual_cost)\n        print(sale_amount/actual_cost)\n        profit_loss = sale_amount/actual_cost\n        print(profit_loss)\n    else:\n        print(actual_cost)\n        print(sale_amount)\n        print(actual_cost/sale_amount)\n        profit_loss = actual_cost/sale_amount\n        print(profit_loss)\n    return profit_loss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    noprob_noloss = False\n    # this is a list of only the amount which are not considered as profit and loss\n    noprob_noloss_list = [i for i in actual_cost if i not in sale_amount]\n    # returns the profit/loss of the given amount\n    if len(noprob_noloss_list) == 0:\n        return True,0\n    else:\n        return False,noprob_noloss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    import numpy as np\n    def check(x):\n        return x*1.0*np.exp(-x*x)/(np.sqrt(2.0*np.pi))\n    def check_norm(x):\n        return x*1.0*np.exp(-x*x)/(np.sqrt(2.0*np.pi))\n    def check_zero(x):\n        return x*1.0*np.exp(-x*x)/(np.sqrt(2.0*np.pi))\n    check_null = np.isnan(actual_cost) | np.isnan(sale_amount) | np.isnan(check_zero(actual_cost)) | np.isnan(check_norm(sale_amount)) | np.isnan(check_null)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #All items in the array is of type float, only do if cost is float\n    #If the amount is of type int or float, then do it\n    if type(actual_cost) == float:\n        if actual_cost <= sale_amount:\n            return True\n    else:\n        if actual_cost == sale_amount:\n            return True\n    \n    #If the amount is of type string, then do it\n    if type(actual_cost) == str:\n        if actual_cost == sale_amount:\n            return True\n    \n    #If the amount is of type int, then do it\n    if type(actual_cost) == int:\n        if actual_cost <= sale_amount:\n            return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost<sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_cost = actual_cost + sale_amount\n    profit_profit_cost = total_cost - sale_amount\n    profit_loss_profit = sale_amount - actual_cost\n    profit_loss_loss = actual_cost - sale_amount\n    return profit_profit_cost >= profit_loss_profit, profit_loss_profit_cost, profit_profit_cost, profit_loss_profit, profit_loss_loss, profit_loss_profit, profit_loss_loss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost < sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Check if the actual cost is greater than the minimum required profit\n    # and the actual profit is less than the minimum required profit.\n    # If so, it is no profit and no loss.\n    # If the actual profit is greater than the minimum required profit,\n    # it is no profit and no loss.\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = -9.75*v**0.16 + 0.62*v**0.55 + 0.62*v**0.9\n    return round(wind_chill,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # YOUR CODE HERE\n    \n    # convert input to float\n    v = float(v)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v is in km/h,t is in celsius\n    K = 6.112\n    C = 293.15\n    #K = 9.1\n    #C = 272.15\n    H = (v/2)*K\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<-6:\n        return int(-6)\n    elif v<-3:\n        return -1\n    elif v<0:\n        return int((v-1)+(math.log10((v-1)+1)**2))\n    elif v<1:\n        return int((v-2)+(math.log10((v-2)+1)**2))\n    elif v<2:\n        return int((v-3)+(math.log10((v-3)+1)**2))\n    elif v<4:\n        return int((v-4)+(math.log10((v-4)+1)**2))\n    elif v<5:\n        return int((v-5)+(math.log10((v-5)+1)**2))\n    elif v<6:\n        return int((v-6)+(math.log10((v-6)+1)**2))\n    elif v<7:\n        return int((v-7)+(math.log10((v-7)+1)**2))\n    elif v<8:\n        return int((v-8)+(math.log10((v-8)+1)**2))\n    elif v<9:\n        return int((v-9)+(math.log10((v-9)+1)**2))\n    elif v<10:\n        return int((v-10)+(math.log10((v-10)+1)**2))\n    else:\n        return int((v-11)+(math.log10((v-11)+1)**2))\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<-6:\n        return int(-6)\n    elif v<-3:\n        return int(-4)\n    elif v<0:\n        return int((v-1)*1.5)\n    elif v<1:\n        return int((v-2)*1.2)\n    elif v<2:\n        return int((v-3)*1)\n    elif v<4:\n        return int((v-4)*1.7)\n    elif v<5:\n        return int((v-5)*1.6)\n    elif v<6:\n        return int((v-6)*1.3)\n    elif v<7:\n        return int((v-7)*1.2)\n    elif v<8:\n        return int((v-8)*1.1)\n    elif v<9:\n        return int((v-9)*1.05)\n    elif v<10:\n        return int((v-10)*1)\n    else:\n        return int((v-11)*1.1)\ndef wind_direction(v,t):\n    '''\n    Write a function to calculate the wind direction rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<-6:\n        return int(-6)\n    elif v<-3:\n        return int(-4)\n    elif v<0:\n        return int((v-1)*1.4)\n    elif v<1:\n        return int((v-2)*1.3)\n    elif v<2:\n        return int((v-3)*1.2)\n    elif v<3:\n        return int((v-4)*1.5)\n    elif v<4:\n        return int((v-5)*1.6)\n    elif v<5:\n        return int((v-6)*1.4)\n    elif v<6:\n        return int((v-7)*1.3)\n    elif v<8:\n        return int((v-8)*1.3)\n    elif v<9:\n        return int((v-9)*1.6)\n    elif v<10:\n        return int((v-10)*1.6)\n    else:\n        return int((v-11)*1.6)\ndef wind_speed_direction(v,t):\n    '''\n    Write a function to calculate the wind direction and wind speed rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<-6:\n        return int(-6)\n    elif v<-3:\n        return int(-4)\n    elif v<0:\n        return int((v-1)*1.5)\n    elif v<1:\n        return int((v-2)*1.6)\n    elif v<2:\n        return int((v-3)*1.2)\n    elif v<3:\n        return int((v-4)*1.3)\n    elif v<4:\n        return int((v-5)*1.3)\n    elif v<5:\n        return int((v-6)*1.4)\n    elif v<6:\n        return int((v-7)*1.2)\n    elif v<8:\n        return int((v-8)*1.1)\n    elif v<9:\n        return int((v-9)*1)\n    elif v<10:\n        return int((v-10)*1.1)\n    else:\n        return int((v-11)*1.1)\ndef wind_direction_speed(v,t):\n    '''\n    Write a function to calculate the wind direction and wind speed rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<-6:\n        return int(-6)\n    elif v<-3:\n        return int(-4)\n    elif v<0:\n        return int((v-1)*1.4)\n    elif v<1:\n        return int((v-2)*1.3)\n    elif v<2:\n        return int((v-3)*1.2)\n    elif v<3:\n        return int((v-4)*1.3)\n    elif v<4:\n        return int((v-5)*1.3)\n    elif v<5:\n        return int((v-6)*1.4)\n    elif v<6:\n        return int((v-7)*1.2)\n    elif v<8:\n        return int((v-8)*1.1)\n    elif v<9:\n        return int((v-9)*1)\n    elif v<10:\n        return int((v-10)*1.1)\n    else:\n        return int((v-11)*1.1)\ndef wind_direction_speed_direction(v,t):\n    '''\n    Write a function to calculate the wind direction and wind speed rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<-6:\n        return int(-6)\n    elif v<-3:\n        return int(-4)\n    elif v<0:\n        return int((v-1)*1.5)\n    elif v<1:\n        return int((v-2)*1.6)\n    elif v<2:\n        return int((v-3)*1.2)\n    elif v<3:\n        return int((v-4)*1.3)\n    elif v<4:\n        return int((v-5)*1.3)\n    elif v<5:\n        return int((v-6)*1.4)\n    elif v<6:\n        return int((v-7)*1.2)\n    elif v<8:\n        return int((v-8)*1.1)\n    elif v<9:\n        return int((v-9)*1)\n    elif v<10:\n        return int((v-10)*1.1)\n    else:\n        return int((v-11)*1.1)\ndef wind_direction_speed_direction_direction(v,t):\n    '''\n    Write a function to calculate the wind direction and wind speed rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<-6:\n        return int(-6)\n    elif v<-3:"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w_chill = w_max - ((v**(1/2))/v)/(v**(1/5))\n    return round(w_chill,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = v*(9/5) + 32 #Convert wind velocity to celsius\n    C_max = 100 # max range of C values\n    C_min = 0 # min range of C values\n    C_chill = (C-C_min)/(C_max-C_min) #C_max-C_min\n    chill = math.ceil(C_chill + 2) # round value\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_factor = 0.621568 # k/m2/s\n    w_factor = (v/2.5)/v_factor\n    w_factor = math.log(math.log(w_factor,10))*v_factor\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index\n    wc = (v**4.61)/(v**6.25-1)\n    return round(wc,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #wind_chill = ((9*v)/(v+0.62)) + 35\n    #wind_chill = round(wind_chill, 2)\n    #print(wind_chill)\n    wind_chill = (10*math.log10(v)+32.25)\n    #wind_chill = round(wind_chill, 2)\n    return wind_chill\n    #return round(wind_chill, 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert wind speed in km/h to m/s\n    v = (v * 3.6)\n    \n    # Calculate the wind chill index as the formula\n    wci = (5.74 + 0.6215 * v + 0.4275 * v ** 2 + 35.75 * v ** 3 - 35.75 * math.log(v) - 0.4275)\n    \n    # Round the wind chill index to the next integer given the wind speed in m/s\n    wci = int(round(wci))\n    \n    # Return the wind chill index rounded to the next integer given the wind speed in m/s\n    return wci\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    names = []\n    for name in sample_names:\n        if name[0].islower():\n            names.append(name)\n    \n    if len(names) == 0:\n        return 0\n    \n    length_names = []\n    for name in names:\n        length_names.append(len(name))\n        \n    return sum(length_names)\n    \n    \n    \n    \ndef sum_length_of_names(names):\n    '''\n    Write a function to compute the sum of the length of a list of names.\n    '''\n    \n    return sum(len(name) for name in names)\n    \n    \n    \n    \ndef main():\n    '''\n    Main function.\n    '''\n    \n    names = ['Jude', 'Vani', 'Sid', 'Maria', 'Sophie', 'Kathy']\n    \n    sample_names = ['Kathy', 'Vani', 'Sid', 'Maria', 'Sophie', 'Jude']\n    \n    \n    print(sample_nam(sample_names))\n    print(sum_length_of_names(names))\n    \n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names=[]\n    for name in sample_names:\n        if not name[0].islower():\n            names.append(name)\n    print(names)\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def to_dict(string):\n        return dict([word.lower().split(\" \") for word in string.split(\" \")])\n    \n    sample_names = [to_dict(sample_name) for sample_name in sample_names]\n    \n    result = {}\n    for name in sample_names:\n        if name in result:\n            result[name] += 1\n        else:\n            result[name] = 1\n    \n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code here\n    # Remove lowercase letters and replace with uppercase letters.\n    for x in range(0, len(sample_names)):\n        if not sample_names[x].isalpha():\n            sample_names[x] = sample_names[x].upper()\n    return sample_names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # the sum is the sum of the lengths\n    s = 0\n    # we want to access the length of the string\n    for i in sample_names:\n        # we want to access the length of the string\n        # i is the name\n        if i.islower():\n            s += len(i)\n    # we want to return the sum\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_names = []\n    for name in sample_names:\n        if name[0].islower():\n            new_names.append(name)\n    return len(new_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    # Add the names to a list\n    names = []\n    # Add the names to the list\n    for name in sample_names:\n        if name[0].lower() == 'a':\n            names.append(name)\n        else:\n            total_length += len(name)\n    # Return the total length\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if len(sample_names) == 0:\n        return ''\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort(key=len, reverse=False)\n    return sum([len(name) for name in sample_names if name[0].islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for i in sample_names:\n        if i[0] == 'a':\n            result += len(i)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_3(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_4(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_5(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_6(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_7(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_8(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_9(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_10(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remove the parenthesis and closing parenthesis\n        items.pop()\n    else:\n        #removes a parenthesis\n        items.remove('(')\n        #we add the closing parenthesis\n        items.insert(len(items),')')\n        items.pop()\n    return items\ndef remove_parenthesis_11(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    for i in range(len(items)):\n        if items[i]=='(':\n            break\n        else:\n            i+=1\n    if items[i]==')':\n        #before we remove the parenthesis\n        items.remove('(')\n        #now we remove the closing parenthesis\n        i-=1\n        #now we remov"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    results = []\n    temp = []\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in items:\n        if i[:2]!= '(', i[:2]!= ')':\n            new_items.append(i)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == '':\n        return '[]'\n    elif items[0] == '(':\n        pos_1 = 0\n        pos_2 = 1\n        count = 1\n        for x in range(len(items)):\n            if items[x] == '(':\n                pos_1 += 1\n            elif items[x] == ')':\n                pos_2 += 1\n            if pos_1 == pos_2:\n                if count == 1:\n                    if pos_2 == len(items):\n                        pos_1 = 0\n                        break\n                else:\n                    pos_1 = pos_1 + 1\n                    count += 1\n                if items[x]!= ')':\n                    if items[x] == '(':\n                        pos_2 += 1\n                        count += 1\n                    elif items[x] == ')':\n                        pos_1 -= 1\n                        count += 1\n        if pos_1 == 0 and pos_2 == 0:\n            return '[' + items + ']'\n        else:\n            return '[' + items[pos_1: pos_2 + 1] + ']'\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # must add code here\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join(re.sub('\\\\(.*?)\\\\)', '', item)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # s = \"(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{'v'),(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{'v'),(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{'v'),(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{'v'),(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{'v'),(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{'v'),(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{'v')}\"\n    # items = s.split(',')\n    # for i in items:\n    #     print(i.split())\n    #     print(type(i))\n    #     if '(' in i:\n    #         s = i\n    #         print(s)\n    #         items.remove(i)\n    #         # break\n    #     elif ')' in i:\n    #         break\n    # return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # write your code here\n    my_list = list(items)\n    i = 0\n    parenthesis_remove = 0\n    while i < len(my_list):\n        if my_list[i] == \"(\":\n            parenthesis_remove += 1\n        elif my_list[i] == \")\":\n            parenthesis_remove -= 1\n        i += 1\n    \n    my_list = [item for item in my_list if item!= \"(\"]\n    if my_list[len(my_list) - 1] == \")\":\n        my_list.pop()\n    my_list = \"\".join(my_list)\n    return my_list\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = ''\n    items = items.replace('}', '')\n    items = items.replace('{', '')\n    if '(' in items and ')' in items:\n        items = items[:items.index('(') + 1] + items[items.index(')') + 1:]\n        items = re.sub(r'\\([^)]+\\)', '', items)\n        items = re.sub(r'\\(([^)]+)\\)', r'\\1', items)\n        items = re.sub(r'\\(([^)]+)\\)', r'\\1', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(([^)]*)\\)', r'\\1', items)\n        items = re.sub(r'\\(([^)]*)\\)', r'\\1', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\[.*?\\]', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(\\[.*?\\]\\)', '', items)\n        items = re.sub(r'\\(.*?\\)', '', items)\n        items = re.sub(r'\\(.*?\\"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Dictionaries\n    dict = {}\n    for i in range(1,n+1):\n        dict[i] = i * i\n    print(dict)\n    # print(dict)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    \n    return (n - 1) // "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2!= 0"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    x = math.sqrt(n)\n    y = n - x\n    if math.ceil(x) == math.floor(x) and n % 2 == 1:\n        return 1\n    elif n % 2 == 0:\n        return math.floor(y)\n    else:\n        return math.floor(y) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Empty list\n    L = []\n    \n    # If n is odd, return n+1, otherwise return n\n    if n & 1 == 1:\n        L.append(1)\n    else:\n        L.append(n)\n    \n    # Loop through until n is 0\n    while n:\n        # Check if n is even\n        if n & 1 == 1:\n            L.append(n+1)\n        # Add n/2 to the end\n        n = n//2\n    # Return the last number found\n    return L[-1]\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 2: \n        return n \n    elif n % 2 == 0: \n        return is_nonagonal(n-1) + 2\n    else: \n        return is_nonagonal(n//2) + 2\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    lst=[]\n    for i in range(1, n+1):\n        lst.append(i)\n        lst.append(n-i)\n        lst.append(n-i-1)\n    return lst\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2!= 0:\n        return is_nonagonal(n-1)\n    return n // 2\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    pattern = r'z'\n    text_to_search = text\n    # print(text_to_search)\n    text = re.sub(pattern, '', text_to_search)\n    text = text.replace(' ', '').replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace('\"', '').replace('(', '').replace(')', '').replace(')', '').replace('[', '').replace(']', '').replace('\\\\', '').replace('\"', '')\n    \n    #print(text)\n    \n    # do something with the search text and return the result\n    \n    \n    #print(text)\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZZ':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZZ':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'Z':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_lower_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' and 'a'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'za':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_upper_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' and 'A'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZA':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_z_all(text):\n    '''\n    Write a function that checks if a string contains 'z' and 'a'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'zA':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_a_all(text):\n    '''\n    Write a function that checks if a string contains 'z' and 'a'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'zA':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'Zz':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'Zz':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'Zz':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_lower_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' and'm'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzM':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_upper_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' and'm'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZM':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_z_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' and'm'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'zM':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_m_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' and'm'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'zM':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_lower_end(text):\n    '''\n    Write a function that checks if a string contains 'z' and 'e'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzE':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_upper_end(text):\n    '''\n    Write a function that checks if a string contains 'z' and 'e'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzE':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_z_end(text):\n    '''\n    Write a function that checks if a string contains 'z' and 'e'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzE':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_m_end(text):\n    '''\n    Write a function that checks if a string contains 'z' and 'e'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzE':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_lower_start(text):\n    '''\n    Write a function that checks if a string contains 'z' and's'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzS':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_upper_start(text):\n    '''\n    Write a function that checks if a string contains 'z' and's'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzS':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_z_start(text):\n    '''\n    Write a function that checks if a string contains 'z' and's'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzS':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_m_start(text):\n    '''\n    Write a function that checks if a string contains 'z' and's'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzS':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_lower_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z' and's' and'm'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzSm':\n            flag = 1\n            break\n    if flag == 0:\n        return 0\n    else:\n        return 1\ndef word_upper_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z' and's' and'm'.\n    '''\n    flag = 0\n    for x in text:\n        if x in 'ZzSm':\n            flag = 1\n            break\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text and 'z' not in text[0]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[0]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_end_start_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_end_start_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end_start_end_start_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_start_end_start_end_start_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if 'z' in text[1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end_end_start_start_end_start_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end_end_start_end_start_end_start_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_middle_middle_end_end_start_end_start_end_start_end_start_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if 'z' in text[1]:"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    for word in text.split():\n        if word[0] in 'Zz':\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text in words\n    list_text = re.split('[ ]+', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text.lower().replace('z', '').replace(' ', '').strip()\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (text[0]=='z'):\n        text=text[1:]\n    if len(text)==0:\n        return False\n    if(len(text)==1):\n        return True\n    elif(text[0]=='z'):\n        return False\n    if(text[-1]=='z'):\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile('[A-Z][a-z]')\n    if pattern.search(text):\n        if text.startswith('z'):\n            if text.endswith('z'):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'z')\n    return pattern.findall(text)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #str_to_check = r'(?<=\\w)'\n    str_to_check = r'(?<=\\w)([a-z])(?=\\w)'\n    #print(str_to_check)\n    \n    text_match = re.match(str_to_check,text)\n    if text_match:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    num = len(input)\n    res = []\n    for i in range(num):\n        res.append(input[i])\n    for i in range(num, k):\n        res.append(input[i])\n    for i in range(0, num-k):\n        res.append(res[i])\n    return res\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # if given array is empty or size is zero\n    if len(input)==0 or len(input)<=k:\n        return input\n    if k<len(input):\n        # move forward till the current position is not greater than the kth index\n        # then return input[k:]\n        for i in range(k,len(input)-1):\n            input[i], input[i+1] = input[i+1], input[i]\n        return input\n    if k==len(input):\n        # return input as we want to print it\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code here\n    if input.count(k) == 0:\n        return []\n    reversed_arr = [input[-1]]\n    for i in range(len(input) - 1, -1, -1):\n        if input[i]!= k:\n            reversed_arr.append(input[i])\n        else:\n            break\n    print(reversed_arr)\n    return reversed_arr\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return []\n    \n    if (k > len(input)):\n        print(\"Invalid Position\")\n        return\n    \n    output = []\n    for i in range(0, len(input), k):\n        output.append(input[i])\n    \n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        return \"invalid\"\n    if k == 0:\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_arr = []\n    for i in range(len(input)):\n        new_arr.append(input[-i - 1])\n    new_arr.reverse()\n    new_arr.append(input[-k-1])\n    return new_arr\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #print(input)\n    if len(input) == 0: \n        return []\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    r = []\n    while len(input) >= k: \n        r.append(input[-k]) \n        input = input[:-k] \n    return r + input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    i = n-1\n    reverse_indicies = 0\n    while i > 0:\n        reverse_indicies = (reverse_indicies + k) % n\n        if input[i] == 0:\n            i = i-1\n            continue\n        else:\n            i = i - 1\n    return input[::-1][:reverse_indicies]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    j = len(input)-1\n    while (i < j):\n        temp = input[i]\n        input[i] = input[j]\n        input[j] = temp\n        i += 1\n        j -= 1\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add items to the tuple\n    for item in test_dict:\n        test_tup = test_tup + (item, )\n    # Add items to the tuple\n    for item in test_dict.keys():\n        test_tup = test_tup + (item, )\n    # Return the tuple\n    return(test_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup[key] = test_dict[key]\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_dict.copy()\n    new_tup = tuple(new_tup.items())\n    test_tup = test_tup + new_tup\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        if key in test_tup[0]:\n            if isinstance(value, list):\n                test_tup[0][key] = test_tup[0][key] + value\n            else:\n                test_tup[0][key] = test_tup[0][key] + [value]\n        else:\n            test_tup[0][key] = value\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0]+test_dict[\"age\"]+test_dict[\"gender\"],\n                test_tup[1]+test_dict[\"height\"]+test_dict[\"weight\"])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple((test_tup, test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup[key] = test_dict[key]\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict)!= dict:\n        raise Exception('Tuple has to be a dictionary.')\n    elif type(test_dict) == dict:\n        for k in test_dict:\n            if k not in test_tup:\n                raise Exception('Key not found in dictionary: {}'.format(k))\n            elif type(test_dict[k])!= dict:\n                raise Exception('Value of key {} not a dictionary.'.format(k))\n            else:\n                add_dict_to_tuple(test_tup[k], test_dict[k])\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    for k,v in test_dict.items():\n        if isinstance(v,dict):\n            test_tup = test_tup + (k,)\n        else:\n            test_tup = test_tup + (k,v)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pathCount = 0\n    maximum = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if(cost[i][j]!= 0):\n                if(cost[i][j] > pathCount):\n                    pathCount = cost[i][j]\n                if(pathCount > maximum):\n                    maximum = pathCount\n    return maximum\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # We choose the cell at the top left of the given matrix, starting with the top left cell.\n    # If it is not the top left cell, we go down by one cell in the path.\n    # If we go down by one cell in the path, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by one cell. If we go down by one cell, we go down by one cell.\n    # We then go down by one cell. If we go down by one cell, we go down by on"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost == []:\n        return 0\n    \n    sumOfPaths = 0\n    countOfPaths = 0\n    for row in range(len(cost)):\n        for col in range(len(cost[0])):\n            if (row!= 0 and row!= len(cost)-1) and col!= 0 and col!= len(cost[0])-1:\n                pathLength = cost[row][col]\n                countOfPaths += 1\n                sumOfPaths += pathLength\n    \n    if countOfPaths == 0:\n        return 0\n    \n    return sumOfPaths/countOfPaths\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j] == 0:\n                cost[i][j] = 0\n            else:\n                cost[i][j] = cost[i][j] / cost[i][j]\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j] == 0:\n                cost[i][j] = 0\n            else:\n                paths.append([i,j,cost[i][j]])\n    \n    paths = sorted(paths,key=lambda x: x[2], reverse=True)\n    return paths[0]"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    \n    path = []\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    size = len(cost)\n    if size == 1:\n        return cost[0][0]\n    path = []\n    for i in range(size):\n        path.append([])\n        for j in range(size):\n            path[i].append(cost[i][j])\n    current = cost[0][0]\n    for i in range(1, size):\n        current = current + path[i][0]\n        for j in range(1, size):\n            current = current + path[i][j]\n    return current/size\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxPath(N,A,i,j):\n        if i<0 or j<0 or i>=N or j>=N:\n            return 0\n        if A[i][j]==0:\n            A[i][j]=1\n            return 1\n        if A[i][j]==1:\n            return 1\n        return maxPath(N,A,i,j-1) + maxPath(N,A,i-1,j) + maxPath(N,A,i-1,j-1)\n    def maxAveragePath(N,A):\n        pA=[0]*N\n        if N==0:\n            return 0\n        if A==[]:\n            return 0\n        pA[0]=0\n        pA[1]=A[0][0]\n        if pA[1]==1:\n            return 1\n        for i in range(2,N):\n            pA[i]=A[i][1]\n            pA[i]=pA[i]/pA[i-1]\n        return pA[0]\n    ans=0\n    for i in range(N):\n        for j in range(N):\n            if i==0 or j==0 or i==N-1 or j==N-1:\n                ans=maxAveragePath(N,A)\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # The goal of this problem is to find the maximum average of all the elements in the matrix\n    # We will return the array of elements as maximum of the elements in the matrix\n    #\n    # To take a look at the path, we would like to draw a path in the same way as shown\n    #\n    # For each node, compute the path sum in the matrix\n    #\n    # To take a look at the path, we would like to draw a path in the same way as shown\n    #\n    # We could look at the path by going through each cell, we could see if we can go through that cell, and if so, we compute the current total cost and add it to the current total cost of the path\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # if there are no paths, return 0\n    if len(cost) == 0:\n        return 0\n    \n    # if there are only 1 cell visited, return it\n    elif len(cost) == 1:\n        return cost[0]\n    \n    # calculate the sum of all the elements in the cost matrix\n    # because we do not want to take the square root of the matrix\n    sum = 0\n    for i in range(0, len(cost)):\n        sum += cost[i]\n    \n    # get the average\n    average = sum / len(cost)\n    \n    # if the sum is not divisible by the number of cells visited,\n    # return 0\n    if sum % len(cost)!= 0:\n        return 0\n    \n    # get the number of cells visited\n    # starting with the top-left cell\n    n = len(cost)\n    # calculate the total cost of the path\n    # recursively call the function with the cost of the path to the bottom right cell\n    # until we reach the top-right cell\n    totalCost = cost[n-1] + maxAverageOfPath(cost[0:n-1])\n    # return the max of the path\n    return max(totalCost, average)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    max = float('-inf')\n    path = []\n    path.append([cost[0][0]])\n    for i in range(1,m):\n        path.append(list(cost[i][0]))\n    path.append([cost[m-1][n-1]])\n    # A path is valid if all the cells in the path are visited\n    for x in range(m):\n        for y in range(n):\n            if path[x][y] == \"*\":\n                continue\n            if y == 0:\n                if x == 0:\n                    max += float(cost[x][y])/3\n                else:\n                    max += float(cost[x][y])/3\n            elif y == n-1:\n                if x == m-1:\n                    max += float(cost[x][y])/3\n                else:\n                    max += float(cost[x][y])/3\n            else:\n                if x == m-1:\n                    max += float(cost[x][y])/3\n                else:\n                    max += float(cost[x][y])/3\n    return round(max/len(path),3)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    students_list = list(students.keys())\n    for student in students_list:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_data[student] = students[student]\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for s in students:\n        if not s in filt:\n            filtered[s] = (0,0)\n        if s.height >= filt[s]:\n            filtered[s] = (s.height,s.weight)\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO\n    # TODO 1. Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    # TODO 2. Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    # Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    # TODO 3. Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    # Create a new dictionary with only the name of students. Use the new dictionary to filter students.\n    students['name'] = 'name'\n    students['height'] = 'height'\n    students['weight'] = 'weight'\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {key: [] for key in students}\n    \n    for key in students:\n        # for each student, determine if their height and weight are above the minimum height and weight\n        # only use min height and min weight, but use the other variables as the weights\n        if h > students[key][0] and w > students[key][1]:\n            filtered_data[key].append((students[key][0], students[key][1]))\n    \n    return filtered_data\n    \ndef sort_data(students):\n    '''\n    The input is given as - a dictionary with student names as keys, and a dictionary with float (student_height, student_weight) as values. Write a function that sorts the data based on a given key.\n    '''\n    #create a new dict with each key the name and the value the list of tuples\n    filtered_data = {key: [] for key in students}\n    for key in students:\n        for student in students[key]:\n            filtered_data[student[0]].append((student[0], student[1]))\n            \n    # sort the data based on the keys\n    # this sort sorts based on the student's height and weight\n    # by default the height is the second element in the tuple\n    filtered_data = sorted(filtered_data.values(),key=lambda tup: tup[1][0][0], reverse=True)\n    \n    return filtered_data\n    \ndef show_data(students):\n    '''\n    The input is a dictionary with student names as keys, and a dictionary with float (student_height, student_weight) as values.\n    '''\n    for key in students:\n        print(key)\n        for student in students[key]:\n            print(student[0] + \" \" + str(student[1]) + \"\\n\")\n    \ndef main():\n    '''\n    The main function of the program. Reads in student names, an input file, and shows the data.\n    '''\n    # read the file and store in data_file\n    data_file = open(\"students.txt\", \"r\")\n    data_file = data_file.read()\n    data_file = data_file.split(\"\\n\")\n    data_file = data_file[:-1]\n    \n    # load the data into data\n    # the for loop below helps us know that the data is a dictionary\n    # we are not going to store the data in a dictionary but we will be going\n    # to add it to a list in the list of data\n    students = {}\n    for student in data_file:\n        student = student.split(\" \")\n        students[student[0]] = student[1:]\n    \n    # show the data\n    show_data(students)\n    \n    # call the filter function\n    filtered_data = filter_data(students,0.9,0.7)\n    \n    # print out the data\n    show_data(filtered_data)\n    \n    # call the sort function\n    filtered_data = sort_data(filtered_data)\n    \n    # print out the data\n    show_data(filtered_data)\n    \n    # call the filter again\n    filtered_data = filter_data(students,0.9,0.7)\n    \n    # print out the data\n    show_data(filtered_data)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO-2: Create a function called filtered_data. The function should have one parameter, h.\n    # TODO-4: Add the 'if' statement to your function.\n    # TODO-5: Remove the pass and print the filtered data.\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            students[student] = 1\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #print(\"Enter the data:\")\n    #print(students)\n    print(\"Enter the minimum height and weight:\")\n    print(h,\",\",w)\n    for student in students.values():\n        if(student[1][0]>w and student[1][1]>h):\n            print(student)\n    "
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.keys():\n        height = 0\n        weight = 0\n        if h[\"height\"] > student[\"height\"]:\n            height = student[\"height\"]\n        if w[\"weight\"] > student[\"weight\"]:\n            weight = student[\"weight\"]\n        filtered_student = students[student]\n        filtered_student[\"height\"] = height\n        filtered_student[\"weight\"] = weight\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h<0 or w<0 or h>100 or w>100:\n        return 0\n    else:\n        for i in students.values():\n            if i[1]<h and i[2]<w:\n                return 1\n        return 0\n    # return [f for f in students.values() if f[1]>h and f[2]>w]\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = []\n    for student in students:\n        student_data = []\n        if (student[2][0] < h):\n            student_data.append(student)\n        if (student[2][1] < w):\n            student_data.append(student)\n        if (student_data!= []):\n            filtered_data.append(student_data)\n    return filtered_data\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = dict()\n    #num1 = set(nums1)\n    #num2 = set(nums2)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if num1.intersection(nums2):\n                    counter[i] = counter.get(i, 0) + 1\n                else:\n                    counter[j] = counter.get(j, 0) + 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n    \ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums1)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n    \ndef count_same_pair_3(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n    return count\n    \ndef count_same_pair_4(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2 and nums2[i] in nums1:\n            count += 1\n    return count\n    \ndef count_same_pair_5(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2 and nums2[i] in nums1:\n            count += 1\n    return count\n    \ndef count_same_pair_6(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n        else:\n            count += 0\n    return count\n    \ndef count_same_pair_7(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2 and nums2[i] in nums1:\n            count += 1\n    return count\n    \ndef count_same_pair_8(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n        else:\n            count += 0\n    return count\n    \ndef count_same_pair_9(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2 and nums1[i] not in nums2:\n            count += 1\n    return count\n    \ndef count_same_pair_10(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2 and nums2[i] in nums1:\n            count += 1\n    return count\n    \ndef count_same_pair_11(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n        else:\n            count += 0\n    return count\n    \ndef count_same_pair_12(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n        else:\n            count += 0\n    return count\n    \ndef count_same_pair_13(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n        else:\n            count += 0\n    return count\n    \ndef count_same_pair_14(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n        else:\n            count += 0\n    return count\n    \ndef count_same_pair_15(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n        else:\n            count += 0\n    return count\n    \ndef count_same_pair_16(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n        else:\n            count += 0\n    return count\n    \ndef count_same_pair_17(num"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2), \"The length of nums1 and nums2 must be the same\"\n    s = set(nums1)\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in s and nums2[i] in s:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # TODO: Your code here\n    return 0\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    # Swap the values of the lists\n    for x in range(len(nums1)):\n        for y in range(len(nums2)):\n            if nums1[x] == nums2[y]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    def same_pair(l1, l2):\n        count = 0\n        for i, j in zip(l1, l2):\n            if i == j:\n                count += 1\n        return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n            else:\n                return count\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    if power < 0:\n        power = -power\n        base = base * -1\n    for i in range(power + 1):\n        if base >= 10:\n            base = base // 10\n            sum += base\n        else:\n            sum += base\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power <= 0:\n        return 0\n    elif base == 0:\n        return 1\n    elif base == 1:\n        return 1\n    elif base == 2:\n        return power\n    else:\n        return power_base_sum(base - 1, power - 1) + power_base_sum(base - 2, power - 1) + power_base_sum(base - 3, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif power == 0:\n        return 1\n    elif base == 1:\n        return 1\n    else:\n        return base + power_base_sum(base-1, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        sum += base % 10\n        base = base // 10\n    return sum * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return int(str(base) + str(power))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base*(power+1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    base = int(base)\n    sum = 0\n    while base:\n        sum += base%10\n        base = int(base/10)\n    return sum * pow(base, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return base\n    else:\n        return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    if base < 10:\n        return base\n    else:\n        base_sum = power_base_sum(base, power - 1)\n        return base_sum * base\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_regex = re.compile(r'^(?P<quotation>[\" \"])(?P<value>.*?)(?P=quotation)')\n    matches = quotation_regex.finditer(text1)\n    return [match.group('value') for match in matches]\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'\\s(?P<value>\\w+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation1(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation3(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation4(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation5(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation6(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation7(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation8(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation9(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation10(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation11(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation12(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation13(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation14(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation15(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regular expression\n    regex = re.compile(r'(?P<value>[^\"]+) \"')\n    #Add regular expression to the text\n    text1 = regex.sub(r\"\\g<value>''\",text1)\n    #Remove all whitespace from the end of the string\n    text1 = text1.strip()\n    return text1\n    \ndef extract_quotation16(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" o"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = str.split(text1,'')\n    for i in range(len(text2)):\n        if len(text2[i]) > 0:\n            text2[i] = text2[i].split('-')\n            text2[i] = text2[i][0]\n    return text2\n    \ndef extract_proper_name(text):\n    '''\n    Write a function to extract the proper name of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef find_name(text):\n    '''\n    Write a function to find the name of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef extract_employer(text):\n    '''\n    Write a function to extract the employer name of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef find_employer(text):\n    '''\n    Write a function to find the employer name of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef extract_address(text):\n    '''\n    Write a function to extract the address of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef find_address(text):\n    '''\n    Write a function to find the address of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef extract_phone(text):\n    '''\n    Write a function to extract the phone number of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef find_phone(text):\n    '''\n    Write a function to find the phone number of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef extract_postal_code(text):\n    '''\n    Write a function to extract the postal code of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef find_postal_code(text):\n    '''\n    Write a function to find the postal code of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef extract_email(text):\n    '''\n    Write a function to extract the email of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef find_email(text):\n    '''\n    Write a function to find the email of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef extract_date(text):\n    '''\n    Write a function to extract the date of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef find_date(text):\n    '''\n    Write a function to find the date of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef extract_street(text):\n    '''\n    Write a function to extract the street of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef find_street(text):\n    '''\n    Write a function to find the street of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] = text[i].split('-')\n            text[i] = text[i][0]\n    return text[0]\n    \ndef extract_postal_code(text):\n    '''\n    Write a function to extract the postal code of the given text.\n    '''\n    text = str.lower(text)\n    text = str.split(text,'')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            text[i] "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.replace(\"\u2018\", \"'\").replace(\"\u2019\", '\"').replace('\u201d', '\"').replace('\u201c', '\"')\n    if text.count('\"') == text.count('\"'):\n        return \"\".join([s for s in text if s.isalpha() or s.isnumeric()])\n    else:\n        return '\"' + \"\".join([s for s in text if s.isalpha() or s.isnumeric()]) + '\"'\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_marks_list = list(text1)\n    list_length = len(quotation_marks_list)\n    for index in range(list_length):\n        if quotation_marks_list[index] =='':\n            quotation_marks_list[index] = '\\n'\n    quotation_marks_list = ''.join(quotation_marks_list)\n    return quotation_marks_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 == '':\n        return []\n    if text1.startswith('\"') == True:\n        return [text1[1:]]\n    else:\n        return []\ndef split_quotation(text1):\n    '''\n    Write a function to split the quotation marks from the given string.\n    '''\n    if text1 == '':\n        return []\n    if text1.startswith('\"') == True:\n        return ['\\\\\"']\n    else:\n        return []\ndef convert_quotation_to_list(text1):\n    '''\n    Write a function to convert quotation marks from the given string to a list.\n    '''\n    if text1 == '':\n        return []\n    if text1.startswith('\"') == True:\n        return ['\\\\\"']\n    else:\n        return []\ndef remove_quotation(text1):\n    '''\n    Write a function to remove quotation marks from the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return ''\n    else:\n        return text1\ndef remove_all_quotation(text1):\n    '''\n    Write a function to remove quotation marks from the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return ''\n    else:\n        return ''\ndef convert_string_to_list(text1):\n    '''\n    Write a function to convert string to a list.\n    '''\n    if text1 == '':\n        return []\n    if text1.startswith('\"') == True:\n        return ['\\\\\"']\n    else:\n        return []\ndef add_quotation(text1):\n    '''\n    Write a function to add quotation marks to the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1\n    else:\n        return text1+'\\\\\"'\ndef remove_quotation_end(text1):\n    '''\n    Write a function to remove quotation mark from the end of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return ''\n    else:\n        return text1[-1]\ndef remove_quotation_beginning(text1):\n    '''\n    Write a function to remove quotation mark from the beginning of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return ''\n    else:\n        return text1[:1]\ndef remove_all_quotation_end(text1):\n    '''\n    Write a function to remove quotation mark from the end of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return ''\n    else:\n        return text1[-1:]\ndef remove_all_quotation_beginning(text1):\n    '''\n    Write a function to remove quotation mark from the beginning of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return ''\n    else:\n        return text1[:1]\ndef remove_quotation(text1):\n    '''\n    Write a function to remove quotation marks from the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1[1:]\n    else:\n        return text1\ndef remove_quotation_beginning_end(text1):\n    '''\n    Write a function to remove quotation mark from the beginning of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1[1:]\n    else:\n        return text1\ndef remove_all_quotation_beginning(text1):\n    '''\n    Write a function to remove quotation mark from the beginning of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1[1:]\n    else:\n        return text1\ndef remove_quotation_end(text1):\n    '''\n    Write a function to remove quotation mark from the end of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1\n    else:\n        return text1[:-1]\ndef remove_all_quotation_end(text1):\n    '''\n    Write a function to remove quotation mark from the end of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1[:-1]\n    else:\n        return text1\ndef remove_quotation_beginning_end(text1):\n    '''\n    Write a function to remove quotation mark from the beginning of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1[1:]\n    else:\n        return text1\ndef remove_quotation_end(text1):\n    '''\n    Write a function to remove quotation mark from the end of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1[:-1]\n    else:\n        return text1\ndef remove_quotation_beginning(text1):\n    '''\n    Write a function to remove quotation mark from the beginning of the given string.\n    '''\n    if text1 == '':\n        return ''\n    if text1.startswith('\"') == True:\n        return text1[1:]\n    else:\n        return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # for quotes\n    q = re.findall('\"([^\"]+)\"',text1)\n    q = ''.join(q)\n    # for square brackets\n    s = re.findall('[^\"]+\"',text1)\n    s = ''.join(s)\n    # for single quotes\n    q1 = re.findall('\"[^\"]+\"',text1)\n    q1 = ''.join(q1)\n    # if there is only one string in the string\n    if len(q)==0 and len(s)==0:\n        q = q1\n        s = q1\n    return s,q\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_regex = re.compile(r'[ ]{2,}')\n    match = quotation_regex.search(text1)\n    match = quotation_regex.findall(text1)\n    return [x.strip() for x in match]\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    qm1 = re.compile(\"[\u2018\u2019]\")\n    qm2 = re.compile(\"[\u201c\u201d]\")\n    qm3 = re.compile(\"[\u2018\u2019]\")\n    qm4 = re.compile(\"[\u201c\u201d]\")\n    qm5 = re.compile(\"[\u2018\u2019]\")\n    quotation = \"\"\n    for char in text1:\n        if char =='':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '\\\"':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ',':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '&':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == \"'\":\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ':':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '%':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '+':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '-':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '?':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '!':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '(':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ')':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '.':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '{':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '}':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ',':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ']':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ']':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ';':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ':':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '?':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '{':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '}':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '&':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '`':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '#':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '!':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '+':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '\"':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '&':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '*':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '$':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '%':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ',':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '<':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '>':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char =='':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '#':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '(' or char == '[' or char == '{' or char == '(' or char == ']':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '.':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '.':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ':' or char == ';':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ',':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ')':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '}':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '}':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ':':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '?':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '{':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '}':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '%':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ',':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ')' or char == ']':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == ']':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '\\\"':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '`':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '\u2018\u2019':\n            if quotation == \"\":\n                quotation = char\n            else:\n                quotation += char\n        elif char == '\u201c\u201d':\n            if quotation == \"\""
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n    return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = test_tup[0]\n    t_1 = test_tup[1]\n    t_2 = test_tup[2]\n    ans = tuple(map(lambda x,y: x * y, t_1, t_2))\n    return ans\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2, *t_3 = test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x: x * test_tup[x+1], range(len(test_tup) - 1)))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return_tup = []\n    for i in range(len(test_tup)):\n        return_tup.append(test_tup[i] * test_tup[i+1])\n    return return_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_N=len(test_tup)\n    t_i = 0\n    t_j = 1\n    test_tup_1=[]\n    while t_j < t_N:\n        test_tup_1.append(test_tup[t_i] * test_tup[t_j])\n        t_i+=1\n        t_j+=1\n    return tuple(test_tup_1)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n    t_tup = test_tup[0]\n    t_tup_new = ()\n    for i in range(1,len(test_tup)):\n        t_tup_new = t_tup_new + (t_tup[i] * t_tup[i+1])\n    return t_tup_new\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #Write your code here\n    t_1, t_N = test_tup\n    return tuple([t_i*t_i for t_i in t_N])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # TODO\n    if len(test_tup) == 1:\n        return test_tup\n    else:\n        return tuple(test_tup[0]*(test_tup[1]+1))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert len(test_tup) >= 2, 'the list must be a tuple'\n    i = 1\n    temp = []\n    while i < len(test_tup):\n        temp.append(test_tup[i] * test_tup[i+1])\n        i += 2\n    return tuple(temp)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(i) for i in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #return sum([i + j for i,j in zip(lst1,lst2)])\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for x in range(len(lst1)):\n        sum += lst1[x] + lst2[x]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Your code goes here\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return(sum(lst1)) + sum(lst2)\n    \nprint(\"Sum of the first two lists:\",sum_list([1,2,3,4], [4,5,6,7]))\nprint(\"Sum of the first two lists:\",sum_list([1,2,3,4], [4,5,6,7]))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    print('adding to', lst1 + lst2)\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #raise NotImplementedError('TODO')\n    #example\n    #>>> sum_list([1,2,3,4,5], [2,3,4,5,6])\n    #[2, 4, 6]\n    #raise NotImplementedError('TODO')\n    return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must be of same size\")\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    return list(map(list, groupby(sorted(nums))))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list=[]\n    for ele in nums:\n        if ele not in new_list:\n            new_list.append(ele)\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums]\n    grouped_by_idx = groupby(sorted(nums), lambda x: x[0])\n    for group in grouped_by_idx:\n        group_nums = [item[0] for item in group]\n        if len(set(group_nums)) < len(group_nums):\n            new_group = []\n            for group_num in group_nums:\n                if group_num not in new_group:\n                    new_group.append(group_num)\n            grouped_by_idx[group_nums] = new_group\n    \n    nums = list(set.intersection(*grouped_by_idx.values()))\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    '''\n    1. Two lists are used as a group.\n    2. Two lists are formed by slicing the second list and the first list.\n    3. We can start iterating from the second list, and check if there are duplicates. If there are duplicates, we remove them from the first list, otherwise we append them.\n    4. If there are duplicates, we sort them in order of their occurrence.\n    5. At the end, we return the list of unique elements.\n    '''\n    grouped = groupby(sorted(nums), lambda x: x[1]-x[0]) # the key is the first number and the value is the list of numbers\n    unique_nums = list(grouped.keys()) # keys are the numbers\n    unique_nums = sorted(unique_nums, key=lambda x: grouped[x][1]) # sorted in ascending order, so we get the list of unique numbers\n    return unique_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # your code goes here\n    if len(nums) < 3:\n        return nums\n    else:\n        res_list = []\n        seen = set()\n        for i, el in enumerate(nums):\n            if not (el in seen):\n                seen.add(el)\n                if i < len(nums)-2:\n                    if nums[i+2] == nums[i+1] and nums[i] == nums[i+1]:\n                        del nums[i+1]\n                        del nums[i]\n                        res_list.append(nums[i])\n                        continue\n                else:\n                    res_list.append(nums[i])\n                    del nums[i]\n                    del nums[i]\n        return res_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    count = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 0\n        if count > 2:\n            break\n        i += 1\n    \n    return nums[i:]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    i = 0\n    while i < len(nums):\n        current = nums[i]\n        if current not in res:\n            res.append(current)\n            i += 1\n        else:\n            i += 1\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    dict = {}\n    for i in nums:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return [dict[i] for i in dict if dict[i] > 1]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    '''\n    We are going to go through each number and see if it is the same as\n    it is already in the list. If not, then we need to append the number\n    to the list, so we can iterate through the list and see if it is\n    duplicated, if it is duplicated, then we don't need to add it to the\n    list, otherwise we need to iterate through it again and see if it\n    is a duplicate, if it is then we need to check to see if it is\n    repeated. We will use two sets, to check if a number is a duplicate\n    and repeat.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    # Use two sets to find out if a number is a duplicate. If it is, then\n    # iterate through the list and check if it is repeated. If it is, then\n    # return the number and leave the number in a duplicate set.\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    '''\n    Reminder:\n    We will always need to iterate through each number, and as soon as\n    it is not found in the list, we will append the number to the\n    duplicate set.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    '''\n    We will start by iterating through the list and checking if each number\n    is already in a duplicate set. If not, then we will append the number\n    to the duplicate set, otherwise we will iterate through the list and\n    check if it is repeated, if it is repeated then return the number and\n    leave the number in a duplicate set.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    '''\n    We will iterate through the list and iterate through the list\n    until we have reached the end of the list.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    '''\n    If the current number is already in a duplicate set, then we\n    will return it and leave it in a duplicate set.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    '''\n    We will iterate through the list and check if the current number\n    is in a duplicate set. If not, then we will append the current\n    number to a duplicate set.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    '''\n    Once we have found a duplicate set, we will iterate through the\n    list again until we reach the end of the list.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    '''\n    After iterating through the list and checking every number, we will\n    iterate through the list and check if the current number is in\n    a duplicate set. If not, then we will add the current number\n    to a duplicate set, otherwise we will iterate through the list\n    and check if it is repeated.\n    '''\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # write a helper function that accepts a list of numbers\n    # and returns a list with only distinct elements\n    # this function is also able to remove any duplicates from the list\n    # see the solution code for a more efficient solution\n    \n    # write your solution here\n    return list(set(nums))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r <= 0:\n        print('Error: radius should be positive')\n    if h <= 0:\n        print('Error: height should be positive')\n    if r > 1 and r < 1.0 and h > 1 and h < 1.0:\n        return (1/math.pi)*(4*math.pi*r*h)\n    else:\n        print('Error: r and h should be in the range [0,1]')\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*(r**2)*h\ndef lado_convexo(r,h,n):\n    '''\n    This function calculates the x,y,z coordinates of the bounding box of the first cone given its area and its height and its radius.\n    '''\n    return (r*n*math.cos(math.radians(60)))\ndef lado_concreto(r,h,n):\n    '''\n    This function calculates the x,y,z coordinates of the bounding box of the first cone given its area and its height and its radius.\n    '''\n    return (r*n*math.sin(math.radians(60)))\ndef area(x,y,z):\n    '''\n    This function calculates the area of the cone.\n    '''\n    return math.sqrt(x**2 + y**2 + z**2)\ndef z_surface(x,y,r):\n    '''\n    This function calculates the z-coordinates of the surface of the cone.\n    '''\n    return x*y*(1-math.cos(math.radians(60)))\ndef z_cone(x,y,r,h):\n    '''\n    This function calculates the z-coordinates of the cone.\n    '''\n    return x*y*(1-math.cos(math.radians(60)))+r*math.cos(math.radians(60))*h\ndef line_vertices(a,b,c):\n    '''\n    This function calculates the vertices of a line connecting the two vertices.\n    '''\n    return (a,b),(c,b),(a,c)\ndef line_lines(a,b,c,d):\n    '''\n    This function calculates the lines of a line connecting the two points.\n    '''\n    return a,b,c,d\ndef line_trim(p1,p2,p3):\n    '''\n    This function calculates the trimming of a line.\n    '''\n    return (p1,p2),(p3,p1),(p3,p2)\ndef line_trim_2(p1,p2,p3,p4):\n    '''\n    This function calculates the trimming of a line.\n    '''\n    return (p1,p2),(p3,p4),(p3,p2)\ndef line_calculate(p1,p2,p3,p4):\n    '''\n    This function calculates the distance between the two points.\n    '''\n    return math.sqrt(p1**2 + p2**2 + p3**2 + p4**2)\ndef line_intersect(p1,p2,p3,p4):\n    '''\n    This function calculates the intersection of the line defined by the two points.\n    '''\n    # horizontal intersection of line\n    # p1,p2 intersects\n    # p3,p4 intersects\n    # calculate the intersection point of the line\n    # and the line\n    # (p2,p3),(p3,p4) of line intersection\n    # in 2D\n    # if p2,p3 or p4 are equal\n    # then line intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # (p1,p2) of line\n    # returns p1,p2,p3,p4\n    return (p1,p2),(p3,p4),(p2,p3),(p4,p3)\ndef line_intersect_2(p1,p2,p3,p4):\n    '''\n    This function calculates the intersection of the line defined by the two points.\n    '''\n    # horizontal intersection of line\n    # p1,p2 intersects\n    # p3,p4 intersects\n    # calculate the intersection point of the line\n    # and the line\n    # (p2,p3),(p3,p4) of line intersection\n    # in 2D\n    # if p2,p3 or p4 are equal\n    # then line intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line\n    # (p1,p2) of line\n    # intersects\n    # the line\n    # (p3,p4) of line\n    # intersects\n    # the line"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * r * h \n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    f = (math.sin(math.radians(h)))*math.cos(math.radians(r))\n    l = 2*(math.pi*r*f)\n    return l\ndef rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    f = (math.sin(math.radians(h)))*math.cos(math.radians(r))\n    l = 4*(math.pi*r*f)\n    return l\ndef triangle(x,y):\n    '''\n    Write a function to find the area of a triangle given the x and y coordinates.\n    '''\n    area = 0.5*(x**2 + y**2)\n    return area\ndef line(x,y):\n    '''\n    Write a function to find the area of a triangle given the x and y coordinates.\n    '''\n    area = (x*y)\n    return area\ndef cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    l = 2*math.pi*r*(math.sin(math.radians(h)))\n    return l\ndef triangle_cone(x,y):\n    '''\n    Write a function to find the lateral surface area of a triangle given the x and y coordinates.\n    '''\n    l = (math.sin(math.radians(y)))*(x**2 + y**2)\n    return l\ndef rayleigh_cone(x,y):\n    '''\n    Write a function to find the lateral surface area of a cone given the x and the y coordinates.\n    '''\n    l = (math.sin(math.radians(x)))*(math.cos(math.radians(y)))\n    return l\ndef line_rayleigh_cone(x,y):\n    '''\n    Write a function to find the lateral surface area of a cone given the x and the y coordinates.\n    '''\n    l = (math.cos(math.radians(x)))*(math.cos(math.radians(y)))*(math.sin(math.radians(x)))\n    return l\ndef line_rayleigh_cone(x,y):\n    '''\n    Write a function to find the lateral surface area of a cone given the x and the y coordinates.\n    '''\n    l = (math.cos(math.radians(x)))*(math.cos(math.radians(y)))*(math.sin(math.radians(y)))\n    return l\ndef eqn_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    l = 0.5*(math.sin(math.radians(h)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.cos(math.radians(h)))*(math.cos(math.radians(r)))*(math.cos(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.cos(math.radians(h)))*(math.cos(math.radians(r)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.cos(math.radians(h)))*(math.cos(math.radians(r)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    l = (math.sin(math.radians(h)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.cos(math.radians(h)))*(math.cos(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.cos(math.radians(h)))*(math.cos(math.radians(r)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.cos(math.radians(h)))*(math.cos(math.radians(r)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.sin(math.radians(h)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.sin(math.radians(h)))*(math.cos(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.cos(math.radians(h)))*(math.cos(math.radians(r)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.sin(math.radians(h)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.sin(math.radians(h)))*(math.sin(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.cos(math.radians(h)))*(math.cos(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.sin(math.radians(h)))*(math.sin(math.radians(r)))*(math.cos(math.radians(r)))\n    return l\ndef eqn_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (math.sin(math.radians(h)))*(math.cos(math.radians(r)))\n    return l\ndef eqn_rayleigh_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    l = (mat"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #import math\n    import math\n    def surfaceArea(r,h):\n        '''\n        Calculate the surface area given the radius and height.\n        '''\n        return r*h\n    return surfaceArea(r,h)\n    \n    \ndef peri(p,l):\n    '''\n    returns the perimeter of the given polygon as a list of points\n    '''\n    p.sort()\n    perimeter = []\n    for i in range(len(p)-1):\n        l.append(p[i]+p[i+1])\n        l.append(p[i]+p[i+1])\n        l.append(p[i]+p[i+1])\n    return l\n    \ndef lineal(p,l):\n    '''\n    returns the lineal area of the given polygon as a list of points\n    '''\n    p.sort()\n    perimeter = []\n    for i in range(len(p)-1):\n        l.append(p[i]+p[i+1])\n        l.append(p[i]+p[i+1])\n        l.append(p[i]+p[i+1])\n    return l\n    \ndef perimeter(p,l):\n    '''\n    returns the perimeter of the given polygon as a list of points\n    '''\n    p.sort()\n    perimeter = []\n    for i in range(len(p)-1):\n        perimeter.append(p[i]+p[i+1])\n    return perimeter\n    \ndef volume(p,l):\n    '''\n    returns the volume of the given polygon as a list of points\n    '''\n    p.sort()\n    volume = []\n    for i in range(len(p)-1):\n        volume.append(p[i]+p[i+1])\n    return volume\n    \ndef lines(p,l):\n    '''\n    returns the area of the line that encloses all the points in p\n    '''\n    p.sort()\n    perimeter = []\n    for i in range(len(p)-1):\n        perimeter.append(p[i]+p[i+1])\n    return perimeter\n    \ndef segment(p,l):\n    '''\n    returns the segment of the given polygon as a list of points\n    '''\n    p.sort()\n    perimeter = []\n    for i in range(len(p)-2):\n        perimeter.append(p[i]+p[i+1]+p[i+2])\n    return perimeter\n    \ndef area(p,l):\n    '''\n    returns the area of the given polygon as a list of points\n    '''\n    p.sort()\n    perimeter = []\n    for i in range(len(p)-2):\n        perimeter.append(p[i]+p[i+1]+p[i+2])\n    return perimeter\n    \ndef parallelogram(p,l):\n    '''\n    returns the parallelogram area of the given polygon as a list of points\n    '''\n    p.sort()\n    area = []\n    for i in range(len(p)-2):\n        area.append(p[i]+p[i+1]+p[i+2])\n    return area\n    \ndef parallelogram_line(p,l):\n    '''\n    returns the parallelogram area of the given polygon as a list of points\n    '''\n    p.sort()\n    line = []\n    for i in range(len(p)-3):\n        line.append(p[i]+p[i+1]+p[i+2]+p[i+3])\n    return line\n    \ndef polygon_area(p,l):\n    '''\n    returns the area of the given polygon as a list of points\n    '''\n    p.sort()\n    volume = []\n    for i in range(len(p)-2):\n        volume.append(p[i]+p[i+1]+p[i+2])\n    return volume\n    \ndef parallelogram_area(p,l):\n    '''\n    returns the area of the given polygon as a list of points\n    '''\n    p.sort()\n    volume = []\n    for i in range(len(p)-3):\n        volume.append(p[i]+p[i+1]+p[i+2]+p[i+3])\n    return volume\n    \ndef parallelogram_line(p,l):\n    '''\n    returns the parallelogram area of the given polygon as a list of points\n    '''\n    p.sort()\n    line = []\n    for i in range(len(p)-3):\n        line.append(p[i]+p[i+1]+p[i+2]+p[i+3])\n    return line\n    \ndef parallelogram_perimeter(p,l):\n    '''\n    returns the perimeter of the given polygon as a list of points\n    '''\n    p.sort()\n    volume = []\n    for i in range(len(p)-3):\n        volume.append(p[i]+p[i+1]+p[i+2]+p[i+3])\n    return volume\n    \ndef parallelogram_vertical(p,l):\n    '''\n    returns the vertical area of the given polygon as a list of points\n    '''\n    p.sort()\n    volume = []\n    for i in range(len(p)-3):\n        volume.append(p[i]+p[i+1]+p[i+2])\n    return volume\n    \ndef parallelogram_horizontal(p,l):\n    '''\n    returns the horizontal area of the given polygon as a list of points\n    '''\n    p.sort()\n    volume = []\n    for i in range(len(p)-3):\n        volume.append(p[i]+p[i+1]+p[i+2])\n    return volume\n    \ndef parallelogram_line(p,l):\n    '''\n    returns the parallelogram area of the given polygon as a list of points\n    '''\n    p.sort()\n    line = []\n    for i in range(len(p)-3):\n        line.append(p[i]+p[i+1]+p[i+2])\n    return line\n    \ndef parallelogram_area(p,l):\n    '''\n    returns the area of the given polygon as a list of points\n    '''\n    p.sort()\n    area = []\n    for i in range(len(p)-3):\n        area.append(p[i]+p[i+1]+p[i+2]+p[i+3])\n    return area\n    \ndef parallelogram_perimeter(p,l):\n    '''\n    returns the perimeter of the given polygon as a list of points\n    '''\n    p.sort()\n    perimeter = []\n    for i in range(len(p)-3):\n        perimeter.append(p[i]+p[i+1]+p[i+2]+p[i+3])\n    return perimeter\n    \ndef parallelogram_vertical(p,l):\n    '''\n    returns the vertical area of the given polygon as a list of points\n    '''\n    p.sort()\n    volume = []\n    for i in range(len(p)-3):\n        volume.append(p[i]+p[i+1]+p[i+2])\n    return volume\n    \ndef parallelogram_line(p,l):\n    '''\n    returns the parallelogram area of the given polygon as a list of points\n    '''\n    p.sort()\n    line = []\n    for i in range(len(p)-3):\n        line.append(p[i]+p[i+1]+p[i+2])\n    return line\n    \ndef parallelogram_area(p,l):\n    '''\n    returns the area of the given polygon as a list of points\n    '''\n    p.sort()\n    area = []\n    for i in range(len(p)-3):\n        area.append(p[i]+p[i+1]+p[i+2])\n    return area\n    \ndef parallelogram_perimeter(p,l):\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    z = (r*h)/math.sin(math.radians(360-math.degrees(math.asin(math.tan(math.radians(360-math.degrees(math.asin(math.exp(r/h))))))))))\n    a = math.sin(math.radians(360-math.degrees(math.asin(math.exp(r/h)))))/z\n    b = math.sin(math.radians(360-math.degrees(math.asin(math.exp(r/h)))))/z\n    return a*b\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r**3*h/2*math.pi\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r**2*h/2\ndef lateralsurface_heptahedron(r,h):\n    '''\n    Write a function to find the lateral surface area of a heptahedron given radius r and the height h.\n    '''\n    return 4*math.pi*r**3*h\ndef lateralsurface_octahedron(r,h):\n    '''\n    Write a function to find the lateral surface area of a octahedron given radius r and the height h.\n    '''\n    return 4*math.pi*r**3*h/3\ndef lateralsurface_hexagon(r,h):\n    '''\n    Write a function to find the lateral surface area of a hexagon given radius r and the height h.\n    '''\n    return 6*math.pi*r**2*h/3\ndef lateralsurface_ray(r,h):\n    '''\n    Write a function to find the lateral surface area of a ray given radius r and the height h.\n    '''\n    return 6*math.pi*r**2*h/3\ndef cone_area(r1,h1,r2,h2):\n    '''\n    Write a function to calculate the surface area of a cone given its radius and its height.\n    '''\n    return lateralsurface_cone(r1,h1) + lateralsurface_cone(r2,h2)\ndef cylinder_area(r,h,r1,h1):\n    '''\n    Write a function to calculate the surface area of a cylinder given its radius r and its height.\n    '''\n    return lateralsurface_cylinder(r,h) + lateralsurface_cylinder(r1,h1)\ndef hypercone_area(r,h,r1,h1):\n    '''\n    Write a function to calculate the surface area of a hypercone given its radius r and its height.\n    '''\n    return lateralsurface_heptahedron(r,h) + lateralsurface_heptahedron(r1,h1)\ndef octahedron_area(r,h,r1,h1):\n    '''\n    Write a function to calculate the surface area of a octahedron given its radius r and its height.\n    '''\n    return lateralsurface_octahedron(r,h) + lateralsurface_octahedron(r1,h1)\ndef hexagon_area(r,h,r1,h1):\n    '''\n    Write a function to calculate the surface area of a hexagon given its radius r and its height.\n    '''\n    return lateralsurface_hexagon(r,h) + lateralsurface_hexagon(r1,h1)\ndef ray_area(r,h):\n    '''\n    Write a function to calculate the surface area of a ray given its radius r and its height.\n    '''\n    return lateralsurface_ray(r,h)\ndef parallelogram_area(r,h,h1):\n    '''\n    Write a function to calculate the surface area of a parallelogram given its parameters r and its height.\n    '''\n    return lateralsurface_ray(r,h) + lateralsurface_ray(r1,h1)\ndef parallelogram_surface(r,h,h1):\n    '''\n    Write a function to calculate the surface area of a parallelogram given its parameters r and its height.\n    '''\n    return lateralsurface_ray(r,h) + lateralsurface_ray(r1,h1) + lateralsurface_ray(r2,h2)\ndef parallelogram_surface_line(r,h,h1):\n    '''\n    Write a function to calculate the surface area of a parallelogram given its parameters r and its height.\n    '''\n    return lateralsurface_ray(r,h) + lateralsurface_ray(r1,h1) + lateralsurface_ray(r2,h2) + lateralsurface_line(r3,h3) + lateralsurface_line(r4,h4) + lateralsurface_line(r5,h5)\ndef parallelogram_surface_line_line(r,h,h1):\n    '''\n    Write a function to calculate the surface area of a parallelogram given its parameters r and its height.\n    '''\n    return lateralsurface_ray(r,h) + lateralsurface_ray(r1,h1) + lateralsurface_ray(r2,h2) + lateralsurface_line(r3,h3) + lateralsurface_line(r4,h4) + lateralsurface_line(r5,h5) + lateralsurface_line(r6,h6)\ndef parallelogram_surface_line_hexahedron(r,h,h1):\n    '''\n    Write a function to calculate the surface area of a parallelogram given its parameters r and its height.\n    '''\n    return lateralsurface_heptahedron(r,h) + lateralsurface_heptahedron(r1,h1) + lateralsurface_heptahedron(r2,h2) + lateralsurface_heptahedron(r3,h3) + lateralsurface_heptahedron(r4,h4) + lateralsurface_heptahedron(r5,h5) + lateralsurface_heptahedron(r6,h6)\ndef parallelogram_surface_hexahedron(r,h,h1):\n    '''\n    Write a function to calculate the surface area of a parallelogram given its parameters r and its height.\n    '''\n    return lateralsurface_heptahedron(r,h) + lateralsurface_heptahedron(r1,h1) + lateralsurface_heptahedron(r2,h2) + lateralsurface_heptahedron(r3,h3) + lateralsurface_heptahedron(r4,h4) + lateralsurface_heptahedron(r5,h5) + lateralsurface_heptahedron(r6,h6) + lateralsurface_heptahedron(r7,h7) + lateralsurface_heptahedron(r8,h8) + lateralsurface_heptahedron(r9,h9) + lateralsurface_heptahedron(r10,h10) + lateralsurface_heptahedron(r11,h11) + lateralsurface_heptahedron(r12,h12) + lateralsurface_heptahedron(r13,h13) + lateralsurface_heptahedron(r14,h14) + lateralsurface_heptahedron(r15,h15) + lateralsurface_heptahedron(r16,h16) + lateralsurface_heptahedron(r17,h17) + lateralsurface_heptahedron(r18,h18) + lateralsurface_heptahedron(r19,h19) + lateralsurface_heptahedron(r20,h20)\ndef parallelogram_surface_line_hexahedron(r,h,h1):\n    '''\n    Write a function to calculate the surface area of a parallelogram given its parameters r and its height.\n    '''\n    return lateralsurface_line(r,h) + lateralsurface_line(r1,h1) + lateralsurface_line(r2,h2) + lateralsurface_line(r3,h3) + lateralsurface_line(r4,h4) + lateralsurface_line(r5,h5) + lateralsurface_line(r6,h6)\ndef parallelogram_surface_line_hexahedron_line(r,h,h1):\n    '''\n    Writ"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*math.pi*(r**2)*h\ndef lateralsurface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base and height of the triangle\n    '''\n    return 0.5*math.pi*(r**2)*h*(r**2-1)\ndef comp_d(l,n):\n    '''\n    Write a function that returns the distance between two points (e.g. comp_d(1,4) returns the distance between 1 and 4).\n    '''\n    return abs(l[0]-n[0])+abs(l[1]-n[1])\ndef dist_2(p1,p2):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_2(1,4) returns the distance between 1 and 4).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2))\ndef dist_1(p1,p2):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_1(1,4) returns the distance between 1 and 4).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2))\ndef dist_3(p1,p2,p3):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_3(1,4,3) returns the distance between 1, 4 and 3).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2))\ndef dist_4(p1,p2,p3):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_4(1,4,3) returns the distance between 1, 4 and 3).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2))\ndef dist_5(p1,p2,p3,p4):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_5(1,4,3,4) returns the distance between 1, 4, 3 and 4).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2)+pow(p1[3]-p2[3],2))\ndef dist_6(p1,p2,p3,p4,p5):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_6(1,4,3,4,5) returns the distance between 1, 4, 3 and 4, 5).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2)+pow(p1[3]-p2[3],2)+pow(p1[4]-p2[4],2))\ndef dist_7(p1,p2,p3,p4,p5,p6):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_7(1,4,3,4,5,6) returns the distance between 1, 4, 3, 4, 5, 6).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2)+pow(p1[3]-p2[3],2)+pow(p1[4]-p2[4],2)+pow(p1[5]-p2[5],2))\ndef dist_8(p1,p2,p3,p4,p5,p6,p7):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_8(1,4,3,4,5,6,7) returns the distance between 1, 4, 3 and 4, 5, 6, 7).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2)+pow(p1[3]-p2[3],2)+pow(p1[4]-p2[4],2))\ndef dist_9(p1,p2,p3,p4,p5,p6,p7):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_9(1,4,3,4,5,6,7,8) returns the distance between 1, 4, 3 and 4, 5, 6, 7, 8).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2)+pow(p1[3]-p2[3],2))\ndef dist_10(p1,p2,p3,p4,p5,p6,p7,p8,p9):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_10(1,4,3,4,5,6,7,8,9) returns the distance between 1, 4, 3 and 4, 5, 6, 7, 8, 9).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2)+pow(p1[3]-p2[3],2))\ndef dist_11(p1,p2,p3,p4,p5,p6,p7,p8,p9):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_11(1,4,3,4,5,6,7,8,9) returns the distance between 1, 4, 3 and 4, 5, 6, 7, 8, 9).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2)+pow(p1[3]-p2[3],2))\ndef dist_12(p1,p2,p3,p4,p5,p6,p7,p8,p9):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_12(1,4,3,4,5,6,7,8,9) returns the distance between 1, 4, 3 and 4, 5, 6, 7, 8, 9).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2)+pow(p1[2]-p2[2],2))\ndef dist_13(p1,p2,p3,p4,p5,p6,p7,p8,p9):\n    '''\n    Write a function that returns the distance between two points (e.g. dist_13(1,4,3,4,5,6,7,8,9) returns the distance between 1, 4, 3 and 4, 5, 6, 7, 8, 9).\n    '''\n    return math.sqrt(pow(p1[0]-p2[0],2)+pow(p1[1]-p2["
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*(r**2*h**2)\ndef velocities_rho(r,d):\n    '''\n    Write a function to compute the density of the surface given a distance d.\n    '''\n    return d*r**2\ndef velocities_f(r,h):\n    '''\n    Write a function to compute the force given a distance d.\n    '''\n    return 0.5*(r**2*h)\ndef velocities_a(r,h):\n    '''\n    Write a function to compute the acceleration given a distance d.\n    '''\n    return 0.5*(r**2*h)\ndef velocity_rho(r,h):\n    '''\n    Write a function to compute the radial velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef velocity_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef velocities_a(r,h):\n    '''\n    Write a function to compute the angular velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef acceleration(r,h):\n    '''\n    Write a function to compute the angular acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef distance(r,h):\n    '''\n    Write a function to compute the distance between two vectors.\n    '''\n    return math.sqrt(r**2+h**2)\ndef a_rho(r,h):\n    '''\n    Write a function to compute the radial acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_a(r,h):\n    '''\n    Write a function to compute the angular acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho(r,h):\n    '''\n    Write a function to compute the radial velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_a(r,h):\n    '''\n    Write a function to compute the angular velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho(r,h):\n    '''\n    Write a function to compute the radial velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_a(r,h):\n    '''\n    Write a function to compute the angular velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_rho(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_a(r,h):\n    '''\n    Write a function to compute the angular force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_v_rho(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_v_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_v_a(r,h):\n    '''\n    Write a function to compute the angular force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_v_rho(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_v_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_v_a(r,h):\n    '''\n    Write a function to compute the angular velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho_f(r,h):\n    '''\n    Write a function to compute the radial acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho_a(r,h):\n    '''\n    Write a function to compute the angular acceleration given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_v_rho(r,h):\n    '''\n    Write a function to compute the radial acceleration of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_v_f(r,h):\n    '''\n    Write a function to compute the radial acceleration of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef a_v_a(r,h):\n    '''\n    Write a function to compute the angular acceleration of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef dt(r,h):\n    '''\n    Write a function to compute the time step given a distance r and the height h.\n    '''\n    return (2*r**2)/h\ndef f_rho_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_rho_a(r,h):\n    '''\n    Write a function to compute the angular force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_rho_rho(r,h):\n    '''\n    Write a function to compute the radial velocity of a cone given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_f_f(r,h):\n    '''\n    Write a function to compute the radial force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef v_f_a(r,h):\n    '''\n    Write a function to compute the angular force given a distance r and the height h.\n    '''\n    return 0.5*(r**2*h)\ndef f_v_f_a(r,h):\n    '''\n    Write a function to compute the angular acceleration of a cone given a distance r and the height h.\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\w*\\.\\w*', ':', text)\n    text = re.sub(r'\\.\\w*', ':', text)\n    text = re.sub(r'\\w+', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text\n    \ndef replace_numbers(text):\n    '''\n    Replace all occurrences of numbers with a dash.\n    '''\n    text = re.sub('[0-9]+', '-', text)\n    return text\n    \ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of special characters with a colon.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9_]', '-', text)\n    return text\n    \ndef remove_punctuation(text):\n    '''\n    Remove punctuation from all words in the string.\n    '''\n    punct = r'[^a-zA-Z0-9_]\\w*'\n    text = re.sub(punct, '', text)\n    return text\n    \ndef remove_stopwords(text):\n    '''\n    Remove stopwords from the string.\n    '''\n    stopwords = ['a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he', 'i', 'in', 'is', 'it', 'its', 'of', 'on', 'that', 'the', 'to', 'were', 'will', 'with']\n    text =''.join([w for w in text.split() if w not in stopwords])\n    return text\n    \ndef remove_dots(text):\n    '''\n    Remove all occurrences of dots.\n    '''\n    return text.replace('.', '').replace('-', '')\n    \ndef word_frequency(text):\n    '''\n    Calculate word frequency in a string of text.\n    '''\n    text = re.sub('[^a-zA-Z0-9_]', '', text)\n    word_list = text.split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n    \ndef to_vector(text):\n    '''\n    Calculate word vector representation of a string of text.\n    '''\n    text = word_frequency(text)\n    # print(text)\n    list = []\n    for key, value in text.items():\n        list.append(value/len(text))\n    return list\n    \ndef make_matrix(text):\n    '''\n    Create a matrix representation of a string of text.\n    '''\n    text = word_frequency(text)\n    matrix = []\n    for key, value in text.items():\n        matrix.append(value)\n    return matrix\n    \ndef to_string(matrix):\n    '''\n    Return a string representation of a matrix.\n    '''\n    matrix = make_matrix(matrix)\n    result = ''\n    for value in matrix:\n        result += '{' + str(value) + '}'\n    return result\n    \ndef to_vocabulary(matrix):\n    '''\n    Return a set of unique words in a matrix.\n    '''\n    matrix = make_matrix(matrix)\n    result = set()\n    for value in matrix:\n        result.add(value)\n    return result\n    \ndef get_vocabulary(matrix):\n    '''\n    Return a set of unique words in a matrix.\n    '''\n    matrix = make_matrix(matrix)\n    result = set()\n    for value in matrix:\n        result.add(value)\n    return result\n    \ndef get_set(matrix):\n    '''\n    Return a set of unique words in a matrix.\n    '''\n    matrix = make_matrix(matrix)\n    result = set()\n    for value in matrix:\n        result.add(value)\n    return result\n    \ndef get_pair_set(matrix):\n    '''\n    Return a pair of sets of unique words in a matrix.\n    '''\n    matrix = make_matrix(matrix)\n    result = set()\n    for value in matrix:\n        for i in range(len(value)):\n            result.add(value[i])\n    return result\n    \ndef print_result(text):\n    '''\n    Print out a string of the form:\n    the text contains words separated by spaces.\n    '''\n    text = remove_stopwords(text)\n    text = remove_punctuation(text)\n    text = remove_numbers(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = remove_dots(text)\n    print(text)\n    \ndef get_vocab(text):\n    '''\n    Return a set of unique words in a matrix.\n    '''\n    text = remove_stopwords(text)\n    text = remove_punctuation(text)\n    text = remove_numbers(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = remove_dots(text)\n    return get_vocabulary(text)\n    \ndef get_pair_vocab(text):\n    '''\n    Return a pair of sets of unique words in a matrix.\n    '''\n    text = remove_stopwords(text)\n    text = remove_punctuation(text)\n    text = remove_numbers(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = remove_dots(text)\n    return get_pair_set(text)\n    \ndef get_matrix(text):\n    '''\n    Return a matrix representation of a string of text.\n    '''\n    text = remove_stopwords(text)\n    text = remove_punctuation(text)\n    text = remove_numbers(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = remove_dots(text)\n    matrix = to_matrix(text)\n    return matrix\n    \ndef get_pair_matrix(text):\n    '''\n    Return a pair of sets of unique words in a matrix.\n    '''\n    text = remove_stopwords(text)\n    text = remove_punctuation(text)\n    text = remove_numbers(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = remove_dots(text)\n    return get_pair_set(text)\n    \ndef to_matrix(text):\n    '''\n    Return a matrix representation of a string of text.\n    '''\n    text = remove_stopwords(text)\n    text = remove_punctuation(text)\n    text = remove_numbers(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = replace_specialchar(text)\n    text = remove_dots(text)\n    return text\n    \ndef to_pair_matrix(text):\n    '''\n    Return a pair of sets of unique words i"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # find all possible replacements\n    possible_replacements = ['|', ',']\n    # loop through possible replacements\n    for replacement in possible_replacements:\n        # if any character is replaced then replace it with the replacement character\n        if replacement in text:\n            # find index of replacement character\n            index = text.find(replacement)\n            # replace it with the character in the replacement string\n            text = text.replace(text[index], f'{replacement}')\n            # find index of replacement character next\n            index = text.find(replacement, index + 1)\n            # replace it with the character in the replacement string\n            text = text.replace(text[index], f'{replacement}')\n    return text\ndef camel_to_snake(text):\n    '''\n    Write a function to turn the text into snake case.\n    '''\n    # replace all space with underscore\n    text = replace_specialchar(text)\n    # split at the first space\n    text_splitted = text.split(' ')\n    # remove spaces from the end\n    final_text = []\n    for i in text_splitted:\n        final_text.append(i.lower())\n    # get rid of all the first letters\n    final_text = [x for x in final_text if len(x) > 1]\n    # get rid of all the second letters\n    final_text = [x for x in final_text if len(x) > 2]\n    # remove all other characters\n    final_text = [x for x in final_text if len(x) > 3]\n    # capitalize all letters\n    final_text = [x.title() for x in final_text]\n    # replace all numbers with underscores\n    final_text = [x for x in final_text if x.isnumeric()]\n    # convert all words to lower case\n    final_text = [x.lower() for x in final_text]\n    return final_text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(?<![a-z])[^\\-\\:\\:\\<\\>\\?']*[.?!,;:)([a-z])([^\\-\\:\\<\\>\\?']+[\\s\\)]*\\d+|[.?!,;:)([a-z])([^\\-\\:\\<\\>\\?']+[\\s\\)]*\\d+)'\n    return re.sub(pattern, r':\\1', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = ''\n    for char in text:\n        if char.isspace():\n            result += ':'\n        elif char == ',':\n            result += ','\n        elif char =='':\n            result +=''\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' +',' : ',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re.sub(' +',' :',text)\n    text = re"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Create a string to hold the replacement.\n    replacement_string = ''\n    # Loop through each character of the string.\n    for char in text:\n        # If the character is a space, add a colon.\n        if char == \" \":\n            replacement_string += \":\"\n        # If the character is a comma, add a colon.\n        if char == \",\":\n            replacement_string += \":\"\n        # If the character is a dot, add a colon.\n        if char == \".\":\n            replacement_string += \":\"\n        # If the character is a dot, add a colon and the spaces.\n        if char == \".\":\n            replacement_string += \":\"\n        # If the character is a dot, add a colon and the spaces and a colon.\n        if char == \".\":\n            replacement_string += \":\"\n        # If the character is a dot, add a colon and the spaces and an additional space.\n        if char == \".\":\n            replacement_string += \":\"\n        # If the character is a space, add a space between the two spaces.\n        if char == \" \":\n            replacement_string += \" \"\n    # Return the string with the replacement.\n    return replacement_string\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\" +\", \":\", text)\n    text = re.sub(\", \", \":\", text)\n    text = re.sub(\". \", \":\", text)\n    text = re.sub(\" +\", \":\", text)\n    text = re.sub(\" '\", \":\", text)\n    text = re.sub(\"' \", \":\", text)\n    text = re.sub(\"( )\\s*;\\s*\", \":\", text)\n    text = re.sub(\"(\\r)([ ])(\\w*)( )\\s*;\\s*\", r\":\", text)\n    text = re.sub(\"(\\r)(\\s)(\\w*)(\\s)\\r\\n\", r\":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace('-', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # find all instances of spaces\n    find_spaces = re.findall(r\"\\s\", text)\n    # find all instances of commas\n    find_commas = re.findall(r\",\", text)\n    # find all instances of dots\n    find_dots = re.findall(r\"\\.\\.\", text)\n    # convert to list\n    list_find_spaces = list(filter(None, find_spaces))\n    list_find_commas = list(filter(None, find_commas))\n    list_find_dots = list(filter(None, find_dots))\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # TODO:\n    # 1. Use regular expressions to replace the occurrences of spaces, commas, and dots with a colon\n    # 2. Use re.sub() to replace spaces and commas with a colon.\n    # 3. Replace the entire string \"string\" with \"string_new\"\n    #\n    # Hint: You need to use a normal string escape sequence to replace spaces with a colon\n    \n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace('\"', ':')\n    text = text.replace(\"'\", ':')\n    text = text.replace('(', ':')\n    text = text.replace(')', ':')\n    text = text.replace(\"\\\\\", ':')\n    text = text.replace(\"|\", ':')\n    text = text.replace('[', ':')\n    text = text.replace(']', ':')\n    text = text.replace(\"{\", ':')\n    text = text.replace('}', ':')\n    text = text.replace('|', ':')\n    text = text.replace(\"'\", ':')\n    \n    return text\n    \n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the first occurance of x in the array A.\n    # Loop through the array A and find the first occurrence.\n    # If found, return the index and the value of the index.\n    # If not found, return -1.\n    \n    start = 0\n    end = len(A) - 1\n    found = -1\n    while start <= end:\n        middle = (start + end) // 2\n        if A[middle] == x:\n            found = middle\n            break\n        if A[middle] < x:\n            start = middle + 1\n        else:\n            end = middle - 1\n    return found\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # store the smallest number\n    smallest_number = A[0]\n    \n    # store the index of first occurrence\n    index_of_first_occurrence = 0\n    \n    # store the last occurrence of number\n    index_of_last_occurrence = len(A) - 1\n    \n    # find the first occurrence of the number\n    while A[index_of_last_occurrence]!= smallest_number:\n        if smallest_number > A[index_of_last_occurrence]:\n            index_of_last_occurrence -= 1\n        else:\n            smallest_number = A[index_of_last_occurrence]\n            index_of_first_occurrence = index_of_last_occurrence\n            index_of_last_occurrence -= 1\n    \n    # return index of first occurrence\n    return index_of_first_occurrence\n    \n    \ndef find_second_occurrence(A, x):\n    '''\n    Write a function to find the index of the second occurrence of a given number in a sorted array.\n    '''\n    # store the smallest number\n    smallest_number = A[0]\n    \n    # store the index of first occurrence\n    index_of_first_occurrence = 0\n    \n    # store the last occurrence of number\n    index_of_last_occurrence = len(A) - 1\n    \n    # find the second occurrence of the number\n    while A[index_of_last_occurrence]!= smallest_number:\n        if smallest_number < A[index_of_last_occurrence]:\n            index_of_last_occurrence -= 1\n        else:\n            smallest_number = A[index_of_last_occurrence]\n            index_of_first_occurrence = index_of_last_occurrence\n            index_of_last_occurrence -= 1\n    \n    # return index of second occurrence\n    return index_of_first_occurrence\n    \n    \ndef find_third_occurrence(A, x):\n    '''\n    Write a function to find the index of the third occurrence of a given number in a sorted array.\n    '''\n    # store the smallest number\n    smallest_number = A[0]\n    \n    # store the index of first occurrence\n    index_of_first_occurrence = 0\n    \n    # store the last occurrence of number\n    index_of_last_occurrence = len(A) - 1\n    \n    # find the third occurrence of the number\n    while A[index_of_last_occurrence]!= smallest_number:\n        if smallest_number < A[index_of_last_occurrence]:\n            index_of_last_occurrence -= 1\n        else:\n            smallest_number = A[index_of_last_occurrence]\n            index_of_first_occurrence = index_of_last_occurrence\n            index_of_last_occurrence -= 1\n    \n    # return index of third occurrence\n    return index_of_first_occurrence\n    \n    \ndef main():\n    A = [3, 1, 2, 5, 7, 6, 8, 9, 11, 18, 15, 14, 12]\n    print(find_first_occurrence(A, 7))\n    print(find_second_occurrence(A, 7))\n    print(find_third_occurrence(A, 7))\n    \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    elif len(A) == 1:\n        if A[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        if A[0] == x:\n            return 0\n        elif A[1] < x:\n            return 1 + find_first_occurrence(A[1:], x)\n        else:\n            return 1 + find_first_occurrence(A[:1], x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    assert(type(A) is list), 'Input must be a list'\n    assert(all([type(item) is int for item in A])), 'Numbers must be in ascending order'\n    assert(all([item >= 0 for item in A])), 'Number must be >= 0'\n    assert(all([item <= len(A) for item in A])), 'Number must be <= len(A)'\n    assert(all([A[i] <= x for i in range(len(A))])), 'Number must be <= x'\n    assert(all([A[i] >= x for i in range(len(A))])), 'Number must be > x'\n    assert(x >= A[0]), 'Number must be greater than the first element'\n    assert(x <= A[-1]), 'Number must be less than the last element'\n    assert(x >= 0), 'Number must be positive'\n    \n    if A == sorted(A):\n        return 0\n    else:\n        return find_first_occurrence(A, x) + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pos = -1\n    for i in range(len(A)):\n        if A[i] == x:\n            pos = i\n            break\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n    while left <= right:\n        mid = (left+right)//2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            left = mid+1\n        else:\n            right = mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    return i\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sublist = [arr[i:i+n] for i in range(0, len(arr), n) for n in range(1, len(arr) + 1)]\n    return sum([sum([1 for a in sublist if a]) for sublist in sublist])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_arr=0\n    for i in range(1,len(arr)+1):\n        for j in range(i-1,-1,-1):\n            sum_arr=sum_arr+arr[j]*i\n    return sum_arr\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_list = []\n    \n    def func(arr, index, sum_list, prod_list):\n        # if there is only one element\n        if len(arr) == 1:\n            return sum_list[index]\n        # if there are at least 2 elements\n        if index < len(arr) - 1:\n            # start from index + 1\n            for i in range(index, len(arr)):\n                sum_list[index] += arr[i]\n                # increment the sum by arr[i]\n                prod_list.append(arr[i])\n                # if sum_list[i] is the same as the current sum\n                if sum_list[i] == sum_list[index]:\n                    # if the current sum is equal to the last sum\n                    if i < len(arr) - 2:\n                        sum_list[i + 1] = func(arr, i + 1, sum_list, prod_list)\n                else:\n                    break\n            return sum_list[i + 1]\n        # if index is the last element\n        else:\n            return sum_list[index]\n        \n    return func(arr, 0, [], prod_list)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #raise NotImplementedError\n    #doctest: +NORMALIZE_WHITESPACE\n    def prod(arr):\n        '''\n        Find the product of all subarrays.\n        '''\n        #doctest: +NORMALIZE_WHITESPACE\n        if len(arr)==0:\n            return 0\n        if len(arr)==1:\n            return arr[0]\n        else:\n            return prod(arr[1:])*arr[0]\n    def sum_of_subarrays(arr,product):\n        #doctest: +NORMALIZE_WHITESPACE\n        #raise NotImplementedError\n        #doctest: +NORMALIZE_WHITESPACE\n        if len(arr)==0:\n            return product\n        if len(arr)==1:\n            return product*arr[0]\n        else:\n            return sum_of_subarrays(arr[1:],product*arr[0])\n    return prod(arr)%1000000007\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                sum += arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] * arr[1]\n    \n    res = []\n    l = 0\n    r = 1\n    total = 0\n    \n    while r < len(arr):\n        total = total + sum_Of_Subarray_Prod(arr[l:r])\n        l = r\n        r += 1\n    \n    total = total + sum_Of_Subarray_Prod(arr[l:])\n    \n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            max_sum = max(arr[i]+arr[j],max_sum)\n    return max_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = 0\n    lst = []\n    total = 0\n    lst.append(arr[0])\n    for i in range(len(arr)-1):\n        total = total + (arr[i+1]*l)\n        l = l + (arr[i+1])\n        lst.append(total)\n    return lst\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    temp=n%2\n    n=n//2\n    \n    if n==0:\n        return n\n    else:\n        return (n>>1)+(n<<1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    i = 0\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            print(n, '=', bin(n)[2:])\n        else:\n            print(n, '=', bin(n)[2:],'', i,'', n - i - 1)\n    i = 0\n    for i in range(n):\n        if i == n - 1 or i == 0:\n            print(n, '=', bin(n)[2:])\n        else:\n            print(n, '=', bin(n)[2:],'', i,'', n - i - 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print('\\n\\n\\tThe number is', bin(n)[2:])\n    if n & 1 == 1:\n        print('First bit set')\n    else:\n        print('Last bit set')\n    \n    return None\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ (n >> 1)) ^ (n & 0x1)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_count = n & 0b11111\n    n = n >> 1\n    n = n << 8\n    n = n ^ bit_count\n    bit_count = n & 0b11111\n    return bit_count\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & (n - 1)\n    "
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n % 2\n    if m == 0:\n        b = \"0\"\n    else:\n        b = \"1\"\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number\n    num = n\n    # get the first and last bits\n    first = num & 0x1\n    last = num & 0x7\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = (1<<n) - 1\n    mask |= (1 << n - 1)\n    return (n & mask)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first = n & 0xffff\n    last = n >> 16\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the index of the smallest element (the largest element) which is greater than the value x\n    # i.e. the index where the value x occurs in a sorted list\n    # This is the left insertion point for the insertion.\n    # Note: The function assumes that the list is sorted, not necessarily.\n    \n    # 0 = first element\n    # 1 = smallest element\n    # 2 = largest element\n    # Returns the index of the left most element as a value\n    \n    # code for the bubble sort\n    # sortedList = sorted(a)\n    # # Time complexity: O(n^2)\n    # # Space Complexity: O(n^2)\n    \n    # Use the counter technique to iterate over the list\n    # for i in range(len(sortedList)-1):\n    #     # Time complexity: O(n^2)\n    #     # Space Complexity: O(1)\n    \n    #     # Check if the current element is greater than the next element\n    #     # or not because the next element is smaller\n    #     if sortedList[i] > sortedList[i + 1]:\n    #         # Time complexity: O(n)\n    #         # Space Complexity: O(1)\n    #         # If it is, return the index of the element which is greater than the value x\n    #         # If it is not, return the index of the element which is smaller than the value x\n    #         return i\n    #         break\n        \n    # Code for the insertion sort\n    # number_of_elements = len(a)\n    # pos = 0\n    # while True:\n    #     if pos >= number_of_elements - 1:\n    #         break\n    #     # Time complexity: O(n)\n    #     # Space Complexity: O(1)\n    \n    #     # Check if the next element is greater than the current element\n    #     # or not because the current element is smaller\n    #     if a[pos] > a[pos + 1]:\n    #         # Time complexity: O(n)\n    #         # Space Complexity: O(1)\n    #         # If it is, return the index of the element which is greater than the value x\n    #         # If it is not, return the index of the element which is smaller than the value x\n    #         return pos\n    #         break\n    #     # Increment pos\n    #     pos += 1\n    # return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    x_index = bisect.bisect(a, x)\n    #x_index = bisect.bisect(a, x)\n    return x_index\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Your code goes here\n    pos = 0\n    while pos < len(a) and a[pos] < x:\n        pos = pos + 1\n    if pos == len(a):\n        return pos\n    else:\n        return pos + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] < x:\n            return i\n    return len(a)-1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)-1, -1, -1):\n        if a[i] > x:\n            return i\n    return len(a)\n    \ndef select_left_k(a, k):\n    '''\n    Write a function to select the kth smallest value from an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[left_insertion(a, k):right_insertion(a, k)]\n    \ndef select_right_k(a, k):\n    '''\n    Write a function to select the kth largest value from an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[right_insertion(a, k):left_insertion(a, k)]\n    \ndef select_largest(a):\n    '''\n    Write a function that finds the largest value from an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[bisect.bisect_left(a, a[-1])]\n    \ndef select_smallest(a):\n    '''\n    Write a function that finds the smallest value from an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[bisect.bisect_right(a, a[0])]\n    \ndef merge_sort(a):\n    '''\n    Write a function that sorts an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) <= 1:\n        return a\n    else:\n        m = len(a)//2\n        left = merge_sort(a[:m])\n        right = merge_sort(a[m:])\n        return merge(left, right)\n    \ndef merge(a1, a2):\n    '''\n    Write a function that merges two sorted unsorted arrays. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i, j = 0, 0\n    k = len(a1)\n    l = len(a2)\n    lst = []\n    while i < k and j < l:\n        if a1[i] < a2[j]:\n            lst.append(a1[i])\n            i += 1\n        else:\n            lst.append(a2[j])\n            j += 1\n    if i < k:\n        for j in range(i, k):\n            lst.append(a1[j])\n    else:\n        for j in range(j, l):\n            lst.append(a2[j])\n    return lst\n    \ndef get_median(a):\n    '''\n    Write a function that calculates the median of an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    mid = (l//2)\n    if l % 2 == 0:\n        median = (a[mid]+a[mid-1])/2\n    else:\n        median = a[mid]\n    return median\n    \ndef bucket_sort(a, q):\n    '''\n    Write a function that sorts an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    n = len(a)\n    while i < n:\n        j = q[i]\n        while j < n:\n            k = q[j]\n            if a[k] > a[j]:\n                a[k], a[j] = a[j], a[k]\n            j += 1\n        i += 1\n    return a\n    \ndef bucket_sort2(a, q):\n    '''\n    Write a function that sorts an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    i = 0\n    while i < l:\n        j = q[i]\n        k = q[j]\n        if a[k] > a[j]:\n            a[k], a[j] = a[j], a[k]\n        i += 1\n    return a\n    \ndef bucket_sort3(a, q):\n    '''\n    Write a function that sorts an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = 0\n    j = n//2\n    while j < n:\n        k = q[i]\n        while k < n:\n            q[i], q[j] = q[j], q[i]\n            k += 1\n        i += 1\n        j = i\n    return a\n    \ndef bucket_sort4(a, q):\n    '''\n    Write a function that sorts an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = 0\n    j = n//2\n    while j < n:\n        k = q[i]\n        while k < n:\n            q[i], q[j] = q[j], q[i]\n            k += 1\n        i += 1\n        j = i\n    return a\n    \ndef bucket_sort5(a, q):\n    '''\n    Write a function that sorts an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = 0\n    j = n//2\n    while j < n:\n        k = q[i]\n        while k < n:\n            q[i], q[j] = q[j], q[i]\n            k += 1\n        i += 1\n        j = i\n    return a\n    \ndef bucket_sort6(a, q):\n    '''\n    Write a function that sorts an unsorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = 0\n    j = n//2\n    while j < n:\n        k = q[i]\n        while k < n:\n            q[i], q[j] = q[j], q[i]\n            k += 1\n        i += 1\n        j = "
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #raise NotImplementedError\n    print('left_insertion function not implemented')\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    hi = len(a) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            if a[mid] < a[low]:\n                lo = mid\n            else:\n                hi = mid\n        else:\n            if a[mid] > a[high]:\n                hi = mid\n            else:\n                lo = mid\n    return lo\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if a[mid] > x:\n            r = mid - 1\n        elif a[mid] < x:\n            l = mid + 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return a.index(x)\n    else:\n        return index\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if any(char.upper() in vowels for char in string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_regex = '[' + vowels[0] + ']*'\n    return re.match(vowel_regex, string)\ndef check_int(number):\n    '''\n    Write a function to check whether the given number is an integer or not using regex.\n    '''\n    return re.match(r'^\\d+$', str(number))\ndef string_list_to_int_list(list):\n    '''\n    Write a function that takes a list and returns a list of integers.\n    '''\n    result = []\n    for x in list:\n        result.append(int(x))\n    return result\ndef check_all_int(number):\n    '''\n    Write a function to check whether all the given number is an integer or not using regex.\n    '''\n    return re.match(r'^\\d+$', str(number))\ndef check_vowel_and_consonant(vowel, consonant):\n    '''\n    Write a function to check whether a given vowel and consonant is a vowel or not using regex.\n    '''\n    return re.match(vowel, consonant)\ndef check_consonant_string(consonant):\n    '''\n    Write a function that takes a given consonant string and returns a given consonant.\n    '''\n    return re.match(r'^' + consonant + r'$', consonant)\ndef check_vowel_and_consonant_punctuation(vowel, consonant):\n    '''\n    Write a function to check whether a given vowel and consonant is a vowel or not using regex.\n    '''\n    return re.match(vowel + consonant + r'\\s+', consonant)\ndef check_consonant_and_vowel_punctuation(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel)\ndef check_consonant_and_vowel_punctuation_2(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_3(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_4(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_5(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_6(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_7(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_8(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_9(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_10(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_11(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_12(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_13(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_14(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_15(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_16(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_17(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+')\ndef check_consonant_and_vowel_punctuation_18(consonant, vowel):\n    '''\n    Write a function to check whether a given consonant and vowel is a vowel or not using regex.\n    '''\n    return re.match(consonant + vowel + r'\\s+', consonant + vowel + r'\\s+'"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU]*'\n    if re.search(pattern, string):\n        return True\n    else: \n        return False\ndef word_form(string): \n    '''\n    Write a function to return all the possible words from a string. \n    '''\n    return re.findall(r'^[aeiouAEIOU][A-Za-z0-9_]*', string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].isupper():\n        return True\n    elif string[0].islower():\n        return False\n    else:\n        return True\ndef is_vowel(word):\n    '''\n    Use regex to check whether the word is a vowel.\n    '''\n    return re.findall(regex, word)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.startswith('e'):\n        return True\n    else:\n        return False\ndef check_int(string): \n    '''\n    Write a function to check whether the given string is starting with a digit or not using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set(string): \n    '''\n    Write a function to check whether the given string is in the set of vowels or not using regex.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\ndef check_set_int(string): \n    '''\n    Write a function to check whether the given string is in the set of vowels or not using regex.\n    '''\n    for char in string:\n        if char in ['a','e','i','o','u','A','E','I','O','U']:\n            return True\n    else:\n        return False\ndef check_set_set(string): \n    '''\n    Write a function to check whether the given string is in the set of vowels or not using regex.\n    '''\n    if string.isalpha() == False:\n        return False\n    elif string.isalpha() == True:\n        for char in string:\n            if char in ['a','e','i','o','u']:\n                return True\n            else:\n                return False\ndef check_bool(string):\n    '''\n    Write a function to check whether the given string is true or false using regex.\n    '''\n    if string.lower() == 'true' or string.lower() == 'false':\n        return True\n    else:\n        return False\ndef check_bool_int(string):\n    '''\n    Write a function to check whether the given string is true or false using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_double(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return True\n    else:\n        return False\ndef check_double_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_float(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return True\n    else:\n        return False\ndef check_float_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_all_ints(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_complex(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_complex_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_number(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_number_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_number_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_number(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_number_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_int_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_set_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_set_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        return False\n    elif string.lower() == 'true':\n        return True\n    else:\n        return False\ndef check_set_set_set_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_set_set_int(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\ndef check_set_set_set_set(string):\n    '''\n    Write a function to check whether the given string is multiple of a single digit using regex.\n    '''\n    if string.isdigit() == False:\n        return False\n    elif string.isalpha() == False:\n        retur"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #test\n    string = string.lower()\n    if(string[0] in ['a','e','i','o','u']):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    s = 1\n    i = 1\n    while i <= n:\n        s = s + (i**2)\n        i = i + 1\n    return s\n    # Do not delete this line\n    \n    # Write your code here\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base Cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Recursive Cases\n    return n * geometric_sum(n-1)\n    \n    # Fill the dictionary to store the geometric sum of n\ndef geometric_sum_rec(n):\n    '''\n    Write a recursive function that returns the geometric sum of a non-negative integer n.\n    '''\n    # Base Cases\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    # Recursive Cases\n    return n * geometric_sum_rec(n-1)\n    \n    # Fill the dictionary to store the geometric sum of n\ndef geometric_sum_rec_2(n):\n    '''\n    Write a recursive function that returns the geometric sum of a non-negative integer n.\n    '''\n    # Base Cases\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    \n    # Recursive Cases\n    return n * geometric_sum_rec_2(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)\n    \nprint(geometric_sum(5)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*geometric_sum(n-1)\n    "
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    start = 0\n    end = n\n    while(start < end):\n        mid = (start + end) // 2\n        if(find_Min(mid) == mid):\n            return mid\n        elif(find_Min(mid) < mid):\n            start = mid + 1\n        elif(find_Min(mid) > mid):\n            end = mid\n    return -1\ndef find_Min(i):\n    '''\n    Write a python function to find the minimum number of a given list.\n    '''\n    # Start from the beginning\n    while(i > 0):\n        # Check if there are any elements to the left\n        if(i % 10 == 1):\n            return i\n        # Check if there are any elements to the right\n        if(i % 10!= 9):\n            return i\n        i = i // 10\n    # Return the negative of the result\n    return -1\ndef find_Square(n):\n    '''\n    Write a python function to find the square of a number. https://www.geeksforgeeks.org/square-of-a-number/\n    '''\n    start = 0\n    end = n\n    while(start < end):\n        mid = (start + end) // 2\n        # Check if the square of the number is less than or equal to 0\n        if(mid * mid < n):\n            return mid\n        # Check if the square of the number is less than or equal to 0\n        elif(mid * mid > n):\n            start = mid + 1\n        # Check if the square of the number is greater than or equal to 0\n        elif(mid * mid >= n):\n            end = mid - 1\n    return -1\ndef find_SquareRoot(n):\n    '''\n    Write a python function to find the square root of a number. https://www.geeksforgeeks.org/square-root-of-a-number/\n    '''\n    start = 0\n    end = n\n    while(start < end):\n        mid = (start + end) // 2\n        # Check if the square root of the number is less than or equal to 0\n        if(mid * mid < n):\n            return mid\n        # Check if the square root of the number is less than or equal to 0\n        elif(mid * mid > n):\n            start = mid + 1\n        # Check if the square root of the number is greater than or equal to 0\n        elif(mid * mid >= n):\n            end = mid - 1\n    return -1\ndef find_Mod(n):\n    '''\n    Write a python function to find the modulo of a number. https://www.geeksforgeeks.org/find-the-modulo-of-a-number/\n    '''\n    start = 0\n    end = n\n    while(start < end):\n        mid = (start + end) // 2\n        # Check if the modulo of the number is less than or equal to 0\n        if(mid * mid < n):\n            return mid\n        # Check if the modulo of the number is less than or equal to 0\n        elif(mid * mid > n):\n            start = mid + 1\n        # Check if the modulo of the number is greater than or equal to 0\n        elif(mid * mid >= n):\n            end = mid - 1\n    return -1\ndef is_prime(n):\n    '''\n    Write a python function to check whether the number is prime or not. https://www.geeksforgeeks.org/is-prime-number/\n    '''\n    if(n == 1 or n == 2):\n        return True\n    if(n < 2):\n        return False\n    if(n % 2 == 0):\n        return False\n    if(n % 3 == 0):\n        return False\n    if(n % 2 == 1 or n % 3 == 1):\n        return False\n    if(n % 4 == 0):\n        return False\n    r = int(math.sqrt(n)) + 1\n    for i in range(5,r,2):\n        if(n % i == 0):\n            return False\n    return True\ndef is_prime_factor(n):\n    '''\n    Write a python function to determine if a number is prime or not. https://www.geeksforgeeks.org/is-prime-number-factor-in-a-number/\n    '''\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if(n % i == 0):\n            return False\n    return True\ndef find_Fibonacci(n):\n    '''\n    Write a python function to find the Fibonacci sequence of a given number.\n    https://www.geeksforgeeks.org/find-the-Fibonacci-sequence-of-a-number/\n    '''\n    # Check if the given number is a prime number or not\n    if(is_prime(n) == False):\n        return -1\n    if(n == 1):\n        return 0\n    if(n == 2):\n        return 1\n    if(n % 2 == 0):\n        return find_Fibonacci(n//2) + find_Fibonacci(n//2+1)\n    if(n % 2 == 1):\n        return find_Fibonacci(n//2) + find_Fibonacci(n//2+2)\n    # First Fibonacci Number is 1\n    return 1\ndef find_Factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    https://www.geeksforgeeks.org/find-the-factorial-of-a-number/\n    '''\n    if(n == 1):\n        return 1\n    if(n == 2):\n        return 1\n    if(n % 2 == 0):\n        return find_Factorial(n//2) * n\n    if(n % 2 == 1):\n        return n * find_Factorial(n//2)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # your code here\n    #check to see if n is even\n    if n % 2 == 0:\n        index = (n + 1) // 2\n        #check to see if n is odd\n        if (n - index) % 2 == 1:\n            return -1\n        else:\n            return index\n    else:\n        #check to see if n is odd\n        if (n - 1) % 2 == 1:\n            return -1\n        else:\n            return int((n - 1) / 2)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = -1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            res = i\n            break\n    return res\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (i < n):\n        j = 0\n        k = 0\n        while (j < n):\n            if (i == j):\n                i += 1\n                j += 1\n            elif (i < j):\n                i = i + 1\n                j = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                k += 1\n                i += 1\n            elif (i < k):\n                i = i + 1\n                k = 0\n        i = 0\n        k = 0\n        while (k < n):\n            if (i == k):\n                "
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    s = n\n    i = 0\n    while(n>=10):\n        i+=1\n        if(n%10==0):\n            n/=10\n            break\n        n/=10\n    if(n==1):\n        return i\n    for i in range(i,s+1):\n        if(n>0):\n            n-=10\n        else:\n            n/=10\n            break\n    return s+i\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = list(str(n))\n    for i in range(len(num)):\n        if num[i] == \"2\":\n            return i\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # %import sys\n    # import sys\n    # sys.setrecursionlimit(10000)\n    # if n<0:\n    #     print('error')\n    #     return -1\n    # else:\n    #     return int(math.floor(math.log(n,2)))+1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Your code goes here\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0 or n == 1:\n        return 1\n    smallest_index = 1\n    current_index = 2\n    while(current_index < n):\n        if (n % current_index == 0):\n            smallest_index = current_index\n            n = n/current_index\n        else:\n            current_index+=1\n    return smallest_index\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Step 1: First try to find a variable for number of digits \n    # Step 2: Find the largest index with at least one digit \n    # Step 3: Count the number of digits  \n    # Step 4: if digits are same then you are at the end of the equation\n    # Step 5: if digits are not same, then divide the number by 10\n    # Step 6:  every time you get result, you have to check for next digit \n    # Step 7: if next digit is smaller than previous digit, then we are at the end of the equation\n    # Step 8: If you get here, then the index is not smallest \n    # Step 9: return the index \n    \n    # Step 1: Find the index of the largest number\n    maximum = n \n    index = 0 \n    while (index < n):\n        digits = 0 \n        for i in range(10): \n            digits = digits + int(i) * pow(10, i)\n        if (digits > maximum): \n            maximum = digits \n            index = n \n        n = n // 10 \n        # Step 2: Find the index of the smallest number \n        # Step 3: Count the number of digits  \n        # Step 4: if digits are same then you are at the end of the equation\n        # Step 5: if digits are not same, then divide the number by 10\n        # Step 6: if next digit is smaller than previous digit, then we are at the end of the equation\n        # Step 7: if next digit is smaller than previous digit, then divide the number by 10\n        # Step 8: if you get here, then the index is not smallest \n        # Step 9: return the index \n    return index\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Hint: use a list to hold the key-value pairs.\n    # How to do this?\n    # loop through the test tuple.\n    # If the item from the tuple is equal to the item from the previous one, the item will be overwritten by the next item from the previous one.\n    # store it in the return value.\n    # return a dictionary\n    return_dict = {}\n    # iterate through the test tuple and assign the value to a key in the dictionary\n    for item in test_tup:\n        return_dict[item] = test_tup.index(item)\n    return return_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup = {}\n    i = 0\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            tup[test_tup[i]] = test_tup[i+1]\n        else:\n            tup[test_tup[i]] = test_tup[i]\n    return tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_out = {}\n    for key,value in enumerate(test_tup):\n        dict_out[value] = key\n    return dict_out\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dic = {}\n    for idx, elem in enumerate(test_tup):\n        dic[test_tup[idx]] = elem\n    return dic\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    def dict_to_tuple(tup):\n        '''\n        Convert a tuple to a key-value pair.\n        '''\n        key = tup[0]\n        value = tuple(tup[1:])\n        return key, value\n    \n    if test_tup:\n        key, value = dict_to_tuple(test_tup)\n    else:\n        key, value = None, None\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if type(test_tup) is not tuple:\n        raise TypeError(\"A tuple must be given\")\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if type(test_tup) == tuple:\n        d = {}\n        for i in range(len(test_tup) - 1):\n            d[test_tup[i] + ':' + test_tup[i + 1]] = test_tup[i + 1]\n        return d\n    else:\n        return test_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    out = {}\n    for i,x in enumerate(test_tup):\n        out[x] = test_tup[i]\n    return out\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dictionary = {}\n    for index in range(len(test_tup) - 1):\n        my_dictionary[test_tup[index]] = test_tup[index + 1]\n    return my_dictionary\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = list(s)\n    for c in char_list :\n        if char_list.count(c)!= 1 :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    x = [0,0]\n    for i in range(len(s)) :\n        if s[i] =='' :\n            x[0]+=1\n        else :\n            x[1]+=1\n    if x[0]==x[1] :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)!= len(set(s)):\n        return False\n    else :\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 1 :\n        # if the length of string is greater than 2 then it is not a palindrome\n        if (s[0] == s[-1]) :\n            # if so then we are not a palindrome\n            return True\n        else :\n            # else it is a palindrome so return false\n            return False\n    else :\n        # if the length of string is greater than 2 then it is not a palindrome\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[i-1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #your code here\n    return \"All Characters Same\" in s\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s :\n        if i == s[count] :\n            count += 1\n        else :\n            count = 0\n    if count == len(s) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #Assigning a global variable\n    global Count\n    if Count == 0 :\n        return True\n    #Checking if string has any non-numeric characters\n    if len(s) <= 0 :\n        return True\n    else :\n        #Calling function and adding the character if possible\n        if s.isnumeric() :\n            return all_Characters_Same(s[1:])\n        else :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    cnt = {}\n    for i in s:\n        if i in cnt:\n            cnt[i] = cnt[i]+1\n        else:\n            cnt[i] = 1\n    return True in cnt.values()\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * math.sqrt(3)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the area of the tetrahedron\n    area = 0\n    for i in range(side):\n        for j in range(side):\n            for k in range(side):\n                area = area + math.sqrt( pow(side-1-i, 2) + pow(side-1-j, 2) + pow(side-1-k, 2) )\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #define the maximum side\n    side_max = math.sqrt(side**2 - side)\n    #define the side\n    side_ = math.sqrt(side_max**2 - side_max)\n    #return the area\n    return side_*side_max\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side * side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return math.sqrt(6)*(6)\n    if side == 2:\n        return math.sqrt(3)*(2)\n    if side == 3:\n        return math.sqrt(1)*(3)\n    if side == 4:\n        return math.sqrt(1)*(5)\n    if side == 5:\n        return math.sqrt(2)*(2)\n    if side == 6:\n        return math.sqrt(1)*(4)\n    if side == 7:\n        return math.sqrt(3)*(3)\n    if side == 8:\n        return math.sqrt(5)*(5)\n    if side == 9:\n        return math.sqrt(2)*(6)\n    if side == 10:\n        return math.sqrt(1)*(7)\n    if side == 11:\n        return math.sqrt(1)*(8)\n    if side == 12:\n        return math.sqrt(2)*(4)\n    if side == 13:\n        return math.sqrt(3)*(2)\n    if side == 14:\n        return math.sqrt(4)*(3)\n    if side == 15:\n        return math.sqrt(5)*(6)\n    if side == 16:\n        return math.sqrt(2)*(7)\n    if side == 17:\n        return math.sqrt(3)*(8)\n    if side == 18:\n        return math.sqrt(4)*(7)\n    if side == 19:\n        return math.sqrt(5)*(6)\n    if side == 20:\n        return math.sqrt(2)*(8)\n    if side == 21:\n        return math.sqrt(3)*(7)\n    if side == 22:\n        return math.sqrt(4)*(8)\n    if side == 23:\n        return math.sqrt(2)*(8)\n    if side == 24:\n        return math.sqrt(3)*(7)\n    if side == 25:\n        return math.sqrt(2)*(8)\n    if side == 26:\n        return math.sqrt(3)*(7)\n    if side == 27:\n        return math.sqrt(1)*(9)\n    if side == 28:\n        return math.sqrt(1)*(10)\n    if side == 29:\n        return math.sqrt(2)*(10)\n    if side == 30:\n        return math.sqrt(3)*(9)\n    if side == 31:\n        return math.sqrt(4)*(10)\n    if side == 32:\n        return math.sqrt(2)*(9)\n    if side == 33:\n        return math.sqrt(1)*(12)\n    if side == 34:\n        return math.sqrt(1)*(13)\n    if side == 35:\n        return math.sqrt(2)*(12)\n    if side == 36:\n        return math.sqrt(3)*(13)\n    if side == 37:\n        return math.sqrt(4)*(12)\n    if side == 38:\n        return math.sqrt(1)*(15)\n    if side == 39:\n        return math.sqrt(2)*(15)\n    if side == 40:\n        return math.sqrt(3)*(15)\n    if side == 41:\n        return math.sqrt(4)*(15)\n    if side == 42:\n        return math.sqrt(2)*(15)\n    if side == 43:\n        return math.sqrt(3)*(15)\n    if side == 44:\n        return math.sqrt(4)*(15)\n    if side == 45:\n        return math.sqrt(1)*(18)\n    if side == 46:\n        return math.sqrt(2)*(18)\n    if side == 47:\n        return math.sqrt(3)*(18)\n    if side == 48:\n        return math.sqrt(4)*(18)\n    if side == 49:\n        return math.sqrt(2)*(18)\n    if side == 50:\n        return math.sqrt(3)*(18)\n    if side == 51:\n        return math.sqrt(4)*(18)\n    if side == 52:\n        return math.sqrt(2)*(18)\n    if side == 53:\n        return math.sqrt(3)*(18)\n    if side == 54:\n        return math.sqrt(4)*(18)\n    if side == 55:\n        return math.sqrt(1)*(20)\n    if side == 56:\n        return math.sqrt(2)*(20)\n    if side == 57:\n        return math.sqrt(3)*(20)\n    if side == 58:\n        return math.sqrt(4)*(20)\n    if side == 59:\n        return math.sqrt(2)*(20)\n    if side == 60:\n        return math.sqrt(3)*(20)\n    if side == 61:\n        return math.sqrt(4)*(20)\n    if side == 62:\n        return math.sqrt(2)*(20)\n    if side == 63:\n        return math.sqrt(3)*(20)\n    if side == 64:\n        return math.sqrt(4)*(20)\n    if side == 65:\n        return math.sqrt(2)*(20)\n    if side == 66:\n        return math.sqrt(3)*(20)\n    if side == 67:\n        return math.sqrt(4)*(20)\n    if side == 68:\n        return math.sqrt(2)*(20)\n    if side == 69:\n        return math.sqrt(3)*(20)\n    if side == 70:\n        return math.sqrt(4)*(20)\n    if side == 71:\n        return math.sqrt(2)*(20)\n    if side == 72:\n        return math.sqrt(3)*(20)\n    if side == 73:\n        return math.sqrt(4)*(20)\n    if side == 74:\n        return math.sqrt(2)*(20)\n    if side == 75:\n        return math.sqrt(3)*(20)\n    if side == 76:\n        return math.sqrt(4)*(20)\n    if side == 77:\n        return math.sqrt(2)*(20)\n    if side == 78:\n        return math.sqrt(3)*(20)\n    if side == 79:\n        return math.sqrt(4)*(20)\n    if side == 80:\n        return math.sqrt(2)*(20)\n    if side == 81:\n        return math.sqrt(3)*(20)\n    if side == 82:\n        return math.sqrt(4)*(20)\n    if side == 83:\n        return math.sqrt(2)*(20)\n    if side == 84:\n        return math.sqrt(3)*(20)\n    if side == 85:\n        return math.sqrt(4)*(20)\n    if side == 86:\n        return math.sqrt(2)*(20)\n    if side == 87:\n        return math.sqrt(3)*(20)\n    if side == 88:\n        return math.sqrt(4)*(20)\n    if side == 89:\n        return math.sqrt(2)*(20)\n    if side == 90:\n        return math.sqrt(3)*(20)\n    if side == 91:\n        return math.sqrt(4)*(20)\n    if side == 92:\n        return math.sqrt(2)*(20)\n    if side == 93:\n        return math.sqrt(3)*(20)\n    if side == 94:\n        return math.sqrt(4)*(20)\n    if side == 95:\n        return math.sqrt(2)*(20)\n    if side == 96:\n        return math.sqrt(3)*(20)\n    if side == 97:\n        return math.sqrt(4)*(20)\n    if side == 98:\n        return math.sqrt(2)*(20)\n    if side == 99:\n        return math.sqrt(3)*(20)\n    if side == 100:\n        return math.sqrt(4)*(20)\n    if side == 101:"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    if side == \"a\":\n        return a * (3**0.5)\n    if side == \"b\":\n        return b * (3**0.5)\n    if side == \"c\":\n        return c * (3**0.5)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(side ** 2 - 1)) / math.sqrt(3)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a=side/3\n    b=3*side\n    c=a+b\n    d=math.sqrt(1-(a*a+b*b))\n    e=math.sqrt(1-(c*c+d*d))\n    f=math.sqrt(1-(d*d+e*e))\n    g=math.sqrt(1-(d*d-f*f))\n    return round((math.acos((a**2+b**2-c**2)/(2*d*g)),3)"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == \"square\":\n        return 0.25*math.pi*(side)**2\n    elif side == \"cube\":\n        return math.pi*side**3\n    elif side == \"cylinder\":\n        return math.pi*(side*side)**2\n    elif side == \"circle\":\n        return 2*math.pi*side\n    else:\n        return \"Unknown\"\ndef area_rectangle(side1, side2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return (side1**2 + side2**2)**0.5\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (side1 + side2 + side3)**0.5\ndef area_diamond(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a diamond.\n    '''\n    return side1**2 + side2**2 + side3**2\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return radius**2 * math.pi\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return math.pi*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    \n    if side=='top':\n        return 4.0*3.14*(0.25*side)\n    if side=='bottom':\n        return 4.0*3.14*(0.25*side)\n    if side=='left':\n        return 1.0*math.sqrt(3.0)*3.14\n    if side=='right':\n        return 1.0*math.sqrt(3.0)*3.14\n    if side=='middle':\n        return 4.0*3.14*(0.5*side)\n    if side=='n1':\n        return 4.0*3.14*(0.25*side)\n    if side=='n2':\n        return 4.0*3.14*(0.5*side)\n    if side=='n3':\n        return 4.0*3.14*(0.75*side)\n    if side=='n4':\n        return 4.0*3.14*(1.0*side)\n    if side=='n5':\n        return 4.0*3.14*(1.5*side)\n    if side=='n6':\n        return 4.0*3.14*(2.0*side)\n    if side=='n7':\n        return 4.0*3.14*(2.5*side)\n    if side=='n8':\n        return 4.0*3.14*(3.0*side)\n    if side=='n9':\n        return 4.0*3.14*(3.5*side)\n    if side=='n10':\n        return 4.0*3.14*(4.0*side)\n    if side=='n11':\n        return 4.0*3.14*(5.0*side)\n    if side=='n12':\n        return 4.0*3.14*(5.5*side)\n    if side=='n13':\n        return 4.0*3.14*(6.0*side)\n    if side=='n14':\n        return 4.0*3.14*(6.5*side)\n    if side=='n15':\n        return 4.0*3.14*(7.0*side)\n    if side=='n16':\n        return 4.0*3.14*(7.5*side)\n    if side=='n17':\n        return 4.0*3.14*(8.0*side)\n    if side=='n18':\n        return 4.0*3.14*(8.5*side)\n    if side=='n19':\n        return 4.0*3.14*(9.0*side)\n    if side=='n20':\n        return 4.0*3.14*(9.5*side)\n    if side=='n21':\n        return 4.0*3.14*(10.0*side)\n    if side=='n22':\n        return 4.0*3.14*(10.5*side)\n    if side=='n23':\n        return 4.0*3.14*(11.0*side)\n    if side=='n24':\n        return 4.0*3.14*(11.5*side)\n    if side=='n25':\n        return 4.0*3.14*(12.0*side)\n    if side=='n26':\n        return 4.0*3.14*(12.5*side)\n    if side=='n27':\n        return 4.0*3.14*(13.0*side)\n    if side=='n28':\n        return 4.0*3.14*(13.5*side)\n    if side=='n29':\n        return 4.0*3.14*(14.0*side)\n    if side=='n30':\n        return 4.0*3.14*(14.5*side)\n    if side=='n31':\n        return 4.0*3.14*(15.0*side)\n    if side=='n32':\n        return 4.0*3.14*(15.5*side)\n    if side=='n33':\n        return 4.0*3.14*(16.0*side)\n    if side=='n34':\n        return 4.0*3.14*(16.5*side)\n    if side=='n35':\n        return 4.0*3.14*(17.0*side)\n    if side=='n36':\n        return 4.0*3.14*(17.5*side)\n    if side=='n37':\n        return 4.0*3.14*(18.0*side)\n    if side=='n38':\n        return 4.0*3.14*(18.5*side)\n    if side=='n39':\n        return 4.0*3.14*(19.0*side)\n    if side=='n40':\n        return 4.0*3.14*(19.5*side)\n    if side=='n41':\n        return 4.0*3.14*(20.0*side)\n    if side=='n42':\n        return 4.0*3.14*(20.5*side)\n    if side=='n43':\n        return 4.0*3.14*(21.0*side)\n    if side=='n44':\n        return 4.0*3.14*(21.5*side)\n    if side=='n45':\n        return 4.0*3.14*(22.0*side)\n    if side=='n46':\n        return 4.0*3.14*(22.5*side)\n    if side=='n47':\n        return 4.0*3.14*(23.0*side)\n    if side=='n48':\n        return 4.0*3.14*(23.5*side)\n    if side=='n49':\n        return 4.0*3.14*(24.0*side)\n    if side=='n50':\n        return 4.0*3.14*(24.5*side)\n    if side=='n51':\n        return 4.0*3.14*(25.0*side)\n    if side=='n52':\n        return 4.0*3.14*(25.5*side)\n    if side=='n53':\n        return 4.0*3.14*(26.0*side)\n    if side=='n54':\n        return 4.0*3.14*(26.5*side)\n    if side=='n55':\n        return 4.0*3.14*(27.0*side)\n    if side=='n56':\n        return 4.0*3.14*(27.5*side)\n    if side=='n57':\n        return 4.0*3.14*(28.0*side)\n    if side=='n58':\n        return 4.0*3.14*(28.5*side)\n    if side=='n59':\n        return 4.0*3.14*(29.0*side)\n    if side=='n60':\n        return 4.0*3.14*(29.5*side)\n    if side=='n61':\n        return 4.0*3.14*(30.0*side)\n    if side=='n62':\n        return 4.0*3.14*(30.5*side)\n    if side=='n63':\n        return 4.0*3.14*(31.0*side)\n    if side=='n64':\n        return 4.0*3.14*(31.5*side)\n    if side=='n65':\n        return 4.0*3.14*(32.0*side)\n    if side=='n66':\n        return 4.0*3.14*(32.5*side)\n    if side=='n67':\n        return 4.0*3.14*(33.0*side)\n    if side=='n68':\n        return 4.0*3.14*(33.5*side)\n    if side=='n69':\n        return 4.0*3.14*(34.0*side)\n    if side=='n70'"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new = []\n    for i in list:\n        new.append(i)\n    if m==0:\n        return new\n    elif m==1:\n        return new[::-1]\n    else:\n        for i in range(m):\n            new.append(new[-1])\n        new.reverse()\n        return new\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    mid = l//2\n    for i in range(mid):\n        tmp = list[i]\n        list[i] = list[l-i-1]\n        list[l-i-1] = tmp\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = list.copy()\n    for i in range(len(list) - m):\n        new_list.append(list.pop(0))\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[len(list) - 1 - i])\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = n - m\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[n:] + list[:n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[::-1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    result = []\n    \n    for index in range(len(list)):\n        result.append(list[index])\n        \n    list.clear()\n    \n    for index in range(len(result)):\n        list.append(result[index])\n    \n    return list\n    \n    \n    \n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Recursive Method\n    def rotate_right(list, m):\n        n = len(list)\n        # Find last index and insert it to start\n        m = (m - 1) % n\n        for i in range(0, n-m):\n            list.insert(0, list.pop())\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        test_tup[1]\n    except IndexError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None or len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_bool = 0\n    for x in test_tup:\n        if x == None:\n            test_bool = 1\n            break\n    if test_bool == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None or len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        raise Exception(\"The given tuple is empty or contains no element\")\n    else:\n        return test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    def divisibles(x):\n        if x % 10!= 0:\n            return 'no'\n        else:\n            return 'yes'\n    \n    def preprocess(startnum, endnum):\n        # get digits\n        digits = []\n        num = startnum\n        while num < endnum:\n            digits.append(num)\n            num += 1\n        return digits\n    \n    def find_divisibles(digits):\n        answer = []\n        digits = digits[::-1]\n        for x in digits:\n            if divisibles(x) == 'yes':\n                answer.append(x)\n        return answer\n    \n    if len(digits) > 0:\n        answer = find_divisibles(preprocess(startnum, endnum))\n    \n    else:\n        answer = 0\n    \n    return answer\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divs = []\n    for i in range(startnum, endnum + 1):\n        if i % 10 == 0:\n            divs.append(i)\n    return divs\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = []\n    for x in range(startnum, endnum + 1):\n        if x%10==0:\n            l.append(x)\n    return l\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    sum = 0\n    for n in range(startnum, endnum+1):\n        sum += n\n        #print(sum)\n    return sum\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisibles = []\n    for num in range(startnum, endnum):\n        if num % 10 == 0:\n            divisibles.append(num)\n    print(divisibles)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(map(int, str(startnum) + str(endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(startnum, endnum)\n    range_num = range(startnum, endnum+1)\n    print(range_num)\n    checker = [int(item) for item in range_num]\n    divisors = [n for n in range_num if n % 10 == 0]\n    return len(divisors)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    div_count = 0\n    for i in range(startnum, endnum+1):\n        if int(str(i)[0]) % int(str(i)[1]) == 0:\n            div_count += 1\n    print(div_count)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Your code here\n    def is_divisible_by(x):\n        if x % 10!= 0:\n            return False\n        else:\n            return True\n    def is_divisible_by_digits(num):\n        return all(char.isdigit() for char in str(num))\n    return is_divisible_by(startnum) and is_divisible_by(endnum) and is_divisible_by_digits(startnum) and is_divisible_by_digits(endnum)"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [startnum + i * (endnum - startnum) for i in range(10)]\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return round(r*a/360,1)\ndef sector_centre(r,a):\n    '''\n    Function to find the centre of a sector. The function takes the radius and angle as inputs.\n    '''\n    return (r+a)/2\ndef sector_boundaries(r,a):\n    '''\n    Function to find the boundaries of a sector. The function takes the radius and angle as inputs.\n    '''\n    return sector_area(r,a),sector_area(r,a)\ndef sector_intersect(a,c,r,d,l):\n    '''\n    Function to calculate the intersection of a sector with a rectangle. The function takes the angle, size and origin of rectangle as inputs.\n    '''\n    return sector_area(sector_area(r,a),sector_area(sector_area(sector_area(r,a),a),sector_area(sector_area(r,a),a)))/sector_area(sector_area(sector_area(sector_area(r,a),a),sector_area(sector_area(sector_area(r,a),a),a)),sector_area(sector_area(sector_area(sector_area(r,a),a),sector_area(sector_area(sector_area(sector_area(r,a),a),a)),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a)),sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(r,a),a),a)),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(r,a),a),a),sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_area(sector_are"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = a * (math.pi / 180)\n    return (math.cos(angle) * r) ** 2\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # your code goes here\n    if (r > 360 or a > 360):\n        return None\n    if (r == 360):\n        return (math.pi * (a*a - 1))\n    if (r == a):\n        return 2 * math.pi * a\n    else:\n        return (math.pi * (a*a - 1) * math.sqrt(r**2 + a**2))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    print('\\n##### CALCULATING AREA OF SECTOR ####')\n    #calculate sector area\n    area = r**2 * math.cos(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n    pass\n    '''\n    # if r <= 0 or a <= 0:\n    #     return None\n    # if r < 0:\n    #     return r\n    # if a < 0:\n    #     return a\n    # if sector_area(r,a)!= None:\n    #     return sector_area(r,a)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    c = math.cos(math.radians(a))\n    s = math.sin(math.radians(a))\n    if r<c*r:\n        return None\n    if r<c*r:\n        return (math.pi*r**2*c)/(1-c*r)\n    if r>c*r:\n        return (math.pi*r**2*s)/(1-s*r)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(r < 2):\n        return None\n    elif(a <= 0 or a >= 360):\n        return None\n    else:\n        sector_area = (r**2)*math.cos(math.radians(a))\n        return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = math.radians(a)\n    return (math.tan(angle))*r\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0:\n        a=360-a\n    area=4*math.pi*r*r*math.sin(a/180.0*math.pi)\n    return area\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a list of the letters in X.\n    # Create a list of the letters in Y.\n    # Create a list of the letters in Z.\n    # Create a tuple of the letters in X.\n    # Create a tuple of the letters in Y.\n    # Create a tuple of the letters in Z.\n    X = [letter for letter in X if letter in Y]\n    Y = [letter for letter in Y if letter in X]\n    Z = [letter for letter in Z if letter in Y]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X, Y, Z = sorted(list(set([X, Y, Z])))\n    # print(X, Y, Z)\n    n, m, d = len(X), len(Y), len(Z)\n    # print(n, m, d)\n    if n == 0:\n        return ''\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if (len(X) < 3 or len(Y) < 3 or len(Z) < 3):\n        return \"Cannot find common subsequence\"\n    if len(X) > len(Y) or len(X) > len(Z):\n        return \"Cannot find common subsequence\"\n    \n    lcs = [0] * (len(Z) + 1)\n    lcs[0] = 0\n    \n    for i in range(len(Z)):\n        for j in range(len(X)):\n            if X[j] == Z[i]:\n                lcs[i + 1] = max(lcs[i + 1], lcs[i] + 1)\n                \n    if lcs[len(Z) - 1]!= 0:\n        return lcs[len(Z) - 1]\n    else:\n        return -1\n    \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m, n = len(X), len(Y)\n    lcs = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = 1 + lcs[i - 1][j - 1]\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    \n    return lcs[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = []\n    index = 0\n    count = 0\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            if X[i] == Y[j] and count < 3:\n                count += 1\n            else:\n                if count > 0:\n                    L.append(X[i:index+1])\n                    if count == 3:\n                        count = 0\n                        index += 1\n                elif count > 0:\n                    L.append(X[i:index+1])\n                    if count == 2:\n                        count = 0\n                        index += 1\n                else:\n                    index = i\n                    count = 0\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if (len(X)<len(Y) or len(X)<len(Z)) or (len(Y)<len(Z) or len(Y)<len(X)): \n        print (\"Error, length of strings does not match!\")\n        return\n    elif len(X) == 0 or len(Y) == 0 or len(Z) == 0: \n        print (\"Error, empty strings\")\n        return\n    else: \n        LCS_length = [0] * (len(X)+1) \n        LCS_length[0] = 0\n        for i in range(1, len(X) + 1): \n            for j in range(1, len(Y) + 1): \n                if (X[i-1] == Y[j-1]): \n                    LCS_length[i] = LCS_length[i-1] + 1\n        return LCS_length\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    L = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(m+1): \n        for j in range(n+1):\n            if (i==0 or j==0): \n                L[j][i] = 0\n            elif (X[i-1] == Y[j-1]): \n                L[j][i] = L[j-1][i-1] + 1\n            else: \n                L[j][i] = max(L[j-1][i], L[j][i-1])\n    return L[n][m]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z): \n        return -1\n    elif len(X) == len(Y) and len(X) == len(Z): \n        return max(X,Y,Z) \n    else: \n        l = lcs_of_three(X, Y, Z[:len(X) - len(Y)]) \n        r = lcs_of_three(X, Y, Z[len(X):]) \n        m = lcs_of_three(Y, Z[:len(X) - len(Y)], Z[len(Y):]) \n        \n        if l == -1 or r == -1 or m == -1: \n            return -1\n        else: \n            return max(l, r, m) \n        \ndef reverse_complement(seq): \n    '''\n    Write a function to reverse a string. The reverse complement of a string is the complement of the original string after reversing the positions of the letters.\n    '''\n    if len(seq) < 2: \n        return seq\n    else: \n        seq = ''.join(['T'] + reversed(seq) + ['T']) \n        return seq\n        \ndef reverse_complement_of_string(seq): \n    '''\n    Write a function to reverse a string. The reverse complement of a string is the complement of the original string after reversing the positions of the letters.\n    '''\n    if len(seq) < 2: \n        return seq\n    else: \n        seq = ''.join(['T'] + reversed(seq) + ['T']) \n        return seq\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_length = len(X)\n    Y_length = len(Y)\n    Z_length = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0: \n        return len(Y) \n    if len(Y) == 0: \n        return len(Z) \n    \n    if len(X) == len(Y): \n        return lcs_of_three(X, Z, Y) \n    \n    if len(Y) == len(Z): \n        return len(X) \n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i].isupper():\n            if str1[i] not in ['A', 'E', 'I', 'O', 'U']:\n                str1 = str1.replace(str1[i],'' + str1[i].lower() +'')\n                i += 1\n            else:\n                i += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('[A-Z]','', str1)\n    str1 = re.sub('[a-z]','', str1)\n    str1 = re.sub('[^A-Z]','', str1)\n    str1 = str1.split()\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # This code snippet is starting from Assignment 3.\n    # --- Variables ---\n    # *str1: A string of words\n    # *new_str: A string of words, with spaces between words\n    # *add_space: A boolean, which determines whether to add spaces between words.\n    # --- Output ---\n    # *This function returns the modified string with spaces between words.\n    #\n    str1 = str1.split()\n    new_str = \" \".join(str1)\n    if add_space:\n        new_str = new_str.replace(' ','')\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('[^a-zA-Z]+','', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove spaces\n    str1 = str1.replace(' ', '')\n    # remove doubled spaces\n    str1 = str1.replace('\\n', '')\n    # remove last whitespace\n    str1 = str1.strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.split()\n    for word in str2:\n        word = word.capitalize()\n        if word[0].isupper():\n            word = word[1:] + word[0].upper() + word[1:]\n        print(word)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.split(' ',str1)\n    for i in range(0,len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][0].lower() + words[i][1:]\n        else:\n            words[i] = words[i][1:]\n    return''.join(words)\ndef normalize(str1):\n    '''\n    Write a function that normalizes a string to NFC (Normalize)\n    '''\n    normalized = ''\n    for i in str1:\n        if i.isalnum():\n            normalized += i.upper()\n    return normalized\ndef rem_space(str1):\n    '''\n    Write a function that removes spaces from a string.\n    '''\n    return str1.replace(' ', '')\ndef remove_non_alphabet(str1):\n    '''\n    Write a function that removes all non-alphabet characters from a string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_non_alphabet_words(str1):\n    '''\n    Write a function that removes all non-alphabet words from a string.\n    '''\n    result = re.sub('[^a-zA-Z0-9]',' ', str1)\n    return result.split()\ndef remove_non_alphabet_words_space(str1):\n    '''\n    Write a function that removes all non-alphabet words with space from a string.\n    '''\n    result = re.sub('[^a-zA-Z0-9]','', str1)\n    return result.split()\ndef remove_non_alpha_latin(str1):\n    '''\n    Write a function that removes all non-alphabet characters from a string, but with spaces.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef normalize_chinese(str1):\n    '''\n    Write a function that normalizes a string to American-Traditional Chinese characters.\n    '''\n    normalized = ''\n    for i in str1:\n        if i.isalpha():\n            if i.isupper():\n                normalized += i.lower()\n            else:\n                normalized += i\n        else:\n            normalized += i\n    return normalized\ndef remove_non_chinese(str1):\n    '''\n    Write a function that removes all non-chinese characters from a string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_non_chinese_spaces(str1):\n    '''\n    Write a function that removes all non-chinese characters with spaces from a string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef convert_numbers_to_spaces(str1):\n    '''\n    Write a function that converts a string with numbers to spaces.\n    '''\n    return str1.replace('+','')\ndef convert_numbers_to_spaces_letters(str1):\n    '''\n    Write a function that converts a string to a list of letters.\n    '''\n    return str1.replace('+','')\ndef remove_non_english_letters(str1):\n    '''\n    Write a function that removes non-english letters from a string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_non_english_letters_spaces(str1):\n    '''\n    Write a function that removes non-english letters from a string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef lower_words(str1):\n    '''\n    Write a function that lowercase the words in a given string.\n    '''\n    return str1.lower()\ndef upper_words(str1):\n    '''\n    Write a function that uppercase the words in a given string.\n    '''\n    return str1.upper()\ndef special_words(str1):\n    '''\n    Write a function that uses special characters in a given string.\n    '''\n    return str1.replace('!','')\ndef nfc_to_numbers(str1):\n    '''\n    Write a function that uses the NFC to convert a string of characters to a list of numbers.\n    '''\n    return str1.split()\ndef number_to_nfc(str1):\n    '''\n    Write a function that uses the NFC to convert a list of numbers to a string of characters.\n    '''\n    return str1.replace(' ','').split()\ndef join_numbers(str1):\n    '''\n    Write a function that joins the numbers in a given string.\n    '''\n    return str1.split(' ')[0]\ndef number_to_word(str1):\n    '''\n    Write a function that uses the NFC to convert a list of numbers to a string of words.\n    '''\n    return str1.replace(' ','').split(' ')[0]\ndef number_to_word_nfc(str1):\n    '''\n    Write a function that uses the NFC to convert a list of numbers to a string of words, using the NFC.\n    '''\n    return str1.replace(' ','').split(' ')[0]\ndef number_to_words(str1):\n    '''\n    Write a function that uses the NFC to convert a list of numbers to a string of words, using the NFC.\n    '''\n    return str1.replace(' ','').split(' ')\ndef words_to_nfc(str1):\n    '''\n    Write a function that uses the NFC to convert a string of words to a list of numbers.\n    '''\n    return str1.split(' ')\ndef words_to_nfc_numbers(str1):\n    '''\n    Write a function that uses the NFC to convert a list of words to a string of numbers.\n    '''\n    return str1.replace(' ','').split(' ')\ndef separator(str1, separator):\n    '''\n    Write a function that converts a string of words to a list of numbers.\n    '''\n    return str1.split(separator)\ndef split_and_concat(str1):\n    '''\n    Write a function that converts a string to a list of words.\n    '''\n    return str1.split(' ')\ndef number_to_word_nfc(str1):\n    '''\n    Write a function that uses the NFC to convert a list of numbers to a string of words, using the NFC.\n    '''\n    return str1.replace(' ','').split(' ')\ndef number_to_words_nfc(str1):\n    '''\n    Write a function that uses the NFC to convert a list of numbers to a string of words, using the NFC.\n    '''\n    return str1.replace(' ','').split(' ')\ndef capitalize_words(str1):\n    '''\n    Write a function that capitalizes the first and last letters of a given string.\n    '''\n    return str1.capitalize()\ndef remove_duplicates(str1):\n    '''\n    Write a function that removes all duplicate letters from a given string.\n    '''\n    return str1.replace(str1[0],str1[1])\ndef count_special_characters(str1):\n    '''\n    Write a function that counts the number of special characters in a given string.\n    '''\n    return str1.count('!') + str1.count('?') + str1.count('.') + str1.count(',') + str1.count(';') + str1.count('?') + str1.count('\"') + str1.count('(') + str1.count(')') + str1.count('(') + str1.count(')')\ndef count_non_english_chars(str1):\n    '''\n    Write a function that counts the number of non-english characters in a given string.\n    '''\n    return str1.count('!') + str1.count('?') + str1.count('."
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.strip()\n    print(str2.split(\" \"))\n    return str2.split(\" \")\n    \ndef punctuation_characters(str1):\n    '''\n    Write a function to separate punctuation characters from words.\n    '''\n    str2 = str1.strip().split()\n    print(str2)\n    return str2\n    \ndef create_dict(str1):\n    '''\n    Create a dictionary with words as keys and their frequency as values.\n    '''\n    mydict = {}\n    for word in str1.split():\n        if word not in mydict.keys():\n            mydict[word] = 1\n        else:\n            mydict[word] += 1\n    return mydict\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(' ','_')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('-',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace(' ', '_')\n    return str1\ndef capital_words_capital_words(str1):\n    '''\n    Write a function to find all capital letters in a given string.\n    '''\n    str1 = str1.replace(' ','_')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('-',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace(' ', '_')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace(' ','_')\n    return str1\ndef capital_words_capital_words_all(str1):\n    '''\n    Write a function to find all capital letters in a given string.\n    '''\n    str1 = str1.replace(' ','_')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('-',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 = str1.replace('_',' ')\n    str1 "
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = str1.split()\n    new_words = []\n    for word in words:\n        if word[0] in \"abcdefghijklmnopqrstuvwxyz\":\n            new_words.append(word + \" \")\n        else:\n            new_words.append(word + \" \")\n    return \" \".join(new_words)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort(nums):\n        nums.sort(key=str)\n        return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    temp_list = []\n    for i in nums_str:\n        if type(i) is float:\n            temp_list.append(i)\n        else:\n            temp_list.append(int(i))\n    \n    # Sort the list from smallest to largest\n    temp_list.sort()\n    \n    # Create a copy of the list, as it is not modified\n    new_nums_str = []\n    for num in temp_list:\n        new_nums_str.append(num)\n    \n    return new_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) < 2:\n        return sorted(nums_str)\n    #sort the strings\n    nums_str.sort(reverse = True)\n    #find the middle element\n    middle = len(nums_str) // 2\n    #extract the first half of the string and then merge them together\n    nums_str_1 = nums_str[:middle]\n    nums_str_2 = nums_str[middle:]\n    #merge the strings into a new sorted list\n    nums_str_1.sort(reverse = True)\n    nums_str_2.sort(reverse = True)\n    #merge the strings together\n    nums_str_3 = nums_str_1 + nums_str_2\n    #return the sorted list\n    return nums_str_3\n    \nprint(sort_numeric_strings(['2','1','1', '2', '2', '2']))\nprint(sort_numeric_strings(['2','1','1', '2', '2', '2']))\nprint(sort_numeric_strings(['1','1','2','2','2','1']))\nprint(sort_numeric_strings(['1','1','2','2','2','1']))\nprint(sort_numeric_strings(['2','2','2','1','1','1']))\nprint(sort_numeric_strings(['2','1','1', '2', '2', '2']))\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    print(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_int = list(map(int, nums_str))\n    nums_str_int.sort()\n    nums_str_int_str = list(map(str, nums_str_int))\n    return ''.join(nums_str_int_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # write your code here\n    nums_str.sort(key=str.lower)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sort_numeric_strings = sorted(nums_str)\n    nums_str = ''.join(sort_numeric_strings)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_list = []\n    for i in nums_str:\n        if i == '.':\n            i = '0'\n        new_list.append(i)\n    new_list = sorted(new_list)\n    return new_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Your code here\n    nums = []\n    \n    for i in nums_str:\n        temp = i.replace(',','.')\n        nums.append(float(temp))\n    \n    nums.sort()\n    \n    for i in range(len(nums)):\n        nums[i] = round(nums[i],3)\n    \n    for i in range(len(nums)):\n        nums[i] = round(nums[i],3)\n        \n    return nums\n    \n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list)!= len(test_tup):\n        raise ValueError(\"tuple sizes don't match\")\n    else:\n        test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) == 0:\n        return\n    elif len(test_list) == 1:\n        test_list[0] = test_tup\n    else:\n        test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_tup[i]\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \ndef add_tuple_2(test_list, test_tup):\n    '''\n    Write a function that takes a tuple and adds it\n    to the given list.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n        "
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # If the list is empty, return an error.\n    if len(test_list) == 0:\n        return None\n    # Find the lowest index of the tuple.\n    index = 0\n    for item in test_tup:\n        # Check if the tuple contains an element that is\n        # greater than the index of the tuple.\n        if item > index:\n            # If it does, break out of the loop.\n            break\n        # Set the index to the lowest element of the tuple.\n        index = item\n    # Append the tuple to the list.\n    test_list.append(test_tup[index])\n    # Return the list.\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # YOUR CODE HERE\n    test_list.append(test_tup)\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > (len(arr) // 2):\n        return True\n    elif arr[i] >= arr[(i + 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i + 1) // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return False\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return True\n    else:\n        return check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i\n    if left < len(arr):\n        if arr[i] < arr[left]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] > arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[2*i+1]:\n        return True\n    elif arr[i] < arr[2*i+1]:\n        return False\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i >= len(arr):\n        return True\n    \n    if arr[i] < arr[2 * i + 1]:\n        return False\n    \n    return check_min_heap_helper(arr, 2 * i + 1)\n    \n    \ndef check_min_heap(arr):\n    '''\n    Write a function that checks if a given array represents a min heap.\n    '''\n    \n    for i in range(len(arr)//2):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n    return True\n    \n    \ndef check_heapify(arr, n):\n    '''\n    Write a function that checks if a given array represents a min heap or not.\n    '''\n    \n    if n < 0:\n        return False\n    \n    if n == 0:\n        return True\n    \n    small = 2 * n\n    \n    if arr[small] < arr[n]:\n        arr[small], arr[n] = arr[n], arr[small]\n        return check_heapify(arr, small)\n    \n    return False\n    \n    \ndef build_heap(arr):\n    '''\n    Write a function that creates a min heap from an array.\n    '''\n    \n    for i in range(len(arr)//2, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n        arr[i], arr[0] = arr[0], arr[i]\n    \n    return arr\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    if arr[i] > arr[i + 1]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] == 0:\n        return False\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if arr[i] > arr[left] and arr[i] > arr[right]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == i + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return arr[i] >= arr[2 * i]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    pass"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = 1\n    r = n\n    while(l < r): \n        if (l % 2 == 0): \n            l = l + 1\n        else: \n            r = r - 1\n    return r"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    while i < n:\n        #print(\"number\", i)\n        if i == 0:\n            print(i)\n            return\n        if i == 1:\n            print(i)\n            return\n        if i == 2:\n            print(i)\n            return\n        if i == 3:\n            print(i)\n            return\n        if i == 4:\n            print(i)\n            return\n        if i == 5:\n            print(i)\n            return\n        if i == 6:\n            print(i)\n            return\n        if i == 7:\n            print(i)\n            return\n        if i == 8:\n            print(i)\n            return\n        if i == 9:\n            print(i)\n            return\n        if i == 10:\n            print(i)\n            return\n        if i == 11:\n            print(i)\n            return\n        if i == 12:\n            print(i)\n            return\n        if i == 13:\n            print(i)\n            return\n        if i == 14:\n            print(i)\n            return\n        if i == 15:\n            print(i)\n            return\n        if i == 16:\n            print(i)\n            return\n        if i == 17:\n            print(i)\n            return\n        if i == 18:\n            print(i)\n            return\n        if i == 19:\n            print(i)\n            return\n        if i == 20:\n            print(i)\n            return\n        if i == 21:\n            print(i)\n            return\n        if i == 22:\n            print(i)\n            return\n        if i == 23:\n            print(i)\n            return\n        if i == 24:\n            print(i)\n            return\n        if i == 25:\n            print(i)\n            return\n        if i == 26:\n            print(i)\n            return\n        if i == 27:\n            print(i)\n            return\n        if i == 28:\n            print(i)\n            return\n        if i == 29:\n            print(i)\n            return\n        if i == 30:\n            print(i)\n            return\n        if i == 31:\n            print(i)\n            return\n        if i == 32:\n            print(i)\n            return\n        if i == 33:\n            print(i)\n            return\n        if i == 34:\n            print(i)\n            return\n        if i == 35:\n            print(i)\n            return\n        if i == 36:\n            print(i)\n            return\n        if i == 37:\n            print(i)\n            return\n        if i == 38:\n            print(i)\n            return\n        if i == 39:\n            print(i)\n            return\n        if i == 40:\n            print(i)\n            return\n        if i == 41:\n            print(i)\n            return\n        if i == 42:\n            print(i)\n            return\n        if i == 43:\n            print(i)\n            return\n        if i == 44:\n            print(i)\n            return\n        if i == 45:\n            print(i)\n            return\n        if i == 46:\n            print(i)\n            return\n        if i == 47:\n            print(i)\n            return\n        if i == 48:\n            print(i)\n            return\n        if i == 49:\n            print(i)\n            return\n        if i == 50:\n            print(i)\n            return\n        if i == 51:\n            print(i)\n            return\n        if i == 52:\n            print(i)\n            return\n        if i == 53:\n            print(i)\n            return\n        if i == 54:\n            print(i)\n            return\n        if i == 55:\n            print(i)\n            return\n        if i == 56:\n            print(i)\n            return\n        if i == 57:\n            print(i)\n            return\n        if i == 58:\n            print(i)\n            return\n        if i == 59:\n            print(i)\n            return\n        if i == 60:\n            print(i)\n            return\n        if i == 61:\n            print(i)\n            return\n        if i == 62:\n            print(i)\n            return\n        if i == 63:\n            print(i)\n            return\n        if i == 64:\n            print(i)\n            return\n        if i == 65:\n            print(i)\n            return\n        if i == 66:\n            print(i)\n            return\n        if i == 67:\n            print(i)\n            return\n        if i == 68:\n            print(i)\n            return\n        if i == 69:\n            print(i)\n            return\n        if i == 70:\n            print(i)\n            return\n        if i == 71:\n            print(i)\n            return\n        if i == 72:\n            print(i)\n            return\n        if i == 73:\n            print(i)\n            return\n        if i == 74:\n            print(i)\n            return\n        if i == 75:\n            print(i)\n            return\n        if i == 76:\n            print(i)\n            return\n        if i == 77:\n            print(i)\n            return\n        if i == 78:\n            print(i)\n            return\n        if i == 79:\n            print(i)\n            return\n        if i == 80:\n            print(i)\n            return\n        if i == 81:\n            print(i)\n            return\n        if i == 82:\n            print(i)\n            return\n        if i == 83:\n            print(i)\n            return\n        if i == 84:\n            print(i)\n            return\n        if i == 85:\n            print(i)\n            return\n        if i == 86:\n            print(i)\n            return\n        if i == 87:\n            print(i)\n            return\n        if i == 88:\n            print(i)\n            return\n        if i == 89:\n            print(i)\n            return\n        if i == 90:\n            print(i)\n            return\n        if i == 91:\n            print(i)\n            return\n        if i == 92:\n            print(i)\n            return\n        if i == 93:\n            print(i)\n            return\n        if i == 94:\n            print(i)\n            return\n        if i == 95:\n            print(i)\n            return\n        if i == 96:\n            print(i)\n            return\n        if i == 97:\n            print(i)\n            return\n        if i == 98:\n            print(i)\n            return\n        if i == 99:\n            print(i)\n            return\n        if i == 100:\n            print(i)\n            return\n        if i == 101:\n            print(i)\n            return\n        if i == 102:\n            print(i)\n            return\n        if i == 103:\n            print(i)\n            return\n        if i == 104:\n            print(i)\n            return\n        if i == 105:\n            print(i)\n            return\n        if i == 106:\n            print(i)\n            return\n        if i == 107:\n            print(i)\n            return\n        if i == 108:\n            print(i)\n            return\n        if i == 109:\n            print(i)\n            return\n        if i == 110:\n            print(i)\n            return\n        if i == 111:\n            print(i)\n            return\n        if i == 112:\n            print(i)\n            return\n        if i == 113:\n            print(i)\n            return\n        if i == 114:\n            print(i)\n            return\n        if i == 115:\n            print(i)\n            return\n        if i == 116:\n            print(i)\n            return\n        if i == 117:\n            print(i)\n            return\n        if i == 118:\n            print(i)\n            return\n        if i == 119:\n            print(i)\n            return\n        if i == 120:"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n=n-1\n    if n==1: return 0\n    elif n==2: return 1\n    elif n==3: return 1\n    elif n==4: return 2\n    elif n==5: return 3\n    elif n==6: return 4\n    elif n==7: return 5\n    elif n==8: return 6\n    elif n==9: return 7\n    elif n==10: return 8\n    elif n==11: return 9\n    elif n==12: return 10\n    elif n==13: return 11\n    elif n==14: return 12\n    elif n==15: return 13\n    elif n==16: return 14\n    elif n==17: return 15\n    elif n==18: return 16\n    elif n==19: return 17\n    elif n==20: return 18\n    elif n==21: return 19\n    elif n==22: return 20\n    elif n==23: return 21\n    elif n==24: return 22\n    elif n==25: return 23\n    elif n==26: return 24\n    elif n==27: return 25\n    elif n==28: return 26\n    elif n==29: return 27\n    elif n==30: return 28\n    elif n==31: return 29\n    elif n==32: return 30\n    elif n==33: return 31\n    elif n==34: return 32\n    elif n==35: return 33\n    elif n==36: return 34\n    elif n==37: return 35\n    elif n==38: return 36\n    elif n==39: return 37\n    elif n==40: return 38\n    elif n==41: return 39\n    elif n==42: return 40\n    elif n==43: return 41\n    elif n==44: return 42\n    elif n==45: return 43\n    elif n==46: return 44\n    elif n==47: return 45\n    elif n==48: return 46\n    elif n==49: return 47\n    elif n==50: return 48\n    elif n==51: return 49\n    elif n==52: return 50\n    elif n==53: return 51\n    elif n==54: return 52\n    elif n==55: return 53\n    elif n==56: return 54\n    elif n==57: return 55\n    elif n==58: return 56\n    elif n==59: return 57\n    elif n==60: return 58\n    elif n==61: return 59\n    elif n==62: return 60\n    elif n==63: return 61\n    elif n==64: return 62\n    elif n==65: return 63\n    elif n==66: return 64\n    elif n==67: return 65\n    elif n==68: return 66\n    elif n==69: return 67\n    elif n==70: return 68\n    elif n==71: return 69\n    elif n==72: return 70\n    elif n==73: return 71\n    elif n==74: return 72\n    elif n==75: return 73\n    elif n==76: return 74\n    elif n==77: return 75\n    elif n==78: return 76\n    elif n==79: return 77\n    elif n==80: return 78\n    elif n==81: return 79\n    elif n==82: return 80\n    elif n==83: return 81\n    elif n==84: return 82\n    elif n==85: return 83\n    elif n==86: return 84\n    elif n==87: return 85\n    elif n==88: return 86\n    elif n==89: return 87\n    elif n==90: return 88\n    elif n==91: return 89\n    elif n==92: return 90\n    elif n==93: return 91\n    elif n==94: return 92\n    elif n==95: return 93\n    elif n==96: return 94\n    elif n==97: return 95\n    elif n==98: return 96\n    elif n==99: return 97\n    elif n==100: return 98\n    elif n==101: return 99\n    elif n==102: return 100\n    elif n==103: return 101\n    elif n==104: return 102\n    elif n==105: return 103\n    elif n==106: return 104\n    elif n==107: return 105\n    elif n==108: return 106\n    elif n==109: return 107\n    elif n==110: return 108\n    elif n==111: return 109\n    elif n==112: return 110\n    elif n==113: return 111\n    elif n==114: return 112\n    elif n==115: return 113\n    elif n==116: return 114\n    elif n==117: return 115\n    elif n==118: return 116\n    elif n==119: return 117\n    elif n==120: return 118\n    elif n==121: return 119\n    elif n==122: return 120\n    elif n==123: return 121\n    elif n==124: return 122\n    elif n==125: return 123\n    elif n==126: return 124\n    elif n==127: return 125\n    elif n==128: return 126\n    elif n==129: return 127\n    elif n==130: return 128\n    elif n==131: return 129\n    elif n==132: return 130\n    elif n==133: return 131\n    elif n==134: return 132\n    elif n==135: return 133\n    elif n==136: return 134\n    elif n==137: return 135\n    elif n==138: return 136\n    elif n==139: return 137\n    elif n==140: return 138\n    elif n==141: return 139\n    elif n==142: return 140\n    elif n==143: return 141\n    elif n==144: return 142\n    elif n==145: return 143\n    elif n==146: return 144\n    elif n==147: return 145\n    elif n==148: return 146\n    elif n==149: return 147\n    elif n==150: return 148\n    elif n==151: return 149\n    elif n==152: return 150\n    elif n==153: return 151\n    elif n==154: return 152\n    elif n==155: return 153\n    elif n==156: return 154\n    elif n==157: return 155\n    elif n==158: return 156\n    elif n==159: return 157\n    elif n==160: return 158\n    elif n==161: return 159\n    elif n==162: return 160\n    elif n==163: return 161\n    elif n==164: return 162\n    elif n==165: return 163\n    elif n==166: return 164\n    elif n==167: return 165\n    elif n==168: return 166\n    elif n==169: return 167\n    elif n==170: return 168\n    elif n==171: return 169\n    elif n==172: return 170\n    elif n==173: return 171\n    elif n==174: return 172\n    elif n==175: return 173\n    elif n==176: return 174\n    elif n==177: return 175\n    elif n==178: return 176\n    elif n==179: return 177\n    elif n==180: return 178\n    elif n==181: return 179\n    elif n==182: return 180\n    elif n==183: return 181\n    elif n==184: return 182\n    elif n==185: return 183\n    elif n==186: return 184\n    elif n==187: return 185\n    elif n==188: return 186\n    elif n==189: return 187\n    elif n==190: return 188\n    elif n==191: return 189\n    elif n==192: return 190\n    elif n==193: return 191\n    elif n==194: return 192\n    e"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2!= 0:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-1)\n    else:\n        return 2 * jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n >= 0:\n        return 1\n    if n == 0:\n        return 0\n    return n + jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a=1\n    b=2\n    c=3\n    d=4\n    e=5\n    f=6\n    g=7\n    h=8\n    i=9\n    j=10\n    k=11\n    l=12\n    m=13\n    n=14\n    p=15\n    q=16\n    r=17\n    s=18\n    t=19\n    u=20\n    v=21\n    w=22\n    x=23\n    y=24\n    z=25\n    ans=[]\n    for i in range(1,n+1):\n        x=a*i\n        y=b*i\n        z=c*i\n        ans.append(x+y+z)\n    return ans\n    \ndef jacobsthal_den(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a=1\n    b=2\n    c=3\n    d=4\n    e=5\n    f=6\n    g=7\n    h=8\n    i=9\n    j=10\n    k=11\n    l=12\n    m=13\n    n=14\n    p=15\n    q=16\n    r=17\n    s=18\n    t=19\n    u=20\n    v=21\n    w=22\n    x=23\n    y=24\n    z=25\n    ans=[]\n    for i in range(1,n+1):\n        x=a*i\n        y=b*i\n        z=c*i\n        ans.append(x+y+z)\n    return ans\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n > 0 and n <= 10000:\n        return jacobsthal_num_rec(n, 0)\n    else:\n        print('Error: invalid value for n. The value must be an integer between 0 and 10,000')\n        return -1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    sum = 0\n    while i<= n:\n        sum = sum + jacobsthal_number(i)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # if len(test_list) < 2:\n    #     return 0\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= K:\n        return test_list\n    \n    smaller_than_k = []\n    for i in range(0, len(test_list)):\n        if test_list[i] < test_list[i]:\n            smaller_than_k.append(test_list[i])\n    \n    smaller_than_k.sort()\n    return smaller_than_k[:K]\n        \n    \n    \ntest_cases = [[2, 3, 5, 1, 4], [2, 2, 3, 4, 5], [3, 4, 5, 1, 2]]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    K = sorted(K)\n    list = []\n    for i in test_list:\n        list.append(i[:])\n    list.sort()\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            if list[i][:K[j]] == list[j][:K[i]]:\n                return (list[i][:K[j]] + \",\" + list[j][:K[i]] + \",\" + str(list[i][K[j]]+1) + \",\" + str(list[j][K[i]]+1))\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for i in range(len(test_list)):\n        min_k = min(test_list[i][:K])\n        min_list.append(min_k)\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == len(test_list):\n        return len(test_list)\n    else:\n        n = test_list[K]\n        t = test_list[:K]\n        m = test_list[K+1:]\n        return min(min_k(m, K+1), min_k(t, K+1))\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp_list = []\n    for tup in test_list:\n        temp_list.append(tup)\n    temp_list.sort()\n    temp_list = temp_list[::-1]\n    for i in range(K):\n        temp_list.remove(temp_list[i])\n    return temp_list[0]\n    \ndef verify_k(temp_list, k):\n    '''\n    verify that k is within the range given in test cases.\n    '''\n    for i in range(k):\n        if i < len(temp_list):\n            if temp_list[i] == temp_list[i+1]:\n                return False\n    return True\n    \ndef find_k(temp_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    k = K - 1\n    while k >= 0:\n        if verify_k(temp_list, k):\n            return k\n        k -= 1\n    return -1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return tuple(test_list[:K])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # start with an empty dictionary\n    min_d = {}\n    for i in test_list:\n        if i in min_d:\n            min_d[i] += 1\n        else:\n            min_d[i] = 1\n    print(\"min_d: \", min_d)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    res = []\n    for i in range(len(test_list)):\n        res.append(test_list[i])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import sys\n    if len(test_list) == 0:\n        sys.exit('No valid tuples were found.')\n    if len(test_list) > 1000:\n        sys.exit('Maximum allowed is 1000 tuples.')\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3 and l2[l1.index(l1[i])] in l3 and l3[l2.index(l2[l1.index(l1[i])])] in l1]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2[i] and l1[i] in l3[i]]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index1 = l1.index(l2[0])\n    index2 = l1.index(l2[1])\n    index3 = l1.index(l2[2])\n    common_list = [index1, index2, index3]\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    \n    if l1 is None or l2 is None or l3 is None:\n        return None\n    \n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            common_list.append(l1[i])\n    \n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for index in l1:\n        if index in l2:\n            index_list.append(index)\n        if index in l3:\n            index_list.append(index)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1[i]] in l3 and l3[l2[l1[i]]] in l1 and l1[i] not in res:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create empty lists to store the common elements\n    index_list = []\n    index_list_2 = []\n    index_list_3 = []\n    # loop through l1\n    for x in l1:\n        # loop through l2\n        for y in l2:\n            # loop through l3\n            for z in l3:\n                # if x and y and z are in a common list then append to a list\n                if x == y == z:\n                    index_list.append(x)\n                    index_list_2.append(y)\n                    index_list_3.append(z)\n    return index_list, index_list_2, index_list_3\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # list of common elements\n    index_list = []\n    \n    # iterate through each list\n    for l in [l1, l2, l3]:\n        # iterate through each element\n        for i in l:\n            # if element is in list\n            if i in l:\n                # append index\n                index_list.append(i)\n    \n    # return list\n    return index_list\n    \n    \ndef remove_dups(l):\n    '''\n    Write a function that takes a list and removes duplicate elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # remove duplicate elements\n    l = list(unique_list)\n    \n    # return the new list\n    return l\n    \n    \ndef remove_duplicates(l):\n    '''\n    Write a function that takes a list and removes duplicate elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # remove duplicate elements\n    l = list(unique_list)\n    \n    # return the new list\n    return l\n    \n    \ndef remove_duplicates2(l):\n    '''\n    Write a function that takes a list and removes duplicate elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # remove duplicate elements\n    l = list(unique_list)\n    \n    # return the new list\n    return l\n    \n    \ndef remove_duplicates3(l):\n    '''\n    Write a function that takes a list and removes duplicate elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # remove duplicate elements\n    l = list(unique_list)\n    \n    # return the new list\n    return l\n    \n    \ndef remove_duplicates4(l):\n    '''\n    Write a function that takes a list and removes duplicate elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # remove duplicate elements\n    l = list(unique_list)\n    \n    # return the new list\n    return l\n    \n    \ndef remove_duplicates5(l):\n    '''\n    Write a function that takes a list and removes duplicate elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # remove duplicate elements\n    l = list(unique_list)\n    \n    # return the new list\n    return l\n    \n    \ndef add_index(l, l1, l2, l3):\n    '''\n    Write a function that takes a list l and two lists l1, l2 and l3. Add the index of each element in each list in the same order.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # iterate through each list\n    for l in [l1, l2, l3]:\n        # iterate through each element\n        for i in l:\n            # if element is in list\n            if i in l:\n                # update the index\n                l.remove(i)\n                l.append(i)\n                l.sort()\n    \n    # return new list\n    return l\n    \n    \ndef add_index2(l, l1, l2, l3):\n    '''\n    Write a function that takes a list l and two lists l1, l2 and l3. Add the index of each element in each list in the same order.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # iterate through each list\n    for l in [l1, l2, l3]:\n        # iterate through each element\n        for i in l:\n            # if element is in list\n            if i in l:\n                # update the index\n                l.remove(i)\n                l.append(i)\n                l.sort()\n    \n    # return new list\n    return l\n    \n    \ndef add_index3(l, l1, l2, l3):\n    '''\n    Write a function that takes a list l and two lists l1, l2 and l3. Add the index of each element in each list in the same order.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # iterate through each list\n    for l in [l1, l2, l3]:\n        # iterate through each element\n        for i in l:\n            # if element is in list\n            if i in l:\n                # update the index\n                l.remove(i)\n                l.append(i)\n                l.sort()\n    \n    # return new list\n    return l\n    \n    \ndef add_index4(l, l1, l2, l3):\n    '''\n    Write a function that takes a list l and two lists l1, l2 and l3. Add the index of each element in each list in the same order.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # iterate through each list\n    for l in [l1, l2, l3]:\n        # iterate through each element\n        for i in l:\n            # if element is in list\n            if i in l:\n                # update the index\n                l.remove(i)\n                l.append(i)\n                l.sort()\n    \n    # return new list\n    return l\n    \n    \ndef get_index_list(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list2(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list3(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list4(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list5(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list6(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list7(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list8(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list9(l):\n    '''\n    Write a function that takes a list and returns a list of all the unique elements.\n    '''\n    # create a set\n    unique_list = set(l)\n    \n    # return the list\n    return unique_list\n    \n    \ndef get_index_list10(l):\n    '''\n    Write "
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for index in range(0, len(l1)):\n        if index not in index_list:\n            index_list.append(index)\n    for index in range(0, len(l2)):\n        if index not in index_list:\n            index_list.append(index)\n    for index in range(0, len(l3)):\n        if index not in index_list:\n            index_list.append(index)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indexList = []\n    for index in range(len(l1)):\n        if l1[index] in l2 and l2[l1[index]] in l3:\n            indexList.append(l1[index])\n    return indexList\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for num in range(len(numbers)):\n        index = second_smallest_index(numbers, num)\n        if index!= -1:\n            return numbers[index]\n    return -1\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[len(numbers)-1]:\n            second_smallest = numbers[i]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    if n == 0:\n        return None\n    else:\n        return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    lowest = 0\n    second = 0\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[lowest]:\n            lowest = numbers[i]\n        elif numbers[i] > numbers[second]:\n            second = numbers[i]\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order of the second smallest number\n    numbers.sort()\n    # see if we found the second smallest number\n    if numbers[1] > numbers[2]:\n        # if the second smallest number is greater than the first, we need to return this number\n        return numbers[1]\n    # if the second smallest number is less than the first, we need to return this number\n    else:\n        return numbers[2]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return min(numbers[1:])\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 2:\n        return numbers[1]\n    elif len(numbers) > 2:\n        n = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < n:\n                n = numbers[i]\n        return n\n    else:\n        return 'Error'\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    l = []\n    for i in numbers:\n        l.append(i)\n    return min(l)\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    l=[]\n    for i in range(len(numbers)):\n        l.append(numbers[i])\n    return l[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    text = re.sub(r'[a-zA-Z_0-9]', r'[A-Za-z0-9]+', text)\n    return re.sub(r'[a-zA-Z0-9_\\s]', r'', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub(\"\\s{2,}\",\" \",text)\n    text = text.lower()\n    count = 0\n    for i in text:\n        if i == \"a\":\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_matches = re.findall(r'a(\\w+)\\b', text)\n    text_matches = text_matches + re.findall(r'a(\\w+)', text)\n    text_matches = text_matches + re.findall(r'a(b\\w+)', text)\n    text_matches = text_matches + re.findall(r'(\\ba\\w+)(b\\w+)', text)\n    text_matches = text_matches + re.findall(r'(\\b(a\\w+b\\w+\\w+)b\\w+\\w+)', text)\n    return text_matches\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search('a+', text):\n        return 'a'\n    elif re.search('b+', text):\n        return 'b'\n    else:\n        return 'n'\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # Start string creation\n    sentence = text.lower()\n    # Remove leading and trailing whitespace\n    sentence = sentence.strip()\n    # Remove special characters\n    sentence = re.sub('[^A-Za-z0-9]', '', sentence)\n    # Remove duplicate spaces\n    sentence = sentence.lower()\n    # Split the sentence into words\n    sentence = sentence.split()\n    # Create an empty list to store the words\n    matched_words = []\n    # Loop through each word in the sentence\n    for word in sentence:\n        # Check if the word contains an a or b\n        if(re.search('[a-z]', word)):\n            # Add the word to the matched list\n            matched_words.append(word)\n    # Return the matched list\n    return matched_words\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # TODO: Write your code here\n    if text.find('a')!= -1:\n        # If the string starts with 'a'\n        pattern = '^' + text[1:len(text)-1] + 'a$'\n        return re.search(pattern, text) is not None\n    else:\n        # If the string does not start with 'a'\n        pattern = '^' + text + '$'\n        return re.search(pattern, text) is not None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'^(\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # return re.search(r'(a|b)b',text)\n    return re.search(r'(a|b)b',text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    '''\n    - I will use this to find out whether a string 'a b' has an 'b' followed by one or more 'a's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'b' followed by one or more 'a's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an 'a' followed by one or more 'b's\n    - I will also help you find out whether a string 'a b' has an "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'a(?=b)'\n    output_match = re.findall(pattern, text)\n    return output_match\n    # or\n    # return re.search(pattern, text)!= None\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n    \ntest_list = [\"cat\", \"dog\", \"cat\", \"dog\", \"cat\", \"cat\", \"dog\", \"dog\"]\nprint(count_reverse_pairs(test_list)"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # count = 0\n    # for i in test_list:\n    #     if i[::-1] == i:\n    #         count += 1\n    # return count\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for index in range(len(test_list)):\n        if (index > 1 and test_list[index] == test_list[index - 1]):\n            continue\n        if (test_list[index] == test_list[index + 1]):\n            result += 1\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    num_pairs = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                num_pairs += 1\n    print(\"Number of pairs: \", num_pairs)\n    return num_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if (test_list[i] == test_list[i+1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return [ test_list.index(i) for i in test_list if i[::-1] in test_list ]\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    strs = []\n    for item in test_list:\n        strs.append(item)\n    return len(list(set(strs)))\n    \ndef can_be_palindrome(test_string):\n    '''\n    Write a function to check whether a given string can be palindrome or not. https://www.geeksforgeeks.org/check-whether-a-given-string-can-be-palindrome-or-not-in-python/\n    '''\n    if len(test_string) % 2 == 1:\n        return False\n    elif len(test_string) == 1:\n        return True\n    else:\n        return test_string[0] == test_string[-1]\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total = 0\n    for index in range(len(test_list)-1):\n        if test_list[index] == test_list[index+1]:\n            total += 1\n    return total\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # test list\n    test_list = test_list.split(',')\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = dict()\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    output = {}\n    for i in list1:\n        if i not in output.keys():\n            output[i] = 1\n        else:\n            output[i] += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists = {}\n    for item in list1:\n        item = tuple(item)\n        if item not in unique_sublists:\n            unique_sublists[item] = 1\n        else:\n            unique_sublists[item] += 1\n    return unique_sublists\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1) == 0:\n        return {}\n    else:\n        dict1 = {}\n        dict1 = dict1.fromkeys(list1)\n        list1.sort()\n        counter = 0\n        i = 0\n        while i < len(list1):\n            if len(list1) >= 2:\n                if list1[i] not in dict1:\n                    dict1[list1[i]] = 1\n                else:\n                    dict1[list1[i]] += 1\n            i += 1\n        return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary={}\n    for element in list1:\n        if type(element)!= list:\n            element=tuple(element)\n        elif element in dictionary:\n            dictionary[element]+=1\n        else:\n            dictionary[element]=1\n    return dictionary\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic_occ = {}\n    for i in list1:\n        if i not in dic_occ.keys():\n            dic_occ[i] = 0\n        dic_occ[i] += 1\n    return dic_occ\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sub_dict = {}\n    count = 0\n    for i in list1:\n        count+=1\n        sub_dict[count]=i\n    return sub_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    result = {}\n    for i in list1:\n        item = tuple(i)\n        if item not in unique_dict.keys():\n            unique_dict[item] = 0\n        unique_dict[item] += 1\n    for k, v in unique_dict.items():\n        if v > 1:\n            result[k] = v\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    l1 = []\n    d = {}\n    for i in list1:\n        t = tuple(i)\n        if t in d:\n            d[t] += 1\n        else:\n            d[t] = 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(0, len(list1)):\n        a = list1[i]\n        dict[tuple(a)] = dict.get(tuple(a),0) + 1\n    return dict\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return round(num, 2)\n    except:\n        return 0\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import math\n    if type(num)!= str:\n        return False\n    if num == '':\n        return False\n    for i in range(0, len(num), 2):\n        if num[i] == '.' or num[i] == 'e':\n            num = num[0:i]\n            break\n    if len(num) % 2!= 0:\n        return False\n    for i in range(len(num)):\n        if num[i] == '0' or num[i] == '1':\n            continue\n        else:\n            break\n    num = int(num)\n    num_1 = num // (10 ** (len(num) - len(str(num))))\n    num_2 = num % (10 ** (len(num) - len(str(num))))\n    num_1_1 = num_1 // (10 ** (len(str(num_1_1)) - len(str(num_1))))\n    num_2_1 = num_2 % (10 ** (len(str(num_2_1)) - len(str(num_2))))\n    num_1_2 = num_1_1 // (10 ** (len(str(num_1_2)) - len(str(num_1_1))))\n    num_2_2 = num_2_1 % (10 ** (len(str(num_2_2)) - len(str(num_2_1))))\n    return math.gcd(num_1, num_2) == 1 and math.gcd(num_1_1, num_2_2) == 1\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) >= 2:\n        if num[-1] == '.':\n            return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isnumeric() or num.isalpha():\n        return False\n    else:\n        if len(num) == 0:\n            return False\n        elif num[0] == '-' or num[0] == '+':\n            for i in num[1:]:\n                if i!= '.':\n                    return False\n            return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        raise TypeError(\"is_decimal takes an argument that is not a string\")\n    if len(num) < 2:\n        return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return type(num) == str and '.' in str(num) and len(str(num)) == 2\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if(num!= num.replace('.','')):\n        return False\n    num = num.replace('.','')\n    for i in num:\n        if not i.isdigit():\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Your code here\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Write your code here\n    if len(arr)!= 1:\n        return False\n    for ele in arr:\n        if arr.count(ele)!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n    if arr[0] == arr[1]:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l=len(arr)\n    if l==0:\n        return True\n    if l==1:\n        return False\n    i=0\n    while i<l:\n        if arr[i]==arr[i+1]:\n            i+=2\n        else:\n            return False\n    return True\ndef unique_Element_Iterative(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l=len(arr)\n    if l==0:\n        return True\n    if l==1:\n        return False\n    # i is an index to iterate.\n    i=1\n    while i<=l:\n        if arr[i]==arr[i-1]:\n            i+=2\n        else:\n            return False\n    return True\ndef perm(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==0:\n        return False\n    if len(arr)==1:\n        return True\n    if arr[0]==arr[1]:\n        return True\n    # use first element as pivot\n    pivot=arr[0]\n    # iterate over rest of list\n    for i in range(1,len(arr)):\n        # if this element is smaller than pivot\n        if arr[i]<pivot:\n            # swap\n            arr[i],arr[0]=arr[0],arr[i]\n            # recur on remaining list\n            arr[i],arr[i-1]=arr[i-1],arr[i]\n            arr[0],arr[i-1]=arr[i-1],arr[0]\n        else:\n            break\n    # return true if array is sorted and one element.\n    if arr[-1]==pivot:\n        return True\n    # if not, sort it\n    else:\n        return False\ndef check_sorted(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)<=1:\n        return True\n    # iterate over the list\n    for i in range(len(arr)):\n        if arr[i]!=arr[i+1]:\n            return False\n    return True\ndef check_two(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)<=1:\n        return True\n    if len(arr)==2:\n        if arr[0]==arr[1]:\n            return True\n    # iterate over the list\n    for i in range(len(arr)-2):\n        if arr[i]!=arr[i+1] and arr[i+1]!=arr[i+2]:\n            return False\n    # if not, return true\n    return True\ndef main():\n    # Taking the input from user\n    print(\"Enter the size of the list: \")\n    n=int(input())\n    arr=[int(i) for i in input().split()]\n    print(check_two(arr))\n    print(\"The number of elements in the list is: \",len(arr))\n    print(\"The size of the list is: \",len(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # 1. Declare a list\n    list_1 = []\n    # 2. Loop through the given list and add it to the list\n    for number in arr:\n        if number not in list_1:\n            list_1.append(number)\n    # 3. Return true if it's only one distinct number\n    if len(list_1) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # return arr.count(arr[0])==1\n    for i in range(1,len(arr)):\n        if arr[i]!= arr[0]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    t = {}\n    for num in arr:\n        if num in t:\n            t[num] += 1\n        else:\n            t[num] = 1\n    return len(t) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    # create a set to store unique elements\n    unique_elements = set(arr)\n    # iterate through each element\n    for x in unique_elements:\n        # if there is one element with that element, \n        # the function returns false\n        if arr.count(x) > 1:\n            return False\n    # if no one has a duplicate element,\n    # the function returns true\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a new list to compare all numbers to\n    numbers = list(set(arr))\n    return len(numbers) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    isUnique = True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # if it is a number then return True\n    if type(monthnum3) == int:\n        if monthnum3 in range(1,13):\n            return True\n    # if it is not a number, return False\n    return False\n    \n    \n    \ndef get_month_year(monthnum3):\n    '''\n    Write a function to get the given month,year. The month and year is required as intigers.\n    '''\n    # check if the given month number contains 30 days or not\n    if check_monthnumber_number(monthnum3):\n        # get the month and year number\n        monthnum3, yearnum3 = monthnum3, yearnum3\n    # check if the year is greater than or equal to 1900 or not\n        # if not, return False\n        if yearnum3 >= 1900 and yearnum3 <= 2000:\n            # get the month\n            monthnum3 = int(monthnum3)\n            # get the year\n            yearnum3 = int(yearnum3)\n        # if it is not greater than or equal to 1900 and not greater than or equal to 2000, return False\n            if yearnum3 > 1900 and yearnum3 <= 2000:\n                return yearnum3, monthnum3\n            # if it is not greater than or equal to 1900 and greater than or equal to 2000, return False\n        else:\n            return False\n    # if it is not a number, return False\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3=int(monthnum3)\n    if (monthnum3%1)==0:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==1:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==2:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==3:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==4:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==5:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==6:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==7:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==8:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==9:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==10:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    elif (monthnum3%1)==11:\n        monthnum3=int(monthnum3)\n        if monthnum3>12:\n            return 'Error: Invalid month number'\n        elif monthnum3<1 or monthnum3>12:\n            return 'Error: Invalid month number'\n        else:\n            return 'No error'\n    else:\n        return 'Error: Invalid month number'\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum=int(monthnum3)\n    if(monthnum<1 or monthnum>12):\n        return False\n    else:\n        if(monthnum%4==0 and monthnum%100!=0 or monthnum%400==0):\n            return True\n        else:\n            return False\n    \ndef generate_random_number(start_number,end_number):\n    '''\n    Write a function to generate a random integer between start_number and end_number.\n    '''\n    random_number=random.randint(start_number,end_number)\n    return random_number\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 1:\n            return True\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\ndef check_yearmonthnumber(year, month, day):\n    '''\n    Write a function to check whether a given year and month are a leap year or not.\n    '''\n    if year % 400 == 0:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False\n    elif year % 4 == 0:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False\n    elif year % 100 == 0:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False\n    elif year % 400 == 0:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False\ndef date_check(date_input):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    try:\n        if len(date_input) == 10:\n            t = date_input[0:6].replace('/','-')\n            d = date_input[7:10].replace('/','-')\n            m = date_input[11:13].replace('/','-')\n            y = date_input[14:16].replace('/','-')\n            if t == '01-01-0001':\n                if check_monthnumber_number(int(m)) and check_yearmonthnumber(int(y), int(m), int(d)):\n                    return True\n        else:\n            return False\n    except ValueError:\n        return False\ndef datetimetracking(date_input):\n    '''\n    Write a function to return the number of days in a given date.\n    '''\n    try:\n        t = date_input[0:6].replace('/','-')\n        d = date_input[7:10].replace('/','-')\n        m = date_input[11:13].replace('/','-')\n        y = date_input[14:16].replace('/','-')\n        if t == '01-01-0001':\n            return check_monthnumber_number(int(m)) * 365 + check_yearmonthnumber(int(y), int(m), int(d))\n        else:\n            return False\n    except ValueError:\n        return False\ndef calender(date_input):\n    '''\n    Write a function to return the number of days in a given date.\n    '''\n    try:\n        t = date_input[0:6].replace('/','-')\n        d = date_input[7:10].replace('/','-')\n        m = date_input[11:13].replace('/','-')\n        y = date_input[14:16].replace('/','-')\n        if t == '01-01-0001':\n            return check_monthnumber_number(int(m)) * 365 + check_yearmonthnumber(int(y), int(m), int(d))\n        else:\n            return False\n    except ValueError:\n        return False\ndef yearmonthnumber(year, month, day):\n    '''\n    Write a function to check whether a given date is a leap year or not.\n    '''\n    if day == 31 and month == 12:\n        return True\n    elif day == 28 and month == 2:\n        return True\n    elif day == 29 and month == 12:\n        return True\n    else:\n        return False\ndef leapyearcheck(date_input):\n    '''\n    Write a function to check whether a given date is leap year or not.\n    '''\n    try:\n        if yearmonthnumber(int(date_input[0:4]), int(date_input[5:7]), int(date_input[8:10])) == True:\n            if yearmonthnumber(int(date_input[0:4]), int(date_input[5:7]), int(date_input[8:10])) == False:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False\ndef dayofweek(date_input):\n    '''\n    Write a function to return the number of days in a given date.\n    '''\n    try:\n        t = date_input[0:6].replace('/','-')\n        d = date_input[7:10].replace('/','-')\n        m = date_input[11:13].replace('/','-')\n        y = date_input[14:16].replace('/','-')\n        if t == '01-01-0001':\n            return check_monthnumber_number(int(m)) * 31 + check_yearmonthnumber(int(y), int(m), int(d))\n        else:\n            return False\n    except ValueError:\n        return False\ndef datetimetracking(date_input):\n    '''\n    Write a function to return the number of days in a given date.\n    '''\n    try:\n        t = date_input[0:6].replace('/','-')\n        d = date_input[7:10].replace('/','-')\n        m = date_input[11:13].replace('/','-')\n        y = date_input[14:16].replace('/','-')\n        if t == '01-01-0001':\n            return check_monthnumber_number(int(m)) * 31 + check_yearmonthnumber(int(y), int(m), int(d))\n        else:\n            return False\n    except ValueError:\n        return False\ndef yearmonthnumber(year, month, day):\n    '''\n    Write a function to check whether a given date is a leap year or not.\n    '''\n    if day == 31 and month == 12:\n        return True\n    elif day == 28 and month == 2:\n        return True\n    elif day == 29 and month == 12:\n        return True\n    else:\n        return False\ndef leapyearcheck(date_input):\n    '''\n    Write a function to check whether a given date is leap year or not.\n    '''\n    try:\n        if yearmonthnumber(int(date_input[0:4]), int(date_input[5:7]), int(date_input[8:10])) == True:\n            if yearmonthnumber(int(date_input[0:4]), int(date_input[5:7]), int(date_input[8:10])) == False:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False\ndef leapyearcheck(date_input):\n    '''\n    Write a function to check whether a given date is leap year or not.\n    '''\n    try:\n        if yearmonthnumber(int(date_input[0:4]), int(date_input[5:7]), int(date_input[8:10])) == True:\n            if yearmonthnumber(int(date_input[0:4]), int(date_input[5:7]), int(date_input[8:10])) == False:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False\ndef weekdayofday(date_input):\n    '''\n    Write a function to return the number of days in a given date.\n    '''\n    try:\n        t = date_input[0:6].replace('/','-')\n        d = date_input[7:10].replace('/','-')\n        m = date_input[11:13].replace('/','-')\n        y = date_input[14:16].replace('/','-')\n        if t == '01-01-0001':\n            return check_monthnumber_number(int(m)) * 31 + check_yearmonthnumber(int(y), int(m), int(d))\n        else:\n            return False\n    except ValueError:\n        return False\ndef datetimetracking(date_input):\n    '''\n    Write a function to return the number of days in a given date.\n    '''\n    try:\n        t = date_input[0:"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3<1 or monthnum3>12):\n        return \"please enter a valid month number\"\n    else:\n        if(monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12):\n            return \"please enter a valid month number\"\n        else:\n            if(monthnum3==2):\n                if(monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12):\n                    return \"please enter a valid month number\"\n                else:\n                    if(monthnum3==4):\n                        if(monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11 or monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7):\n                            return \"please enter a valid month number\"\n                        else:\n                            if(monthnum3==0):\n                                if(monthnum3==1 or monthnum3==2 or monthnum3==3 or monthnum3==4 or monthnum3==6 or monthnum3==8 or monthnum3==10 or monthnum3==12):\n                                    return \"please enter a valid month number\"\n                                else:\n                                    return \"please enter a valid month number\"\n                            else:\n                                return \"please enter a valid month number\"\n                    elif(monthnum3==5):\n                        if(monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    elif(monthnum3==6):\n                        if(monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    elif(monthnum3==7):\n                        if(monthnum3==3 or monthnum3==5 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    elif(monthnum3==8):\n                        if(monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    elif(monthnum3==9):\n                        if(monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    elif(monthnum3==10):\n                        if(monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    elif(monthnum3==11):\n                        if(monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    elif(monthnum3==12):\n                        if(monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n            elif(monthnum3==4):\n                if(monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11 or monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7):\n                    return \"please enter a valid month number\"\n                else:\n                    if(monthnum3==0):\n                        if(monthnum3==1 or monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    else:\n                        return \"please enter a valid month number\"\n            elif(monthnum3==5):\n                if(monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11 or monthnum3==1 or monthnum3==3 or monthnum3==5):\n                    return \"please enter a valid month number\"\n                else:\n                    if(monthnum3==0):\n                        if(monthnum3==1 or monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    else:\n                        return \"please enter a valid month number\"\n            elif(monthnum3==6):\n                if(monthnum3==2 or monthnum3==4 or monthnum3==7 or monthnum3==10 or monthnum3==12):\n                    return \"please enter a valid month number\"\n                else:\n                    if(monthnum3==0):\n                        if(monthnum3==1 or monthnum3==2 or monthnum3==4 or monthnum3==7 or monthnum3==10 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    else:\n                        return \"please enter a valid month number\"\n            elif(monthnum3==7):\n                if(monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11 or monthnum3==1 or monthnum3==3 or monthnum3==5):\n                    return \"please enter a valid month number\"\n                else:\n                    if(monthnum3==0):\n                        if(monthnum3==1 or monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    else:\n                        return \"please enter a valid month number\"\n            elif(monthnum3==8):\n                if(monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==10 or monthnum3==12):\n                    return \"please enter a valid month number\"\n                else:\n                    if(monthnum3==0):\n                        if(monthnum3==1 or monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    else:\n                        return \"please enter a valid month number\"\n            elif(monthnum3==9):\n                if(monthnum3==2 or monthnum3==4 or monthnum3==7 or monthnum3==11 or monthnum3==1 or monthnum3==3 or monthnum3==5):\n                    return \"please enter a valid month number\"\n                else:\n                    if(monthnum3==0):\n                        if(monthnum3==1 or monthnum3==2 or monthnum3==4 or monthnum3==7 or monthnum3==11 or monthnum3==12):\n                            return \"please enter a valid month number\"\n                        else:\n                            return \"please enter a valid month number\"\n                    else:\n                        return \"please enter a vali"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    elif monthnum3 == 3:\n        if monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4:\n        if monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10:\n            return True\n        else:\n            return False\n    elif monthnum3 == 5:\n        if monthnum3 == 9 or monthnum3 == 10:\n            return True\n        else:\n            return False\n    elif monthnum3 == 6:\n        if monthnum3 == 11:\n            return True\n        else:\n            return False\n    elif monthnum3 == 7:\n        if monthnum3 == 12:\n            return True\n        else:\n            return False\n    elif monthnum3 == 8:\n        if monthnum3 == 1 or monthnum3 == 2:\n            return True\n        else:\n            return False\n    elif monthnum3 == 9:\n        if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7:\n            return True\n        else:\n            return False\n    elif monthnum3 == 10:\n        if monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8:\n            return True\n        else:\n            return False\n    elif monthnum3 == 11:\n        if monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10:\n            return True\n        else:\n            return False\n    elif monthnum3 == 12:\n        if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #step 1\n    i=0\n    while i<12:\n        #check whether the month number is 31 or not\n        if monthnum3==31:\n            break\n        #set the monthnum3 value to 1 if the monthnum3 is not 31 or not is not equal to 30\n        elif monthnum3<31 and monthnum3>=1:\n            monthnum3+=1\n        else:\n            return False\n        i+=1\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return 31\n    if monthnum3 == 2:\n        return 28\n    if monthnum3 == 3:\n        return 31\n    if monthnum3 == 4:\n        return 30\n    if monthnum3 == 5:\n        return 31\n    if monthnum3 == 6:\n        return 30\n    if monthnum3 == 7:\n        return 31\n    if monthnum3 == 8:\n        return 31\n    if monthnum3 == 9:\n        return 30\n    if monthnum3 == 10:\n        return 31\n    if monthnum3 == 11:\n        return 30\n    if monthnum3 == 12:\n        return 31\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2:\n        return True\n    if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11 or monthnum3 == 12:\n        return True\n    return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # steps\n    # TODO: Create a function to find the minimum difference between any two elements in an array\n    # return [max(arr[i],arr[i+1])-min(arr[i],arr[i+1]) for i in range(n-2) ]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    # Check if the array is non empty\n    if len(arr) > 1: \n        for i in range(0, len(arr)): \n            for j in range(i+1, len(arr)): \n                if arr[i] == arr[j]: \n                    return arr[i] \n        \n    # Check if the array is empty\n    if len(arr) == 0: \n        return 0\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    c=0\n    for i in range(0,n): \n        for j in range(i+1,n): \n            d=abs(arr[i]-arr[j]) \n            c=c+d\n    return c\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum_difference = arr[0] - arr[1]\n    for i in range(2, n):\n        minimum_difference = min(minimum_difference, arr[i] - arr[i - 1])\n    return minimum_difference\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    diff = arr[0] - arr[1]\n    \n    for i in range(2,n):\n        if arr[i] - arr[i-1] < diff:\n            diff = arr[i] - arr[i-1]\n            \n    return diff\n    \ndef quick_sort(arr):\n    '''\n    You need to return an array of the sorted elements, maintaining the order of the original array.\n    '''\n    if len(arr) < 2:\n        return arr\n    \n    pivot = arr[-1]\n    tail = arr[0]\n    \n    left = []\n    right = []\n    \n    for i in range(len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    \n    return quick_sort(left) + [pivot] + quick_sort(right)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # find the minimum and maximum elements\n    # max_diff = -1\n    # min_diff = -1\n    # min_diff_index = None\n    # max_diff_index = None\n    # for i in range(n):\n    #     if arr[i] > max_diff:\n    #         max_diff = arr[i]\n    #         max_diff_index = i\n    #     if arr[i] < min_diff:\n    #         min_diff = arr[i]\n    #         min_diff_index = i\n    #     if arr[i] - arr[min_diff_index] == max_diff - min_diff:\n    #         max_diff = arr[i]\n    #         max_diff_index = i\n    # return max_diff_index, min_diff_index\n    # return -1\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        min_diff = min(min_diff, arr[i]-arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Write your code here.\n    min_diff = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            d = abs(arr[i] - arr[j])\n            if d < min_diff:\n                min_diff = d\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1: \n        return arr[0] - arr[1]\n    else:\n        if arr[n-1] > arr[n-2]:\n            min_1 = arr[n-1]\n            min_2 = arr[n-2]\n        else:\n            min_1 = arr[n-1]\n            min_2 = arr[n-2]\n        min_1_idx = n-1\n        min_2_idx = n-1\n        for i in range(n-2):\n            if arr[i] < arr[i+1]:\n                min_1_idx = i\n                min_2_idx = i+1\n                break\n        for i in range(n-1):\n            if arr[i] > arr[i+1]:\n                min_1_idx = i\n                min_2_idx = i+1\n                break\n        arr[min_1_idx] = arr[min_1_idx] + min(arr[min_1_idx+1], arr[min_2_idx])\n        arr[min_2_idx] = arr[min_2_idx] + min(arr[min_2_idx+1], arr[min_1_idx])\n        return arr[min_1_idx] - arr[min_2_idx]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min=arr[0]\n    for i in range(1,n):\n        min=min>arr[i]\n    return min\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # We can't use string.isdigit() because the function returns True for string\n    # that contains a digit (if any).\n    def digits_ctr(str):\n        count = 0\n        for char in str:\n            if char.isdigit():\n                count += 1\n        return count\n    return digits_ctr(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num=0\n    for i in str:\n        if i.isdigit():\n            num+=1\n    return num\n    \n    \n    \n    "
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in range(0, len(str)):\n        if str[i] in \"0123456789\":\n            digits += 1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # default value\n    num_digs = 0\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits=0\n    for i in str:\n        if i=='0':\n            digits+=1\n    return digits\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for x in range(1,n+1):\n        if n%x==0:\n            return False\n    else:\n        return True\ndef is_prime(n):\n    '''\n    Write a function to find prime numbers. geeksforgeeks.org/prime-numbers-and-factors/\n    '''\n    if n == 2:\n        return True\n    elif n%2==0:\n        return False\n    elif n==3:\n        return True\n    elif n>3:\n        for x in range(3,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_prime_factor(n):\n    '''\n    Write a function to find prime factors of a number. geeksforgeeks.org/prime-factors-for-numbers/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_prime_factor_factor(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_prime_factor_factor_pivot(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-pivot/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factor_factor_factors(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-factors/\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factors_factor_factors_pivot(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-factors-pivot/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factor_factor_pivot(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-pivot/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factor_factor_factor_pivot(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-pivot/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factor_factor_factor_pivot_pivot(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-pivot-and-pivot-pivot/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factors_factor_factor_pivot_pivot(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-pivot-and-pivot-pivot/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factor_factor_factor_pivot_pivot_factor(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-pivot-and-pivot-pivot-factor/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factor_factor_factor_pivot_factor_pivot(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-pivot-and-pivot-factor-and-pivot-pivot-factor/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n==3:\n        return True\n    elif n<3:\n        return False\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n%x==0:\n                return False\n        return True\ndef is_factor_factor_factor_factor_pivot_factor_factor_pivot(n):\n    '''\n    Write a function to find prime factors and factors of a number. geeksforgeeks.org/prime-factors-and-factors-of-numbers-pivot-and-pivot-factor-and-pivot-facto"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    assert n >= 1, 'n must be greater than 1'\n    if n == 1: return 1\n    elif n == 2: return 2\n    else: return n * (n + 1) / 2\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    return is_polite(n-1) and is_polite(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=int(input(\"Enter the nth polite number:\"))\n    # add 1 for the integer value, and 2 for the fractional value\n    x=n+1\n    m=x//10\n    return m\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # base case\n    if n == 0:\n        return True\n    # logic to check if there is a common divisor between 2 positive integers\n    elif n == 1:\n        return True\n    else:\n        # if n is not a prime number then check if the divisors are prime numbers.\n        if n % 2 == 0 and n > 1:\n            # if n is odd then there is an even multiple.\n            return is_polite(n // 2)\n        # if n is odd then check if n is not a multiple of 2.\n        else:\n            # if n is even then the number is not a multiple of 2.\n            return not is_polite(n//2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    else: \n        return is_polite(n - 1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_n = 0\n    #print('n=', n)\n    for i in range(1,n+1):\n        polite_n += (i*(i+1))**(0.5)\n    #print(polite_n)\n    return polite_n\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    try:\n        n = int(n)\n        if n<=0:\n            print(\"Invalid n, please enter a valid number\")\n        elif n>100:\n            print(\"Invalid n, please enter a valid number\")\n        elif n==1:\n            print(n,\"th polite number, geeksforgeeks.org/n-th-polite-number/\")\n        else:\n            print(\"nth polite number, geeksforgeeks.org/n-th-polite-number/\")\n            for i in range(2, n+1):\n                print(i, end = \" \")\n        return n\n    except:\n        print(\"Invalid n, please enter a valid number\")\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    m=n*4\n    if n==m:\n        return 'polite'\n    elif n>m:\n        return 'n-th-polite'\n    else:\n        return 'n-th-polite-number'\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            res.append(l1[i])\n            return res\n        if l1[i+1] - l1[i] == 1:\n            res.append((l1[i],l1[i+1]))\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #for i in range(0, len(l1)-1):\n    #    if l1[i] == l1[i+1]:\n    #        pass\n    #    else:\n    #        return False\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    l2 = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i]!= l1[j]:\n                l2.append((l1[i], l1[j]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i%2 == 0:\n            l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(1, len(l1)):\n        for j in range(i+1, len(l1)):\n            pair = l1[i], l1[j]\n            if pair in pairs:\n                pass\n            else:\n                pairs.append(pair)\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst1 = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            lst1.append((l1[i],l1[j]))\n    return lst1\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        for j in range(i+1,len(l1)):\n            l.append([l1[i],l1[j]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    L1 = []\n    for i in range(len(l1) - 1):\n        L1.append((l1[i],l1[i+1]))\n    return L1\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    '''\n    l1 = [1,2,3,4,5]\n    pair_wise(l1)\n    #output: [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]\n    '''\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # write your code here\n    l = []\n    p = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            p.append((l1[i],l1[j]))\n    l.extend(p)\n    return l\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if(sum == arr[i] + arr[j]):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == sum):\n                return arr[i] * arr[j]\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # get the length of the list\n    length = len(arr)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum - arr[i] - arr[j] == sum:\n                result += 1\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # count_pairs = 0\n    # for i in range(0, len(arr) - 1):\n    #     for j in range(i + 1, len(arr)):\n    #         if arr[i] + arr[j] == sum:\n    #             count_pairs += 1\n    # return count_pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr == []:\n        return 0\n    count = 0\n    temp = arr.pop(0)\n    for x in arr:\n        temp += x\n        count += (x - sum)\n        if temp == sum:\n            count += 1\n            temp = 0\n    return count\n    \n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Write your code here.\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for num in arr:\n        if num == sum:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for n in arr:\n        pair_count += (abs(n - sum))\n    return pair_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1=sorted(li1)\n    li2=sorted(li2)\n    li3=[]\n    for i in range(0,len(li1)):\n        li3.append(li1[i]-li2[i])\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    i=0\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            return li1[i]-li2[i]\n    return li1[i]\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    difference=[]\n    for i in range(len(li1)):\n        if(li1[i]!=li2[i]):\n            difference.append(li1[i])\n    return difference\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [item for item in li1 if item not in li2]\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)-1):\n        diff.append(li1[i+1]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=0\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff+=1\n    return(diff)\ndef Sort(li):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    li.sort()\ndef main():\n    '''\n    Write a python function to find the difference in the list.\n    '''\n    li=[0,1,2,3,4,5,6,7,8,9,10]\n    li2=[]\n    li1=li[:8]\n    li2=li[8:]\n    li=li1+li2\n    print(li)\n    print(li[1]*2)\n    print(Diff(li1,li2))\n    print(Sort(li))\n    return('done')\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return len(li1)-len(li2)\n    #pass\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    res = 0\n    for i in range(1, n + 1) : \n        res = (res + (i ** 2)) % 1000000007\n    return res\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    l=[]\n    for i in range(0,n+1,2):\n        l.append(i**4)\n    return sum(l)\n    \nprint(odd_num_sum(5))\nprint(odd_num_sum(6))\nprint(odd_num_sum(7))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    a = 0\n    for i in range(n) :\n        a += (1/4) * (1 + 4*(i%2))\n    print(a)\n    return a\nprint(odd_num_sum(25))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_odd_natural_numbers = 0\n    for i in range(n):\n        sum_of_odd_natural_numbers = sum_of_odd_natural_numbers + (((i**3)) % n)\n    return sum_of_odd_natural_numbers\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n == 0) : \n        return 0\n    else : \n        return odd_num_sum(n - 1) + n * 3\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd = 0\n    for i in range(n, 0, -2) : \n        if i % 2 == 1 : \n            sum_odd += i \n    return sum_odd \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        if i % 2 == 0 :\n            sum += i\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([n**2 for n in range(1, n+1) if n%2==1])\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n == 0):\n        return 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_bracket = ['(', '[', '{']\n    closed_bracket = [')', ']', '}']\n    stack = []\n    for c in exp:\n        if c in open_bracket:\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                current_open_bracket = stack.pop()\n                if current_open_bracket == closed_bracket[open_bracket.index(current_open_bracket)]:\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in ['(','{','[']:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return 'Error'\n            if char == ')':\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'Error'\n            if char == '}':\n                if stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return 'Error'\n            if char == ']':\n                if stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return 'Error'\n    if len(stack) == 0:\n        return 'Balanced'\n    else:\n        return 'Unbalanced'\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    arr = list(exp)\n    operators = ['(',')','[','{']\n    stack = []\n    for i in range(len(arr)):\n        if arr[i] in operators:\n            if arr[i] == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    if arr[i - 1] == '(':\n                        stack.append('(')\n                    elif arr[i - 1] == '{':\n                        stack.append('{')\n                    elif arr[i - 1] == '[':\n                        stack.append('[')\n                    else:\n                        return False\n            elif arr[i] == ']':\n                if len(stack) == 0:\n                    return False\n                else:\n                    if arr[i - 1] == '[':\n                        stack.append('[')\n                    elif arr[i - 1] == '(':\n                        stack.append('(')\n                    else:\n                        return False\n            elif arr[i] == '}':\n                if len(stack) == 0:\n                    return False\n                else:\n                    if arr[i - 1] == '{':\n                        stack.append('{')\n                    elif arr[i - 1] == '(':\n                        stack.append('(')\n                    else:\n                        return False\n        else:\n            return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return \"YES\"\n    \n    if exp[0] == '(':\n        return check_expression(exp[1:])\n    else:\n        return check_expression(exp[1:]) + ')' + check_expression(exp[:len(exp) - 1])\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        else:\n            if stack:\n                if i == ')' and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    if not stack:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    op_stack = []\n    operations = {\n        '(': 0,\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2,\n        '(': 0,\n        ')': 0,\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2,\n        '(': 0\n    }\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    temp_str = list(exp)\n    stack = deque()\n    for i in range(len(temp_str)):\n        if temp_str[i] == '(':\n            stack.append(temp_str[i])\n        else:\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    parenthesis = {\"(\":\")\",\"[\":\"]\",\"{\":\"}\"}\n    for char in exp:\n        if char in parenthesis:\n            stack.append(char)\n        else:\n            if not len(stack)==0 and stack[-1] == parenthesis[char]:\n                stack.pop()\n            else:\n                return \"NO\"\n    if len(stack)==0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    parentheses = []\n    exp = deque(exp.split('('))\n    for i in exp:\n        if '(' in i or ')' in i:\n            if i.count('(') == i.count(')'):\n                parentheses.append(i)\n        else:\n            parentheses.append(i)\n    for i in parentheses:\n        check_expression(i)\n    return len(parentheses) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = ''\n    for i in range(len(test_str)):\n        result += test_str[i]\n    #print(result)\n    \n    len_dict = {}\n    for i in range(len(result)):\n        if len(result) - i >= K:\n            #print(i,len(result))\n            len_dict[result[i]] = len(result) - i\n    \n    result = result[:len(result) - K]\n    #print(result)\n    \n    while len(len_dict) > 0:\n        #print(len_dict)\n        for key, value in len_dict.items():\n            #print(value,key)\n            if value > 0:\n                result = result[:key] + result[key + 1:]\n                #print(result)\n                break\n            else:\n                len_dict[key] = 0\n    return result\n    \nprint(remove_length(\"abcab\",\"1\"))\nprint(remove_length(\"abcab\",\"2\"))\nprint(remove_length(\"abcab\",\"3\"))\nprint(remove_length(\"abcab\",\"4\"))\nprint(remove_length(\"abcab\",\"5\"))\nprint(remove_length(\"abcab\",\"6\"))"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str) - K):\n        test_str = test_str[:-1]\n    print('String after removing the length of {} words'.format(K))\n    print(test_str)\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_string = \"\"\n    for i in test_str:\n        if len(i)!= K:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([word for word in test_str.split() if len(word) == K])\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length = 0\n    if len(test_str) <= K:\n        length = len(test_str)\n    else:\n        length = K\n    test_str_length = []\n    for i in range(length):\n        test_str_length.append(test_str[i])\n    test_str_length = set(test_str_length)\n    return ''.join(test_str_length)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str or not K:\n        return None\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)):\n        if len(test_str) - i - 1 == K:\n            continue\n        test_str = test_str[:i] + test_str[i + 1:]\n    return test_str\n    \ndef remove_words(test_str, words):\n    '''\n    Given a string and a list of words, return a string with all the words removed.\n    '''\n    for word in words:\n        test_str = test_str.replace(word, '')\n    return test_str\n    \ndef remove_number(test_str, numbers):\n    '''\n    Given a string and a list of integers, return a string with all the integers removed.\n    '''\n    for i in numbers:\n        test_str = test_str.replace(str(i), '')\n    return test_str\n    \ndef remove_all(test_str, words):\n    '''\n    Given a string and a list of words, return a string with all the words removed,\n    but only the words in the list have a length of at least 2.\n    '''\n    for word in words:\n        if len(word) <= 2:\n            test_str = test_str.replace(word, '')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    final_str = ''\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            final_str += test_str[i]\n    return final_str\n    \ndef main():\n    \"\"\"\n    Run test cases\n    \"\"\"\n    # test1()\n    # test2()\n    test3()\n    \ndef test1():\n    assert remove_length('kitten', 3) == 'ktten'\n    assert remove_length('kitten', 4) == 'kitten'\n    assert remove_length('kitten', 5) == 'kitten'\n    assert remove_length('kitten', 6) == 'kitten'\n    assert remove_length('kitten', 7) == 'kitten'\n    assert remove_length('kitten', 8) == 'kitten'\n    assert remove_length('kitten', 9) == 'kitten'\n    assert remove_length('kitten', 10) == 'kitten'\n    assert remove_length('kitten', 11) == 'kitten'\n    assert remove_length('kitten', 12) == 'kitten'\n    assert remove_length('kitten', 13) == 'kitten'\n    assert remove_length('kitten', 14) == 'kitten'\n    assert remove_length('kitten', 15) == 'kitten'\n    assert remove_length('kitten', 16) == 'kitten'\n    assert remove_length('kitten', 17) == 'kitten'\n    assert remove_length('kitten', 18) == 'kitten'\n    assert remove_length('kitten', 19) == 'kitten'\n    assert remove_length('kitten', 20) == 'kitten'\n    assert remove_length('kitten', 21) == 'kitten'\n    assert remove_length('kitten', 22) == 'kitten'\n    assert remove_length('kitten', 23) == 'kitten'\n    assert remove_length('kitten', 24) == 'kitten'\n    assert remove_length('kitten', 25) == 'kitten'\n    assert remove_length('kitten', 26) == 'kitten'\n    assert remove_length('kitten', 27) == 'kitten'\n    assert remove_length('kitten', 28) == 'kitten'\n    assert remove_length('kitten', 29) == 'kitten'\n    assert remove_length('kitten', 30) == 'kitten'\n    assert remove_length('kitten', 31) == 'kitten'\n    assert remove_length('kitten', 32) == 'kitten'\n    assert remove_length('kitten', 33) == 'kitten'\n    assert remove_length('kitten', 34) == 'kitten'\n    assert remove_length('kitten', 35) == 'kitten'\n    assert remove_length('kitten', 36) == 'kitten'\n    assert remove_length('kitten', 37) == 'kitten'\n    assert remove_length('kitten', 38) == 'kitten'\n    assert remove_length('kitten', 39) == 'kitten'\n    assert remove_length('kitten', 40) == 'kitten'\n    assert remove_length('kitten', 41) == 'kitten'\n    assert remove_length('kitten', 42) == 'kitten'\n    assert remove_length('kitten', 43) == 'kitten'\n    assert remove_length('kitten', 44) == 'kitten'\n    assert remove_length('kitten', 45) == 'kitten'\n    assert remove_length('kitten', 46) == 'kitten'\n    assert remove_length('kitten', 47) == 'kitten'\n    assert remove_length('kitten', 48) == 'kitten'\n    assert remove_length('kitten', 49) == 'kitten'\n    assert remove_length('kitten', 50) == 'kitten'\n    assert remove_length('kitten', 51) == 'kitten'\n    assert remove_length('kitten', 52) == 'kitten'\n    assert remove_length('kitten', 53) == 'kitten'\n    assert remove_length('kitten', 54) == 'kitten'\n    assert remove_length('kitten', 55) == 'kitten'\n    assert remove_length('kitten', 56) == 'kitten'\n    assert remove_length('kitten', 57) == 'kitten'\n    assert remove_length('kitten', 58) == 'kitten'\n    assert remove_length('kitten', 59) == 'kitten'\n    assert remove_length('kitten', 60) == 'kitten'\n    assert remove_length('kitten', 61) == 'kitten'\n    assert remove_length('kitten', 62) == 'kitten'\n    assert remove_length('kitten', 63) == 'kitten'\n    assert remove_length('kitten', 64) == 'kitten'\n    assert remove_length('kitten', 65) == 'kitten'\n    assert remove_length('kitten', 66) == 'kitten'\n    assert remove_length('kitten', 67) == 'kitten'\n    assert remove_length('kitten', 68) == 'kitten'\n    assert remove_length('kitten', 69) == 'kitten'\n    assert remove_length('kitten', 70) == 'kitten'\n    assert remove_length('kitten', 71) == 'kitten'\n    assert remove_length('kitten', 72) == 'kitten'\n    assert remove_length('kitten', 73) == 'kitten'\n    assert remove_length('kitten', 74) == 'kitten'\n    assert remove_length('kitten', 75) == 'kitten'\n    assert remove_length('kitten', 76) == 'kitten'\n    assert remove_length('kitten', 77) == 'kitten'\n    assert remove_length('kitten', 78) == 'kitten'\n    assert remove_length('kitten', 79) == 'kitten'\n    assert remove_length('kitten', 80) == 'kitten'\n    assert remove_length('kitten', 81) == 'kitten'\n    assert remove_length('kitten', 82) == 'kitten'\n    assert remove_length('kitten', 83) == 'kitten'\n    assert remove_length('kitten', 84) == 'kitten'\n    assert remove_length('kitten', 85) == 'kitten'\n    assert remove_length('kitten', 86) == 'kitten'\n    assert remove_length('kitten', 87) == 'kitten'\n    assert remove_length('kitten', 88) == 'kitten'\n    assert remove_length('kitten', 89) == 'kitten'\n    assert remove_length('kitten', 90) == 'kitten'\n    assert remove_length('kitten', 91) == 'kitten'\n    assert remove_length('kitten', 92) == 'kitten'\n    assert remove_length('kitten', 93) == 'kitten'\n    assert remove_length('kitten', 94) == 'kitten'\n    assert remove_length('kitten', 95) == 'kitten'\n    assert remove_length('kitten', 96) == 'kitten'\n    assert remove_length('kitten', 97) == 'kitten'\n    assert remove_length('kitten', 98) == 'kitten'\n    assert remove_length('kitten', 99) == 'kitten'\n    assert remove_length('kitten', 100) == 'kitten'\n    assert remove_length('kitten', 101) == 'kitten'\n    assert remove_length('kitten', 102) == 'kitten'\n    assert remove_length('kitten', 103) == 'kitten'\n    assert remove_length('kitten', 104) == 'kitten'\n    assert remove_length('kitten', 105) == 'kitten'\n    assert remove_length('kitten', 106) == 'kitten'\n    assert remove_length('kitten', 107) == 'kitten'\n    assert remove_length('kitten', 108) == 'kitten'\n    assert remove_length('kitten'"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    # Remove words of length K\n    # if length of word is less than K\n    \n    # For each word:\n    # 1. If the word is a substring of the given string, remove the word from the string.\n    # 2. If not, no word will remain.\n    # 3. When removing the word of the given length, remove the word of the given length, and the string.\n    # 4. The word of the length K is the last word in the given string\n    \n    str = test_str.split(' ')\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) < K:\n            str.remove(str[i])\n        else:\n            if i == len(str) - 1:\n                result.append(str[i])\n            else:\n                result.append(str[i])\n                result.append(' ')\n    return''.join(result)\n    \ndef main():\n    test_str = \"The quick brown fox jumps over the lazy dog.\"\n    print(remove_length(test_str, 2))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('\\n', '')\n    test_str = test_str.replace('\\r', '')\n    test_str = test_str.replace('\\t', '')\n    test_str = test_str.replace(',', '')\n    test_str = test_str.replace('.', '')\n    test_str = test_str.replace('!', '')\n    test_str = test_str.replace('?', '')\n    test_str = test_str.replace('', '')\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('-', '')\n    tes"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.sub(r'[0-9]', '', pattern)\n    pattern = re.sub(r'[A-Z]', '', pattern)\n    pattern = re.sub(r'[a-z]', '', pattern)\n    pattern = re.sub(r'[A-Z]+', '', pattern)\n    pattern = re.sub(r'\\s', '', pattern)\n    pattern = pattern.lower()\n    regex = r'(?:' + re.escape(pattern) + r'|' + pattern + r')'\n    return re.findall(regex,text)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    arr=pattern.split(\" \")\n    d={}\n    # print(arr)\n    for i in range(len(arr)):\n        if arr[i] in d:\n            d[arr[i]]+=1\n        else:\n            d[arr[i]]=1\n    # print(d)\n    # if len(d)==0:\n    #     return None\n    # print(d)\n    if len(d)==0:\n        return None\n    # return max(d.values())\n    max_value=0\n    for i in d.values():\n        if i>max_value:\n            max_value=i\n    # print(max_value)\n    # return max_value\n    max_position=0\n    for i in d.keys():\n        if d[i]>max_value:\n            max_position=i\n            max_value=d[i]\n    # print(max_position)\n    # return max_position\n    return max_position\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Search for a pattern\n    pattern = re.compile(pattern,re.IGNORECASE)\n    return pattern.findall(text)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    pattern = pattern.replace(' ','')\n    pattern = pattern.replace('[',' ')\n    pattern = pattern.replace(']',' ')\n    pattern = pattern.replace(\"'\",\"\")\n    pattern = pattern.replace(' ','')\n    regex = r'(?u)('+pattern+')'\n    regex = re.compile(regex,re.VERBOSE | re.DOTALL)\n    match = regex.findall(text)\n    if len(match) > 0:\n        return match[0]\n    else:\n        return None\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    substring = pattern.findall(text)\n    if len(substring)>0:\n        for i in range(len(substring)):\n            if i==0:\n                lower_limit = substring[i].lower()\n                upper_limit = substring[i].upper()\n                for char in text:\n                    if char.lower() == lower_limit:\n                        lower_limit = None\n                    if char.upper() == upper_limit:\n                        upper_limit = None\n                return lower_limit,upper_limit\n            else:\n                lower_limit = substring[i].lower()\n                upper_limit = substring[i].upper()\n                for char in text:\n                    if char.lower() == lower_limit:\n                        lower_limit = None\n                    if char.upper() == upper_limit:\n                        upper_limit = None\n                return lower_limit,upper_limit\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # POSSIBLE TO USE regex\n    # t = text.split(\" \")\n    # pattern = pattern.split(\" \")\n    # s = list(set(t)&set(pattern))\n    # print(s)\n    # print(len(s))\n    # print(len(text))\n    # print(len(pattern))\n    # return len(text) - len(text.split(\" \"))\n    # return len(pattern)\n    \n    '''\n    https://leetcode.com/discuss/interview-question/619862/python-2-solution-using-a-list-to-string-count-pattern-sets\n    '''\n    # p = re.compile(r\"(\\w+)([^a-z])([^a-z]+)\")\n    # return p.findall(text)\n    \n    # findall\n    # s = [i.split(\" \") for i in text]\n    # s = [list(map(lambda x: x if \"-\" not in x else \"\",i)) for i in s]\n    # print(len(s))\n    # s = [list(map(lambda x: x if len(x) > 2 else list(map(lambda x: \"0\" + x if len(x) == 1 else x,x)),i)) for i in s]\n    # return len(s)\n    \n    # return len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",text))\n    # return len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",text.lower()))\n    # return len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",text.lower()))\n    \n    # for i in s:\n    #     print(len(i))\n    #     # print(\"\".join([i[j][j] for j in range(len(i))]))\n    # return len(s)\n    # return len([i for i in s if \"\".join(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i)) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i)) > 1])\n    return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i)) > 1])\n    # return len([i for i in s if \"\".join(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i)) > 1])\n    # return len([i for i in s if \"\".join(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i)) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i)) > 1])\n    \n    # return len([i for i in s if i.lower().count(\" \".join(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if i.lower().count(\" \".join(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if i.lower().count(\" \".join(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if i.lower().count(\" \".join(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if i.lower().count(\" \".join(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i.lower())) > 1])\n    # return len([i for i in s if len(re.findall(r\"(\\w+)([^a-z])([^a-z]+)\",i"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub_list = re.findall(pattern,text)\n    for i,sub in enumerate(sub_list):\n        if i==0:\n            if sub=='\\t':\n                continue\n            else:\n                pos = text.index(sub)\n                return pos,pos+len(sub)\n        else:\n            pos = text.index(sub,pos)\n            return pos,pos+len(sub)\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # create a regex to search for the substrings\n    # substring[i:j]\n    # if substring[i:j] is found, return substring[i:j] and the index of the substring in the string. If substring[i:j] is not found, return None\n    # this is because the substrings can only have one letter\n    # for example, \n    # 'python' is a substring of 'python'\n    # but python[2] is not a substring of python[1]\n    # then python[2:6] is not a substring of python[2:6]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    #pattern = \"a abcd\"\n    pos = []\n    for i in range(0,len(text)):\n        for j in range(i+1,len(text)+1):\n            if (text[i:j] == pattern):\n                pos.append([i,j])\n    return pos\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    return m.start() if m else None\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums[0]%2==0:\n        return False\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd += 1\n    if odd > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if (nums[i] % 2)!= 0:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_index.append(i)\n    if odd_index == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    check = []\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            check.append(nums[i])\n    return check\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if not nums:\n        return False\n    s = set(nums)\n    if len(s) % 2:\n        return False\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list=[]\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            odd_list.append(nums[i])\n    print(odd_list)\n    if len(odd_list)%2!=0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2!= 0:\n        return False\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    index=0\n    for i in nums:\n        if i%2!=0:\n            index=index+1\n    if index%2!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    # remove any vowels\n    test_str = test_str.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '').lower()\n    \n    # convert each character to lowercase\n    test_str = test_str.lower()\n    \n    # initialize array to store count\n    vowels = []\n    \n    # iterate through the string to add each char to the list of vowels\n    for char in test_str:\n        if char in 'aeiou':\n            vowels.append(char)\n    \n    # return count of vowels\n    return len(vowels)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str == '':\n        return 0\n    vowels = 'aeiou'\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    for char in test_str:\n        if char.lower() in 'aeiou':\n            vowels_count += 1\n    print(f'The number of vowels in the string {test_str} is {vowels_count}')\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for c in test_str:\n        if c in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in 'aeiou':\n            if test_str[i].lower() in 'aeiou':\n                count += 1\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for letter in test_str:\n        if letter in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            if char.lower() in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return test_str.count('a') + test_str.count('A') + test_str.count('e') + test_str.count('E') + test_str.count('i') + test_str.count('I') + test_str.count('o') + test_str.count('O') + test_str.count('u') + test_str.count('U')\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    # your code here\n    #result = 0\n    for x in test_str:\n        if x in vowels:\n            result+=1\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    total = 0\n    for i in arr:\n        if i!= total:\n            total = total + i\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    print(sum(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = set()\n    for i in arr: \n        if i not in s: \n            s.add(i) \n    return len(s)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    num = [] \n    # looping through array \n    for i in range(len(arr)): \n        # checking for repeated elements \n        if arr[i] in num: \n            return arr[i] \n        # adding current element to array \n        num.append(arr[i]) \n    return 'No element' \n  \narr = [4,3,1,2,2,5] \nprint(find_sum(arr)) \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    if arr == []:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            continue\n        else:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    from itertools import groupby\n    dic = {}\n    for k, g in groupby(arr, lambda x: x):\n        dic[k] = list(g)\n    return sum(list(dic.values()))\n    "
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #code here\n    sum_elements = 0\n    for i in arr:\n        if i not in arr:\n            sum_elements += i\n    return sum_elements\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if arr.count(i)>1:\n            sum+=i\n    return sum\n    \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # base case : return -1 if the list is empty\n    if len(arr) == 0: \n        return -1\n    \n    # init an empty list \n    count = []\n    \n    # traverse the given list \n    for i in range(len(arr)): \n        if arr[i] in count: \n            continue\n        # check if the given number is present in the current \n        # position \n        if arr[i] not in count: \n            # append it to count \n            count.append(arr[i]) \n            # reset count \n            count = []\n    # return sum of all the repeated numbers \n    return sum(count)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # my_list = []\n    # for i in range(0, len(arr)):\n    #     if (arr[i] in my_list):\n    #         my_list.remove(arr[i])\n    #     else:\n    #         my_list.append(arr[i])\n    # return sum(my_list)\n    # my_list = []\n    # for i in arr:\n    #     if i not in my_list:\n    #         my_list.append(i)\n    # return my_list\n    return sum(set(arr))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(zip(*[iter(list1)] * len(list1)))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = [i for i in list1 if i!= 0]\n    if len(list1) == 0:\n        return []\n    list1 = [0] + list1 + [0]\n    result = []\n    for group in groupby(list1, lambda x: x == 0):\n        result.append(list(group))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    list1 = list(list1)\n    \n    if not list1:\n        return []\n    \n    # if list1 contains single element, return the list itself\n    # else, return a sublist of list1 with only one element\n    elif len(list1) == 1:\n        return [list1]\n    \n    # to get the length of the list\n    elif len(list1) < len(set(list1)):\n        n = len(list1)\n    \n    # if the length of the list is less than 4,\n    # return a list with only 2 elements\n    elif len(list1) >= 2 and len(set(list1)) <= 4:\n        n = len(list1)\n        return [list1[:n//2], list1[n//2:]]\n    \n    # to get the first element and last element\n    else:\n        first_element = list1[0]\n        last_element = list1[-1]\n        \n        # create sublist of list1 which has only 1 element\n        sublist = [first_element, last_element]\n        \n        # if the sublist length is not 4, return a list with 1 element and last element\n        if len(sublist) < 4:\n            return [sublist]\n        \n        # pack the sublist into a new sublist\n        else:\n            new_sublist = []\n            for item in sublist:\n                new_sublist.append(item)\n                \n            return [new_sublist]\n    \n    \ndef unpack_consecutive_duplicates(list1):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into list.\n    '''\n    \n    # if the length of the list is less than 2, return a list with one element\n    elif len(list1) < 2:\n        return [list1]\n    \n    # to get the first element and last element\n    else:\n        first_element = list1[0]\n        last_element = list1[-1]\n        \n        # create sublist of list1 which has only 1 element\n        sublist = [first_element, last_element]\n        \n        # to get the sublist length\n        n = len(list1)\n        \n        # if the sublist length is not 4, return a list with 1 element and last element\n        if n < 4:\n            return [sublist]\n        \n        # create sublists of the sublist which has only 2 elements\n        else:\n            new_list1 = [sublist[0], sublist[1]]\n            \n            # get the sublist length\n            n = len(new_list1)\n            \n            # to get the sublist\n            for _ in range(n//2):\n                new_list1.append(new_list1.pop(0))\n                \n            return [new_list1]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # create a new list of the same length as the original.\n    new_list = []\n    \n    # create a unique list of the first element.\n    element = list1[0]\n    # create a list that will hold the elements that are in the same sublist.\n    new_list.append(element)\n    \n    # for each element in the list, check if it is the same element.\n    for i in range(1, len(list1)):\n        \n        # check if the current element is the same element.\n        if list1[i] == element:\n            # if the current element is the same element, add the element.\n            new_list.append(list1[i])\n        \n        # if the current element is different, add the element to the new list.\n        else:\n            # if the current element is different, create a sublist to append it to the new list.\n            new_list.append(list1[i])\n            # append the current element to the new list.\n            new_list.append(list1[i])\n            # if the current element is the first element, append the second element to the new list.\n            if i == 1:\n                new_list.append(list1[i+1])\n            # if the current element is the last element, append the new list to the new list.\n            elif i == len(list1)-1:\n                new_list.append(list1[i-1])\n        \n        # update the element.\n        element = list1[i]\n    \n    # return the new list.\n    return new_list\n    \ndef get_next_element(element, list1):\n    '''\n    Write a function that returns the next element in a list element list1.\n    '''\n    \n    # create a new list that contains all the elements of the given list.\n    new_list = []\n    \n    # iterate through the list.\n    for i in list1:\n        # if the current element is not the same as the first element, append it.\n        if i not in element:\n            new_list.append(i)\n        # if the current element is the same as the first element, append it.\n        elif i == element:\n            new_list.append(i)\n            \n    # return the new list.\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if (i == 0 or (i > 0 and list1[i] == list1[i - 1])):\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) < 2:\n        return list1\n    result = []\n    for i in range(len(list1)):\n        if list1[i] not in result:\n            result.append(list1[i])\n            for j in range(i+1, len(list1)):\n                if list1[j] not in result:\n                    result.append(list1[j])\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    length = len(list1)\n    i = 0\n    j = 0\n    while j < length:\n        if list1[i] == list1[j]:\n            j += 1\n        else:\n            i = j\n            j = 0\n    if j!= length:\n        list2 = list1[:j]\n    else:\n        list2 = list1[j:]\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    # This code will be used to pack consecutive duplicates in\n    #   groupby(dict(l)) function\n    #\n    # Input : ['1', '1', '1', '1', '1']\n    # Output: [[1, 1, 1, 1, 1]]\n    #\n    # Input : ['a', 'c', 'a', 'a', 'a', 'c']\n    # Output: [['a', 'a', 'c', 'c', 'a'], ['c', 'c', 'a', 'a', 'a', 'a']]\n    #\n    # Input : ['a', 'b', 'a', 'a', 'a', 'b', 'c']\n    # Output: [['a', 'b', 'a', 'a', 'a', 'b', 'c'], ['c', 'c', 'a', 'a', 'a', 'b', 'b']]\n    #\n    # Input : ['a', 'b', 'a', 'a', 'a', 'b', 'c', 'd']\n    # Output: [['a', 'b', 'a', 'a', 'a', 'b', 'c', 'd'], ['d', 'd', 'a', 'a', 'a', 'b', 'b', 'c']]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    n = len(list1)\n    ls_list = []\n    for i in range(n):\n        ls_list.append([list1[i]])\n    cur_ls_list = ls_list\n    ls_list = []\n    index = n - 1\n    while (index > -1):\n        if ls_list[index][0]!= ls_list[index-1][0]:\n            cur_ls_list.append(ls_list[index])\n            ls_list.append(ls_list[index-1])\n            index -= 1\n        else:\n            index -= 1\n    return cur_ls_list\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for item in list1:\n        if item not in dict:\n            dict[item] = 1\n        else:\n            dict[item] += 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #create a dictionary\n    dict1={}\n    #add the lists to the dictionary\n    for element in list1:\n        if element[0] not in dict1:\n            dict1[element[0]]=1\n        else:\n            dict1[element[0]]+=1\n    #return dictionary\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for i in list1:\n        if i not in unique_list:\n            unique_list[i] = 0\n        else:\n            unique_list[i] += 1\n    return unique_list\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    from collections import Counter\n    \n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \ndef unique_lists(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \ndef values_occur_in_list(list1, item):\n    '''\n    Write a function that returns the number of times the given item occurs in the given list.\n    '''\n    \n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] == item:\n            d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \ndef unique_items(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \ndef duplicate_elements(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef list_likes_n(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \ndef duplicate_elements(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef make_unique(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef same_values_in_list(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef same_values_in_tuples(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef unique_tuples(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef same_elements_in_list(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef same_elements_in_tuples(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef same_elements_in_lists(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \ndef same_elements_in_lists_2(list1):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n    \n    \n    \n    \ndef diff_list_likes_n(list1, list2):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    for i in range(len(list2)):\n        d[list2[i]] = d.get(list2[i], 0) + 1\n    return d\n    \n    \n    \n    \ndef same_elements_in_list_2(list1, list2):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n    for i in range(len(list2)):\n        d[list2[i]] = d.get(list2[i], 0) + 1\n    return d\n    \n    \n    \n    \ndef diff_lists_likes_n(list1, list2):\n    '''\n    Write a function that returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its elements.\n    '''\n    from collections import Counter\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = d.get(list1[i], 0) + 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Try/except is used so that the error message can be shown in the console.\n    try:\n        count = {}\n        for i in range(len(list1)):\n            list2 = list1[i]\n            if list2 in list1:\n                if list2 not in count:\n                    count[list2] = 1\n                else:\n                    count[list2] += 1\n        return count\n    except IndexError:\n        print('The list is empty')\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in unique_dict:\n                unique_dict[list1[i][j]] += 1\n            else:\n                unique_dict[list1[i][j]] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_number = {}\n    for lst in list1:\n        for i in lst:\n            if i not in list_number:\n                list_number[i] = 1\n            else:\n                list_number[i] += 1\n    return list_number\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # YOUR CODE HERE\n    # use dictionary to store the answer\n    answer = {}\n    # for each index in the list1\n    for i in range(0, len(list1)):\n        # create a list to store the counts\n        sublist = []\n        # create a nested dictionary to store the occurences\n        occurences = {}\n        # for each item in the list\n        for item in list1[i]:\n            # add the count to the sublist\n            sublist.append(list1[i].count(item))\n            # find the item's value in the dictionary\n            if item in occurences:\n                # if the value is the same, add the number of the item to the count\n                occurences[item] += sublist[i]\n            # if the value is not the same, add the item to the dictionary\n            else:\n                # if the value is not the same, add the number of the item to the count\n                occurences[item] = sublist[i]\n        # add the dictionary to the answer\n        answer[list1[i]] = occurences\n    # return the answer\n    return answer\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for item in list1:\n        if isinstance(item, list):\n            for i in item:\n                d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print(test_list)\n    # print(test_list[0][1])\n    # print(test_list)\n    \n    list_of_list = []\n    final_list = []\n    for i in test_list:\n        list_of_list.append(i[1])\n    \n    # print(list_of_list)\n    for x in list_of_list:\n        # print(x)\n        final_list.append(list(combinations(x,2)))\n    # print(final_list)\n    return final_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    test_list.sort()\n    return combinations(test_list,2)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = set(test_list) # no duplicates\n    s = list(test_list)\n    n = len(test_list)\n    if n == 0:\n        return [()]\n    if n == 1:\n        return [(s[0],)]\n    if n == 2:\n        return [(s[0], s[1],)]\n    \n    # create all combinations with tuples\n    test_list.add(()) # already sorted\n    comb_tuples = []\n    for i in range(n):\n        comb = list(combinations(s, i+1))\n        comb.append(tuple(s[:i]+s[i+1:]) )\n        comb_tuples.append(comb)\n    \n    # output list of all combinations\n    result = []\n    for i in range(n):\n        for comb_tuples in comb_tuples:\n            result.extend(comb_tuples[i])\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) < 2:\n        return []\n    combinations_list = []\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    my_tuple = []\n    for element in test_list:\n        for i in combinations(element,2):\n            my_tuple.append(i)\n    return my_tuple\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == []:\n        return ()\n    comb = []\n    for i in test_list:\n        comb += list(combinations(i, 2))\n    return set(comb)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return [(test_list[0],)]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = set(test_list)\n    #TODO Implement it using zip\n    print('test_list:', test_list)\n    return\n    \ndef combinations_with_tuples(t):\n    '''\n    This function takes a tuple and returns a list of tuples in the form of combinations.\n    '''\n    print('t:', t)\n    \n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t1 = (t[0],t[1])\n    #print('t1:', t1)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t2 = (t[0],t[1],t[2])\n    #print('t2:', t2)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t3 = (t[0],t[1],t[2],t[3])\n    #print('t3:', t3)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t4 = (t[0],t[1],t[2],t[3],t[4])\n    #print('t4:', t4)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t5 = (t[0],t[1],t[2],t[3],t[4],t[5])\n    #print('t5:', t5)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t6 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6])\n    #print('t6:', t6)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t7 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7])\n    #print('t7:', t7)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t8 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])\n    #print('t8:', t8)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t9 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9])\n    #print('t9:', t9)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t10 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10])\n    #print('t10:', t10)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t11 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11])\n    #print('t11:', t11)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t12 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12])\n    #print('t12:', t12)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t13 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13])\n    #print('t13:', t13)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t14 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14])\n    #print('t14:', t14)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t15 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])\n    #print('t15:', t15)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t16 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16])\n    #print('t16:', t16)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t17 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17])\n    #print('t17:', t17)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t18 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17],t[18])\n    #print('t18:', t18)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t19 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17],t[18],t[19])\n    #print('t19:', t19)\n    #create a tuple list with the tuple of the first element and the second element as the elements to be added to the list of tuples\n    t20 = (t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17],t[18],t[19],t[20])\n    #print('t20:', t20"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    if n==2 : \n        return 2\n    d = 0 \n    q = n//2\n    while q>0 : \n        r = q \n        q = q -1 \n        while r>0: \n            if (r%2)==1: \n                d += 1 \n            r = r//2\n        if d == 2: \n            return d\n        d = 0 \n    return 0\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n = int(n)\n    return math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2)) \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #counting all divisors\n    divisors = 1\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            divisors += 1\n    #print(divisors)\n    return divisors\ndef get_sum_divisors(n) : \n    '''\n    Write a python function to return the sum of all divisors of a positive integer.\n    '''\n    #print(sum(divisors))\n    #adding all divisors to the sum of all divisors\n    divisors = count_divisors(n)\n    sum = 0\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            sum += divisor\n    #print(sum)\n    return sum\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 0 : \n        return False\n    elif n == 1 : \n        return True\n    elif n % 2 == 0 :\n        return count_divisors(n//2)\n    else :\n        return count_divisors(3*n + 1)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==0:\n        return 0\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            print(i)\n            if i==2:\n                print(n//i)\n            else:\n                print(i)\n                print(n//i)\n            return 1\n        i+=1\n    return 0\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            print(n, \" is not a divisor of \", i)\n            return False\n        i += 1\n    print(n, \" is a divisor of \", i)\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            count += 1\n    return count "
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    print('Input a number:')\n    num = int(input())\n    print('Input a number:')\n    num_2 = int(input())\n    if num == num_2 and num % 2 == 0:\n        print('This is an even number')\n        count = num//2\n        print('You have counted:', count)\n    else:\n        print('This is not an even number')\n        count = num/2\n        print('You have counted:', count)\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return True\n    if (n == 3) : \n        return False\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length_subarrays = 0\n    if len(arr) % 2!= 0:\n        return -1\n    for i in range(len(arr)):\n        sum_of_odd_length_subarrays += arr[i]\n    return sum_of_odd_length_subarrays\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    '''\n    return sum([arr[i] for i in range(len(arr)) if arr[i] % 2 == 1])\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    # iterate over the array\n    for i in range(0,len(arr)):\n        # if the current index is odd\n        if arr[i]%2==0:\n            count += 1\n        # if the current index is even\n        else:\n            count += 1\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2!= 0):\n            odd_length_sum += arr[i]\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(0,len(arr)):\n        if (i%2 == 0):\n            res += arr[i]\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    \n    for i in range(0, n):\n        if (i%2!= 0):\n            sum = sum + arr[i]\n    \n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        if(i%2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # to find the even length subarrays we have to use 2 loops, which is a bit tricky and even length subarrays\n    even_length_sum = 0\n    even_subarray = []\n    odd_length_sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            even_subarray.append(arr[i])\n        if i % 2 == 1:\n            odd_length_sum += even_subarray[-1]\n            even_subarray.pop()\n    return odd_length_sum + even_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # convert the input to an array\n    odd_list = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            odd_list.append(arr[i])\n    # convert the input to a list\n    odd_list = odd_list[::2]\n    # find the total sum of all odd lengths\n    sum = 0\n    for x in odd_list:\n        sum += x\n    # return the total sum of all odd lengths\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    start = 0\n    end = len(arr) - 1\n    s = 0\n    while(start <= end):\n        if (arr[start] % 2):\n            s += arr[start]\n            start += 1\n        else:\n            end -= 1\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert to float\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if (r < 0):\n        r *= -1\n    if (g < 0):\n        g *= -1\n    if (b < 0):\n        b *= -1\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    (max_r, max_g, max_b) = (255, 255, 255)\n    (min_r, min_g, min_b) = (0, 0, 0)\n    for i in range(0, 3):\n        if r >= max_r:\n            r = max_r\n        if r <= min_r:\n            r = min_r\n        if g >= max_g:\n            g = max_g\n        if g <= min_g:\n            g = min_g\n        if b >= max_b:\n            b = max_b\n        if b <= min_b:\n            b = min_b\n        (h, s, v) = colorsys.rgb_to_hsv(r, g, b)\n        if v > 1:\n            v = 1\n        else:\n            v = 0\n        r = int(round(r * 255))\n        g = int(round(g * 255))\n        b = int(round(b * 255))\n        cv2.putText(img, \"{},{},{}\".format(r, g, b), (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1, cv2.LINE_AA)\n    return img\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    f = (6.0 / 255.0) * r + (7.0 / 255.0) * g + (8.0 / 255.0) * b\n    if f > 1.0:\n        f = 1.0\n    if f < 0.0:\n        f = 0.0\n    if f == 0.0:\n        return (0, 0, 0)\n    else:\n        return (int(f * 6.0 + 0.5), int(f * 6.0 + 0.5), int(f * 6.0 + 0.5))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    hue = int(r*360)\n    sat = int(g*255)\n    val = int(b*255)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = (r + g + b) / 3.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_to_hsv = [\n        [255, 0, 0], [0, 255, 0], [0, 0, 255],\n        [0, 255, 255], [255, 0, 255], [0, 255, 0]]\n    if r <= 0.0:\n        r = 0.0\n    if g <= 0.0:\n        g = 0.0\n    if b <= 0.0:\n        b = 0.0\n    \n    if r > 1.0:\n        r = 1.0\n    if g > 1.0:\n        g = 1.0\n    if b > 1.0:\n        b = 1.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_r = 255\n    max_g = 255\n    max_b = 255\n    min_r = 0\n    min_g = 0\n    min_b = 0\n    h = 0\n    s = 0\n    v = 0\n    for i in range(len(r)):\n        if r[i] > max_r:\n            r[i] = max_r\n            r[i+1] = max_r - max_r\n        elif r[i] < min_r:\n            r[i] = min_r\n            r[i+1] = min_r - min_r\n        if g[i] > max_g:\n            g[i] = max_g\n            g[i+1] = max_g - max_g\n        elif g[i] < min_g:\n            g[i] = min_g\n            g[i+1] = min_g - min_g\n        if b[i] > max_b:\n            b[i] = max_b\n            b[i+1] = max_b - max_b\n        elif b[i] < min_b:\n            b[i] = min_b\n            b[i+1] = min_b - min_b\n        h += r[i]*(max_r - min_r)\n        s += g[i]*(max_g - min_g)\n        v += b[i]*(max_b - min_b)\n    if h > 360:\n        h = h - 360\n    if s > 100:\n        s = s - 100\n    if v > 100:\n        v = v - 100\n    if v == 0:\n        v = 100\n    if s == 0:\n        s = 100\n    if h == 0:\n        h = 100\n    return hsv_to_rgb(h,s,v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r < 0.0:\n        r = 0.0\n    elif r > 1.0:\n        r = 1.0\n    if g < 0.0:\n        g = 0.0\n    elif g > 1.0:\n        g = 1.0\n    if b < 0.0:\n        b = 0.0\n    elif b > 1.0:\n        b = 1.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h, s, v = 0, 0, 0\n    # Pick the maximum of the three values\n    r = max(r, 0.0)\n    g = max(g, 0.0)\n    b = max(b, 0.0)\n    # Calculate the hue of the colors\n    # Hue = max(0, (Min + (numerator / denominator) * 3.14 * v))\n    h = math.sqrt(max(0, (r + g + b) - (r - g - b)))\n    if h == 0:\n        h = 0.2126\n    elif h < 0.04045:\n        h = 0.1294\n        s = max(0, min(0.339, 0.693 * h + 0.5))\n    else:\n        h = 0.5 * (math.log(h / 0.04045) + 1)\n        s = max(0, min(0.272, 0.615 * pow(h, 2) + 0.5))\n    # Calculate the saturation of the colors\n    # Saturation = max(0, (Min + (numerator / denominator) * pow(v, 2)))\n    s = pow(max(0, (r - g - b)), 2)\n    if s == 0:\n        s = 0.5\n    else:\n        s = max(0, min(1, 0.299 * s + 0.587 * g + 0.114 * b))\n    # Calculate the value of the colors\n    # Value = (numerator / denominator) * pow(v, 2)\n    v = pow(max(0, (r - g - b)), 2)\n    if v == 0:\n        v = 0.5\n    else:\n        v = min(1, math.sqrt(max(0, pow(v, 2) - s)))\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num_even = 0\n    num_odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            num_even = num_even + 1\n        else:\n            num_odd = num_odd + 1\n    print(\"The product of first even and odd number of list is:\", num_even * num_odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Your code here\n    \n    mul = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            mul *= list1[i]\n        else:\n            mul *= list1[i]\n    return mul\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for number in list1:\n        if number%2 == 0:\n            product = product*number\n        else:\n            product = product*number\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    # We use find in a nested for loop. Each time we look at a number, it stores the index of that number, and\n    # if it's even, we multiply it by 2, and if it's odd, we multiply it by 3. This will give us the product of\n    # the first two numbers (1 and 3) multiplied by 2 and 3 respectively.\n    # We make the recursive call for each number.\n    \n    # \n    # The first call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # If it's not even we go to the next number.\n    # \n    # We then use the index of the next number to check if the next number is even or odd.\n    # We then multiply it by the index of the previous number multiplied by 2.\n    # Then the next number multiplied by 2 is a product of the 2 and 3.\n    # \n    # So the point is that we can use the previous numbers as the same product, and we just have to check\n    # if the next number is even or odd and multiply it by it's index multiplied by 2.\n    # \n    # If it is even, we just multiply it by the previous number multiplied by 2.\n    # If it is odd, we multiply it by the next number multiplied by 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # If the next number is even we go to the next number.\n    # \n    # We then multiply it by the index of the previous number multiplied by 2.\n    # \n    # We then multiply it by the index of the next number multiplied by 3.\n    \n    # \n    # We have a nested for loop inside the function. We then start a new recursion for the number that is\n    # not even.\n    # \n    # \n    # The second call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # If it's not even we go to the next number.\n    # \n    # We then use the index of the next number to check if the next number is even or odd.\n    # We then multiply it by the index of the previous number multiplied by 2.\n    # Then the next number multiplied by 2 is a product of the 2 and 3.\n    # \n    # So the point is that we can use the previous numbers as the same product, and we just have to check\n    # if the next number is even or odd and multiply it by it's index multiplied by 2.\n    # \n    # If it is even, we just multiply it by the previous number multiplied by 2.\n    # If it is odd, we multiply it by the next number multiplied by 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # If the next number is even we go to the next number.\n    # \n    # We then multiply it by the index of the previous number multiplied by 2.\n    # \n    # We then multiply it by the index of the next number multiplied by 3.\n    \n    # \n    # We have a nested for loop inside the function. We then start a new recursion for the number that is\n    # not even.\n    # \n    # \n    # The third call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # \n    # The fourth call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # \n    # We then multiply it by the index of the previous number multiplied by 2.\n    # \n    # We then multiply it by the index of the next number multiplied by 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # If the next number is even we go to the next number.\n    # \n    # We then multiply it by the index of the previous number multiplied by 2.\n    # \n    # We then multiply it by the index of the next number multiplied by 3.\n    \n    # \n    # We have a nested for loop inside the function. We then start a new recursion for the number that is\n    # not even.\n    # \n    # \n    # The fifth call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # \n    # The sixth call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # \n    # The seventh call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # \n    # We then multiply it by the index of the previous number multiplied by 2.\n    # \n    # We then multiply it by the index of the next number multiplied by 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    \n    # \n    # We have a nested for loop inside the function. We then start a new recursion for the number that is\n    # not even.\n    # \n    # \n    # The eighth call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # \n    # The ninth call here is to check if the number we're looking at is a even number\n    # then we start a new recursion for the number that is not even.\n    # \n    # \n    # We then multiply it by the index of the previous number multiplied by 2.\n    # \n    # We then multiply it by the index of the next number multiplied by 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    \n    \n    \n    # \n    # These are a series of nested loops through the list. We then start a new recursion for each number\n    # from the last index of the list.\n    # \n    # \n    # \n    # So the point is that we can use the previous numbers as the same product, and we just have to check\n    # if the next number is even or odd and multiply it by it's index multiplied by 2.\n    # \n    # \n    # If it is even, we just multiply it by the previous number multiplied by 2.\n    # If it is odd, we multiply it by the next number multiplied by 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # If the next number is even we go to the next number.\n    # \n    # We then multiply it by the index of the previous number multiplied by 2.\n    # \n    # We then multiply it by the index of the next number multiplied by 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # If the next number is even we go to the next number.\n    # \n    # We then multiply it by the index of the previous number multiplied by 2.\n    # \n    # We then multiply it by the index of the next number multiplied by 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # We then return the product of the two numbers multiplied by 2 and 3.\n    # \n    # If the next number is even we go to the next number.\n    # "
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # index = 0\n    # for i in list1:\n    #     if i % 2 == 0:\n    #         list1[index] *= 2\n    #     else:\n    #         list1[index] *= 3\n    #     index += 1\n    # return list1\n    '''\n    Write a function to multiply list element by a given number if that element is even.\n    '''\n    # index = 0\n    # for i in list1:\n    #     if i % 2 == 0:\n    #         list1[index] *= 2\n    #     else:\n    #         list1[index] *= 3\n    #     index += 1\n    # return list1\n    '''\n    Write a function to calculate sum of a list.\n    '''\n    # index = 0\n    # sum = 0\n    # for i in list1:\n    #     sum += i\n    # return sum\n    '''\n    Write a function to check if a number is a Fibonacci number.\n    '''\n    # index = 0\n    # if sum % 2 == 0:\n    #     for i in range(0, index):\n    #         list1[index] += list1[index + 1]\n    #     return True\n    # return False\n    '''\n    Write a function to check if a number is a Palindrome.\n    '''\n    # index = 0\n    # while True:\n    #     index += 1\n    #     if str(index) == str(index)[::-1]:\n    #         return True\n    # return False\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    # index = 0\n    # while index < len(list1):\n    #     if list1[index] == list1[index + 1]:\n    #         index += 2\n    #     else:\n    #         return False\n    # return True\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    # define the function\n    def mul_even_odd(list1):\n        '''\n        list1: list\n        '''\n        \n        # check if the list is empty\n        if list1 == []:\n            return 0\n        \n        # get the index of even and odd numbers\n        n = len(list1)\n        even_odd_index = 0\n        \n        # set up the list for both odd and even\n        for i in range(0, n):\n            if list1[i] % 2 == 0:\n                even_odd_index += 1\n                \n                # if even, move to the next index\n            else:\n                even_odd_index += 1\n                continue\n        \n        # get the product\n        product = list1[0] * (even_odd_index + 1)\n        \n        # return the product\n        return product\n        \n        \n    # return the product\n    return mul_even_odd(list1)\n        \n    \n    "
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    temp = 0\n    for i in list1:\n        if i % 2 == 0:\n            temp += i\n        else:\n            temp *= i\n    return temp\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1.sort()\n    res = []\n    if len(list1)%2==0:\n        p = 1\n        for i in list1:\n            res.append(p)\n            p = p*i\n    else:\n        p = 1\n        for i in list1:\n            res.append(p)\n            p = p*i\n    return res\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p = 1\n    for i in list1:\n        p *= i\n    return p\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # check list length\n    if len(list1) == 0:\n        print(\"Empty list\")\n        return\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in range(len(test_str)):\n        int_tuple += (int(test_str[i]),)\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = []\n    for i in test_str:\n        test_list.append(int(i))\n    return test_list\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(val) for val in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def convert_tuple_str_int(test_str):\n        '''\n        Return a tuple of string converted to integer.\n        '''\n        return tuple(map(int, test_str.split()))\n    return convert_tuple_str_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = tuple(test_str)\n    return tuple_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str.split(\",\"))\n    return (int(test_tuple[0]), int(test_tuple[1]))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) == tuple:\n        if len(test_str) == 2:\n            return test_str\n        else:\n            return test_str\n    else:\n        return 'Error: not tuple'\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def str_to_int(s):\n        i=0\n        while i<len(s):\n            yield int(s[i])\n            i+=1\n    test_list=list(str_to_int(test_str))\n    return test_list\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low, high = 0, len(a) - 1\n    while high >= low:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid\n        else:\n            high = mid\n    return high\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while r > l:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m\n        else:\n            r = m\n    return r\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        i = 0\n    if i == len(a):\n        i = len(a) - 1\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #use the bisect function\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    '''\n    Time complexity: O(logN)\n    Space complexity: O(1)\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0:\n        i = len(a)\n    else:\n        i -= 1\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 1:\n        return a.index(x)+1\n    \n    pivot = bisect.bisect_right(a, x)\n    if pivot >= len(a):\n        return len(a)\n    if x <= a[pivot]:\n        return pivot\n    else:\n        return len(a)-1-pivot\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 1:\n        return a.index(x)+1\n    \n    pivot = bisect.bisect_left(a, x)\n    if pivot >= len(a):\n        return len(a)\n    if x < a[pivot]:\n        return pivot\n    else:\n        return len(a)-1-pivot\n    \ndef main():\n    a = [1, 2, 3, 4, 5, 5, 5]\n    print(a)\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 4)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 3)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 4)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 2)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 3)}')\n    print(f'Index of 5 in a {right_insertion(a, 4)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 3)}')\n    print(f'Index of 5 in a {right_insertion(a, 2)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 4)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 4)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 4)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 4)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 5)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 6)}')\n    print(f'Index of 5 in a {right_insertion(a, 8)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index of 5 in a {right_insertion(a, 7)}')\n    print(f'Index of 5 in a {right_insertion(a, 9)}')\n    print(f'Index o"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #check if the list is sorted\n    if len(a) == 0:\n        return -1\n    else:\n        #if the element is greater than the first element and greater than or equal to the last element\n        if a[0] > a[1] and a[0] >= x:\n            #return the index where the given value is inserted\n            return a.index(x)\n        #check if the element is greater than the last element\n        elif a[-1] < x:\n            #return the index where the given value is inserted\n            return a.index(x)\n        else:\n            #check if the element is equal to the last element\n            if a[-1] == x:\n                #return the index where the given value is inserted\n                return a.index(x)\n            #check if the element is less than the first element\n            elif a[0] < x:\n                #return the index where the given value is inserted\n                return a.index(x)\n            else:\n                #return -1\n                return -1"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a) - 1, -1, -1):\n        if a[i] > x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i < len(a) else -1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # If the string is empty, it will return False.\n    if text == \"\":\n        return False\n    # If the string is not empty, it will return True\n    return re.search(r'^[a-zA-Z]+a', text)!= None or re.search(r'^[A-Za-z]+a', text)!= None or re.search(r'^[A-Za-z]+b', text)!= None or re.search(r'^[A-Za-z]+b', text)!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub('[^\\w]+','', text)\n    text = re.sub(' ', '', text)\n    text = re.sub('\\s+','', text)\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i-1] == 'b':\n            text[i] = 'b'\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"\\A[a-zA-Z\\s]+?[a-zA-Z\\s]+?\\Z\")\n    if pattern.match(text)!= None:\n        return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if 'a' in text:\n        #if there is an a followed by three, then it will match a triple.\n        triple_pattern = r\"\\b(a{3,}b{3,})*\\b\"\n        return re.search(triple_pattern, text)!= None\n    elif 'a' in text:\n        #if there is no a followed by three, then it will match all of the letters.\n        #all letters are a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n        all_pattern = r\"\\b(a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?b{3,}?|a{3,}?"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = []\n    regEx = re.compile(r'\\(\\(([^()]*?)(\\(\\))\\s*)a(\\s*)b')\n    for i in regEx.finditer(text):\n        result.append(i.group(2))\n    return result\n    "
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\w+a\\b'\n    text = re.sub(pattern, '', text)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Split the string into a list of words.\n    words = re.split(r'\\W+',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if not text:\n        return False\n    elif not text.startswith('a'):\n        return False\n    elif len(text) == 1:\n        return False\n    elif text[1]!= 'b':\n        return False\n    return True\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bc'\n    # find all the matches\n    matches = re.finditer(pattern,text,flags=re.MULTILINE)\n    for match in matches:\n        print('Text:',match.group())\n        print('Match:',match.start())\n        print('Match:',match.end())\n        print('Match:',match.span())\n        print()\n    # return the matches\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    r = re.match(r'(a)b',text)\n    if r is None:\n        return False\n    return True\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = test_list, tuple(test_str)\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list) == 1:\n        return test_list[0], test_list[0]\n    else:\n        return test_list[0] + test_list[1], test_list[1] + test_list[0]\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple_str = str(new_tuple)\n    return new_tuple_str\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in test_list:\n        i = i.strip()\n        if i!= '':\n            test_str += ','\n    return (test_str, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # print(test_list)\n    # print(test_str)\n    \n    # when tuples are passed on as parameters, they get the \n    # order of the list and the item added to each tuple\n    # in the list\n    # print(\"new_tuple\")\n    new_list = test_list[:]\n    for item in test_str:\n        new_list.append(item)\n    # print(new_list)\n    return tuple(new_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    new_tuple = tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        return test_list, tuple(map(int, test_str.split()))\n    except:\n        return test_list, tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #Create a new tuple from the given string and list\n    new_tuple = test_list + test_str\n    #Return the tuple\n    return tuple(new_tuple)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for index,num in enumerate(nums):\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position = True\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if nums[i] % 2 == 0 and nums[i]!= nums[i - 1]:\n                even_position = False\n            else:\n                even_position = True\n    return even_position\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in nums:\n        if i%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for index, num in enumerate(nums):\n        if index % 2 == 0:\n            if num % 2 == 0:\n                even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return [num for num in nums if num % 2 == 0]\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        for i in range(0, len(nums), 2):\n            if nums[i] % 2 == 0 and nums[i+1] % 2 == 0:\n                print(nums[i], nums[i+1])\n    else:\n        print('Wrong')\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2==0:\n            print(nums[i])\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_pos = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_pos += 1\n    return even_pos\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            print(i)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            new_tuple.append(test_tup[i])\n        elif type(test_tup[i]) == list:\n            new_tuple.append(tuple(test_tup[i]))\n        else:\n            new_tuple.append(test_tup[i])\n    return new_tuple\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    print(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested = []\n    # loop through the tuple\n    for e in test_tup:\n        # if the tuple contains any elements:\n        if type(e) is tuple:\n            # recursively call the function\n            # i.e. remove nested tuples\n            remove_nested(e)\n        else:\n            # append the element to the inner list\n            nested.append(e)\n    # return the inner list\n    return nested"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # TODO: Replace pass with your code here\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(0, len(test_tup)):\n        test_tup[i] = (test_tup[i][0], test_tup[i][1])\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    # loop through each element\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            # if the tuple is a tuple,\n            # remove it from the list\n            if type(test_tup[i]) is tuple:\n                # remove the item from the tuple\n                test_tup[i] = test_tup[i][0]\n    \n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # write your code here\n    remove = False\n    for i in test_tup:\n        for j in i:\n            if isinstance(j, tuple) == False:\n                remove = True\n    if remove == True:\n        test_tup = tuple(test_tup)\n    else:\n        print(\"ERROR\")\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tuple = test_tup\n    while type(test_tuple[0]) is tuple:\n        test_tuple = test_tuple[1:]\n    return test_tuple\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output_list = []\n    for i in range(0, len(input_list)):\n        output_list.append(input_list[i][0:len(input_list[i])-1])\n    return output_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    from itertools import islice\n    \n    try:\n        result = 0\n        for i in islice(input_list, 1, None):\n            result += len(i)\n        return result\n    except TypeError:\n        return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for l in input_list:\n        if type(l) == list:\n            counter += len(l)\n        else:\n            pass\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    c = 0\n    for i in input_list:\n        if type(i) == list:\n            c = c + 1\n    return c\n    "
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for input_list in input_list:\n        if type(input_list) is list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) is list:\n            count += len(element)\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        count += len(i)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0 \n    for item in input_list:\n        if item == []:\n            continue \n        else:\n            counter += 1 \n    return counter\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l = 0\n    r = n - 1\n    \n    while l <= r:\n        mid = (l + r) // 2\n        \n        if arr[mid] == x:\n            return mid\n        \n        if arr[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    \n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    start = 0\n    end = len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        return arr[len(arr)-1]\n    \ndef middle(arr,x):\n    '''\n    Write a python function to find the middle element of a sorted array.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return -1\n    else:\n        return (len(arr)-1)/2\n    \ndef first(arr,x):\n    '''\n    Write a python function to find the first element of a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        return arr[0]\n    \ndef last_first_middle(arr,x):\n    '''\n    Write a python function to find the last and first element of a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        return (arr[-1],arr[0])\n    \ndef count(arr,x):\n    '''\n    Write a python function to count the number of elements that are present in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return 0\n    else:\n        return (arr[0]!= arr[1])\n    \ndef insert(arr,x):\n    '''\n    Write a python function to insert an element in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        arr.append(x)\n        return arr\n    else:\n        arr[len(arr)-1] = x\n        return arr\n    \ndef remove(arr,x):\n    '''\n    Write a python function to remove an element from a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        idx = arr[len(arr)-1]\n        arr[len(arr)-1] = arr[0]\n        arr.pop()\n        return idx\n    \ndef search(arr,x):\n    '''\n    Write a python function to search an element in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<1:\n        return -1\n    else:\n        if arr[0] == x:\n            return arr[0]\n        elif arr[0] < x:\n            arr[0] = arr[0] + 1\n            arr.append(arr[0])\n            return arr\n        else:\n            arr[0] = arr[0] - 1\n            arr.insert(0,arr[0])\n            return arr[0]\n    \ndef bubble_sort(arr,x):\n    '''\n    Write a python function to sort an array in ascending order.\n    '''\n    # Your code here\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n    \ndef partition(arr,x):\n    '''\n    Write a python function to partition an array in a sorted array.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    idx = arr[0]\n    arr[0] = arr[len(arr)-1]\n    arr[len(arr)-1] = idx\n    arr.pop(len(arr)-1)\n    \n    # Your code here\n    i = 0\n    for i in range(0,len(arr)):\n        if arr[i]<=x:\n            arr[i],arr[i+1] = arr[i+1],arr[i]\n        elif arr[i]>x:\n            arr[i],arr[i+1] = arr[i+1],arr[i]\n    return arr\n    \ndef quick_sort(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        idx = arr[0]\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = idx\n        arr = quick_sort(arr,x)\n        return arr\n    \ndef quick_sort2(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort2(arr,x)\n        arr[0] = pivot\n        arr = quick_sort2(arr,x)\n        return arr\n    \ndef quick_sort3(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort3(arr,x)\n        arr[0] = pivot\n        arr = quick_sort3(arr,x)\n        return arr\n    \ndef quick_sort4(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort4(arr,x)\n        arr[0] = pivot\n        arr = quick_sort4(arr,x)\n        return arr\n    \ndef quick_sort5(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        left = [i for i in arr[1:] if i<=pivot]\n        right = [i for i in arr[1:] if i>pivot]\n        arr[0] = pivot\n        arr = quick_sort5(arr,x)\n        arr[0] = pivot\n        arr = quick_sort5(arr,x)\n        arr[0] = pivot\n        arr = quick_sort5(arr,x)\n        return arr\n    \ndef quick_sort6(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort6(arr,x)\n        arr[0] = pivot\n        arr = quick_sort6(arr,x)\n        return arr\n    \ndef quick_sort7(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sort algorithm.\n    '''\n    # Your code here\n    if len(arr)<=1:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 0\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = pivot\n        arr = quick_sort7(arr,x)\n        arr[0] = pivot\n        arr = quick_sort7(arr,x)\n        return arr\n    \ndef quick_sort8(arr,x):\n    '''\n    Write a python function to sort an array in ascending order using the quick sor"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    return n-1 if x >= arr[0] else n-2\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    \n    if n==1:\n        return 0\n    elif arr[n-1]<arr[n-2]:\n        return n-1\n    else:\n        return n-1\n    \n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)+1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if x == arr[-1]:\n        return len(arr)\n    # Binary search\n    if x < arr[-1]:\n        return len(arr) - 1\n    # Binary search with offset\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if x == arr[mid]:\n            return mid\n        if x < arr[mid]:\n            end = mid - 1\n        if x > arr[mid]:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Your code here\n    if x<arr[len(arr)-1]:\n        return arr[len(arr)-1]\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            right = mid-1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x==arr[0]:\n        return 0\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Write your code here.\n    return re.match(r\"^(a[a-z]\\s)((?:(?<=b){0,1})\\s)(.+)$\", text, re.M | re.I)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    text = re.sub('a', '', text)\n    text = re.sub('b', '', text)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #print(text)\n    if re.search(\"\\w+a\\w+\\b\", text) == None:\n        #print(re.search(\"\\w+a\\w+\\b\", text))\n        return\n    text = text.replace(\"\\n\",\" \")\n    text = text.replace(\"\\t\",\" \")\n    #print(text)\n    text_list = text.split(\" \")\n    #print(text_list)\n    list = []\n    for i in text_list:\n        if len(i) > 0:\n            #print(i)\n            list.append(i)\n    if len(list) > 0:\n        #print(\"longer \" + str(list))\n        list.sort(key = len, reverse = True)\n        #print(list)\n        #print(list[0])\n        if list[0].endswith(\"b\"):\n            #print(\"start\")\n            list[0] = list[0][:-1]\n            #print(list[0])\n        if list[-1].endswith(\"b\"):\n            #print(\"end\")\n            list[-1] = list[-1][:-1]\n            #print(list[-1])\n        if list[0] == \"a\":\n            #print(\"a\")\n            list[0] = \"A\"\n        if list[-1] == \"a\":\n            #print(\"A\")\n            list[-1] = \"A\"\n        #print(list)\n        list_string =''.join(list)\n        #print(list_string)\n        if list_string == \"\":\n            #print(list_string)\n            return\n        #print(list_string)\n        #print(list)\n        return list_string\n    else:\n        #print(text_list)\n        return\ndef count_word_occur(text, word):\n    '''\n    Count the occurrences of a word.\n    '''\n    if word in text:\n        #print(\"in\")\n        return text.count(word)\n    else:\n        return 0\ndef text_contains(text, word):\n    '''\n    Look at all text lines within a text file.\n    '''\n    #print(text)\n    if word in text:\n        #print(\"in\")\n        return True\n    else:\n        return False\ndef text_has_all_words(text, word):\n    '''\n    Check if the text contains all the words.\n    '''\n    if len(word) > 0:\n        #print(word)\n        if word in text:\n            #print(\"in\")\n            return True\n        else:\n            #print(\"not in\")\n            return False\n    else:\n        #print(\"in\")\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start = re.search('a(b)?', text)\n    end = re.search('(a)?b', text)\n    if start:\n        start = start.group(0)\n        return start + text[start:end.start(0)]\n    else:\n        return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_pattern = re.compile(r'\\b(a)\\b')\n    return a_pattern.search(text).group()\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=[a-zA-Z0-9])\\b(?<=[A-Z])\\1')\n    matches = pattern.findall(text)\n    if matches:\n        print(text)\n        print(\"\\nFound the pattern: \" + str(matches))\n    else:\n        print(text)\n        print(\"No pattern found\")\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'[aA]?'\n    text = text.upper()\n    text = re.sub(pattern, '', text, flags=re.MULTILINE)\n    return text\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    pattern = r'[aA]?'\n    text = text.upper()\n    text = re.sub(pattern, '', text, flags=re.MULTILINE)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_str_found = False\n    end_str_found = False\n    str_in_text = ''\n    index_is_found = False\n    final_matches_length = 0\n    while(not start_str_found):\n        index_is_found = False\n        final_matches_length = 0\n        final_index_is_found = False\n        for i in range(len(text)):\n            if(text[i] == 'a'):\n                if(not index_is_found):\n                    final_matches_length = final_matches_length + 1\n                else:\n                    index_is_found = True\n                    final_matches_length = final_matches_length + 1\n            if(text[i] ==''):\n                if(not index_is_found):\n                    final_matches_length = final_matches_length + 1\n                else:\n                    index_is_found = True\n                    final_matches_length = final_matches_length + 1\n            if(text[i] == 'b'):\n                if(not index_is_found):\n                    final_matches_length = final_matches_length + 1\n                else:\n                    index_is_found = True\n                    final_matches_length = final_matches_length + 1\n        if(index_is_found):\n            str_in_text = str_in_text + text[i]\n            if(final_matches_length > 1):\n                str_in_text = str_in_text + text[i]\n    if(final_matches_length > 0):\n        str_in_text = str_in_text +''\n        if(text[-1] ==''):\n            str_in_text = str_in_text +''\n        final_index_is_found = False\n        while(not final_index_is_found):\n            if(text[-1] ==''):\n                final_index_is_found = True\n            if(text[-1] == 'a'):\n                final_index_is_found = True\n            if(text[-1] == 'b'):\n                final_index_is_found = True\n            if(text[-1] ==''):\n                final_index_is_found = True\n            if(final_index_is_found):\n                final_index_is_found = False\n                final_matches_length = 0\n                final_index_is_found = False\n                for i in range(len(text)):\n                    if(text[i] ==''):\n                        final_matches_length = final_matches_length + 1\n                    if(text[i] == 'a'):\n                        final_matches_length = final_matches_length + 1\n                    if(text[i] == 'b'):\n                        final_matches_length = final_matches_length + 1\n                    if(text[i] ==''):\n                        final_matches_length = final_matches_length + 1\n                    if(final_index_is_found):\n                        final_matches_length = final_matches_length + 1\n        final_matches_length = str(final_matches_length)\n        index_is_found = False\n        final_index_is_found = False\n        final_index_is_found = False\n        for i in range(len(str_in_text)):\n            if(str_in_text[i] ==''):\n                final_matches_length = final_matches_length + 1\n            if(str_in_text[i] == 'a'):\n                final_matches_length = final_matches_length + 1\n            if(str_in_text[i] == 'b'):\n                final_matches_length = final_matches_length + 1\n            if(str_in_text[i] ==''):\n                final_matches_length = final_matches_length + 1\n            if(final_index_is_found):\n                final_matches_length = final_matches_length + 1\n        str_in_text = str_in_text.rstrip()\n        end_str_found = False\n        for i in range(len(str_in_text)):\n            if(str_in_text[i] ==''):\n                end_str_found = True\n            if(str_in_text[i] == 'a'):\n                end_str_found = True\n            if(str_in_text[i] == 'b'):\n                end_str_found = True\n            if(str_in_text[i] ==''):\n                end_str_found = True\n            if(final_index_is_found):\n                final_matches_length = final_matches_length + 1\n        if(end_str_found):\n            final_matches_length = str(final_matches_length)\n            index_is_found = False\n            final_index_is_found = False\n            final_index_is_found = False\n            for i in range(len(str_in_text)):\n                if(str_in_text[i] ==''):\n                    final_matches_length = final_matches_length + 1\n                if(str_in_text[i] == 'a'):\n                    final_matches_length = final_matches_length + 1\n                if(str_in_text[i] == 'b'):\n                    final_matches_length = final_matches_length + 1\n                if(str_in_text[i] ==''):\n                    final_matches_length = final_matches_length + 1\n                if(final_index_is_found):\n                    final_matches_length = final_matches_length + 1\n            str_in_text = str_in_text.rstrip()\n            start_str_found = False\n            for i in range(len(str_in_text)):\n                if(str_in_text[i] ==''):\n                    start_str_found = True\n                if(str_in_text[i] == 'a'):\n                    start_str_found = True\n                if(str_in_text[i] == 'b'):\n                    start_str_found = True\n                if(str_in_text[i] ==''):\n                    start_str_found = True\n                if(final_index_is_found):\n                    final_matches_length = final_matches_length + 1\n            if(start_str_found):\n                final_matches_length = str(final_matches_length)\n                index_is_found = False\n                final_index_is_found = False\n                final_index_is_found = False\n                for i in range(len(str_in_text)):\n                    if(str_in_text[i] ==''):\n                        final_matches_length = final_matches_length + 1\n                    if(str_in_text[i] == 'a'):\n                        final_matches_length = final_matches_length + 1\n                    if(str_in_text[i] == 'b'):\n                        final_matches_length = final_matches_length + 1\n                    if(str_in_text[i] ==''):\n                        final_matches_length = final_matches_length + 1\n                    if(final_index_is_found):\n                        final_matches_length = final_matches_length + 1\n                str_in_text = str_in_text.rstrip()\n                if(final_matches_length > 1):\n                    str_in_text = str_in_text +''\n            final_index_is_found = False\n            for i in range(len(str_in_text)):\n                if(str_in_text[i] ==''):\n                    final_index_is_found = True\n                if(str_in_text[i] == 'a'):\n                    final_index_is_found = True\n                if(str_in_text[i] == 'b'):\n                    final_index_is_found = True\n                if(str_in_text[i] ==''):\n                    final_index_is_found = True\n                if(final_index_is_found):\n                    final"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)(?<!b)(?:[^a-zA-Z0-9])'\n    end_pattern = r'(?<=b)'\n    re_found = re.findall(pattern, text)\n    for string in re_found:\n        text = text.replace(string, end_pattern)\n    return text\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    pattern = r'(?<=a)(?:[^a-zA-Z0-9])'\n    end_pattern = r'(?<=c)'\n    re_found = re.findall(pattern, text)\n    for string in re_found:\n        text = text.replace(string, end_pattern)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r'\\w+')\n    return p.findall(text)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict.items():\n        sum+=i[1]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key in dict:\n        sum+=dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Add your code here\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key,value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not dict:\n        return 0\n    return dict.values()\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n <= 1: \n        return n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    return n + sum(filter(lambda x: x % 2 == 1, range(l, r+1)))\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n-1\n    if (n <= 0):\n        return 0\n    else:\n        while (l < r):\n            mid = (l+r)//2\n            if (mid % 2 == 0):\n                l = mid\n            else:\n                r = mid\n    return l+1\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    for i in range(n, n+1):\n        if i % 2 == 0:\n            odd_sum += i\n    return odd_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(1, n+1):\n        if(i%2!=0):\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 == 0:\n            total = total + i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if(n < 0):\n        return None\n    elif n in range(1,11):\n        return n\n    else:\n        return n + sum_odd(n - 1) + sum_odd(n + 1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0: \n        return 0 \n    elif n == 0: \n        return 0 \n    else: \n        return n % 2 + sum_odd(n - 1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    num_list = []\n    for i in range(l, r+1):\n        if i % 2 == 0:\n            num_list.append(i)\n    print(num_list)\n    print(\"sum of odd numbers :\", sum(num_list))\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    evens = 0\n    odds = 0\n    for i in range(0, n, 2):\n        if i % 2!= 0:\n            evens += i\n            odds += 2\n    return (evens + odds)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for element in arr:\n        total = total + element\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for item in arr:\n        sum += item\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr.sort()\n    return sum(arr)\n    # You can use the _sum function to generate the sum of an array\n    # however, it does not include the sum of the first number.\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr == []:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for n in arr:\n        sum += n\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for item in arr:\n        sum = sum + item\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # answer = n ^ d\n    answer = (n ^ d) << 1\n    print(n)\n    print(answer)\n    return answer\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n&(~n)\n    d=d&1\n    return (n|(d<<32))&n\ndef rotate_left(n,d):\n    '''\n    Write a function that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return rotate_left(n,d<<32)\ndef run():\n    n=2048\n    print(rotate_left(n,5))\nrun()"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        print(\"Please input a different number\")\n        return\n    if d >= 32:\n        print(\"Please input a number less than 32\")\n        return\n    #print(n)\n    s = bin(n)[2:]\n    s = '0'*(32-len(s)) + s\n    print(s)\n    #print(bin(n)[2:])\n    print(\"Rotating a bit by\",d,\"bits\")\n    for i in range(d):\n        n = n<<1\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90\n    # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def left_rotate2(n,d):\n        arr = ''\n        j = 0\n        while j<n:\n            #print(d)\n            arr += str(bin(n & d)[2:])\n            arr += '0' if n & d == 0 else '1'\n            n = n >> 1\n            #print(arr)\n            j += 1\n        #print(arr)\n        return int(arr, 2)\n    return left_rotate2(n,d)\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def right_rotate2(n,d):\n        arr = ''\n        j = 0\n        while j<n:\n            arr += str(bin(n & d)[2:])\n            arr += '0' if n & d == 0 else '1'\n            n = n >> 1\n            #print(arr)\n            j += 1\n        #print(arr)\n        return int(arr, 2)\n    return right_rotate2(n,d)\ndef sub_n(n):\n    n=0\n    while n<=100:\n        n+=1\n        if n%2==0:\n            return n-1\n    return n-1\ndef mod_n(n):\n    n=0\n    while n<=1000:\n        n+=1\n        if n%2==0:\n            return n\n    return n-1\ndef get_key(msg):\n    #first round\n    #2**32 - 1\n    enc_key = ''\n    for i in range(0,len(msg)//2):\n        #for j in range(len(msg)//2, len(msg)):\n        enc_key += str(right_rotate(msg[i][0]*2**32 - 1, msg[i][1]))\n    #for j in range(len(msg)//2, len(msg)):\n    enc_key += str(right_rotate2(msg[i][0]*2**32 - 1, msg[i][1]))\n    return enc_key\ndef shift_right(msg):\n    new_msg = ''\n    for i in range(len(msg)):\n        new_msg += str(msg[i][0])\n    return new_msg\ndef shift_left(msg):\n    new_msg = ''\n    for i in range(len(msg)):\n        new_msg += str(msg[i][1])\n    return new_msg\ndef get_pkcs7_data(msg):\n    #generate a random key\n    key = get_key(msg)\n    #generate a random data\n    data = ''\n    for i in range(len(msg)):\n        data += str(msg[i][0])\n    return key, data\ndef pad_msg(msg):\n    #the padding does not require any bit\n    if len(msg)%8!=0:\n        msg += '0'*(8-len(msg)%8)\n    return msg\ndef unpad_msg(msg):\n    return ''.join([chr(int('0b'+msg[i:i+8],2)) for i in range(0,len(msg),8)])"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n_2 = n << d\n    if n_2 & (1 << d):\n        n_2 = n_2 ^ 1\n    return n_2\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    i=n%d\n    n=(n-i)%d\n    n=(n-n)%d\n    return n\n    "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    t = n>>d & 0xF\n    n = (n & 0xF) | (t<<(d&(-d)))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(\"number\",n,\"and the rotate left bits will be\",d)\n    print(\"the size of the array\",len(n))\n    left_rotated_array = n[::-1]\n    print(left_rotated_array)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ', '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[\\s]+','', text)\ndef remove_all_tabs(text):\n    '''\n    Write a function to remove all tabs from a string.\n    '''\n    return re.sub(r'\\t+','', text)\ndef remove_all_hyphens(text):\n    '''\n    Write a function to remove all hyphens from a string.\n    '''\n    return re.sub(r'-','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(filter(lambda x: x.isspace(), text.split()))\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text_no_spaces = re.sub(' +','', text)\n    return text_no_spaces\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return text.translate(str.maketrans('', '', string.punctuation))\ndef remove_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    stopwords_file = open('stopwords.txt', 'r')\n    stopwords = stopwords_file.read().split('\\n')\n    return text.translate(str.maketrans('', '', stopwords))\ndef extract_numbers(text):\n    '''\n    Write a function to extract all numbers from a string.\n    '''\n    regex = r\"\\d+\"\n    numbers = re.findall(regex, text)\n    return numbers\ndef extract_words(text):\n    '''\n    Write a function to extract all words from a string.\n    '''\n    regex = r\"\\w+\"\n    words = re.findall(regex, text)\n    return words\ndef remove_digit_numbers(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    regex = r\"\\d\"\n    digits = re.findall(regex, text)\n    return digits\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    text = remove_punctuation(text)\n    text = re.sub(r'\\W', '', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    stopwords_file = open('stopwords.txt', 'r')\n    stopwords = stopwords_file.read().split('\\n')\n    text = remove_stopwords(text)\n    text = remove_all_spaces(text)\n    text = remove_punctuation(text)\n    text = text.lower()\n    return text\ndef calculate_hamming_distance(seq1, seq2):\n    '''\n    Write a function to calculate the Hamming distance of two sequences.\n    '''\n    len1 = len(seq1)\n    len2 = len(seq2)\n    \n    if len1 == len2:\n        distances = 0\n        for i in range(len1):\n            if seq1[i]!= seq2[i]:\n                distances += 1\n        return distances\n    else:\n        return 0\ndef calculate_cosine_similarity(seq1, seq2):\n    '''\n    Write a function to calculate the cosine similarity of two sequences.\n    '''\n    len1 = len(seq1)\n    len2 = len(seq2)\n    if len1 == len2:\n        cosine_sim = 0\n        for i in range(len1):\n            for j in range(i + 1, len1):\n                cosine_sim += (seq1[i] * seq2[j]) / (math.sqrt(math.pow(seq1[i] * seq2[j], 2) + 1) * math.sqrt(math.pow(seq1[j] * seq2[i], 2) + 1))\n        return cosine_sim\n    else:\n        return 0\ndef convert_to_alphabet_frequency(text):\n    '''\n    Write a function to convert a string of words to an alphabet frequency.\n    '''\n    alphabet = set(text)\n    alphabet = sorted(alphabet)\n    alphabet_frequency = {}\n    for letter in alphabet:\n        alphabet_frequency[letter] = text.count(letter)\n    return alphabet_frequency\ndef merge_sort(list):\n    '''\n    Write a function to sort a list.\n    '''\n    if len(list) <= 1:\n        return list\n    mid = len(list) // 2\n    left_list = list[:mid]\n    right_list = list[mid:]\n    left_list = merge_sort(left_list)\n    right_list = merge_sort(right_list)\n    return merge(left_list, right_list)\ndef merge(left_list, right_list):\n    '''\n    Write a function to merge a list of two sorted lists.\n    '''\n    left_index = 0\n    right_index = 0\n    left_index_count = 0\n    right_index_count = 0\n    result = []\n    while left_index < len(left_list) and right_index < len(right_list):\n        if left_list[left_index] <= right_list[right_index]:\n            result.append(left_list[left_index])\n            left_index += 1\n        else:\n            result.append(right_list[right_index])\n            right_index += 1\n        left_index_count += 1\n        right_index_count += 1\n    if left_index < len(left_list):\n        result += left_list[left_index:]\n    if right_index < len(right_list):\n        result += right_list[right_index:]\n    return result\ndef partition(list, low, high):\n    '''\n    Write a function to partition a list.\n    '''\n    i = (low - 1)\n    pivot = list[high]\n    for j in range(low, high):\n        if list[j] < pivot:\n            i += 1\n            list[i], list[j] = list[j], list[i]\n    list[i + 1], list[high] = list[high], list[i + 1]\n    return i + 1\ndef merge_sort(list):\n    '''\n    Write a function to sort a list of lists.\n    '''\n    if len(list) <= 1:\n        return list\n    mid = len(list) // 2\n    left_list = list[:mid]\n    right_list = list[mid:]\n    left_list = merge_sort(left_list)\n    right_list = merge_sort(right_list)\n    return merge(left_list, right_list)\ndef merge(left_list, right_list):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    if len(left_list) < len(right_list):\n        left_list += right_list\n    else:\n        right_list += left_list\n    return left_list + right_list\ndef tokenize(text):\n    '''\n    Write a function to tokenize a string.\n    '''\n    tokens = []\n    regex = r'\\w+'\n    pattern = re.compile(regex)\n    tokens = pattern.findall(text)\n    return tokens\ndef convert_to_alphabet_letter(text):\n    '''\n    Write a function to convert a string of words to an alphabet letter.\n    '''\n    letters = set(text)\n    alphabet = set(chr(i + 65) for i in range(97, 123))\n    return alphabet & letters\ndef count_frequency(text, frequency_dict):\n    '''\n    Write a function to count the number of occurances of each letter in a string.\n    '''\n    if type(text)!= str:\n        raise TypeError(\"You must pass a string.\")\n    elif type(frequency_dict)!= dict:\n        raise TypeError(\"You must pass a dictionary.\")\n    elif type(frequency_dict)!= dict:\n        raise TypeError(\"The dictionary must be a dictionary.\")\n    elif type(text) == str:\n        for letter in text:\n            if letter in frequency_dict:\n                frequency_dict[letter] += 1\n            else:\n                frequency_dict[letter] = 1\n    else:\n        raise TypeError(\"You must pass a string.\")\n    return frequency_dict\ndef frequency_count(text, frequency_dict):\n    '''\n    Write a function to count the number of occurances of each letter in a string.\n    '''\n    if type(text)!= str:\n        raise TypeError(\"You must pass a string.\")\n    elif type(frequency_dict)!= dict:\n        raise TypeError(\"You must pass a dictionary.\")\n    elif type(frequency_dict)!= dict:\n        raise TypeError(\"The dictionary mus"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('^ +','',text)\n    \ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'\\d+','',text)\n    \ndef convert_to_lower(text):\n    '''\n    Write a function to convert a string to lowercase.\n    '''\n    return text.lower()\n    \ndef check_password(password):\n    '''\n    Write a function to check the password provided.\n    '''\n    if len(password) < 8:\n        return \"Your password must be at least 8 characters long.\"\n    \n    if not any(c.isdigit() for c in password):\n        return \"Your password must contain at least one number.\"\n        \n    if not any(c.isupper() for c in password):\n        return \"Your password must contain at least one uppercase character.\"\n        \n    if not any(c.islower() for c in password):\n        return \"Your password must contain at least one lowercase character.\"\n        \n    return None\n        \ndef list_of_valid_passwords(file_path):\n    '''\n    Write a function to read a file and return a list of all of the passwords in it.\n    '''\n    text = open(file_path).read()\n    \n    data = remove_all_spaces(text)\n    data = remove_all_numbers(data)\n    data = convert_to_lower(data)\n    \n    return data.split()\n    \ndef remove_duplicates(list):\n    '''\n    Write a function to remove any duplicate entries from the list.\n    '''\n    return list\n    \ndef list_of_valid_passwords_and_remaining_passwords(file_path):\n    '''\n    Write a function to read a file and return a list of all of the passwords in it, and a list of the remaining passwords.\n    '''\n    \n    text = open(file_path).read()\n    \n    data = remove_all_spaces(text)\n    data = remove_all_numbers(data)\n    data = convert_to_lower(data)\n    \n    data_list = remove_duplicates(data.split())\n    \n    return data_list, data.split()\n    \ndef get_number_of_required_passwords(list):\n    '''\n    Write a function to return the number of passwords that need to be passed.\n    '''\n    \n    return len(list)\n    \ndef get_passwords_with_a_random_password(num_passwords):\n    '''\n    Write a function to return a random password from the list of all possible passwords.\n    '''\n    passwords = []\n    \n    for i in range(num_passwords):\n        random_password = remove_all_numbers(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n    \n    return passwords\n    \ndef get_passwords_with_a_passport_and_a_random_password(num_passwords):\n    '''\n    Write a function to return a random password from the list of all possible passwords and a random password.\n    '''\n    passwords = []\n    \n    for i in range(num_passwords):\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_numbers(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        \n    return passwords\n    \ndef get_passwords_with_a_passport(num_passwords):\n    '''\n    Write a function to return a random password from the list of all possible passwords and a random password.\n    '''\n    passwords = []\n    \n    for i in range(num_passwords):\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_numbers(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        \n    return passwords\n    \ndef get_passwords_with_a_passport_and_a_random_password(num_passwords):\n    '''\n    Write a function to return a random password from the list of all possible passwords and a random password.\n    '''\n    passwords = []\n    \n    for i in range(num_passwords):\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_numbers(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        \n    return passwords\n    \ndef get_passwords_with_a_passport_and_a_random_password_and_a_remaining_passwords(num_passwords):\n    '''\n    Write a function to return a random password from the list of all possible passwords and a random password.\n    '''\n    passwords = []\n    \n    for i in range(num_passwords):\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_numbers(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        \n        passwords = remove_duplicates(passwords)\n        \n    return passwords\n    \ndef get_passwords_with_a_passport_and_a_random_password_and_a_remaining_passwords_with_a_passport(num_passwords):\n    '''\n    Write a function to return a random password from the list of all possible passwords and a random password.\n    '''\n    passwords = []\n    \n    for i in range(num_passwords):\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_numbers(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        \n        random_password = remove_duplicates(passwords)\n        \n    return passwords\n    \ndef get_passwords_with_a_passport_and_a_random_password_and_a_remaining_passwords_with_a_passport(num_passwords):\n    '''\n    Write a function to return a random password from the list of all possible passwords and a random password.\n    '''\n    passwords = []\n    \n    for i in range(num_passwords):\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_numbers(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        random_password = remove_all_spaces(random.choice(list_of_valid_passwords('passwords.txt')))\n        passwords.append(random_password)\n        \n        random_password = remove_duplicates(passwords)\n        \n    return passwords\n    \ndef get_passwords_with_a_passport_and_a_random_password_and_a_remaining_passwords_with_a_passport(num_passwords):\n    '''"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #print('started remove_all_spaces')\n    n_s = re.compile(r'\\s+')\n    for i in range(len(text)):\n        #print(text[i])\n        text[i] = n_s.sub(' ', text[i])\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = x*x\n    y = y*y\n    z = z*z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #pass\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # count the number of equal numbers\n    result=0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                if x[i]==y[j]==z[k]:\n                    result+=1\n    return result"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    d = {}\n    d[x]=1\n    d[y]=1\n    d[z]=1\n    n = 0\n    for i in d:\n        if d[i] == 1:\n            n +=1\n    print(n)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_c=0\n    y_c=0\n    z_c=0\n    \n    if x==y==z:\n        x_c+=1\n    elif x==z==y:\n        y_c+=1\n    else:\n        z_c+=1\n    \n    return [x_c,y_c,z_c]\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    if x==y==z==0:\n        result = 1\n    elif x==0:\n        result = 0\n    elif y==0:\n        result = 0\n    else:\n        result = 3\n    print(result)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x)\n    print(y)\n    print(z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert(len(x) == len(y))\n    assert(len(x) == len(z))\n    assert(x == y)\n    assert(x == z)\n    assert(x.count(x[0]) == x.count(x[1]))\n    assert(x.count(x[2]) == x.count(x[3]))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # your code here\n    a=0\n    b=0\n    c=0\n    d=0\n    for i in range(3):\n        if x==y==z:\n            a+=1\n        if x==z==y:\n            b+=1\n        if y==z==x:\n            c+=1\n        if y==z==x:\n            d+=1\n    print(a,b,c,d)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    def sum_equal(x,y,z):\n        if(x+y+z==0):\n            return 0\n        if(x+y+z==x+y+z):\n            return 1\n        if(x+y+z==x+z+y+z):\n            return 2\n        if(x+y+z==x-y-z):\n            return 3\n        if(x+y+z==x*y*z):\n            return 4\n    x=x+y\n    y=y+z\n    z=z+x+y\n    if(x>y):\n        if(z>x):\n            if(z==x+y):\n                return sum_equal(x,y,z)\n            elif(z==x+y+z):\n                return sum_equal(x,y,z)\n            elif(z==x-y-z):\n                return sum_equal(x,y,z)\n            elif(z==x*y*z):\n                return sum_equal(x,y,z)\n            else:\n                return 0\n        elif(z>x+y):\n            if(z==x+y+z):\n                return sum_equal(x,y,z)\n            elif(z==x+y*z):\n                return sum_equal(x,y,z)\n            elif(z==x-y-z):\n                return sum_equal(x,y,z)\n            elif(z==x*y*z):\n                return sum_equal(x,y,z)\n            else:\n                return 0\n        else:\n            return 0\n    elif(x<y):\n        if(z>x):\n            if(z==x+y):\n                return sum_equal(x,y,z)\n            elif(z==x+y+z):\n                return sum_equal(x,y,z)\n            elif(z==x-y-z):\n                return sum_equal(x,y,z)\n            elif(z==x*y*z):\n                return sum_equal(x,y,z)\n            else:\n                return 0\n        elif(z>x+y):\n            if(z==x+y*z):\n                return sum_equal(x,y,z)\n            elif(z==x+y*z):\n                return sum_equal(x,y,z)\n            elif(z==x-y-z):\n                return sum_equal(x,y,z)\n            elif(z==x*y*z):\n                return sum_equal(x,y,z)\n            else:\n                return 0\n        else:\n            return 0\n    elif(x==y):\n        return sum_equal(x,y,z)\n    else:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        count += arr[len(arr) - i - 1]\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr_sorted = arr[:]\n    for i in range(len(arr_sorted)):\n        arr_sorted[i] = arr_sorted[i+1]\n        arr_sorted[i+1] = arr_sorted[i]\n    \n    count = 0\n    arr_sorted_count = []\n    for i in range(len(arr_sorted)):\n        count += 1\n        arr_sorted_count.append(count)\n    \n    arr_sorted_count.reverse()\n    \n    return arr_sorted_count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotations(arr, n):\n        count = 0\n        for i in range(n):\n            count += arr[i]\n        return count\n    return count_rotations(arr, len(arr))\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n            count += 1\n            arr[i] = -arr[i]\n    return count\n    \n    \ndef count_rotations(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n            if arr[i] < arr[i - 1]:\n                count += 1\n                arr[i] = arr[i - 1]\n                arr[i - 1] = -arr[i - 1]\n    return count\n    \n    \ndef count_rotations(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n            if arr[i] < arr[i - 1]:\n                arr[i] = arr[i - 1]\n                arr[i - 1] = -arr[i - 1]\n            else:\n                arr[i] = -arr[i - 1]\n                arr[i - 1] = arr[i - 1]\n    return count\n    \n    \ndef count_rotations_2(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    if len(arr) <= 1:\n        return count\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = -arr[i + 1]\n    arr[len(arr) - 1] = -arr[len(arr) - 1]\n    arr[len(arr) - 2] = arr[len(arr) - 2]\n    return count\n    \n    \ndef count_rotations_3(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    if len(arr) <= 1:\n        return count\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = -arr[i + 1]\n    arr[len(arr) - 1] = -arr[len(arr) - 1]\n    arr[len(arr) - 2] = arr[len(arr) - 2]\n    arr[len(arr) - 3] = -arr[len(arr) - 3]\n    return count\n    \n    \ndef count_rotations_4(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    if len(arr) <= 1:\n        return count\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = -arr[i + 1]\n    arr[len(arr) - 1] = -arr[len(arr) - 1]\n    arr[len(arr) - 2] = arr[len(arr) - 2]\n    arr[len(arr) - 3] = -arr[len(arr) - 3]\n    arr[len(arr) - 4] = arr[len(arr) - 4]\n    return count\n    \n    \ndef count_rotations_5(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    if len(arr) <= 1:\n        return count\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = -arr[i + 1]\n    arr[len(arr) - 1] = -arr[len(arr) - 1]\n    arr[len(arr) - 2] = arr[len(arr) - 2]\n    arr[len(arr) - 3] = -arr[len(arr) - 3]\n    arr[len(arr) - 4] = arr[len(arr) - 4]\n    arr[len(arr) - 5] = -arr[len(arr) - 5]\n    return count\n    \n    \ndef count_rotations_6(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = -arr[i + 1]\n    arr[len(arr) - 1] = -arr[len(arr) - 1]\n    arr[len(arr) - 2] = arr[len(arr) - 2]\n    arr[len(arr) - 3] = -arr[len(arr) - 3]\n    arr[len(arr) - 4] = arr[len(arr) - 4]\n    arr[len(arr) - 5] = -arr[len(arr) - 5]\n    arr[len(arr) - 6] = arr[len(arr) - 6]\n    return count\n    \n    \ndef count_rotations_7(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = -arr[i + 1]\n    arr[len(arr) - 1] = -arr[len(arr) - 1]\n    arr[len(arr) - 2] = arr[len(arr) - 2]\n    arr[len(arr) - 3] = -arr[len(arr) - 3]\n    arr[len(arr) - 4] = arr[len(arr) - 4]\n    arr[len(arr) - 5] = -arr[len(arr) - 5]\n    arr[len(arr) - 6] = arr[len(arr) - 6]\n    arr[len(arr) - 7] = -arr[len(arr) - 7]\n    return count\n    \n    \ndef count_rotations_8(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-require"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                count += 1\n                break\n    return count\n    "
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) <= 1:\n        return 1\n    else:\n        return count_rotation(arr[:len(arr)//2]) + count_rotation(arr[len(arr)//2:])\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    i = 0\n    j = n - 1\n    count = 0\n    while i <= j:\n        if arr[i] > arr[j]:\n            i+=1\n        elif arr[i] < arr[j]:\n            j-=1\n        else:\n            count+=1\n            i+=1\n            j-=1\n    return count\narr = [1,2,3,4,5,6,7,8,9]"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        ans = 0\n        left = 0\n        right = 0\n        while left < n:\n            if arr[left] > arr[right]:\n                ans += right - left\n                right += 1\n            else:\n                ans += right - left - 1\n            left += 1\n        return ans\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    sorted_array = sorted(arr)\n    start = 0\n    for end in range(len(arr)):\n        if end <= start:\n            count += 1\n            continue\n        else:\n            if sorted_array[end] < sorted_array[start]:\n                count += 1\n                start = end + 1\n            else:\n                count += 1\n                start = start - 1\n    return count \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if (n == 1) :\n        return (n == 1)\n    while (n % 2 == 0) :\n        n = n / 2\n    return (n == 1) or (n == 3) or (n == 5) or (n == 7) or (n == 11) or (n == 13) or (n == 17) or (n == 19) or (n == 23) or (n == 29) or (n == 31) or (n == 37) or (n == 41) or (n == 43) or (n == 47) or (n == 53) or (n == 59) or (n == 61) or (n == 67) or (n == 71) or (n == 73) or (n == 79) or (n == 83) or (n == 89) or (n == 97) or (n == 101) or (n == 103) or (n == 109) or (n == 113) or (n == 119) or (n == 121) or (n == 127) or (n == 131) or (n == 137) or (n == 139) or (n == 143) or (n == 149) or (n == 151) or (n == 157) or (n == 161) or (n == 167) or (n == 173) or (n == 179) or (n == 181) or (n == 191) or (n == 199) or (n == 211) or (n == 223) or (n == 227) or (n == 229) or (n == 233) or (n == 239) or (n == 241) or (n == 251) or (n == 257) or (n == 263) or (n == 269) or (n == 271) or (n == 277) or (n == 281) or (n == 283) or (n == 293) or (n == 307) or (n == 311) or (n == 313) or (n == 317) or (n == 331) or (n == 337) or (n == 349) or (n == 353) or (n == 359) or (n == 367) or (n == 373) or (n == 379) or (n == 383) or (n == 389) or (n == 397) or (n == 401) or (n == 409) or (n == 413) or (n == 437) or (n == 449) or (n == 461) or (n == 463) or (n == 469) or (n == 471) or (n == 477) or (n == 479) or (n == 491) or (n == 497) or (n == 499) or (n == 503) or (n == 511) or (n == 523) or (n == 537) or (n == 541) or (n == 543) or (n == 549) or (n == 551) or (n == 563) or (n == 569) or (n == 573) or (n == 579) or (n == 591) or (n == 601) or (n == 607) or (n == 613) or (n == 617) or (n == 619) or (n == 623) or (n == 629) or (n == 631) or (n == 637) or (n == 641) or (n == 647) or (n == 653) or (n == 659) or (n == 661) or (n == 673) or (n == 679) or (n == 691) or (n == 697) or (n == 703) or (n == 711) or (n == 723) or (n == 729) or (n == 737) or (n == 741) or (n == 751) or (n == 763) or (n == 769) or (n == 773) or (n == 781) or (n == 793) or (n == 801) or (n == 813) or (n == 831) or (n == 843) or (n == 847) or (n == 861) or (n == 873) or (n == 879) or (n == 891) or (n == 903) or (n == 911) or (n == 923) or (n == 929) or (n == 931) or (n == 937) or (n == 941) or (n == 953) or (n == 961) or (n == 973) or (n == 979) or (n == 991) or (n == 1009) or (n == 1021) or (n == 1031) or (n == 1043) or (n == 1049) or (n == 1051) or (n == 1061) or (n == 1073) or (n == 1081) or (n == 1093) or (n == 1111) or (n == 1117) or (n == 1131) or (n == 1137) or (n == 1149) or (n == 1151) or (n == 1161) or (n == 1173) or (n == 1179) or (n == 1191) or (n == 1201) or (n == 1213) or (n == 1231) or (n == 1237) or (n == 1249) or (n == 1251) or (n == 1261) or (n == 1273) or (n == 1279) or (n == 1291) or (n == 1301) or (n == 1313) or (n == 1331) or (n == 1337) or (n == 1349) or (n == 1351) or (n == 1361) or (n == 1373) or (n == 1379) or (n == 1391) :\n            return False\n        n = n * 2\n    return True\n    "
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #is_square = n < 5\n    #if is_square :\n    #    return True\n    #elif n < 15 :\n    #    return False\n    #else :\n    #    for i in range (1, n) :\n    #        if n % i == 0 :\n    #            return False\n    #    return True\n    \n    if n < 15 :\n        return False\n    else :\n        for i in range (1, int(sqrt(n))+1) :\n            if n % i == 0 :\n                return False\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n == 1:\n    #     return True\n    # elif n == 0:\n    #     return False\n    # elif n < 0:\n    #     return False\n    \n    mod = 10**9+7\n    if n<0 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0) :\n        return True\n    if (n < 0) :\n        return False\n    for i in range(n) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n % 2 == 0) :\n        return False\n    else :\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return False\n    \n    if n == 1 :\n        return True\n    \n    if n % 2 == 0 :\n        return False\n    \n    #calculate the number of multiples\n    m = 3\n    while m * m <= n :\n        if n % m == 0 :\n            return False\n        m += 2\n    \n    return True\n    \n    \ndef sum_of_squares(n) :\n    '''\n    Write a function which returns the sum of all squares in the range 1.. n.\n    '''\n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if n % 2 == 0 :\n        return sum_of_squares(n/2)\n    \n    return n*n + sum_of_squares(n-1)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 2 :\n        return True\n    elif n < 0 or n % 2 == 0 :\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == n):\n        return True\n    elif (n % 2 == 0):\n        return False\n    else :\n        i = 3\n        while (i * i <= n):\n            if (n % i == 0):\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    temp = n\n    if temp > 0 :\n        while temp > 0 :\n            if temp % 10 == 0 :\n                break\n            temp //= 10\n        if temp == 1 :\n            return True\n        else :\n            return False\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n**0.5 == int(n**0.5)) and ((n**0.5) % 1 == 0)\n    \nn = 4\nprint(is_perfect_square(n))\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0:\n        return False\n    return True if arr[0]%2==0 else False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # get odd numbers from 1 to n\n    odd_numbers = []\n    for i in range(1, len(arr)):\n        if (arr[i] % 2)!= 0:\n            odd_numbers.append(arr[i])\n    return len(odd_numbers) == 0\n    # compare odd numbers with the first element \n    # if odd number in second list, then there are odd numbers in the first list\n    # if odd number in first list, then there are odd numbers in the second list\n    # else, there are no odd numbers in the first or second list\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    if sum%2 == 0:\n        return True\n    else:\n        return False\ndef find_products_of_divisors(n):\n    '''\n    Given a number n, return all the products of n, divisible by each digit of n.\n    '''\n    lst = []\n    for i in range(1,int(n**(1/2)) + 1):\n        if n % i == 0:\n            lst.append(i)\n    if n!= 1 and n!= 0:\n        lst.append(1)\n    return lst\ndef find_products_of_divisors_2(n):\n    '''\n    Given a number n, return all the products of n, divisible by each digit of n.\n    '''\n    lst = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            lst.append(i)\n    if n!= 1 and n!= 0:\n        lst.append(1)\n    return lst\ndef check_if_anagram(word1, word2):\n    '''\n    Given two words, check if they are anagrams of each other.\n    '''\n    return sorted(word1) == sorted(word2)\ndef find_word_substring(text, word):\n    '''\n    Given a string, find the longest substring in it with respect to the given word.\n    '''\n    lens = [len(word) for word in text.split(' ')]\n    substring = max(lens)\n    return text[:substring].count(word)\ndef contains_duplicate(arr):\n    '''\n    Given an array, return true if there exists a duplicate in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            return True\n    return False\ndef find_repeated_letter(text):\n    '''\n    Given a string, find all the repeating letters.\n    '''\n    lens = [len(word) for word in text.split(' ')]\n    freq = {}\n    for i in range(len(lens)):\n        if lens[i] in freq:\n            freq[lens[i]] += 1\n        else:\n            freq[lens[i]] = 1\n    return [k for k, v in sorted(freq.items()) if v == 1]\ndef remove_all(lst, val):\n    '''\n    Given a list of elements, remove all occurrences of a given value in the list.\n    '''\n    for i in range(len(lst)):\n        lst[i] = None\n    return lst\ndef find_lcs(s1,s2):\n    '''\n    Given two strings s1 and s2, return the longest common subsequence(lcs) of s1 and s2.\n    '''\n    if len(s1) < len(s2):\n        s1,s2 = s2,s1\n    \n    lcs = [[0]*(len(s2)+1) for i in range(len(s1)+1)]\n    for i in range(1,len(s1)+1):\n        for j in range(1,len(s2)+1):\n            if s1[i-1] == s2[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i-1][j],lcs[i][j-1])\n    return s1[lcs[len(s1)][-1] :]\ndef find_longest_palindrome(s):\n    '''\n    Given a string, find the longest palindrome in it.\n    '''\n    lens = []\n    for i in range(len(s)):\n        j = i\n        k = len(s) - 1\n        while j < k:\n            if s[j] == s[k]:\n                lens.append(j)\n                j += 1\n                k -= 1\n            else:\n                j = lens[-1]\n                k = k - 1\n    return s[lens[0] : lens[-1]]\ndef sub_sequence_proper(word1, word2):\n    '''\n    Given two words, return a list of all subsequences of the word1 that appear in the word2.\n    '''\n    return [word for word in [word1, word2] if word in word2]\ndef find_subsequence(string):\n    '''\n    Given a string, return a list of all subsequences of the string.\n    '''\n    lens = []\n    for i in range(len(string)):\n        if string[i] in string[i+1 :]:\n            lens.append(string[i : i+2])\n        else:\n            lens.append([string[i]])\n    return lens\ndef find_word_subsequence(text, word):\n    '''\n    Given a string and a word, return a list of all subsequences of the word in the string.\n    '''\n    lens = []\n    for i in range(len(text)):\n        if text[i] == word:\n            lens.append([text[i:i+len(word)]])\n        if text[i] == word[0] and text[i+1] == word[1]:\n            lens.append([text[i:i+len(word)]])\n    return lens\ndef print_matrix(m):\n    '''\n    Given an m x n matrix, print it in a rectangular matrix.\n    '''\n    n = len(m)\n    for i in range(n):\n        for j in range(n):\n            print(m[i][j], end ='')\n        print()\ndef print_grid(grid):\n    '''\n    Given an n x n 2D grid, print it in a rectangular grid.\n    '''\n    m = len(grid)\n    n = len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            print(grid[i][j], end ='')\n        print()\ndef is_valid(m, n, grid):\n    '''\n    Given a n x n 2D grid, return True if it is valid to move through each of the grid's cells.\n    '''\n    m = len(grid)\n    n = len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]!= 0:\n                return False\n    return True\ndef is_valid_v1(m, n, grid):\n    '''\n    Given a n x n 2D grid, return True if it is valid to move through each of the grid's cells.\n    '''\n    m = len(grid)\n    n = len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 0:\n                return False\n    return True\ndef is_valid_v2(m, n, grid):\n    '''\n    Given a n x n 2D grid, return True if it is valid to move through each of the grid's cells.\n    '''\n    m = len(grid)\n    n = len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 0:\n                return False\n    return True\ndef is_valid_v3(m, n, grid):\n    '''\n    Given a n x n 2D grid, return True if it is valid to move through each of the grid's cells.\n    '''\n    m = len(grid)\n    n = len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 0:\n                return False\n    return True\ndef is_valid_v4(m, n, grid):\n    '''\n    Given a n x n 2D grid, return True if it is valid to move through each of the grid's cells.\n    '''\n    m = len(grid"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(0,len(arr)): \n        count=0\n        for j in range(0,len(arr[i])): \n            count+=arr[i][j]\n        if count%2!=0: \n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product=1\n    for i in arr:\n        product=product*i\n    if product%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    l = [i for i in arr if i % 2 == 0]\n    \n    return l == []\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Iterate through all numbers in a list\n    for i in range(len(arr)): \n        # For each number in the list, \n        # Check if it is even or not\n        # If it is, multiply it by 2\n        # Check if it is even or not\n        if arr[i]%2==0: \n            arr[i] = arr[i]*2\n        if arr[i]%2!=0: \n            arr[i] = arr[i]*2\n    # Check if the product of all the numbers is odd\n    # If it is, return False\n    # Else, return True\n    for j in arr:\n        if j%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return len(arr) == 0 or all(arr[i] % 2 == 0 for i in range(len(arr)))\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for el in lists:\n        if sum(el) > max(max_list):\n            max_list = el\n    return max_list\n    \ndef max_sum_array(arr):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for el in arr:\n        if sum(el) > max(max_list):\n            max_list = el\n    return max_list\n    "
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in range(len(lists)):\n        if len(lists[i]) > 0:\n            max_sum.append(max(lists[i]))\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    max_sum = 0\n    for index, element in enumerate(lists):\n        sum = 0\n        for element2 in element:\n            sum += element2\n        if max_sum < sum:\n            max_sum = sum\n            result = [index]\n        elif sum == max_sum:\n            result.append(index)\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(0,len(lists)):\n        for j in range(i,len(lists)):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n    return max_sum\n    \n    "
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_num = max(lists[0])\n    for item in lists:\n        if max_num < sum(item):\n            max_num = sum(item)\n    return max_num\n    \ndef max_sublist(lists, left, right):\n    '''\n    Write a function that returns the sublist in a list of lists whose sum of elements is the highest.\n    '''\n    # if it's the first index\n    if left == right:\n        return lists[left]\n    # if it's the last index\n    elif left+1 == right:\n        return lists[left] + lists[right]\n    # if it's in the middle\n    elif left+1 <= right:\n        return lists[left] + max_sublist(lists, left+1, right)\n    # if it's in the middle, but not at the end\n    else:\n        return lists[left] + max_sublist(lists, left, right-1)\n    \ndef max_sum_sublist(lists):\n    '''\n    Write a function that returns the sublist in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sublist(lists, 0, len(lists)-1)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n    highest_sum = []\n    for i in lists:\n        for j in i:\n            if j not in highest_sum:\n                highest_sum.append(j)\n    return highest_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # we use a helper method to create a list of lists of the same size\n    # and add the elements of the lists together\n    # to be the largest value of the list of lists\n    \n    # use a for loop to iterate through the list of lists and add elements of lists to the end of the list\n    # an array is maintained by reversing the list of lists\n    # the loop will continue until the index of the last element in the list is reached\n    \n    # return the list\n    \n    # example:\n    # input = [[4, 6, 2, 7, 9, 5], [3, 1, 3, 2, 3, 5, 8, 7], [4, 7, 8, 9]]\n    # output = [3, 3, 4, 4, 3, 3, 5, 5, 8, 7, 8, 9, 9, 7]\n    \n    # input = [[4, 6, 2, 7, 9, 5], [3, 1, 3, 2, 3, 5, 8, 7], [4, 7, 8, 9]]\n    # output = [3, 3, 4, 5, 7, 9, 9, 7, 8, 9, 9]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=lambda x: x[0])\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for i in range(len(lists[0])):\n        list_sum = 0\n        for j in range(len(lists)):\n            list_sum += lists[j][i]\n        if list_sum > max(max_sum_list):\n            max_sum_list = lists[j]\n    return max_sum_list\n    \n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in lists:\n        for j in i:\n            if j > max_list[-1]:\n                max_list.append(j)\n    print(max_list)\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def remove_all_special_char(test_str):\n        return test_str.replace('_', '')\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Write your code here\n    return\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    length = len(test_str)\n    max_run = 0\n    for i in range(length):\n        for j in range(i,length):\n            if test_str[i].isupper() and test_str[j].isupper():\n                if max_run < j - i + 1:\n                    max_run = j - i + 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == '':\n        return 0\n    \n    if test_str[0].isupper():\n        return 1\n    \n    return max(\n        max_run_uppercase(test_str[1:]),\n        max_run_uppercase(test_str[0].upper() + test_str[1:])\n    )\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Your code here\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Your code here\n    return max(max(list(map(str.isupper,test_str)),key=len),key=len)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upp = 0\n    if len(test_str) <= 1:\n        return test_str\n    for char in test_str:\n        if char.isupper():\n            if char.isupper():\n                if char.islower() and not char.isupper():\n                    if char.isupper():\n                        max_upp = max(max_upp, len(char.lower()))\n            else:\n                if char.islower() and not char.isupper():\n                    if char.islower() and char.isupper():\n                        max_upp = max(max_upp, len(char.lower()))\n        else:\n            if char.islower():\n                if char.islower() and char.isupper():\n                    max_upp = max(max_upp, len(char.lower()))\n    return max_upp\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(ord(i) for i in test_str if i.isupper())\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    result_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            result += 1\n            result_count += 1\n            if result > result_count:\n                result_count = result\n    return result_count\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    def is_odd(x):\n        '''\n        This function checks if the input is even or odd.\n        '''\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return -1\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0]\n        \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return -1\n    elif len(nums) == 1:\n        return nums[1]\n    else:\n        return nums[1]\n        \ndef third_odd(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return -1\n    elif len(nums) == 1:\n        return nums[2]\n    else:\n        return nums[2]\n        \ndef fourth_odd(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return -1\n    elif len(nums) == 1:\n        return nums[3]\n    else:\n        return nums[3]\n    \ndef fifth_odd(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return -1\n    elif len(nums) == 1:\n        return nums[4]\n    else:\n        return nums[4]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    even = [x for x in nums if x % 2 == 0]\n    if len(even) > 0:\n        print(even[0])\n    else:\n        print('No odd numbers in the list')\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return (nums[0])\n    \n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    counter = 0\n    for num in nums:\n        if num % 2!= 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # O(n) time | O(1) space\n    # at each index, we find the first number and return it\n    # as the second element\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        mid = (start + end)//2\n        if nums[mid] % 2 == 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return nums[start]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    sum_of_squares=0\n    for i in nums:\n        sum_of_squares+=i*i\n    if sum_of_squares%2==1:\n        return nums[0]\n    else:\n        return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return 0 if nums[0] % 2 == 1 else nums[0]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    check_K_str = str(K)\n    \n    test_K_str = str(test_tup[0]) + \" \" + str(test_tup[1])\n    test_K_str = test_K_str.split(\" \")\n    test_K_str = test_K_str[0] + \" \" + test_K_str[1]\n    \n    if check_K_str == test_K_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Step 1: Check if the tuple is contained in the K\n    if any(len(t)!= K for t in test_tup):\n        return False\n    # Step 2: Check if the tuple contains all the elements within the range of 2^(K-1)\n    for k in range(K):\n        t = [t for t in test_tup if t[k] == k]\n        if len(t)!= K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i] not in test_tup[0:i]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    from collections import Counter\n    t = Counter(test_tup)\n    for k in K:\n        if t[k] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # I made this a function to save space\n    # this function is checking if the tuple contains the given number K.\n    # I will write a function that returns True if the tuple contains the given number K\n    # and return False otherwise\n    k_found = False\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            k_found = True\n    return k_found\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i == 'k':\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup_list = list(test_tup)\n    tup_list.sort()\n    return tup_list[-1] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #! Check if K contains the given tuples\n    if len(test_tup) < K:\n        return False\n    \n    #! Check if the tuple is not empty\n    if test_tup == []:\n        return True\n    \n    #! Check if the first element of the tuple is of the given type\n    if type(test_tup[0])!= type(K):\n        return False\n    \n    #! Check if the second element of the tuple is of the given type\n    if type(test_tup[1])!= type(K):\n        return False\n    \n    #! Check if the last element of the tuple is of the given type\n    if type(test_tup[-1])!= type(K):\n        return False\n    \n    #! Check if the tuple has elements of the given type\n    return all([type(i) == type(K) for i in test_tup])\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #first check if the element in second tuple is smaller\n    if test_tup2[1] < test_tup1[1]:\n        return False\n    #now check if the element in the first tuple is less than the element in the second tuple\n    if test_tup1[1] < test_tup2[1]:\n        return False\n    #if we are checking if the element in the second tuple is smaller than the element in the first tuple, return True\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return False\n    for index in range(len(test_tup2)):\n        if test_tup1[index] < test_tup2[index]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    small_tup = tuple()\n    for i in range(len(test_tup2)):\n        small_tup += (test_tup2[i],)\n    small_tup = tuple(small_tup)\n    return sorted(test_tup1) == sorted(small_tup)\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1_max = max(test_tup1)\n    tup2_max = max(test_tup2)\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # initialize an empty set to store the smallest element\n    smallest_set = set()\n    for element in test_tup2:\n        if element in test_tup1:\n            smallest_set.add(element)\n    # if two elements in the smallest set are the same, the function returns False\n    if smallest_set.issubset(test_tup1):\n        return False\n    # if two elements in the smallest set are not the same, the function returns True\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    result = test_tup1 == test_tup2\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    temp_tup1 = test_tup1[0]\n    temp_tup2 = test_tup2[0]\n    if temp_tup1 < temp_tup2:\n        return False\n    elif temp_tup2 < temp_tup1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # create empty list to save elements\n    smaller_list = []\n    # loop through elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            smaller_list.append(test_tup1[i])\n    # return a list with all elements smaller than the smallest element in the second tuple\n    return smaller_list\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # create new tuple to store all the elements\n    new_tup = tuple()\n"
    }
]