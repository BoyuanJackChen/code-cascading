[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return test_tup1[0] + test_tup2[0]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared.append(element)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = test_tup1[0]\n    b = test_tup2[0]\n    if a == b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for element in test_tup1:\n        if element in test_tup2:\n            test_tup2.remove(element)\n    return test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    common_elements = set(test_tup1) & set(test_tup2)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set()\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    n = len(test_tup1)\n    m = len(test_tup2)\n    s1 = set()\n    s2 = set()\n    for i in range(0, n):\n        s1.add(test_tup1[i])\n        s2.add(test_tup2[i])\n    return list(s1 & s2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    intersection = set(test_tup1).intersection(test_tup2)\n    return intersection\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create the list of the common elements\n    list1 = []\n    list2 = []\n    # Iterate through each list\n    for index in range(len(test_tup1)):\n        # If elements are found\n        if test_tup1[index] in test_tup2:\n            # Add them to list\n            list1.append(test_tup1[index])\n            list2.append(test_tup2[index])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup3 = test_tup1.intersection(test_tup2)\n    return test_tup3\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not(n % 2 == 0 or n % 3 == 0)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return n < 2 or (n % 2 == 0)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    divisors = []\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n    divisors = list(set(divisors))\n    return len(divisors)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to check for primality.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    for i in range(2,n//d+1):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_2(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_3(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_4(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_5(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_6(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_7(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(4,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_series_without_summation_8(n):\n    '''\n    Write a python function to check for the nth prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    d=3\n    while n%d == 0:\n        d+=2\n        n//=d\n    if n%2 == 0:\n        return False\n    if n%3 == 0:\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return True\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\ndef check_prime(n):\n    '''\n    Given a positive integer n, check if it is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\ndef is_prime(n):\n    '''\n    Given a positive integer n, check if it is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\ndef prime_check(n):\n    '''\n    Given a positive integer n, check if it is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\ndef is_prime_or_not(n):\n    '''\n    Given a positive integer n, check if it is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n==4:\n        return False\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%4==0:\n        return False\n    if n%5==0:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    elif n==2 or n==3:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    for _ in range(n-1):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # TODO: Write the code that goes with your function\n    return hq.nlargest(n, nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq_data = [(-val,i) for i,val in enumerate(nums)]\n    hq_data.sort(reverse=True)\n    return [item[1] for item in hq_data]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums_length = len(nums)\n    min_heap = []\n    heapq.heapify(min_heap)\n    for i in range(n):\n        if nums_length < n:\n            heapq.heappush(min_heap,nums[i])\n            nums_length += 1\n    return min_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    nums.sort(reverse=True)\n    for i in range(n):\n        heapq.heappush(heap,[-nums[i],nums[i]])\n    while(heap):\n        heapq.heappop(heap)\n    return -heap[0][1]\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums: return 0\n    heap = hq.heapify(nums)\n    length = len(nums)\n    for _ in range(length-1):\n        heapq.heappushpop(heap,heapq.heappop(heap)+heapq.heappop(heap))\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort(reverse=True)\n    print(nums)\n    return nums[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l = []\n    for i in range(n):\n        l.append(nums[i])\n    l.sort()\n    print(l)\n    hq.heapify(l)\n    print(hq.heappop(l))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # start with a random number\n    min_number = min(nums)\n    # put the number in the heap\n    hq.heapify(nums)\n    # iterate while the heap is not empty\n    while len(nums) > 0:\n        # get the first element of the heap\n        next_num = hq.heappop(nums)\n        # check if the next element is the minimum\n        if next_num < min_number:\n            # if so then move to the top of the heap\n            min_number = next_num\n        # put the next element of the heap to the top of the heap\n        hq.heappush(nums, next_num)\n    # return the elements in descending order\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    result = []\n    for j in range(n):\n        if not heapq.heappop(heap):\n            break\n        result.append(-heapq.heappop(heap))\n    return result\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    result = []\n    for j in range(n):\n        if not heapq.heappop(heap):\n            break\n        result.append(-heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # your code goes here\n    return (x & (x-1))!= 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2: \n        return False\n    elif x % 2 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2!= 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x > 0:\n        if x % 2!= 0:\n            return False\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x<2**32):\n        return False\n    else:\n        return True\n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        for i in range(1,x):\n            if x%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x=str(x)\n    if x[0] == x[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Code goes here\n    for i in range(0,len(x)):\n        if x[i] > 0:\n            x[i] = x[i] - 1\n        else:\n            x[i] = x[i] + 1\n    if x[0] == x[1]:\n        return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 10 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    '''\n    x: the number that is to be checked\n    \n    return True if x is greater than 1 and less than 2^32 and not equal to 0\n    \n    '''\n    if x < 0 or x > 2**32 or (x % 2 == 0 and x!= 0): \n        return False\n    else:\n        return True\n    \n    #raise NotImplementedError()\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = []\n    for i in text:\n        if len(i) >= 4:\n            char_long.append(i)\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    characters_long = []\n    for char in text:\n        if len(char) >= 4:\n            characters_long.append(char)\n    return characters_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_split = text.split()\n    word = ''\n    for i in range(len(text_split)):\n        if len(text_split[i]) >= 4:\n            word = word + text_split[i]\n    return word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in text.lower().split() if len(word) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = re.findall(r\"[a-zA-Z]+\", text)\n    for word in word_list:\n        if len(word) < 4:\n            print(word)\n    print('\\n')\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(\"[a-zA-Z]{4,}\", text)\n    for word in words:\n        if len(word) <= 4:\n            # print(\"Found: \" + word + \" with length of \" + str(len(word)))\n            yield word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    count = 0\n    word_list = []\n    for char in text:\n        if(len(char) >= 3):\n            count += 1\n            word_list.append(char)\n        else:\n            pass\n    return word_list, count\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('[a-zA-Z]+',text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_count = 0\n    output = []\n    for word in text.split():\n        if len(word) >= 3 and len(word) <= 7:\n            char_count += 1\n            output.append(word)\n    return char_count, output\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            yield text[i]\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_char_numeric(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_char_symbols(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_digit(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_digits(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_dashes(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_symbols(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_tokens(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_one_word(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_all_word(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_one_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_all_lines(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_line_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            yield text[i]\ndef find_split_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 5:\n            yield text[i]\ndef find_line_split_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            yield text[i]\ndef find_line_splits(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            yield text[i]\ndef find_numeric_only(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_symbols_only(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_long_words(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_long_lines(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_long_lines_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_long_lines_split_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 1:\n            yield text[i]\ndef find_long_lines_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            yield text[i]\ndef find_long_words_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_symbols_only_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_tokens_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_tokens_split_on_new_line(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 3:\n            yield text[i]\ndef find_tokens_split_on_new_line_split(text):\n    '''\n    Write a function to find all words which are at least 3 characters long i"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n    for num in nums:\n        square_nums.append(num*num)\n    return square_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for i in nums:\n        square_list.append(i ** 2)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        i = i**2\n        print(i)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        if num**2 <= len(nums):\n            square_list.append(num**2)\n        else:\n            pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums.sort()\n    square = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Your code here\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums if x**2 <= 1000]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    squares = []\n    for number in nums:\n        square = number ** 2\n        squares.append(square)\n    return squares\n"
    }
]